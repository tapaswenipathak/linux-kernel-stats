commit 7ae6aa649394e1e7f6dafb55ce0d578c0572a280
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 805665aa5295b975c49ff03fb3779f55a9dd8dcf
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Dec 10 20:46:48 2020 +0100

    clocksource/drivers/sh_cmt: Make sure channel clock supply is enabled
    
    [ Upstream commit 2a97d55333e4299f32c98cca6dc5c4db1c5855fc ]
    
    The Renesas Compare Match Timer 0 and 1 (CMT0/1) variants have a
    register to control the clock supply to the individual channels.
    Currently the driver does not touch this register, and relies on the
    documented initial value, which has the clock supply enabled for all
    channels present.
    
    However, when Linux starts on the APE6-EVM development board, only the
    clock supply to the first CMT1 channel is enabled.  Hence the first
    channel (used as a clockevent) works, while the second channel (used as
    a clocksource) does not.  Note that the default system clocksource is
    the Cortex-A15 architectured timer, and the user needs to manually
    switch to the CMT1 clocksource to trigger the broken behavior.
    
    Fix this by removing the fragile dependency on implicit reset and/or
    boot loader state, and by enabling the clock supply explicitly for all
    channels used instead.  This requires postponing the clk_disable() call,
    else the timer's registers cannot be accessed in sh_cmt_setup_channel().
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201210194648.2901899-1-geert+renesas@glider.be
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8b8e0d2bbf7d1172c4f435621418e29ee408d46
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eac0ccacbd957445decdfcba4531a58d677b03b3
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Dec 10 20:46:48 2020 +0100

    clocksource/drivers/sh_cmt: Make sure channel clock supply is enabled
    
    [ Upstream commit 2a97d55333e4299f32c98cca6dc5c4db1c5855fc ]
    
    The Renesas Compare Match Timer 0 and 1 (CMT0/1) variants have a
    register to control the clock supply to the individual channels.
    Currently the driver does not touch this register, and relies on the
    documented initial value, which has the clock supply enabled for all
    channels present.
    
    However, when Linux starts on the APE6-EVM development board, only the
    clock supply to the first CMT1 channel is enabled.  Hence the first
    channel (used as a clockevent) works, while the second channel (used as
    a clocksource) does not.  Note that the default system clocksource is
    the Cortex-A15 architectured timer, and the user needs to manually
    switch to the CMT1 clocksource to trigger the broken behavior.
    
    Fix this by removing the fragile dependency on implicit reset and/or
    boot loader state, and by enabling the clock supply explicitly for all
    channels used instead.  This requires postponing the clk_disable() call,
    else the timer's registers cannot be accessed in sh_cmt_setup_channel().
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201210194648.2901899-1-geert+renesas@glider.be
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 550a4fac7ecfee5bac6a0dd772456ca62fb72f46
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34fe9c2251f19786a6689149a6212c6c0de1d63b
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bc9c5ad522b98d9c8744bb1a5651278b6cd02c2
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 29 19:44:27 2022 +0800

    clocksource/drivers/timer-ti-dm: Fix missing clk_disable_unprepare in dmtimer_systimer_init_clock()
    
    [ Upstream commit 180d35a7c05d520314a590c99ad8643d0213f28b ]
    
    If clk_get_rate() fails which is called after clk_prepare_enable(),
    clk_disable_unprepare() need be called in error path to disable the
    clock in dmtimer_systimer_init_clock().
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221029114427.946520-1-yangyingliang@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8e7a44f488c1190ebadde6e038bf7940f50664a
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Nov 30 22:06:09 2022 +0100

    clocksource/drivers/sh_cmt: Access registers according to spec
    
    [ Upstream commit 3f44f7156f59cae06e9160eafb5d8b2dfd09e639 ]
    
    Documentation for most CMTs say that it takes two input clocks before
    changes propagate to the timer. This is especially relevant when the timer
    is stopped to change further settings.
    
    Implement the delays according to the spec. To avoid unnecessary delays in
    atomic mode, also check if the to-be-written value actually differs.
    
    CMCNT is a bit special because testing showed that it requires 3 cycles to
    propagate, which affects all CMTs. Also, the WRFLAG needs to be checked
    before writing. This fixes "cannot clear CMCNT" messages which occur often
    on R-Car Gen4 SoCs, but only very rarely on older SoCs for some reason.
    
    Fixes: 81b3b2711072 ("clocksource: sh_cmt: Add support for multiple channels per device")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20221130210609.7718-1-wsa+renesas@sang-engineering.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0853787db28e99dc6d014761479ace7b8b4704d9
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Dec 10 20:46:48 2020 +0100

    clocksource/drivers/sh_cmt: Make sure channel clock supply is enabled
    
    [ Upstream commit 2a97d55333e4299f32c98cca6dc5c4db1c5855fc ]
    
    The Renesas Compare Match Timer 0 and 1 (CMT0/1) variants have a
    register to control the clock supply to the individual channels.
    Currently the driver does not touch this register, and relies on the
    documented initial value, which has the clock supply enabled for all
    channels present.
    
    However, when Linux starts on the APE6-EVM development board, only the
    clock supply to the first CMT1 channel is enabled.  Hence the first
    channel (used as a clockevent) works, while the second channel (used as
    a clocksource) does not.  Note that the default system clocksource is
    the Cortex-A15 architectured timer, and the user needs to manually
    switch to the CMT1 clocksource to trigger the broken behavior.
    
    Fix this by removing the fragile dependency on implicit reset and/or
    boot loader state, and by enabling the clock supply explicitly for all
    channels used instead.  This requires postponing the clk_disable() call,
    else the timer's registers cannot be accessed in sh_cmt_setup_channel().
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201210194648.2901899-1-geert+renesas@glider.be
    Stable-dep-of: 3f44f7156f59 ("clocksource/drivers/sh_cmt: Access registers according to spec")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34cd15d83b7206188d440b29b68084fcafde9395
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ee059d06a5d3c15465959e0472993e80fbe4e81
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94e231c9d6f2648d2f1f68e7f476e050ee0a6159
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9971fa4d8bde63d49c743c1b32d12fbbd3a30bd
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    commit 88430ebcbc0ec637b710b947738839848c20feff upstream.
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 404b4b9770d88a1a81147ecee354da412c7267cd
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 29 19:44:27 2022 +0800

    clocksource/drivers/timer-ti-dm: Fix missing clk_disable_unprepare in dmtimer_systimer_init_clock()
    
    [ Upstream commit 180d35a7c05d520314a590c99ad8643d0213f28b ]
    
    If clk_get_rate() fails which is called after clk_prepare_enable(),
    clk_disable_unprepare() need be called in error path to disable the
    clock in dmtimer_systimer_init_clock().
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221029114427.946520-1-yangyingliang@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b0a5f9e153ef06f47ae74ecb69beaf575f5f08c
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Oct 28 13:35:26 2022 +0300

    clocksource/drivers/timer-ti-dm: Fix warning for omap_timer_match
    
    [ Upstream commit 9688498b1648aa98a3ee45d9f07763c099f6fb12 ]
    
    We can now get a warning for 'omap_timer_match' defined but not used.
    Let's fix this by dropping of_match_ptr for omap_timer_match.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Fixes: ab0bbef3ae0f ("clocksource/drivers/timer-ti-dm: Make timer selectable for ARCH_K3")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221028103526.40319-1-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fba0ec3a25ee84d5662bca6908a5d4cc7a422e04
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Nov 30 22:06:09 2022 +0100

    clocksource/drivers/sh_cmt: Access registers according to spec
    
    [ Upstream commit 3f44f7156f59cae06e9160eafb5d8b2dfd09e639 ]
    
    Documentation for most CMTs say that it takes two input clocks before
    changes propagate to the timer. This is especially relevant when the timer
    is stopped to change further settings.
    
    Implement the delays according to the spec. To avoid unnecessary delays in
    atomic mode, also check if the to-be-written value actually differs.
    
    CMCNT is a bit special because testing showed that it requires 3 cycles to
    propagate, which affects all CMTs. Also, the WRFLAG needs to be checked
    before writing. This fixes "cannot clear CMCNT" messages which occur often
    on R-Car Gen4 SoCs, but only very rarely on older SoCs for some reason.
    
    Fixes: 81b3b2711072 ("clocksource: sh_cmt: Add support for multiple channels per device")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20221130210609.7718-1-wsa+renesas@sang-engineering.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97a4fb69e7ddc01f350282eadeac8b58a712d7a4
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 29 19:44:27 2022 +0800

    clocksource/drivers/timer-ti-dm: Fix missing clk_disable_unprepare in dmtimer_systimer_init_clock()
    
    [ Upstream commit 180d35a7c05d520314a590c99ad8643d0213f28b ]
    
    If clk_get_rate() fails which is called after clk_prepare_enable(),
    clk_disable_unprepare() need be called in error path to disable the
    clock in dmtimer_systimer_init_clock().
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221029114427.946520-1-yangyingliang@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7e1ee3ec11336c1a5e6d2f2d1edcd6183fd0069
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Oct 28 13:35:26 2022 +0300

    clocksource/drivers/timer-ti-dm: Fix warning for omap_timer_match
    
    [ Upstream commit 9688498b1648aa98a3ee45d9f07763c099f6fb12 ]
    
    We can now get a warning for 'omap_timer_match' defined but not used.
    Let's fix this by dropping of_match_ptr for omap_timer_match.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Fixes: ab0bbef3ae0f ("clocksource/drivers/timer-ti-dm: Make timer selectable for ARCH_K3")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221028103526.40319-1-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e02d40fca561cf64d113b6e6ce092d09995cdbe8
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Nov 30 22:06:09 2022 +0100

    clocksource/drivers/sh_cmt: Access registers according to spec
    
    [ Upstream commit 3f44f7156f59cae06e9160eafb5d8b2dfd09e639 ]
    
    Documentation for most CMTs say that it takes two input clocks before
    changes propagate to the timer. This is especially relevant when the timer
    is stopped to change further settings.
    
    Implement the delays according to the spec. To avoid unnecessary delays in
    atomic mode, also check if the to-be-written value actually differs.
    
    CMCNT is a bit special because testing showed that it requires 3 cycles to
    propagate, which affects all CMTs. Also, the WRFLAG needs to be checked
    before writing. This fixes "cannot clear CMCNT" messages which occur often
    on R-Car Gen4 SoCs, but only very rarely on older SoCs for some reason.
    
    Fixes: 81b3b2711072 ("clocksource: sh_cmt: Add support for multiple channels per device")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20221130210609.7718-1-wsa+renesas@sang-engineering.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9cabd5f4f1ba7821b73979681cac87781df62e8c
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 29 19:44:27 2022 +0800

    clocksource/drivers/timer-ti-dm: Fix missing clk_disable_unprepare in dmtimer_systimer_init_clock()
    
    [ Upstream commit 180d35a7c05d520314a590c99ad8643d0213f28b ]
    
    If clk_get_rate() fails which is called after clk_prepare_enable(),
    clk_disable_unprepare() need be called in error path to disable the
    clock in dmtimer_systimer_init_clock().
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221029114427.946520-1-yangyingliang@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f8e6fe09cfa0b55668ba8b74024ee2a4f977932
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Nov 30 22:06:09 2022 +0100

    clocksource/drivers/sh_cmt: Access registers according to spec
    
    [ Upstream commit 3f44f7156f59cae06e9160eafb5d8b2dfd09e639 ]
    
    Documentation for most CMTs say that it takes two input clocks before
    changes propagate to the timer. This is especially relevant when the timer
    is stopped to change further settings.
    
    Implement the delays according to the spec. To avoid unnecessary delays in
    atomic mode, also check if the to-be-written value actually differs.
    
    CMCNT is a bit special because testing showed that it requires 3 cycles to
    propagate, which affects all CMTs. Also, the WRFLAG needs to be checked
    before writing. This fixes "cannot clear CMCNT" messages which occur often
    on R-Car Gen4 SoCs, but only very rarely on older SoCs for some reason.
    
    Fixes: 81b3b2711072 ("clocksource: sh_cmt: Add support for multiple channels per device")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20221130210609.7718-1-wsa+renesas@sang-engineering.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2dd60fd3fe98bd36a91b0c6e10bfe9d66258f84
Author: Lin Liu <lin.liu@citrix.com>
Date:   Fri Dec 2 08:52:48 2022 +0000

    xen-netfront: Fix NULL sring after live migration
    
    [ Upstream commit d50b7914fae04d840ce36491d22133070b18cca9 ]
    
    A NAPI is setup for each network sring to poll data to kernel
    The sring with source host is destroyed before live migration and
    new sring with target host is setup after live migration.
    The NAPI for the old sring is not deleted until setup new sring
    with target host after migration. With busy_poll/busy_read enabled,
    the NAPI can be polled before got deleted when resume VM.
    
    BUG: unable to handle kernel NULL pointer dereference at
    0000000000000008
    IP: xennet_poll+0xae/0xd20
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    Call Trace:
     finish_task_switch+0x71/0x230
     timerqueue_del+0x1d/0x40
     hrtimer_try_to_cancel+0xb5/0x110
     xennet_alloc_rx_buffers+0x2a0/0x2a0
     napi_busy_loop+0xdb/0x270
     sock_poll+0x87/0x90
     do_sys_poll+0x26f/0x580
     tracing_map_insert+0x1d4/0x2f0
     event_hist_trigger+0x14a/0x260
    
     finish_task_switch+0x71/0x230
     __schedule+0x256/0x890
     recalc_sigpending+0x1b/0x50
     xen_sched_clock+0x15/0x20
     __rb_reserve_next+0x12d/0x140
     ring_buffer_lock_reserve+0x123/0x3d0
     event_triggers_call+0x87/0xb0
     trace_event_buffer_commit+0x1c4/0x210
     xen_clocksource_get_cycles+0x15/0x20
     ktime_get_ts64+0x51/0xf0
     SyS_ppoll+0x160/0x1a0
     SyS_ppoll+0x160/0x1a0
     do_syscall_64+0x73/0x130
     entry_SYSCALL_64_after_hwframe+0x41/0xa6
    ...
    RIP: xennet_poll+0xae/0xd20 RSP: ffffb4f041933900
    CR2: 0000000000000008
    ---[ end trace f8601785b354351c ]---
    
    xen frontend should remove the NAPIs for the old srings before live
    migration as the bond srings are destroyed
    
    There is a tiny window between the srings are set to NULL and
    the NAPIs are disabled, It is safe as the NAPI threads are still
    frozen at that time
    
    Signed-off-by: Lin Liu <lin.liu@citrix.com>
    Fixes: 4ec2411980d0 ([NET]: Do not check netif_running() and carrier state in ->poll())
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6e897d4fe2f89c0bd94600a40bedf5e6e75e050
Author: Lin Liu <lin.liu@citrix.com>
Date:   Fri Dec 2 08:52:48 2022 +0000

    xen-netfront: Fix NULL sring after live migration
    
    [ Upstream commit d50b7914fae04d840ce36491d22133070b18cca9 ]
    
    A NAPI is setup for each network sring to poll data to kernel
    The sring with source host is destroyed before live migration and
    new sring with target host is setup after live migration.
    The NAPI for the old sring is not deleted until setup new sring
    with target host after migration. With busy_poll/busy_read enabled,
    the NAPI can be polled before got deleted when resume VM.
    
    BUG: unable to handle kernel NULL pointer dereference at
    0000000000000008
    IP: xennet_poll+0xae/0xd20
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    Call Trace:
     finish_task_switch+0x71/0x230
     timerqueue_del+0x1d/0x40
     hrtimer_try_to_cancel+0xb5/0x110
     xennet_alloc_rx_buffers+0x2a0/0x2a0
     napi_busy_loop+0xdb/0x270
     sock_poll+0x87/0x90
     do_sys_poll+0x26f/0x580
     tracing_map_insert+0x1d4/0x2f0
     event_hist_trigger+0x14a/0x260
    
     finish_task_switch+0x71/0x230
     __schedule+0x256/0x890
     recalc_sigpending+0x1b/0x50
     xen_sched_clock+0x15/0x20
     __rb_reserve_next+0x12d/0x140
     ring_buffer_lock_reserve+0x123/0x3d0
     event_triggers_call+0x87/0xb0
     trace_event_buffer_commit+0x1c4/0x210
     xen_clocksource_get_cycles+0x15/0x20
     ktime_get_ts64+0x51/0xf0
     SyS_ppoll+0x160/0x1a0
     SyS_ppoll+0x160/0x1a0
     do_syscall_64+0x73/0x130
     entry_SYSCALL_64_after_hwframe+0x41/0xa6
    ...
    RIP: xennet_poll+0xae/0xd20 RSP: ffffb4f041933900
    CR2: 0000000000000008
    ---[ end trace f8601785b354351c ]---
    
    xen frontend should remove the NAPIs for the old srings before live
    migration as the bond srings are destroyed
    
    There is a tiny window between the srings are set to NULL and
    the NAPIs are disabled, It is safe as the NAPI threads are still
    frozen at that time
    
    Signed-off-by: Lin Liu <lin.liu@citrix.com>
    Fixes: 4ec2411980d0 ([NET]: Do not check netif_running() and carrier state in ->poll())
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6860c889f4ad50b6ab696f5ea154295d72cf27a
Author: Lin Liu <lin.liu@citrix.com>
Date:   Fri Dec 2 08:52:48 2022 +0000

    xen-netfront: Fix NULL sring after live migration
    
    [ Upstream commit d50b7914fae04d840ce36491d22133070b18cca9 ]
    
    A NAPI is setup for each network sring to poll data to kernel
    The sring with source host is destroyed before live migration and
    new sring with target host is setup after live migration.
    The NAPI for the old sring is not deleted until setup new sring
    with target host after migration. With busy_poll/busy_read enabled,
    the NAPI can be polled before got deleted when resume VM.
    
    BUG: unable to handle kernel NULL pointer dereference at
    0000000000000008
    IP: xennet_poll+0xae/0xd20
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    Call Trace:
     finish_task_switch+0x71/0x230
     timerqueue_del+0x1d/0x40
     hrtimer_try_to_cancel+0xb5/0x110
     xennet_alloc_rx_buffers+0x2a0/0x2a0
     napi_busy_loop+0xdb/0x270
     sock_poll+0x87/0x90
     do_sys_poll+0x26f/0x580
     tracing_map_insert+0x1d4/0x2f0
     event_hist_trigger+0x14a/0x260
    
     finish_task_switch+0x71/0x230
     __schedule+0x256/0x890
     recalc_sigpending+0x1b/0x50
     xen_sched_clock+0x15/0x20
     __rb_reserve_next+0x12d/0x140
     ring_buffer_lock_reserve+0x123/0x3d0
     event_triggers_call+0x87/0xb0
     trace_event_buffer_commit+0x1c4/0x210
     xen_clocksource_get_cycles+0x15/0x20
     ktime_get_ts64+0x51/0xf0
     SyS_ppoll+0x160/0x1a0
     SyS_ppoll+0x160/0x1a0
     do_syscall_64+0x73/0x130
     entry_SYSCALL_64_after_hwframe+0x41/0xa6
    ...
    RIP: xennet_poll+0xae/0xd20 RSP: ffffb4f041933900
    CR2: 0000000000000008
    ---[ end trace f8601785b354351c ]---
    
    xen frontend should remove the NAPIs for the old srings before live
    migration as the bond srings are destroyed
    
    There is a tiny window between the srings are set to NULL and
    the NAPIs are disabled, It is safe as the NAPI threads are still
    frozen at that time
    
    Signed-off-by: Lin Liu <lin.liu@citrix.com>
    Fixes: 4ec2411980d0 ([NET]: Do not check netif_running() and carrier state in ->poll())
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed773dd798bf720756d20021b8d8a4a3d7184bda
Author: Lin Liu <lin.liu@citrix.com>
Date:   Fri Dec 2 08:52:48 2022 +0000

    xen-netfront: Fix NULL sring after live migration
    
    [ Upstream commit d50b7914fae04d840ce36491d22133070b18cca9 ]
    
    A NAPI is setup for each network sring to poll data to kernel
    The sring with source host is destroyed before live migration and
    new sring with target host is setup after live migration.
    The NAPI for the old sring is not deleted until setup new sring
    with target host after migration. With busy_poll/busy_read enabled,
    the NAPI can be polled before got deleted when resume VM.
    
    BUG: unable to handle kernel NULL pointer dereference at
    0000000000000008
    IP: xennet_poll+0xae/0xd20
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    Call Trace:
     finish_task_switch+0x71/0x230
     timerqueue_del+0x1d/0x40
     hrtimer_try_to_cancel+0xb5/0x110
     xennet_alloc_rx_buffers+0x2a0/0x2a0
     napi_busy_loop+0xdb/0x270
     sock_poll+0x87/0x90
     do_sys_poll+0x26f/0x580
     tracing_map_insert+0x1d4/0x2f0
     event_hist_trigger+0x14a/0x260
    
     finish_task_switch+0x71/0x230
     __schedule+0x256/0x890
     recalc_sigpending+0x1b/0x50
     xen_sched_clock+0x15/0x20
     __rb_reserve_next+0x12d/0x140
     ring_buffer_lock_reserve+0x123/0x3d0
     event_triggers_call+0x87/0xb0
     trace_event_buffer_commit+0x1c4/0x210
     xen_clocksource_get_cycles+0x15/0x20
     ktime_get_ts64+0x51/0xf0
     SyS_ppoll+0x160/0x1a0
     SyS_ppoll+0x160/0x1a0
     do_syscall_64+0x73/0x130
     entry_SYSCALL_64_after_hwframe+0x41/0xa6
    ...
    RIP: xennet_poll+0xae/0xd20 RSP: ffffb4f041933900
    CR2: 0000000000000008
    ---[ end trace f8601785b354351c ]---
    
    xen frontend should remove the NAPIs for the old srings before live
    migration as the bond srings are destroyed
    
    There is a tiny window between the srings are set to NULL and
    the NAPIs are disabled, It is safe as the NAPI threads are still
    frozen at that time
    
    Signed-off-by: Lin Liu <lin.liu@citrix.com>
    Fixes: 4ec2411980d0 ([NET]: Do not check netif_running() and carrier state in ->poll())
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99859947517e446058ad7243ee81d2f9801fa3dd
Author: Lin Liu <lin.liu@citrix.com>
Date:   Fri Dec 2 08:52:48 2022 +0000

    xen-netfront: Fix NULL sring after live migration
    
    [ Upstream commit d50b7914fae04d840ce36491d22133070b18cca9 ]
    
    A NAPI is setup for each network sring to poll data to kernel
    The sring with source host is destroyed before live migration and
    new sring with target host is setup after live migration.
    The NAPI for the old sring is not deleted until setup new sring
    with target host after migration. With busy_poll/busy_read enabled,
    the NAPI can be polled before got deleted when resume VM.
    
    BUG: unable to handle kernel NULL pointer dereference at
    0000000000000008
    IP: xennet_poll+0xae/0xd20
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    Call Trace:
     finish_task_switch+0x71/0x230
     timerqueue_del+0x1d/0x40
     hrtimer_try_to_cancel+0xb5/0x110
     xennet_alloc_rx_buffers+0x2a0/0x2a0
     napi_busy_loop+0xdb/0x270
     sock_poll+0x87/0x90
     do_sys_poll+0x26f/0x580
     tracing_map_insert+0x1d4/0x2f0
     event_hist_trigger+0x14a/0x260
    
     finish_task_switch+0x71/0x230
     __schedule+0x256/0x890
     recalc_sigpending+0x1b/0x50
     xen_sched_clock+0x15/0x20
     __rb_reserve_next+0x12d/0x140
     ring_buffer_lock_reserve+0x123/0x3d0
     event_triggers_call+0x87/0xb0
     trace_event_buffer_commit+0x1c4/0x210
     xen_clocksource_get_cycles+0x15/0x20
     ktime_get_ts64+0x51/0xf0
     SyS_ppoll+0x160/0x1a0
     SyS_ppoll+0x160/0x1a0
     do_syscall_64+0x73/0x130
     entry_SYSCALL_64_after_hwframe+0x41/0xa6
    ...
    RIP: xennet_poll+0xae/0xd20 RSP: ffffb4f041933900
    CR2: 0000000000000008
    ---[ end trace f8601785b354351c ]---
    
    xen frontend should remove the NAPIs for the old srings before live
    migration as the bond srings are destroyed
    
    There is a tiny window between the srings are set to NULL and
    the NAPIs are disabled, It is safe as the NAPI threads are still
    frozen at that time
    
    Signed-off-by: Lin Liu <lin.liu@citrix.com>
    Fixes: 4ec2411980d0 ([NET]: Do not check netif_running() and carrier state in ->poll())
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a1d4434db5f86c50018fe0aab299ac97dc15b76
Merge: 79ad89123c25 18a207849218
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 12 12:52:02 2022 -0800

    Merge tag 'timers-core-2022-12-10' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Updates for timers, timekeeping and drivers:
    
      Core:
    
       - The timer_shutdown[_sync]() infrastructure:
    
         Tearing down timers can be tedious when there are circular
         dependencies to other things which need to be torn down. A prime
         example is timer and workqueue where the timer schedules work and
         the work arms the timer.
    
         What needs to prevented is that pending work which is drained via
         destroy_workqueue() does not rearm the previously shutdown timer.
         Nothing in that shutdown sequence relies on the timer being
         functional.
    
         The conclusion was that the semantics of timer_shutdown_sync()
         should be:
            - timer is not enqueued
            - timer callback is not running
            - timer cannot be rearmed
    
         Preventing the rearming of shutdown timers is done by discarding
         rearm attempts silently.
    
         A warning for the case that a rearm attempt of a shutdown timer is
         detected would not be really helpful because it's entirely unclear
         how it should be acted upon. The only way to address such a case is
         to add 'if (in_shutdown)' conditionals all over the place. This is
         error prone and in most cases of teardown not required all.
    
       - The real fix for the bluetooth HCI teardown based on
         timer_shutdown_sync().
    
         A larger scale conversion to timer_shutdown_sync() is work in
         progress.
    
       - Consolidation of VDSO time namespace helper functions
    
       - Small fixes for timer and timerqueue
    
      Drivers:
    
       - Prevent integer overflow on the XGene-1 TVAL register which causes
         an never ending interrupt storm.
    
       - The usual set of new device tree bindings
    
       - Small fixes and improvements all over the place"
    
    * tag 'timers-core-2022-12-10' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (34 commits)
      dt-bindings: timer: renesas,cmt: Add r8a779g0 CMT support
      dt-bindings: timer: renesas,tmu: Add r8a779g0 support
      clocksource/drivers/arm_arch_timer: Use kstrtobool() instead of strtobool()
      clocksource/drivers/timer-ti-dm: Fix missing clk_disable_unprepare in dmtimer_systimer_init_clock()
      clocksource/drivers/timer-ti-dm: Clear settings on probe and free
      clocksource/drivers/timer-ti-dm: Make timer_get_irq static
      clocksource/drivers/timer-ti-dm: Fix warning for omap_timer_match
      clocksource/drivers/arm_arch_timer: Fix XGene-1 TVAL register math error
      clocksource/drivers/timer-npcm7xx: Enable timer 1 clock before use
      dt-bindings: timer: nuvoton,npcm7xx-timer: Allow specifying all clocks
      dt-bindings: timer: rockchip: Add rockchip,rk3128-timer
      clockevents: Repair kernel-doc for clockevent_delta2ns()
      clocksource/drivers/ingenic-ost: Define pm functions properly in platform_driver struct
      clocksource/drivers/sh_cmt: Access registers according to spec
      vdso/timens: Refactor copy-pasted find_timens_vvar_page() helper into one copy
      Bluetooth: hci_qca: Fix the teardown problem for real
      timers: Update the documentation to reflect on the new timer_shutdown() API
      timers: Provide timer_shutdown[_sync]()
      timers: Add shutdown mechanism to the internal functions
      timers: Split [try_to_]del_timer[_sync]() to prepare for shutdown mode
      ...

commit 79ad89123c2523a7982d457641dd64f339307e6c
Merge: 369013162f7a ff4c85c05333
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 12 12:44:03 2022 -0800

    Merge tag 'x86-cleanups-2022-12-10' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 cleanups from Thomas Gleixner:
     "A set of x86 cleanups:
    
       - Rework the handling of x86_regset for 32 and 64 bit.
    
         The original implementation tried to minimize the allocation size
         with quite some hard to understand and fragile tricks. Make it
         robust and straight forward by separating the register enumerations
         for 32 and 64 bit completely.
    
       - Add a few missing static annotations
    
       - Remove the stale unused setup_once() assembly function
    
       - Address a few minor static analysis and kernel-doc warnings"
    
    * tag 'x86-cleanups-2022-12-10' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/asm/32: Remove setup_once()
      x86/kaslr: Fix process_mem_region()'s return value
      x86: Fix misc small issues
      x86/boot: Repair kernel-doc for boot_kstrtoul()
      x86: Improve formatting of user_regset arrays
      x86: Separate out x86_regset for 32 and 64 bit
      x86/i8259: Make default_legacy_pic static
      x86/tsc: Make art_related_clocksource static

commit 7d62159919c90fbcd9ee808e9f1b776eae990d53
Merge: 43686598b557 32c97d980e2e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 12 09:34:16 2022 -0800

    Merge tag 'hyperv-next-signed-20221208' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux
    
    Pull hyperv updates from Wei Liu:
    
     - Drop unregister syscore from hyperv_cleanup to avoid hang (Gaurav
       Kohli)
    
     - Clean up panic path for Hyper-V framebuffer (Guilherme G. Piccoli)
    
     - Allow IRQ remapping to work without x2apic (Nuno Das Neves)
    
     - Fix comments (Olaf Hering)
    
     - Expand hv_vp_assist_page definition (Saurabh Sengar)
    
     - Improvement to page reporting (Shradha Gupta)
    
     - Make sure TSC clocksource works when Linux runs as the root partition
       (Stanislav Kinsburskiy)
    
    * tag 'hyperv-next-signed-20221208' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux:
      x86/hyperv: Remove unregister syscore call from Hyper-V cleanup
      iommu/hyper-v: Allow hyperv irq remapping without x2apic
      clocksource: hyper-v: Add TSC page support for root partition
      clocksource: hyper-v: Use TSC PFN getter to map vvar page
      clocksource: hyper-v: Introduce TSC PFN getter
      clocksource: hyper-v: Introduce a pointer to TSC page
      x86/hyperv: Expand definition of struct hv_vp_assist_page
      PCI: hv: update comment in x86 specific hv_arch_irq_unmask
      hv: fix comment typo in vmbus_channel/low_latency
      drivers: hv, hyperv_fb: Untangle and refactor Hyper-V panic notifiers
      video: hyperv_fb: Avoid taking busy spinlock on panic path
      hv_balloon: Add support for configurable order free page reporting
      mm/page_reporting: Add checks for page_reporting_order param

commit 5f103ad83b5c77f82313247014e08dd3471edf1b
Author: Conor Dooley <conor.dooley@microchip.com>
Date:   Tue Nov 22 12:16:21 2022 +0000

    Revert "clocksource/drivers/riscv: Events are stopped during CPU suspend"
    
    [ Upstream commit d9f15a9de44affe733e34f93bc184945ba277e6d ]
    
    This reverts commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d.
    
    On the subject of suspend, the RISC-V SBI spec states:
    
      This does not cover whether any given events actually reach the hart or
      not, just what the hart will do if it receives an event. On PolarFire
      SoC, and potentially other SiFive based implementations, events from the
      RISC-V timer do reach a hart during suspend. This is not the case for the
      implementation on the Allwinner D1 - there timer events are not received
      during suspend.
    
    To fix this, the CLOCK_EVT_FEAT_C3STOP (mis)feature was enabled for the
    timer driver - but this has broken both RCU stall detection and timers
    generally on PolarFire SoC and potentially other SiFive based
    implementations.
    
    If an AXI read to the PCIe controller on PolarFire SoC times out, the
    system will stall, however, with CLOCK_EVT_FEAT_C3STOP active, the system
    just locks up without RCU stalling:
    
            io scheduler mq-deadline registered
            io scheduler kyber registered
            microchip-pcie 2000000000.pcie: host bridge /soc/pcie@2000000000 ranges:
            microchip-pcie 2000000000.pcie:      MEM 0x2008000000..0x2087ffffff -> 0x0008000000
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: axi read request error
            microchip-pcie 2000000000.pcie: axi read timeout
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            Freeing initrd memory: 7332K
    
    Similarly issues were reported with clock_nanosleep() - with a test app
    that sleeps each cpu for 6, 5, 4, 3 ms respectively, HZ=250 & the blamed
    commit in place, the sleep times are rounded up to the next jiffy:
    
    == CPU: 1 ==      == CPU: 2 ==      == CPU: 3 ==      == CPU: 4 ==
    Mean: 7.974992    Mean: 7.976534    Mean: 7.962591    Mean: 3.952179
    Std Dev: 0.154374 Std Dev: 0.156082 Std Dev: 0.171018 Std Dev: 0.076193
    Hi: 9.472000      Hi: 10.495000     Hi: 8.864000      Hi: 4.736000
    Lo: 6.087000      Lo: 6.380000      Lo: 4.872000      Lo: 3.403000
    Samples: 521      Samples: 521      Samples: 521      Samples: 521
    
    Fortunately, the D1 has a second timer, which is "currently used in
    preference to the RISC-V/SBI timer driver" so a revert here does not
    hurt operation of D1 in its current form.
    
    Ultimately, a DeviceTree property (or node) will be added to encode the
    behaviour of the timers, but until then revert the addition of
    CLOCK_EVT_FEAT_C3STOP.
    
    Fixes: 232ccac1bd9b ("clocksource/drivers/riscv: Events are stopped during CPU suspend")
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Samuel Holland <samuel@sholland.org>
    Link: https://lore.kernel.org/linux-riscv/YzYTNQRxLr7Q9JR0@spud/
    Link: https://github.com/riscv-non-isa/riscv-sbi-doc/issues/98/
    Link: https://lore.kernel.org/linux-riscv/bf6d3b1f-f703-4a25-833e-972a44a04114@sholland.org/
    Link: https://lore.kernel.org/r/20221122121620.3522431-1-conor.dooley@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2eaf546bdb0d069737ddeca1a0e8c56c564340dd
Author: Joe Korty <joe.korty@concurrent-rt.com>
Date:   Mon Nov 21 14:53:43 2022 +0000

    clocksource/drivers/arm_arch_timer: Fix XGene-1 TVAL register math error
    
    [ Upstream commit 839a973988a94c15002cbd81536e4af6ced2bd30 ]
    
    The TVAL register is 32 bit signed.  Thus only the lower 31 bits are
    available to specify when an interrupt is to occur at some time in the
    near future.  Attempting to specify a larger interval with TVAL results
    in a negative time delta which means the timer fires immediately upon
    being programmed, rather than firing at that expected future time.
    
    The solution is for Linux to declare that TVAL is a 31 bit register rather
    than give its true size of 32 bits.  This prevents Linux from programming
    TVAL with a too-large value.  Note that, prior to 5.16, this little trick
    was the standard way to handle TVAL in Linux, so there is nothing new
    happening here on that front.
    
    The softlockup detector hides the issue, because it keeps generating
    short timer deadlines that are within the scope of the broken timer.
    
    Disabling it, it starts using NO_HZ with much longer timer deadlines, which
    turns into an interrupt flood:
    
     11: 1124855130  949168462  758009394   76417474  104782230   30210281
             310890 1734323687     GICv2  29 Level     arch_timer
    
    And "much longer" isn't that long: it takes less than 43s to underflow
    TVAL at 50MHz (the frequency of the counter on XGene-1).
    
    Some comments on the v1 version of this patch by Marc Zyngier:
    
      XGene implements CVAL (a 64bit comparator) in terms of TVAL (a countdown
      register) instead of the other way around. TVAL being a 32bit register,
      the width of the counter should equally be 32.  However, TVAL is a
      *signed* value, and keeps counting down in the negative range once the
      timer fires.
    
      It means that any TVAL value with bit 31 set will fire immediately,
      as it cannot be distinguished from an already expired timer. Reducing
      the timer range back to a paltry 31 bits papers over the issue.
    
      Another problem cannot be fixed though, which is that the timer interrupt
      *must* be handled within the negative countdown period, or the interrupt
      will be lost (TVAL will rollover to a positive value, indicative of a
      new timer deadline).
    
    Fixes: 012f18850452 ("clocksource/drivers/arm_arch_timer: Work around broken CVAL implementations")
    Signed-off-by: Joe Korty <joe.korty@concurrent-rt.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221024165422.GA51107@zipoli.concurrent-rt.com
    Link: https://lore.kernel.org/r/20221121145343.896018-1-maz@kernel.org
    
    [maz: revamped the commit message]
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f39891cfe79b0d55096b43f0d051bb5126e9b010
Author: Conor Dooley <conor.dooley@microchip.com>
Date:   Tue Nov 22 12:16:21 2022 +0000

    Revert "clocksource/drivers/riscv: Events are stopped during CPU suspend"
    
    [ Upstream commit d9f15a9de44affe733e34f93bc184945ba277e6d ]
    
    This reverts commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d.
    
    On the subject of suspend, the RISC-V SBI spec states:
    
      This does not cover whether any given events actually reach the hart or
      not, just what the hart will do if it receives an event. On PolarFire
      SoC, and potentially other SiFive based implementations, events from the
      RISC-V timer do reach a hart during suspend. This is not the case for the
      implementation on the Allwinner D1 - there timer events are not received
      during suspend.
    
    To fix this, the CLOCK_EVT_FEAT_C3STOP (mis)feature was enabled for the
    timer driver - but this has broken both RCU stall detection and timers
    generally on PolarFire SoC and potentially other SiFive based
    implementations.
    
    If an AXI read to the PCIe controller on PolarFire SoC times out, the
    system will stall, however, with CLOCK_EVT_FEAT_C3STOP active, the system
    just locks up without RCU stalling:
    
            io scheduler mq-deadline registered
            io scheduler kyber registered
            microchip-pcie 2000000000.pcie: host bridge /soc/pcie@2000000000 ranges:
            microchip-pcie 2000000000.pcie:      MEM 0x2008000000..0x2087ffffff -> 0x0008000000
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: axi read request error
            microchip-pcie 2000000000.pcie: axi read timeout
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            Freeing initrd memory: 7332K
    
    Similarly issues were reported with clock_nanosleep() - with a test app
    that sleeps each cpu for 6, 5, 4, 3 ms respectively, HZ=250 & the blamed
    commit in place, the sleep times are rounded up to the next jiffy:
    
    == CPU: 1 ==      == CPU: 2 ==      == CPU: 3 ==      == CPU: 4 ==
    Mean: 7.974992    Mean: 7.976534    Mean: 7.962591    Mean: 3.952179
    Std Dev: 0.154374 Std Dev: 0.156082 Std Dev: 0.171018 Std Dev: 0.076193
    Hi: 9.472000      Hi: 10.495000     Hi: 8.864000      Hi: 4.736000
    Lo: 6.087000      Lo: 6.380000      Lo: 4.872000      Lo: 3.403000
    Samples: 521      Samples: 521      Samples: 521      Samples: 521
    
    Fortunately, the D1 has a second timer, which is "currently used in
    preference to the RISC-V/SBI timer driver" so a revert here does not
    hurt operation of D1 in its current form.
    
    Ultimately, a DeviceTree property (or node) will be added to encode the
    behaviour of the timers, but until then revert the addition of
    CLOCK_EVT_FEAT_C3STOP.
    
    Fixes: 232ccac1bd9b ("clocksource/drivers/riscv: Events are stopped during CPU suspend")
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Samuel Holland <samuel@sholland.org>
    Link: https://lore.kernel.org/linux-riscv/YzYTNQRxLr7Q9JR0@spud/
    Link: https://github.com/riscv-non-isa/riscv-sbi-doc/issues/98/
    Link: https://lore.kernel.org/linux-riscv/bf6d3b1f-f703-4a25-833e-972a44a04114@sholland.org/
    Link: https://lore.kernel.org/r/20221122121620.3522431-1-conor.dooley@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a6f935ef34e900a97064b070df4c945de631c2e
Author: Conor Dooley <conor.dooley@microchip.com>
Date:   Tue Nov 22 12:16:21 2022 +0000

    Revert "clocksource/drivers/riscv: Events are stopped during CPU suspend"
    
    [ Upstream commit d9f15a9de44affe733e34f93bc184945ba277e6d ]
    
    This reverts commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d.
    
    On the subject of suspend, the RISC-V SBI spec states:
    
      This does not cover whether any given events actually reach the hart or
      not, just what the hart will do if it receives an event. On PolarFire
      SoC, and potentially other SiFive based implementations, events from the
      RISC-V timer do reach a hart during suspend. This is not the case for the
      implementation on the Allwinner D1 - there timer events are not received
      during suspend.
    
    To fix this, the CLOCK_EVT_FEAT_C3STOP (mis)feature was enabled for the
    timer driver - but this has broken both RCU stall detection and timers
    generally on PolarFire SoC and potentially other SiFive based
    implementations.
    
    If an AXI read to the PCIe controller on PolarFire SoC times out, the
    system will stall, however, with CLOCK_EVT_FEAT_C3STOP active, the system
    just locks up without RCU stalling:
    
            io scheduler mq-deadline registered
            io scheduler kyber registered
            microchip-pcie 2000000000.pcie: host bridge /soc/pcie@2000000000 ranges:
            microchip-pcie 2000000000.pcie:      MEM 0x2008000000..0x2087ffffff -> 0x0008000000
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: axi read request error
            microchip-pcie 2000000000.pcie: axi read timeout
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            Freeing initrd memory: 7332K
    
    Similarly issues were reported with clock_nanosleep() - with a test app
    that sleeps each cpu for 6, 5, 4, 3 ms respectively, HZ=250 & the blamed
    commit in place, the sleep times are rounded up to the next jiffy:
    
    == CPU: 1 ==      == CPU: 2 ==      == CPU: 3 ==      == CPU: 4 ==
    Mean: 7.974992    Mean: 7.976534    Mean: 7.962591    Mean: 3.952179
    Std Dev: 0.154374 Std Dev: 0.156082 Std Dev: 0.171018 Std Dev: 0.076193
    Hi: 9.472000      Hi: 10.495000     Hi: 8.864000      Hi: 4.736000
    Lo: 6.087000      Lo: 6.380000      Lo: 4.872000      Lo: 3.403000
    Samples: 521      Samples: 521      Samples: 521      Samples: 521
    
    Fortunately, the D1 has a second timer, which is "currently used in
    preference to the RISC-V/SBI timer driver" so a revert here does not
    hurt operation of D1 in its current form.
    
    Ultimately, a DeviceTree property (or node) will be added to encode the
    behaviour of the timers, but until then revert the addition of
    CLOCK_EVT_FEAT_C3STOP.
    
    Fixes: 232ccac1bd9b ("clocksource/drivers/riscv: Events are stopped during CPU suspend")
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Samuel Holland <samuel@sholland.org>
    Link: https://lore.kernel.org/linux-riscv/YzYTNQRxLr7Q9JR0@spud/
    Link: https://github.com/riscv-non-isa/riscv-sbi-doc/issues/98/
    Link: https://lore.kernel.org/linux-riscv/bf6d3b1f-f703-4a25-833e-972a44a04114@sholland.org/
    Link: https://lore.kernel.org/r/20221122121620.3522431-1-conor.dooley@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9decec2993374ab04554a83ca11e70c41e516bb5
Author: Conor Dooley <conor.dooley@microchip.com>
Date:   Tue Nov 22 12:16:21 2022 +0000

    Revert "clocksource/drivers/riscv: Events are stopped during CPU suspend"
    
    [ Upstream commit d9f15a9de44affe733e34f93bc184945ba277e6d ]
    
    This reverts commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d.
    
    On the subject of suspend, the RISC-V SBI spec states:
    
      This does not cover whether any given events actually reach the hart or
      not, just what the hart will do if it receives an event. On PolarFire
      SoC, and potentially other SiFive based implementations, events from the
      RISC-V timer do reach a hart during suspend. This is not the case for the
      implementation on the Allwinner D1 - there timer events are not received
      during suspend.
    
    To fix this, the CLOCK_EVT_FEAT_C3STOP (mis)feature was enabled for the
    timer driver - but this has broken both RCU stall detection and timers
    generally on PolarFire SoC and potentially other SiFive based
    implementations.
    
    If an AXI read to the PCIe controller on PolarFire SoC times out, the
    system will stall, however, with CLOCK_EVT_FEAT_C3STOP active, the system
    just locks up without RCU stalling:
    
            io scheduler mq-deadline registered
            io scheduler kyber registered
            microchip-pcie 2000000000.pcie: host bridge /soc/pcie@2000000000 ranges:
            microchip-pcie 2000000000.pcie:      MEM 0x2008000000..0x2087ffffff -> 0x0008000000
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: axi read request error
            microchip-pcie 2000000000.pcie: axi read timeout
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            Freeing initrd memory: 7332K
    
    Similarly issues were reported with clock_nanosleep() - with a test app
    that sleeps each cpu for 6, 5, 4, 3 ms respectively, HZ=250 & the blamed
    commit in place, the sleep times are rounded up to the next jiffy:
    
    == CPU: 1 ==      == CPU: 2 ==      == CPU: 3 ==      == CPU: 4 ==
    Mean: 7.974992    Mean: 7.976534    Mean: 7.962591    Mean: 3.952179
    Std Dev: 0.154374 Std Dev: 0.156082 Std Dev: 0.171018 Std Dev: 0.076193
    Hi: 9.472000      Hi: 10.495000     Hi: 8.864000      Hi: 4.736000
    Lo: 6.087000      Lo: 6.380000      Lo: 4.872000      Lo: 3.403000
    Samples: 521      Samples: 521      Samples: 521      Samples: 521
    
    Fortunately, the D1 has a second timer, which is "currently used in
    preference to the RISC-V/SBI timer driver" so a revert here does not
    hurt operation of D1 in its current form.
    
    Ultimately, a DeviceTree property (or node) will be added to encode the
    behaviour of the timers, but until then revert the addition of
    CLOCK_EVT_FEAT_C3STOP.
    
    Fixes: 232ccac1bd9b ("clocksource/drivers/riscv: Events are stopped during CPU suspend")
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Samuel Holland <samuel@sholland.org>
    Link: https://lore.kernel.org/linux-riscv/YzYTNQRxLr7Q9JR0@spud/
    Link: https://github.com/riscv-non-isa/riscv-sbi-doc/issues/98/
    Link: https://lore.kernel.org/linux-riscv/bf6d3b1f-f703-4a25-833e-972a44a04114@sholland.org/
    Link: https://lore.kernel.org/r/20221122121620.3522431-1-conor.dooley@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d50b7914fae04d840ce36491d22133070b18cca9
Author: Lin Liu <lin.liu@citrix.com>
Date:   Fri Dec 2 08:52:48 2022 +0000

    xen-netfront: Fix NULL sring after live migration
    
    A NAPI is setup for each network sring to poll data to kernel
    The sring with source host is destroyed before live migration and
    new sring with target host is setup after live migration.
    The NAPI for the old sring is not deleted until setup new sring
    with target host after migration. With busy_poll/busy_read enabled,
    the NAPI can be polled before got deleted when resume VM.
    
    BUG: unable to handle kernel NULL pointer dereference at
    0000000000000008
    IP: xennet_poll+0xae/0xd20
    PGD 0 P4D 0
    Oops: 0000 [#1] SMP PTI
    Call Trace:
     finish_task_switch+0x71/0x230
     timerqueue_del+0x1d/0x40
     hrtimer_try_to_cancel+0xb5/0x110
     xennet_alloc_rx_buffers+0x2a0/0x2a0
     napi_busy_loop+0xdb/0x270
     sock_poll+0x87/0x90
     do_sys_poll+0x26f/0x580
     tracing_map_insert+0x1d4/0x2f0
     event_hist_trigger+0x14a/0x260
    
     finish_task_switch+0x71/0x230
     __schedule+0x256/0x890
     recalc_sigpending+0x1b/0x50
     xen_sched_clock+0x15/0x20
     __rb_reserve_next+0x12d/0x140
     ring_buffer_lock_reserve+0x123/0x3d0
     event_triggers_call+0x87/0xb0
     trace_event_buffer_commit+0x1c4/0x210
     xen_clocksource_get_cycles+0x15/0x20
     ktime_get_ts64+0x51/0xf0
     SyS_ppoll+0x160/0x1a0
     SyS_ppoll+0x160/0x1a0
     do_syscall_64+0x73/0x130
     entry_SYSCALL_64_after_hwframe+0x41/0xa6
    ...
    RIP: xennet_poll+0xae/0xd20 RSP: ffffb4f041933900
    CR2: 0000000000000008
    ---[ end trace f8601785b354351c ]---
    
    xen frontend should remove the NAPIs for the old srings before live
    migration as the bond srings are destroyed
    
    There is a tiny window between the srings are set to NULL and
    the NAPIs are disabled, It is safe as the NAPI threads are still
    frozen at that time
    
    Signed-off-by: Lin Liu <lin.liu@citrix.com>
    Fixes: 4ec2411980d0 ([NET]: Do not check netif_running() and carrier state in ->poll())
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eea8bebd51739cc7a3bb501032ee877b4aada553
Merge: ae6bb7171171 d9f15a9de44a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Dec 4 12:33:44 2022 -0800

    Merge tag 'timers_urgent_for_v6.1_rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Borislav Petkov:
    
     - Revert a fix to RISC-V timers supposed to address an uncertainty
       whether clock events are received during S3 or not which locks up
       other RISC-V platforms. The issue will be fixed differently later.
    
    * tag 'timers_urgent_for_v6.1_rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      Revert "clocksource/drivers/riscv: Events are stopped during CPU suspend"

commit 4238568744c0a150d8901e7847092a0f871c938d
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Nov 1 22:13:58 2022 +0100

    clocksource/drivers/arm_arch_timer: Use kstrtobool() instead of strtobool()
    
    strtobool() is the same as kstrtobool().
    However, the latter is more used within the kernel.
    
    In order to remove strtobool() and slightly simplify kstrtox.h, switch to
    the other function name.
    
    While at it, include the corresponding header file (<linux/kstrtox.h>)
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Link: https://lore.kernel.org/r/f430bb12e12eb225ab1206db0be64b755ddafbdc.1667336095.git.christophe.jaillet@wanadoo.fr
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>

commit 180d35a7c05d520314a590c99ad8643d0213f28b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 29 19:44:27 2022 +0800

    clocksource/drivers/timer-ti-dm: Fix missing clk_disable_unprepare in dmtimer_systimer_init_clock()
    
    If clk_get_rate() fails which is called after clk_prepare_enable(),
    clk_disable_unprepare() need be called in error path to disable the
    clock in dmtimer_systimer_init_clock().
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221029114427.946520-1-yangyingliang@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>

commit 822963b96dfdb72ec4fb1395fbdfa778656b49d1
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Oct 28 13:38:13 2022 +0300

    clocksource/drivers/timer-ti-dm: Clear settings on probe and free
    
    Clear the timer control register on driver probe and omap_dm_timer_free().
    Otherwise we assume the consumer driver takes care of properly
    initializing timer interrupts on PWM driver module reload for example.
    
    AFAIK this is not currently needed as a fix, I just happened to run into
    this while cleaning up things.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221028103813.40783-1-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>

commit dedb2aced3e958c6f4811d3e6b392652ff0eea01
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Oct 28 13:36:04 2022 +0300

    clocksource/drivers/timer-ti-dm: Make timer_get_irq static
    
    We can make timer_get_irq() static as noted by Janusz. It is only used by
    omap_rproc_get_timer_irq() via platform data.
    
    Reported-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221028103604.40385-1-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>

commit 9688498b1648aa98a3ee45d9f07763c099f6fb12
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Oct 28 13:35:26 2022 +0300

    clocksource/drivers/timer-ti-dm: Fix warning for omap_timer_match
    
    We can now get a warning for 'omap_timer_match' defined but not used.
    Let's fix this by dropping of_match_ptr for omap_timer_match.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Fixes: ab0bbef3ae0f ("clocksource/drivers/timer-ti-dm: Make timer selectable for ARCH_K3")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20221028103526.40319-1-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>

commit 45ae272a948a03a7d55748bf52d2f47d3b4e1d5a
Author: Joe Korty <joe.korty@concurrent-rt.com>
Date:   Mon Nov 21 14:53:43 2022 +0000

    clocksource/drivers/arm_arch_timer: Fix XGene-1 TVAL register math error
    
    The TVAL register is 32 bit signed.  Thus only the lower 31 bits are
    available to specify when an interrupt is to occur at some time in the
    near future.  Attempting to specify a larger interval with TVAL results
    in a negative time delta which means the timer fires immediately upon
    being programmed, rather than firing at that expected future time.
    
    The solution is for Linux to declare that TVAL is a 31 bit register rather
    than give its true size of 32 bits.  This prevents Linux from programming
    TVAL with a too-large value.  Note that, prior to 5.16, this little trick
    was the standard way to handle TVAL in Linux, so there is nothing new
    happening here on that front.
    
    The softlockup detector hides the issue, because it keeps generating
    short timer deadlines that are within the scope of the broken timer.
    
    Disable it, and you start using NO_HZ with much longer timer deadlines,
    which turns into an interrupt flood:
    
     11: 1124855130  949168462  758009394   76417474  104782230   30210281
             310890 1734323687     GICv2  29 Level     arch_timer
    
    And "much longer" isn't that long: it takes less than 43s to underflow
    TVAL at 50MHz (the frequency of the counter on XGene-1).
    
    Some comments on the v1 version of this patch by Marc Zyngier:
    
      XGene implements CVAL (a 64bit comparator) in terms of TVAL (a countdown
      register) instead of the other way around. TVAL being a 32bit register,
      the width of the counter should equally be 32.  However, TVAL is a
      *signed* value, and keeps counting down in the negative range once the
      timer fires.
    
      It means that any TVAL value with bit 31 set will fire immediately,
      as it cannot be distinguished from an already expired timer. Reducing
      the timer range back to a paltry 31 bits papers over the issue.
    
      Another problem cannot be fixed though, which is that the timer interrupt
      *must* be handled within the negative countdown period, or the interrupt
      will be lost (TVAL will rollover to a positive value, indicative of a
      new timer deadline).
    
    Cc: stable@vger.kernel.org # 5.16+
    Fixes: 012f18850452 ("clocksource/drivers/arm_arch_timer: Work around broken CVAL implementations")
    Signed-off-by: Joe Korty <joe.korty@concurrent-rt.com>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    [maz: revamped the commit message]
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221024165422.GA51107@zipoli.concurrent-rt.com
    Link: https://lore.kernel.org/r/20221121145343.896018-1-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>

commit db78539fc95cf62b0b8f274368fcd8202eac91f9
Author: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
Date:   Fri Nov 4 17:18:46 2022 +0100

    clocksource/drivers/timer-npcm7xx: Enable timer 1 clock before use
    
    In the WPCM450 SoC, the clocks for each timer can be gated individually.
    To prevent the timer 1 clock from being gated, enable it explicitly.
    
    Signed-off-by: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Link: https://lore.kernel.org/r/20221104161850.2889894-3-j.neuschaefer@gmx.net
    Signed-off-by: Daniel Lezcano <daniel.lezcano@kernel.org>

commit d9f15a9de44affe733e34f93bc184945ba277e6d
Author: Conor Dooley <conor.dooley@microchip.com>
Date:   Tue Nov 22 12:16:21 2022 +0000

    Revert "clocksource/drivers/riscv: Events are stopped during CPU suspend"
    
    This reverts commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d.
    
    On the subject of suspend, the RISC-V SBI spec states:
    
      This does not cover whether any given events actually reach the hart or
      not, just what the hart will do if it receives an event. On PolarFire
      SoC, and potentially other SiFive based implementations, events from the
      RISC-V timer do reach a hart during suspend. This is not the case for the
      implementation on the Allwinner D1 - there timer events are not received
      during suspend.
    
    To fix this, the CLOCK_EVT_FEAT_C3STOP (mis)feature was enabled for the
    timer driver - but this has broken both RCU stall detection and timers
    generally on PolarFire SoC and potentially other SiFive based
    implementations.
    
    If an AXI read to the PCIe controller on PolarFire SoC times out, the
    system will stall, however, with CLOCK_EVT_FEAT_C3STOP active, the system
    just locks up without RCU stalling:
    
            io scheduler mq-deadline registered
            io scheduler kyber registered
            microchip-pcie 2000000000.pcie: host bridge /soc/pcie@2000000000 ranges:
            microchip-pcie 2000000000.pcie:      MEM 0x2008000000..0x2087ffffff -> 0x0008000000
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: axi read request error
            microchip-pcie 2000000000.pcie: axi read timeout
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: sec error in pcie2axi buffer
            microchip-pcie 2000000000.pcie: ded error in pcie2axi buffer
            Freeing initrd memory: 7332K
    
    Similarly issues were reported with clock_nanosleep() - with a test app
    that sleeps each cpu for 6, 5, 4, 3 ms respectively, HZ=250 & the blamed
    commit in place, the sleep times are rounded up to the next jiffy:
    
    == CPU: 1 ==      == CPU: 2 ==      == CPU: 3 ==      == CPU: 4 ==
    Mean: 7.974992    Mean: 7.976534    Mean: 7.962591    Mean: 3.952179
    Std Dev: 0.154374 Std Dev: 0.156082 Std Dev: 0.171018 Std Dev: 0.076193
    Hi: 9.472000      Hi: 10.495000     Hi: 8.864000      Hi: 4.736000
    Lo: 6.087000      Lo: 6.380000      Lo: 4.872000      Lo: 3.403000
    Samples: 521      Samples: 521      Samples: 521      Samples: 521
    
    Fortunately, the D1 has a second timer, which is "currently used in
    preference to the RISC-V/SBI timer driver" so a revert here does not
    hurt operation of D1 in its current form.
    
    Ultimately, a DeviceTree property (or node) will be added to encode the
    behaviour of the timers, but until then revert the addition of
    CLOCK_EVT_FEAT_C3STOP.
    
    Fixes: 232ccac1bd9b ("clocksource/drivers/riscv: Events are stopped during CPU suspend")
    Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Acked-by: Samuel Holland <samuel@sholland.org>
    Link: https://lore.kernel.org/linux-riscv/YzYTNQRxLr7Q9JR0@spud/
    Link: https://github.com/riscv-non-isa/riscv-sbi-doc/issues/98/
    Link: https://lore.kernel.org/linux-riscv/bf6d3b1f-f703-4a25-833e-972a44a04114@sholland.org/
    Link: https://lore.kernel.org/r/20221122121620.3522431-1-conor.dooley@microchip.com

commit 035629547999d0e9095886f248c2580dc56f36c6
Author: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date:   Wed Nov 23 09:31:59 2022 +0100

    clocksource/drivers/ingenic-ost: Define pm functions properly in platform_driver struct
    
    Commit ca7b72b5a5f2 ("clocksource: Add driver for the Ingenic JZ47xx OST")
    adds the struct platform_driver ingenic_ost_driver, with the definition of
    pm functions under the non-existing config PM_SUSPEND, which means the
    intended pm functions were never actually included in any build.
    
    As the only callbacks are .suspend_noirq and .resume_noirq, we can assume
    that it is intended to be CONFIG_PM_SLEEP.
    
    Since commit 1a3c7bb08826 ("PM: core: Add new *_PM_OPS macros, deprecate
    old ones"), the default pattern for platform_driver definitions
    conditional for CONFIG_PM_SLEEP is to use pm_sleep_ptr().
    
    As __maybe_unused annotations on the dev_pm_ops structure and its callbacks
    are not needed anymore, remove these as well.
    
    Suggested-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Paul Cercueil <paul@crapouillou.net>
    Link: https://lore.kernel.org/r/20221123083159.22821-1-lukas.bulwahn@gmail.com

commit 3f44f7156f59cae06e9160eafb5d8b2dfd09e639
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Nov 30 22:06:09 2022 +0100

    clocksource/drivers/sh_cmt: Access registers according to spec
    
    Documentation for most CMTs say that it takes two input clocks before
    changes propagate to the timer. This is especially relevant when the timer
    is stopped to change further settings.
    
    Implement the delays according to the spec. To avoid unnecessary delays in
    atomic mode, also check if the to-be-written value actually differs.
    
    CMCNT is a bit special because testing showed that it requires 3 cycles to
    propagate, which affects all CMTs. Also, the WRFLAG needs to be checked
    before writing. This fixes "cannot clear CMCNT" messages which occur often
    on R-Car Gen4 SoCs, but only very rarely on older SoCs for some reason.
    
    Fixes: 81b3b2711072 ("clocksource: sh_cmt: Add support for multiple channels per device")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20221130210609.7718-1-wsa+renesas@sang-engineering.com

commit 88430ebcbc0ec637b710b947738839848c20feff
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 29 10:48:47 2022 +0800

    dm thin: Fix UAF in run_timer_softirq()
    
    When dm_resume() and dm_destroy() are concurrent, it will
    lead to UAF, as follows:
    
     BUG: KASAN: use-after-free in __run_timers+0x173/0x710
     Write of size 8 at addr ffff88816d9490f0 by task swapper/0/0
    <snip>
     Call Trace:
      <IRQ>
      dump_stack_lvl+0x73/0x9f
      print_report.cold+0x132/0xaa2
      _raw_spin_lock_irqsave+0xcd/0x160
      __run_timers+0x173/0x710
      kasan_report+0xad/0x110
      __run_timers+0x173/0x710
      __asan_store8+0x9c/0x140
      __run_timers+0x173/0x710
      call_timer_fn+0x310/0x310
      pvclock_clocksource_read+0xfa/0x250
      kvm_clock_read+0x2c/0x70
      kvm_clock_get_cycles+0xd/0x20
      ktime_get+0x5c/0x110
      lapic_next_event+0x38/0x50
      clockevents_program_event+0xf1/0x1e0
      run_timer_softirq+0x49/0x90
      __do_softirq+0x16e/0x62c
      __irq_exit_rcu+0x1fa/0x270
      irq_exit_rcu+0x12/0x20
      sysvec_apic_timer_interrupt+0x8e/0xc0
    
    One of the concurrency UAF can be shown as below:
    
            use                                  free
    do_resume                           |
      __find_device_hash_cell           |
        dm_get                          |
          atomic_inc(&md->holders)      |
                                        | dm_destroy
                                        |   __dm_destroy
                                        |     if (!dm_suspended_md(md))
                                        |     atomic_read(&md->holders)
                                        |     msleep(1)
      dm_resume                         |
        __dm_resume                     |
          dm_table_resume_targets       |
            pool_resume                 |
              do_waker  #add delay work |
      dm_put                            |
        atomic_dec(&md->holders)        |
                                        |     dm_table_destroy
                                        |       pool_dtr
                                        |         __pool_dec
                                        |           __pool_destroy
                                        |             destroy_workqueue
                                        |             kfree(pool) # free pool
            time out
    __do_softirq
      run_timer_softirq # pool has already been freed
    
    This can be easily reproduced using:
      1. create thin-pool
      2. dmsetup suspend pool
      3. dmsetup resume pool
      4. dmsetup remove_all # Concurrent with 3
    
    The root cause of this UAF bug is that dm_resume() adds timer after
    dm_destroy() skips cancelling the timer because of suspend status.
    After timeout, it will call run_timer_softirq(), however pool has
    already been freed. The concurrency UAF bug will happen.
    
    Therefore, cancelling timer again in __pool_destroy().
    
    Cc: stable@vger.kernel.org
    Fixes: 991d9fa02da0d ("dm: add thin provisioning target")
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>

commit 0408f16b43e578e70ad12a857159a0a771cfaa7c
Author: Stanislav Kinsburskiy <stanislav.kinsburskiy@gmail.com>
Date:   Fri Nov 4 20:40:55 2022 +0000

    clocksource: hyper-v: Add TSC page support for root partition
    
    Microsoft Hypervisor root partition has to map the TSC page specified
    by the hypervisor, instead of providing the page to the hypervisor like
    it's done in the guest partitions.
    
    However, it's too early to map the page when the clock is initialized, so, the
    actual mapping is happening later.
    
    Signed-off-by: Stanislav Kinsburskiy <stanislav.kinsburskiy@gmail.com>
    CC: "K. Y. Srinivasan" <kys@microsoft.com>
    CC: Haiyang Zhang <haiyangz@microsoft.com>
    CC: Wei Liu <wei.liu@kernel.org>
    CC: Dexuan Cui <decui@microsoft.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Ingo Molnar <mingo@redhat.com>
    CC: Borislav Petkov <bp@alien8.de>
    CC: Dave Hansen <dave.hansen@linux.intel.com>
    CC: x86@kernel.org
    CC: "H. Peter Anvin" <hpa@zytor.com>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: linux-hyperv@vger.kernel.org
    CC: linux-kernel@vger.kernel.org
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Anirudh Rayabharam <anrayabh@linux.microsoft.com>
    Link: https://lore.kernel.org/r/166759443644.385891.15921594265843430260.stgit@skinsburskii-cloud-desktop.internal.cloudapp.net
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit 364adc45e9aff8cc08d7b87b6e61f6f272f70308
Author: Stanislav Kinsburskiy <stanislav.kinsburskiy@gmail.com>
Date:   Thu Nov 3 17:58:59 2022 +0000

    clocksource: hyper-v: Use TSC PFN getter to map vvar page
    
    Instead of converting the virtual address to physical directly.
    
    This is a precursor patch for the upcoming support for TSC page mapping into
    Microsoft Hypervisor root partition, where TSC PFN will be defined by the
    hypervisor and thus can't be obtained by linear translation of the physical
    address.
    
    Signed-off-by: Stanislav Kinsburskiy <stanislav.kinsburskiy@gmail.com>
    CC: Andy Lutomirski <luto@kernel.org>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Ingo Molnar <mingo@redhat.com>
    CC: Borislav Petkov <bp@alien8.de>
    CC: Dave Hansen <dave.hansen@linux.intel.com>
    CC: x86@kernel.org
    CC: "H. Peter Anvin" <hpa@zytor.com>
    CC: "K. Y. Srinivasan" <kys@microsoft.com>
    CC: Haiyang Zhang <haiyangz@microsoft.com>
    CC: Wei Liu <wei.liu@kernel.org>
    CC: Dexuan Cui <decui@microsoft.com>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: linux-kernel@vger.kernel.org
    CC: linux-hyperv@vger.kernel.org
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Anirudh Rayabharam <anrayabh@linux.microsoft.com>
    Link: https://lore.kernel.org/r/166749833939.218190.14095015146003109462.stgit@skinsburskii-cloud-desktop.internal.cloudapp.net
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit e1f5c66db85fb3e0a17b803fc2e868e9c59c193a
Author: Stanislav Kinsburskiy <stanislav.kinsburskiy@gmail.com>
Date:   Thu Nov 3 17:58:54 2022 +0000

    clocksource: hyper-v: Introduce TSC PFN getter
    
    And rework the code to use it instead of the physical address, which isn't
    required by itself.
    
    This is a cleanup and precursor patch for upcoming support for TSC page
    mapping into Microsoft Hypervisor root partition, where TSC PFN will be
    defined by the hypervisor and not by the kernel.
    
    Signed-off-by: Stanislav Kinsburskiy <stanislav.kinsburskiy@gmail.com>
    CC: "K. Y. Srinivasan" <kys@microsoft.com>
    CC: Haiyang Zhang <haiyangz@microsoft.com>
    CC: Wei Liu <wei.liu@kernel.org>
    CC: Dexuan Cui <decui@microsoft.com>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: linux-hyperv@vger.kernel.org
    CC: linux-kernel@vger.kernel.org
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Anirudh Rayabharam <anrayabh@linux.microsoft.com>
    Link: https://lore.kernel.org/r/166749833420.218190.2102763345349472395.stgit@skinsburskii-cloud-desktop.internal.cloudapp.net
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit 76be6331a81607359cb41ca20ec5388c68c855e3
Author: Stanislav Kinsburskiy <stanislav.kinsburskiy@gmail.com>
Date:   Thu Nov 3 17:58:48 2022 +0000

    clocksource: hyper-v: Introduce a pointer to TSC page
    
    Will be used later keep the address of the remapped page for the root
    partition as it will be Microsoft Hypervisor defined (and thus won't be a
    static address).
    
    Signed-off-by: Stanislav Kinsburskiy <stanislav.kinsburskiy@gmail.com>
    CC: "K. Y. Srinivasan" <kys@microsoft.com>
    CC: Haiyang Zhang <haiyangz@microsoft.com>
    CC: Wei Liu <wei.liu@kernel.org>
    CC: Dexuan Cui <decui@microsoft.com>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: linux-hyperv@vger.kernel.org
    CC: linux-kernel@vger.kernel.org
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Anirudh Rayabharam <anrayabh@linux.microsoft.com>
    Link: https://lore.kernel.org/r/166749832893.218190.16503272948154953294.stgit@skinsburskii-cloud-desktop.internal.cloudapp.net
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit 715d2d960871c238e5860d121ba9735e7f6a7ff1
Merge: b465cf177377 839a973988a9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 27 12:11:00 2022 -0800

    Merge tag 'timers_urgent_for_v6.1_rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Borislav Petkov:
    
     - Return the proper timer register width (31 bits) for a 32-bit signed
       register in order to avoid a timer interrupt storm on ARM XGene-1
       hardware running in NO_HZ mode
    
    * tag 'timers_urgent_for_v6.1_rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/arm_arch_timer: Fix XGene-1 TVAL register math error

commit cd89db60e22824b82f9458753fa6cb770cca8bde
Merge: b11266ac91f2 b10dbd6fbd7d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Nov 24 11:14:09 2022 -0800

    Merge tag 'soc-fixes-6.1-4' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC fixes from Arnd Bergmann:
     "There are a bunch of late fixes that just came in, in particular a
      longer series for Rockchips devicetree files, but most of those just
      address cosmetic errors that were found during the binding validation.
    
      There are a couple of code changes:
    
       - A regression fix to the IXP42x PCI bus
    
       - A fix for a memory leak on optee, and another one for mach-mxs
    
       - Two fixes for the sunxi rsb bus driver, to address problems with
         the shutdown logic
    
      The rest are small but important devicetree fixes for a number of
      individual boards, addressing issues across all platforms:
    
       - arm global timer on older rockchip SoCs is unstable and needs to be
         disabled in favor of a more reliable clocksource
    
       - Corrections to fix bluetooth, mmc, and networking on a few Rockchip
         boards
    
       - at91/sam9g20ek UDC needs a pin controller config change
    
       - an omap board runs into mmc probe errors because of regulator nodes
         in the wrong place
    
       - imx8mp-evk has a minor inaccuracy with its pin config, but without
         user visible impact
    
       - The Allwinner H6 Hantro G2 video decoder needs an IOMMU reference
         to prevent the driver from crashing"
    
    * tag 'soc-fixes-6.1-4' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (30 commits)
      bus: ixp4xx: Don't touch bit 7 on IXP42x
      ARM: dts: imx6q-prti6q: Fix ref/tcxo-clock-frequency properties
      arm64: dts: imx8mp-evk: correct pcie pad settings
      ARM: mxs: fix memory leak in mxs_machine_init()
      ARM: dts: at91: sam9g20ek: enable udc vbus gpio pinctrl
      tee: optee: fix possible memory leak in optee_register_device()
      arm64: dts: allwinner: h6: Add IOMMU reference to Hantro G2
      media: dt-bindings: allwinner: h6-vpu-g2: Add IOMMU reference property
      bus: sunxi-rsb: Support atomic transfers
      bus: sunxi-rsb: Remove the shutdown callback
      ARM: dts: rockchip: disable arm_global_timer on rk3066 and rk3188
      arm64: dts: rockchip: Fix Pine64 Quartz4-B PMIC interrupt
      ARM: dts: am335x-pcm-953: Define fixed regulators in root node
      ARM: dts: rockchip: rk3188: fix lcdc1-rgb24 node name
      arm64: dts: rockchip: fix ir-receiver node names
      ARM: dts: rockchip: fix ir-receiver node names
      arm64: dts: rockchip: fix adc-keys sub node names
      ARM: dts: rockchip: fix adc-keys sub node names
      arm: dts: rockchip: remove clock-frequency from rtc
      arm: dts: rockchip: fix node name for hym8563 rtc
      ...

commit 6e1fc2591f116dfb20b65cf27356475461d61bd8
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Nov 23 21:18:36 2022 +0100

    clocksource/drivers/sp804: Do not use timer namespace for timer_shutdown() function
    
    A new "shutdown" timer state is being added to the generic timer code. One
    of the functions to change the timer into the state is called
    "timer_shutdown()". This means that there can not be other functions
    called "timer_shutdown()" as the timer code owns the "timer_*" name space.
    
    Rename timer_shutdown() to evt_timer_shutdown() to avoid this conflict.
    
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Anna-Maria Behnsen <anna-maria@linutronix.de>
    Link: https://lkml.kernel.org/r/20221106212702.182883323@goodmis.org
    Link: https://lore.kernel.org/all/20221105060155.592778858@goodmis.org/
    Link: https://lore.kernel.org/r/20221110064147.158230501@goodmis.org
    Link: https://lore.kernel.org/r/20221123201624.634354813@linutronix.de

commit 73737a5833ace25a8408b0d3b783637cb6bf29d1
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Nov 23 21:18:34 2022 +0100

    clocksource/drivers/arm_arch_timer: Do not use timer namespace for timer_shutdown() function
    
    A new "shutdown" timer state is being added to the generic timer code. One
    of the functions to change the timer into the state is called
    "timer_shutdown()". This means that there can not be other functions
    called "timer_shutdown()" as the timer code owns the "timer_*" name space.
    
    Rename timer_shutdown() to arch_timer_shutdown() to avoid this conflict.
    
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Anna-Maria Behnsen <anna-maria@linutronix.de>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Link: https://lkml.kernel.org/r/20221106212702.002251651@goodmis.org
    Link: https://lore.kernel.org/all/20221105060155.409832154@goodmis.org/
    Link: https://lore.kernel.org/r/20221110064146.981725531@goodmis.org
    Link: https://lore.kernel.org/r/20221123201624.574672568@linutronix.de

commit 839a973988a94c15002cbd81536e4af6ced2bd30
Author: Joe Korty <joe.korty@concurrent-rt.com>
Date:   Mon Nov 21 14:53:43 2022 +0000

    clocksource/drivers/arm_arch_timer: Fix XGene-1 TVAL register math error
    
    The TVAL register is 32 bit signed.  Thus only the lower 31 bits are
    available to specify when an interrupt is to occur at some time in the
    near future.  Attempting to specify a larger interval with TVAL results
    in a negative time delta which means the timer fires immediately upon
    being programmed, rather than firing at that expected future time.
    
    The solution is for Linux to declare that TVAL is a 31 bit register rather
    than give its true size of 32 bits.  This prevents Linux from programming
    TVAL with a too-large value.  Note that, prior to 5.16, this little trick
    was the standard way to handle TVAL in Linux, so there is nothing new
    happening here on that front.
    
    The softlockup detector hides the issue, because it keeps generating
    short timer deadlines that are within the scope of the broken timer.
    
    Disabling it, it starts using NO_HZ with much longer timer deadlines, which
    turns into an interrupt flood:
    
     11: 1124855130  949168462  758009394   76417474  104782230   30210281
             310890 1734323687     GICv2  29 Level     arch_timer
    
    And "much longer" isn't that long: it takes less than 43s to underflow
    TVAL at 50MHz (the frequency of the counter on XGene-1).
    
    Some comments on the v1 version of this patch by Marc Zyngier:
    
      XGene implements CVAL (a 64bit comparator) in terms of TVAL (a countdown
      register) instead of the other way around. TVAL being a 32bit register,
      the width of the counter should equally be 32.  However, TVAL is a
      *signed* value, and keeps counting down in the negative range once the
      timer fires.
    
      It means that any TVAL value with bit 31 set will fire immediately,
      as it cannot be distinguished from an already expired timer. Reducing
      the timer range back to a paltry 31 bits papers over the issue.
    
      Another problem cannot be fixed though, which is that the timer interrupt
      *must* be handled within the negative countdown period, or the interrupt
      will be lost (TVAL will rollover to a positive value, indicative of a
      new timer deadline).
    
    Fixes: 012f18850452 ("clocksource/drivers/arm_arch_timer: Work around broken CVAL implementations")
    Signed-off-by: Joe Korty <joe.korty@concurrent-rt.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221024165422.GA51107@zipoli.concurrent-rt.com
    Link: https://lore.kernel.org/r/20221121145343.896018-1-maz@kernel.org
    
    [maz: revamped the commit message]

commit 738b1985cbd1eec3f0be645c807745b16d378705
Author: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date:   Tue Nov 15 13:31:02 2022 +0100

    MAINTAINERS: adjust ARM/INTEL IXP4XX ARM ARCHITECTURE to ixp4xx clean-up
    
    Commit c83227a5d05e ("irq/gpio: ixp4xx: Drop boardfile probe path") and
    commit 155e4306107f ("clocksource/drivers/ixp4xx: Drop boardfile probe
    path") remove files include/linux/irqchip/irq-ixp4xx.h and
    include/linux/platform_data/timer-ixp4xx.h, but miss to adjust MAINTAINERS.
    
    Hence, ./scripts/get_maintainer.pl --self-test=patterns complains about
    broken references.
    
    Remove file entries for those files in ARM/INTEL IXP4XX ARM ARCHITECTURE.
    
    Signed-off-by: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Link: https://lore.kernel.org/r/20221115123102.22732-1-lukas.bulwahn@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit e5dfd093eca01a5d8d967f959a2372d7d82eb59c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Nov 13 22:21:15 2022 +0100

    clocksource/drivers/hyper-v: Include asm/hyperv-tlfs.h not asm/mshyperv.h
    
    clocksource/hyperv_timer.h is included into the VDSO build. It includes
    asm/mshyperv.h which in turn includes the world and some more. This worked
    so far by chance, but any subtle change in the include chain results in a
    build breakage because VDSO builds are building user space libraries.
    
    Include asm/hyperv-tlfs.h instead which contains everything what the VDSO
    build needs except the hv_get_raw_timer() define. Move this define into a
    separate header file, which contains the prerequisites (msr.h) and is
    included by clocksource/hyperv_timer.h.
    
    Fixup drivers/hv/vmbus_drv.c which relies on the indirect include of
    asm/mshyperv.h.
    
    With that the VDSO build only pulls in the minimum requirements.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/87fsemtut0.ffs@tglx

commit 5be07b3fb53d14581f470745d129141b97d15614
Merge: 91c77a6ec4e2 e70af8d040d2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 11 09:24:03 2022 -0800

    Merge tag 'hyperv-fixes-signed-20221110' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux
    
    Pull hyperv fixes from Wei Liu:
    
     - Fix TSC MSR write for root partition (Anirudh Rayabharam)
    
     - Fix definition of vector in pci-hyperv driver (Dexuan Cui)
    
     - A few other misc patches
    
    * tag 'hyperv-fixes-signed-20221110' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux:
      PCI: hv: Fix the definition of vector in hv_compose_msi_msg()
      MAINTAINERS: remove sthemmin
      x86/hyperv: fix invalid writes to MSRs during root partition kexec
      clocksource/drivers/hyperv: add data structure for reference TSC MSR
      Drivers: hv: fix repeated words in comments
      x86/hyperv: Remove BUG_ON() for kmap_local_page()

commit 4ad1aa571214e8d6468a1806794d987b374b5a08
Author: Anirudh Rayabharam <anrayabh@linux.microsoft.com>
Date:   Thu Oct 27 15:27:28 2022 +0530

    clocksource/drivers/hyperv: add data structure for reference TSC MSR
    
    Add a data structure to represent the reference TSC MSR similar to
    other MSRs. This simplifies the code for updating the MSR.
    
    Signed-off-by: Anirudh Rayabharam <anrayabh@linux.microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20221027095729.1676394-2-anrayabh@linux.microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit c3a130431c5544c235f2f8d79fb73775f3d51f3a
Author: Lin Yujun <linyujun809@huawei.com>
Date:   Wed Sep 14 11:30:18 2022 +0800

    clocksource/drivers/timer-gxp: Add missing error handling in gxp_timer_probe
    
    [ Upstream commit 0e2c8e6d769bcdc4f6634a02c545356282275e68 ]
    
    Add platform_device_put() to make sure to free the platform
    device in the event platform_device_add() fails.
    
    Fixes: 5184f4bf151b ("clocksource/drivers/timer-gxp: Add HPE GXP Timer")
    Signed-off-by: Lin Yujun <linyujun809@huawei.com>
    Link: https://lore.kernel.org/r/20220914033018.97484-1-linyujun809@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3da5b75beef00195a68c188ea59ad59b4ed7b67e
Author: Kunkun Jiang <jiangkunkun@huawei.com>
Date:   Wed Sep 14 14:14:24 2022 +0800

    clocksource/drivers/arm_arch_timer: Fix handling of ARM erratum 858921
    
    [ Upstream commit 6c3b62d93e195f78c1437c8fa7581e9b2f00886e ]
    
    The commit a38b71b0833e ("clocksource/drivers/arm_arch_timer:
    Move system register timer programming over to CVAL") moves the
    programming of the timers from the countdown timer (TVAL) over
    to the comparator (CVAL). This makes it necessary to read the
    counter when programming next event. However, the workaround of
    Cortex-A73 erratum 858921 does not set the corresponding
    set_next_event_phys and set_next_event_virt.
    
    Add the appropriate hooks to apply the erratum mitigation when
    programming the next timer event.
    
    Fixes: a38b71b0833e ("clocksource/drivers/arm_arch_timer: Move system register timer programming over to CVAL")
    Signed-off-by: Kunkun Jiang <jiangkunkun@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Oliver Upton <oliver.upton@linux.dev>
    Link: https://lore.kernel.org/r/20220914061424.1260-1-jiangkunkun@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed5895be34b6e7981739f39602a94f66a5897abc
Author: Yang Guo <guoyang2@huawei.com>
Date:   Tue Sep 27 11:32:21 2022 +0800

    clocksource/drivers/arm_arch_timer: Fix CNTPCT_LO and CNTVCT_LO value
    
    commit af246cc6d0ed11318223606128bb0b09866c4c08 upstream.
    
    CNTPCT_LO and CNTVCT_LO are defined by mistake in commit '8b82c4f883a7',
    so fix them according to the Arm ARM DDI 0487I.a, Table I2-4
    "CNTBaseN memory map" as follows:
    
    Offset    Register      Type Description
    0x000     CNTPCT[31:0]  RO   Physical Count register.
    0x004     CNTPCT[63:32] RO
    0x008     CNTVCT[31:0]  RO   Virtual Count register.
    0x00C     CNTVCT[63:32] RO
    
    Fixes: 8b82c4f883a7 ("clocksource/drivers/arm_arch_timer: Move MMIO timer programming over to CVAL")
    Cc: stable@vger.kernel.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Yang Guo <guoyang2@huawei.com>
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Link: https://lore.kernel.org/r/20220927033221.49589-1-zhangshaokun@hisilicon.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7639c5300e847687f83df1b599333e503b785c7d
Author: Lin Yujun <linyujun809@huawei.com>
Date:   Wed Sep 14 11:30:18 2022 +0800

    clocksource/drivers/timer-gxp: Add missing error handling in gxp_timer_probe
    
    [ Upstream commit 0e2c8e6d769bcdc4f6634a02c545356282275e68 ]
    
    Add platform_device_put() to make sure to free the platform
    device in the event platform_device_add() fails.
    
    Fixes: 5184f4bf151b ("clocksource/drivers/timer-gxp: Add HPE GXP Timer")
    Signed-off-by: Lin Yujun <linyujun809@huawei.com>
    Link: https://lore.kernel.org/r/20220914033018.97484-1-linyujun809@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f31ff2426cfbe67008abd51d681107b802e872f8
Author: Kunkun Jiang <jiangkunkun@huawei.com>
Date:   Wed Sep 14 14:14:24 2022 +0800

    clocksource/drivers/arm_arch_timer: Fix handling of ARM erratum 858921
    
    [ Upstream commit 6c3b62d93e195f78c1437c8fa7581e9b2f00886e ]
    
    The commit a38b71b0833e ("clocksource/drivers/arm_arch_timer:
    Move system register timer programming over to CVAL") moves the
    programming of the timers from the countdown timer (TVAL) over
    to the comparator (CVAL). This makes it necessary to read the
    counter when programming next event. However, the workaround of
    Cortex-A73 erratum 858921 does not set the corresponding
    set_next_event_phys and set_next_event_virt.
    
    Add the appropriate hooks to apply the erratum mitigation when
    programming the next timer event.
    
    Fixes: a38b71b0833e ("clocksource/drivers/arm_arch_timer: Move system register timer programming over to CVAL")
    Signed-off-by: Kunkun Jiang <jiangkunkun@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Oliver Upton <oliver.upton@linux.dev>
    Link: https://lore.kernel.org/r/20220914061424.1260-1-jiangkunkun@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aab29eb5120329018f47acd1320e82cb6d8c3d44
Author: Yang Guo <guoyang2@huawei.com>
Date:   Tue Sep 27 11:32:21 2022 +0800

    clocksource/drivers/arm_arch_timer: Fix CNTPCT_LO and CNTVCT_LO value
    
    commit af246cc6d0ed11318223606128bb0b09866c4c08 upstream.
    
    CNTPCT_LO and CNTVCT_LO are defined by mistake in commit '8b82c4f883a7',
    so fix them according to the Arm ARM DDI 0487I.a, Table I2-4
    "CNTBaseN memory map" as follows:
    
    Offset    Register      Type Description
    0x000     CNTPCT[31:0]  RO   Physical Count register.
    0x004     CNTPCT[63:32] RO
    0x008     CNTVCT[31:0]  RO   Virtual Count register.
    0x00C     CNTVCT[63:32] RO
    
    Fixes: 8b82c4f883a7 ("clocksource/drivers/arm_arch_timer: Move MMIO timer programming over to CVAL")
    Cc: stable@vger.kernel.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Yang Guo <guoyang2@huawei.com>
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Link: https://lore.kernel.org/r/20220927033221.49589-1-zhangshaokun@hisilicon.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd8bdb451c6541b40e5977defcfebfe51713a538
Author: Robert Marko <robimarko@gmail.com>
Date:   Fri Aug 19 00:08:49 2022 +0200

    arm64: dts: qcom: ipq8074: add clocks to APCS
    
    APCS now has support for providing the APSS clocks as the child device
    for IPQ8074.
    
    So, add the A53 PLL and XO clocks in order to use APCS as the CPU
    clocksource for APSS scaling.
    
    Signed-off-by: Robert Marko <robimarko@gmail.com>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220818220849.339732-4-robimarko@gmail.com

commit 3548eda8ae284d6d412d59f11cd20fc7df05362b
Author: Chen Lifu <chenlifu@huawei.com>
Date:   Tue Aug 23 10:18:21 2022 +0800

    x86/tsc: Make art_related_clocksource static
    
    The symbol is not used outside of the file, so mark it static.
    
    Fixes the following warning:
    
    arch/x86/kernel/tsc.c:53:20: warning:
            symbol 'art_related_clocksource' was not declared. Should it be static?
    
    Signed-off-by: Chen Lifu <chenlifu@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20220823021821.3052159-1-chenlifu@huawei.com

commit 55be6084c8e0e0ada9278c2ab60b7a584378efda
Merge: 7f6dcffb44ad 6cb5ce13357d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 10 10:16:00 2022 -0700

    Merge tag 'timers-core-2022-10-05' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "A boring time, timekeeping, timers update:
    
       - No core code changes
    
       - No new clocksource/event driver
    
       - Cleanup of the TI DM clocksource/event driver
    
       - The usual set of device tree binding updates
    
       - Small improvement, fixes and cleanups all over the place"
    
    * tag 'timers-core-2022-10-05' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (22 commits)
      clocksource/drivers/arm_arch_timer: Fix CNTPCT_LO and CNTVCT_LO value
      clocksource/drivers/imx-sysctr: handle nxp,no-divider property
      dt-bindings: timer: nxp,sysctr-timer: add nxp,no-divider property
      clocksource/drivers/timer-ti-dm: Get clock in probe with devm_clk_get()
      clocksource/drivers/timer-ti-dm: Add flag to detect omap1
      clocksource/drivers/timer-ti-dm: Move struct omap_dm_timer fields to driver
      clocksource/drivers/timer-ti-dm: Use runtime PM directly and check errors
      clocksource/drivers/timer-ti-dm: Move private defines to the driver
      clocksource/drivers/timer-ti-dm: Simplify register access further
      clocksource/drivers/timer-ti-dm: Simplify register writes with dmtimer_write()
      clocksource/drivers/timer-ti-dm: Simplify register reads with dmtimer_read()
      clocksource/drivers/timer-ti-dm: Drop unused functions
      clocksource/drivers/timer-gxp: Add missing error handling in gxp_timer_probe
      clocksource/drivers/arm_arch_timer: Fix handling of ARM erratum 858921
      clocksource/drivers/exynos_mct: Enable building on ARTPEC
      clocksource/drivers/exynos_mct: Support local-timers property
      clocksource/drivers/exynos_mct: Support frc-shared property
      dt-bindings: timer: exynos4210-mct: Add ARTPEC-8 MCT support
      clocksource/drivers/sun4i: Add definition of clear interrupt
      clocksource/drivers/renesas-ostm: Add support for RZ/V2L SoC
      ...

commit 6cb5ce13357de06d376d300778eee2009f53d8cb
Merge: cceeeb6a6d02 af246cc6d0ed
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Oct 4 11:22:43 2022 +0200

    Merge tag 'timers-v6.1-rc1' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/event updates from Daniel Lezcano:
    
      - Added DT bindings for Mediatek MT8188 (Johnson Wang)
    
      - Added DT bindings for Renesas r8a779f0 (Wolfram Sang)
    
      - Added support for RZ/V2L SoC (Lad Prabhakar)
    
      - Rename TIMER_IRQ_EN to TIMER_IRQ_CLEAR to prevent confusion on sun4i
        (Victor Hassan)
    
      - Added support for Exynos ARTPEC-8 MCT, including DT bindings
        (Vincent Whitchurch)
    
      - Fixed handling of ARM erratum 858921 on the ARM Arch timer (Kunkun
        Jiang)
    
      - Added missing call platform_device_put() in the error path on ther
        GXP timer (Lin Yujun)
    
      - Cleaned the timer TI DM driver by self-encapsulating the code,
        dropping dead code and simplifying some functions (Tony Lindgren)
    
      - Added a DT property to tell the driver the clock is no longer
        divided on recent NXP hardware (Peng Fan)
    
      - Fixed the CNTPCT_LO and CNTVCT_LO values in the ARM arch timer (Yang
        Guo)
    
    Link: https://lore.kernel.org/r/b28ac4b0-5745-b3a9-b7e7-cc86dcb1b023@linaro.org

commit af246cc6d0ed11318223606128bb0b09866c4c08
Author: Yang Guo <guoyang2@huawei.com>
Date:   Tue Sep 27 11:32:21 2022 +0800

    clocksource/drivers/arm_arch_timer: Fix CNTPCT_LO and CNTVCT_LO value
    
    CNTPCT_LO and CNTVCT_LO are defined by mistake in commit '8b82c4f883a7',
    so fix them according to the Arm ARM DDI 0487I.a, Table I2-4
    "CNTBaseN memory map" as follows:
    
    Offset    Register      Type Description
    0x000     CNTPCT[31:0]  RO   Physical Count register.
    0x004     CNTPCT[63:32] RO
    0x008     CNTVCT[31:0]  RO   Virtual Count register.
    0x00C     CNTVCT[63:32] RO
    
    Fixes: 8b82c4f883a7 ("clocksource/drivers/arm_arch_timer: Move MMIO timer programming over to CVAL")
    Cc: stable@vger.kernel.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Yang Guo <guoyang2@huawei.com>
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Link: https://lore.kernel.org/r/20220927033221.49589-1-zhangshaokun@hisilicon.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 27b30995b75d1e79360c164ba179bca86ab76ba6
Author: Peng Fan <peng.fan@nxp.com>
Date:   Fri Sep 2 19:12:07 2022 +0800

    clocksource/drivers/imx-sysctr: handle nxp,no-divider property
    
    The previous hardware design embedds a internal divider for base clock.
    New design not has that divider, so check the nxp,no-divider property,
    if true, directly use base clock input, otherwise divide by 3 as before.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20220902111207.2902493-3-peng.fan@oss.nxp.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 789d4b1070261fa98b06384d2067f23c080dc9f1
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 15 16:12:50 2022 +0300

    clocksource/drivers/timer-ti-dm: Get clock in probe with devm_clk_get()
    
    We can simplify the code a bit by getting the clock in probe, and using
    devm_clk_get(). This will also make further changes easier as the clock
    is available in probe instead of prepare.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Link: https://lore.kernel.org/r/20220815131250.34603-10-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 664ad59da11687ef9b518fc2519af6a71a1db9f1
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 15 16:12:49 2022 +0300

    clocksource/drivers/timer-ti-dm: Add flag to detect omap1
    
    Let's make it clear that some features need to be tested currently on
    omap1. Only omap1 still uses platform_data.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Link: https://lore.kernel.org/r/20220815131250.34603-9-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a6e543f61531b63bfc8d43053c6ec6f65117f627
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 15 16:12:48 2022 +0300

    clocksource/drivers/timer-ti-dm: Move struct omap_dm_timer fields to driver
    
    There is no longer any need to expose the elements of struct omap_dm_timer
    outside the driver. The pwm and remoteproc drivers just use struct
    omap_dm_timer as a cookie.
    
    Let's move the elements of struct omap_dm_timer into struct dmtimer that
    is private to the driver. To do this, we mostly rename omap_dm_timer to
    dmtimer in the driver. We keep omap_dm_timer only for the exposed
    functions in the platform_data for the pwm and remoteproc drivers.
    
    Let's also add a note about not using the exposed functions internally as
    those will get deprecated eventually in favor of Linux generic frameworks.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Link: https://lore.kernel.org/r/20220815131250.34603-8-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bd351f1aee21ca667b39658550b5f3c61e8bb77f
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 15 16:12:47 2022 +0300

    clocksource/drivers/timer-ti-dm: Use runtime PM directly and check errors
    
    Use pm_runtime_resume_and_get() and check for a possible error returned.
    
    We want to do this as omap_dm_timer_enable() and omap_dm_timer_disable()
    are exposed to the pwm and remoteproc drivers, and in the following patch
    we turn struct omap_dm_timer into a cookie used by the exposed functions
    only.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Link: https://lore.kernel.org/r/20220815131250.34603-7-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 1d513f439d7930363adce4588030af7c8fa71cc9
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 15 16:12:46 2022 +0300

    clocksource/drivers/timer-ti-dm: Move private defines to the driver
    
    These defines are only used by timer-ti-dm driver.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Link: https://lore.kernel.org/r/20220815131250.34603-6-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f32bdac10cb5f461f8c71c3b9703617c42322d2f
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 15 16:12:45 2022 +0300

    clocksource/drivers/timer-ti-dm: Simplify register access further
    
    Let's unify register access and use dmtimer_read() and dmtimer_write()
    also for the timer revision specific registers like we now do for the
    shread registers.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Link: https://lore.kernel.org/r/20220815131250.34603-5-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 49cd16bb573e43dc2ee64d734b9b545475dbb35f
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 15 16:12:44 2022 +0300

    clocksource/drivers/timer-ti-dm: Simplify register writes with dmtimer_write()
    
    We can simplify register write access by checking for the register write
    posted mode in the write function. This way we can combine the functions
    for __omap_dm_timer_write() and omap_dm_timer_write_reg() into a single
    function dmtimer_write().
    
    We update the shared register access first, the timer revision specific
    register access will be updated in a later patch.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Link: https://lore.kernel.org/r/20220815131250.34603-4-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 90c9aada19606ae78259cef78a46646a97ec8f67
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 15 16:12:43 2022 +0300

    clocksource/drivers/timer-ti-dm: Simplify register reads with dmtimer_read()
    
    We can simplify register read access by checking for the register write
    posted mode in the read function. This way we can combine the functions
    for __omap_dm_timer_read() and omap_dm_timer_read_reg() into a single
    function dmtimer_read().
    
    We update the shared register access first, the timer revision specific
    register access will be updated in a later patch.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Link: https://lore.kernel.org/r/20220815131250.34603-3-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit caa590067efd659d8811ad8904489536912ebc53
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 15 16:12:42 2022 +0300

    clocksource/drivers/timer-ti-dm: Drop unused functions
    
    We still have some unused functions left, let's drop them.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Janusz Krzysztofik <jmkrzyszt@gmail.com>
    Link: https://lore.kernel.org/r/20220815131250.34603-2-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0e2c8e6d769bcdc4f6634a02c545356282275e68
Author: Lin Yujun <linyujun809@huawei.com>
Date:   Wed Sep 14 11:30:18 2022 +0800

    clocksource/drivers/timer-gxp: Add missing error handling in gxp_timer_probe
    
    Add platform_device_put() to make sure to free the platform
    device in the event platform_device_add() fails.
    
    Fixes: 5184f4bf151b ("clocksource/drivers/timer-gxp: Add HPE GXP Timer")
    Signed-off-by: Lin Yujun <linyujun809@huawei.com>
    Link: https://lore.kernel.org/r/20220914033018.97484-1-linyujun809@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6c3b62d93e195f78c1437c8fa7581e9b2f00886e
Author: Kunkun Jiang <jiangkunkun@huawei.com>
Date:   Wed Sep 14 14:14:24 2022 +0800

    clocksource/drivers/arm_arch_timer: Fix handling of ARM erratum 858921
    
    The commit a38b71b0833e ("clocksource/drivers/arm_arch_timer:
    Move system register timer programming over to CVAL") moves the
    programming of the timers from the countdown timer (TVAL) over
    to the comparator (CVAL). This makes it necessary to read the
    counter when programming next event. However, the workaround of
    Cortex-A73 erratum 858921 does not set the corresponding
    set_next_event_phys and set_next_event_virt.
    
    Add the appropriate hooks to apply the erratum mitigation when
    programming the next timer event.
    
    Fixes: a38b71b0833e ("clocksource/drivers/arm_arch_timer: Move system register timer programming over to CVAL")
    Signed-off-by: Kunkun Jiang <jiangkunkun@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Oliver Upton <oliver.upton@linux.dev>
    Link: https://lore.kernel.org/r/20220914061424.1260-1-jiangkunkun@huawei.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 55ccdab79524ce9a46965af6e1908b90fa92b303
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Thu Jun 9 13:27:38 2022 +0200

    clocksource/drivers/exynos_mct: Enable building on ARTPEC
    
    This timer block is used on ARTPEC-8.
    
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Link: https://lore.kernel.org/r/20220609112738.359385-5-vincent.whitchurch@axis.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 47dbe4eb9822208be2b7ec901c7e0c15536f9c92
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Thu Jun 9 13:27:37 2022 +0200

    clocksource/drivers/exynos_mct: Support local-timers property
    
    If the device tree indicates that the hardware requires that the
    processor only use certain local timers, respect that.
    
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20220609112738.359385-4-vincent.whitchurch@axis.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e8550f0e7bde9bd31697e3c534d386f7f3b5787b
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Thu Jun 9 13:27:36 2022 +0200

    clocksource/drivers/exynos_mct: Support frc-shared property
    
    When the FRC is shared with another main processor, the other processor
    is assumed to have started it and this processor should not write to the
    global registers.
    
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Link: https://lore.kernel.org/r/20220609112738.359385-3-vincent.whitchurch@axis.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4364044c326cbf2ad09e9fa99a9a28a342fecce6
Author: Victor Hassan <victor@allwinnertech.com>
Date:   Tue Sep 6 13:20:56 2022 +0800

    clocksource/drivers/sun4i: Add definition of clear interrupt
    
    To prevent misunderstanding, use TIMER_IRQ_CLEAR instead of TIMER_IRQ_EN
    in function sun4i_timer_clear_interrupt.
    
    Signed-off-by: Victor Hassan <victor@allwinnertech.com>
    Acked-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Link: https://lore.kernel.org/r/20220906052056.43404-1-victor@allwinnertech.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit eaa1a955094b20ca4b1c5064200d140b27f8d96f
Author: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
Date:   Wed Sep 7 09:00:56 2022 +0100

    clocksource/drivers/renesas-ostm: Add support for RZ/V2L SoC
    
    The OSTM block is identical on Renesas RZ/G2L and RZ/V2L SoC's, so instead
    of adding dependency for each SoC's add dependency on ARCH_RZG2L. The
    ARCH_RZG2L config option is already selected by ARCH_R9A07G044 and
    ARCH_R9A07G054.
    
    With the above change OSTM will be enabled on RZ/V2L SoC.
    
    Signed-off-by: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20220907080056.3460-1-prabhakar.mahadev-lad.rj@bp.renesas.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8cf6e837dcfc73a068225b95c6470b98045c6be2
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:17 2022 +0200

    selftests: timers: clocksource-switch: fix passing errors from child
    
    [ Upstream commit 4d8f52ac5fa9eede7b7aa2f2d67c841d9eeb655f ]
    
    The return value from system() is a waitpid-style integer. Do not return
    it directly because with the implicit masking in exit() it will always
    return 0. Access it with appropriate macros to really pass on errors.
    
    Fixes: 7290ce1423c3 ("selftests/timers: Add clocksource-switch test from timetest suite")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08e84df974286b3cc635b1a4e2f3cbd8f5759d53
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:17 2022 +0200

    selftests: timers: clocksource-switch: fix passing errors from child
    
    [ Upstream commit 4d8f52ac5fa9eede7b7aa2f2d67c841d9eeb655f ]
    
    The return value from system() is a waitpid-style integer. Do not return
    it directly because with the implicit masking in exit() it will always
    return 0. Access it with appropriate macros to really pass on errors.
    
    Fixes: 7290ce1423c3 ("selftests/timers: Add clocksource-switch test from timetest suite")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c4e435b8d91e64d75ecd3118ffe70945a38cfcd
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:17 2022 +0200

    selftests: timers: clocksource-switch: fix passing errors from child
    
    [ Upstream commit 4d8f52ac5fa9eede7b7aa2f2d67c841d9eeb655f ]
    
    The return value from system() is a waitpid-style integer. Do not return
    it directly because with the implicit masking in exit() it will always
    return 0. Access it with appropriate macros to really pass on errors.
    
    Fixes: 7290ce1423c3 ("selftests/timers: Add clocksource-switch test from timetest suite")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 990ca39e78cf4005168d15547a8236b835ed0597
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:17 2022 +0200

    selftests: timers: clocksource-switch: fix passing errors from child
    
    [ Upstream commit 4d8f52ac5fa9eede7b7aa2f2d67c841d9eeb655f ]
    
    The return value from system() is a waitpid-style integer. Do not return
    it directly because with the implicit masking in exit() it will always
    return 0. Access it with appropriate macros to really pass on errors.
    
    Fixes: 7290ce1423c3 ("selftests/timers: Add clocksource-switch test from timetest suite")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3693c9ee4556b8aa1dbb5d9d927f3aa281f156b2
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:17 2022 +0200

    selftests: timers: clocksource-switch: fix passing errors from child
    
    [ Upstream commit 4d8f52ac5fa9eede7b7aa2f2d67c841d9eeb655f ]
    
    The return value from system() is a waitpid-style integer. Do not return
    it directly because with the implicit masking in exit() it will always
    return 0. Access it with appropriate macros to really pass on errors.
    
    Fixes: 7290ce1423c3 ("selftests/timers: Add clocksource-switch test from timetest suite")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25b05b403e394f41b9a50bf55214bc1e77e5c6f4
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:17 2022 +0200

    selftests: timers: clocksource-switch: fix passing errors from child
    
    [ Upstream commit 4d8f52ac5fa9eede7b7aa2f2d67c841d9eeb655f ]
    
    The return value from system() is a waitpid-style integer. Do not return
    it directly because with the implicit masking in exit() it will always
    return 0. Access it with appropriate macros to really pass on errors.
    
    Fixes: 7290ce1423c3 ("selftests/timers: Add clocksource-switch test from timetest suite")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ff5be75ae31688d5c4c712552132a2c383a549b
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:17 2022 +0200

    selftests: timers: clocksource-switch: fix passing errors from child
    
    [ Upstream commit 4d8f52ac5fa9eede7b7aa2f2d67c841d9eeb655f ]
    
    The return value from system() is a waitpid-style integer. Do not return
    it directly because with the implicit masking in exit() it will always
    return 0. Access it with appropriate macros to really pass on errors.
    
    Fixes: 7290ce1423c3 ("selftests/timers: Add clocksource-switch test from timetest suite")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5eaeaa7bc0177632fee7f77586478474bce510e4
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Jun 1 16:43:22 2022 +0200

    KVM: selftests: Make hyperv_clock selftest more stable
    
    [ Upstream commit eae260be3a0111a28fe95923e117a55dddec0384 ]
    
    hyperv_clock doesn't always give a stable test result, especially with
    AMD CPUs. The test compares Hyper-V MSR clocksource (acquired either
    with rdmsr() from within the guest or KVM_GET_MSRS from the host)
    against rdtsc(). To increase the accuracy, increase the measured delay
    (done with nop loop) by two orders of magnitude and take the mean rdtsc()
    value before and after rdmsr()/KVM_GET_MSRS.
    
    Reported-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Tested-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20220601144322.1968742-1-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9acd899d2febb4dd88565514d263fcdf0514ec26
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Jun 1 16:43:22 2022 +0200

    KVM: selftests: Make hyperv_clock selftest more stable
    
    [ Upstream commit eae260be3a0111a28fe95923e117a55dddec0384 ]
    
    hyperv_clock doesn't always give a stable test result, especially with
    AMD CPUs. The test compares Hyper-V MSR clocksource (acquired either
    with rdmsr() from within the guest or KVM_GET_MSRS from the host)
    against rdtsc(). To increase the accuracy, increase the measured delay
    (done with nop loop) by two orders of magnitude and take the mean rdtsc()
    value before and after rdmsr()/KVM_GET_MSRS.
    
    Reported-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Tested-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20220601144322.1968742-1-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e05d5b9c5bbea80313d8f58c3a80a18839b25480
Merge: 665fe72a7d4f 4062eba9f3d0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Aug 2 19:44:56 2022 -0700

    Merge tag 'linux-kselftest-next-5.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/shuah/linux-kselftest
    
    Pull Kselftest updates from Shuah Khan:
    
     - timers test build fixes and cleanups for new tool chains
    
     - removing khdr from kselftest framework and main Makefile
    
     - changes to test output messages to improve reports
    
    * tag 'linux-kselftest-next-5.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/shuah/linux-kselftest: (24 commits)
      Makefile: replace headers_install with headers for kselftest
      selftests/landlock: drop deprecated headers dependency
      selftests: timers: clocksource-switch: adapt to kselftest framework
      selftests: timers: clocksource-switch: add 'runtime' command line parameter
      selftests: timers: clocksource-switch: add command line switch to skip sanity check
      selftests: timers: clocksource-switch: sort includes
      selftests: timers: clocksource-switch: fix passing errors from child
      selftests: timers: inconsistency-check: adapt to kselftest framework
      selftests: timers: nanosleep: adapt to kselftest framework
      selftests: timers: fix declarations of main()
      selftests: timers: valid-adjtimex: build fix for newer toolchains
      Makefile: add headers_install to kselftest targets
      selftests: drop KSFT_KHDR_INSTALL make target
      selftests: stop using KSFT_KHDR_INSTALL
      selftests: drop khdr make target
      selftests: drivers/dma-buf: Improve message in selftest summary
      selftests/kcmp: Make the test output consistent and clear
      selftests:timers: globals don't need initialization to 0
      selftests/drivers/gpu: Add error messages to drm_mm.sh
      selftests/tpm2: increase timeout for kselftests
      ...

commit dfea84827f7eb49ca41d837d92ac1cbd5353a742
Merge: 63e6053add5a cceeeb6a6d02
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 1 12:37:54 2022 -0700

    Merge tag 'timers-core-2022-08-01' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Timers, timekeeping and related drivers update:
    
      Core:
    
       - Make wait_event_hrtimeout() aware of RT/DL tasks
    
      New drivers:
    
       - R-Car Gen4 timer
    
       - Tegra186 timer
    
       - Mediatek MT6795 CPUXGPT timer
    
      Updates:
    
       - Rework suspend/resume handling in timer drivers so it
         takes inactive clocks into account.
    
       - The usual device tree compatible add ons
    
       - Small fixed and cleanups all over the place"
    
    * tag 'timers-core-2022-08-01' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (24 commits)
      wait: Fix __wait_event_hrtimeout for RT/DL tasks
      clocksource/drivers/sun5i: Remove unnecessary (void*) conversions
      dt-bindings: timer: allwinner,sun4i-a10-timer: Add D1 compatible
      dt-bindings: timer: ingenic,tcu: use absolute path to other schema
      clocksource/drivers/sun4i: Remove unnecessary (void*) conversions
      dt-bindings: timer: renesas,cmt: Fix R-Car Gen4 fall-out
      clocksource/drivers/tegra186: Put Kconfig option 'tristate' to 'bool'
      clocksource/drivers/timer-ti-dm: Make driver selection bool for TI K3
      clocksource/drivers/timer-ti-dm: Add compatible for am6 SoCs
      clocksource/drivers/timer-ti-dm: Make timer selectable for ARCH_K3
      clocksource/drivers/timer-ti-dm: Move inline functions to driver for am6
      clocksource/drivers/sh_cmt: Add R-Car Gen4 support
      dt-bindings: timer: renesas,cmt: R-Car V3U is R-Car Gen4
      dt-bindings: timer: renesas,cmt: Add r8a779f0 and generic Gen4 CMT support
      clocksource/drivers/timer-microchip-pit64b: Fix compilation warnings
      clocksource/drivers/timer-microchip-pit64b: Use mchp_pit64b_{suspend, resume}
      clocksource/drivers/timer-microchip-pit64b: Remove suspend/resume ops for ce
      thermal/drivers/rcar_gen3_thermal: Add r8a779f0 support
      clocksource/drivers/timer-mediatek: Implement CPUXGPT timers
      dt-bindings: timer: mediatek: Add CPUX System Timer and MT6795 compatible
      ...

commit 3d4b966e54b91e82534d58777bdbbbd67dff165a
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Sun Jul 24 16:51:48 2022 +0200

    Revert "Revert "char/random: silence a lockdep splat with printk()""
    
    In 2019, Sergey fixed a lockdep splat with 15341b1dd409 ("char/random:
    silence a lockdep splat with printk()"), but that got reverted soon
    after from 4.19 because back then it apparently caused various problems.
    But the issue it was fixing is still there, and more generally, many
    patches turning printk() into printk_deferred() have landed since,
    making me suspect it's okay to try this out again.
    
    This should fix the following deadlock found by the kernel test robot:
    
    [   18.287691] WARNING: possible circular locking dependency detected
    [   18.287692] 4.19.248-00165-g3d1f971aa81f #1 Not tainted
    [   18.287693] ------------------------------------------------------
    [   18.287712] stop/202 is trying to acquire lock:
    [   18.287713] (ptrval) (console_owner){..-.}, at: console_unlock (??:?)
    [   18.287717]
    [   18.287718] but task is already holding lock:
    [   18.287718] (ptrval) (&(&port->lock)->rlock){-...}, at: pty_write (pty.c:?)
    [   18.287722]
    [   18.287722] which lock already depends on the new lock.
    [   18.287723]
    [   18.287724]
    [   18.287725] the existing dependency chain (in reverse order) is:
    [   18.287725]
    [   18.287726] -> #2 (&(&port->lock)->rlock){-...}:
    [   18.287729] validate_chain+0x84a/0xe00
    [   18.287729] __lock_acquire (lockdep.c:?)
    [   18.287730] lock_acquire (??:?)
    [   18.287731] _raw_spin_lock_irqsave (??:?)
    [   18.287732] tty_port_tty_get (??:?)
    [   18.287733] tty_port_default_wakeup (tty_port.c:?)
    [   18.287734] tty_port_tty_wakeup (??:?)
    [   18.287734] uart_write_wakeup (??:?)
    [   18.287735] serial8250_tx_chars (??:?)
    [   18.287736] serial8250_handle_irq (??:?)
    [   18.287737] serial8250_default_handle_irq (8250_port.c:?)
    [   18.287738] serial8250_interrupt (8250_core.c:?)
    [   18.287738] __handle_irq_event_percpu (??:?)
    [   18.287739] handle_irq_event_percpu (??:?)
    [   18.287740] handle_irq_event (??:?)
    [   18.287741] handle_edge_irq (??:?)
    [   18.287742] handle_irq (??:?)
    [   18.287742] do_IRQ (??:?)
    [   18.287743] common_interrupt (entry_32.o:?)
    [   18.287744] _raw_spin_unlock_irqrestore (??:?)
    [   18.287745] uart_write (serial_core.c:?)
    [   18.287746] process_output_block (n_tty.c:?)
    [   18.287747] n_tty_write (n_tty.c:?)
    [   18.287747] tty_write (tty_io.c:?)
    [   18.287748] __vfs_write (??:?)
    [   18.287749] vfs_write (??:?)
    [   18.287750] ksys_write (??:?)
    [   18.287750] sys_write (??:?)
    [   18.287751] do_fast_syscall_32 (??:?)
    [   18.287752] entry_SYSENTER_32 (??:?)
    [   18.287752]
    [   18.287753] -> #1 (&port_lock_key){-.-.}:
    [   18.287756]
    [   18.287756] -> #0 (console_owner){..-.}:
    [   18.287759] check_prevs_add (lockdep.c:?)
    [   18.287760] validate_chain+0x84a/0xe00
    [   18.287761] __lock_acquire (lockdep.c:?)
    [   18.287761] lock_acquire (??:?)
    [   18.287762] console_unlock (??:?)
    [   18.287763] vprintk_emit (??:?)
    [   18.287764] vprintk_default (??:?)
    [   18.287764] vprintk_func (??:?)
    [   18.287765] printk (??:?)
    [   18.287766] get_random_u32 (??:?)
    [   18.287767] shuffle_freelist (slub.c:?)
    [   18.287767] allocate_slab (slub.c:?)
    [   18.287768] new_slab (slub.c:?)
    [   18.287769] ___slab_alloc+0x6d0/0xb20
    [   18.287770] __slab_alloc+0xd6/0x2e0
    [   18.287770] __kmalloc (??:?)
    [   18.287771] tty_buffer_alloc (tty_buffer.c:?)
    [   18.287772] __tty_buffer_request_room (tty_buffer.c:?)
    [   18.287773] tty_insert_flip_string_fixed_flag (??:?)
    [   18.287774] pty_write (pty.c:?)
    [   18.287775] process_output_block (n_tty.c:?)
    [   18.287776] n_tty_write (n_tty.c:?)
    [   18.287777] tty_write (tty_io.c:?)
    [   18.287778] __vfs_write (??:?)
    [   18.287779] vfs_write (??:?)
    [   18.287780] ksys_write (??:?)
    [   18.287780] sys_write (??:?)
    [   18.287781] do_fast_syscall_32 (??:?)
    [   18.287782] entry_SYSENTER_32 (??:?)
    [   18.287783]
    [   18.287783] other info that might help us debug this:
    [   18.287784]
    [   18.287785] Chain exists of:
    [   18.287785]   console_owner --> &port_lock_key --> &(&port->lock)->rlock
    [   18.287789]
    [   18.287790]  Possible unsafe locking scenario:
    [   18.287790]
    [   18.287791]        CPU0                    CPU1
    [   18.287792]        ----                    ----
    [   18.287792]   lock(&(&port->lock)->rlock);
    [   18.287794]                                lock(&port_lock_key);
    [   18.287814]                                lock(&(&port->lock)->rlock);
    [   18.287815]   lock(console_owner);
    [   18.287817]
    [   18.287818]  *** DEADLOCK ***
    [   18.287818]
    [   18.287819] 6 locks held by stop/202:
    [   18.287820] #0: (ptrval) (&tty->ldisc_sem){++++}, at: ldsem_down_read (??:?)
    [   18.287823] #1: (ptrval) (&tty->atomic_write_lock){+.+.}, at: tty_write_lock (tty_io.c:?)
    [   18.287826] #2: (ptrval) (&o_tty->termios_rwsem/1){++++}, at: n_tty_write (n_tty.c:?)
    [   18.287830] #3: (ptrval) (&ldata->output_lock){+.+.}, at: process_output_block (n_tty.c:?)
    [   18.287834] #4: (ptrval) (&(&port->lock)->rlock){-...}, at: pty_write (pty.c:?)
    [   18.287838] #5: (ptrval) (console_lock){+.+.}, at: console_trylock_spinning (printk.c:?)
    [   18.287841]
    [   18.287842] stack backtrace:
    [   18.287843] CPU: 0 PID: 202 Comm: stop Not tainted 4.19.248-00165-g3d1f971aa81f #1
    [   18.287843] Call Trace:
    [   18.287844] dump_stack (??:?)
    [   18.287845] print_circular_bug.cold+0x78/0x8b
    [   18.287846] check_prev_add+0x66a/0xd20
    [   18.287847] check_prevs_add (lockdep.c:?)
    [   18.287848] validate_chain+0x84a/0xe00
    [   18.287848] __lock_acquire (lockdep.c:?)
    [   18.287849] lock_acquire (??:?)
    [   18.287850] ? console_unlock (??:?)
    [   18.287851] console_unlock (??:?)
    [   18.287851] ? console_unlock (??:?)
    [   18.287852] ? native_save_fl (??:?)
    [   18.287853] vprintk_emit (??:?)
    [   18.287854] vprintk_default (??:?)
    [   18.287855] vprintk_func (??:?)
    [   18.287855] printk (??:?)
    [   18.287856] get_random_u32 (??:?)
    [   18.287857] ? shuffle_freelist (slub.c:?)
    [   18.287858] shuffle_freelist (slub.c:?)
    [   18.287858] ? page_address (??:?)
    [   18.287859] allocate_slab (slub.c:?)
    [   18.287860] new_slab (slub.c:?)
    [   18.287861] ? pvclock_clocksource_read (??:?)
    [   18.287862] ___slab_alloc+0x6d0/0xb20
    [   18.287862] ? kvm_sched_clock_read (kvmclock.c:?)
    [   18.287863] ? __slab_alloc+0xbc/0x2e0
    [   18.287864] ? native_wbinvd (paravirt.c:?)
    [   18.287865] __slab_alloc+0xd6/0x2e0
    [   18.287865] __kmalloc (??:?)
    [   18.287866] ? __lock_acquire (lockdep.c:?)
    [   18.287867] ? tty_buffer_alloc (tty_buffer.c:?)
    [   18.287868] tty_buffer_alloc (tty_buffer.c:?)
    [   18.287869] __tty_buffer_request_room (tty_buffer.c:?)
    [   18.287869] tty_insert_flip_string_fixed_flag (??:?)
    [   18.287870] pty_write (pty.c:?)
    [   18.287871] process_output_block (n_tty.c:?)
    [   18.287872] n_tty_write (n_tty.c:?)
    [   18.287873] ? print_dl_stats (??:?)
    [   18.287874] ? n_tty_ioctl (n_tty.c:?)
    [   18.287874] tty_write (tty_io.c:?)
    [   18.287875] ? n_tty_ioctl (n_tty.c:?)
    [   18.287876] ? tty_write_unlock (tty_io.c:?)
    [   18.287877] __vfs_write (??:?)
    [   18.287877] vfs_write (??:?)
    [   18.287878] ? __fget_light (file.c:?)
    [   18.287879] ksys_write (??:?)
    
    Cc: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
    Cc: Qian Cai <cai@lca.pw>
    Cc: Lech Perczak <l.perczak@camlintechnologies.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Theodore Ts'o <tytso@mit.edu>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: John Ogness <john.ogness@linutronix.de>
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Link: https://lore.kernel.org/lkml/Ytz+lo4zRQYG3JUR@xsang-OptiPlex-9020
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df4cb7f30e831cce0bd85bbbc1a88aaa46a5fa98
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Sun Jul 24 16:51:48 2022 +0200

    Revert "Revert "char/random: silence a lockdep splat with printk()""
    
    In 2019, Sergey fixed a lockdep splat with 15341b1dd409 ("char/random:
    silence a lockdep splat with printk()"), but that got reverted soon
    after from 4.19 because back then it apparently caused various problems.
    But the issue it was fixing is still there, and more generally, many
    patches turning printk() into printk_deferred() have landed since,
    making me suspect it's okay to try this out again.
    
    This should fix the following deadlock found by the kernel test robot:
    
    [   18.287691] WARNING: possible circular locking dependency detected
    [   18.287692] 4.19.248-00165-g3d1f971aa81f #1 Not tainted
    [   18.287693] ------------------------------------------------------
    [   18.287712] stop/202 is trying to acquire lock:
    [   18.287713] (ptrval) (console_owner){..-.}, at: console_unlock (??:?)
    [   18.287717]
    [   18.287718] but task is already holding lock:
    [   18.287718] (ptrval) (&(&port->lock)->rlock){-...}, at: pty_write (pty.c:?)
    [   18.287722]
    [   18.287722] which lock already depends on the new lock.
    [   18.287723]
    [   18.287724]
    [   18.287725] the existing dependency chain (in reverse order) is:
    [   18.287725]
    [   18.287726] -> #2 (&(&port->lock)->rlock){-...}:
    [   18.287729] validate_chain+0x84a/0xe00
    [   18.287729] __lock_acquire (lockdep.c:?)
    [   18.287730] lock_acquire (??:?)
    [   18.287731] _raw_spin_lock_irqsave (??:?)
    [   18.287732] tty_port_tty_get (??:?)
    [   18.287733] tty_port_default_wakeup (tty_port.c:?)
    [   18.287734] tty_port_tty_wakeup (??:?)
    [   18.287734] uart_write_wakeup (??:?)
    [   18.287735] serial8250_tx_chars (??:?)
    [   18.287736] serial8250_handle_irq (??:?)
    [   18.287737] serial8250_default_handle_irq (8250_port.c:?)
    [   18.287738] serial8250_interrupt (8250_core.c:?)
    [   18.287738] __handle_irq_event_percpu (??:?)
    [   18.287739] handle_irq_event_percpu (??:?)
    [   18.287740] handle_irq_event (??:?)
    [   18.287741] handle_edge_irq (??:?)
    [   18.287742] handle_irq (??:?)
    [   18.287742] do_IRQ (??:?)
    [   18.287743] common_interrupt (entry_32.o:?)
    [   18.287744] _raw_spin_unlock_irqrestore (??:?)
    [   18.287745] uart_write (serial_core.c:?)
    [   18.287746] process_output_block (n_tty.c:?)
    [   18.287747] n_tty_write (n_tty.c:?)
    [   18.287747] tty_write (tty_io.c:?)
    [   18.287748] __vfs_write (??:?)
    [   18.287749] vfs_write (??:?)
    [   18.287750] ksys_write (??:?)
    [   18.287750] sys_write (??:?)
    [   18.287751] do_fast_syscall_32 (??:?)
    [   18.287752] entry_SYSENTER_32 (??:?)
    [   18.287752]
    [   18.287753] -> #1 (&port_lock_key){-.-.}:
    [   18.287756]
    [   18.287756] -> #0 (console_owner){..-.}:
    [   18.287759] check_prevs_add (lockdep.c:?)
    [   18.287760] validate_chain+0x84a/0xe00
    [   18.287761] __lock_acquire (lockdep.c:?)
    [   18.287761] lock_acquire (??:?)
    [   18.287762] console_unlock (??:?)
    [   18.287763] vprintk_emit (??:?)
    [   18.287764] vprintk_default (??:?)
    [   18.287764] vprintk_func (??:?)
    [   18.287765] printk (??:?)
    [   18.287766] get_random_u32 (??:?)
    [   18.287767] shuffle_freelist (slub.c:?)
    [   18.287767] allocate_slab (slub.c:?)
    [   18.287768] new_slab (slub.c:?)
    [   18.287769] ___slab_alloc+0x6d0/0xb20
    [   18.287770] __slab_alloc+0xd6/0x2e0
    [   18.287770] __kmalloc (??:?)
    [   18.287771] tty_buffer_alloc (tty_buffer.c:?)
    [   18.287772] __tty_buffer_request_room (tty_buffer.c:?)
    [   18.287773] tty_insert_flip_string_fixed_flag (??:?)
    [   18.287774] pty_write (pty.c:?)
    [   18.287775] process_output_block (n_tty.c:?)
    [   18.287776] n_tty_write (n_tty.c:?)
    [   18.287777] tty_write (tty_io.c:?)
    [   18.287778] __vfs_write (??:?)
    [   18.287779] vfs_write (??:?)
    [   18.287780] ksys_write (??:?)
    [   18.287780] sys_write (??:?)
    [   18.287781] do_fast_syscall_32 (??:?)
    [   18.287782] entry_SYSENTER_32 (??:?)
    [   18.287783]
    [   18.287783] other info that might help us debug this:
    [   18.287784]
    [   18.287785] Chain exists of:
    [   18.287785]   console_owner --> &port_lock_key --> &(&port->lock)->rlock
    [   18.287789]
    [   18.287790]  Possible unsafe locking scenario:
    [   18.287790]
    [   18.287791]        CPU0                    CPU1
    [   18.287792]        ----                    ----
    [   18.287792]   lock(&(&port->lock)->rlock);
    [   18.287794]                                lock(&port_lock_key);
    [   18.287814]                                lock(&(&port->lock)->rlock);
    [   18.287815]   lock(console_owner);
    [   18.287817]
    [   18.287818]  *** DEADLOCK ***
    [   18.287818]
    [   18.287819] 6 locks held by stop/202:
    [   18.287820] #0: (ptrval) (&tty->ldisc_sem){++++}, at: ldsem_down_read (??:?)
    [   18.287823] #1: (ptrval) (&tty->atomic_write_lock){+.+.}, at: tty_write_lock (tty_io.c:?)
    [   18.287826] #2: (ptrval) (&o_tty->termios_rwsem/1){++++}, at: n_tty_write (n_tty.c:?)
    [   18.287830] #3: (ptrval) (&ldata->output_lock){+.+.}, at: process_output_block (n_tty.c:?)
    [   18.287834] #4: (ptrval) (&(&port->lock)->rlock){-...}, at: pty_write (pty.c:?)
    [   18.287838] #5: (ptrval) (console_lock){+.+.}, at: console_trylock_spinning (printk.c:?)
    [   18.287841]
    [   18.287842] stack backtrace:
    [   18.287843] CPU: 0 PID: 202 Comm: stop Not tainted 4.19.248-00165-g3d1f971aa81f #1
    [   18.287843] Call Trace:
    [   18.287844] dump_stack (??:?)
    [   18.287845] print_circular_bug.cold+0x78/0x8b
    [   18.287846] check_prev_add+0x66a/0xd20
    [   18.287847] check_prevs_add (lockdep.c:?)
    [   18.287848] validate_chain+0x84a/0xe00
    [   18.287848] __lock_acquire (lockdep.c:?)
    [   18.287849] lock_acquire (??:?)
    [   18.287850] ? console_unlock (??:?)
    [   18.287851] console_unlock (??:?)
    [   18.287851] ? console_unlock (??:?)
    [   18.287852] ? native_save_fl (??:?)
    [   18.287853] vprintk_emit (??:?)
    [   18.287854] vprintk_default (??:?)
    [   18.287855] vprintk_func (??:?)
    [   18.287855] printk (??:?)
    [   18.287856] get_random_u32 (??:?)
    [   18.287857] ? shuffle_freelist (slub.c:?)
    [   18.287858] shuffle_freelist (slub.c:?)
    [   18.287858] ? page_address (??:?)
    [   18.287859] allocate_slab (slub.c:?)
    [   18.287860] new_slab (slub.c:?)
    [   18.287861] ? pvclock_clocksource_read (??:?)
    [   18.287862] ___slab_alloc+0x6d0/0xb20
    [   18.287862] ? kvm_sched_clock_read (kvmclock.c:?)
    [   18.287863] ? __slab_alloc+0xbc/0x2e0
    [   18.287864] ? native_wbinvd (paravirt.c:?)
    [   18.287865] __slab_alloc+0xd6/0x2e0
    [   18.287865] __kmalloc (??:?)
    [   18.287866] ? __lock_acquire (lockdep.c:?)
    [   18.287867] ? tty_buffer_alloc (tty_buffer.c:?)
    [   18.287868] tty_buffer_alloc (tty_buffer.c:?)
    [   18.287869] __tty_buffer_request_room (tty_buffer.c:?)
    [   18.287869] tty_insert_flip_string_fixed_flag (??:?)
    [   18.287870] pty_write (pty.c:?)
    [   18.287871] process_output_block (n_tty.c:?)
    [   18.287872] n_tty_write (n_tty.c:?)
    [   18.287873] ? print_dl_stats (??:?)
    [   18.287874] ? n_tty_ioctl (n_tty.c:?)
    [   18.287874] tty_write (tty_io.c:?)
    [   18.287875] ? n_tty_ioctl (n_tty.c:?)
    [   18.287876] ? tty_write_unlock (tty_io.c:?)
    [   18.287877] __vfs_write (??:?)
    [   18.287877] vfs_write (??:?)
    [   18.287878] ? __fget_light (file.c:?)
    [   18.287879] ksys_write (??:?)
    
    Cc: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
    Cc: Qian Cai <cai@lca.pw>
    Cc: Lech Perczak <l.perczak@camlintechnologies.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Theodore Ts'o <tytso@mit.edu>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: John Ogness <john.ogness@linutronix.de>
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Link: https://lore.kernel.org/lkml/Ytz+lo4zRQYG3JUR@xsang-OptiPlex-9020
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bbc39ce7809b1e2cd0f96103d4510550a96d02f
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Sun Jul 24 16:51:48 2022 +0200

    Revert "Revert "char/random: silence a lockdep splat with printk()""
    
    In 2019, Sergey fixed a lockdep splat with 15341b1dd409 ("char/random:
    silence a lockdep splat with printk()"), but that got reverted soon
    after from 4.19 because back then it apparently caused various problems.
    But the issue it was fixing is still there, and more generally, many
    patches turning printk() into printk_deferred() have landed since,
    making me suspect it's okay to try this out again.
    
    This should fix the following deadlock found by the kernel test robot:
    
    [   18.287691] WARNING: possible circular locking dependency detected
    [   18.287692] 4.19.248-00165-g3d1f971aa81f #1 Not tainted
    [   18.287693] ------------------------------------------------------
    [   18.287712] stop/202 is trying to acquire lock:
    [   18.287713] (ptrval) (console_owner){..-.}, at: console_unlock (??:?)
    [   18.287717]
    [   18.287718] but task is already holding lock:
    [   18.287718] (ptrval) (&(&port->lock)->rlock){-...}, at: pty_write (pty.c:?)
    [   18.287722]
    [   18.287722] which lock already depends on the new lock.
    [   18.287723]
    [   18.287724]
    [   18.287725] the existing dependency chain (in reverse order) is:
    [   18.287725]
    [   18.287726] -> #2 (&(&port->lock)->rlock){-...}:
    [   18.287729] validate_chain+0x84a/0xe00
    [   18.287729] __lock_acquire (lockdep.c:?)
    [   18.287730] lock_acquire (??:?)
    [   18.287731] _raw_spin_lock_irqsave (??:?)
    [   18.287732] tty_port_tty_get (??:?)
    [   18.287733] tty_port_default_wakeup (tty_port.c:?)
    [   18.287734] tty_port_tty_wakeup (??:?)
    [   18.287734] uart_write_wakeup (??:?)
    [   18.287735] serial8250_tx_chars (??:?)
    [   18.287736] serial8250_handle_irq (??:?)
    [   18.287737] serial8250_default_handle_irq (8250_port.c:?)
    [   18.287738] serial8250_interrupt (8250_core.c:?)
    [   18.287738] __handle_irq_event_percpu (??:?)
    [   18.287739] handle_irq_event_percpu (??:?)
    [   18.287740] handle_irq_event (??:?)
    [   18.287741] handle_edge_irq (??:?)
    [   18.287742] handle_irq (??:?)
    [   18.287742] do_IRQ (??:?)
    [   18.287743] common_interrupt (entry_32.o:?)
    [   18.287744] _raw_spin_unlock_irqrestore (??:?)
    [   18.287745] uart_write (serial_core.c:?)
    [   18.287746] process_output_block (n_tty.c:?)
    [   18.287747] n_tty_write (n_tty.c:?)
    [   18.287747] tty_write (tty_io.c:?)
    [   18.287748] __vfs_write (??:?)
    [   18.287749] vfs_write (??:?)
    [   18.287750] ksys_write (??:?)
    [   18.287750] sys_write (??:?)
    [   18.287751] do_fast_syscall_32 (??:?)
    [   18.287752] entry_SYSENTER_32 (??:?)
    [   18.287752]
    [   18.287753] -> #1 (&port_lock_key){-.-.}:
    [   18.287756]
    [   18.287756] -> #0 (console_owner){..-.}:
    [   18.287759] check_prevs_add (lockdep.c:?)
    [   18.287760] validate_chain+0x84a/0xe00
    [   18.287761] __lock_acquire (lockdep.c:?)
    [   18.287761] lock_acquire (??:?)
    [   18.287762] console_unlock (??:?)
    [   18.287763] vprintk_emit (??:?)
    [   18.287764] vprintk_default (??:?)
    [   18.287764] vprintk_func (??:?)
    [   18.287765] printk (??:?)
    [   18.287766] get_random_u32 (??:?)
    [   18.287767] shuffle_freelist (slub.c:?)
    [   18.287767] allocate_slab (slub.c:?)
    [   18.287768] new_slab (slub.c:?)
    [   18.287769] ___slab_alloc+0x6d0/0xb20
    [   18.287770] __slab_alloc+0xd6/0x2e0
    [   18.287770] __kmalloc (??:?)
    [   18.287771] tty_buffer_alloc (tty_buffer.c:?)
    [   18.287772] __tty_buffer_request_room (tty_buffer.c:?)
    [   18.287773] tty_insert_flip_string_fixed_flag (??:?)
    [   18.287774] pty_write (pty.c:?)
    [   18.287775] process_output_block (n_tty.c:?)
    [   18.287776] n_tty_write (n_tty.c:?)
    [   18.287777] tty_write (tty_io.c:?)
    [   18.287778] __vfs_write (??:?)
    [   18.287779] vfs_write (??:?)
    [   18.287780] ksys_write (??:?)
    [   18.287780] sys_write (??:?)
    [   18.287781] do_fast_syscall_32 (??:?)
    [   18.287782] entry_SYSENTER_32 (??:?)
    [   18.287783]
    [   18.287783] other info that might help us debug this:
    [   18.287784]
    [   18.287785] Chain exists of:
    [   18.287785]   console_owner --> &port_lock_key --> &(&port->lock)->rlock
    [   18.287789]
    [   18.287790]  Possible unsafe locking scenario:
    [   18.287790]
    [   18.287791]        CPU0                    CPU1
    [   18.287792]        ----                    ----
    [   18.287792]   lock(&(&port->lock)->rlock);
    [   18.287794]                                lock(&port_lock_key);
    [   18.287814]                                lock(&(&port->lock)->rlock);
    [   18.287815]   lock(console_owner);
    [   18.287817]
    [   18.287818]  *** DEADLOCK ***
    [   18.287818]
    [   18.287819] 6 locks held by stop/202:
    [   18.287820] #0: (ptrval) (&tty->ldisc_sem){++++}, at: ldsem_down_read (??:?)
    [   18.287823] #1: (ptrval) (&tty->atomic_write_lock){+.+.}, at: tty_write_lock (tty_io.c:?)
    [   18.287826] #2: (ptrval) (&o_tty->termios_rwsem/1){++++}, at: n_tty_write (n_tty.c:?)
    [   18.287830] #3: (ptrval) (&ldata->output_lock){+.+.}, at: process_output_block (n_tty.c:?)
    [   18.287834] #4: (ptrval) (&(&port->lock)->rlock){-...}, at: pty_write (pty.c:?)
    [   18.287838] #5: (ptrval) (console_lock){+.+.}, at: console_trylock_spinning (printk.c:?)
    [   18.287841]
    [   18.287842] stack backtrace:
    [   18.287843] CPU: 0 PID: 202 Comm: stop Not tainted 4.19.248-00165-g3d1f971aa81f #1
    [   18.287843] Call Trace:
    [   18.287844] dump_stack (??:?)
    [   18.287845] print_circular_bug.cold+0x78/0x8b
    [   18.287846] check_prev_add+0x66a/0xd20
    [   18.287847] check_prevs_add (lockdep.c:?)
    [   18.287848] validate_chain+0x84a/0xe00
    [   18.287848] __lock_acquire (lockdep.c:?)
    [   18.287849] lock_acquire (??:?)
    [   18.287850] ? console_unlock (??:?)
    [   18.287851] console_unlock (??:?)
    [   18.287851] ? console_unlock (??:?)
    [   18.287852] ? native_save_fl (??:?)
    [   18.287853] vprintk_emit (??:?)
    [   18.287854] vprintk_default (??:?)
    [   18.287855] vprintk_func (??:?)
    [   18.287855] printk (??:?)
    [   18.287856] get_random_u32 (??:?)
    [   18.287857] ? shuffle_freelist (slub.c:?)
    [   18.287858] shuffle_freelist (slub.c:?)
    [   18.287858] ? page_address (??:?)
    [   18.287859] allocate_slab (slub.c:?)
    [   18.287860] new_slab (slub.c:?)
    [   18.287861] ? pvclock_clocksource_read (??:?)
    [   18.287862] ___slab_alloc+0x6d0/0xb20
    [   18.287862] ? kvm_sched_clock_read (kvmclock.c:?)
    [   18.287863] ? __slab_alloc+0xbc/0x2e0
    [   18.287864] ? native_wbinvd (paravirt.c:?)
    [   18.287865] __slab_alloc+0xd6/0x2e0
    [   18.287865] __kmalloc (??:?)
    [   18.287866] ? __lock_acquire (lockdep.c:?)
    [   18.287867] ? tty_buffer_alloc (tty_buffer.c:?)
    [   18.287868] tty_buffer_alloc (tty_buffer.c:?)
    [   18.287869] __tty_buffer_request_room (tty_buffer.c:?)
    [   18.287869] tty_insert_flip_string_fixed_flag (??:?)
    [   18.287870] pty_write (pty.c:?)
    [   18.287871] process_output_block (n_tty.c:?)
    [   18.287872] n_tty_write (n_tty.c:?)
    [   18.287873] ? print_dl_stats (??:?)
    [   18.287874] ? n_tty_ioctl (n_tty.c:?)
    [   18.287874] tty_write (tty_io.c:?)
    [   18.287875] ? n_tty_ioctl (n_tty.c:?)
    [   18.287876] ? tty_write_unlock (tty_io.c:?)
    [   18.287877] __vfs_write (??:?)
    [   18.287877] vfs_write (??:?)
    [   18.287878] ? __fget_light (file.c:?)
    [   18.287879] ksys_write (??:?)
    
    Cc: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
    Cc: Qian Cai <cai@lca.pw>
    Cc: Lech Perczak <l.perczak@camlintechnologies.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Theodore Ts'o <tytso@mit.edu>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: John Ogness <john.ogness@linutronix.de>
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Link: https://lore.kernel.org/lkml/Ytz+lo4zRQYG3JUR@xsang-OptiPlex-9020
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 148399c90e25bb5d1aa6f3e1dde25fec6f4005f2
Author: Li zeming <zeming@nfschina.com>
Date:   Wed Jul 27 16:37:51 2022 +0800

    clocksource/drivers/sun5i: Remove unnecessary (void*) conversions
    
    Remove unnecessary void* type castings.
    
    Signed-off-by: Li zeming <zeming@nfschina.com>
    Link: https://lore.kernel.org/r/20220727083751.5540-1-zeming@nfschina.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7a93d490900edcdbd3833d8bb9a01b23d8bb461e
Author: XU pengfei <xupengfei@nfschina.com>
Date:   Wed Jul 20 10:07:35 2022 +0800

    clocksource/drivers/sun4i: Remove unnecessary (void*) conversions
    
    Remove unnecessary void* type casting.
    
    Signed-off-by: XU pengfei <xupengfei@nfschina.com>
    Link: https://lore.kernel.org/r/20220720020735.3771-1-xupengfei@nfschina.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 110a25357584a2d2d9f50accb1e89455c54290b6
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jul 18 23:36:57 2022 +0200

    clocksource/drivers/tegra186: Put Kconfig option 'tristate' to 'bool'
    
    The clocksources are built-in, they are not modules. We don't know if
    the core time framework is ready for clockevents / clocksources as
    modules.
    
    Revert back this option to 'bool'.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20220718213657.1303538-1-daniel.lezcano@linaro.org

commit 775343f9fde99b4e5e6470f9d8afd519ee67dfa3
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon May 23 18:14:48 2022 +0300

    clocksource/drivers/timer-ti-dm: Make driver selection bool for TI K3
    
    The clocksource drivers do not currently have loadable modules as
    pointed out by Daniel Lezcano <daniel.lezcano@linaro.org>.
    
    Let's reconsider this later on once timer removal discussion has been
    done, and set timer-ti-dm to bool for TI K3 SoC.
    
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Nishanth Menon <nm@ti.com>
    Cc: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20220523151448.23732-1-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4e3203610a889c72e96ddfc9e601b9349ef19c00
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Apr 8 13:17:15 2022 +0300

    clocksource/drivers/timer-ti-dm: Add compatible for am6 SoCs
    
    Add compatible for ti,am654-timer to support the timers. For example, am654
    has four timers in the MCU domain and 12 timers in the MAIN domain.
    
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Nishanth Menon <nm@ti.com>
    Cc: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20220408101715.43697-4-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ab0bbef3ae0f6b5a3b60671cd0124d0fc4fc2567
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Apr 8 13:17:14 2022 +0300

    clocksource/drivers/timer-ti-dm: Make timer selectable for ARCH_K3
    
    Let's make timer-ti-dm selectable for ARCH_K3, and add a separate option
    for OMAP_DM_SYSTIMER as there should be no need for it on ARCH_K3.
    
    For older TI SoCs, we are already selecting OMAP_DM_TIMER in
    arch/arm/mach-omap*/Kconfig. For mach-omap2, we need to now also select
    OMAP_DM_SYSTIMER.
    
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Nishanth Menon <nm@ti.com>
    Cc: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20220408101715.43697-3-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 41e79b1d458477212d0a880c87622bcaa69ab3ea
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Apr 8 13:17:13 2022 +0300

    clocksource/drivers/timer-ti-dm: Move inline functions to driver for am6
    
    The __omap_dm_timer_* inline functions in the header are no longer needed
    outside the driver, and the header ifdefs prevent the driver working for
    ARCH_K3.
    
    Let's move the inline functions to the driver and drop the ifdefs and
    drop the unused functions __omap_dm_timer_override_errata() and
    __omap_dm_timer_load_start().
    
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Nishanth Menon <nm@ti.com>
    Cc: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20220408101715.43697-2-tony@atomide.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit aa84506ea644d0952a75136dee7386cc54b234b0
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 12:06:03 2022 +0200

    clocksource/drivers/sh_cmt: Add R-Car Gen4 support
    
    Add support for the R-Car Gen4 CMT types 0/1 which are the same as in
    the previous two generations.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Link: https://lore.kernel.org/r/20220713100603.3391-4-wsa+renesas@sang-engineering.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 50ed9fffec3aed88bc1ffed277d291f81153bd5d
Author: Robert Marko <robimarko@gmail.com>
Date:   Thu Jul 7 19:37:33 2022 +0200

    arm64: dts: qcom: ipq8074: add APCS node
    
    APCS now has support for providing the APSS clocks as the child device
    for IPQ8074.
    
    So, add the required DT node for it as it will later be used as the CPU
    clocksource.
    
    Signed-off-by: Robert Marko <robimarko@gmail.com>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    [bjorn: Sorted node based on address]
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20220707173733.404947-4-robimarko@gmail.com

commit 278150b2151ee77ab66204ae2e53a3f94cb4b015
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Thu Jun 9 12:40:41 2022 +0300

    clocksource/drivers/timer-microchip-pit64b: Fix compilation warnings
    
    Fix the following compilation warnings:
    timer-microchip-pit64b.c:68: warning: cannot understand function prototype: 'struct mchp_pit64b_clkevt '
    timer-microchip-pit64b.c:82: warning: cannot understand function prototype: 'struct mchp_pit64b_clksrc '
    timer-microchip-pit64b.c:283: warning: Function parameter or member 'timer' not described in 'mchp_pit64b_init_mode'
    timer-microchip-pit64b.c:283: warning: Function parameter or member 'max_rate' not described in 'mchp_pit64b_init_mode'
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220609094041.1796372-4-claudiu.beznea@microchip.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b02180e899c9e04ba6efda7bdf36d9ad028c9f4f
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Thu Jun 9 12:40:40 2022 +0300

    clocksource/drivers/timer-microchip-pit64b: Use mchp_pit64b_{suspend, resume}
    
    Use mchp_pit64b_suspend() and mchp_pit64b_resume() to disable or
    enable timers clocks on init and remove specific
    clk_prepare_{disable, enable} calls. This is ok also for clockevent timer
    as proper clock enable, disable is done on .set_state_oneshot,
    .set_state_periodic, .set_state_shutdown calls.
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220609094041.1796372-3-claudiu.beznea@microchip.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2c9c4c9e543de46a8031d5300e3036a3a89bad28
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Thu Jun 9 12:40:39 2022 +0300

    clocksource/drivers/timer-microchip-pit64b: Remove suspend/resume ops for ce
    
    Remove suspend and resume ops for clockevent and add set_state_oneshot()
    instead. Along with this mchp_pit64b_{suspend, resume}() were called on
    proper function to disable/enable clocks. This will allow disabling clocks
    for clockevent in case it is not selected as active clockevent.
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220609094041.1796372-2-claudiu.beznea@microchip.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 327e93cf9a59b0d04eb3a31a7fdbf0f11cf13ecb
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
Date:   Mon Jun 13 15:38:19 2022 +0200

    clocksource/drivers/timer-mediatek: Implement CPUXGPT timers
    
    Some MediaTek platforms with a buggy TrustZone ATF firmware will not
    initialize the AArch64 System Timer correctly: in these cases, the
    System Timer address is correctly programmed, as well as the CNTFRQ_EL0
    register (reading 13MHz, as it should be), but the assigned hardware
    timers are never started before (or after) booting Linux.
    
    In this condition, any call to function get_cycles() will be returning
    zero, as CNTVCT_EL0 will always read zero.
    
    One common critical symptom of that is trying to use the udelay()
    function (calling __delay()), which executes the following loop:
    
                start = get_cycles();
                while ((get_cycles() - start) < cycles)
                        cpu_relax();
    
    which, when CNTVCT_EL0 always reads zero, translates to:
    
                while((0 - 0) < 0)  ==> while(0 < 0)
    
    ... generating an infinite loop, even though zero is never less
    than zero, but always equal to it (this has to be researched,
    but it's out of the scope of this commit).
    
    To fix this issue on the affected MediaTek platforms, the solution
    is to simply start the timers that are designed to be System Timer(s).
    These timers, downstream, are called "CPUXGPT" and there is one
    timer per CPU core; luckily, it is not necessary to set a start bit
    on each CPUX General Purpose Timer, but it's conveniently enough to:
     - Set the clock divider (input = 26MHz, divider = 2, output = 13MHz);
     - Set the ENABLE bit on a global register (starts all CPUX timers).
    
    The only small hurdle with this setup is that it's all done through
    the MCUSYS wrapper, where it is needed, for each read or write, to
    select a register address (by writing it to an index register) and
    then to perform any R/W on a "CON" register.
    
    For example, writing "0x1" to the CPUXGPT register offset 0x4:
    - Write 0x4 to mcusys INDEX register
    - Write 0x1 to mcusys CON register
    
    Reading from CPUXGPT register offset 0x4:
    - Write 0x4 to mcusys INDEX register
    - Read mcusys CON register.
    
    Finally, starting this timer makes platforms affected by this issue
    to work correctly.
    
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Link: https://lore.kernel.org/r/20220613133819.35318-3-angelogioacchino.delregno@collabora.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 07385a6055a8649593052703b1bfd6aef49db02a
Author: Kartik <kkartik@nvidia.com>
Date:   Mon Jul 4 13:43:39 2022 +0530

    clocksource/drivers/timer-tegra186: Add support for Tegra234 SoC
    
    The timer IP block present on Tegra234 SoC supports watchdog timer
    functionality that can be used to recover from system hangs. The
    watchdog timer uses a timer in the background for countdown.
    
    Signed-off-by: Kartik <kkartik@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Link: https://lore.kernel.org/r/1656922422-25823-4-git-send-email-kkartik@nvidia.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 42cee19a9f839f2d60f1cd237d6905d8649127aa
Author: Thierry Reding <treding@nvidia.com>
Date:   Mon Jul 4 13:43:38 2022 +0530

    clocksource: Add Tegra186 timers support
    
    Currently this only supports a single watchdog, which uses a timer in
    the background for countdown. Eventually the timers could be used for
    various time-keeping tasks, but by default the architected timer will
    already provide that functionality.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Kartik <kkartik@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Link: https://lore.kernel.org/r/1656922422-25823-3-git-send-email-kkartik@nvidia.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6f6f3e313f39f91ed5ffd59bfaf29748ced9d24c
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Jul 14 18:58:52 2022 -0700

    clocksource/drivers/arm_global_timer: Fix Kconfig "its" grammar
    
    Use the possessive "its" instead of the contraction "it's"
    where appropriate.
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Patrice Chotard <patrice.chotard@foss.st.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: https://lore.kernel.org/r/20220715015852.12523-1-rdunlap@infradead.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ce7d101750ff8450af16d6e1f6ccba10d44ae9f3
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:21 2022 +0200

    selftests: timers: clocksource-switch: adapt to kselftest framework
    
    So we have proper counters at the end of a test. We also print the
    kselftest header at the end of the test, so we don't mix with the output
    of the child process. There is only this one test anyhow.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

commit 248ae6f49a257bcbc57513ebc58e5ed7fa47e7fe
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Thu Jul 14 20:57:21 2022 +0200

    selftests: timers: clocksource-switch: add 'runtime' command line parameter
    
    So the user can decide how long the test should run.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

commit 19b6823a6e9177ca95068440d622005e4aab5543
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:19 2022 +0200

    selftests: timers: clocksource-switch: add command line switch to skip sanity check
    
    The sanity check takes a while. If you do repeated checks when
    debugging, this is time consuming. Add a parameter to skip it.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

commit 5be1fd963f7989090b16e3c471d0910502fb9bf8
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:18 2022 +0200

    selftests: timers: clocksource-switch: sort includes
    
    It is easier to check if you need to add an include if the existing ones
    are sorted.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

commit 4d8f52ac5fa9eede7b7aa2f2d67c841d9eeb655f
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Jul 13 22:46:17 2022 +0200

    selftests: timers: clocksource-switch: fix passing errors from child
    
    The return value from system() is a waitpid-style integer. Do not return
    it directly because with the implicit masking in exit() it will always
    return 0. Access it with appropriate macros to really pass on errors.
    
    Fixes: 7290ce1423c3 ("selftests/timers: Add clocksource-switch test from timetest suite")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: John Stultz <jstultz@google.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

commit 8169198652b9c02746dda463ba6311509ae27d0b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jun 30 11:55:42 2022 +0200

    clocksource/drivers/ixp4xx: remove EXPORT_SYMBOL_GPL from ixp4xx_timer_setup()
    
    ixp4xx_timer_setup is exported, and so can not be an __init function.
    But it does not need to be exported as it is only called from one
    in-kernel function, so just remove the EXPORT_SYMBOL_GPL() marking to
    resolve the build warning.
    
    This is fixed "properly" in commit 41929c9f628b
    ("clocksource/drivers/ixp4xx: Drop boardfile probe path") but that can
    not be backported to older kernels as the reworking of the IXP4xx
    codebase is not suitable for stable releases.
    
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e21ef18019c5f3c83935f27e13995f37e1982f4
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jun 30 11:55:42 2022 +0200

    clocksource/drivers/ixp4xx: remove EXPORT_SYMBOL_GPL from ixp4xx_timer_setup()
    
    ixp4xx_timer_setup is exported, and so can not be an __init function.
    But it does not need to be exported as it is only called from one
    in-kernel function, so just remove the EXPORT_SYMBOL_GPL() marking to
    resolve the build warning.
    
    This is fixed "properly" in commit 41929c9f628b
    ("clocksource/drivers/ixp4xx: Drop boardfile probe path") but that can
    not be backported to older kernels as the reworking of the IXP4xx
    codebase is not suitable for stable releases.
    
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ac2845937ce03f474be97687b7d016447b24c3e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jun 30 11:55:42 2022 +0200

    clocksource/drivers/ixp4xx: remove EXPORT_SYMBOL_GPL from ixp4xx_timer_setup()
    
    ixp4xx_timer_setup is exported, and so can not be an __init function.
    But it does not need to be exported as it is only called from one
    in-kernel function, so just remove the EXPORT_SYMBOL_GPL() marking to
    resolve the build warning.
    
    This is fixed "properly" in commit 41929c9f628b
    ("clocksource/drivers/ixp4xx: Drop boardfile probe path") but that can
    not be backported to older kernels as the reworking of the IXP4xx
    codebase is not suitable for stable releases.
    
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ecbe7846818615f282c45565a56754ceaf1eb3a
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Apr 6 22:55:05 2022 +0200

    clocksource/drivers/ixp4xx: Drop boardfile probe path
    
    commit 41929c9f628b9990d33a200c54bb0c919e089aa8 upstream.
    
    The boardfiles for IXP4xx have been deleted. Delete all the
    quirks and code dealing with that boot path and rely solely on
    device tree boot.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20220406205505.2332821-1-linus.walleij@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 937fcbb55a1e48a6422e87e8f49422c92265f102
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Mon Jun 6 14:02:38 2022 +0900

    clocksource: hyper-v: unexport __init-annotated hv_init_clocksource()
    
    [ Upstream commit 245b993d8f6c4e25f19191edfbd8080b645e12b1 ]
    
    EXPORT_SYMBOL and __init is a bad combination because the .init.text
    section is freed up after the initialization. Hence, modules cannot
    use symbols annotated __init. The access to a freed symbol may end up
    with kernel panic.
    
    modpost used to detect it, but it has been broken for a decade.
    
    Recently, I fixed modpost so it started to warn it again, then this
    showed up in linux-next builds.
    
    There are two ways to fix it:
    
      - Remove __init
      - Remove EXPORT_SYMBOL
    
    I chose the latter for this case because the only in-tree call-site,
    arch/x86/kernel/cpu/mshyperv.c is never compiled as modular.
    (CONFIG_HYPERVISOR_GUEST is boolean)
    
    Fixes: dd2cb348613b ("clocksource/drivers: Continue making Hyper-V clocksource ISA agnostic")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20220606050238.4162200-1-masahiroy@kernel.org
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0414eab7c78f3518143d383e448d44fc573ac6d2
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Mon Jun 6 14:02:38 2022 +0900

    clocksource: hyper-v: unexport __init-annotated hv_init_clocksource()
    
    [ Upstream commit 245b993d8f6c4e25f19191edfbd8080b645e12b1 ]
    
    EXPORT_SYMBOL and __init is a bad combination because the .init.text
    section is freed up after the initialization. Hence, modules cannot
    use symbols annotated __init. The access to a freed symbol may end up
    with kernel panic.
    
    modpost used to detect it, but it has been broken for a decade.
    
    Recently, I fixed modpost so it started to warn it again, then this
    showed up in linux-next builds.
    
    There are two ways to fix it:
    
      - Remove __init
      - Remove EXPORT_SYMBOL
    
    I chose the latter for this case because the only in-tree call-site,
    arch/x86/kernel/cpu/mshyperv.c is never compiled as modular.
    (CONFIG_HYPERVISOR_GUEST is boolean)
    
    Fixes: dd2cb348613b ("clocksource/drivers: Continue making Hyper-V clocksource ISA agnostic")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20220606050238.4162200-1-masahiroy@kernel.org
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db965e2757d95f695e606856418cd84003dd036d
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Mon Jun 6 14:02:38 2022 +0900

    clocksource: hyper-v: unexport __init-annotated hv_init_clocksource()
    
    [ Upstream commit 245b993d8f6c4e25f19191edfbd8080b645e12b1 ]
    
    EXPORT_SYMBOL and __init is a bad combination because the .init.text
    section is freed up after the initialization. Hence, modules cannot
    use symbols annotated __init. The access to a freed symbol may end up
    with kernel panic.
    
    modpost used to detect it, but it has been broken for a decade.
    
    Recently, I fixed modpost so it started to warn it again, then this
    showed up in linux-next builds.
    
    There are two ways to fix it:
    
      - Remove __init
      - Remove EXPORT_SYMBOL
    
    I chose the latter for this case because the only in-tree call-site,
    arch/x86/kernel/cpu/mshyperv.c is never compiled as modular.
    (CONFIG_HYPERVISOR_GUEST is boolean)
    
    Fixes: dd2cb348613b ("clocksource/drivers: Continue making Hyper-V clocksource ISA agnostic")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20220606050238.4162200-1-masahiroy@kernel.org
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cff3a7ce6e81418b6e8bac941779bbf5d342d626
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Mon Jun 6 14:02:38 2022 +0900

    clocksource: hyper-v: unexport __init-annotated hv_init_clocksource()
    
    [ Upstream commit 245b993d8f6c4e25f19191edfbd8080b645e12b1 ]
    
    EXPORT_SYMBOL and __init is a bad combination because the .init.text
    section is freed up after the initialization. Hence, modules cannot
    use symbols annotated __init. The access to a freed symbol may end up
    with kernel panic.
    
    modpost used to detect it, but it has been broken for a decade.
    
    Recently, I fixed modpost so it started to warn it again, then this
    showed up in linux-next builds.
    
    There are two ways to fix it:
    
      - Remove __init
      - Remove EXPORT_SYMBOL
    
    I chose the latter for this case because the only in-tree call-site,
    arch/x86/kernel/cpu/mshyperv.c is never compiled as modular.
    (CONFIG_HYPERVISOR_GUEST is boolean)
    
    Fixes: dd2cb348613b ("clocksource/drivers: Continue making Hyper-V clocksource ISA agnostic")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20220606050238.4162200-1-masahiroy@kernel.org
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d806a688f98a36792e108ca8583712ee235f815
Merge: 462abc9de7a1 49d6a3c062a1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 17 13:39:12 2022 -0500

    Merge tag 'hyperv-fixes-signed-20220617' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux
    
    Pull hyperv fixes from Wei Liu:
    
     - Fix hv_init_clocksource annotation (Masahiro Yamada)
    
     - Two bug fixes for vmbus driver (Saurabh Sengar)
    
     - Fix SEV negotiation (Tianyu Lan)
    
     - Fix comments in code (Xiang Wang)
    
     - One minor fix to HID driver (Michael Kelley)
    
    * tag 'hyperv-fixes-signed-20220617' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux:
      x86/Hyper-V: Add SEV negotiate protocol support in Isolation VM
      Drivers: hv: vmbus: Release cpu lock in error case
      HID: hyperv: Correctly access fields declared as __le16
      clocksource: hyper-v: unexport __init-annotated hv_init_clocksource()
      Drivers: hv: Fix syntax errors in comments
      Drivers: hv: vmbus: Don't assign VMbus channel interrupts to isolated CPUs

commit dc30f510dd258bd08bd32fb6fa417881ec02ad2f
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri May 6 17:25:22 2022 +0100

    clocksource/drivers/sp804: Avoid error on multiple instances
    
    [ Upstream commit a98399cbc1e05f7b977419f03905501d566cf54e ]
    
    When a machine sports more than one SP804 timer instance, we only bring
    up the first one, since multiple timers of the same kind are not useful
    to Linux. As this is intentional behaviour, we should not return an
    error message, as we do today:
    ===============
    [    0.000800] Failed to initialize '/bus@8000000/motherboard-bus@8000000/iofpga-bus@300000000/timer@120000': -22
    ===============
    
    Replace the -EINVAL return with a debug message and return 0 instead.
    
    Also we do not reach the init function anymore if the DT node is
    disabled (as this is now handled by OF_DECLARE), so remove the explicit
    check for that case.
    
    This fixes a long standing bogus error when booting ARM's fastmodels.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/20220506162522.3675399-1-andre.przywara@arm.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6033ae24430c55290049db0532005d2f58f0e5d7
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Apr 22 12:41:01 2022 +0200

    clocksource/drivers/oxnas-rps: Fix irq_of_parse_and_map() return value
    
    [ Upstream commit 9c04a8ff03def4df3f81219ffbe1ec9b44ff5348 ]
    
    The irq_of_parse_and_map() returns 0 on failure, not a negative ERRNO.
    
    Fixes: 89355274e1f7 ("clocksource/drivers/oxnas-rps: Add Oxford Semiconductor RPS Dual Timer")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220422104101.55754-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 579a8a2c173492a1d2aa4cae8ddbad5287c615c5
Author: Samuel Holland <samuel@sholland.org>
Date:   Sun May 8 20:21:21 2022 -0500

    clocksource/drivers/riscv: Events are stopped during CPU suspend
    
    [ Upstream commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d ]
    
    Some implementations of the SBI time extension depend on hart-local
    state (for example, CSRs) that are lost or hardware that is powered
    down when a CPU is suspended. To be safe, the clockevents driver
    cannot assume that timer IRQs will be received during CPU suspend.
    
    Fixes: 62b019436814 ("clocksource: new RISC-V SBI timer driver")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Link: https://lore.kernel.org/r/20220509012121.40031-1-samuel@sholland.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c4ccfc3481a7e128435d37b702a423a4e716d20
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri May 6 17:25:22 2022 +0100

    clocksource/drivers/sp804: Avoid error on multiple instances
    
    [ Upstream commit a98399cbc1e05f7b977419f03905501d566cf54e ]
    
    When a machine sports more than one SP804 timer instance, we only bring
    up the first one, since multiple timers of the same kind are not useful
    to Linux. As this is intentional behaviour, we should not return an
    error message, as we do today:
    ===============
    [    0.000800] Failed to initialize '/bus@8000000/motherboard-bus@8000000/iofpga-bus@300000000/timer@120000': -22
    ===============
    
    Replace the -EINVAL return with a debug message and return 0 instead.
    
    Also we do not reach the init function anymore if the DT node is
    disabled (as this is now handled by OF_DECLARE), so remove the explicit
    check for that case.
    
    This fixes a long standing bogus error when booting ARM's fastmodels.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/20220506162522.3675399-1-andre.przywara@arm.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a95d03cdb2de8540cbf49608457378e7d1db29a1
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Apr 22 12:41:01 2022 +0200

    clocksource/drivers/oxnas-rps: Fix irq_of_parse_and_map() return value
    
    [ Upstream commit 9c04a8ff03def4df3f81219ffbe1ec9b44ff5348 ]
    
    The irq_of_parse_and_map() returns 0 on failure, not a negative ERRNO.
    
    Fixes: 89355274e1f7 ("clocksource/drivers/oxnas-rps: Add Oxford Semiconductor RPS Dual Timer")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220422104101.55754-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a54fb777ff3bf47889afca8a35d9fde05414ecc
Author: Samuel Holland <samuel@sholland.org>
Date:   Sun May 8 20:21:21 2022 -0500

    clocksource/drivers/riscv: Events are stopped during CPU suspend
    
    [ Upstream commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d ]
    
    Some implementations of the SBI time extension depend on hart-local
    state (for example, CSRs) that are lost or hardware that is powered
    down when a CPU is suspended. To be safe, the clockevents driver
    cannot assume that timer IRQs will be received during CPU suspend.
    
    Fixes: 62b019436814 ("clocksource: new RISC-V SBI timer driver")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Link: https://lore.kernel.org/r/20220509012121.40031-1-samuel@sholland.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55bfe858d0198379a0cfd6024dd4624b2c130a5a
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri May 6 17:25:22 2022 +0100

    clocksource/drivers/sp804: Avoid error on multiple instances
    
    [ Upstream commit a98399cbc1e05f7b977419f03905501d566cf54e ]
    
    When a machine sports more than one SP804 timer instance, we only bring
    up the first one, since multiple timers of the same kind are not useful
    to Linux. As this is intentional behaviour, we should not return an
    error message, as we do today:
    ===============
    [    0.000800] Failed to initialize '/bus@8000000/motherboard-bus@8000000/iofpga-bus@300000000/timer@120000': -22
    ===============
    
    Replace the -EINVAL return with a debug message and return 0 instead.
    
    Also we do not reach the init function anymore if the DT node is
    disabled (as this is now handled by OF_DECLARE), so remove the explicit
    check for that case.
    
    This fixes a long standing bogus error when booting ARM's fastmodels.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/20220506162522.3675399-1-andre.przywara@arm.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a04477f3be9c37e0427b62bec1e2b07b936b17d
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Apr 22 12:41:01 2022 +0200

    clocksource/drivers/oxnas-rps: Fix irq_of_parse_and_map() return value
    
    [ Upstream commit 9c04a8ff03def4df3f81219ffbe1ec9b44ff5348 ]
    
    The irq_of_parse_and_map() returns 0 on failure, not a negative ERRNO.
    
    Fixes: 89355274e1f7 ("clocksource/drivers/oxnas-rps: Add Oxford Semiconductor RPS Dual Timer")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220422104101.55754-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 604e35f704756842f7c3c392bf3771e9970a9a88
Author: Samuel Holland <samuel@sholland.org>
Date:   Sun May 8 20:21:21 2022 -0500

    clocksource/drivers/riscv: Events are stopped during CPU suspend
    
    [ Upstream commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d ]
    
    Some implementations of the SBI time extension depend on hart-local
    state (for example, CSRs) that are lost or hardware that is powered
    down when a CPU is suspended. To be safe, the clockevents driver
    cannot assume that timer IRQs will be received during CPU suspend.
    
    Fixes: 62b019436814 ("clocksource: new RISC-V SBI timer driver")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Link: https://lore.kernel.org/r/20220509012121.40031-1-samuel@sholland.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3f754d72d2df4c72f5052cf3ed1979d07625ece
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri May 6 17:25:22 2022 +0100

    clocksource/drivers/sp804: Avoid error on multiple instances
    
    [ Upstream commit a98399cbc1e05f7b977419f03905501d566cf54e ]
    
    When a machine sports more than one SP804 timer instance, we only bring
    up the first one, since multiple timers of the same kind are not useful
    to Linux. As this is intentional behaviour, we should not return an
    error message, as we do today:
    ===============
    [    0.000800] Failed to initialize '/bus@8000000/motherboard-bus@8000000/iofpga-bus@300000000/timer@120000': -22
    ===============
    
    Replace the -EINVAL return with a debug message and return 0 instead.
    
    Also we do not reach the init function anymore if the DT node is
    disabled (as this is now handled by OF_DECLARE), so remove the explicit
    check for that case.
    
    This fixes a long standing bogus error when booting ARM's fastmodels.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/20220506162522.3675399-1-andre.przywara@arm.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e892a7e60f1f508262c0fe6c84f2486c69594745
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Apr 22 12:41:01 2022 +0200

    clocksource/drivers/oxnas-rps: Fix irq_of_parse_and_map() return value
    
    [ Upstream commit 9c04a8ff03def4df3f81219ffbe1ec9b44ff5348 ]
    
    The irq_of_parse_and_map() returns 0 on failure, not a negative ERRNO.
    
    Fixes: 89355274e1f7 ("clocksource/drivers/oxnas-rps: Add Oxford Semiconductor RPS Dual Timer")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220422104101.55754-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d54a51b51851ead86292a0db4a7184d77623bfe2
Author: Samuel Holland <samuel@sholland.org>
Date:   Sun May 8 20:21:21 2022 -0500

    clocksource/drivers/riscv: Events are stopped during CPU suspend
    
    [ Upstream commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d ]
    
    Some implementations of the SBI time extension depend on hart-local
    state (for example, CSRs) that are lost or hardware that is powered
    down when a CPU is suspended. To be safe, the clockevents driver
    cannot assume that timer IRQs will be received during CPU suspend.
    
    Fixes: 62b019436814 ("clocksource: new RISC-V SBI timer driver")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Link: https://lore.kernel.org/r/20220509012121.40031-1-samuel@sholland.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1bcfb95de192728fe48737fde6c09abd578945c4
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri May 6 17:25:22 2022 +0100

    clocksource/drivers/sp804: Avoid error on multiple instances
    
    [ Upstream commit a98399cbc1e05f7b977419f03905501d566cf54e ]
    
    When a machine sports more than one SP804 timer instance, we only bring
    up the first one, since multiple timers of the same kind are not useful
    to Linux. As this is intentional behaviour, we should not return an
    error message, as we do today:
    ===============
    [    0.000800] Failed to initialize '/bus@8000000/motherboard-bus@8000000/iofpga-bus@300000000/timer@120000': -22
    ===============
    
    Replace the -EINVAL return with a debug message and return 0 instead.
    
    Also we do not reach the init function anymore if the DT node is
    disabled (as this is now handled by OF_DECLARE), so remove the explicit
    check for that case.
    
    This fixes a long standing bogus error when booting ARM's fastmodels.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/20220506162522.3675399-1-andre.przywara@arm.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80f6712f241c4c4937fc93a4d163120bb457007a
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Apr 22 12:41:01 2022 +0200

    clocksource/drivers/oxnas-rps: Fix irq_of_parse_and_map() return value
    
    [ Upstream commit 9c04a8ff03def4df3f81219ffbe1ec9b44ff5348 ]
    
    The irq_of_parse_and_map() returns 0 on failure, not a negative ERRNO.
    
    Fixes: 89355274e1f7 ("clocksource/drivers/oxnas-rps: Add Oxford Semiconductor RPS Dual Timer")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220422104101.55754-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d041e885749f1506d41bc0dd945f27fc0cfc73f7
Author: Samuel Holland <samuel@sholland.org>
Date:   Sun May 8 20:21:21 2022 -0500

    clocksource/drivers/riscv: Events are stopped during CPU suspend
    
    [ Upstream commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d ]
    
    Some implementations of the SBI time extension depend on hart-local
    state (for example, CSRs) that are lost or hardware that is powered
    down when a CPU is suspended. To be safe, the clockevents driver
    cannot assume that timer IRQs will be received during CPU suspend.
    
    Fixes: 62b019436814 ("clocksource: new RISC-V SBI timer driver")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Link: https://lore.kernel.org/r/20220509012121.40031-1-samuel@sholland.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 661a101b1ac07e5ecbef132170a3495f3f81d5bc
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri May 6 17:25:22 2022 +0100

    clocksource/drivers/sp804: Avoid error on multiple instances
    
    [ Upstream commit a98399cbc1e05f7b977419f03905501d566cf54e ]
    
    When a machine sports more than one SP804 timer instance, we only bring
    up the first one, since multiple timers of the same kind are not useful
    to Linux. As this is intentional behaviour, we should not return an
    error message, as we do today:
    ===============
    [    0.000800] Failed to initialize '/bus@8000000/motherboard-bus@8000000/iofpga-bus@300000000/timer@120000': -22
    ===============
    
    Replace the -EINVAL return with a debug message and return 0 instead.
    
    Also we do not reach the init function anymore if the DT node is
    disabled (as this is now handled by OF_DECLARE), so remove the explicit
    check for that case.
    
    This fixes a long standing bogus error when booting ARM's fastmodels.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/20220506162522.3675399-1-andre.przywara@arm.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 852261e4bd2eba5caaafef2aa5f614de2633a551
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Apr 22 12:41:01 2022 +0200

    clocksource/drivers/oxnas-rps: Fix irq_of_parse_and_map() return value
    
    [ Upstream commit 9c04a8ff03def4df3f81219ffbe1ec9b44ff5348 ]
    
    The irq_of_parse_and_map() returns 0 on failure, not a negative ERRNO.
    
    Fixes: 89355274e1f7 ("clocksource/drivers/oxnas-rps: Add Oxford Semiconductor RPS Dual Timer")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220422104101.55754-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3448aa3b941999f5fed7570ad6bad79972cbd18c
Author: Samuel Holland <samuel@sholland.org>
Date:   Sun May 8 20:21:21 2022 -0500

    clocksource/drivers/riscv: Events are stopped during CPU suspend
    
    [ Upstream commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d ]
    
    Some implementations of the SBI time extension depend on hart-local
    state (for example, CSRs) that are lost or hardware that is powered
    down when a CPU is suspended. To be safe, the clockevents driver
    cannot assume that timer IRQs will be received during CPU suspend.
    
    Fixes: 62b019436814 ("clocksource: new RISC-V SBI timer driver")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Link: https://lore.kernel.org/r/20220509012121.40031-1-samuel@sholland.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ba2db7cc27d4f69c1feebd0691f933e7a125542
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri May 6 17:25:22 2022 +0100

    clocksource/drivers/sp804: Avoid error on multiple instances
    
    [ Upstream commit a98399cbc1e05f7b977419f03905501d566cf54e ]
    
    When a machine sports more than one SP804 timer instance, we only bring
    up the first one, since multiple timers of the same kind are not useful
    to Linux. As this is intentional behaviour, we should not return an
    error message, as we do today:
    ===============
    [    0.000800] Failed to initialize '/bus@8000000/motherboard-bus@8000000/iofpga-bus@300000000/timer@120000': -22
    ===============
    
    Replace the -EINVAL return with a debug message and return 0 instead.
    
    Also we do not reach the init function anymore if the DT node is
    disabled (as this is now handled by OF_DECLARE), so remove the explicit
    check for that case.
    
    This fixes a long standing bogus error when booting ARM's fastmodels.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/20220506162522.3675399-1-andre.przywara@arm.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c73d6e3cc33c6b48e0c9f12440cdaaabfe12fcdf
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Apr 22 12:41:01 2022 +0200

    clocksource/drivers/oxnas-rps: Fix irq_of_parse_and_map() return value
    
    [ Upstream commit 9c04a8ff03def4df3f81219ffbe1ec9b44ff5348 ]
    
    The irq_of_parse_and_map() returns 0 on failure, not a negative ERRNO.
    
    Fixes: 89355274e1f7 ("clocksource/drivers/oxnas-rps: Add Oxford Semiconductor RPS Dual Timer")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220422104101.55754-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fa78ad392bb84429d4f17080ab84b26dd637962
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri May 6 17:25:22 2022 +0100

    clocksource/drivers/sp804: Avoid error on multiple instances
    
    [ Upstream commit a98399cbc1e05f7b977419f03905501d566cf54e ]
    
    When a machine sports more than one SP804 timer instance, we only bring
    up the first one, since multiple timers of the same kind are not useful
    to Linux. As this is intentional behaviour, we should not return an
    error message, as we do today:
    ===============
    [    0.000800] Failed to initialize '/bus@8000000/motherboard-bus@8000000/iofpga-bus@300000000/timer@120000': -22
    ===============
    
    Replace the -EINVAL return with a debug message and return 0 instead.
    
    Also we do not reach the init function anymore if the DT node is
    disabled (as this is now handled by OF_DECLARE), so remove the explicit
    check for that case.
    
    This fixes a long standing bogus error when booting ARM's fastmodels.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/20220506162522.3675399-1-andre.przywara@arm.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb8be6c54f0059ea9c7617ac2ea9858d702f371f
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Apr 22 12:41:01 2022 +0200

    clocksource/drivers/oxnas-rps: Fix irq_of_parse_and_map() return value
    
    [ Upstream commit 9c04a8ff03def4df3f81219ffbe1ec9b44ff5348 ]
    
    The irq_of_parse_and_map() returns 0 on failure, not a negative ERRNO.
    
    Fixes: 89355274e1f7 ("clocksource/drivers/oxnas-rps: Add Oxford Semiconductor RPS Dual Timer")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220422104101.55754-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 245b993d8f6c4e25f19191edfbd8080b645e12b1
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Mon Jun 6 14:02:38 2022 +0900

    clocksource: hyper-v: unexport __init-annotated hv_init_clocksource()
    
    EXPORT_SYMBOL and __init is a bad combination because the .init.text
    section is freed up after the initialization. Hence, modules cannot
    use symbols annotated __init. The access to a freed symbol may end up
    with kernel panic.
    
    modpost used to detect it, but it has been broken for a decade.
    
    Recently, I fixed modpost so it started to warn it again, then this
    showed up in linux-next builds.
    
    There are two ways to fix it:
    
      - Remove __init
      - Remove EXPORT_SYMBOL
    
    I chose the latter for this case because the only in-tree call-site,
    arch/x86/kernel/cpu/mshyperv.c is never compiled as modular.
    (CONFIG_HYPERVISOR_GUEST is boolean)
    
    Fixes: dd2cb348613b ("clocksource/drivers: Continue making Hyper-V clocksource ISA agnostic")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20220606050238.4162200-1-masahiroy@kernel.org
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit eae260be3a0111a28fe95923e117a55dddec0384
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Jun 1 16:43:22 2022 +0200

    KVM: selftests: Make hyperv_clock selftest more stable
    
    hyperv_clock doesn't always give a stable test result, especially with
    AMD CPUs. The test compares Hyper-V MSR clocksource (acquired either
    with rdmsr() from within the guest or KVM_GET_MSRS from the host)
    against rdtsc(). To increase the accuracy, increase the measured delay
    (done with nop loop) by two orders of magnitude and take the mean rdtsc()
    value before and after rdmsr()/KVM_GET_MSRS.
    
    Reported-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Tested-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20220601144322.1968742-1-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit c049ecc523171481accd2c83f79ffeecbf53a915
Merge: bc1e02c3e500 57963a92a70b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jun 5 10:47:06 2022 -0700

    Merge tag 'timers-core-2022-06-05' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull clockevent/clocksource updates from Thomas Gleixner:
    
     - Device tree bindings for MT8186
    
     - Tell the kernel that the RISC-V SBI timer stops in deeper power
       states
    
     - Make device tree parsing in sp804 more robust
    
     - Dead code removal and tiny fixes here and there
    
     - Add the missing SPDX identifiers
    
    * tag 'timers-core-2022-06-05' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/oxnas-rps: Fix irq_of_parse_and_map() return value
      clocksource/drivers/timer-ti-dm: Remove unnecessary NULL check
      clocksource/drivers/timer-sun5i: Convert to SPDX identifier
      clocksource/drivers/timer-sun4i: Convert to SPDX identifier
      clocksource/drivers/pistachio: Convert to SPDX identifier
      clocksource/drivers/orion: Convert to SPDX identifier
      clocksource/drivers/lpc32xx: Convert to SPDX identifier
      clocksource/drivers/digicolor: Convert to SPDX identifier
      clocksource/drivers/armada-370-xp: Convert to SPDX identifier
      clocksource/drivers/mips-gic-timer: Convert to SPDX identifier
      clocksource/drivers/jcore: Convert to SPDX identifier
      clocksource/drivers/bcm_kona: Convert to SPDX identifier
      clocksource/drivers/sp804: Avoid error on multiple instances
      clocksource/drivers/riscv: Events are stopped during CPU suspend
      clocksource/drivers/ixp4xx: Drop boardfile probe path
      dt-bindings: timer: Add compatible for Mediatek MT8186

commit d0e60d46bc03252b8d4ffaaaa0b371970ac16cda
Merge: 23df9ba64bb9 0dfe54071d7c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jun 4 14:04:27 2022 -0700

    Merge tag 'bitmap-for-5.19-rc1' of https://github.com/norov/linux
    
    Pull bitmap updates from Yury Norov:
    
     - bitmap: optimize bitmap_weight() usage, from me
    
     - lib/bitmap.c make bitmap_print_bitmask_to_buf parseable, from Mauro
       Carvalho Chehab
    
     - include/linux/find: Fix documentation, from Anna-Maria Behnsen
    
     - bitmap: fix conversion from/to fix-sized arrays, from me
    
     - bitmap: Fix return values to be unsigned, from Kees Cook
    
    It has been in linux-next for at least a week with no problems.
    
    * tag 'bitmap-for-5.19-rc1' of https://github.com/norov/linux: (31 commits)
      nodemask: Fix return values to be unsigned
      bitmap: Fix return values to be unsigned
      KVM: x86: hyper-v: replace bitmap_weight() with hweight64()
      KVM: x86: hyper-v: fix type of valid_bank_mask
      ia64: cleanup remove_siblinginfo()
      drm/amd/pm: use bitmap_{from,to}_arr32 where appropriate
      KVM: s390: replace bitmap_copy with bitmap_{from,to}_arr64 where appropriate
      lib/bitmap: add test for bitmap_{from,to}_arr64
      lib: add bitmap_{from,to}_arr64
      lib/bitmap: extend comment for bitmap_(from,to)_arr32()
      include/linux/find: Fix documentation
      lib/bitmap.c make bitmap_print_bitmask_to_buf parseable
      MAINTAINERS: add cpumask and nodemask files to BITMAP_API
      arch/x86: replace nodes_weight with nodes_empty where appropriate
      mm/vmstat: replace cpumask_weight with cpumask_empty where appropriate
      clocksource: replace cpumask_weight with cpumask_empty in clocksource.c
      genirq/affinity: replace cpumask_weight with cpumask_empty where appropriate
      irq: mips: replace cpumask_weight with cpumask_empty where appropriate
      drm/i915/pmu: replace cpumask_weight with cpumask_empty where appropriate
      arch/x86: replace cpumask_weight with cpumask_empty where appropriate
      ...

commit 95e3a97387d6c396172f944b45bd515c7d1e8bc2
Author: Yury Norov <yury.norov@gmail.com>
Date:   Sun Jan 23 10:38:55 2022 -0800

    clocksource: replace cpumask_weight with cpumask_empty in clocksource.c
    
    clocksource_verify_percpu() calls cpumask_weight() to check if any bit of
    a given cpumask is set. We can do it more efficiently with cpumask_empty()
    because cpumask_empty() stops traversing the cpumask as soon as it finds
    first set bit, while cpumask_weight() counts all bits unconditionally.
    
    Signed-off-by: Yury Norov <yury.norov@gmail.com>

commit 3e11194631275937bc40da49b98aa1a74dd1ee67
Merge: 16477cdfefdb 2fa1533f79d3
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri May 27 15:52:46 2022 +0200

    Merge branch 'hpe/gxp-soc' into arm/late
    
    Patch series from Nick Hawkins:
    
    "The GXP is the HPE BMC SoC that is used in the majority of HPE current
     generation servers. Traditionally the asic will last multiple
     generations of server before being replaced.
    
     Info about SoC:
    
      HPE GXP is the name of the HPE Soc. This SoC is used to implement many
      BMC features at HPE. It supports ARMv7 architecture based on the Cortex
      A9 core. It is capable of using an AXI bus to which a memory controller
      is attached. It has multiple SPI interfaces to connect boot flash and
      BIOS flash. It uses a 10/100/1000 MAC for network connectivity. It has
      multiple i2c engines to drive connectivity with a host infrastructure.
      The initial patches enable the watchdog and timer enabling the host to
      be able to boot."
    
    * hpe/gxp-soc:
      MAINTAINERS: Introduce HPE GXP Architecture
      ARM: dts: Introduce HPE GXP Device tree
      dt-bindings: arm: hpe: add GXP Support
      dt-bindings: timer: hpe,gxp-timer: Add HPE GXP Timer and Watchdog
      clocksource/drivers/timer-gxp: Add HPE GXP Timer
      watchdog: hpe-wdt: Introduce HPE GXP Watchdog
      ARM: configs: multi_v7_defconfig: Add HPE GXP ARCH
      ARM: hpe: Introduce the HPE GXP architecture
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 57963a92a70b037aa22544fbc34742e5be689c04
Merge: 317f29c14d0c 9c04a8ff03de
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri May 27 10:32:08 2022 +0200

    Merge tag 'timers-v5.19-rc1' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clockevent/clocksource driver updates from Daniel Lezcano:
    
      - Add Mediatek MT8186 DT bindings (Allen-KH Cheng)
    
      - Remove dead code corresponding of the IXP4xx board removal (Linus
        Walleij)
    
      - Add CLOCK_EVT_FEAT_C3STOP flag for the RISC-V SBI timer (Samuel
        Holland)
    
      - Do not return an error if there are multiple definitions of the sp804
        timers in the DT (Andre Przywara)
    
      - Add the missing SPDX identifier (Thomas Gleixner)
    
      - Remove an unncessary NULL check as it is done right before at probe
        time for the timer-ti-dm (Dan Carpenter)
    
      - Fix the irq_of_parse_and_map() return code check on onexas-nps
        (Krzysztof Kozlowski)
    
    Link: https://lore.kernel.org/lkml/b5a83e54-1ee1-f910-4be4-bc3bf1015243@linaro.org

commit 9c04a8ff03def4df3f81219ffbe1ec9b44ff5348
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Fri Apr 22 12:41:01 2022 +0200

    clocksource/drivers/oxnas-rps: Fix irq_of_parse_and_map() return value
    
    The irq_of_parse_and_map() returns 0 on failure, not a negative ERRNO.
    
    Fixes: 89355274e1f7 ("clocksource/drivers/oxnas-rps: Add Oxford Semiconductor RPS Dual Timer")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20220422104101.55754-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8c0d9461ab760439b09ae321803ee85df1136e08
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu May 19 16:58:23 2022 +0300

    clocksource/drivers/timer-ti-dm: Remove unnecessary NULL check
    
    The "pdata" pointer cannot be NULL because it's checked at the start of
    the function.  Delete the check.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/YoZM65RFDQAfqV6J@kili
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fdd8f6585cef1c8c0fac745c1baa687301d55a90
Merge: 17a05c8f1e18 30b5e6ef4a32
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 23 20:56:17 2022 -0700

    Merge tag 'm68k-for-v5.19-tag1' of git://git.kernel.org/pub/scm/linux/kernel/git/geert/linux-m68k
    
    Pull m68k updates from Geert Uytterhoeven:
    
      - Introduce virtual m68k machine based on Android Goldfish devices
    
      - defconfig updates
    
      - Minor fixes and improvements
    
    * tag 'm68k-for-v5.19-tag1' of git://git.kernel.org/pub/scm/linux/kernel/git/geert/linux-m68k:
      m68k: atari: Make Atari ROM port I/O write macros return void
      m68k: math-emu: Fix dependencies of math emulation support
      m68k: math-emu: Fix typos in comments
      m68k: Wire up syscall_trace_enter/leave for m68k
      m68k: defconfig: Update defconfigs for v5.18-rc1
      m68k: Introduce a virtual m68k machine
      clocksource/drivers: Add a goldfish-timer clocksource
      rtc: goldfish: Use gf_ioread32()/gf_iowrite32()
      tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()

commit 6e01f86fb2025111c77101254f1442ac137089cd
Merge: fcfde8a7cf6d 317f29c14d0c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 23 17:05:55 2022 -0700

    Merge tag 'timers-core-2022-05-23' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer and timekeeping updates from Thomas Gleixner:
    
     - Expose CLOCK_TAI to instrumentation to aid with TSN debugging.
    
     - Ensure that the clockevent is stopped when there is no timer armed to
       avoid pointless wakeups.
    
     - Make the sched clock frequency handling and rounding consistent.
    
     - Provide a better debugobject hint for delayed works. The timer
       callback is always the same, which makes it difficult to identify the
       underlying work. Use the work function as a hint instead.
    
     - Move the timer specific sysctl code into the timer subsystem.
    
     - The usual set of improvements and cleanups
    
    * tag 'timers-core-2022-05-23' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      timers: Provide a better debugobjects hint for delayed works
      time/sched_clock: Fix formatting of frequency reporting code
      time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz
      time/sched_clock: Round the frequency reported to nearest rather than down
      timekeeping: Consolidate fast timekeeper
      timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()
      timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped
      timekeeping: Introduce fast accessor to clock tai
      tracing/timer: Add missing argument documentation of trace points
      clocksource: Replace cpumask_weight() with cpumask_empty()
      timers: Move timer sysctl into the timer code
      clockevents: Use dedicated list iterator variable
      timers: Simplify calc_index()
      timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()

commit 5184f4bf151bb4f4ab2f0f10a66b96acdf35da1a
Author: Nick Hawkins <nick.hawkins@hpe.com>
Date:   Mon May 16 11:33:42 2022 -0500

    clocksource/drivers/timer-gxp: Add HPE GXP Timer
    
    Add support for the HPE GXP SOC timer. The GXP supports several different
    kinds of timers but for the purpose of this driver there is only support
    for the General Timer. The timer has a 1us resolution and is 32 bits. The
    timer also creates a child watchdog device as the register region is the
    same.
    
    Signed-off-by: Nick Hawkins <nick.hawkins@hpe.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit a74dfa434f98a4fedf3ae2cd8dbeae1e08c1765f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 10 19:24:51 2022 +0200

    clocksource/drivers/timer-sun5i: Convert to SPDX identifier
    
    The license information clearly states GPL version 2 only. The extra text
    which excludes warranties is an excerpt of the corresponding GPLv2 clause
    11.
    
    So the SPDX identifier covers it completely.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Chen-Yu Tsai <wens@csie.org>
    Cc: Samuel Holland <samuel@sholland.org>
    Cc: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: linux-sunxi@lists.linux.dev
    Link: https://lore.kernel.org/r/20220510171254.970933294@linutronix.de
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 60bff9f8ef4bdd1eb24769deb66084dcfd3888d2
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 10 19:24:49 2022 +0200

    clocksource/drivers/timer-sun4i: Convert to SPDX identifier
    
    The license information clearly states GPL version 2 only. The extra text
    which excludes warranties is an excerpt of the corresponding GPLv2 clause
    11.
    
    So the SPDX identifier covers it completely.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Chen-Yu Tsai <wens@csie.org>
    Cc: Jernej Skrabec <jernej.skrabec@gmail.com>
    Cc: Samuel Holland <samuel@sholland.org>
    Cc: linux-sunxi@lists.linux.dev
    Link: https://lore.kernel.org/r/20220510171254.908144392@linutronix.de
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6bd8643736cb4e9b5ed744f955318037c7fefee8
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 10 19:24:48 2022 +0200

    clocksource/drivers/pistachio: Convert to SPDX identifier
    
    The licensing text references explicitely the COPYING file in the kernel
    base directory, which is clearly GPL version 2 only.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20220510171254.843410802@linutronix.de
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 029aede7774c7997f14364ac4aa8c5503e5624e9
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 10 19:24:46 2022 +0200

    clocksource/drivers/orion: Convert to SPDX identifier
    
    The license information clearly states GPL version 2 only. The extra text
    which excludes warranties is an excerpt of the corresponding GPLv2 clause
    11.
    
    So the SPDX identifier covers it completely.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20220510171254.780389240@linutronix.de
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 85c5aafd8e6a2476d27715b57dbcf26805eb3ab7
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 10 19:24:45 2022 +0200

    clocksource/drivers/lpc32xx: Convert to SPDX identifier
    
    The license information clearly states GPL version 2 only. The extra text
    which excludes warranties is an excerpt of the corresponding GPLv2 clause
    11.
    
    So the SPDX identifier covers it completely.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Joachim Eastwood <manabian@gmail.com>
    Cc: Vladimir Zapolskiy <vz@mleia.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Acked-by: Vladimir Zapolskiy <vz@mleia.com>
    Link: https://lore.kernel.org/r/20220510171254.717233312@linutronix.de
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b3a9ce9d24ffc3e8018dc35a5f4e8f3406cf497f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 10 19:24:43 2022 +0200

    clocksource/drivers/digicolor: Convert to SPDX identifier
    
    The license information clearly states GPL version 2 only. The extra text
    which excludes warranties is an excerpt of the corresponding GPLv2 clause
    11.
    
    So the SPDX identifier covers it completely.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Baruch Siach <baruch@tkos.co.il>
    Cc: linux-arm-kernel@lists.infradead.org
    Acked-by: Baruch Siach <baruch@tkos.co.il>
    Link: https://lore.kernel.org/r/20220510171254.655035023@linutronix.de
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7160d9c4cce94612d5f42a5db392cd606a38737a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 10 19:24:41 2022 +0200

    clocksource/drivers/armada-370-xp: Convert to SPDX identifier
    
    The license information clearly states GPL version 2 only. The extra text
    which excludes warranties is an excerpt of the corresponding GPLv2 clause
    11.
    
    So the SPDX identifier covers it completely.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Gregory Clement <gregory.clement@free-electrons.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Link: https://lore.kernel.org/r/20220510171254.592781786@linutronix.de
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit dcfa47d4720f91e278a81d0f64d2e74e3c59018b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 10 19:24:40 2022 +0200

    clocksource/drivers/mips-gic-timer: Convert to SPDX identifier
    
    The licensing text references explicitely the COPYING file in the kernel
    base directory, which is clearly GPL version 2 only.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Serge Semin <fancer.lancer@gmail.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-mips@vger.kernel.org
    Acked-by: Serge Semin <fancer.lancer@gmail.com>
    Link: https://lore.kernel.org/r/20220510171254.529249404@linutronix.de
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit eb988ba4afbf821e8877810221e6bc00af161014
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 10 19:24:38 2022 +0200

    clocksource/drivers/jcore: Convert to SPDX identifier
    
    The licensing text references explicitely the COPYING file in the kernel
    base directory, which is clearly GPL version 2 only.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Rich Felker <dalias@libc.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20220510171254.467236056@linutronix.de
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b89e96917dba49d9fda30f2e0c5a8effdf02cca5
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 10 19:24:37 2022 +0200

    clocksource/drivers/bcm_kona: Convert to SPDX identifier
    
    The license information clearly states GPL version 2 only. The extra text
    which excludes warranties is a transcript of the corresponding GPLv2 clause
    11, which is explicitely referenced for details.
    
    So the SPDX identifier covers it completely.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: Ray Jui <rjui@broadcom.com>
    Cc: Scott Branden <sbranden@broadcom.com>
    Cc: Broadcom Kernel Team <bcm-kernel-feedback-list@broadcom.com>
    Cc: linux-spdx@vger.kernel.org
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20220510171254.404209482@linutronix.de
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a98399cbc1e05f7b977419f03905501d566cf54e
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri May 6 17:25:22 2022 +0100

    clocksource/drivers/sp804: Avoid error on multiple instances
    
    When a machine sports more than one SP804 timer instance, we only bring
    up the first one, since multiple timers of the same kind are not useful
    to Linux. As this is intentional behaviour, we should not return an
    error message, as we do today:
    ===============
    [    0.000800] Failed to initialize '/bus@8000000/motherboard-bus@8000000/iofpga-bus@300000000/timer@120000': -22
    ===============
    
    Replace the -EINVAL return with a debug message and return 0 instead.
    
    Also we do not reach the init function anymore if the DT node is
    disabled (as this is now handled by OF_DECLARE), so remove the explicit
    check for that case.
    
    This fixes a long standing bogus error when booting ARM's fastmodels.
    
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Link: https://lore.kernel.org/r/20220506162522.3675399-1-andre.przywara@arm.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 232ccac1bd9b5bfe73895f527c08623e7fa0752d
Author: Samuel Holland <samuel@sholland.org>
Date:   Sun May 8 20:21:21 2022 -0500

    clocksource/drivers/riscv: Events are stopped during CPU suspend
    
    Some implementations of the SBI time extension depend on hart-local
    state (for example, CSRs) that are lost or hardware that is powered
    down when a CPU is suspended. To be safe, the clockevents driver
    cannot assume that timer IRQs will be received during CPU suspend.
    
    Fixes: 62b019436814 ("clocksource: new RISC-V SBI timer driver")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Link: https://lore.kernel.org/r/20220509012121.40031-1-samuel@sholland.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 41929c9f628b9990d33a200c54bb0c919e089aa8
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Apr 6 22:55:05 2022 +0200

    clocksource/drivers/ixp4xx: Drop boardfile probe path
    
    The boardfiles for IXP4xx have been deleted. Delete all the
    quirks and code dealing with that boot path and rely solely on
    device tree boot.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20220406205505.2332821-1-linus.walleij@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d4a3b442335b0a9476248c5d6dc07f6f8580a9ca
Merge: 3f656f2618fb add9f6f30e54
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri May 13 11:33:40 2022 +0200

    Merge tag 'v5.19-rockchip-drivers1' of git://git.kernel.org/pub/scm/linux/kernel/git/mmind/linux-rockchip into arm/drivers
    
    Powerdomain fixes and improvements, some GRF compatible properties
    and a rk3566 GRF clocksource default setup.
    
    * tag 'v5.19-rockchip-drivers1' of git://git.kernel.org/pub/scm/linux/kernel/git/mmind/linux-rockchip:
      soc: rockchip: Fix compile-testing SoC drivers
      soc: rockchip: power-domain: Replace dsb() with smb()
      soc: rockchip: Clean up Kconfig whitespace
      soc: rockchip: set dwc3 clock for rk3566
      dt-bindings: soc: rockchip: add rk3566-pipe-grf compatible
      soc: rockchip: pm_domains: Fix typo in comment
      dt-bindings: soc: rockchip: add naneng combo phy register compatible
    
    Link: https://lore.kernel.org/r/3998951.tdWV9SEqCh@phil
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit d04b03456e62cfc4c325a473c097893e060bf6b8
Author: Helge Deller <deller@gmx.de>
Date:   Sat May 7 15:31:16 2022 +0200

    Revert "parisc: Mark cr16 CPU clocksource unstable on all SMP machines"
    
    commit 9dc4241bb14afecd16518a0760bceb3d7359b12a upstream.
    
    This reverts commit afdb4a5b1d340e4afffc65daa21cc71890d7d589.
    
    It triggers RCU stalls at boot with a 32-bit kernel.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Noticed-by: John David Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org # v5.16+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8624e2c5af95049aa0501cd461d3d2552502117a
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Tue Mar 23 14:20:33 2021 -0700

    ACPICA: Always create namespace nodes using acpi_ns_create_node()
    
    commit 25928deeb1e4e2cdae1dccff349320c6841eb5f8 upstream.
    
    ACPICA commit 29da9a2a3f5b2c60420893e5c6309a0586d7a329
    
    ACPI is allocating an object using kmalloc(), but then frees it
    using kmem_cache_free(<"Acpi-Namespace" kmem_cache>).
    
    This is wrong and can lead to boot failures manifesting like this:
    
        hpet0: 3 comparators, 64-bit 100.000000 MHz counter
        clocksource: Switched to clocksource tsc-early
        BUG: unable to handle page fault for address: 000000003ffe0018
        #PF: supervisor read access in kernel mode
        #PF: error_code(0x0000) - not-present page
        PGD 0 P4D 0
        Oops: 0000 [#1] SMP PTI
        CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.6.0+ #211
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    Ubuntu-1.8.2-1ubuntu1 04/01/2014
        RIP: 0010:kmem_cache_alloc+0x70/0x1d0
        Code: 00 00 4c 8b 45 00 65 49 8b 50 08 65 4c 03 05 6f cc e7 7e 4d 8b
    20 4d 85 e4 0f 84 3d 01 00 00 8b 45 20 48 8b 7d 00 48 8d 4a 01 <49> 8b
       1c 04 4c 89 e0 65 48 0f c7 0f 0f 94 c0 84 c0 74 c5 8b 45 20
        RSP: 0000:ffffc90000013df8 EFLAGS: 00010206
        RAX: 0000000000000018 RBX: ffffffff81c49200 RCX: 0000000000000002
        RDX: 0000000000000001 RSI: 0000000000000dc0 RDI: 000000000002b300
        RBP: ffff88803e403d00 R08: ffff88803ec2b300 R09: 0000000000000001
        R10: 0000000000000dc0 R11: 0000000000000006 R12: 000000003ffe0000
        R13: ffffffff8110a583 R14: 0000000000000dc0 R15: ffffffff81c49a80
        FS:  0000000000000000(0000) GS:ffff88803ec00000(0000)
    knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 000000003ffe0018 CR3: 0000000001c0a001 CR4: 00000000003606f0
        DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
        DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
        Call Trace:
         __trace_define_field+0x33/0xa0
         event_trace_init+0xeb/0x2b4
         tracer_init_tracefs+0x60/0x195
         ? register_tracer+0x1e7/0x1e7
         do_one_initcall+0x74/0x160
         kernel_init_freeable+0x190/0x1f0
         ? rest_init+0x9a/0x9a
         kernel_init+0x5/0xf6
         ret_from_fork+0x35/0x40
        CR2: 000000003ffe0018
        ---[ end trace 707efa023f2ee960 ]---
        RIP: 0010:kmem_cache_alloc+0x70/0x1d0
    
    Bisection leads to unrelated changes in slab; Vlastimil Babka
    suggests an unrelated layout or slab merge change merely exposed
    the underlying bug.
    
    Link: https://lore.kernel.org/lkml/4dc93ff8-f86e-f4c9-ebeb-6d3153a78d03@oracle.com/
    Link: https://lore.kernel.org/r/a1461e21-c744-767d-6dfc-6641fd3e3ce2@siemens.com
    Link: https://github.com/acpica/acpica/commit/29da9a2a
    Fixes: f79c8e4136ea ("ACPICA: Namespace: simplify creation of the initial/default namespace")
    Reported-by: Jan Kiszka <jan.kiszka@siemens.com>
    Diagnosed-by: Vlastimil Babka <vbabka@suse.cz>
    Diagnosed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Erik Kaneda <erik.kaneda@intel.com>
    Cc: 5.10+ <stable@vger.kernel.org> # 5.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: "Jason A. Donenfeld" <Jason@zx2c4.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f002488d80b557c7dc540457b176011449895fcb
Merge: e3de3a1cda5f ba0c04104082
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun May 8 12:42:05 2022 -0700

    Merge tag 'for-5.18/parisc-3' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux
    
    Pull parisc architecture fixes from Helge Deller:
     "Some reverts of existing patches, which were necessary because of boot
      issues due to wrong CPU clock handling and cache issues which led to
      userspace segfaults with 32bit kernels. Dave has a whole bunch of
      upcoming cache fixes which I then plan to push in the next merge
      window.
    
      Other than that just small updates and fixes, e.g. defconfig updates,
      spelling fixes, a clocksource fix, boot topology fixes and a fix for
      /proc/cpuinfo output to satisfy lscpu"
    
    * tag 'for-5.18/parisc-3' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux:
      Revert "parisc: Increase parisc_cache_flush_threshold setting"
      parisc: Mark cr16 clock unstable on all SMP machines
      parisc: Fix typos in comments
      parisc: Change MAX_ADDRESS to become unsigned long long
      parisc: Merge model and model name into one line in /proc/cpuinfo
      parisc: Re-enable GENERIC_CPU_DEVICES for !SMP
      parisc: Update 32- and 64-bit defconfigs
      parisc: Only list existing CPUs in cpu_possible_mask
      Revert "parisc: Fix patch code locking and flushing"
      Revert "parisc: Mark sched_clock unstable only if clocks are not syncronized"
      Revert "parisc: Mark cr16 CPU clocksource unstable on all SMP machines"

commit 9dc4241bb14afecd16518a0760bceb3d7359b12a
Author: Helge Deller <deller@gmx.de>
Date:   Sat May 7 15:31:16 2022 +0200

    Revert "parisc: Mark cr16 CPU clocksource unstable on all SMP machines"
    
    This reverts commit afdb4a5b1d340e4afffc65daa21cc71890d7d589.
    
    It triggers RCU stalls at boot with a 32-bit kernel.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Noticed-by: John David Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org # v5.16+

commit 2b65c1162adeca3684cb68b05bce98bf7d99c315
Author: Lukas Bulwahn <lukas.bulwahn@gmail.com>
Date:   Sun Apr 10 16:56:23 2022 +0200

    arm: nomadik: drop selecting obsolete CLKSRC_NOMADIK_MTU_SCHED_CLOCK
    
    Commit 85b6fcadcf66 ("clocksource/drivers/ux500: Drop Ux500 custom
    SCHED_CLOCK") removes a sched_clock workaround and its corresponding
    config CLKSRC_NOMADIK_MTU_SCHED_CLOCK. Since then, selecting
    CLKSRC_NOMADIK_MTU_SCHED_CLOCK in ./arch/arm/mach-nomadik/Kconfig has no
    effect and ./scripts/checkkconfigsymbols.py warns:
    
    CLKSRC_NOMADIK_MTU_SCHED_CLOCK
    Referencing files: arch/arm/mach-nomadik/Kconfig
    
    Simply drop selecting the obsolete CLKSRC_NOMADIK_MTU_SCHED_CLOCK.
    
    Signed-off-by: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20220410145623.2620380-1-linus.walleij@linaro.org'
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit e514f1fd09b6f966f5f55220fdc4fb8a2efc0d6a
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Apr 28 11:11:35 2022 +0200

    ARM: omap: fix missing declaration warnings
    
    Moving the plat-omap files triggered a sparse warning for omap1 and
    omap2 that is now in a different file from before. Found some more sparse
    warnings here that I address by making sure the declaration is visible
    to both the caller and the callee, or they are static
    
    mach-omap1/fb.c:33:17: warning: symbol 'omap_fb_resources' was not declared. Should it be static?
    mach-omap1/timer32k.c:215:12: warning: symbol 'omap_init_clocksource_32k' was not declared. Should it be static?
    mach-omap1/i2c.c:36:12: warning: symbol 'omap_i2c_add_bus' was not declared. Should it be static?
    mach-omap1/i2c.c:115:12: warning: symbol 'omap_register_i2c_bus_cmdline' was not declared. Should it be static?
    mach-omap1/i2c.c:140:12: warning: symbol 'omap_register_i2c_bus' was not declared. Should it be static?
    mach-omap2/dma.c:180:34: warning: symbol 'dma_plat_info' was not declared. Should it be static?
    mach-omap2/omap4-common.c:116:6: warning: symbol 'omap_interconnect_sync' was not declared. Should it be static?
    mach-omap2/omap-iommu.c:113:5: warning: symbol 'omap_iommu_set_pwrdm_constraint' was not declared. Should it be static?
    
    Reported-by: kernel test robot <lkp@intel.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit f643490e1bf941600f6105e4d27c49054fb6d562
Author: Sean Anderson <sean.anderson@seco.com>
Date:   Thu Mar 3 17:35:42 2022 -0500

    dt-bindings: pwm: Add Xilinx AXI Timer
    
    This adds a binding for the Xilinx LogiCORE IP AXI Timer. This device is a
    "soft" block, so it has some parameters which would not be configurable in
    most hardware. This binding is usually automatically generated by Xilinx's
    tools, so the names and values of some properties should be kept as they
    are, if possible. In addition, this binding is already in the kernel at
    arch/microblaze/boot/dts/system.dts, and in user software such as QEMU.
    
    The existing driver uses the clock-frequency property, or alternatively the
    /cpus/timebase-frequency property as its frequency input. Because these
    properties are deprecated, they have not been included with this schema.
    All new bindings should use the clocks/clock-names properties to specify
    the parent clock.
    
    Because we need to init timer devices so early in boot, we determine if we
    should use the PWM driver or the clocksource/clockevent driver by the
    presence/absence, respectively, of #pwm-cells. Because both counters are
    used by the PWM, there is no need for a separate property specifying which
    counters are to be used for the PWM.
    
    Signed-off-by: Sean Anderson <sean.anderson@seco.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>

commit 929527bcf9c9f2a8cf44b502a3bb225802d17280
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Aug 6 16:18:29 2019 +0200

    clocksource: ti-dmtimer: avoid using mach/hardware.h
    
    As a preparation for future omap1 multiplatform support, stop
    using mach/hardware.h and instead include the omap1-io.h
    for low-level register access to MOD_CONF_CTRL_1.
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 54aa7c1ea23c0c785a2da7070691397b4e996d8c
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Mar 17 08:39:39 2022 -0700

    clocksource: acpi_pm: fix return value of __setup handler
    
    [ Upstream commit 6a861abceecb68497dd82a324fee45a5332dcece ]
    
    __setup() handlers should return 1 to obsolete_checksetup() in
    init/main.c to indicate that the boot option has been handled.
    A return of 0 causes the boot option/value to be listed as an Unknown
    kernel parameter and added to init's (limited) environment strings.
    
    The __setup() handler interface isn't meant to handle negative return
    values -- they are non-zero, so they mean "handled" (like a return
    value of 1 does), but that's just a quirk. So return 1 from
    parse_pmtmr(). Also print a warning message if kstrtouint() returns
    an error.
    
    Fixes: 6b148507d3d0 ("pmtmr: allow command line override of ioport")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: Igor Zhbanov <i.zhbanov@omprussia.ru>
    Link: lore.kernel.org/r/64644a2f-4a20-bab3-1e15-3b2cdd0defe3@omprussia.ru
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f98f70515afa19f7748edecadfe5ea6e6fdf8cc
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Mar 17 08:39:39 2022 -0700

    clocksource: acpi_pm: fix return value of __setup handler
    
    [ Upstream commit 6a861abceecb68497dd82a324fee45a5332dcece ]
    
    __setup() handlers should return 1 to obsolete_checksetup() in
    init/main.c to indicate that the boot option has been handled.
    A return of 0 causes the boot option/value to be listed as an Unknown
    kernel parameter and added to init's (limited) environment strings.
    
    The __setup() handler interface isn't meant to handle negative return
    values -- they are non-zero, so they mean "handled" (like a return
    value of 1 does), but that's just a quirk. So return 1 from
    parse_pmtmr(). Also print a warning message if kstrtouint() returns
    an error.
    
    Fixes: 6b148507d3d0 ("pmtmr: allow command line override of ioport")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: Igor Zhbanov <i.zhbanov@omprussia.ru>
    Link: lore.kernel.org/r/64644a2f-4a20-bab3-1e15-3b2cdd0defe3@omprussia.ru
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a7462b5211cd5b74b8815034d038e28cbd96d52
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Wed Mar 2 08:40:32 2022 -0800

    xen: delay xen_hvm_init_time_ops() if kdump is boot on vcpu>=32
    
    [ Upstream commit eed05744322da07dd7e419432dcedf3c2e017179 ]
    
    The sched_clock() can be used very early since commit 857baa87b642
    ("sched/clock: Enable sched clock early"). In addition, with commit
    38669ba205d1 ("x86/xen/time: Output xen sched_clock time from 0"), kdump
    kernel in Xen HVM guest may panic at very early stage when accessing
    &__this_cpu_read(xen_vcpu)->time as in below:
    
    setup_arch()
     -> init_hypervisor_platform()
         -> x86_init.hyper.init_platform = xen_hvm_guest_init()
             -> xen_hvm_init_time_ops()
                 -> xen_clocksource_read()
                     -> src = &__this_cpu_read(xen_vcpu)->time;
    
    This is because Xen HVM supports at most MAX_VIRT_CPUS=32 'vcpu_info'
    embedded inside 'shared_info' during early stage until xen_vcpu_setup() is
    used to allocate/relocate 'vcpu_info' for boot cpu at arbitrary address.
    
    However, when Xen HVM guest panic on vcpu >= 32, since
    xen_vcpu_info_reset(0) would set per_cpu(xen_vcpu, cpu) = NULL when
    vcpu >= 32, xen_clocksource_read() on vcpu >= 32 would panic.
    
    This patch calls xen_hvm_init_time_ops() again later in
    xen_hvm_smp_prepare_boot_cpu() after the 'vcpu_info' for boot vcpu is
    registered when the boot vcpu is >= 32.
    
    This issue can be reproduced on purpose via below command at the guest
    side when kdump/kexec is enabled:
    
    "taskset -c 33 echo c > /proc/sysrq-trigger"
    
    The bugfix for PVM is not implemented due to the lack of testing
    environment.
    
    [boris: xen_hvm_init_time_ops() returns on errors instead of jumping to end]
    
    Cc: Joe Jin <joe.jin@oracle.com>
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20220302164032.14569-3-dongli.zhang@oracle.com
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 715a34317255d66d9bcd03cf4ae898a0c3c76f66
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Mar 17 08:39:39 2022 -0700

    clocksource: acpi_pm: fix return value of __setup handler
    
    [ Upstream commit 6a861abceecb68497dd82a324fee45a5332dcece ]
    
    __setup() handlers should return 1 to obsolete_checksetup() in
    init/main.c to indicate that the boot option has been handled.
    A return of 0 causes the boot option/value to be listed as an Unknown
    kernel parameter and added to init's (limited) environment strings.
    
    The __setup() handler interface isn't meant to handle negative return
    values -- they are non-zero, so they mean "handled" (like a return
    value of 1 does), but that's just a quirk. So return 1 from
    parse_pmtmr(). Also print a warning message if kstrtouint() returns
    an error.
    
    Fixes: 6b148507d3d0 ("pmtmr: allow command line override of ioport")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: Igor Zhbanov <i.zhbanov@omprussia.ru>
    Link: lore.kernel.org/r/64644a2f-4a20-bab3-1e15-3b2cdd0defe3@omprussia.ru
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8dc887ae33d2d9b70e5e73f0963c7e46bb010795
Author: Guillaume Ranquet <granquet@baylibre.com>
Date:   Mon Mar 7 18:26:56 2022 +0100

    clocksource/drivers/timer-of: Check return value of of_iomap in timer_of_base_init()
    
    [ Upstream commit 4467b8bad2401794fb89a0268c8c8257180bf60f ]
    
    of_base->base can either be iomapped using of_io_request_and_map() or
    of_iomap() depending whether or not an of_base->name has been set.
    
    Thus check of_base->base against NULL as of_iomap() does not return a
    PTR_ERR() in case of error.
    
    Fixes: 9aea417afa6b ("clocksource/drivers/timer-of: Don't request the resource by name")
    Signed-off-by: Guillaume Ranquet <granquet@baylibre.com>
    Link: https://lore.kernel.org/r/20220307172656.4836-1-granquet@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0848767dee78c00c5646eef9b3201ee14ce68563
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Wed Mar 2 08:40:32 2022 -0800

    xen: delay xen_hvm_init_time_ops() if kdump is boot on vcpu>=32
    
    [ Upstream commit eed05744322da07dd7e419432dcedf3c2e017179 ]
    
    The sched_clock() can be used very early since commit 857baa87b642
    ("sched/clock: Enable sched clock early"). In addition, with commit
    38669ba205d1 ("x86/xen/time: Output xen sched_clock time from 0"), kdump
    kernel in Xen HVM guest may panic at very early stage when accessing
    &__this_cpu_read(xen_vcpu)->time as in below:
    
    setup_arch()
     -> init_hypervisor_platform()
         -> x86_init.hyper.init_platform = xen_hvm_guest_init()
             -> xen_hvm_init_time_ops()
                 -> xen_clocksource_read()
                     -> src = &__this_cpu_read(xen_vcpu)->time;
    
    This is because Xen HVM supports at most MAX_VIRT_CPUS=32 'vcpu_info'
    embedded inside 'shared_info' during early stage until xen_vcpu_setup() is
    used to allocate/relocate 'vcpu_info' for boot cpu at arbitrary address.
    
    However, when Xen HVM guest panic on vcpu >= 32, since
    xen_vcpu_info_reset(0) would set per_cpu(xen_vcpu, cpu) = NULL when
    vcpu >= 32, xen_clocksource_read() on vcpu >= 32 would panic.
    
    This patch calls xen_hvm_init_time_ops() again later in
    xen_hvm_smp_prepare_boot_cpu() after the 'vcpu_info' for boot vcpu is
    registered when the boot vcpu is >= 32.
    
    This issue can be reproduced on purpose via below command at the guest
    side when kdump/kexec is enabled:
    
    "taskset -c 33 echo c > /proc/sysrq-trigger"
    
    The bugfix for PVM is not implemented due to the lack of testing
    environment.
    
    [boris: xen_hvm_init_time_ops() returns on errors instead of jumping to end]
    
    Cc: Joe Jin <joe.jin@oracle.com>
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20220302164032.14569-3-dongli.zhang@oracle.com
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53ff025e146a04965a788dd6e3b3013c0e90f286
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Mar 17 08:39:39 2022 -0700

    clocksource: acpi_pm: fix return value of __setup handler
    
    [ Upstream commit 6a861abceecb68497dd82a324fee45a5332dcece ]
    
    __setup() handlers should return 1 to obsolete_checksetup() in
    init/main.c to indicate that the boot option has been handled.
    A return of 0 causes the boot option/value to be listed as an Unknown
    kernel parameter and added to init's (limited) environment strings.
    
    The __setup() handler interface isn't meant to handle negative return
    values -- they are non-zero, so they mean "handled" (like a return
    value of 1 does), but that's just a quirk. So return 1 from
    parse_pmtmr(). Also print a warning message if kstrtouint() returns
    an error.
    
    Fixes: 6b148507d3d0 ("pmtmr: allow command line override of ioport")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: Igor Zhbanov <i.zhbanov@omprussia.ru>
    Link: lore.kernel.org/r/64644a2f-4a20-bab3-1e15-3b2cdd0defe3@omprussia.ru
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9d22a8fc6cfd5f29ea19cbf1d60aa9cee6df6f3
Author: Guillaume Ranquet <granquet@baylibre.com>
Date:   Mon Mar 7 18:26:56 2022 +0100

    clocksource/drivers/timer-of: Check return value of of_iomap in timer_of_base_init()
    
    [ Upstream commit 4467b8bad2401794fb89a0268c8c8257180bf60f ]
    
    of_base->base can either be iomapped using of_io_request_and_map() or
    of_iomap() depending whether or not an of_base->name has been set.
    
    Thus check of_base->base against NULL as of_iomap() does not return a
    PTR_ERR() in case of error.
    
    Fixes: 9aea417afa6b ("clocksource/drivers/timer-of: Don't request the resource by name")
    Signed-off-by: Guillaume Ranquet <granquet@baylibre.com>
    Link: https://lore.kernel.org/r/20220307172656.4836-1-granquet@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2a0e04f6478e8c1038db64717f3fafd55de1420
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Wed Mar 2 08:40:32 2022 -0800

    xen: delay xen_hvm_init_time_ops() if kdump is boot on vcpu>=32
    
    [ Upstream commit eed05744322da07dd7e419432dcedf3c2e017179 ]
    
    The sched_clock() can be used very early since commit 857baa87b642
    ("sched/clock: Enable sched clock early"). In addition, with commit
    38669ba205d1 ("x86/xen/time: Output xen sched_clock time from 0"), kdump
    kernel in Xen HVM guest may panic at very early stage when accessing
    &__this_cpu_read(xen_vcpu)->time as in below:
    
    setup_arch()
     -> init_hypervisor_platform()
         -> x86_init.hyper.init_platform = xen_hvm_guest_init()
             -> xen_hvm_init_time_ops()
                 -> xen_clocksource_read()
                     -> src = &__this_cpu_read(xen_vcpu)->time;
    
    This is because Xen HVM supports at most MAX_VIRT_CPUS=32 'vcpu_info'
    embedded inside 'shared_info' during early stage until xen_vcpu_setup() is
    used to allocate/relocate 'vcpu_info' for boot cpu at arbitrary address.
    
    However, when Xen HVM guest panic on vcpu >= 32, since
    xen_vcpu_info_reset(0) would set per_cpu(xen_vcpu, cpu) = NULL when
    vcpu >= 32, xen_clocksource_read() on vcpu >= 32 would panic.
    
    This patch calls xen_hvm_init_time_ops() again later in
    xen_hvm_smp_prepare_boot_cpu() after the 'vcpu_info' for boot vcpu is
    registered when the boot vcpu is >= 32.
    
    This issue can be reproduced on purpose via below command at the guest
    side when kdump/kexec is enabled:
    
    "taskset -c 33 echo c > /proc/sysrq-trigger"
    
    The bugfix for PVM is not implemented due to the lack of testing
    environment.
    
    [boris: xen_hvm_init_time_ops() returns on errors instead of jumping to end]
    
    Cc: Joe Jin <joe.jin@oracle.com>
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20220302164032.14569-3-dongli.zhang@oracle.com
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c0750cad73350e1c504eb91a94093a79f6f6296
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Wed Mar 2 08:40:32 2022 -0800

    xen: delay xen_hvm_init_time_ops() if kdump is boot on vcpu>=32
    
    [ Upstream commit eed05744322da07dd7e419432dcedf3c2e017179 ]
    
    The sched_clock() can be used very early since commit 857baa87b642
    ("sched/clock: Enable sched clock early"). In addition, with commit
    38669ba205d1 ("x86/xen/time: Output xen sched_clock time from 0"), kdump
    kernel in Xen HVM guest may panic at very early stage when accessing
    &__this_cpu_read(xen_vcpu)->time as in below:
    
    setup_arch()
     -> init_hypervisor_platform()
         -> x86_init.hyper.init_platform = xen_hvm_guest_init()
             -> xen_hvm_init_time_ops()
                 -> xen_clocksource_read()
                     -> src = &__this_cpu_read(xen_vcpu)->time;
    
    This is because Xen HVM supports at most MAX_VIRT_CPUS=32 'vcpu_info'
    embedded inside 'shared_info' during early stage until xen_vcpu_setup() is
    used to allocate/relocate 'vcpu_info' for boot cpu at arbitrary address.
    
    However, when Xen HVM guest panic on vcpu >= 32, since
    xen_vcpu_info_reset(0) would set per_cpu(xen_vcpu, cpu) = NULL when
    vcpu >= 32, xen_clocksource_read() on vcpu >= 32 would panic.
    
    This patch calls xen_hvm_init_time_ops() again later in
    xen_hvm_smp_prepare_boot_cpu() after the 'vcpu_info' for boot vcpu is
    registered when the boot vcpu is >= 32.
    
    This issue can be reproduced on purpose via below command at the guest
    side when kdump/kexec is enabled:
    
    "taskset -c 33 echo c > /proc/sysrq-trigger"
    
    The bugfix for PVM is not implemented due to the lack of testing
    environment.
    
    [boris: xen_hvm_init_time_ops() returns on errors instead of jumping to end]
    
    Cc: Joe Jin <joe.jin@oracle.com>
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20220302164032.14569-3-dongli.zhang@oracle.com
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be63f365f454e39d09c41bbd21ea72b5244160b5
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Wed Mar 2 08:40:32 2022 -0800

    xen: delay xen_hvm_init_time_ops() if kdump is boot on vcpu>=32
    
    [ Upstream commit eed05744322da07dd7e419432dcedf3c2e017179 ]
    
    The sched_clock() can be used very early since commit 857baa87b642
    ("sched/clock: Enable sched clock early"). In addition, with commit
    38669ba205d1 ("x86/xen/time: Output xen sched_clock time from 0"), kdump
    kernel in Xen HVM guest may panic at very early stage when accessing
    &__this_cpu_read(xen_vcpu)->time as in below:
    
    setup_arch()
     -> init_hypervisor_platform()
         -> x86_init.hyper.init_platform = xen_hvm_guest_init()
             -> xen_hvm_init_time_ops()
                 -> xen_clocksource_read()
                     -> src = &__this_cpu_read(xen_vcpu)->time;
    
    This is because Xen HVM supports at most MAX_VIRT_CPUS=32 'vcpu_info'
    embedded inside 'shared_info' during early stage until xen_vcpu_setup() is
    used to allocate/relocate 'vcpu_info' for boot cpu at arbitrary address.
    
    However, when Xen HVM guest panic on vcpu >= 32, since
    xen_vcpu_info_reset(0) would set per_cpu(xen_vcpu, cpu) = NULL when
    vcpu >= 32, xen_clocksource_read() on vcpu >= 32 would panic.
    
    This patch calls xen_hvm_init_time_ops() again later in
    xen_hvm_smp_prepare_boot_cpu() after the 'vcpu_info' for boot vcpu is
    registered when the boot vcpu is >= 32.
    
    This issue can be reproduced on purpose via below command at the guest
    side when kdump/kexec is enabled:
    
    "taskset -c 33 echo c > /proc/sysrq-trigger"
    
    The bugfix for PVM is not implemented due to the lack of testing
    environment.
    
    [boris: xen_hvm_init_time_ops() returns on errors instead of jumping to end]
    
    Cc: Joe Jin <joe.jin@oracle.com>
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20220302164032.14569-3-dongli.zhang@oracle.com
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6f6b353d6c765b83c9e5e518a44ca1ae40fe227
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Wed Mar 2 08:40:32 2022 -0800

    xen: delay xen_hvm_init_time_ops() if kdump is boot on vcpu>=32
    
    [ Upstream commit eed05744322da07dd7e419432dcedf3c2e017179 ]
    
    The sched_clock() can be used very early since commit 857baa87b642
    ("sched/clock: Enable sched clock early"). In addition, with commit
    38669ba205d1 ("x86/xen/time: Output xen sched_clock time from 0"), kdump
    kernel in Xen HVM guest may panic at very early stage when accessing
    &__this_cpu_read(xen_vcpu)->time as in below:
    
    setup_arch()
     -> init_hypervisor_platform()
         -> x86_init.hyper.init_platform = xen_hvm_guest_init()
             -> xen_hvm_init_time_ops()
                 -> xen_clocksource_read()
                     -> src = &__this_cpu_read(xen_vcpu)->time;
    
    This is because Xen HVM supports at most MAX_VIRT_CPUS=32 'vcpu_info'
    embedded inside 'shared_info' during early stage until xen_vcpu_setup() is
    used to allocate/relocate 'vcpu_info' for boot cpu at arbitrary address.
    
    However, when Xen HVM guest panic on vcpu >= 32, since
    xen_vcpu_info_reset(0) would set per_cpu(xen_vcpu, cpu) = NULL when
    vcpu >= 32, xen_clocksource_read() on vcpu >= 32 would panic.
    
    This patch calls xen_hvm_init_time_ops() again later in
    xen_hvm_smp_prepare_boot_cpu() after the 'vcpu_info' for boot vcpu is
    registered when the boot vcpu is >= 32.
    
    This issue can be reproduced on purpose via below command at the guest
    side when kdump/kexec is enabled:
    
    "taskset -c 33 echo c > /proc/sysrq-trigger"
    
    The bugfix for PVM is not implemented due to the lack of testing
    environment.
    
    [boris: xen_hvm_init_time_ops() returns on errors instead of jumping to end]
    
    Cc: Joe Jin <joe.jin@oracle.com>
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20220302164032.14569-3-dongli.zhang@oracle.com
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89a512adceab99c99ea9d8ef3372181ec9fdef38
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 6 17:45:20 2022 +0100

    arm64: arch_timer: avoid unused function warning
    
    commit 040f340134751d73bd03ee92fabb992946c55b3d upstream.
    
    arm64_1188873_read_cntvct_el0() is protected by the correct
    CONFIG_ARM64_ERRATUM_1188873 #ifdef, but the only reference to it is
    also inside of an CONFIG_ARM_ARCH_TIMER_OOL_WORKAROUND section,
    and causes a warning if that is disabled:
    
    drivers/clocksource/arm_arch_timer.c:323:20: error: 'arm64_1188873_read_cntvct_el0' defined but not used [-Werror=unused-function]
    
    Since the erratum requires that we always apply the workaround
    in the timer driver, select that symbol as we do for SoC
    specific errata.
    
    Fixes: 95b861a4a6d9 ("arm64: arch_timer: Add workaround for ARM erratum 1188873")
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a48b35f0cd3174ef1654005c6e991a2c625f0d9
Author: Ding Tianhong <dingtianhong@huawei.com>
Date:   Wed Apr 6 17:45:16 2022 +0100

    clocksource/drivers/arm_arch_timer: Introduce generic errata handling infrastructure
    
    commit 16d10ef29f25aba923779234bb93a451b14d20e6 upstream.
    
    Currently we have code inline in the arch timer probe path to cater for
    Freescale erratum A-008585, complete with ifdeffery. This is a little
    ugly, and will get worse as we try to add more errata handling.
    
    This patch refactors the handling of Freescale erratum A-008585. Now the
    erratum is described in a generic arch_timer_erratum_workaround
    structure, and the probe path can iterate over these to detect errata
    and enable workarounds.
    
    This will simplify the addition and maintenance of code handling
    Hisilicon erratum 161010101.
    
    Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
    [Mark: split patch, correct Kconfig, reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fda5a883b23742dce4bc7774f98b4c06a0a50818
Author: Ding Tianhong <dingtianhong@huawei.com>
Date:   Wed Apr 6 17:45:15 2022 +0100

    clocksource/drivers/arm_arch_timer: Remove fsl-a008585 parameter
    
    commit 5444ea6a7f46276876e94ecf8d44615af1ef22f7 upstream.
    
    Having a command line option to flip the errata handling for a
    particular erratum is a little bit unusual, and it's vastly superior to
    pass this in the DT. By common consensus, it's best to kill off the
    command line parameter.
    
    Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
    [Mark: split patch, reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c92e7ef16400bf035e8b49c7dd091bfce4f99773
Author: Laurent Vivier <laurent@vivier.eu>
Date:   Wed Apr 6 22:15:22 2022 +0200

    clocksource/drivers: Add a goldfish-timer clocksource
    
    Add a clocksource based on the goldfish-rtc device.
    
    Move the timer register definition to <clocksource/timer-goldfish.h>
    
    This kernel implementation is based on the QEMU upstream implementation:
    
       https://git.qemu.org/?p=qemu.git;a=blob_plain;f=hw/rtc/goldfish_rtc.c
    
    goldfish-timer is a high-precision signed 64-bit nanosecond timer.
    It is part of the 'goldfish' virtual hardware platform used to run
    some emulated Android systems under QEMU.
    This timer only supports oneshot event.
    
    Signed-off-by: Laurent Vivier <laurent@vivier.eu>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20220406201523.243733-4-laurent@vivier.eu
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit 8afbcaf8690dac19ebf570a4e4fef9c59c75bf8e
Author: Yury Norov <yury.norov@gmail.com>
Date:   Thu Feb 10 14:49:07 2022 -0800

    clocksource: Replace cpumask_weight() with cpumask_empty()
    
    clocksource_verify_percpu() calls cpumask_weight() to check if any bit of a
    given cpumask is set.
    
    This can be done more efficiently with cpumask_empty() because
    cpumask_empty() stops traversing the cpumask as soon as it finds first set
    bit, while cpumask_weight() counts all bits unconditionally.
    
    Signed-off-by: Yury Norov <yury.norov@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20220210224933.379149-24-yury.norov@gmail.com

commit 44a77e52bd791ffea565c49d7a5322bb9ea21ae8
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Mar 17 08:39:39 2022 -0700

    clocksource: acpi_pm: fix return value of __setup handler
    
    [ Upstream commit 6a861abceecb68497dd82a324fee45a5332dcece ]
    
    __setup() handlers should return 1 to obsolete_checksetup() in
    init/main.c to indicate that the boot option has been handled.
    A return of 0 causes the boot option/value to be listed as an Unknown
    kernel parameter and added to init's (limited) environment strings.
    
    The __setup() handler interface isn't meant to handle negative return
    values -- they are non-zero, so they mean "handled" (like a return
    value of 1 does), but that's just a quirk. So return 1 from
    parse_pmtmr(). Also print a warning message if kstrtouint() returns
    an error.
    
    Fixes: 6b148507d3d0 ("pmtmr: allow command line override of ioport")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: Igor Zhbanov <i.zhbanov@omprussia.ru>
    Link: lore.kernel.org/r/64644a2f-4a20-bab3-1e15-3b2cdd0defe3@omprussia.ru
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b45bf16593238fee3c01cb8c9841e68154e9318
Author: Guillaume Ranquet <granquet@baylibre.com>
Date:   Mon Mar 7 18:26:56 2022 +0100

    clocksource/drivers/timer-of: Check return value of of_iomap in timer_of_base_init()
    
    [ Upstream commit 4467b8bad2401794fb89a0268c8c8257180bf60f ]
    
    of_base->base can either be iomapped using of_io_request_and_map() or
    of_iomap() depending whether or not an of_base->name has been set.
    
    Thus check of_base->base against NULL as of_iomap() does not return a
    PTR_ERR() in case of error.
    
    Fixes: 9aea417afa6b ("clocksource/drivers/timer-of: Don't request the resource by name")
    Signed-off-by: Guillaume Ranquet <granquet@baylibre.com>
    Link: https://lore.kernel.org/r/20220307172656.4836-1-granquet@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b33c753cff6ca5e3302cf97d70c6b92fe17ebad1
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Fri Mar 4 15:35:57 2022 +0200

    clocksource/drivers/timer-microchip-pit64b: Use notrace
    
    [ Upstream commit ff10ee97cb203262e88d9c8bc87369cbd4004a0c ]
    
    Use notrace for mchp_pit64b_sched_read_clk() to avoid recursive call of
    prepare_ftrace_return() when issuing:
    echo function_graph > /sys/kernel/debug/tracing/current_tracer
    
    Fixes: 625022a5f160 ("clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220304133601.2404086-3-claudiu.beznea@microchip.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db9d00461bdf9a0567a899f2980cf47f4217476d
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Sun Feb 20 11:38:15 2022 +0100

    clocksource/drivers/exynos_mct: Handle DTS with higher number of interrupts
    
    [ Upstream commit ab8da93dc06d82f464c47ab30e6c75190702f369 ]
    
    The driver statically defines maximum number of interrupts it can
    handle, however it does not respect that limit when configuring them.
    When provided with a DTS with more interrupts than assumed, the driver
    will overwrite static array mct_irqs leading to silent memory
    corruption.
    
    Validate the interrupts coming from DTS to avoid this.  This does not
    change the fact that such DTS might not boot at all, because it is
    simply incompatible, however at least some warning will be printed.
    
    Fixes: 36ba5d527e95 ("ARM: EXYNOS: add device tree support for MCT controller driver")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Link: https://lore.kernel.org/r/20220220103815.135380-1-krzysztof.kozlowski@canonical.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4e13c4a6f4186645260db86473a59871983ee5e
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Nov 1 21:35:30 2021 +0200

    clocksource/drivers/exynos_mct: Refactor resources allocation
    
    [ Upstream commit 7cd925a8823d16de5614d3f0aabea9948747accd ]
    
    Move interrupts allocation from exynos4_timer_resources() into separate
    function together with the interrupt number parsing code from
    mct_init_dt(), so the code for managing interrupts is kept together.
    While touching exynos4_timer_resources() function, move of_iomap() to it.
    No functional changes.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Tested-by: Chanwoo Choi <cw00.choi@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sam Protsenko <semen.protsenko@linaro.org>
    Link: https://lore.kernel.org/r/20211101193531.15078-2-semen.protsenko@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42d331a279d012680bc92a81ed7bc154094f4842
Author: Drew Fustini <dfustini@baylibre.com>
Date:   Thu Feb 3 21:35:05 2022 -0800

    clocksource/drivers/timer-ti-dm: Fix regression from errata i940 fix
    
    [ Upstream commit bceaae3bac0ce27c549bb050336d8d08abc2ee54 ]
    
    The existing fix for errata i940 causes a conflict for IPU2 which is
    using timer 3 and 4. From arch/arm/boot/dts/dra7-ipu-dsp-common.dtsi:
    
      &ipu2 {
              mboxes = <&mailbox6 &mbox_ipu2_ipc3x>;
              ti,timers = <&timer3>;
              ti,watchdog-timers = <&timer4>, <&timer9>;
      };
    
    The conflict was noticed when booting mainline on the BeagleBoard X15
    which has a TI AM5728 SoC:
    
      remoteproc remoteproc1: 55020000.ipu is available
      remoteproc remoteproc1: powering up 55020000.ipu
      remoteproc remoteproc1: Booting fw image dra7-ipu2-fw.xem4
      omap-rproc 55020000.ipu: could not get timer platform device
      omap-rproc 55020000.ipu: omap_rproc_enable_timers failed: -19
      remoteproc remoteproc1: can't start rproc 55020000.ipu: -19
    
    This change modifies the errata fix to instead use timer 15 and 16 which
    resolves the timer conflict.
    
    It does not appear to introduce any latency regression. Results from
    cyclictest with original errata fix using dmtimer 3 and 4:
    
      # cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0
      policy: fifo: loadavg: 0.02 0.03 0.05
    
      T: 0 ( 1449) P:80 I:200 C: 800368 Min:   0 Act:   32 Avg:   22 Max:  128
      T: 1 ( 1450) P:80 I:200 C: 800301 Min:   0 Act:   12 Avg:   23 Max:   70
    
    The results after the change to dmtimer 15 and 16:
    
      # cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0
      policy: fifo: loadavg: 0.36 0.19 0.07
    
      T: 0 ( 1711) P:80 I:200 C: 759599 Min:   0 Act:    6 Avg:   22 Max:  108
      T: 1 ( 1712) P:80 I:200 C: 759539 Min:   0 Act:   19 Avg:   23 Max:   79
    
    Fixes: 25de4ce5ed02 ("clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940")
    Link: https://lore.kernel.org/linux-omap/YfWsG0p6to3IJuvE@x1/
    Suggested-by: Suman Anna <s-anna@ti.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Drew Fustini <dfustini@baylibre.com>
    Link: https://lore.kernel.org/r/20220204053503.1409162-1-dfustini@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 657edec8987a1d2ce5adf52f9c73ed9e196f0b01
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Mar 17 08:39:39 2022 -0700

    clocksource: acpi_pm: fix return value of __setup handler
    
    [ Upstream commit 6a861abceecb68497dd82a324fee45a5332dcece ]
    
    __setup() handlers should return 1 to obsolete_checksetup() in
    init/main.c to indicate that the boot option has been handled.
    A return of 0 causes the boot option/value to be listed as an Unknown
    kernel parameter and added to init's (limited) environment strings.
    
    The __setup() handler interface isn't meant to handle negative return
    values -- they are non-zero, so they mean "handled" (like a return
    value of 1 does), but that's just a quirk. So return 1 from
    parse_pmtmr(). Also print a warning message if kstrtouint() returns
    an error.
    
    Fixes: 6b148507d3d0 ("pmtmr: allow command line override of ioport")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: Igor Zhbanov <i.zhbanov@omprussia.ru>
    Link: lore.kernel.org/r/64644a2f-4a20-bab3-1e15-3b2cdd0defe3@omprussia.ru
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df04ef63347faac344e69e3c16ff20fead158dcc
Author: Guillaume Ranquet <granquet@baylibre.com>
Date:   Mon Mar 7 18:26:56 2022 +0100

    clocksource/drivers/timer-of: Check return value of of_iomap in timer_of_base_init()
    
    [ Upstream commit 4467b8bad2401794fb89a0268c8c8257180bf60f ]
    
    of_base->base can either be iomapped using of_io_request_and_map() or
    of_iomap() depending whether or not an of_base->name has been set.
    
    Thus check of_base->base against NULL as of_iomap() does not return a
    PTR_ERR() in case of error.
    
    Fixes: 9aea417afa6b ("clocksource/drivers/timer-of: Don't request the resource by name")
    Signed-off-by: Guillaume Ranquet <granquet@baylibre.com>
    Link: https://lore.kernel.org/r/20220307172656.4836-1-granquet@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abc6b2a12a3e53cbfe306d2d9515bbd44b890a66
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Fri Mar 4 15:35:57 2022 +0200

    clocksource/drivers/timer-microchip-pit64b: Use notrace
    
    [ Upstream commit ff10ee97cb203262e88d9c8bc87369cbd4004a0c ]
    
    Use notrace for mchp_pit64b_sched_read_clk() to avoid recursive call of
    prepare_ftrace_return() when issuing:
    echo function_graph > /sys/kernel/debug/tracing/current_tracer
    
    Fixes: 625022a5f160 ("clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220304133601.2404086-3-claudiu.beznea@microchip.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a81de4315ecf5a401212154dad0168a0cb9ed857
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Sun Feb 20 11:38:15 2022 +0100

    clocksource/drivers/exynos_mct: Handle DTS with higher number of interrupts
    
    [ Upstream commit ab8da93dc06d82f464c47ab30e6c75190702f369 ]
    
    The driver statically defines maximum number of interrupts it can
    handle, however it does not respect that limit when configuring them.
    When provided with a DTS with more interrupts than assumed, the driver
    will overwrite static array mct_irqs leading to silent memory
    corruption.
    
    Validate the interrupts coming from DTS to avoid this.  This does not
    change the fact that such DTS might not boot at all, because it is
    simply incompatible, however at least some warning will be printed.
    
    Fixes: 36ba5d527e95 ("ARM: EXYNOS: add device tree support for MCT controller driver")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Link: https://lore.kernel.org/r/20220220103815.135380-1-krzysztof.kozlowski@canonical.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e34ba9ff04eeecd4b2f406973288ea50fbbb129b
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Nov 1 21:35:30 2021 +0200

    clocksource/drivers/exynos_mct: Refactor resources allocation
    
    [ Upstream commit 7cd925a8823d16de5614d3f0aabea9948747accd ]
    
    Move interrupts allocation from exynos4_timer_resources() into separate
    function together with the interrupt number parsing code from
    mct_init_dt(), so the code for managing interrupts is kept together.
    While touching exynos4_timer_resources() function, move of_iomap() to it.
    No functional changes.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Tested-by: Chanwoo Choi <cw00.choi@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sam Protsenko <semen.protsenko@linaro.org>
    Link: https://lore.kernel.org/r/20211101193531.15078-2-semen.protsenko@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97e3aaace46e55cf219ffba39fda276d60df6084
Author: Drew Fustini <dfustini@baylibre.com>
Date:   Thu Feb 3 21:35:05 2022 -0800

    clocksource/drivers/timer-ti-dm: Fix regression from errata i940 fix
    
    [ Upstream commit bceaae3bac0ce27c549bb050336d8d08abc2ee54 ]
    
    The existing fix for errata i940 causes a conflict for IPU2 which is
    using timer 3 and 4. From arch/arm/boot/dts/dra7-ipu-dsp-common.dtsi:
    
      &ipu2 {
              mboxes = <&mailbox6 &mbox_ipu2_ipc3x>;
              ti,timers = <&timer3>;
              ti,watchdog-timers = <&timer4>, <&timer9>;
      };
    
    The conflict was noticed when booting mainline on the BeagleBoard X15
    which has a TI AM5728 SoC:
    
      remoteproc remoteproc1: 55020000.ipu is available
      remoteproc remoteproc1: powering up 55020000.ipu
      remoteproc remoteproc1: Booting fw image dra7-ipu2-fw.xem4
      omap-rproc 55020000.ipu: could not get timer platform device
      omap-rproc 55020000.ipu: omap_rproc_enable_timers failed: -19
      remoteproc remoteproc1: can't start rproc 55020000.ipu: -19
    
    This change modifies the errata fix to instead use timer 15 and 16 which
    resolves the timer conflict.
    
    It does not appear to introduce any latency regression. Results from
    cyclictest with original errata fix using dmtimer 3 and 4:
    
      # cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0
      policy: fifo: loadavg: 0.02 0.03 0.05
    
      T: 0 ( 1449) P:80 I:200 C: 800368 Min:   0 Act:   32 Avg:   22 Max:  128
      T: 1 ( 1450) P:80 I:200 C: 800301 Min:   0 Act:   12 Avg:   23 Max:   70
    
    The results after the change to dmtimer 15 and 16:
    
      # cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0
      policy: fifo: loadavg: 0.36 0.19 0.07
    
      T: 0 ( 1711) P:80 I:200 C: 759599 Min:   0 Act:    6 Avg:   22 Max:  108
      T: 1 ( 1712) P:80 I:200 C: 759539 Min:   0 Act:   19 Avg:   23 Max:   79
    
    Fixes: 25de4ce5ed02 ("clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940")
    Link: https://lore.kernel.org/linux-omap/YfWsG0p6to3IJuvE@x1/
    Suggested-by: Suman Anna <s-anna@ti.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Drew Fustini <dfustini@baylibre.com>
    Link: https://lore.kernel.org/r/20220204053503.1409162-1-dfustini@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5aedc51cd53c2a6a2646b881faa69d262e4ace3d
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Mar 17 08:39:39 2022 -0700

    clocksource: acpi_pm: fix return value of __setup handler
    
    [ Upstream commit 6a861abceecb68497dd82a324fee45a5332dcece ]
    
    __setup() handlers should return 1 to obsolete_checksetup() in
    init/main.c to indicate that the boot option has been handled.
    A return of 0 causes the boot option/value to be listed as an Unknown
    kernel parameter and added to init's (limited) environment strings.
    
    The __setup() handler interface isn't meant to handle negative return
    values -- they are non-zero, so they mean "handled" (like a return
    value of 1 does), but that's just a quirk. So return 1 from
    parse_pmtmr(). Also print a warning message if kstrtouint() returns
    an error.
    
    Fixes: 6b148507d3d0 ("pmtmr: allow command line override of ioport")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: Igor Zhbanov <i.zhbanov@omprussia.ru>
    Link: lore.kernel.org/r/64644a2f-4a20-bab3-1e15-3b2cdd0defe3@omprussia.ru
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94ef872d7a07643cb856c1efe1675a2f138d77c6
Author: Guillaume Ranquet <granquet@baylibre.com>
Date:   Mon Mar 7 18:26:56 2022 +0100

    clocksource/drivers/timer-of: Check return value of of_iomap in timer_of_base_init()
    
    [ Upstream commit 4467b8bad2401794fb89a0268c8c8257180bf60f ]
    
    of_base->base can either be iomapped using of_io_request_and_map() or
    of_iomap() depending whether or not an of_base->name has been set.
    
    Thus check of_base->base against NULL as of_iomap() does not return a
    PTR_ERR() in case of error.
    
    Fixes: 9aea417afa6b ("clocksource/drivers/timer-of: Don't request the resource by name")
    Signed-off-by: Guillaume Ranquet <granquet@baylibre.com>
    Link: https://lore.kernel.org/r/20220307172656.4836-1-granquet@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 406592e2edfaafd305d282eb37c4142964c1e8f6
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Fri Mar 4 15:35:57 2022 +0200

    clocksource/drivers/timer-microchip-pit64b: Use notrace
    
    [ Upstream commit ff10ee97cb203262e88d9c8bc87369cbd4004a0c ]
    
    Use notrace for mchp_pit64b_sched_read_clk() to avoid recursive call of
    prepare_ftrace_return() when issuing:
    echo function_graph > /sys/kernel/debug/tracing/current_tracer
    
    Fixes: 625022a5f160 ("clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220304133601.2404086-3-claudiu.beznea@microchip.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff37c4784dedb5b815bb2f8a0de23e4a5f51371f
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Sun Feb 20 11:38:15 2022 +0100

    clocksource/drivers/exynos_mct: Handle DTS with higher number of interrupts
    
    [ Upstream commit ab8da93dc06d82f464c47ab30e6c75190702f369 ]
    
    The driver statically defines maximum number of interrupts it can
    handle, however it does not respect that limit when configuring them.
    When provided with a DTS with more interrupts than assumed, the driver
    will overwrite static array mct_irqs leading to silent memory
    corruption.
    
    Validate the interrupts coming from DTS to avoid this.  This does not
    change the fact that such DTS might not boot at all, because it is
    simply incompatible, however at least some warning will be printed.
    
    Fixes: 36ba5d527e95 ("ARM: EXYNOS: add device tree support for MCT controller driver")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Link: https://lore.kernel.org/r/20220220103815.135380-1-krzysztof.kozlowski@canonical.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2270b06baf5799685cf0f554def1e6679732fc6
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Nov 1 21:35:30 2021 +0200

    clocksource/drivers/exynos_mct: Refactor resources allocation
    
    [ Upstream commit 7cd925a8823d16de5614d3f0aabea9948747accd ]
    
    Move interrupts allocation from exynos4_timer_resources() into separate
    function together with the interrupt number parsing code from
    mct_init_dt(), so the code for managing interrupts is kept together.
    While touching exynos4_timer_resources() function, move of_iomap() to it.
    No functional changes.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Tested-by: Chanwoo Choi <cw00.choi@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sam Protsenko <semen.protsenko@linaro.org>
    Link: https://lore.kernel.org/r/20211101193531.15078-2-semen.protsenko@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d95da112c29f62d44f4cc52f75c558727954d0dd
Author: Drew Fustini <dfustini@baylibre.com>
Date:   Thu Feb 3 21:35:05 2022 -0800

    clocksource/drivers/timer-ti-dm: Fix regression from errata i940 fix
    
    [ Upstream commit bceaae3bac0ce27c549bb050336d8d08abc2ee54 ]
    
    The existing fix for errata i940 causes a conflict for IPU2 which is
    using timer 3 and 4. From arch/arm/boot/dts/dra7-ipu-dsp-common.dtsi:
    
      &ipu2 {
              mboxes = <&mailbox6 &mbox_ipu2_ipc3x>;
              ti,timers = <&timer3>;
              ti,watchdog-timers = <&timer4>, <&timer9>;
      };
    
    The conflict was noticed when booting mainline on the BeagleBoard X15
    which has a TI AM5728 SoC:
    
      remoteproc remoteproc1: 55020000.ipu is available
      remoteproc remoteproc1: powering up 55020000.ipu
      remoteproc remoteproc1: Booting fw image dra7-ipu2-fw.xem4
      omap-rproc 55020000.ipu: could not get timer platform device
      omap-rproc 55020000.ipu: omap_rproc_enable_timers failed: -19
      remoteproc remoteproc1: can't start rproc 55020000.ipu: -19
    
    This change modifies the errata fix to instead use timer 15 and 16 which
    resolves the timer conflict.
    
    It does not appear to introduce any latency regression. Results from
    cyclictest with original errata fix using dmtimer 3 and 4:
    
      # cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0
      policy: fifo: loadavg: 0.02 0.03 0.05
    
      T: 0 ( 1449) P:80 I:200 C: 800368 Min:   0 Act:   32 Avg:   22 Max:  128
      T: 1 ( 1450) P:80 I:200 C: 800301 Min:   0 Act:   12 Avg:   23 Max:   70
    
    The results after the change to dmtimer 15 and 16:
    
      # cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0
      policy: fifo: loadavg: 0.36 0.19 0.07
    
      T: 0 ( 1711) P:80 I:200 C: 759599 Min:   0 Act:    6 Avg:   22 Max:  108
      T: 1 ( 1712) P:80 I:200 C: 759539 Min:   0 Act:   19 Avg:   23 Max:   79
    
    Fixes: 25de4ce5ed02 ("clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940")
    Link: https://lore.kernel.org/linux-omap/YfWsG0p6to3IJuvE@x1/
    Suggested-by: Suman Anna <s-anna@ti.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Drew Fustini <dfustini@baylibre.com>
    Link: https://lore.kernel.org/r/20220204053503.1409162-1-dfustini@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35de7727e6d4a3fabf8ed483a37733fed4abb62a
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Mar 17 08:39:39 2022 -0700

    clocksource: acpi_pm: fix return value of __setup handler
    
    [ Upstream commit 6a861abceecb68497dd82a324fee45a5332dcece ]
    
    __setup() handlers should return 1 to obsolete_checksetup() in
    init/main.c to indicate that the boot option has been handled.
    A return of 0 causes the boot option/value to be listed as an Unknown
    kernel parameter and added to init's (limited) environment strings.
    
    The __setup() handler interface isn't meant to handle negative return
    values -- they are non-zero, so they mean "handled" (like a return
    value of 1 does), but that's just a quirk. So return 1 from
    parse_pmtmr(). Also print a warning message if kstrtouint() returns
    an error.
    
    Fixes: 6b148507d3d0 ("pmtmr: allow command line override of ioport")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: Igor Zhbanov <i.zhbanov@omprussia.ru>
    Link: lore.kernel.org/r/64644a2f-4a20-bab3-1e15-3b2cdd0defe3@omprussia.ru
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 032873e766ab0e2f9db7396780132cafdbd07a74
Author: Guillaume Ranquet <granquet@baylibre.com>
Date:   Mon Mar 7 18:26:56 2022 +0100

    clocksource/drivers/timer-of: Check return value of of_iomap in timer_of_base_init()
    
    [ Upstream commit 4467b8bad2401794fb89a0268c8c8257180bf60f ]
    
    of_base->base can either be iomapped using of_io_request_and_map() or
    of_iomap() depending whether or not an of_base->name has been set.
    
    Thus check of_base->base against NULL as of_iomap() does not return a
    PTR_ERR() in case of error.
    
    Fixes: 9aea417afa6b ("clocksource/drivers/timer-of: Don't request the resource by name")
    Signed-off-by: Guillaume Ranquet <granquet@baylibre.com>
    Link: https://lore.kernel.org/r/20220307172656.4836-1-granquet@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b074dbcfb42011da7eb56963925bcbe5df17e63f
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Fri Mar 4 15:35:57 2022 +0200

    clocksource/drivers/timer-microchip-pit64b: Use notrace
    
    [ Upstream commit ff10ee97cb203262e88d9c8bc87369cbd4004a0c ]
    
    Use notrace for mchp_pit64b_sched_read_clk() to avoid recursive call of
    prepare_ftrace_return() when issuing:
    echo function_graph > /sys/kernel/debug/tracing/current_tracer
    
    Fixes: 625022a5f160 ("clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220304133601.2404086-3-claudiu.beznea@microchip.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f154834fc36aa70d65801e49e2b09fb303aae296
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Sun Feb 20 11:38:15 2022 +0100

    clocksource/drivers/exynos_mct: Handle DTS with higher number of interrupts
    
    [ Upstream commit ab8da93dc06d82f464c47ab30e6c75190702f369 ]
    
    The driver statically defines maximum number of interrupts it can
    handle, however it does not respect that limit when configuring them.
    When provided with a DTS with more interrupts than assumed, the driver
    will overwrite static array mct_irqs leading to silent memory
    corruption.
    
    Validate the interrupts coming from DTS to avoid this.  This does not
    change the fact that such DTS might not boot at all, because it is
    simply incompatible, however at least some warning will be printed.
    
    Fixes: 36ba5d527e95 ("ARM: EXYNOS: add device tree support for MCT controller driver")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Link: https://lore.kernel.org/r/20220220103815.135380-1-krzysztof.kozlowski@canonical.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bde6300cd98af93e759718e7f644966c8f98247
Author: Drew Fustini <dfustini@baylibre.com>
Date:   Thu Feb 3 21:35:05 2022 -0800

    clocksource/drivers/timer-ti-dm: Fix regression from errata i940 fix
    
    [ Upstream commit bceaae3bac0ce27c549bb050336d8d08abc2ee54 ]
    
    The existing fix for errata i940 causes a conflict for IPU2 which is
    using timer 3 and 4. From arch/arm/boot/dts/dra7-ipu-dsp-common.dtsi:
    
      &ipu2 {
              mboxes = <&mailbox6 &mbox_ipu2_ipc3x>;
              ti,timers = <&timer3>;
              ti,watchdog-timers = <&timer4>, <&timer9>;
      };
    
    The conflict was noticed when booting mainline on the BeagleBoard X15
    which has a TI AM5728 SoC:
    
      remoteproc remoteproc1: 55020000.ipu is available
      remoteproc remoteproc1: powering up 55020000.ipu
      remoteproc remoteproc1: Booting fw image dra7-ipu2-fw.xem4
      omap-rproc 55020000.ipu: could not get timer platform device
      omap-rproc 55020000.ipu: omap_rproc_enable_timers failed: -19
      remoteproc remoteproc1: can't start rproc 55020000.ipu: -19
    
    This change modifies the errata fix to instead use timer 15 and 16 which
    resolves the timer conflict.
    
    It does not appear to introduce any latency regression. Results from
    cyclictest with original errata fix using dmtimer 3 and 4:
    
      # cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0
      policy: fifo: loadavg: 0.02 0.03 0.05
    
      T: 0 ( 1449) P:80 I:200 C: 800368 Min:   0 Act:   32 Avg:   22 Max:  128
      T: 1 ( 1450) P:80 I:200 C: 800301 Min:   0 Act:   12 Avg:   23 Max:   70
    
    The results after the change to dmtimer 15 and 16:
    
      # cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0
      policy: fifo: loadavg: 0.36 0.19 0.07
    
      T: 0 ( 1711) P:80 I:200 C: 759599 Min:   0 Act:    6 Avg:   22 Max:  108
      T: 1 ( 1712) P:80 I:200 C: 759539 Min:   0 Act:   19 Avg:   23 Max:   79
    
    Fixes: 25de4ce5ed02 ("clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940")
    Link: https://lore.kernel.org/linux-omap/YfWsG0p6to3IJuvE@x1/
    Suggested-by: Suman Anna <s-anna@ti.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Drew Fustini <dfustini@baylibre.com>
    Link: https://lore.kernel.org/r/20220204053503.1409162-1-dfustini@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6bfdf5a6ad347915fb8463c8fbbbde22e6867a2b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Mar 31 19:33:35 2022 +0100

    arm64: arch_timer: avoid unused function warning
    
    commit 040f340134751d73bd03ee92fabb992946c55b3d upstream.
    
    arm64_1188873_read_cntvct_el0() is protected by the correct
    CONFIG_ARM64_ERRATUM_1188873 #ifdef, but the only reference to it is
    also inside of an CONFIG_ARM_ARCH_TIMER_OOL_WORKAROUND section,
    and causes a warning if that is disabled:
    
    drivers/clocksource/arm_arch_timer.c:323:20: error: 'arm64_1188873_read_cntvct_el0' defined but not used [-Werror=unused-function]
    
    Since the erratum requires that we always apply the workaround
    in the timer driver, select that symbol as we do for SoC
    specific errata.
    
    Fixes: 95b861a4a6d9 ("arm64: arch_timer: Add workaround for ARM erratum 1188873")
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 242ba6656d604aa8dc87451fc08143cb28d5a587
Merge: 346658a5e189 1bde8bddb5db
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 21 14:17:20 2022 -0700

    Merge tag 'acpi-5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI updates from Rafael Wysocki:
     "From the new functionality perspective, the most significant items
      here are the new driver for the 'ARM Generic Diagnostic Dump and
      Reset' device, the extension of fine grain fan control in the ACPI fan
      driver, and the change making it possible to use CPPC information to
      obtain CPU capacity.
    
      There are also a few new quirks, a bunch of fixes, including the
      platform-level _OSC handling change to make it actually take the
      platform firmware response into account, some code and documentation
      cleanups, and a notable update of the ACPI device enumeration
      documentation.
    
      Specifics:
    
       - Use uintptr_t and offsetof() in the ACPICA code to avoid compiler
         warnings regarding NULL pointer arithmetic (Rafael Wysocki).
    
       - Fix possible NULL pointer dereference in acpi_ns_walk_namespace()
         when passed "acpi=off" in the command line (Rafael Wysocki).
    
       - Fix and clean up acpi_os_read/write_port() (Rafael Wysocki).
    
       - Introduce acpi_bus_for_each_dev() and use it for walking all ACPI
         device objects in the Type C code (Rafael Wysocki).
    
       - Fix the _OSC platform capabilities negotioation and prevent CPPC
         from being used if the platform firmware indicates that it not
         supported via _OSC (Rafael Wysocki).
    
       - Use ida_alloc() instead of ida_simple_get() for ACPI enumeration of
         devices (Rafael Wysocki).
    
       - Add AGDI and CEDT to the list of known ACPI table signatures (Ilkka
         Koskinen, Robert Kiraly).
    
       - Add power management debug messages related to suspend-to-idle in
         two places (Rafael Wysocki).
    
       - Fix __acpi_node_get_property_reference() return value and clean up
         that function (Andy Shevchenko, Sakari Ailus).
    
       - Fix return value of the __setup handler in the ACPI PM timer clock
         source driver (Randy Dunlap).
    
       - Clean up double words in two comments (Tom Rix).
    
       - Add "skip i2c clients" quirks for Lenovo Yoga Tablet 1050F/L and
         Nextbook Ares 8 (Hans de Goede).
    
       - Clean up frequency invariance handling on x86 in the ACPI CPPC
         library (Huang Rui).
    
       - Work around broken XSDT on the Advantech DAC-BJ01 board (Mark
         Cilissen).
    
       - Make wakeup events checks in the ACPI EC driver more
         straightforward and clean up acpi_ec_submit_event() (Rafael
         Wysocki).
    
       - Make it possible to obtain the CPU capacity with the help of CPPC
         information (Ionela Voinescu).
    
       - Improve fine grained fan control in the ACPI fan driver and
         document it (Srinivas Pandruvada).
    
       - Add device HID and quirk for Microsoft Surface Go 3 to the ACPI
         battery driver (Maximilian Luz).
    
       - Make the ACPI driver for Intel SoCs (LPSS) let the SPI driver know
         the exact type of the controller (Andy Shevchenko).
    
       - Force native backlight mode on Clevo NL5xRU and NL5xNU (Werner
         Sembach).
    
       - Fix return value of __setup handlers in the APEI code (Randy
         Dunlap).
    
       - Add Arm Generic Diagnostic Dump and Reset device driver (Ilkka
         Koskinen).
    
       - Limit printable size of BERT table data (Darren Hart).
    
       - Fix up HEST and GHES initialization (Shuai Xue).
    
       - Update the ACPI device enumeration documentation and unify the ASL
         style in GPIO-related examples (Andy Shevchenko)"
    
    * tag 'acpi-5.18-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (52 commits)
      clocksource: acpi_pm: fix return value of __setup handler
      ACPI: bus: Avoid using CPPC if not supported by firmware
      Revert "ACPI: Pass the same capabilities to the _OSC regardless of the query flag"
      ACPI: video: Force backlight native for Clevo NL5xRU and NL5xNU
      arm64, topology: enable use of init_cpu_capacity_cppc()
      arch_topology: obtain cpu capacity using information from CPPC
      x86, ACPI: rename init_freq_invariance_cppc() to arch_init_invariance_cppc()
      ACPI: AGDI: Add driver for Arm Generic Diagnostic Dump and Reset device
      ACPI: tables: Add AGDI to the list of known table signatures
      ACPI/APEI: Limit printable size of BERT table data
      ACPI: docs: gpio-properties: Unify ASL style for GPIO examples
      ACPI / x86: Work around broken XSDT on Advantech DAC-BJ01 board
      ACPI: APEI: fix return value of __setup handlers
      x86/ACPI: CPPC: Move init_freq_invariance_cppc() into x86 CPPC
      x86: Expose init_freq_invariance() to topology header
      x86/ACPI: CPPC: Move AMD maximum frequency ratio setting function into x86 CPPC
      x86/ACPI: CPPC: Rename cppc_msr.c to cppc.c
      ACPI / x86: Add skip i2c clients quirk for Lenovo Yoga Tablet 1050F/L
      ACPI / x86: Add skip i2c clients quirk for Nextbook Ares 8
      ACPICA: Avoid walking the ACPI Namespace if it is not there
      ...

commit 84c2e17951feeea08a1f3a01e71f8fa82b66332a
Merge: bba90e096468 b166e52541f2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 21 12:53:14 2022 -0700

    Merge tag 'timers-core-2022-03-21' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer and timekeeping updates from Thomas Gleixner:
     "Core code:
    
       - Make the NOHZ handling of the timekeeping/tick core more robust to
         prevent a rare jiffies update stall.
    
       - Handle softirqs in the NOHZ/idle case correctly
    
      Drivers:
    
       - Add support for event stream scaling of the 1GHz counter on ARM(64)
    
       - Correct an error code check in the timer-of layer
    
       - The usual cleanups and improvements all over the place"
    
    * tag 'timers-core-2022-03-21' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (23 commits)
      lib/irq_poll: Declare IRQ_POLL softirq vector as ksoftirqd-parking safe
      tick/rcu: Stop allowing RCU_SOFTIRQ in idle
      tick/rcu: Remove obsolete rcu_needs_cpu() parameters
      tick: Detect and fix jiffies update stall
      clocksource/drivers/timer-of: Check return value of of_iomap in timer_of_base_init()
      clocksource/drivers/timer-microchip-pit64b: Use 5MHz for clockevent
      clocksource/drivers/timer-microchip-pit64b: Use notrace
      clocksource/drivers/timer-microchip-pit64b: Remove mmio selection
      dt-bindings: timer: Tegra: Convert text bindings to yaml
      clocksource/drivers/imx-tpm: Move tpm_read_sched_clock() under CONFIG_ARM
      clocksource/drivers/arm_arch_timer: Use event stream scaling when available
      clocksource/drivers/exynos_mct: Increase the size of name array
      clocksource/drivers/exynos_mct: Bump up mct max irq number
      clocksource/drivers/exynos_mct: Remove mct interrupt index enum
      clocksource/drivers/exynos_mct: Handle DTS with higher number of interrupts
      clocksource/drivers/timer-ti-dm: Fix regression from errata i940 fix
      clocksource/drivers/imx-tpm: Exclude sched clock for ARM64
      clocksource: Add a Kconfig option for WATCHDOG_MAX_SKEW
      clocksource/drivers/imx-tpm: Update name of clkevt
      clocksource/drivers/imx-tpm: Add CLOCK_EVT_FEAT_DYNIRQ
      ...

commit 03d5c98d91587291163c341883ddf067bb6ca00a
Merge: 314b97cc97f0 977dc3082285 9978f446d406 6a861abceecb e702196bf857
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Mar 18 17:23:05 2022 +0100

    Merge branches 'acpi-pm', 'acpi-properties', 'acpi-misc' and 'acpi-x86'
    
    Merge ACPI power management changes, ACPI device properties handling
    changes, x86-specific ACPI changes and miscellaneous ACPI changes for
    5.18-rc1:
    
     - Add power management debug messages related to suspend-to-idle in
       two places (Rafael Wysocki).
    
     - Fix __acpi_node_get_property_reference() return value and clean up
       that function (Andy Shevchenko, Sakari Ailus).
    
     - Fix return value of the __setup handler in the ACPI PM timer clock
       source driver (Randy Dunlap).
    
     - Clean up double words in two comments (Tom Rix).
    
     - Add "skip i2c clients" quirks for Lenovo Yoga Tablet 1050F/L and
       Nextbook Ares 8 (Hans de Goede).
    
     - Clean up frequency invariance handling on x86 in the ACPI CPPC
       library (Huang Rui).
    
     - Work around broken XSDT on the Advantech DAC-BJ01 board (Mark
       Cilissen).
    
    * acpi-pm:
      ACPI: EC / PM: Print additional debug message in acpi_ec_dispatch_gpe()
      ACPI: PM: Print additional debug message in acpi_s2idle_wake()
    
    * acpi-properties:
      ACPI: property: Get rid of redundant 'else'
      ACPI: properties: Consistently return -ENOENT if there are no more references
    
    * acpi-misc:
      clocksource: acpi_pm: fix return value of __setup handler
      ACPI: clean up double words in two comments
    
    * acpi-x86:
      ACPI / x86: Work around broken XSDT on Advantech DAC-BJ01 board
      x86/ACPI: CPPC: Move init_freq_invariance_cppc() into x86 CPPC
      x86: Expose init_freq_invariance() to topology header
      x86/ACPI: CPPC: Move AMD maximum frequency ratio setting function into x86 CPPC
      x86/ACPI: CPPC: Rename cppc_msr.c to cppc.c
      ACPI / x86: Add skip i2c clients quirk for Lenovo Yoga Tablet 1050F/L
      ACPI / x86: Add skip i2c clients quirk for Nextbook Ares 8

commit 6a861abceecb68497dd82a324fee45a5332dcece
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Mar 17 08:39:39 2022 -0700

    clocksource: acpi_pm: fix return value of __setup handler
    
    __setup() handlers should return 1 to obsolete_checksetup() in
    init/main.c to indicate that the boot option has been handled.
    A return of 0 causes the boot option/value to be listed as an Unknown
    kernel parameter and added to init's (limited) environment strings.
    
    The __setup() handler interface isn't meant to handle negative return
    values -- they are non-zero, so they mean "handled" (like a return
    value of 1 does), but that's just a quirk. So return 1 from
    parse_pmtmr(). Also print a warning message if kstrtouint() returns
    an error.
    
    Fixes: 6b148507d3d0 ("pmtmr: allow command line override of ioport")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: Igor Zhbanov <i.zhbanov@omprussia.ru>
    Link: lore.kernel.org/r/64644a2f-4a20-bab3-1e15-3b2cdd0defe3@omprussia.ru
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit b166e52541f2357ce126a92ce1d9a580fdca719d
Merge: 1f1893d78180 4467b8bad240
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Mar 14 10:18:17 2022 +0100

    Merge tag 'timers-v5.18-rc1' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/events updates from Daniel Lezcano:
    
      - Fix return error code check for the timer-of layer when getting
        the base address (Guillaume Ranquet)
    
      - Remove MMIO dependency, add notrace annotation for sched_clock
        and increase the timer resolution for the Microchip
        PIT64b (Claudiu Beznea)
    
      - Convert DT bindings to yaml for the Tegra timer (David Heidelberg)
    
      - Fix compilation error on architecture other than ARM for the
        i.MX TPM (Nathan Chancellor)
    
      - Add support for the event stream scaling for 1GHz counter on
        the arch ARM timer (Marc Zyngier)
    
      - Support a higher number of interrupts by the Exynos MCT timer
        driver (Alim Akhtar)
    
      - Detect and prevent memory corruption when the specified number
        of interrupts in the DTS is greater than the array size in the
        code for the Exynos MCT timer (Krzysztof Kozlowski)
    
      - Fix regression from a previous errata fix on the TI DM
        timer (Drew Fustini)
    
      - Several fixes and code improvements for the i.MX TPM
        driver (Peng Fan)
    
    Link: https://lore.kernel.org/all/a8cd9be9-7d70-80df-2b74-1a8226a215e1@linaro.org

commit eed05744322da07dd7e419432dcedf3c2e017179
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Wed Mar 2 08:40:32 2022 -0800

    xen: delay xen_hvm_init_time_ops() if kdump is boot on vcpu>=32
    
    The sched_clock() can be used very early since commit 857baa87b642
    ("sched/clock: Enable sched clock early"). In addition, with commit
    38669ba205d1 ("x86/xen/time: Output xen sched_clock time from 0"), kdump
    kernel in Xen HVM guest may panic at very early stage when accessing
    &__this_cpu_read(xen_vcpu)->time as in below:
    
    setup_arch()
     -> init_hypervisor_platform()
         -> x86_init.hyper.init_platform = xen_hvm_guest_init()
             -> xen_hvm_init_time_ops()
                 -> xen_clocksource_read()
                     -> src = &__this_cpu_read(xen_vcpu)->time;
    
    This is because Xen HVM supports at most MAX_VIRT_CPUS=32 'vcpu_info'
    embedded inside 'shared_info' during early stage until xen_vcpu_setup() is
    used to allocate/relocate 'vcpu_info' for boot cpu at arbitrary address.
    
    However, when Xen HVM guest panic on vcpu >= 32, since
    xen_vcpu_info_reset(0) would set per_cpu(xen_vcpu, cpu) = NULL when
    vcpu >= 32, xen_clocksource_read() on vcpu >= 32 would panic.
    
    This patch calls xen_hvm_init_time_ops() again later in
    xen_hvm_smp_prepare_boot_cpu() after the 'vcpu_info' for boot vcpu is
    registered when the boot vcpu is >= 32.
    
    This issue can be reproduced on purpose via below command at the guest
    side when kdump/kexec is enabled:
    
    "taskset -c 33 echo c > /proc/sysrq-trigger"
    
    The bugfix for PVM is not implemented due to the lack of testing
    environment.
    
    [boris: xen_hvm_init_time_ops() returns on errors instead of jumping to end]
    
    Cc: Joe Jin <joe.jin@oracle.com>
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20220302164032.14569-3-dongli.zhang@oracle.com
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>

commit 9031e7656e77b60d523d7f539355c1f607f55a62
Author: Anthoine Bourgeois <anthoine.bourgeois@gmail.com>
Date:   Tue Jan 25 20:11:39 2022 +0100

    ARM: dts: Use 32KiHz oscillator on devkit8000
    
    [ Upstream commit 8840f5460a23759403f1f2860429dcbcc2f04a65 ]
    
    Devkit8000 board seems to always used 32k_counter as clocksource.
    Restore this behavior.
    
    If clocksource is back to 32k_counter, timer12 is now the clockevent
    source (as before) and timer2 is not longer needed here.
    
    This commit fixes the same issue observed with commit 23885389dbbb
    ("ARM: dts: Fix timer regression for beagleboard revision c") when sleep
    is blocked until hitting keys over serial console.
    
    Fixes: aba1ad05da08 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Fixes: e428e250fde6 ("ARM: dts: Configure system timers for omap3")
    Signed-off-by: Anthoine Bourgeois <anthoine.bourgeois@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40d763efa5bf1c3313b2a647a1133b60eca3915a
Author: Anthoine Bourgeois <anthoine.bourgeois@gmail.com>
Date:   Tue Jan 25 20:11:39 2022 +0100

    ARM: dts: Use 32KiHz oscillator on devkit8000
    
    [ Upstream commit 8840f5460a23759403f1f2860429dcbcc2f04a65 ]
    
    Devkit8000 board seems to always used 32k_counter as clocksource.
    Restore this behavior.
    
    If clocksource is back to 32k_counter, timer12 is now the clockevent
    source (as before) and timer2 is not longer needed here.
    
    This commit fixes the same issue observed with commit 23885389dbbb
    ("ARM: dts: Fix timer regression for beagleboard revision c") when sleep
    is blocked until hitting keys over serial console.
    
    Fixes: aba1ad05da08 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Fixes: e428e250fde6 ("ARM: dts: Configure system timers for omap3")
    Signed-off-by: Anthoine Bourgeois <anthoine.bourgeois@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44709130793bb7e23c929e54b248b0b3816944d6
Author: Anthoine Bourgeois <anthoine.bourgeois@gmail.com>
Date:   Tue Jan 25 20:11:39 2022 +0100

    ARM: dts: Use 32KiHz oscillator on devkit8000
    
    [ Upstream commit 8840f5460a23759403f1f2860429dcbcc2f04a65 ]
    
    Devkit8000 board seems to always used 32k_counter as clocksource.
    Restore this behavior.
    
    If clocksource is back to 32k_counter, timer12 is now the clockevent
    source (as before) and timer2 is not longer needed here.
    
    This commit fixes the same issue observed with commit 23885389dbbb
    ("ARM: dts: Fix timer regression for beagleboard revision c") when sleep
    is blocked until hitting keys over serial console.
    
    Fixes: aba1ad05da08 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Fixes: e428e250fde6 ("ARM: dts: Configure system timers for omap3")
    Signed-off-by: Anthoine Bourgeois <anthoine.bourgeois@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4467b8bad2401794fb89a0268c8c8257180bf60f
Author: Guillaume Ranquet <granquet@baylibre.com>
Date:   Mon Mar 7 18:26:56 2022 +0100

    clocksource/drivers/timer-of: Check return value of of_iomap in timer_of_base_init()
    
    of_base->base can either be iomapped using of_io_request_and_map() or
    of_iomap() depending whether or not an of_base->name has been set.
    
    Thus check of_base->base against NULL as of_iomap() does not return a
    PTR_ERR() in case of error.
    
    Fixes: 9aea417afa6b ("clocksource/drivers/timer-of: Don't request the resource by name")
    Signed-off-by: Guillaume Ranquet <granquet@baylibre.com>
    Link: https://lore.kernel.org/r/20220307172656.4836-1-granquet@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 58dedf0a4782ce42b4d31f1f62e5ad80a1b73d72
Merge: 7e57714cd0ad fc153c1c58cb
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Mar 7 19:12:38 2022 +0100

    Merge branch 'clocksource.2022.02.01b' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu into timers/core
    
    Pull clocksource watchdog update from Paul McKenney:
    
     - Add a config option for the maximum skew of the watchdog.
    
    Link: https://lore.kernel.org/r/20220224000718.GA3747431@paulmck-ThinkPad-P17-Gen-1

commit 389e3bff69b4341b42779833063c7b462a6e6d42
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Fri Mar 4 15:35:58 2022 +0200

    clocksource/drivers/timer-microchip-pit64b: Use 5MHz for clockevent
    
    Use 5MHz clock for clockevent timers. This increases timer's
    resolution.
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220304133601.2404086-4-claudiu.beznea@microchip.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ff10ee97cb203262e88d9c8bc87369cbd4004a0c
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Fri Mar 4 15:35:57 2022 +0200

    clocksource/drivers/timer-microchip-pit64b: Use notrace
    
    Use notrace for mchp_pit64b_sched_read_clk() to avoid recursive call of
    prepare_ftrace_return() when issuing:
    echo function_graph > /sys/kernel/debug/tracing/current_tracer
    
    Fixes: 625022a5f160 ("clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220304133601.2404086-3-claudiu.beznea@microchip.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 34f03f7f3e9f79412b5bf8db9f2778c9ed2fd733
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Fri Mar 4 15:35:56 2022 +0200

    clocksource/drivers/timer-microchip-pit64b: Remove mmio selection
    
    PIT64B timer driver doesn't depend on CLKSRC_MMIO since
    commit e85c1d21b16b ("clocksource/drivers/timer-microchip-pit64b:
    Add clocksource suspend/resume"). Remove the selection.
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220304133601.2404086-2-claudiu.beznea@microchip.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bf127df3cceada8693888fc86a3121c38ef25701
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Mar 3 11:42:12 2022 -0700

    clocksource/drivers/imx-tpm: Move tpm_read_sched_clock() under CONFIG_ARM
    
    When building this driver for an architecture other than ARCH=arm:
    
      drivers/clocksource/timer-imx-tpm.c:78:20: error: unused function 'tpm_read_sched_clock' [-Werror,-Wunused-function]
      static u64 notrace tpm_read_sched_clock(void)
                         ^
      1 error generated.
    
    Move the function definition under the existing CONFIG_ARM section so
    there is no more warning.
    
    Fixes: 10720e120e2b ("clocksource/drivers/imx-tpm: Exclude sched clock for ARM64")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20220303184212.2356245-1-nathan@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8c4b810a87005eb46564a48a69b5b255e515fa62
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Feb 3 17:05:02 2022 +0000

    clocksource/drivers/arm_arch_timer: Use event stream scaling when available
    
    With FEAT_ECV and the 1GHz counter, it is pretty likely that the
    event stream divider doesn't fit in the field that holds the
    divider value (we only have 4 bits to describe counter bits [15:0]
    
    Thankfully, FEAT_ECV also provides a scaling mechanism to switch
    the field to cover counter bits [23:8] instead.
    
    Enable this on arm64 when ECV is available (32bit doesn't have
    any detection infrastructure and is unlikely to be run on an
    ARMv8.6 system anyway).
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Link: https://lore.kernel.org/r/20220203170502.2694422-1-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0a3a4b9d2bb7928f54579421bbadd4aa9c4a94f0
Author: Alim Akhtar <alim.akhtar@samsung.com>
Date:   Mon Feb 21 23:15:47 2022 +0530

    clocksource/drivers/exynos_mct: Increase the size of name array
    
    Variable _name_ hold mct_tick number per cpu and it is currently
    limited to 10. Which restrict the scalability of the MCT driver for
    the SoC which has more local timers interrupts (>= 12).
    Increase the length of it to make mct_tick printed correctly for
    each local timer interrupts per CPU.
    
    Signed-off-by: Alim Akhtar <alim.akhtar@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20220221174547.26176-3-alim.akhtar@samsung.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f49b82a0a54fa85451ed96c35f24679522d59c7a
Author: Alim Akhtar <alim.akhtar@samsung.com>
Date:   Mon Feb 21 23:15:46 2022 +0530

    clocksource/drivers/exynos_mct: Bump up mct max irq number
    
    Bump-up maximum number of MCT IRQ to match the binding
    documentation. This make driver scalable for SoC which
    has more than 12 timer irqs, like recently added FSD SoC.
    
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Alim Akhtar <alim.akhtar@samsung.com>
    Link: https://lore.kernel.org/r/20220221174547.26176-2-alim.akhtar@samsung.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit dfc597c9bca9b4447820a59fe86526f016be1458
Author: Alim Akhtar <alim.akhtar@samsung.com>
Date:   Mon Feb 21 23:15:45 2022 +0530

    clocksource/drivers/exynos_mct: Remove mct interrupt index enum
    
    MCT driver define an enum which list global and local timer's
    irq index. Most of them are not used but MCT_G0_IRQ and
    MCT_L0_IRQ and these two are at a fixed offset/index.
    Get rid of this enum and use a #define for the used irq index.
    
    No functional changes expected.
    
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Alim Akhtar <alim.akhtar@samsung.com>
    Link: https://lore.kernel.org/r/20220221174547.26176-1-alim.akhtar@samsung.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ab8da93dc06d82f464c47ab30e6c75190702f369
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Sun Feb 20 11:38:15 2022 +0100

    clocksource/drivers/exynos_mct: Handle DTS with higher number of interrupts
    
    The driver statically defines maximum number of interrupts it can
    handle, however it does not respect that limit when configuring them.
    When provided with a DTS with more interrupts than assumed, the driver
    will overwrite static array mct_irqs leading to silent memory
    corruption.
    
    Validate the interrupts coming from DTS to avoid this.  This does not
    change the fact that such DTS might not boot at all, because it is
    simply incompatible, however at least some warning will be printed.
    
    Fixes: 36ba5d527e95 ("ARM: EXYNOS: add device tree support for MCT controller driver")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Link: https://lore.kernel.org/r/20220220103815.135380-1-krzysztof.kozlowski@canonical.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bceaae3bac0ce27c549bb050336d8d08abc2ee54
Author: Drew Fustini <dfustini@baylibre.com>
Date:   Thu Feb 3 21:35:05 2022 -0800

    clocksource/drivers/timer-ti-dm: Fix regression from errata i940 fix
    
    The existing fix for errata i940 causes a conflict for IPU2 which is
    using timer 3 and 4. From arch/arm/boot/dts/dra7-ipu-dsp-common.dtsi:
    
      &ipu2 {
              mboxes = <&mailbox6 &mbox_ipu2_ipc3x>;
              ti,timers = <&timer3>;
              ti,watchdog-timers = <&timer4>, <&timer9>;
      };
    
    The conflict was noticed when booting mainline on the BeagleBoard X15
    which has a TI AM5728 SoC:
    
      remoteproc remoteproc1: 55020000.ipu is available
      remoteproc remoteproc1: powering up 55020000.ipu
      remoteproc remoteproc1: Booting fw image dra7-ipu2-fw.xem4
      omap-rproc 55020000.ipu: could not get timer platform device
      omap-rproc 55020000.ipu: omap_rproc_enable_timers failed: -19
      remoteproc remoteproc1: can't start rproc 55020000.ipu: -19
    
    This change modifies the errata fix to instead use timer 15 and 16 which
    resolves the timer conflict.
    
    It does not appear to introduce any latency regression. Results from
    cyclictest with original errata fix using dmtimer 3 and 4:
    
      # cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0
      policy: fifo: loadavg: 0.02 0.03 0.05
    
      T: 0 ( 1449) P:80 I:200 C: 800368 Min:   0 Act:   32 Avg:   22 Max:  128
      T: 1 ( 1450) P:80 I:200 C: 800301 Min:   0 Act:   12 Avg:   23 Max:   70
    
    The results after the change to dmtimer 15 and 16:
    
      # cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0
      policy: fifo: loadavg: 0.36 0.19 0.07
    
      T: 0 ( 1711) P:80 I:200 C: 759599 Min:   0 Act:    6 Avg:   22 Max:  108
      T: 1 ( 1712) P:80 I:200 C: 759539 Min:   0 Act:   19 Avg:   23 Max:   79
    
    Fixes: 25de4ce5ed02 ("clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940")
    Link: https://lore.kernel.org/linux-omap/YfWsG0p6to3IJuvE@x1/
    Suggested-by: Suman Anna <s-anna@ti.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Drew Fustini <dfustini@baylibre.com>
    Link: https://lore.kernel.org/r/20220204053503.1409162-1-dfustini@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f03f10a9823ab8591afbc20ddaf9ce2aeb52ce59
Merge: 3f96885eb713 8840f5460a23
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Feb 25 11:14:22 2022 +0100

    Merge tag 'omap-for-v5.17/fixes-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into arm/fixes
    
    Fixes for omaps
    
    Fixes for devkit8000 timer regression. Similar to the earlier beagleboard
    fixes, we must not configure the clocksource drivers to use an alternative
    timer configuration. It causes unnecessary issues with power management.
    Only some old designs based on early beagleboard revisions with a miswired
    timer need to use the alternative timer.
    
    * tag 'omap-for-v5.17/fixes-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: dts: Use 32KiHz oscillator on devkit8000
      ARM: dts: switch timer config to common devkit8000 devicetree
    
    Link: https://lore.kernel.org/r/pull-1645606483-876944@atomide.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 8840f5460a23759403f1f2860429dcbcc2f04a65
Author: Anthoine Bourgeois <anthoine.bourgeois@gmail.com>
Date:   Tue Jan 25 20:11:39 2022 +0100

    ARM: dts: Use 32KiHz oscillator on devkit8000
    
    Devkit8000 board seems to always used 32k_counter as clocksource.
    Restore this behavior.
    
    If clocksource is back to 32k_counter, timer12 is now the clockevent
    source (as before) and timer2 is not longer needed here.
    
    This commit fixes the same issue observed with commit 23885389dbbb
    ("ARM: dts: Fix timer regression for beagleboard revision c") when sleep
    is blocked until hitting keys over serial console.
    
    Fixes: aba1ad05da08 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Fixes: e428e250fde6 ("ARM: dts: Configure system timers for omap3")
    Signed-off-by: Anthoine Bourgeois <anthoine.bourgeois@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 10720e120e2b1d66172dccb06eb4f346a665cca6
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Jan 5 20:43:04 2022 +0800

    clocksource/drivers/imx-tpm: Exclude sched clock for ARM64
    
    For ARM64 platform such as i.MX8ULP which has ARMv8 generic timer as sched
    clock, which is much faster compared with tpm sched clock. Reading the
    tpm count register in i.MX8ULP requires about 290ns, this is slow and
    introduce scheduler latency. So exclude tpm sched clock for ARM64
    platform.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20220105124304.3567629-1-peng.fan@oss.nxp.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fc153c1c58cb8c3bb3b443b4d7dc3211ff5f65fc
Author: Waiman Long <longman@redhat.com>
Date:   Sun Dec 5 22:38:15 2021 -0500

    clocksource: Add a Kconfig option for WATCHDOG_MAX_SKEW
    
    A watchdog maximum skew of 100us may still be too small for
    some systems or archs. It may also be too small when some kernel
    debug config options are enabled.  So add a new Kconfig option
    CLOCKSOURCE_WATCHDOG_MAX_SKEW_US to allow kernel builders to have more
    control on the threshold for marking clocksource as unstable.
    
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>

commit 3b7a7602b2e041f156cf7a1b4fb8cbe0eb506dc1
Author: Waiman Long <longman@redhat.com>
Date:   Thu Nov 18 14:14:36 2021 -0500

    clocksource: Avoid accidental unstable marking of clocksources
    
    [ Upstream commit c86ff8c55b8ae68837b2fa59dc0c203907e9a15f ]
    
    Since commit db3a34e17433 ("clocksource: Retry clock read if long delays
    detected") and commit 2e27e793e280 ("clocksource: Reduce clocksource-skew
    threshold"), it is found that tsc clocksource fallback to hpet can
    sometimes happen on both Intel and AMD systems especially when they are
    running stressful benchmarking workloads. Of the 23 systems tested with
    a v5.14 kernel, 10 of them have switched to hpet clock source during
    the test run.
    
    The result of falling back to hpet is a drastic reduction of performance
    when running benchmarks. For example, the fio performance tests can
    drop up to 70% whereas the iperf3 performance can drop up to 80%.
    
    4 hpet fallbacks happened during bootup. They were:
    
      [    8.749399] clocksource: timekeeping watchdog on CPU13: hpet read-back delay of 263750ns, attempt 4, marking unstable
      [   12.044610] clocksource: timekeeping watchdog on CPU19: hpet read-back delay of 186166ns, attempt 4, marking unstable
      [   17.336941] clocksource: timekeeping watchdog on CPU28: hpet read-back delay of 182291ns, attempt 4, marking unstable
      [   17.518565] clocksource: timekeeping watchdog on CPU34: hpet read-back delay of 252196ns, attempt 4, marking unstable
    
    Other fallbacks happen when the systems were running stressful
    benchmarks. For example:
    
      [ 2685.867873] clocksource: timekeeping watchdog on CPU117: hpet read-back delay of 57269ns, attempt 4, marking unstable
      [46215.471228] clocksource: timekeeping watchdog on CPU8: hpet read-back delay of 61460ns, attempt 4, marking unstable
    
    Commit 2e27e793e280 ("clocksource: Reduce clocksource-skew threshold"),
    changed the skew margin from 100us to 50us. I think this is too small
    and can easily be exceeded when running some stressful workloads on a
    thermally stressed system.  So it is switched back to 100us.
    
    Even a maximum skew margin of 100us may be too small in for some systems
    when booting up especially if those systems are under thermal stress. To
    eliminate the case that the large skew is due to the system being too
    busy slowing down the reading of both the watchdog and the clocksource,
    an extra consecutive read of watchdog clock is being done to check this.
    
    The consecutive watchdog read delay is compared against
    WATCHDOG_MAX_SKEW/2. If the delay exceeds the limit, we assume that
    the system is just too busy. A warning will be printed to the console
    and the clock skew check is skipped for this round.
    
    Fixes: db3a34e17433 ("clocksource: Retry clock read if long delays detected")
    Fixes: 2e27e793e280 ("clocksource: Reduce clocksource-skew threshold")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf9b8de20168ddeb261a1e2d4f918d3c0d502fc5
Author: Waiman Long <longman@redhat.com>
Date:   Thu Nov 18 14:14:36 2021 -0500

    clocksource: Avoid accidental unstable marking of clocksources
    
    [ Upstream commit c86ff8c55b8ae68837b2fa59dc0c203907e9a15f ]
    
    Since commit db3a34e17433 ("clocksource: Retry clock read if long delays
    detected") and commit 2e27e793e280 ("clocksource: Reduce clocksource-skew
    threshold"), it is found that tsc clocksource fallback to hpet can
    sometimes happen on both Intel and AMD systems especially when they are
    running stressful benchmarking workloads. Of the 23 systems tested with
    a v5.14 kernel, 10 of them have switched to hpet clock source during
    the test run.
    
    The result of falling back to hpet is a drastic reduction of performance
    when running benchmarks. For example, the fio performance tests can
    drop up to 70% whereas the iperf3 performance can drop up to 80%.
    
    4 hpet fallbacks happened during bootup. They were:
    
      [    8.749399] clocksource: timekeeping watchdog on CPU13: hpet read-back delay of 263750ns, attempt 4, marking unstable
      [   12.044610] clocksource: timekeeping watchdog on CPU19: hpet read-back delay of 186166ns, attempt 4, marking unstable
      [   17.336941] clocksource: timekeeping watchdog on CPU28: hpet read-back delay of 182291ns, attempt 4, marking unstable
      [   17.518565] clocksource: timekeeping watchdog on CPU34: hpet read-back delay of 252196ns, attempt 4, marking unstable
    
    Other fallbacks happen when the systems were running stressful
    benchmarks. For example:
    
      [ 2685.867873] clocksource: timekeeping watchdog on CPU117: hpet read-back delay of 57269ns, attempt 4, marking unstable
      [46215.471228] clocksource: timekeeping watchdog on CPU8: hpet read-back delay of 61460ns, attempt 4, marking unstable
    
    Commit 2e27e793e280 ("clocksource: Reduce clocksource-skew threshold"),
    changed the skew margin from 100us to 50us. I think this is too small
    and can easily be exceeded when running some stressful workloads on a
    thermally stressed system.  So it is switched back to 100us.
    
    Even a maximum skew margin of 100us may be too small in for some systems
    when booting up especially if those systems are under thermal stress. To
    eliminate the case that the large skew is due to the system being too
    busy slowing down the reading of both the watchdog and the clocksource,
    an extra consecutive read of watchdog clock is being done to check this.
    
    The consecutive watchdog read delay is compared against
    WATCHDOG_MAX_SKEW/2. If the delay exceeds the limit, we assume that
    the system is just too busy. A warning will be printed to the console
    and the clock skew check is skipped for this round.
    
    Fixes: db3a34e17433 ("clocksource: Retry clock read if long delays detected")
    Fixes: 2e27e793e280 ("clocksource: Reduce clocksource-skew threshold")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd99aeb978451eee9e623be496cd6f9bbbc95e37
Author: Waiman Long <longman@redhat.com>
Date:   Thu Nov 18 14:14:36 2021 -0500

    clocksource: Avoid accidental unstable marking of clocksources
    
    [ Upstream commit c86ff8c55b8ae68837b2fa59dc0c203907e9a15f ]
    
    Since commit db3a34e17433 ("clocksource: Retry clock read if long delays
    detected") and commit 2e27e793e280 ("clocksource: Reduce clocksource-skew
    threshold"), it is found that tsc clocksource fallback to hpet can
    sometimes happen on both Intel and AMD systems especially when they are
    running stressful benchmarking workloads. Of the 23 systems tested with
    a v5.14 kernel, 10 of them have switched to hpet clock source during
    the test run.
    
    The result of falling back to hpet is a drastic reduction of performance
    when running benchmarks. For example, the fio performance tests can
    drop up to 70% whereas the iperf3 performance can drop up to 80%.
    
    4 hpet fallbacks happened during bootup. They were:
    
      [    8.749399] clocksource: timekeeping watchdog on CPU13: hpet read-back delay of 263750ns, attempt 4, marking unstable
      [   12.044610] clocksource: timekeeping watchdog on CPU19: hpet read-back delay of 186166ns, attempt 4, marking unstable
      [   17.336941] clocksource: timekeeping watchdog on CPU28: hpet read-back delay of 182291ns, attempt 4, marking unstable
      [   17.518565] clocksource: timekeeping watchdog on CPU34: hpet read-back delay of 252196ns, attempt 4, marking unstable
    
    Other fallbacks happen when the systems were running stressful
    benchmarks. For example:
    
      [ 2685.867873] clocksource: timekeeping watchdog on CPU117: hpet read-back delay of 57269ns, attempt 4, marking unstable
      [46215.471228] clocksource: timekeeping watchdog on CPU8: hpet read-back delay of 61460ns, attempt 4, marking unstable
    
    Commit 2e27e793e280 ("clocksource: Reduce clocksource-skew threshold"),
    changed the skew margin from 100us to 50us. I think this is too small
    and can easily be exceeded when running some stressful workloads on a
    thermally stressed system.  So it is switched back to 100us.
    
    Even a maximum skew margin of 100us may be too small in for some systems
    when booting up especially if those systems are under thermal stress. To
    eliminate the case that the large skew is due to the system being too
    busy slowing down the reading of both the watchdog and the clocksource,
    an extra consecutive read of watchdog clock is being done to check this.
    
    The consecutive watchdog read delay is compared against
    WATCHDOG_MAX_SKEW/2. If the delay exceeds the limit, we assume that
    the system is just too busy. A warning will be printed to the console
    and the clock skew check is skipped for this round.
    
    Fixes: db3a34e17433 ("clocksource: Retry clock read if long delays detected")
    Fixes: 2e27e793e280 ("clocksource: Reduce clocksource-skew threshold")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cacc6c30e3eb7c452132ee5b273e248d2f263323
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:22 2021 -0700

    clocksource: Reduce clocksource-skew threshold
    
    [ Upstream commit 2e27e793e280ff12cb5c202a1214c08b0d3a0f26 ]
    
    Currently, WATCHDOG_THRESHOLD is set to detect a 62.5-millisecond skew in
    a 500-millisecond WATCHDOG_INTERVAL.  This requires that clocks be skewed
    by more than 12.5% in order to be marked unstable.  Except that a clock
    that is skewed by that much is probably destroying unsuspecting software
    right and left.  And given that there are now checks for false-positive
    skews due to delays between reading the two clocks, it should be possible
    to greatly decrease WATCHDOG_THRESHOLD, at least for fine-grained clocks
    such as TSC.
    
    Therefore, add a new uncertainty_margin field to the clocksource structure
    that contains the maximum uncertainty in nanoseconds for the corresponding
    clock.  This field may be initialized manually, as it is for
    clocksource_tsc_early and clocksource_jiffies, which is copied to
    refined_jiffies.  If the field is not initialized manually, it will be
    computed at clock-registry time as the period of the clock in question
    based on the scale and freq parameters to __clocksource_update_freq_scale()
    function.  If either of those two parameters are zero, the
    tens-of-milliseconds WATCHDOG_THRESHOLD is used as a cowardly alternative
    to dividing by zero.  No matter how the uncertainty_margin field is
    calculated, it is bounded below by twice WATCHDOG_MAX_SKEW, that is, by 100
    microseconds.
    
    Note that manually initialized uncertainty_margin fields are not adjusted,
    but there is a WARN_ON_ONCE() that triggers if any such field is less than
    twice WATCHDOG_MAX_SKEW.  This WARN_ON_ONCE() is intended to discourage
    production use of the one-nanosecond uncertainty_margin values that are
    used to test the clock-skew code itself.
    
    The actual clock-skew check uses the sum of the uncertainty_margin fields
    of the two clocksource structures being compared.  Integer overflow is
    avoided because the largest computed value of the uncertainty_margin
    fields is one billion (10^9), and double that value fits into an
    unsigned int.  However, if someone manually specifies (say) UINT_MAX,
    they will get what they deserve.
    
    Note that the refined_jiffies uncertainty_margin field is initialized to
    TICK_NSEC, which means that skew checks involving this clocksource will
    be sufficently forgiving.  In a similar vein, the clocksource_tsc_early
    uncertainty_margin field is initialized to 32*NSEC_PER_MSEC, which
    replicates the current behavior and allows custom setting if needed
    in order to address the rare skews detected for this clocksource in
    current mainline.
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-4-paulmck@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e547ffe9e6f497e36bde9d86dbcfbc781946752b
Author: Peng Fan <peng.fan@nxp.com>
Date:   Tue Dec 14 20:07:37 2021 +0800

    clocksource/drivers/imx-tpm: Update name of clkevt
    
    The tpm driver is not only for i.MX7ULP now, i.MX8ULP also use it. It
    maybe also used by other i.MX variants, so update name to reflect it.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20211214120737.1611955-6-peng.fan@oss.nxp.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 39664b624f6a6518001b2c8f86bac1352c89d0af
Author: Peng Fan <peng.fan@nxp.com>
Date:   Tue Dec 14 20:07:36 2021 +0800

    clocksource/drivers/imx-tpm: Add CLOCK_EVT_FEAT_DYNIRQ
    
    Add CLOCK_EVT_FEAT_DYNIRQ to allow the IRQ could be runtime set affinity
    to the cores that needs wake up, otherwise saying core0 has to send
    IPI to wakeup core1. With CLOCK_EVT_FEAT_DYNIRQ set, when broadcast
    timer could wake up the cores, IPI is not needed.
    
    Acked-by: Jacky Bai <ping.bai@nxp.com>
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20211214120737.1611955-5-peng.fan@oss.nxp.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5b3c267506eba2972d53dafb8b988d5fd28d223d
Author: Peng Fan <peng.fan@nxp.com>
Date:   Tue Dec 14 20:07:35 2021 +0800

    clocksource/drivers/imx-tpm: Mark two variable with __ro_after_init
    
    counter_width and timer_base will not be updated after init, so mark
    as __ro_after_init.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20211214120737.1611955-4-peng.fan@oss.nxp.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 59e2bcd8a95b4cc5a04809b6d2ee337e81b47f57
Author: Peng Fan <peng.fan@nxp.com>
Date:   Tue Dec 14 20:07:34 2021 +0800

    clocksource/drivers/imx-tpm: Drop IRQF_IRQPOLL
    
    Per the Documentation,
    IRQF_IRQPOLL is used for polling (only the interrupt that is registered
    first in a shared interrupt is considered for performance reasons)
    The TPM timer is not sharing interrupt with others, and pass irqpoll
    not make sense for i.MX platform.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20211214120737.1611955-3-peng.fan@oss.nxp.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 841255544b653cbabe4ee5eda56bbb8b7ad8de8a
Author: Peng Fan <peng.fan@nxp.com>
Date:   Tue Dec 14 20:07:33 2021 +0800

    clocksource/drivers/imx-sysctr: Drop IRQF_IRQPOLL
    
    Per the Documentation,
    IRQF_IRQPOLL is used for polling (only the interrupt that is registered
    first in a shared interrupt is considered for performance reasons)
    But this timer is not sharing interrupt line with others, and
    actually irqpoll not work with this timer with IRQF_IRQPOLL set, so
    drop the flag.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20211214120737.1611955-2-peng.fan@oss.nxp.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fd04899208d2057b2de808e8447cfd806fd0a607
Merge: 147cc5838c0f 35e13e9da9af
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 13 09:02:27 2022 -0800

    Merge tag 'timers-core-2022-01-13' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Updates for the time(r) subsystem:
    
      Core:
    
       - Make the clocksource watchdog more robust by better validation
         checks of the measurement.
    
      Drivers:
    
       - New drivers for MStar and SSD20xd SOCs
    
       - The usual cleanups and improvements all over the place"
    
    * tag 'timers-core-2022-01-13' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      dt-bindings: timer: Add Mstar MSC313e timer devicetree bindings documentation
      clocksource/drivers/msc313e: Add support for ssd20xd-based platforms
      clocksource/drivers: Add MStar MSC313e timer support
      clocksource/drivers/pistachio: Fix -Wunused-but-set-variable warning
      clocksource/drivers/timer-imx-sysctr: Set cpumask to cpu_possible_mask
      clocksource/drivers/imx-sysctr: Mark two variable with __ro_after_init
      clocksource/drivers/renesas,ostm: Make RENESAS_OSTM symbol visible
      clocksource/drivers/renesas-ostm: Add RZ/G2L OSTM support
      dt-bindings: timer: renesas: ostm: Document Renesas RZ/G2L OSTM
      clocksource/drivers/exynos_mct: Fix silly typo resulting in checkpatch warning
      clocksource: Reduce the default clocksource_watchdog() retries to 2
      clocksource: Avoid accidental unstable marking of clocksources
      dt-bindings: timer: tpm-timer: Add imx8ulp compatible string
      reset: Add of_reset_control_get_optional_exclusive()
      clocksource/drivers/exynos_mct: Refactor resources allocation
      dt-bindings: timer: remove rockchip,rk3066-timer compatible string from rockchip,rk-timer.yaml
      dt-bindings: timer: cadence_ttc: Add power-domains

commit 35e13e9da9afbce13c1d36465504ece4e65f24fe
Merge: 6629c0769926 1a5620671a1b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Jan 10 13:57:17 2022 +0100

    Merge branch 'clocksource' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu into timers/core
    
    Pull clocksource watchdog updates from Paul McKenney:
    
     - Avoid accidental unstable marking of clocksources by rejecting
       clocksource measurements where the source of the skew is the delay
       reading reference clocksource itself.  This change avoids many of the
       current false positives caused by epic cache-thrashing workloads.
    
     - Reduce the default clocksource_watchdog() retries to 2, thus offsetting
       the increased overhead due to #1 above rereading the reference
       clocksource.
    
    Link: https://lore.kernel.org/lkml/20220105001723.GA536708@paulmck-ThinkPad-P17-Gen-1

commit 6629c0769926306454b113effe1aad243bd49bde
Merge: 2585cf9dfaad 7647204c2e81
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Jan 10 13:53:16 2022 +0100

    Merge tag 'timers-v5.17-rc1' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/events updates from Daniel Lezcano:
    
     - Refactor resource allocation on the Exynos_mct driver without
       functional changes (Marek Szyprowski)
    
     - Add imx8ulp compatible string for NPX TPM driver (Jacky Bai)
    
     - Fix comma introduced by error by replacing it by the initial
       semicolon on the Exynos_mct (Will Deacon)
    
     - Add OSTM driver support on Renesas. The reset line must be
       deasserted before accessing the registers. This change depends on an
       external change resulting in a shared immutable branch
       'reset/of-get-optional-exclusive' from
       git://git.pengutronix.de/pza/linux (Biju Das)
    
     - Make the OSTM Kconfig option visible to user in order to let him
       disable it when ARM architected timers is enabled (Biju Das)
    
     - Tag two variables on iMX sysctr _ro_afterinit (Peng Fan)
    
     - Set the cpumask to cpu_possible_mask in order to have full benefit
       of the DYNIRQ flag on iMX sysctr (Peng Fan)
    
     - Tag __maybe_unused a variable in the Pistachio timer driver in order
       to fix a warning reported by the kernel test robot (Drew Fustini)
    
     - Add MStar MSC313e timer support and the ssd20xd-based variant, as
       well as the DT bindings (Romain Perier)
    
     - Remove the incompatible compatible string for the rk3066 (Johan
       Jonker)
    
     - Fix dts_check warnings on the cadence ttc driver by adding the power
       domain bindings (Michal Simek)
    
    Link: https://lore.kernel.org/lkml/e093c706-c98d-29ee-0102-78b6d41c6164@linaro.org

commit 2712816c10b3c59909399f48cce2dc6d2180c7e9
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Wed Dec 15 15:58:35 2021 +0800

    serial: 8250_fintek: Fix garbled text for console
    
    commit 6c33ff728812aa18792afffaf2c9873b898e7512 upstream.
    
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    introduced support to use high baudrate with Fintek SuperIO UARTs. It'll
    change clocksources when the UART probed.
    
    But when user add kernel parameter "console=ttyS0,115200 console=tty0" to make
    the UART as console output, the console will output garbled text after the
    following kernel message.
    
    [    3.681188] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
    
    The issue is occurs in following step:
            probe_setup_port() -> fintek_8250_goto_highspeed()
    
    It change clocksource from 115200 to 921600 with wrong time, it should change
    clocksource in set_termios() not in probed. The following 3 patches are
    implemented change clocksource in fintek_8250_set_termios().
    
    Commit 58178914ae5b ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81216H")
    Commit 195638b6d44f ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81866")
    Commit 423d9118c624 ("serial: 8250_fintek: Add F81966 Support")
    
    Due to the high baud rate had implemented above 3 patches and the patch
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    is bugged, So this patch will remove it.
    
    Fixes: fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Link: https://lore.kernel.org/r/20211215075835.2072-1-hpeter+linux_kernel@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89362ec97ac018814bd21fe467a4166dc524e42d
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Wed Dec 15 15:58:35 2021 +0800

    serial: 8250_fintek: Fix garbled text for console
    
    commit 6c33ff728812aa18792afffaf2c9873b898e7512 upstream.
    
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    introduced support to use high baudrate with Fintek SuperIO UARTs. It'll
    change clocksources when the UART probed.
    
    But when user add kernel parameter "console=ttyS0,115200 console=tty0" to make
    the UART as console output, the console will output garbled text after the
    following kernel message.
    
    [    3.681188] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
    
    The issue is occurs in following step:
            probe_setup_port() -> fintek_8250_goto_highspeed()
    
    It change clocksource from 115200 to 921600 with wrong time, it should change
    clocksource in set_termios() not in probed. The following 3 patches are
    implemented change clocksource in fintek_8250_set_termios().
    
    Commit 58178914ae5b ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81216H")
    Commit 195638b6d44f ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81866")
    Commit 423d9118c624 ("serial: 8250_fintek: Add F81966 Support")
    
    Due to the high baud rate had implemented above 3 patches and the patch
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    is bugged, So this patch will remove it.
    
    Fixes: fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Link: https://lore.kernel.org/r/20211215075835.2072-1-hpeter+linux_kernel@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6471ebcd6f15ee9decf9d2f4acc49073215933e0
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Wed Dec 15 15:58:35 2021 +0800

    serial: 8250_fintek: Fix garbled text for console
    
    commit 6c33ff728812aa18792afffaf2c9873b898e7512 upstream.
    
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    introduced support to use high baudrate with Fintek SuperIO UARTs. It'll
    change clocksources when the UART probed.
    
    But when user add kernel parameter "console=ttyS0,115200 console=tty0" to make
    the UART as console output, the console will output garbled text after the
    following kernel message.
    
    [    3.681188] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
    
    The issue is occurs in following step:
            probe_setup_port() -> fintek_8250_goto_highspeed()
    
    It change clocksource from 115200 to 921600 with wrong time, it should change
    clocksource in set_termios() not in probed. The following 3 patches are
    implemented change clocksource in fintek_8250_set_termios().
    
    Commit 58178914ae5b ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81216H")
    Commit 195638b6d44f ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81866")
    Commit 423d9118c624 ("serial: 8250_fintek: Add F81966 Support")
    
    Due to the high baud rate had implemented above 3 patches and the patch
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    is bugged, So this patch will remove it.
    
    Fixes: fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Link: https://lore.kernel.org/r/20211215075835.2072-1-hpeter+linux_kernel@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce96a964682ac11a7f6823397dfdb5026d459f37
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Dec 20 17:50:04 2021 +0100

    arm64: exynos: Enable Exynos Multi-Core Timer driver
    
    Some ARM64 Exynos SoCs have MCT timer block, e.g. Exynos850 and
    Exynos5433. CLKSRC_EXYNOS_MCT option is not visible unless COMPILE_TEST
    is enabled. Select CLKSRC_EXYNOS_MCT option for ARM64 ARCH_EXYNOS like
    it's done in arch/arm/mach-exynos/Kconfig, to enable MCT timer support
    for ARM64 Exynos SoCs.
    
    Even though ARM architected timer is available on all ARM64 SoCs, and
    used for managing timer hardware and clock source events, MCT timer
    still can be used as a wakeup source, as stated in commitae460fd9164b
    ("clocksource/drivers/exynos_mct: Prioritise Arm arch timer on arm64").
    It's also nice to be able to test available MCT IP-core.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Sam Protsenko <semen.protsenko@linaro.org>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Tested-by: Chanwoo Choi <cw00.choi@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Link: https://lore.kernel.org/r/20211101193531.15078-3-semen.protsenko@linaro.org
    Link: https://lore.kernel.org/r/20211220165004.17005-2-krzysztof.kozlowski@canonical.com'
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit e64da64f410cf4f9697e25ab76cdfc679f4fb6db
Author: Romain Perier <romain.perier@gmail.com>
Date:   Fri Dec 17 20:57:23 2021 +0100

    clocksource/drivers/msc313e: Add support for ssd20xd-based platforms
    
    On SSD20X family SoCs the timers are connected to a 432MHz clock instead
    of 12MHz that all the previous chips used. There is no way to reduce or
    divide these clocks in the clktree yet as we do not know exactly where
    the 432MHz clock comes from but it is enabled at boot.
    
    The SSD20X timers have an input clock divider within the timer itself
    to configure the frequency. timer0 is preconfigured at power up to run
    at 12MHz so it is backwards compatible and doesn't need special handling
    right now. timer1 and timer2 run at 432Mhz at power up so are not
    backward compatible.
    
    This commit adds support for the input clock divider register and sets
    timer1 and timer2 to run at 48Mhz for clockevents.
    
    Signed-off-by: Romain Perier <romain.perier@gmail.com>
    Link: https://lore.kernel.org/r/20211217195727.8955-3-romain.perier@gmail.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5fc1f93f69989e72be7a84ded6ee867d6415f690
Author: Romain Perier <romain.perier@gmail.com>
Date:   Fri Dec 17 20:57:22 2021 +0100

    clocksource/drivers: Add MStar MSC313e timer support
    
    The MSC313e-compatible SoCs have 3 timer hardware blocks. All of these
    are free running 32-bit increasing counters and can generate interrupts.
    Based onto a maximum value register, each timer can either count from 0
    to max, one time then stop (which generates interrupts) or can count
    from 0 to max and then roll. This commit adds basic support for these
    timers, the first timer block being used as clocksource/sched_clock
    and delay, while the others will be used as clockevents.
    
    Signed-off-by: Romain Perier <romain.perier@gmail.com>
    Co-developed-by: Daniel Palmer <daniel@0x0f.com>
    Signed-off-by: Daniel Palmer <daniel@0x0f.com>
    Link: https://lore.kernel.org/r/20211217195727.8955-2-romain.perier@gmail.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6c33ff728812aa18792afffaf2c9873b898e7512
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Wed Dec 15 15:58:35 2021 +0800

    serial: 8250_fintek: Fix garbled text for console
    
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    introduced support to use high baudrate with Fintek SuperIO UARTs. It'll
    change clocksources when the UART probed.
    
    But when user add kernel parameter "console=ttyS0,115200 console=tty0" to make
    the UART as console output, the console will output garbled text after the
    following kernel message.
    
    [    3.681188] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
    
    The issue is occurs in following step:
            probe_setup_port() -> fintek_8250_goto_highspeed()
    
    It change clocksource from 115200 to 921600 with wrong time, it should change
    clocksource in set_termios() not in probed. The following 3 patches are
    implemented change clocksource in fintek_8250_set_termios().
    
    Commit 58178914ae5b ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81216H")
    Commit 195638b6d44f ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81866")
    Commit 423d9118c624 ("serial: 8250_fintek: Add F81966 Support")
    
    Due to the high baud rate had implemented above 3 patches and the patch
    Commit fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    is bugged, So this patch will remove it.
    
    Fixes: fab8a02b73eb ("serial: 8250_fintek: Enable high speed mode on Fintek F81866")
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Link: https://lore.kernel.org/r/20211215075835.2072-1-hpeter+linux_kernel@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5475fcf0a1c453b5efe6277db5f4c6b651b774c0
Author: Alexey Sheplyakov <asheplyakov@basealt.ru>
Date:   Tue Nov 9 19:34:02 2021 +0400

    clocksource/drivers/dw_apb_timer_of: Fix probe failure
    
    commit a663bd19114d79f0902e2490fc484e5a7419cdc2 upstream.
    
    The driver refuses to probe with -EINVAL since the commit 5d9814df0aec
    ("clocksource/drivers/dw_apb_timer_of: Add error handling if no clock
    available").
    
    Before the driver used to probe successfully if either "clock-freq" or
    "clock-frequency" properties has been specified in the device tree.
    
    That commit changed
    
    if (A && B)
            panic("No clock nor clock-frequency property");
    
    into
    
    if (!A && !B)
            return 0;
    
    That's a bug: the reverse of `A && B` is '!A || !B', not '!A && !B'
    
    Signed-off-by: Vadim V. Vlasov <vadim.vlasov@elpitech.ru>
    Signed-off-by: Alexey Sheplyakov <asheplyakov@basealt.ru>
    Fixes: 5d9814df0aec56a6 ("clocksource/drivers/dw_apb_timer_of: Add error handling if no clock available").
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Dinh Nguyen <dinguyen@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vadim V. Vlasov <vadim.vlasov@elpitech.ru>
    Acked-by: Dinh Nguyen <dinguyen@kernel.org>
    Link: https://lore.kernel.org/r/20211109153401.157491-1-asheplyakov@basealt.ru
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0642fb4ba68f7158f7a6d92190b3090cf0c7fac6
Author: Drew Fustini <dfustini@baylibre.com>
Date:   Tue Nov 23 11:25:24 2021 -0800

    clocksource/drivers/pistachio: Fix -Wunused-but-set-variable warning
    
    Variable 'overflow' set but not used, but this is the intended behavior.
    The hardware only updates the counter register after the overflow
    register read. However, the value of overflow is not actually needed.
    
    Link: https://lore.kernel.org/lkml/202111200402.afQsussU-lkp@intel.com/
    Reported-by: kernel test robot <lkp@intel.com>
    Suggested-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Drew Fustini <dfustini@baylibre.com>
    Link: https://lore.kernel.org/r/20211123192524.1038304-1-dfustini@baylibre.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0ed9e4ebcebcb36bd1186e68cf2f72b3e0bfbac6
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Dec 1 20:50:30 2021 +0800

    clocksource/drivers/timer-imx-sysctr: Set cpumask to cpu_possible_mask
    
    The syctr interrupt could set the affinity to any cores in the
    SoC. However, the default affinity is set to cpu 0.
    
    This timer will be used as broadcast timer on all the i.MX
    SoCs. Because DYNIRQ flag is set, the core time framework will runtime
    set the interrupt affinity to the cores that needs to wake up and the
    cpumask will runtime set to the core that will be wake up. So even the
    sysctr initialization use cpumask 0, there is no issue, the current
    patch is just use cpu_possible_mask to show the fact that the timer
    supports routed to all the cpu cores and nothing else.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20211201125030.2307746-2-peng.fan@oss.nxp.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c7fc51268bc09c5f012f5e35e872f4e319f95f80
Merge: 82d2ef454052 aa073d8b2a63
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Dec 12 10:07:50 2021 -0800

    Merge tag 'timers-urgent-2021-12-12' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "Two fixes for clock chip drivers:
    
       - A regression fix for the Designware APB timer. A recent change to
         the error checking code transformed the error condition wrongly so
         it turned into a fail if good condition.
    
       - Fix a clang build fail of the ARM architected timer driver"
    
    * tag 'timers-urgent-2021-12-12' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/arm_arch_timer: Force inlining of erratum_set_next_event_generic()
      clocksource/drivers/dw_apb_timer_of: Fix probe failure

commit 1edb7e74a7d3d64dc4e69e7059b4eea526d19a10
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Nov 17 11:35:32 2021 +0000

    clocksource/drivers/arm_arch_timer: Force inlining of erratum_set_next_event_generic()
    
    With some specific kernel configuration and Clang, the kernel fails
    to like with something like:
    
    ld.lld: error: undefined symbol: __compiletime_assert_200
    >>> referenced by arch_timer.h:156 (./arch/arm64/include/asm/arch_timer.h:156)
    >>>               clocksource/arm_arch_timer.o:(erratum_set_next_event_generic) in archive drivers/built-in.a
    
    ld.lld: error: undefined symbol: __compiletime_assert_197
    >>> referenced by arch_timer.h:133 (./arch/arm64/include/asm/arch_timer.h:133)
    >>>               clocksource/arm_arch_timer.o:(erratum_set_next_event_generic) in archive drivers/built-in.a
    make: *** [Makefile:1161: vmlinux] Error 1
    
    These are due to the BUILD_BUG() macros contained in the low-level
    accessors (arch_timer_reg_{write,read}_cp15) being emitted, as the
    access type wasn't known at compile time.
    
    Fix this by making erratum_set_next_event_generic() __force_inline,
    resulting in the 'access' parameter to be resolved at compile time,
    similarly to what is already done for set_next_event().
    
    Fixes: 4775bc63f880 ("Add build-time guards for unhandled register accesses")
    Reported-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Sami Tolvanen <samitolvanen@google.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Tested-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/r/20211117113532.3895208-1-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a663bd19114d79f0902e2490fc484e5a7419cdc2
Author: Alexey Sheplyakov <asheplyakov@basealt.ru>
Date:   Tue Nov 9 19:34:02 2021 +0400

    clocksource/drivers/dw_apb_timer_of: Fix probe failure
    
    The driver refuses to probe with -EINVAL since the commit 5d9814df0aec
    ("clocksource/drivers/dw_apb_timer_of: Add error handling if no clock
    available").
    
    Before the driver used to probe successfully if either "clock-freq" or
    "clock-frequency" properties has been specified in the device tree.
    
    That commit changed
    
    if (A && B)
            panic("No clock nor clock-frequency property");
    
    into
    
    if (!A && !B)
            return 0;
    
    That's a bug: the reverse of `A && B` is '!A || !B', not '!A && !B'
    
    Signed-off-by: Vadim V. Vlasov <vadim.vlasov@elpitech.ru>
    Signed-off-by: Alexey Sheplyakov <asheplyakov@basealt.ru>
    Fixes: 5d9814df0aec56a6 ("clocksource/drivers/dw_apb_timer_of: Add error handling if no clock available").
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Dinh Nguyen <dinguyen@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vadim V. Vlasov <vadim.vlasov@elpitech.ru>
    Acked-by: Dinh Nguyen <dinguyen@kernel.org>
    Link: https://lore.kernel.org/r/20211109153401.157491-1-asheplyakov@basealt.ru
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f5bd5fc9d478cdb94f89ccc74870dd81d1919b42
Author: Peng Fan <peng.fan@nxp.com>
Date:   Wed Dec 1 20:50:29 2021 +0800

    clocksource/drivers/imx-sysctr: Mark two variable with __ro_after_init
    
    The variables 'sys_ctr_base' and 'cmpcr' are not be updated after
    init, so mark them as __ro_after_init.
    
    Cc: Kees Cook <keescook@chromium.org>
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20211201125030.2307746-1-peng.fan@oss.nxp.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a2807f657976b943bf0eb81d026398d28aa89863
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Fri Nov 12 18:44:13 2021 +0000

    clocksource/drivers/renesas,ostm: Make RENESAS_OSTM symbol visible
    
    As RZ/G2L uses the ARM Architected Timer as system timer, enabling
    the OSTM is not mandatory.
    
    Make RENESAS_OSTM symbol visible, so that user can enable it
    when needed.
    
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20211112184413.4391-5-biju.das.jz@bp.renesas.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 3a3e9f23c2cae907677a236fa547610ca747e6fb
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Fri Nov 12 18:44:12 2021 +0000

    clocksource/drivers/renesas-ostm: Add RZ/G2L OSTM support
    
    RZ/G2L SoC has Generic Timer Module(a.k.a OSTM) which needs to
    deassert the reset line before accessing any registers.
    
    This patch adds an entry point for RZ/G2L so that we can deassert
    the reset line in probe callback.
    
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20211112184413.4391-4-biju.das.jz@bp.renesas.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 410fbda49cc9b2165e80b87880f164d9644b460d
Author: Will Deacon <will@kernel.org>
Date:   Wed Nov 3 16:48:04 2021 +0000

    clocksource/drivers/exynos_mct: Fix silly typo resulting in checkpatch warning
    
    Commit ae460fd9164b ("clocksource/drivers/exynos_mct: Prioritise Arm
    arch timer on arm64") changed the rating of the MCT clockevents device
    to be lower than the Arm architected timer and, in the process, replaced
    a semicolon with a comma thanks to a silly copy-paste error.
    
    Put the semicolon back so that the code looks more idiomatic and resolve
    the SUSPECT_COMMA_SEMICOLON warning from checkpatch at the same time.
    
    Cc: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20211103164804.30182-1-will@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6e0dd9cceac7d79bffd8332015c559f1f909640f
Author: Feng Tang <feng.tang@intel.com>
Date:   Wed Nov 17 10:37:51 2021 +0800

    x86/tsc: Disable clocksource watchdog for TSC on qualified platorms
    
    commit b50db7095fe002fa3e16605546cba66bf1b68a3e upstream.
    
    There are cases that the TSC clocksource is wrongly judged as unstable by
    the clocksource watchdog mechanism which tries to validate the TSC against
    HPET, PM_TIMER or jiffies. While there is hardly a general reliable way to
    check the validity of a watchdog, Thomas Gleixner proposed [1]:
    
    "I'm inclined to lift that requirement when the CPU has:
    
        1) X86_FEATURE_CONSTANT_TSC
        2) X86_FEATURE_NONSTOP_TSC
        3) X86_FEATURE_NONSTOP_TSC_S3
        4) X86_FEATURE_TSC_ADJUST
        5) At max. 4 sockets
    
     After two decades of horrors we're finally at a point where TSC seems
     to be halfway reliable and less abused by BIOS tinkerers. TSC_ADJUST
     was really key as we can now detect even small modifications reliably
     and the important point is that we can cure them as well (not pretty
     but better than all other options)."
    
    As feature #3 X86_FEATURE_NONSTOP_TSC_S3 only exists on several generations
    of Atom processorz, and is always coupled with X86_FEATURE_CONSTANT_TSC
    and X86_FEATURE_NONSTOP_TSC, skip checking it, and also be more defensive
    to use maximal 2 sockets.
    
    The check is done inside tsc_init() before registering 'tsc-early' and
    'tsc' clocksources, as there were cases that both of them had been
    wrongly judged as unreliable.
    
    For more background of tsc/watchdog, there is a good summary in [2]
    
    [tglx} Update vs. jiffies:
    
      On systems where the only remaining clocksource aside of TSC is jiffies
      there is no way to make this work because that creates a circular
      dependency. Jiffies accuracy depends on not missing a periodic timer
      interrupt, which is not guaranteed. That could be detected by TSC, but as
      TSC is not trusted this cannot be compensated. The consequence is a
      circulus vitiosus which results in shutting down TSC and falling back to
      the jiffies clocksource which is even more unreliable.
    
    [1]. https://lore.kernel.org/lkml/87eekfk8bd.fsf@nanos.tec.linutronix.de/
    [2]. https://lore.kernel.org/lkml/87a6pimt1f.ffs@nanos.tec.linutronix.de/
    
    [ tglx: Refine comment and amend changelog ]
    
    Fixes: 6e3cd95234dc ("x86/hpet: Use another crystalball to evaluate HPET usability")
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Paul E. McKenney" <paulmck@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211117023751.24190-2-feng.tang@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbeb9153ded9055f7e1746576e518e7e65ae9ba2
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 4 21:21:46 2021 +0100

    parisc: Mark cr16 CPU clocksource unstable on all SMP machines
    
    commit afdb4a5b1d340e4afffc65daa21cc71890d7d589 upstream.
    
    In commit c8c3735997a3 ("parisc: Enhance detection of synchronous cr16
    clocksources") I assumed that CPUs on the same physical core are syncronous.
    While booting up the kernel on two different C8000 machines, one with a
    dual-core PA8800 and one with a dual-core PA8900 CPU, this turned out to be
    wrong. The symptom was that I saw a jump in the internal clocks printed to the
    syslog and strange overall behaviour.  On machines which have 4 cores (2
    dual-cores) the problem isn't visible, because the current logic already marked
    the cr16 clocksource unstable in this case.
    
    This patch now marks the cr16 interval timers unstable if we have more than one
    CPU in the system, and it fixes this issue.
    
    Fixes: c8c3735997a3 ("parisc: Enhance detection of synchronous cr16 clocksources")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v5.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbe73dace94cb1a9e8657909b3551680a52e6bc0
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 4 21:21:46 2021 +0100

    parisc: Mark cr16 CPU clocksource unstable on all SMP machines
    
    commit afdb4a5b1d340e4afffc65daa21cc71890d7d589 upstream.
    
    In commit c8c3735997a3 ("parisc: Enhance detection of synchronous cr16
    clocksources") I assumed that CPUs on the same physical core are syncronous.
    While booting up the kernel on two different C8000 machines, one with a
    dual-core PA8800 and one with a dual-core PA8900 CPU, this turned out to be
    wrong. The symptom was that I saw a jump in the internal clocks printed to the
    syslog and strange overall behaviour.  On machines which have 4 cores (2
    dual-cores) the problem isn't visible, because the current logic already marked
    the cr16 clocksource unstable in this case.
    
    This patch now marks the cr16 interval timers unstable if we have more than one
    CPU in the system, and it fixes this issue.
    
    Fixes: c8c3735997a3 ("parisc: Enhance detection of synchronous cr16 clocksources")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v5.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3a519b5a58058c47e608802b7c01902a1ada0d9
Author: Feng Tang <feng.tang@intel.com>
Date:   Wed Nov 17 10:37:51 2021 +0800

    x86/tsc: Disable clocksource watchdog for TSC on qualified platorms
    
    commit b50db7095fe002fa3e16605546cba66bf1b68a3e upstream.
    
    There are cases that the TSC clocksource is wrongly judged as unstable by
    the clocksource watchdog mechanism which tries to validate the TSC against
    HPET, PM_TIMER or jiffies. While there is hardly a general reliable way to
    check the validity of a watchdog, Thomas Gleixner proposed [1]:
    
    "I'm inclined to lift that requirement when the CPU has:
    
        1) X86_FEATURE_CONSTANT_TSC
        2) X86_FEATURE_NONSTOP_TSC
        3) X86_FEATURE_NONSTOP_TSC_S3
        4) X86_FEATURE_TSC_ADJUST
        5) At max. 4 sockets
    
     After two decades of horrors we're finally at a point where TSC seems
     to be halfway reliable and less abused by BIOS tinkerers. TSC_ADJUST
     was really key as we can now detect even small modifications reliably
     and the important point is that we can cure them as well (not pretty
     but better than all other options)."
    
    As feature #3 X86_FEATURE_NONSTOP_TSC_S3 only exists on several generations
    of Atom processorz, and is always coupled with X86_FEATURE_CONSTANT_TSC
    and X86_FEATURE_NONSTOP_TSC, skip checking it, and also be more defensive
    to use maximal 2 sockets.
    
    The check is done inside tsc_init() before registering 'tsc-early' and
    'tsc' clocksources, as there were cases that both of them had been
    wrongly judged as unreliable.
    
    For more background of tsc/watchdog, there is a good summary in [2]
    
    [tglx} Update vs. jiffies:
    
      On systems where the only remaining clocksource aside of TSC is jiffies
      there is no way to make this work because that creates a circular
      dependency. Jiffies accuracy depends on not missing a periodic timer
      interrupt, which is not guaranteed. That could be detected by TSC, but as
      TSC is not trusted this cannot be compensated. The consequence is a
      circulus vitiosus which results in shutting down TSC and falling back to
      the jiffies clocksource which is even more unreliable.
    
    [1]. https://lore.kernel.org/lkml/87eekfk8bd.fsf@nanos.tec.linutronix.de/
    [2]. https://lore.kernel.org/lkml/87a6pimt1f.ffs@nanos.tec.linutronix.de/
    
    [ tglx: Refine comment and amend changelog ]
    
    Fixes: 6e3cd95234dc ("x86/hpet: Use another crystalball to evaluate HPET usability")
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Paul E. McKenney" <paulmck@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211117023751.24190-2-feng.tang@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cffd7583c92ed96ca9a4eef8a51b6921a99f32e2
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 4 21:21:46 2021 +0100

    parisc: Mark cr16 CPU clocksource unstable on all SMP machines
    
    commit afdb4a5b1d340e4afffc65daa21cc71890d7d589 upstream.
    
    In commit c8c3735997a3 ("parisc: Enhance detection of synchronous cr16
    clocksources") I assumed that CPUs on the same physical core are syncronous.
    While booting up the kernel on two different C8000 machines, one with a
    dual-core PA8800 and one with a dual-core PA8900 CPU, this turned out to be
    wrong. The symptom was that I saw a jump in the internal clocks printed to the
    syslog and strange overall behaviour.  On machines which have 4 cores (2
    dual-cores) the problem isn't visible, because the current logic already marked
    the cr16 clocksource unstable in this case.
    
    This patch now marks the cr16 interval timers unstable if we have more than one
    CPU in the system, and it fixes this issue.
    
    Fixes: c8c3735997a3 ("parisc: Enhance detection of synchronous cr16 clocksources")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v5.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72736a3b90ef8cdbd83d5a513f5cccd638052b26
Author: Feng Tang <feng.tang@intel.com>
Date:   Wed Nov 17 10:37:51 2021 +0800

    x86/tsc: Disable clocksource watchdog for TSC on qualified platorms
    
    commit b50db7095fe002fa3e16605546cba66bf1b68a3e upstream.
    
    There are cases that the TSC clocksource is wrongly judged as unstable by
    the clocksource watchdog mechanism which tries to validate the TSC against
    HPET, PM_TIMER or jiffies. While there is hardly a general reliable way to
    check the validity of a watchdog, Thomas Gleixner proposed [1]:
    
    "I'm inclined to lift that requirement when the CPU has:
    
        1) X86_FEATURE_CONSTANT_TSC
        2) X86_FEATURE_NONSTOP_TSC
        3) X86_FEATURE_NONSTOP_TSC_S3
        4) X86_FEATURE_TSC_ADJUST
        5) At max. 4 sockets
    
     After two decades of horrors we're finally at a point where TSC seems
     to be halfway reliable and less abused by BIOS tinkerers. TSC_ADJUST
     was really key as we can now detect even small modifications reliably
     and the important point is that we can cure them as well (not pretty
     but better than all other options)."
    
    As feature #3 X86_FEATURE_NONSTOP_TSC_S3 only exists on several generations
    of Atom processorz, and is always coupled with X86_FEATURE_CONSTANT_TSC
    and X86_FEATURE_NONSTOP_TSC, skip checking it, and also be more defensive
    to use maximal 2 sockets.
    
    The check is done inside tsc_init() before registering 'tsc-early' and
    'tsc' clocksources, as there were cases that both of them had been
    wrongly judged as unreliable.
    
    For more background of tsc/watchdog, there is a good summary in [2]
    
    [tglx} Update vs. jiffies:
    
      On systems where the only remaining clocksource aside of TSC is jiffies
      there is no way to make this work because that creates a circular
      dependency. Jiffies accuracy depends on not missing a periodic timer
      interrupt, which is not guaranteed. That could be detected by TSC, but as
      TSC is not trusted this cannot be compensated. The consequence is a
      circulus vitiosus which results in shutting down TSC and falling back to
      the jiffies clocksource which is even more unreliable.
    
    [1]. https://lore.kernel.org/lkml/87eekfk8bd.fsf@nanos.tec.linutronix.de/
    [2]. https://lore.kernel.org/lkml/87a6pimt1f.ffs@nanos.tec.linutronix.de/
    
    [ tglx: Refine comment and amend changelog ]
    
    Fixes: 6e3cd95234dc ("x86/hpet: Use another crystalball to evaluate HPET usability")
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Paul E. McKenney" <paulmck@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211117023751.24190-2-feng.tang@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffab6973e0547a5d6ee35f6b12a565c67dfdd6d2
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 4 21:21:46 2021 +0100

    parisc: Mark cr16 CPU clocksource unstable on all SMP machines
    
    commit afdb4a5b1d340e4afffc65daa21cc71890d7d589 upstream.
    
    In commit c8c3735997a3 ("parisc: Enhance detection of synchronous cr16
    clocksources") I assumed that CPUs on the same physical core are syncronous.
    While booting up the kernel on two different C8000 machines, one with a
    dual-core PA8800 and one with a dual-core PA8900 CPU, this turned out to be
    wrong. The symptom was that I saw a jump in the internal clocks printed to the
    syslog and strange overall behaviour.  On machines which have 4 cores (2
    dual-cores) the problem isn't visible, because the current logic already marked
    the cr16 clocksource unstable in this case.
    
    This patch now marks the cr16 interval timers unstable if we have more than one
    CPU in the system, and it fixes this issue.
    
    Fixes: c8c3735997a3 ("parisc: Enhance detection of synchronous cr16 clocksources")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v5.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b70e39bd68fe2f9795552f363f11c0c15db8cfa
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 4 21:21:46 2021 +0100

    parisc: Mark cr16 CPU clocksource unstable on all SMP machines
    
    commit afdb4a5b1d340e4afffc65daa21cc71890d7d589 upstream.
    
    In commit c8c3735997a3 ("parisc: Enhance detection of synchronous cr16
    clocksources") I assumed that CPUs on the same physical core are syncronous.
    While booting up the kernel on two different C8000 machines, one with a
    dual-core PA8800 and one with a dual-core PA8900 CPU, this turned out to be
    wrong. The symptom was that I saw a jump in the internal clocks printed to the
    syslog and strange overall behaviour.  On machines which have 4 cores (2
    dual-cores) the problem isn't visible, because the current logic already marked
    the cr16 clocksource unstable in this case.
    
    This patch now marks the cr16 interval timers unstable if we have more than one
    CPU in the system, and it fixes this issue.
    
    Fixes: c8c3735997a3 ("parisc: Enhance detection of synchronous cr16 clocksources")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v5.15+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4383cfa18c5bbc5b9b6a9e77adc12aec1c20b72d
Merge: 8cc7a1b2aca0 0fcfb00b28c0
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Tue Dec 7 11:29:41 2021 +0100

    Merge tag 'v5.16-rc4' into media_tree
    
    Linux 5.16-rc4
    
    * tag 'v5.16-rc4': (984 commits)
      Linux 5.16-rc4
      KVM: SVM: Do not terminate SEV-ES guests on GHCB validation failure
      KVM: SEV: Fall back to vmalloc for SEV-ES scratch area if necessary
      KVM: SEV: Return appropriate error codes if SEV-ES scratch setup fails
      parisc: Mark cr16 CPU clocksource unstable on all SMP machines
      parisc: Fix "make install" on newer debian releases
      sched/uclamp: Fix rq->uclamp_max not set on first enqueue
      preempt/dynamic: Fix setup_preempt_mode() return value
      cifs: avoid use of dstaddr as key for fscache client cookie
      cifs: add server conn_id to fscache client cookie
      cifs: wait for tcon resource_id before getting fscache super
      cifs: fix missed refcounting of ipc tcon
      x86/xen: Add xenpv_restore_regs_and_return_to_usermode()
      x86/entry: Use the correct fence macro after swapgs in kernel CR3
      fget: check that the fd still exists after getting a ref to it
      x86/entry: Add a fence for kernel entry SWAPGS in paranoid_entry()
      x86/sev: Fix SEV-ES INS/OUTS instructions for word, dword, and qword
      powercap: DTPM: Drop unused local variable from init_dtpm()
      io-wq: don't retry task_work creation failure on fatal conditions
      serial: 8250_bcm7271: UART errors after resuming from S2
      ...

commit 268ba095371cb28841bd9bd7f61c73290104a064
Merge: 944207047ca4 afdb4a5b1d34
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Dec 5 12:58:18 2021 -0800

    Merge tag 'for-5.16/parisc-6' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux
    
    Pull parisc fixes from Helge Deller:
     "Some bug and warning fixes:
    
       - Fix "make install" to use debians "installkernel" script which is
         now in /usr/sbin
    
       - Fix the bindeb-pkg make target by giving the correct KBUILD_IMAGE
         file name
    
       - Fix compiler warnings by annotating parisc agp init functions with
         __init
    
       - Fix timekeeping on SMP machines with dual-core CPUs
    
       - Enable some more config options in the 64-bit defconfig"
    
    * tag 'for-5.16/parisc-6' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux:
      parisc: Mark cr16 CPU clocksource unstable on all SMP machines
      parisc: Fix "make install" on newer debian releases
      parisc/agp: Annotate parisc agp init functions with __init
      parisc: Enable sata sil, audit and usb support on 64-bit defconfig
      parisc: Fix KBUILD_IMAGE for self-extracting kernel

commit f5d54a42d35cbfcdb00d706ae928548bf690676c
Merge: 90bf8d98b422 5c8f6a2e316e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Dec 5 08:43:35 2021 -0800

    Merge tag 'x86_urgent_for_v5.16_rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 fixes from Borislav Petkov:
    
     - Fix a couple of SWAPGS fencing issues in the x86 entry code
    
     - Use the proper operand types in __{get,put}_user() to prevent
       truncation in SEV-ES string io
    
     - Make sure the kernel mappings are present in trampoline_pgd in order
       to prevent any potential accesses to unmapped memory after switching
       to it
    
     - Fix a trivial list corruption in objtool's pv_ops validation
    
     - Disable the clocksource watchdog for TSC on platforms which claim
       that the TSC is constant, doesn't stop in sleep states, CPU has TSC
       adjust and the number of sockets of the platform are max 2, to
       prevent erroneous markings of the TSC as unstable.
    
     - Make sure TSC adjust is always checked not only when going idle
    
     - Prevent a stack leak by initializing struct _fpx_sw_bytes properly in
       the FPU code
    
     - Fix INTEL_FAM6_RAPTORLAKE define naming to adhere to the convention
    
    * tag 'x86_urgent_for_v5.16_rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/xen: Add xenpv_restore_regs_and_return_to_usermode()
      x86/entry: Use the correct fence macro after swapgs in kernel CR3
      x86/entry: Add a fence for kernel entry SWAPGS in paranoid_entry()
      x86/sev: Fix SEV-ES INS/OUTS instructions for word, dword, and qword
      x86/64/mm: Map all kernel memory into trampoline_pgd
      objtool: Fix pv_ops noinstr validation
      x86/tsc: Disable clocksource watchdog for TSC on qualified platorms
      x86/tsc: Add a timer to make sure TSC_adjust is always checked
      x86/fpu/signal: Initialize sw_bytes in save_xstate_epilog()
      x86/cpu: Drop spurious underscore from RAPTOR_LAKE #define

commit afdb4a5b1d340e4afffc65daa21cc71890d7d589
Author: Helge Deller <deller@gmx.de>
Date:   Sat Dec 4 21:21:46 2021 +0100

    parisc: Mark cr16 CPU clocksource unstable on all SMP machines
    
    In commit c8c3735997a3 ("parisc: Enhance detection of synchronous cr16
    clocksources") I assumed that CPUs on the same physical core are syncronous.
    While booting up the kernel on two different C8000 machines, one with a
    dual-core PA8800 and one with a dual-core PA8900 CPU, this turned out to be
    wrong. The symptom was that I saw a jump in the internal clocks printed to the
    syslog and strange overall behaviour.  On machines which have 4 cores (2
    dual-cores) the problem isn't visible, because the current logic already marked
    the cr16 clocksource unstable in this case.
    
    This patch now marks the cr16 interval timers unstable if we have more than one
    CPU in the system, and it fixes this issue.
    
    Fixes: c8c3735997a3 ("parisc: Enhance detection of synchronous cr16 clocksources")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v5.15+

commit b50db7095fe002fa3e16605546cba66bf1b68a3e
Author: Feng Tang <feng.tang@intel.com>
Date:   Wed Nov 17 10:37:51 2021 +0800

    x86/tsc: Disable clocksource watchdog for TSC on qualified platorms
    
    There are cases that the TSC clocksource is wrongly judged as unstable by
    the clocksource watchdog mechanism which tries to validate the TSC against
    HPET, PM_TIMER or jiffies. While there is hardly a general reliable way to
    check the validity of a watchdog, Thomas Gleixner proposed [1]:
    
    "I'm inclined to lift that requirement when the CPU has:
    
        1) X86_FEATURE_CONSTANT_TSC
        2) X86_FEATURE_NONSTOP_TSC
        3) X86_FEATURE_NONSTOP_TSC_S3
        4) X86_FEATURE_TSC_ADJUST
        5) At max. 4 sockets
    
     After two decades of horrors we're finally at a point where TSC seems
     to be halfway reliable and less abused by BIOS tinkerers. TSC_ADJUST
     was really key as we can now detect even small modifications reliably
     and the important point is that we can cure them as well (not pretty
     but better than all other options)."
    
    As feature #3 X86_FEATURE_NONSTOP_TSC_S3 only exists on several generations
    of Atom processorz, and is always coupled with X86_FEATURE_CONSTANT_TSC
    and X86_FEATURE_NONSTOP_TSC, skip checking it, and also be more defensive
    to use maximal 2 sockets.
    
    The check is done inside tsc_init() before registering 'tsc-early' and
    'tsc' clocksources, as there were cases that both of them had been
    wrongly judged as unreliable.
    
    For more background of tsc/watchdog, there is a good summary in [2]
    
    [tglx} Update vs. jiffies:
    
      On systems where the only remaining clocksource aside of TSC is jiffies
      there is no way to make this work because that creates a circular
      dependency. Jiffies accuracy depends on not missing a periodic timer
      interrupt, which is not guaranteed. That could be detected by TSC, but as
      TSC is not trusted this cannot be compensated. The consequence is a
      circulus vitiosus which results in shutting down TSC and falling back to
      the jiffies clocksource which is even more unreliable.
    
    [1]. https://lore.kernel.org/lkml/87eekfk8bd.fsf@nanos.tec.linutronix.de/
    [2]. https://lore.kernel.org/lkml/87a6pimt1f.ffs@nanos.tec.linutronix.de/
    
    [ tglx: Refine comment and amend changelog ]
    
    Fixes: 6e3cd95234dc ("x86/hpet: Use another crystalball to evaluate HPET usability")
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "Paul E. McKenney" <paulmck@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20211117023751.24190-2-feng.tang@intel.com

commit 1a5620671a1b6fd9cc08761677d050f1702f910c
Author: Waiman Long <longman@redhat.com>
Date:   Thu Nov 18 14:14:37 2021 -0500

    clocksource: Reduce the default clocksource_watchdog() retries to 2
    
    With the previous patch, there is an extra watchdog read in each retry.
    Now the total number of clocksource reads is increased to 4 per iteration.
    In order to avoid increasing the clock skew check overhead, the default
    maximum number of retries is reduced from 3 to 2 to maintain the same 12
    clocksource reads in the worst case.
    
    Suggested-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>

commit c86ff8c55b8ae68837b2fa59dc0c203907e9a15f
Author: Waiman Long <longman@redhat.com>
Date:   Thu Nov 18 14:14:36 2021 -0500

    clocksource: Avoid accidental unstable marking of clocksources
    
    Since commit db3a34e17433 ("clocksource: Retry clock read if long delays
    detected") and commit 2e27e793e280 ("clocksource: Reduce clocksource-skew
    threshold"), it is found that tsc clocksource fallback to hpet can
    sometimes happen on both Intel and AMD systems especially when they are
    running stressful benchmarking workloads. Of the 23 systems tested with
    a v5.14 kernel, 10 of them have switched to hpet clock source during
    the test run.
    
    The result of falling back to hpet is a drastic reduction of performance
    when running benchmarks. For example, the fio performance tests can
    drop up to 70% whereas the iperf3 performance can drop up to 80%.
    
    4 hpet fallbacks happened during bootup. They were:
    
      [    8.749399] clocksource: timekeeping watchdog on CPU13: hpet read-back delay of 263750ns, attempt 4, marking unstable
      [   12.044610] clocksource: timekeeping watchdog on CPU19: hpet read-back delay of 186166ns, attempt 4, marking unstable
      [   17.336941] clocksource: timekeeping watchdog on CPU28: hpet read-back delay of 182291ns, attempt 4, marking unstable
      [   17.518565] clocksource: timekeeping watchdog on CPU34: hpet read-back delay of 252196ns, attempt 4, marking unstable
    
    Other fallbacks happen when the systems were running stressful
    benchmarks. For example:
    
      [ 2685.867873] clocksource: timekeeping watchdog on CPU117: hpet read-back delay of 57269ns, attempt 4, marking unstable
      [46215.471228] clocksource: timekeeping watchdog on CPU8: hpet read-back delay of 61460ns, attempt 4, marking unstable
    
    Commit 2e27e793e280 ("clocksource: Reduce clocksource-skew threshold"),
    changed the skew margin from 100us to 50us. I think this is too small
    and can easily be exceeded when running some stressful workloads on a
    thermally stressed system.  So it is switched back to 100us.
    
    Even a maximum skew margin of 100us may be too small in for some systems
    when booting up especially if those systems are under thermal stress. To
    eliminate the case that the large skew is due to the system being too
    busy slowing down the reading of both the watchdog and the clocksource,
    an extra consecutive read of watchdog clock is being done to check this.
    
    The consecutive watchdog read delay is compared against
    WATCHDOG_MAX_SKEW/2. If the delay exceeds the limit, we assume that
    the system is just too busy. A warning will be printed to the console
    and the clock skew check is skipped for this round.
    
    Fixes: db3a34e17433 ("clocksource: Retry clock read if long delays detected")
    Fixes: 2e27e793e280 ("clocksource: Reduce clocksource-skew threshold")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>

commit 2eb813cbcbddafaeb3af08d49b1d7d01bd138184
Author: Kees Cook <keescook@chromium.org>
Date:   Sat Aug 28 10:57:47 2021 -0700

    clocksource/drivers/timer-ti-dm: Select TIMER_OF
    
    [ Upstream commit eda9a4f7af6ee47e9e131f20e4f8a41a97379293 ]
    
    When building OMAP_DM_TIMER without TIMER_OF, there are orphan sections
    due to the use of TIMER_OF_DELCARE() without CONFIG_TIMER_OF. Select
    CONFIG_TIMER_OF when enaling OMAP_DM_TIMER:
    
    arm-linux-gnueabi-ld: warning: orphan section `__timer_of_table' from `drivers/clocksource/timer-ti-dm-systimer.o' being placed in section `__timer_of_table'
    
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/lkml/202108282255.tkdt4ani-lkp@intel.com/
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: linux-omap@vger.kernel.org
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210828175747.3777891-1-keescook@chromium.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5995fcb75eb8b94cd23bd31003941de0eb8b12e
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Nov 19 16:43:31 2021 -0800

    hexagon: clean up timer-regs.h
    
    commit 51f2ec593441d3d1ebc0d478fac3ea329c7c93ac upstream.
    
    When building allmodconfig, there is a warning about TIMER_ENABLE being
    redefined:
    
      drivers/clocksource/timer-oxnas-rps.c:39:9: error: 'TIMER_ENABLE' macro redefined [-Werror,-Wmacro-redefined]
      #define TIMER_ENABLE            BIT(7)
              ^
      arch/hexagon/include/asm/timer-regs.h:13:9: note: previous definition is here
      #define TIMER_ENABLE            0
               ^
      1 error generated.
    
    The values in this header are only used in one file each, if they are
    used at all.  Remove the header and sink all of the constants into their
    respective files.
    
    TCX0_CLK_RATE is only used in arch/hexagon/include/asm/timex.h
    
    TIMER_ENABLE, RTOS_TIMER_INT, RTOS_TIMER_REGS_ADDR are only used in
    arch/hexagon/kernel/time.c.
    
    SLEEP_CLK_RATE and TIMER_CLR_ON_MATCH have both been unused since the
    file's introduction in commit 71e4a47f32f4 ("Hexagon: Add time and timer
    functions").
    
    TIMER_ENABLE is redefined as BIT(0) so the shift is moved into the
    definition, rather than its use.
    
    Link: https://lkml.kernel.org/r/20211115174250.1994179-3-nathan@kernel.org
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Brian Cain <bcain@codeaurora.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 660859f0158c55f9ad4d4d58ea230c2535b9c0fe
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Nov 19 16:43:31 2021 -0800

    hexagon: clean up timer-regs.h
    
    commit 51f2ec593441d3d1ebc0d478fac3ea329c7c93ac upstream.
    
    When building allmodconfig, there is a warning about TIMER_ENABLE being
    redefined:
    
      drivers/clocksource/timer-oxnas-rps.c:39:9: error: 'TIMER_ENABLE' macro redefined [-Werror,-Wmacro-redefined]
      #define TIMER_ENABLE            BIT(7)
              ^
      arch/hexagon/include/asm/timer-regs.h:13:9: note: previous definition is here
      #define TIMER_ENABLE            0
               ^
      1 error generated.
    
    The values in this header are only used in one file each, if they are
    used at all.  Remove the header and sink all of the constants into their
    respective files.
    
    TCX0_CLK_RATE is only used in arch/hexagon/include/asm/timex.h
    
    TIMER_ENABLE, RTOS_TIMER_INT, RTOS_TIMER_REGS_ADDR are only used in
    arch/hexagon/kernel/time.c.
    
    SLEEP_CLK_RATE and TIMER_CLR_ON_MATCH have both been unused since the
    file's introduction in commit 71e4a47f32f4 ("Hexagon: Add time and timer
    functions").
    
    TIMER_ENABLE is redefined as BIT(0) so the shift is moved into the
    definition, rather than its use.
    
    Link: https://lkml.kernel.org/r/20211115174250.1994179-3-nathan@kernel.org
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Brian Cain <bcain@codeaurora.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51f2ec593441d3d1ebc0d478fac3ea329c7c93ac
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Fri Nov 19 16:43:31 2021 -0800

    hexagon: clean up timer-regs.h
    
    When building allmodconfig, there is a warning about TIMER_ENABLE being
    redefined:
    
      drivers/clocksource/timer-oxnas-rps.c:39:9: error: 'TIMER_ENABLE' macro redefined [-Werror,-Wmacro-redefined]
      #define TIMER_ENABLE            BIT(7)
              ^
      arch/hexagon/include/asm/timer-regs.h:13:9: note: previous definition is here
      #define TIMER_ENABLE            0
               ^
      1 error generated.
    
    The values in this header are only used in one file each, if they are
    used at all.  Remove the header and sink all of the constants into their
    respective files.
    
    TCX0_CLK_RATE is only used in arch/hexagon/include/asm/timex.h
    
    TIMER_ENABLE, RTOS_TIMER_INT, RTOS_TIMER_REGS_ADDR are only used in
    arch/hexagon/kernel/time.c.
    
    SLEEP_CLK_RATE and TIMER_CLR_ON_MATCH have both been unused since the
    file's introduction in commit 71e4a47f32f4 ("Hexagon: Add time and timer
    functions").
    
    TIMER_ENABLE is redefined as BIT(0) so the shift is moved into the
    definition, rather than its use.
    
    Link: https://lkml.kernel.org/r/20211115174250.1994179-3-nathan@kernel.org
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Brian Cain <bcain@codeaurora.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 3dd4b42d95a0692c85ebd5da635bae62fa6c9d83
Author: Kees Cook <keescook@chromium.org>
Date:   Sat Aug 28 10:57:47 2021 -0700

    clocksource/drivers/timer-ti-dm: Select TIMER_OF
    
    [ Upstream commit eda9a4f7af6ee47e9e131f20e4f8a41a97379293 ]
    
    When building OMAP_DM_TIMER without TIMER_OF, there are orphan sections
    due to the use of TIMER_OF_DELCARE() without CONFIG_TIMER_OF. Select
    CONFIG_TIMER_OF when enaling OMAP_DM_TIMER:
    
    arm-linux-gnueabi-ld: warning: orphan section `__timer_of_table' from `drivers/clocksource/timer-ti-dm-systimer.o' being placed in section `__timer_of_table'
    
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/lkml/202108282255.tkdt4ani-lkp@intel.com/
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: linux-omap@vger.kernel.org
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210828175747.3777891-1-keescook@chromium.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e2f97df6a0b489dd6e35d62082cdc3dc08d3ca3
Author: Kees Cook <keescook@chromium.org>
Date:   Sat Aug 28 10:57:47 2021 -0700

    clocksource/drivers/timer-ti-dm: Select TIMER_OF
    
    [ Upstream commit eda9a4f7af6ee47e9e131f20e4f8a41a97379293 ]
    
    When building OMAP_DM_TIMER without TIMER_OF, there are orphan sections
    due to the use of TIMER_OF_DELCARE() without CONFIG_TIMER_OF. Select
    CONFIG_TIMER_OF when enaling OMAP_DM_TIMER:
    
    arm-linux-gnueabi-ld: warning: orphan section `__timer_of_table' from `drivers/clocksource/timer-ti-dm-systimer.o' being placed in section `__timer_of_table'
    
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/lkml/202108282255.tkdt4ani-lkp@intel.com/
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: linux-omap@vger.kernel.org
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210828175747.3777891-1-keescook@chromium.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb82db5a1cb8031c4e439df41e0ebafae4ed5149
Author: Kees Cook <keescook@chromium.org>
Date:   Sat Aug 28 10:57:47 2021 -0700

    clocksource/drivers/timer-ti-dm: Select TIMER_OF
    
    [ Upstream commit eda9a4f7af6ee47e9e131f20e4f8a41a97379293 ]
    
    When building OMAP_DM_TIMER without TIMER_OF, there are orphan sections
    due to the use of TIMER_OF_DELCARE() without CONFIG_TIMER_OF. Select
    CONFIG_TIMER_OF when enaling OMAP_DM_TIMER:
    
    arm-linux-gnueabi-ld: warning: orphan section `__timer_of_table' from `drivers/clocksource/timer-ti-dm-systimer.o' being placed in section `__timer_of_table'
    
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/lkml/202108282255.tkdt4ani-lkp@intel.com/
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: linux-omap@vger.kernel.org
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210828175747.3777891-1-keescook@chromium.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc18f080629747bdec9139ed73b101ba55afdb49
Author: Kees Cook <keescook@chromium.org>
Date:   Sat Aug 28 10:57:47 2021 -0700

    clocksource/drivers/timer-ti-dm: Select TIMER_OF
    
    [ Upstream commit eda9a4f7af6ee47e9e131f20e4f8a41a97379293 ]
    
    When building OMAP_DM_TIMER without TIMER_OF, there are orphan sections
    due to the use of TIMER_OF_DELCARE() without CONFIG_TIMER_OF. Select
    CONFIG_TIMER_OF when enaling OMAP_DM_TIMER:
    
    arm-linux-gnueabi-ld: warning: orphan section `__timer_of_table' from `drivers/clocksource/timer-ti-dm-systimer.o' being placed in section `__timer_of_table'
    
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/lkml/202108282255.tkdt4ani-lkp@intel.com/
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: linux-omap@vger.kernel.org
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210828175747.3777891-1-keescook@chromium.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cd925a8823d16de5614d3f0aabea9948747accd
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Nov 1 21:35:30 2021 +0200

    clocksource/drivers/exynos_mct: Refactor resources allocation
    
    Move interrupts allocation from exynos4_timer_resources() into separate
    function together with the interrupt number parsing code from
    mct_init_dt(), so the code for managing interrupts is kept together.
    While touching exynos4_timer_resources() function, move of_iomap() to it.
    No functional changes.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Tested-by: Chanwoo Choi <cw00.choi@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sam Protsenko <semen.protsenko@linaro.org>
    Link: https://lore.kernel.org/r/20211101193531.15078-2-semen.protsenko@linaro.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 57a315cd7198907326e691cc909df2beebc2420d
Merge: 43aa0a195f06 a8da61cee95e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Nov 1 13:44:55 2021 -0700

    Merge tag 'timers-core-2021-10-31' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Time, timers and timekeeping updates:
    
       - No core updates
    
       - No new clocksource/event driver
    
       - A large rework of the ARM architected timer driver to prepare for
         the support of the upcoming ARMv8.6 support
    
       - Fix Kconfig options for Exynos MCT, Samsung PWM and TI DM timers
    
       - Address a namespace collison in the ARC sp804 timer driver"
    
    * tag 'timers-core-2021-10-31' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/timer-ti-dm: Select TIMER_OF
      clocksource/drivers/exynosy: Depend on sub-architecture for Exynos MCT and Samsung PWM
      clocksource/drivers/arch_arm_timer: Move workaround synchronisation around
      clocksource/drivers/arm_arch_timer: Fix masking for high freq counters
      clocksource/drivers/arm_arch_timer: Drop unnecessary ISB on CVAL programming
      clocksource/drivers/arm_arch_timer: Remove any trace of the TVAL programming interface
      clocksource/drivers/arm_arch_timer: Work around broken CVAL implementations
      clocksource/drivers/arm_arch_timer: Advertise 56bit timer to the core code
      clocksource/drivers/arm_arch_timer: Move MMIO timer programming over to CVAL
      clocksource/drivers/arm_arch_timer: Fix MMIO base address vs callback ordering issue
      clocksource/drivers/arm_arch_timer: Move drop _tval from erratum function names
      clocksource/drivers/arm_arch_timer: Move system register timer programming over to CVAL
      clocksource/drivers/arm_arch_timer: Extend write side of timer register accessors to u64
      clocksource/drivers/arm_arch_timer: Drop CNT*_TVAL read accessors
      clocksource/arm_arch_timer: Add build-time guards for unhandled register accesses
      clocksource/drivers/arc_timer: Eliminate redefined macro error

commit a69483eeeffff016c8548c4388e23679be20f17f
Merge: 5816b3e6577e fee29f008aa3
Author: Will Deacon <will@kernel.org>
Date:   Fri Oct 29 12:20:21 2021 +0100

    Merge branch 'for-next/8.6-timers' into for-next/core
    
    * for-next/8.6-timers:
      arm64: Add HWCAP for self-synchronising virtual counter
      arm64: Add handling of CNTVCTSS traps
      arm64: Add CNT{P,V}CTSS_EL0 alternatives to cnt{p,v}ct_el0
      arm64: Add a capability for FEAT_ECV
      clocksource/drivers/arch_arm_timer: Move workaround synchronisation around
      clocksource/drivers/arm_arch_timer: Fix masking for high freq counters
      clocksource/drivers/arm_arch_timer: Drop unnecessary ISB on CVAL programming
      clocksource/drivers/arm_arch_timer: Remove any trace of the TVAL programming interface
      clocksource/drivers/arm_arch_timer: Work around broken CVAL implementations
      clocksource/drivers/arm_arch_timer: Advertise 56bit timer to the core code
      clocksource/drivers/arm_arch_timer: Move MMIO timer programming over to CVAL
      clocksource/drivers/arm_arch_timer: Fix MMIO base address vs callback ordering issue
      clocksource/drivers/arm_arch_timer: Move drop _tval from erratum function names
      clocksource/drivers/arm_arch_timer: Move system register timer programming over to CVAL
      clocksource/drivers/arm_arch_timer: Extend write side of timer register accessors to u64
      clocksource/drivers/arm_arch_timer: Drop CNT*_TVAL read accessors
      clocksource/arm_arch_timer: Add build-time guards for unhandled register accesses

commit 2ec492731a1ff651d89c909ccce01fd69346d1f0
Merge: 2d3de197a818 f3c0366411d6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Oct 26 17:21:28 2021 +0200

    Merge tag 'at91-dt-5.16-2' of git://git.kernel.org/pub/scm/linux/kernel/git/at91/linux into arm/dt
    
    AT91 DT #2 for 5.16:
    
    - Add DT nodes for TCB and RTC blocks on SAMA7G5
    - Add TCB0 for clocksource and clockevent functionality fallback only in
      case PIT64B will fail to probe and as a testbed for this feature on
      the Evaluation Kit.
    
    * tag 'at91-dt-5.16-2' of git://git.kernel.org/pub/scm/linux/kernel/git/at91/linux:
      ARM: dts: at91: sama7g5-ek: use blocks 0 and 1 of TCB0 as cs and ce
      ARM: dts: at91: sama7g5: add tcb nodes
      ARM: dts: at91: sama7g5: add rtc node
    
    Link: https://lore.kernel.org/r/20211025163428.26285-1-nicolas.ferre@microchip.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit a8da61cee95e627ed3d4274861428013aa9604ea
Merge: d25a025201ed eda9a4f7af6e
Author: Borislav Petkov <bp@suse.de>
Date:   Sun Oct 24 17:14:23 2021 +0200

    Merge tag 'timers-v5.16-rc1' into timers/core
    
    Pull timers update for v5.16 from Daniel Lezcano:
    
    - Fix redefined macro in the arc timer ()
    
    - Big cleanup for ARM arch timer clocksource in order to set the scene
      for ARMv8.6 and provide support for higher frequencies with longer
      roll up (Marc Zyngier)
    
    - Make arch dependant the Exynos MCT and Samsung PWM timers (Krzysztof
      Kozlowski)
    
    - Select the TIMER_OF option for the timer TI DM (Kees Cook)
    
    Link: https://lore.kernel.org/r/65693aaf-ab94-c9bb-a97b-a2bb77033a54@linaro.org
    Signed-off-by: Borislav Petkov <bp@suse.de>

commit eda9a4f7af6ee47e9e131f20e4f8a41a97379293
Author: Kees Cook <keescook@chromium.org>
Date:   Sat Aug 28 10:57:47 2021 -0700

    clocksource/drivers/timer-ti-dm: Select TIMER_OF
    
    When building OMAP_DM_TIMER without TIMER_OF, there are orphan sections
    due to the use of TIMER_OF_DELCARE() without CONFIG_TIMER_OF. Select
    CONFIG_TIMER_OF when enaling OMAP_DM_TIMER:
    
    arm-linux-gnueabi-ld: warning: orphan section `__timer_of_table' from `drivers/clocksource/timer-ti-dm-systimer.o' being placed in section `__timer_of_table'
    
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/lkml/202108282255.tkdt4ani-lkp@intel.com/
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: linux-omap@vger.kernel.org
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210828175747.3777891-1-keescook@chromium.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f3c0366411d6893360be21a7544595bf275bc9b2
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Wed Oct 20 12:46:56 2021 +0300

    ARM: dts: at91: sama7g5-ek: use blocks 0 and 1 of TCB0 as cs and ce
    
    Use blocks 0 and 1 of TCB0 for clocksource and clockevent functionality.
    PIT64B is already enabled on SAMA7G5 targets for this but TCB0 will be
    used as a fallback only in case PIT64B will fail to probe.
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Link: https://lore.kernel.org/r/20211020094656.3343242-4-claudiu.beznea@microchip.com

commit 8602a80bb85e3840a7bbafca069e25735ba237b3
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Thu Oct 21 08:35:00 2021 +0200

    clocksource/drivers/exynosy: Depend on sub-architecture for Exynos MCT and Samsung PWM
    
    The Exynos MCT and Samsung PWM Timer clocksource drivers are not usable
    on anything else than Samsung Exynos, S3C or S5P SoC platforms.  These
    are integral parts of a SoC.  Even though the drivers are not user
    selectable, still document the hardware architecture explicitly with
    depends on ARCH_EXYNOS and others.  This also serves a purpose of
    documenting use-case, if someone ever wonders whether to select the
    driver for his platform.  No functional change, because drivers are
    already selected by the platform described in depends. We follow similar
    approach also for other SoC-specific drivers.
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20211021063500.39314-1-krzysztof.kozlowski@canonical.com
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0e277fb807709753ae9399b713cc8732bf3eecaa
Merge: 5816b3e6577e db26f8f2da92
Author: Will Deacon <will@kernel.org>
Date:   Tue Oct 19 10:52:11 2021 +0100

    Merge branch 'timers/drivers/armv8.6_arch_timer' of https://git.linaro.org/people/daniel.lezcano/linux into for-next/8.6-timers
    
    Pull Arm architected timer driver rework from Marc (via Daniel) so that
    we can add the Armv8.6 support on top.
    
    Link: https://lore.kernel.org/r/d0c55386-2f7f-a940-45bb-d80ae5e0f378@linaro.org
    
    * 'timers/drivers/armv8.6_arch_timer' of https://git.linaro.org/people/daniel.lezcano/linux:
      clocksource/drivers/arch_arm_timer: Move workaround synchronisation around
      clocksource/drivers/arm_arch_timer: Fix masking for high freq counters
      clocksource/drivers/arm_arch_timer: Drop unnecessary ISB on CVAL programming
      clocksource/drivers/arm_arch_timer: Remove any trace of the TVAL programming interface
      clocksource/drivers/arm_arch_timer: Work around broken CVAL implementations
      clocksource/drivers/arm_arch_timer: Advertise 56bit timer to the core code
      clocksource/drivers/arm_arch_timer: Move MMIO timer programming over to CVAL
      clocksource/drivers/arm_arch_timer: Fix MMIO base address vs callback ordering issue
      clocksource/drivers/arm_arch_timer: Move drop _tval from erratum function names
      clocksource/drivers/arm_arch_timer: Move system register timer programming over to CVAL
      clocksource/drivers/arm_arch_timer: Extend write side of timer register accessors to u64
      clocksource/drivers/arm_arch_timer: Drop CNT*_TVAL read accessors
      clocksource/arm_arch_timer: Add build-time guards for unhandled register accesses

commit db26f8f2da92471e9f7f71ec78d6fa455cd9c821
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:21 2021 +0100

    clocksource/drivers/arch_arm_timer: Move workaround synchronisation around
    
    We currently handle synchronisation when workarounds are enabled
    by having an ISB in the __arch_counter_get_cnt?ct_stable() helpers.
    
    While this works, this prevents us from relaxing this synchronisation.
    
    Instead, move it closer to the point where the synchronisation is
    actually needed. Further patches will subsequently relax this.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-14-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c1153d52c4140424a5e31a5916fca3edd91fe13a
Author: Oliver Upton <oupton@google.com>
Date:   Sun Oct 17 13:42:20 2021 +0100

    clocksource/drivers/arm_arch_timer: Fix masking for high freq counters
    
    Unfortunately, the architecture provides no means to determine the bit
    width of the system counter. However, we do know the following from the
    specification:
    
     - the system counter is at least 56 bits wide
     - Roll-over time of not less than 40 years
    
    To date, the arch timer driver has depended on the first property,
    assuming any system counter to be 56 bits wide and masking off the rest.
    However, combining a narrow clocksource mask with a high frequency
    counter could result in prematurely wrapping the system counter by a
    significant margin. For example, a 56 bit wide, 1GHz system counter
    would wrap in a mere 2.28 years!
    
    This is a problem for two reasons: v8.6+ implementations are required to
    provide a 64 bit, 1GHz system counter. Furthermore, before v8.6,
    implementers may select a counter frequency of their choosing.
    
    Fix the issue by deriving a valid clock mask based on the second
    property from above. Set the floor at 56 bits, since we know no system
    counter is narrower than that.
    
    [maz: fixed width computation not to lose the last bit, added
          max delta generation for the timer]
    
    Suggested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Oliver Upton <oupton@google.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20210807191428.3488948-1-oupton@google.com
    Link: https://lore.kernel.org/r/20211017124225.3018098-13-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ec8f7f3342c88780d682cc2464daf0fe43259c4f
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:19 2021 +0100

    clocksource/drivers/arm_arch_timer: Drop unnecessary ISB on CVAL programming
    
    Switching from TVAL to CVAL has a small drawback: we need an ISB
    before reading the counter. We cannot get rid of it, but we can
    instead remove the one that comes just after writing to CVAL.
    
    This reduces the number of ISBs from 3 to 2 when programming
    the timer.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-12-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 41f8d02a6a558f80775bf61fe6312a14eeabbca0
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:18 2021 +0100

    clocksource/drivers/arm_arch_timer: Remove any trace of the TVAL programming interface
    
    TVAL usage is now long gone, get rid of the leftovers.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-11-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 012f188504528b8cb32f441ac3bd9ea2eba39c9e
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:17 2021 +0100

    clocksource/drivers/arm_arch_timer: Work around broken CVAL implementations
    
    The Applied Micro XGene-1 SoC has a busted implementation of the
    CVAL register: it looks like it is based on TVAL instead of the
    other way around. The net effect of this implementation blunder
    is that the maximum deadline you can program in the timer is
    32bit wide.
    
    Use a MIDR check to notice the broken CPU, and reduce the width
    of the timer to 32bit.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-10-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 30aa08da35e07a51a81d489517a3f6fb5164b09c
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:16 2021 +0100

    clocksource/drivers/arm_arch_timer: Advertise 56bit timer to the core code
    
    Proudly tell the code code that we have a timer able to handle
    56 bits deltas.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-9-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8b82c4f883a7b22660464c0232fbdb7a6deb3061
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:15 2021 +0100

    clocksource/drivers/arm_arch_timer: Move MMIO timer programming over to CVAL
    
    Similarily to the sysreg-based timer, move the MMIO over to using
    the CVAL registers instead of TVAL. Note that there is no warranty
    that the 64bit MMIO access will be atomic, but the timer is always
    disabled at the point where we program CVAL.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-8-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 72f47a3f0ea4cda4ca5d90c0d6043f697b9b0647
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:14 2021 +0100

    clocksource/drivers/arm_arch_timer: Fix MMIO base address vs callback ordering issue
    
    The MMIO timer base address gets published after we have registered
    the callbacks and the interrupt handler, which is... a bit dangerous.
    
    Fix this by moving the base address publication to the point where
    we register the timer, and expose a pointer to the timer structure
    itself rather than a naked value.
    
    Reviewed-by: Oliver Upton <oupton@google.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-7-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ac9ef4f24cb2313fb047f2097396204b033799b8
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:13 2021 +0100

    clocksource/drivers/arm_arch_timer: Move drop _tval from erratum function names
    
    The '_tval' name in the erratum handling function names doesn't
    make much sense anymore (and they were using CVAL the first place).
    
    Drop the _tval tag.
    
    Reviewed-by: Oliver Upton <oupton@google.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-6-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a38b71b0833eb2fabd2b1fa37d665c0a88b8b7e4
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:12 2021 +0100

    clocksource/drivers/arm_arch_timer: Move system register timer programming over to CVAL
    
    In order to cope better with high frequency counters, move the
    programming of the timers from the countdown timer (TVAL) over
    to the comparator (CVAL).
    
    The programming model is slightly different, as we now need to
    read the current counter value to have an absolute deadline
    instead of a relative one.
    
    There is a small overhead to this change, which we will address
    in the following patches.
    
    Reviewed-by: Oliver Upton <oupton@google.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-5-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 1e8d929231cf7b397101c5e6aaaa3d9bc9832f10
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:11 2021 +0100

    clocksource/drivers/arm_arch_timer: Extend write side of timer register accessors to u64
    
    The various accessors for the timer sysreg and MMIO registers are
    currently hardwired to 32bit. However, we are about to introduce
    the use of the CVAL registers, which require a 64bit access.
    
    Upgrade the write side of the accessors to take a 64bit value
    (the read side is left untouched as we don't plan to ever read
    back any of these registers).
    
    No functional change expected.
    
    Reviewed-by: Oliver Upton <oupton@google.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-4-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d72689988d67d56aebf7afb7f609373ea6b548db
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:10 2021 +0100

    clocksource/drivers/arm_arch_timer: Drop CNT*_TVAL read accessors
    
    The arch timer driver never reads the various TVAL registers, only
    writes to them. It is thus pointless to provide accessors
    for them and to implement errata workarounds.
    
    Drop these read-side accessors, and add a couple of BUG() statements
    for the time being. These statements will be removed further down
    the line.
    
    Reviewed-by: Oliver Upton <oupton@google.com>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-3-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4775bc63f880001ee4fbd6456b12ab04674149e3
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Oct 17 13:42:09 2021 +0100

    clocksource/arm_arch_timer: Add build-time guards for unhandled register accesses
    
    As we are about to change the registers that are used by the driver,
    start by adding build-time checks to ensure that we always handle
    all registers and access modes.
    
    Suggested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211017124225.3018098-2-maz@kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 58100c34f7827ddf64309c5a7c8c4e5bd6415b95
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Sep 23 19:08:25 2021 -0700

    clocksource/drivers/arc_timer: Eliminate redefined macro error
    
    In drivers/clocksource/, 3 drivers use "TIMER_CTRL_IE" with 3 different
    values.  Two of them (mps2-timer.c and timer-sp804.c/timer-sp.h) are
    localized and left unmodifed.
    
    One of them uses a shared header file (<soc/arc/timers.h>), which is
    what is causing the "redefined" warnings, so change the macro name in
    that driver only. Also change the TIMER_CTRL_NH macro name.
    Both macro names are prefixed with "ARC_" to reduce the likelihood
    of future name collisions.
    
    In file included from ../drivers/clocksource/timer-sp804.c:24:
    ../drivers/clocksource/timer-sp.h:25: error: "TIMER_CTRL_IE" redefined [-Werror]
       25 | #define TIMER_CTRL_IE           (1 << 5)        /*   VR */
    ../include/soc/arc/timers.h:20: note: this is the location of the previous definition
       20 | #define TIMER_CTRL_IE           (1 << 0) /* Interrupt when Count reaches limit */
    
    Fixes: b26c2e3823ba ("ARC: breakout timer include code into separate header")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Vineet Gupta <vgupta@kernel.org>
    Cc: linux-snps-arc@lists.infradead.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Shahab Vahedi <Shahab.Vahedi@synopsys.com>
    Acked-by: Vineet Gupta <vgupta@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210924020825.20317-1-rdunlap@infradead.org

commit 8bb51f7f627b3bc4247c95f3a98b09ed821a0728
Author: Phong Hoang <phong.hoang.wz@renesas.com>
Date:   Thu Apr 22 14:34:43 2021 +0200

    clocksource/drivers/sh_cmt: Fix wrong setting if don't request IRQ for clock source channel
    
    [ Upstream commit be83c3b6e7b8ff22f72827a613bf6f3aa5afadbb ]
    
    If CMT instance has at least two channels, one channel will be used
    as a clock source and another one used as a clock event device.
    In that case, IRQ is not requested for clock source channel so
    sh_cmt_clock_event_program_verify() might work incorrectly.
    Besides, when a channel is only used for clock source, don't need to
    re-set the next match_value since it should be maximum timeout as
    it still is.
    
    On the other hand, due to no IRQ, total_cycles is not counted up
    when reaches compare match time (timer counter resets to zero),
    so sh_cmt_clocksource_read() returns unexpected value.
    Therefore, use 64-bit clocksoure's mask for 32-bit or 16-bit variants
    will also lead to wrong delta calculation. Hence, this mask should
    correspond to timer counter width, and above function just returns
    the raw value of timer counter register.
    
    Fixes: bfa76bb12f23 ("clocksource: sh_cmt: Request IRQ for clock event device only")
    Fixes: 37e7742c55ba ("clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines")
    Signed-off-by: Phong Hoang <phong.hoang.wz@renesas.com>
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210422123443.73334-1-niklas.soderlund+renesas@ragnatech.se
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b092e08d77c9eb1e70b926c5376d6cf44b1382f
Author: Phong Hoang <phong.hoang.wz@renesas.com>
Date:   Thu Apr 22 14:34:43 2021 +0200

    clocksource/drivers/sh_cmt: Fix wrong setting if don't request IRQ for clock source channel
    
    [ Upstream commit be83c3b6e7b8ff22f72827a613bf6f3aa5afadbb ]
    
    If CMT instance has at least two channels, one channel will be used
    as a clock source and another one used as a clock event device.
    In that case, IRQ is not requested for clock source channel so
    sh_cmt_clock_event_program_verify() might work incorrectly.
    Besides, when a channel is only used for clock source, don't need to
    re-set the next match_value since it should be maximum timeout as
    it still is.
    
    On the other hand, due to no IRQ, total_cycles is not counted up
    when reaches compare match time (timer counter resets to zero),
    so sh_cmt_clocksource_read() returns unexpected value.
    Therefore, use 64-bit clocksoure's mask for 32-bit or 16-bit variants
    will also lead to wrong delta calculation. Hence, this mask should
    correspond to timer counter width, and above function just returns
    the raw value of timer counter register.
    
    Fixes: bfa76bb12f23 ("clocksource: sh_cmt: Request IRQ for clock event device only")
    Fixes: 37e7742c55ba ("clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines")
    Signed-off-by: Phong Hoang <phong.hoang.wz@renesas.com>
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210422123443.73334-1-niklas.soderlund+renesas@ragnatech.se
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 108b1867e387ff938847dd661ad46913b84177bb
Author: Ani Sinha <ani@anisinha.ca>
Date:   Tue Jul 13 08:35:21 2021 +0530

    x86/hyperv: fix for unwanted manipulation of sched_clock when TSC marked unstable
    
    [ Upstream commit c445535c3efbfb8cb42d098e624d46ab149664b7 ]
    
    Marking TSC as unstable has a side effect of marking sched_clock as
    unstable when TSC is still being used as the sched_clock. This is not
    desirable. Hyper-V ultimately uses a paravirtualized clock source that
    provides a stable scheduler clock even on systems without TscInvariant
    CPU capability. Hence, mark_tsc_unstable() call should be called _after_
    scheduler clock has been changed to the paravirtualized clocksource. This
    will prevent any unwanted manipulation of the sched_clock. Only TSC will
    be correctly marked as unstable.
    
    Signed-off-by: Ani Sinha <ani@anisinha.ca>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Tested-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20210713030522.1714803-1-ani@anisinha.ca
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3932173c4839cb1fb05ab8827b8f11601c543613
Author: Ani Sinha <ani@anisinha.ca>
Date:   Tue Jul 13 08:35:21 2021 +0530

    x86/hyperv: fix for unwanted manipulation of sched_clock when TSC marked unstable
    
    [ Upstream commit c445535c3efbfb8cb42d098e624d46ab149664b7 ]
    
    Marking TSC as unstable has a side effect of marking sched_clock as
    unstable when TSC is still being used as the sched_clock. This is not
    desirable. Hyper-V ultimately uses a paravirtualized clock source that
    provides a stable scheduler clock even on systems without TscInvariant
    CPU capability. Hence, mark_tsc_unstable() call should be called _after_
    scheduler clock has been changed to the paravirtualized clocksource. This
    will prevent any unwanted manipulation of the sched_clock. Only TSC will
    be correctly marked as unstable.
    
    Signed-off-by: Ani Sinha <ani@anisinha.ca>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Tested-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20210713030522.1714803-1-ani@anisinha.ca
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 871abd1e6185fa0e066ced9ef8b7a517388f18e8
Author: Ani Sinha <ani@anisinha.ca>
Date:   Tue Jul 13 08:35:21 2021 +0530

    x86/hyperv: fix for unwanted manipulation of sched_clock when TSC marked unstable
    
    [ Upstream commit c445535c3efbfb8cb42d098e624d46ab149664b7 ]
    
    Marking TSC as unstable has a side effect of marking sched_clock as
    unstable when TSC is still being used as the sched_clock. This is not
    desirable. Hyper-V ultimately uses a paravirtualized clock source that
    provides a stable scheduler clock even on systems without TscInvariant
    CPU capability. Hence, mark_tsc_unstable() call should be called _after_
    scheduler clock has been changed to the paravirtualized clocksource. This
    will prevent any unwanted manipulation of the sched_clock. Only TSC will
    be correctly marked as unstable.
    
    Signed-off-by: Ani Sinha <ani@anisinha.ca>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Tested-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20210713030522.1714803-1-ani@anisinha.ca
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 762b449fad981aa9cb97e246213640d664dd339d
Author: Phong Hoang <phong.hoang.wz@renesas.com>
Date:   Thu Apr 22 14:34:43 2021 +0200

    clocksource/drivers/sh_cmt: Fix wrong setting if don't request IRQ for clock source channel
    
    [ Upstream commit be83c3b6e7b8ff22f72827a613bf6f3aa5afadbb ]
    
    If CMT instance has at least two channels, one channel will be used
    as a clock source and another one used as a clock event device.
    In that case, IRQ is not requested for clock source channel so
    sh_cmt_clock_event_program_verify() might work incorrectly.
    Besides, when a channel is only used for clock source, don't need to
    re-set the next match_value since it should be maximum timeout as
    it still is.
    
    On the other hand, due to no IRQ, total_cycles is not counted up
    when reaches compare match time (timer counter resets to zero),
    so sh_cmt_clocksource_read() returns unexpected value.
    Therefore, use 64-bit clocksoure's mask for 32-bit or 16-bit variants
    will also lead to wrong delta calculation. Hence, this mask should
    correspond to timer counter width, and above function just returns
    the raw value of timer counter register.
    
    Fixes: bfa76bb12f23 ("clocksource: sh_cmt: Request IRQ for clock event device only")
    Fixes: 37e7742c55ba ("clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines")
    Signed-off-by: Phong Hoang <phong.hoang.wz@renesas.com>
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210422123443.73334-1-niklas.soderlund+renesas@ragnatech.se
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5168d8c24c109c092ba1968e69ef357f9e99d33b
Author: Phong Hoang <phong.hoang.wz@renesas.com>
Date:   Thu Apr 22 14:34:43 2021 +0200

    clocksource/drivers/sh_cmt: Fix wrong setting if don't request IRQ for clock source channel
    
    [ Upstream commit be83c3b6e7b8ff22f72827a613bf6f3aa5afadbb ]
    
    If CMT instance has at least two channels, one channel will be used
    as a clock source and another one used as a clock event device.
    In that case, IRQ is not requested for clock source channel so
    sh_cmt_clock_event_program_verify() might work incorrectly.
    Besides, when a channel is only used for clock source, don't need to
    re-set the next match_value since it should be maximum timeout as
    it still is.
    
    On the other hand, due to no IRQ, total_cycles is not counted up
    when reaches compare match time (timer counter resets to zero),
    so sh_cmt_clocksource_read() returns unexpected value.
    Therefore, use 64-bit clocksoure's mask for 32-bit or 16-bit variants
    will also lead to wrong delta calculation. Hence, this mask should
    correspond to timer counter width, and above function just returns
    the raw value of timer counter register.
    
    Fixes: bfa76bb12f23 ("clocksource: sh_cmt: Request IRQ for clock event device only")
    Fixes: 37e7742c55ba ("clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines")
    Signed-off-by: Phong Hoang <phong.hoang.wz@renesas.com>
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210422123443.73334-1-niklas.soderlund+renesas@ragnatech.se
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31fc50cd93cde6529e67837967cdcfc739fe9242
Author: Phong Hoang <phong.hoang.wz@renesas.com>
Date:   Thu Apr 22 14:34:43 2021 +0200

    clocksource/drivers/sh_cmt: Fix wrong setting if don't request IRQ for clock source channel
    
    [ Upstream commit be83c3b6e7b8ff22f72827a613bf6f3aa5afadbb ]
    
    If CMT instance has at least two channels, one channel will be used
    as a clock source and another one used as a clock event device.
    In that case, IRQ is not requested for clock source channel so
    sh_cmt_clock_event_program_verify() might work incorrectly.
    Besides, when a channel is only used for clock source, don't need to
    re-set the next match_value since it should be maximum timeout as
    it still is.
    
    On the other hand, due to no IRQ, total_cycles is not counted up
    when reaches compare match time (timer counter resets to zero),
    so sh_cmt_clocksource_read() returns unexpected value.
    Therefore, use 64-bit clocksoure's mask for 32-bit or 16-bit variants
    will also lead to wrong delta calculation. Hence, this mask should
    correspond to timer counter width, and above function just returns
    the raw value of timer counter register.
    
    Fixes: bfa76bb12f23 ("clocksource: sh_cmt: Request IRQ for clock event device only")
    Fixes: 37e7742c55ba ("clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines")
    Signed-off-by: Phong Hoang <phong.hoang.wz@renesas.com>
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210422123443.73334-1-niklas.soderlund+renesas@ragnatech.se
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c60a31db3990a144adc95df1feed9f7ebba6cd27
Author: Phong Hoang <phong.hoang.wz@renesas.com>
Date:   Thu Apr 22 14:34:43 2021 +0200

    clocksource/drivers/sh_cmt: Fix wrong setting if don't request IRQ for clock source channel
    
    [ Upstream commit be83c3b6e7b8ff22f72827a613bf6f3aa5afadbb ]
    
    If CMT instance has at least two channels, one channel will be used
    as a clock source and another one used as a clock event device.
    In that case, IRQ is not requested for clock source channel so
    sh_cmt_clock_event_program_verify() might work incorrectly.
    Besides, when a channel is only used for clock source, don't need to
    re-set the next match_value since it should be maximum timeout as
    it still is.
    
    On the other hand, due to no IRQ, total_cycles is not counted up
    when reaches compare match time (timer counter resets to zero),
    so sh_cmt_clocksource_read() returns unexpected value.
    Therefore, use 64-bit clocksoure's mask for 32-bit or 16-bit variants
    will also lead to wrong delta calculation. Hence, this mask should
    correspond to timer counter width, and above function just returns
    the raw value of timer counter register.
    
    Fixes: bfa76bb12f23 ("clocksource: sh_cmt: Request IRQ for clock event device only")
    Fixes: 37e7742c55ba ("clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines")
    Signed-off-by: Phong Hoang <phong.hoang.wz@renesas.com>
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210422123443.73334-1-niklas.soderlund+renesas@ragnatech.se
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6742212c0c6ccee2351499db80acba71fa36052
Merge: 603eefda5fcf bea6a94a279b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Sep 3 11:11:54 2021 -0700

    Merge tag 'mips_5.15' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux
    
    Pull MIPS updates from Thomas Bogendoerfer:
    
     - converted Pistachio platform to use MIPS generic kernel
    
     - fixes and cleanups
    
    * tag 'mips_5.15' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux: (29 commits)
      MIPS: Malta: fix alignment of the devicetree buffer
      MIPS: ingenic: Unconditionally enable clock of CPU #0
      MIPS: mscc: ocelot: mark the phy-mode for internal PHY ports
      MIPS: mscc: ocelot: disable all switch ports by default
      MAINTAINERS: adjust PISTACHIO SOC SUPPORT after its retirement
      MIPS: Return true/false (not 1/0) from bool functions
      MIPS: generic: Return true/false (not 1/0) from bool functions
      MIPS: Make a alias for pistachio_defconfig
      MIPS: Retire MACH_PISTACHIO
      MIPS: config: generic: Add config for Marduk board
      pinctrl: pistachio: Make it as an option
      phy: pistachio-usb: Depend on MIPS || COMPILE_TEST
      clocksource/drivers/pistachio: Make it selectable for MIPS
      clk: pistachio: Make it selectable for generic MIPS kernel
      MIPS: DTS: Pistachio add missing cpc and cdmm
      MIPS: generic: Allow generating FIT image for Marduk board
      MIPS: locking/atomic: Fix atomic{_64,}_sub_if_positive
      MIPS: loongson2ef: don't build serial.o unconditionally
      MIPS: Replace deprecated CPU-hotplug functions.
      MIPS: Alchemy: Fix spelling contraction "cant" -> "can't"
      ...

commit c547d89a9a445f6bb757b93247de43d312e722da
Merge: 44d7d3b0d1cd 87df7fb922d1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 30 19:22:52 2021 -0700

    Merge tag 'for-5.15/io_uring-2021-08-30' of git://git.kernel.dk/linux-block
    
    Pull io_uring updates from Jens Axboe:
    
     - cancellation cleanups (Hao, Pavel)
    
     - io-wq accounting cleanup (Hao)
    
     - io_uring submit locking fix (Hao)
    
     - io_uring link handling fixes (Hao)
    
     - fixed file improvements (wangyangbo, Pavel)
    
     - allow updates of linked timeouts like regular timeouts (Pavel)
    
     - IOPOLL fix (Pavel)
    
     - remove batched file get optimization (Pavel)
    
     - improve reference handling (Pavel)
    
     - IRQ task_work batching (Pavel)
    
     - allow pure fixed file, and add support for open/accept (Pavel)
    
     - GFP_ATOMIC RT kernel fix
    
     - multiple CQ ring waiter improvement
    
     - funnel IRQ completions through task_work
    
     - add support for limiting async workers explicitly
    
     - add different clocksource support for timeouts
    
     - io-wq wakeup race fix
    
     - lots of cleanups and improvement (Pavel et al)
    
    * tag 'for-5.15/io_uring-2021-08-30' of git://git.kernel.dk/linux-block: (87 commits)
      io-wq: fix wakeup race when adding new work
      io-wq: wqe and worker locks no longer need to be IRQ safe
      io-wq: check max_worker limits if a worker transitions bound state
      io_uring: allow updating linked timeouts
      io_uring: keep ltimeouts in a list
      io_uring: support CLOCK_BOOTTIME/REALTIME for timeouts
      io-wq: provide a way to limit max number of workers
      io_uring: add build check for buf_index overflows
      io_uring: clarify io_req_task_cancel() locking
      io_uring: add task-refs-get helper
      io_uring: fix failed linkchain code logic
      io_uring: remove redundant req_set_fail()
      io_uring: don't free request to slab
      io_uring: accept directly into fixed file table
      io_uring: hand code io_accept() fd installing
      io_uring: openat directly into fixed fd table
      net: add accept helper not installing fd
      io_uring: fix io_try_cancel_userdata race for iowq
      io_uring: IRQ rw completion batching
      io_uring: batch task work locking
      ...

commit 8596e589b787732c8346f0482919e83cc9362db1
Merge: bed91667415b d25a025201ed
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 30 15:31:33 2021 -0700

    Merge tag 'timers-core-2021-08-30' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Updates for timekeeping, timers and related drivers:
    
      Core code:
    
       - Cure a couple of correctness issues in the posix CPU timer code to
         prevent that the tick dependency for NOHZ full is kept alive for no
         reason.
    
       - Avoid expensive double reprogramming of the clockevent device in
         hrtimer_start_range_ns().
    
       - Avoid pointless SMP function calls when the clock was set to avoid
         disturbing CPUs which do not have any affected timers queued.
    
       - Make the clocksource watchdog test work correctly when CONFIG_HZ is
         less than 100.
    
      Drivers:
    
       - Prefer the ARM architected timer over the Exynos timer which is way
         more expensive to access.
    
       - Add device tree bindings for new Ingenic SoCs
    
       - The usual improvements and cleanups all over the place"
    
    * tag 'timers-core-2021-08-30' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (29 commits)
      clocksource: Make clocksource watchdog test safe for slow-HZ systems
      dt-bindings: timer: Add ABIs for new Ingenic SoCs
      clocksource/drivers/fttmr010: Pass around less pointers
      clocksource/drivers/mediatek: Optimize systimer irq clear flow on shutdown
      clocksource/drivers/ingenic: Use bitfield macro helpers
      clocksource/drivers/sh_cmt: Fix wrong setting if don't request IRQ for clock source channel
      dt-bindings: timer: convert rockchip,rk-timer.txt to YAML
      clocksource/drivers/exynos_mct: Mark MCT device as CLOCK_EVT_FEAT_PERCPU
      clocksource/drivers/exynos_mct: Prioritise Arm arch timer on arm64
      hrtimer: Unbreak hrtimer_force_reprogram()
      hrtimer: Use raw_cpu_ptr() in clock_was_set()
      hrtimer: Avoid more SMP function calls in clock_was_set()
      hrtimer: Avoid unnecessary SMP function calls in clock_was_set()
      hrtimer: Add bases argument to clock_was_set()
      time/timekeeping: Avoid invoking clock_was_set() twice
      timekeeping: Distangle resume and clock-was-set events
      timerfd: Provide timerfd_resume()
      hrtimer: Force clock_was_set() handling for the HIGHRES=n, NOHZ=y case
      hrtimer: Ensure timerfd notification for HIGHRES=n
      hrtimer: Consolidate reprogramming code
      ...

commit d25a025201ed98f4b93775e0999a3f2135702106
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu Aug 12 09:31:28 2021 -0700

    clocksource: Make clocksource watchdog test safe for slow-HZ systems
    
    The clocksource watchdog test sets a local JIFFIES_SHIFT macro and assumes
    that HZ is >= 100. For smaller HZ values this shift value is too large and
    causes undefined behaviour.
    
    Move the HZ-based definitions of JIFFIES_SHIFT from kernel/time/jiffies.c
    to kernel/time/tick-internal.h so the clocksource watchdog test can utilize
    them, which makes it work correctly with all HZ values.
    
    [ tglx: Resolved conflicts and massaged changelog ]
    
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/lkml/20210812000133.GA402890@paulmck-ThinkPad-P17-Gen-1/

commit 3e7e69f23045f04205e833e38b3c412d52b3a0f2
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Fri Aug 6 12:31:22 2021 +0200

    dt-bindings: timer: Remove binding for energymicro,efm32-timer.txt
    
    The driver has been removed by commit 523d83ef0979
    ("clocksource/drivers/efm32: Drop unused timer code") that's why binding
    doc shouldn't be also valid anymore.
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Link: https://lore.kernel.org/r/571fc4b2e6d41c61b7f4445601a79bb50aace2e7.1628245879.git.michal.simek@xilinx.com
    Signed-off-by: Rob Herring <robh@kernel.org>

commit 3a95de59730eb9ac8dd6a367018f5653a873ecaa
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sun Jul 25 00:44:23 2021 +0200

    clocksource/drivers/fttmr010: Pass around less pointers
    
    Just pass bool flags from the different initcalls and use the
    flags to set the right pointers. This results in less pointers
    passed around in init.
    
    Cc: Cédric Le Goater <clg@kaod.org>
    Cc: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210724224424.2085404-1-linus.walleij@linaro.org

commit ce9570657d45d6387a68d7f419fe70d085200a2f
Author: Fengquan Chen <Fengquan.Chen@mediatek.com>
Date:   Fri Apr 9 17:22:42 2021 +0800

    clocksource/drivers/mediatek: Optimize systimer irq clear flow on shutdown
    
    mtk_syst_clkevt_shutdown is called after irq disabled in suspend flow,
    clear any pending systimer irq when shutdown to avoid suspend aborted
    due to timer irq pending
    
    Also as for systimer in mediatek socs, there must be firstly enable
    timer before clear systimer irq
    
    Fixes: e3af677607d9("clocksource/drivers/timer-mediatek: Add support for system timer")
    Signed-off-by: Fengquan Chen <fengquan.chen@mediatek.com>
    Tested-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1617960162-1988-2-git-send-email-Fengquan.Chen@mediatek.com

commit 3b87265d825a2d29eb6b67511f0e7ed62225cd97
Author: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
Date:   Fri Jul 30 17:43:08 2021 +0800

    clocksource/drivers/ingenic: Use bitfield macro helpers
    
    Use "FIELD_GET()" and "FIELD_PREP()" to simplify the code.
    
    [dlezcano] : Changed title
    
    Signed-off-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Reviewed-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1627638188-116163-1-git-send-email-zhouyanjie@wanyeetech.com

commit be83c3b6e7b8ff22f72827a613bf6f3aa5afadbb
Author: Phong Hoang <phong.hoang.wz@renesas.com>
Date:   Thu Apr 22 14:34:43 2021 +0200

    clocksource/drivers/sh_cmt: Fix wrong setting if don't request IRQ for clock source channel
    
    If CMT instance has at least two channels, one channel will be used
    as a clock source and another one used as a clock event device.
    In that case, IRQ is not requested for clock source channel so
    sh_cmt_clock_event_program_verify() might work incorrectly.
    Besides, when a channel is only used for clock source, don't need to
    re-set the next match_value since it should be maximum timeout as
    it still is.
    
    On the other hand, due to no IRQ, total_cycles is not counted up
    when reaches compare match time (timer counter resets to zero),
    so sh_cmt_clocksource_read() returns unexpected value.
    Therefore, use 64-bit clocksoure's mask for 32-bit or 16-bit variants
    will also lead to wrong delta calculation. Hence, this mask should
    correspond to timer counter width, and above function just returns
    the raw value of timer counter register.
    
    Fixes: bfa76bb12f23 ("clocksource: sh_cmt: Request IRQ for clock event device only")
    Fixes: 37e7742c55ba ("clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines")
    Signed-off-by: Phong Hoang <phong.hoang.wz@renesas.com>
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210422123443.73334-1-niklas.soderlund+renesas@ragnatech.se

commit 88183788eacb782eb6e1295f1934fb9531b503d6
Author: Will Deacon <will@kernel.org>
Date:   Tue Jun 8 16:43:41 2021 +0100

    clocksource/drivers/exynos_mct: Mark MCT device as CLOCK_EVT_FEAT_PERCPU
    
    The "mct_tick" is a per-cpu clockevents device. Set the
    CLOCK_EVT_FEAT_PERCPU feature to prevent e.g. mct_tick0 being unsafely
    designated as the global broadcast timer and instead treat the device as
    a per-cpu wakeup timer.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210608154341.10794-3-will@kernel.org

commit ae460fd9164b16654d8ec06cbc280b832f840eac
Author: Will Deacon <will@kernel.org>
Date:   Tue Jun 8 16:43:40 2021 +0100

    clocksource/drivers/exynos_mct: Prioritise Arm arch timer on arm64
    
    All arm64 CPUs feature an architected timer, which offers a relatively
    low-latency interface to a per-cpu clocksource and timer. For the most
    part, using this interface is a no-brainer, with the exception of SoCs
    where it cannot be used to wake up from deep idle state (i.e.
    CLOCK_EVT_FEAT_C3STOP is set).
    
    On the contrary, the Exynos MCT is extremely slow to access yet can be
    used as a wakeup source. In preparation for using the Exynos MCT as a
    potential wakeup timer for the Arm architected timer, reduce its ratings
    so that the architected timer is preferred.
    
    This effectively reverts the decision made in 6282edb72bed
    ("clocksource/drivers/exynos_mct: Increase priority over ARM arch timer")
    for arm64, as the reasoning for the original change was to work around
    a 32-bit SoC design.
    
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: Chanwoo Choi <cw00.choi@samsung.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Will Deacon <will@kernel.org>
    Tested-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com> # exynos-5422
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210608154341.10794-2-will@kernel.org

commit 1e4fd60b54cf9f65d2d5b89a9289cbbc42922adf
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Fri Jul 23 10:25:38 2021 +0800

    clocksource/drivers/pistachio: Make it selectable for MIPS
    
    So it will be avilable for generic MIPS kernel.
    
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

commit c03d1a2a4b99a28d1f7a4cda39a1984e0e797806
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Jun 11 08:42:50 2021 +0300

    bus: ti-sysc: Fix gpt12 system timer issue with reserved status
    
    [ Upstream commit 3ff340e24c9dd5cff9fc07d67914c5adf67f80d6 ]
    
    Jarkko Nikula <jarkko.nikula@bitmer.com> reported that Beagleboard
    revision c2 stopped booting. Jarkko bisected the issue down to
    commit 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend
    and resume for am3 and am4").
    
    Let's fix the issue by tagging system timers as reserved rather than
    ignoring them. And let's not probe any interconnect target module child
    devices for reserved modules.
    
    This allows PM runtime to keep track of clocks and clockdomains for
    the interconnect target module, and prevent the system timer from idling
    as we already have SYSC_QUIRK_NO_IDLE and SYSC_QUIRK_NO_IDLE_ON_INIT
    flags set for system timers.
    
    Fixes: 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend and resume for am3 and am4")
    Reported-by: Jarkko Nikula <jarkko.nikula@bitmer.com>
    Tested-by: Jarkko Nikula <jarkko.nikula@bitmer.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8efe3a635f22de4a1b8d8affc95f8604251d402a
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Jun 11 08:42:50 2021 +0300

    bus: ti-sysc: Fix gpt12 system timer issue with reserved status
    
    [ Upstream commit 3ff340e24c9dd5cff9fc07d67914c5adf67f80d6 ]
    
    Jarkko Nikula <jarkko.nikula@bitmer.com> reported that Beagleboard
    revision c2 stopped booting. Jarkko bisected the issue down to
    commit 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend
    and resume for am3 and am4").
    
    Let's fix the issue by tagging system timers as reserved rather than
    ignoring them. And let's not probe any interconnect target module child
    devices for reserved modules.
    
    This allows PM runtime to keep track of clocks and clockdomains for
    the interconnect target module, and prevent the system timer from idling
    as we already have SYSC_QUIRK_NO_IDLE and SYSC_QUIRK_NO_IDLE_ON_INIT
    flags set for system timers.
    
    Fixes: 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend and resume for am3 and am4")
    Reported-by: Jarkko Nikula <jarkko.nikula@bitmer.com>
    Tested-by: Jarkko Nikula <jarkko.nikula@bitmer.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 698429f9d0e54ce3964151adff886ee5fc59714b
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Aug 3 16:16:17 2021 +0200

    clocksource: Replace deprecated CPU-hotplug functions.
    
    The functions get_online_cpus() and put_online_cpus() have been
    deprecated during the CPU hotplug rework. They map directly to
    cpus_read_lock() and cpus_read_unlock().
    
    Replace deprecated CPU-hotplug functions with the official version.
    The behavior remains unchanged.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20210803141621.780504-35-bigeasy@linutronix.de

commit 775dea4deec679c24b525b258c341a45ff1de9ea
Merge: b6e952c35267 47adef20e67d
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Aug 4 16:03:40 2021 +0200

    Merge tag 'ixp4xx-drivers-arm-soc-v5.15-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-nomadik into arm/drivers
    
    IXP4xx driver updates for modernizing the IXP4xx platforms,
    taregeted for v5.15:
    
    - Add DT bindings to the expansion bus and PATA libata driver.
    
    - Add a new expansion bus driver.
    
    - Rewrite the watchdog driver to use the watchdog core and
      spawn from the timer (clocksource) driver.
    
    - Refactor the PATA/libata driver to probe from the device
      tree and use the expansion bus driver to manipulate chip
      select timings directly.
    
    * tag 'ixp4xx-drivers-arm-soc-v5.15-1' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-nomadik:
      pata: ixp4xx: Rewrite to use device tree
      pata: ixp4xx: Add DT bindings
      pata: ixp4xx: Refer to cmd and ctl rather than csN
      pata: ixp4xx: Use IS_ENABLED() to determine endianness
      pata: ixp4xx: Use local dev variable
      watchdog: ixp4xx: Rewrite driver to use core
      bus: ixp4xx: Add a driver for IXP4xx expansion bus
      bus: ixp4xx: Add DT bindings for the IXP4xx expansion bus
    
    Link: https://lore.kernel.org/r/CACRpkdZaCosXsgp02nuUbd_nEvdxm5-z0+d0oSA97UTWQ0RQQg@mail.gmail.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 13c2c3cfe01952575b1dd5e24d450fcccff93bc0
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Wed Aug 4 14:20:57 2021 +0300

    KVM: selftests: fix hyperv_clock test
    
    The test was mistakenly using addr_gpa2hva on a gva and that happened
    to work accidentally.  Commit 106a2e766eae ("KVM: selftests: Lower the
    min virtual address for misc page allocations") revealed this bug.
    
    Fixes: 2c7f76b4c42b ("selftests: kvm: Add basic Hyper-V clocksources tests", 2021-03-18)
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20210804112057.409498-1-mlevitsk@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit 25f6fa53a07422e2bb004229eefd32760c469fb0
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Mon May 3 17:04:57 2021 -0700

    refscale: Add measurement of clock readout
    
    This commit adds a "clock" type to refscale, which checks the performance
    of ktime_get_real_fast_ns().  Use the "clocksource=" kernel boot parameter
    to select the underlying clock source.
    
    [ paulmck: Work around compiler false positive per kernel test robot. ]
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>

commit ef4dac7dbde7ba376e340f665196988409913625
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Mon May 10 12:30:49 2021 -0700

    torture: Add clocksource-watchdog testing to torture.sh
    
    This commit adds three short tests of the clocksource-watchdog capability
    to the torture.sh script, all to avoid otherwise-inevitable bitrot.
    While in the area, fix an obsolete comment.
    
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>

commit 24493605bd1c9e56cb0229c8e006e3add2f0b706
Author: Samuel Holland <samuel@sholland.org>
Date:   Fri May 14 21:14:39 2021 -0500

    clocksource/arm_arch_timer: Improve Allwinner A64 timer workaround
    
    commit 8b33dfe0ba1c84c1aab2456590b38195837f1e6e upstream.
    
    Bad counter reads are experienced sometimes when bit 10 or greater rolls
    over. Originally, testing showed that at least 10 lower bits would be
    set to the same value during these bad reads. However, some users still
    reported time skips.
    
    Wider testing revealed that on some chips, occasionally only the lowest
    9 bits would read as the anomalous value. During these reads (which
    still happen only when bit 10), bit 9 would read as the correct value.
    
    Reduce the mask by one bit to cover these cases as well.
    
    Cc: stable@vger.kernel.org
    Fixes: c950ca8c35ee ("clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability")
    Reported-by: Roman Stratiienko <r.stratiienko@gmail.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210515021439.55316-1-samuel@sholland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73af8425a57f69d00b0954a15f099355bb9783d5
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:19 2021 -0700

    clocksource: Retry clock read if long delays detected
    
    [ Upstream commit db3a34e17433de2390eb80d436970edcebd0ca3e ]
    
    When the clocksource watchdog marks a clock as unstable, this might be due
    to that clock being unstable or it might be due to delays that happen to
    occur between the reads of the two clocks.  Yes, interrupts are disabled
    across those two reads, but there are no shortage of things that can delay
    interrupts-disabled regions of code ranging from SMI handlers to vCPU
    preemption.  It would be good to have some indication as to why the clock
    was marked unstable.
    
    Therefore, re-read the watchdog clock on either side of the read from the
    clock under test.  If the watchdog clock shows an excessive time delta
    between its pair of reads, the reads are retried.
    
    The maximum number of retries is specified by a new kernel boot parameter
    clocksource.max_cswd_read_retries, which defaults to three, that is, up to
    four reads, one initial and up to three retries.  If more than one retry
    was required, a message is printed on the console (the occasional single
    retry is expected behavior, especially in guest OSes).  If the maximum
    number of retries is exceeded, the clock under test will be marked
    unstable.  However, the probability of this happening due to various sorts
    of delays is quite small.  In addition, the reason (clock-read delays) for
    the unstable marking will be apparent.
    
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-1-paulmck@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3f4ad1ba2eb08ef02df8adbe3827d3715003436
Author: Samuel Holland <samuel@sholland.org>
Date:   Fri May 14 21:14:39 2021 -0500

    clocksource/arm_arch_timer: Improve Allwinner A64 timer workaround
    
    commit 8b33dfe0ba1c84c1aab2456590b38195837f1e6e upstream.
    
    Bad counter reads are experienced sometimes when bit 10 or greater rolls
    over. Originally, testing showed that at least 10 lower bits would be
    set to the same value during these bad reads. However, some users still
    reported time skips.
    
    Wider testing revealed that on some chips, occasionally only the lowest
    9 bits would read as the anomalous value. During these reads (which
    still happen only when bit 10), bit 9 would read as the correct value.
    
    Reduce the mask by one bit to cover these cases as well.
    
    Cc: stable@vger.kernel.org
    Fixes: c950ca8c35ee ("clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability")
    Reported-by: Roman Stratiienko <r.stratiienko@gmail.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210515021439.55316-1-samuel@sholland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b63416bc9d6de0d9a8d0c66c3e816d5a4d5f5d98
Author: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
Date:   Sat Jun 26 14:18:40 2021 +0800

    MIPS: CI20: Reduce clocksource to 750 kHz.
    
    [ Upstream commit 23c64447b3538a6f34cb38aae3bc19dc1ec53436 ]
    
    The original clock (3 MHz) is too fast for the clocksource,
    there will be a chance that the system may get stuck.
    
    Reported-by: Nikolaus Schaller <hns@goldelico.com>
    Tested-by: Nikolaus Schaller <hns@goldelico.com> # on CI20
    Signed-off-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Acked-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc3a89122ad4f6c17baa47077812e5a8cacf4af7
Author: Samuel Holland <samuel@sholland.org>
Date:   Fri May 14 21:14:39 2021 -0500

    clocksource/arm_arch_timer: Improve Allwinner A64 timer workaround
    
    commit 8b33dfe0ba1c84c1aab2456590b38195837f1e6e upstream.
    
    Bad counter reads are experienced sometimes when bit 10 or greater rolls
    over. Originally, testing showed that at least 10 lower bits would be
    set to the same value during these bad reads. However, some users still
    reported time skips.
    
    Wider testing revealed that on some chips, occasionally only the lowest
    9 bits would read as the anomalous value. During these reads (which
    still happen only when bit 10), bit 9 would read as the correct value.
    
    Reduce the mask by one bit to cover these cases as well.
    
    Cc: stable@vger.kernel.org
    Fixes: c950ca8c35ee ("clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability")
    Reported-by: Roman Stratiienko <r.stratiienko@gmail.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210515021439.55316-1-samuel@sholland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05e2e58115421c453c2f850b81f87ecc77ad7170
Author: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
Date:   Sat Jun 26 14:18:40 2021 +0800

    MIPS: CI20: Reduce clocksource to 750 kHz.
    
    [ Upstream commit 23c64447b3538a6f34cb38aae3bc19dc1ec53436 ]
    
    The original clock (3 MHz) is too fast for the clocksource,
    there will be a chance that the system may get stuck.
    
    Reported-by: Nikolaus Schaller <hns@goldelico.com>
    Tested-by: Nikolaus Schaller <hns@goldelico.com> # on CI20
    Signed-off-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Acked-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a5ebf5d48229b4d227dae8b5eeef996bfce20b6
Author: Samuel Holland <samuel@sholland.org>
Date:   Fri May 14 21:14:39 2021 -0500

    clocksource/arm_arch_timer: Improve Allwinner A64 timer workaround
    
    commit 8b33dfe0ba1c84c1aab2456590b38195837f1e6e upstream.
    
    Bad counter reads are experienced sometimes when bit 10 or greater rolls
    over. Originally, testing showed that at least 10 lower bits would be
    set to the same value during these bad reads. However, some users still
    reported time skips.
    
    Wider testing revealed that on some chips, occasionally only the lowest
    9 bits would read as the anomalous value. During these reads (which
    still happen only when bit 10), bit 9 would read as the correct value.
    
    Reduce the mask by one bit to cover these cases as well.
    
    Cc: stable@vger.kernel.org
    Fixes: c950ca8c35ee ("clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability")
    Reported-by: Roman Stratiienko <r.stratiienko@gmail.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210515021439.55316-1-samuel@sholland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfaaed5e4a120c8874897879d8f9213f0697111f
Author: Samuel Holland <samuel@sholland.org>
Date:   Fri May 14 21:14:39 2021 -0500

    clocksource/arm_arch_timer: Improve Allwinner A64 timer workaround
    
    commit 8b33dfe0ba1c84c1aab2456590b38195837f1e6e upstream.
    
    Bad counter reads are experienced sometimes when bit 10 or greater rolls
    over. Originally, testing showed that at least 10 lower bits would be
    set to the same value during these bad reads. However, some users still
    reported time skips.
    
    Wider testing revealed that on some chips, occasionally only the lowest
    9 bits would read as the anomalous value. During these reads (which
    still happen only when bit 10), bit 9 would read as the correct value.
    
    Reduce the mask by one bit to cover these cases as well.
    
    Cc: stable@vger.kernel.org
    Fixes: c950ca8c35ee ("clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability")
    Reported-by: Roman Stratiienko <r.stratiienko@gmail.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210515021439.55316-1-samuel@sholland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1a3f6f8ef136fb6e7e8f204429249df6b77cfd5
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Apr 15 11:55:06 2021 +0300

    clocksource/drivers/timer-ti-dm: Save and restore timer TIOCP_CFG
    
    [ Upstream commit 9517c577f9f722270584cfb1a7b4e1354e408658 ]
    
    As we are using cpu_pm to save and restore context, we must also save and
    restore the timer sysconfig register TIOCP_CFG. This is needed because
    we are not calling PM runtime functions at all with cpu_pm.
    
    Fixes: b34677b0999a ("clocksource/drivers/timer-ti-dm: Implement cpu_pm notifier for context save and restore")
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Adam Ford <aford173@gmail.com>
    Cc: Andreas Kemnade <andreas@kemnade.info>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210415085506.56828-1-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 155d3c5d24ee13cafa6236b49fc02b240a511d59
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:20 2021 -0700

    clocksource: Check per-CPU clock synchronization when marked unstable
    
    [ Upstream commit 7560c02bdffb7c52d1457fa551b9e745d4b9e754 ]
    
    Some sorts of per-CPU clock sources have a history of going out of
    synchronization with each other.  However, this problem has purportedy been
    solved in the past ten years.  Except that it is all too possible that the
    problem has instead simply been made less likely, which might mean that
    some of the occasional "Marking clocksource 'tsc' as unstable" messages
    might be due to desynchronization.  How would anyone know?
    
    Therefore apply CPU-to-CPU synchronization checking to newly unstable
    clocksource that are marked with the new CLOCK_SOURCE_VERIFY_PERCPU flag.
    Lists of desynchronized CPUs are printed, with the caveat that if it
    is the reporting CPU that is itself desynchronized, it will appear that
    all the other clocks are wrong.  Just like in real life.
    
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-2-paulmck@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d13f6800334232d1181d108eb7225052a6733a3d
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:19 2021 -0700

    clocksource: Retry clock read if long delays detected
    
    [ Upstream commit db3a34e17433de2390eb80d436970edcebd0ca3e ]
    
    When the clocksource watchdog marks a clock as unstable, this might be due
    to that clock being unstable or it might be due to delays that happen to
    occur between the reads of the two clocks.  Yes, interrupts are disabled
    across those two reads, but there are no shortage of things that can delay
    interrupts-disabled regions of code ranging from SMI handlers to vCPU
    preemption.  It would be good to have some indication as to why the clock
    was marked unstable.
    
    Therefore, re-read the watchdog clock on either side of the read from the
    clock under test.  If the watchdog clock shows an excessive time delta
    between its pair of reads, the reads are retried.
    
    The maximum number of retries is specified by a new kernel boot parameter
    clocksource.max_cswd_read_retries, which defaults to three, that is, up to
    four reads, one initial and up to three retries.  If more than one retry
    was required, a message is printed on the console (the occasional single
    retry is expected behavior, especially in guest OSes).  If the maximum
    number of retries is exceeded, the clock under test will be marked
    unstable.  However, the probability of this happening due to various sorts
    of delays is quite small.  In addition, the reason (clock-read delays) for
    the unstable marking will be apparent.
    
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-1-paulmck@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f100097d744f9b9bfe85cf31b3339f8c5da379f2
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Apr 15 11:55:06 2021 +0300

    clocksource/drivers/timer-ti-dm: Save and restore timer TIOCP_CFG
    
    [ Upstream commit 9517c577f9f722270584cfb1a7b4e1354e408658 ]
    
    As we are using cpu_pm to save and restore context, we must also save and
    restore the timer sysconfig register TIOCP_CFG. This is needed because
    we are not calling PM runtime functions at all with cpu_pm.
    
    Fixes: b34677b0999a ("clocksource/drivers/timer-ti-dm: Implement cpu_pm notifier for context save and restore")
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Adam Ford <aford173@gmail.com>
    Cc: Andreas Kemnade <andreas@kemnade.info>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210415085506.56828-1-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 193e14e68e907b2a7a936a7726accbaa4df25a4d
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:20 2021 -0700

    clocksource: Check per-CPU clock synchronization when marked unstable
    
    [ Upstream commit 7560c02bdffb7c52d1457fa551b9e745d4b9e754 ]
    
    Some sorts of per-CPU clock sources have a history of going out of
    synchronization with each other.  However, this problem has purportedy been
    solved in the past ten years.  Except that it is all too possible that the
    problem has instead simply been made less likely, which might mean that
    some of the occasional "Marking clocksource 'tsc' as unstable" messages
    might be due to desynchronization.  How would anyone know?
    
    Therefore apply CPU-to-CPU synchronization checking to newly unstable
    clocksource that are marked with the new CLOCK_SOURCE_VERIFY_PERCPU flag.
    Lists of desynchronized CPUs are printed, with the caveat that if it
    is the reporting CPU that is itself desynchronized, it will appear that
    all the other clocks are wrong.  Just like in real life.
    
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-2-paulmck@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22521a7580fdf304d8794c223308489e635995f5
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:19 2021 -0700

    clocksource: Retry clock read if long delays detected
    
    [ Upstream commit db3a34e17433de2390eb80d436970edcebd0ca3e ]
    
    When the clocksource watchdog marks a clock as unstable, this might be due
    to that clock being unstable or it might be due to delays that happen to
    occur between the reads of the two clocks.  Yes, interrupts are disabled
    across those two reads, but there are no shortage of things that can delay
    interrupts-disabled regions of code ranging from SMI handlers to vCPU
    preemption.  It would be good to have some indication as to why the clock
    was marked unstable.
    
    Therefore, re-read the watchdog clock on either side of the read from the
    clock under test.  If the watchdog clock shows an excessive time delta
    between its pair of reads, the reads are retried.
    
    The maximum number of retries is specified by a new kernel boot parameter
    clocksource.max_cswd_read_retries, which defaults to three, that is, up to
    four reads, one initial and up to three retries.  If more than one retry
    was required, a message is printed on the console (the occasional single
    retry is expected behavior, especially in guest OSes).  If the maximum
    number of retries is exceeded, the clock under test will be marked
    unstable.  However, the probability of this happening due to various sorts
    of delays is quite small.  In addition, the reason (clock-read delays) for
    the unstable marking will be apparent.
    
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-1-paulmck@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45b399e309f5aed3a4e8538b1fa86d808af6e6fb
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Apr 15 11:55:06 2021 +0300

    clocksource/drivers/timer-ti-dm: Save and restore timer TIOCP_CFG
    
    [ Upstream commit 9517c577f9f722270584cfb1a7b4e1354e408658 ]
    
    As we are using cpu_pm to save and restore context, we must also save and
    restore the timer sysconfig register TIOCP_CFG. This is needed because
    we are not calling PM runtime functions at all with cpu_pm.
    
    Fixes: b34677b0999a ("clocksource/drivers/timer-ti-dm: Implement cpu_pm notifier for context save and restore")
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Adam Ford <aford173@gmail.com>
    Cc: Andreas Kemnade <andreas@kemnade.info>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210415085506.56828-1-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9b40ebd448e437ffbc65f013836f98252279a82
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:20 2021 -0700

    clocksource: Check per-CPU clock synchronization when marked unstable
    
    [ Upstream commit 7560c02bdffb7c52d1457fa551b9e745d4b9e754 ]
    
    Some sorts of per-CPU clock sources have a history of going out of
    synchronization with each other.  However, this problem has purportedy been
    solved in the past ten years.  Except that it is all too possible that the
    problem has instead simply been made less likely, which might mean that
    some of the occasional "Marking clocksource 'tsc' as unstable" messages
    might be due to desynchronization.  How would anyone know?
    
    Therefore apply CPU-to-CPU synchronization checking to newly unstable
    clocksource that are marked with the new CLOCK_SOURCE_VERIFY_PERCPU flag.
    Lists of desynchronized CPUs are printed, with the caveat that if it
    is the reporting CPU that is itself desynchronized, it will appear that
    all the other clocks are wrong.  Just like in real life.
    
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-2-paulmck@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03a65c14ab47b287bede2f414ca212db1ebdc8c0
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:19 2021 -0700

    clocksource: Retry clock read if long delays detected
    
    [ Upstream commit db3a34e17433de2390eb80d436970edcebd0ca3e ]
    
    When the clocksource watchdog marks a clock as unstable, this might be due
    to that clock being unstable or it might be due to delays that happen to
    occur between the reads of the two clocks.  Yes, interrupts are disabled
    across those two reads, but there are no shortage of things that can delay
    interrupts-disabled regions of code ranging from SMI handlers to vCPU
    preemption.  It would be good to have some indication as to why the clock
    was marked unstable.
    
    Therefore, re-read the watchdog clock on either side of the read from the
    clock under test.  If the watchdog clock shows an excessive time delta
    between its pair of reads, the reads are retried.
    
    The maximum number of retries is specified by a new kernel boot parameter
    clocksource.max_cswd_read_retries, which defaults to three, that is, up to
    four reads, one initial and up to three retries.  If more than one retry
    was required, a message is printed on the console (the occasional single
    retry is expected behavior, especially in guest OSes).  If the maximum
    number of retries is exceeded, the clock under test will be marked
    unstable.  However, the probability of this happening due to various sorts
    of delays is quite small.  In addition, the reason (clock-read delays) for
    the unstable marking will be apparent.
    
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-1-paulmck@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dba9cda5aa9969a93d068cbea7a7668233a14882
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:19 2021 -0700

    clocksource: Retry clock read if long delays detected
    
    [ Upstream commit db3a34e17433de2390eb80d436970edcebd0ca3e ]
    
    When the clocksource watchdog marks a clock as unstable, this might be due
    to that clock being unstable or it might be due to delays that happen to
    occur between the reads of the two clocks.  Yes, interrupts are disabled
    across those two reads, but there are no shortage of things that can delay
    interrupts-disabled regions of code ranging from SMI handlers to vCPU
    preemption.  It would be good to have some indication as to why the clock
    was marked unstable.
    
    Therefore, re-read the watchdog clock on either side of the read from the
    clock under test.  If the watchdog clock shows an excessive time delta
    between its pair of reads, the reads are retried.
    
    The maximum number of retries is specified by a new kernel boot parameter
    clocksource.max_cswd_read_retries, which defaults to three, that is, up to
    four reads, one initial and up to three retries.  If more than one retry
    was required, a message is printed on the console (the occasional single
    retry is expected behavior, especially in guest OSes).  If the maximum
    number of retries is exceeded, the clock under test will be marked
    unstable.  However, the probability of this happening due to various sorts
    of delays is quite small.  In addition, the reason (clock-read delays) for
    the unstable marking will be apparent.
    
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-1-paulmck@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c445535c3efbfb8cb42d098e624d46ab149664b7
Author: Ani Sinha <ani@anisinha.ca>
Date:   Tue Jul 13 08:35:21 2021 +0530

    x86/hyperv: fix for unwanted manipulation of sched_clock when TSC marked unstable
    
    Marking TSC as unstable has a side effect of marking sched_clock as
    unstable when TSC is still being used as the sched_clock. This is not
    desirable. Hyper-V ultimately uses a paravirtualized clock source that
    provides a stable scheduler clock even on systems without TscInvariant
    CPU capability. Hence, mark_tsc_unstable() call should be called _after_
    scheduler clock has been changed to the paravirtualized clocksource. This
    will prevent any unwanted manipulation of the sched_clock. Only TSC will
    be correctly marked as unstable.
    
    Signed-off-by: Ani Sinha <ani@anisinha.ca>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Tested-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20210713030522.1714803-1-ani@anisinha.ca
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit 330584716d4b5b9653608edc0adf7251bcd7e506
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Jul 9 10:37:45 2021 +0300

    clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940
    
    commit 25de4ce5ed02994aea8bc111d133308f6fd62566 upstream.
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm percpu timers instead.
    
    Let's configure dmtimer3 and 4 as percpu timers by default, and warn about
    the issue if the dtb is not configured properly.
    
    For more information, please see the errata for "AM572x Sitara Processors
    Silicon Revisions 1.1, 2.0":
    
    https://www.ti.com/lit/er/sprz429m/sprz429m.pdf
    
    The concept is based on earlier reference patches done by Tero Kristo and
    Keerthy.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    [tony@atomide.com: backported to 4.19.y]
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 123235223169d1a73e55fcd5d857be676207021f
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Jul 9 10:37:44 2021 +0300

    clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue
    
    commit 3efe7a878a11c13b5297057bfc1e5639ce1241ce upstream.
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm timers instead.
    
    Let's prepare for adding support for percpu timers by adding a common
    dmtimer_clkevt_init_common() and call it from __omap_sync32k_timer_init().
    This patch makes no intentional functional changes.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    [tony@atomide.com: backported to 4.19.y]
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78130e2e4e405d51f74cfebec47dd43ec6164277
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Jul 9 10:37:43 2021 +0300

    clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support
    
    commit 52762fbd1c4778ac9b173624ca0faacd22ef4724 upstream.
    
    We can move the TI dmtimer clockevent and clocksource to live under
    drivers/clocksource if we rely only on the clock framework, and handle
    the module configuration directly in the clocksource driver based on the
    device tree data.
    
    This removes the early dependency with system timers to the interconnect
    related code, and we can probe pretty much everything else later on at
    the module_init level.
    
    Let's first add a new driver for timer-ti-dm-systimer based on existing
    arch/arm/mach-omap2/timer.c. Then let's start moving SoCs to probe with
    device tree data while still keeping the old timer.c. And eventually we
    can just drop the old timer.c.
    
    Let's take the opportunity to switch to use readl/writel as pointed out
    by Daniel Lezcano <daniel.lezcano@linaro.org>. This allows further
    clean-up of the timer-ti-dm code the a lot of the shared helpers can
    just become static to the non-syster related code.
    
    Note the boards can optionally configure different timer source clocks
    if needed with assigned-clocks and assigned-clock-parents.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    [tony@atomide.com: backported to 4.19.y]
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19b438592238b3b40c3f945bb5f9c4ca971c0c45
Merge: a32b344e6f43 cf02ce742f09
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jul 1 17:03:11 2021 -0700

    Merge tag 'mips_5.14' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux
    
    Pull MIPS updates from Thomas Bogendoerfer:
    
     - add support for OpeneEmbed SOM9331 board
    
     - Ingenic fixes/improvments
    
     - other fixes and cleanups
    
    * tag 'mips_5.14' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux: (39 commits)
      MIPS: Fix PKMAP with 32-bit MIPS huge page support
      MIPS: CI20: Add second percpu timer for SMP.
      MIPS: CI20: Reduce clocksource to 750 kHz.
      MIPS: Ingenic: Add MAC syscon nodes for Ingenic SoCs.
      dt-bindings: clock: Add documentation for MAC PHY control bindings.
      MIPS: X1830: Respect cell count of common properties.
      MIPS: set mips32r5 for virt extensions
      MIPS: loongsoon64: Reserve memory below starting pfn to prevent Oops
      MIPS: MT extensions are not available on MIPS32r1
      mips/kvm: Use BUG_ON instead of if condition followed by BUG
      MIPS: OCTEON: octeon-usb: Use devm_platform_get_and_ioremap_resource()
      MIPS: add PMD table accounting into MIPS'pmd_alloc_one
      MIPS: Loongson64: fix spelling of SPDX tag
      MIPS: ingenic: rs90: Add dedicated VRAM memory region
      MIPS: ingenic: gcw0: Set codec to cap-less mode for FM radio
      MIPS: ingenic: jz4780: Fix I2C nodes to match DT doc
      MIPS: ingenic: Select CPU_SUPPORTS_CPUFREQ && MIPS_EXTERNAL_TIMER
      MIPS: Kconfig: ingenic: Ensure MACH_INGENIC_GENERIC selects all SoCs
      MIPS: cpu-probe: Fix FPU detection on Ingenic JZ4760(B)
      MIPS: boot: Support specifying UART port on Ingenic SoCs
      ...

commit 23c64447b3538a6f34cb38aae3bc19dc1ec53436
Author: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
Date:   Sat Jun 26 14:18:40 2021 +0800

    MIPS: CI20: Reduce clocksource to 750 kHz.
    
    The original clock (3 MHz) is too fast for the clocksource,
    there will be a chance that the system may get stuck.
    
    Reported-by: Nikolaus Schaller <hns@goldelico.com>
    Tested-by: Nikolaus Schaller <hns@goldelico.com> # on CI20
    Signed-off-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Acked-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

commit a941a0349cf11ed250a04864fef268c2e05a1d32
Merge: 21edf5094872 2d0a9eb23ccf
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jun 29 12:31:16 2021 -0700

    Merge tag 'timers-core-2021-06-29' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Time and clocksource/clockevent related updates:
    
      Core changes:
    
       - Infrastructure to support per CPU "broadcast" devices for per CPU
         clockevent devices which stop in deep idle states. This allows us
         to utilize the more efficient architected timer on certain ARM SoCs
         for normal operation instead of permanentely using the slow to
         access SoC specific clockevent device.
    
       - Print the name of the broadcast/wakeup device in /proc/timer_list
    
       - Make the clocksource watchdog more robust against delays between
         reading the current active clocksource and the watchdog
         clocksource. Such delays can be caused by NMIs, SMIs and vCPU
         preemption.
    
         Handle this by reading the watchdog clocksource twice, i.e. before
         and after reading the current active clocksource. In case that the
         two watchdog reads shows an excessive time delta, the read sequence
         is repeated up to 3 times.
    
       - Improve the debug output and add a test module for the watchdog
         mechanism.
    
       - Reimplementation of the venerable time64_to_tm() function with a
         faster and significantly smaller version. Straight from the source,
         i.e. the author of the related research paper contributed this!
    
      Driver changes:
    
       - No new drivers, not even new device tree bindings!
    
       - Fixes, improvements and cleanups and all over the place"
    
    * tag 'timers-core-2021-06-29' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (30 commits)
      time/kunit: Add missing MODULE_LICENSE()
      time: Improve performance of time64_to_tm()
      clockevents: Use list_move() instead of list_del()/list_add()
      clocksource: Print deviation in nanoseconds when a clocksource becomes unstable
      clocksource: Provide kernel module to test clocksource watchdog
      clocksource: Reduce clocksource-skew threshold
      clocksource: Limit number of CPUs checked for clock synchronization
      clocksource: Check per-CPU clock synchronization when marked unstable
      clocksource: Retry clock read if long delays detected
      clockevents: Add missing parameter documentation
      clocksource/drivers/timer-ti-dm: Drop unnecessary restore
      clocksource/arm_arch_timer: Improve Allwinner A64 timer workaround
      clocksource/drivers/arm_global_timer: Remove duplicated argument in arm_global_timer
      clocksource/drivers/arm_global_timer: Make symbol 'gt_clk_rate_change_nb' static
      arm: zynq: don't disable CONFIG_ARM_GLOBAL_TIMER due to CONFIG_CPU_FREQ anymore
      clocksource/drivers/arm_global_timer: Implement rate compensation whenever source clock changes
      clocksource/drivers/ingenic: Rename unreasonable array names
      clocksource/drivers/timer-ti-dm: Save and restore timer TIOCP_CFG
      clocksource/drivers/mediatek: Ack and disable interrupts on suspend
      clocksource/drivers/samsung_pwm: Constify source IO memory
      ...

commit 5babc39775651a15fdb701b23f8c2b2cec6cc168
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Jun 16 15:31:12 2021 +0300

    clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940
    
    commit 25de4ce5ed02994aea8bc111d133308f6fd62566 upstream.
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm percpu timers instead.
    
    Let's configure dmtimer3 and 4 as percpu timers by default, and warn about
    the issue if the dtb is not configured properly.
    
    For more information, please see the errata for "AM572x Sitara Processors
    Silicon Revisions 1.1, 2.0":
    
    https://www.ti.com/lit/er/sprz429m/sprz429m.pdf
    
    The concept is based on earlier reference patches done by Tero Kristo and
    Keerthy.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    [tony@atomide.com: backported to 5.4.y]
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aad8f1d88ed6a60b8fd1d5298a8bfe10002d3610
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Jun 16 15:31:11 2021 +0300

    clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue
    
    commit 3efe7a878a11c13b5297057bfc1e5639ce1241ce upstream.
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm timers instead.
    
    Let's prepare for adding support for percpu timers by adding a common
    dmtimer_clkevt_init_common() and call it from __omap_sync32k_timer_init().
    This patch makes no intentional functional changes.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    [tony@atomide.com: backported to 5.4.y]
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5394080643bc84e9b5b303f44ce2569c4a415918
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Jun 16 15:31:10 2021 +0300

    clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support
    
    commit 52762fbd1c4778ac9b173624ca0faacd22ef4724 upstream.
    
    We can move the TI dmtimer clockevent and clocksource to live under
    drivers/clocksource if we rely only on the clock framework, and handle
    the module configuration directly in the clocksource driver based on the
    device tree data.
    
    This removes the early dependency with system timers to the interconnect
    related code, and we can probe pretty much everything else later on at
    the module_init level.
    
    Let's first add a new driver for timer-ti-dm-systimer based on existing
    arch/arm/mach-omap2/timer.c. Then let's start moving SoCs to probe with
    device tree data while still keeping the old timer.c. And eventually we
    can just drop the old timer.c.
    
    Let's take the opportunity to switch to use readl/writel as pointed out
    by Daniel Lezcano <daniel.lezcano@linaro.org>. This allows further
    clean-up of the timer-ti-dm code the a lot of the shared helpers can
    just become static to the non-syster related code.
    
    Note the boards can optionally configure different timer source clocks
    if needed with assigned-clocks and assigned-clock-parents.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    [tony@atomide.com: backported to 5.4.y]
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22a22383371667962b46bd90d534cc57669537ac
Author: Feng Tang <feng.tang@intel.com>
Date:   Thu May 27 12:01:24 2021 -0700

    clocksource: Print deviation in nanoseconds when a clocksource becomes unstable
    
    Currently when an unstable clocksource is detected, the raw counters of
    that clocksource and watchdog will be printed, which can only be understood
    after some math calculation.
    
    So print the delta in nanoseconds as well to make it easier for humans to
    check the results.
    
    [ paulmck: Fix typo. ]
    
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20210527190124.440372-6-paulmck@kernel.org

commit 1253b9b87e42ab6a3d5c2cb27af2bdd67d7e50ff
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:23 2021 -0700

    clocksource: Provide kernel module to test clocksource watchdog
    
    When the clocksource watchdog marks a clock as unstable, this might
    be due to that clock being unstable or it might be due to delays that
    happen to occur between the reads of the two clocks.  It would be good
    to have a way of testing the clocksource watchdog's ability to
    distinguish between these two causes of clock skew and instability.
    
    Therefore, provide a new clocksource-wdtest module selected by a new
    TEST_CLOCKSOURCE_WATCHDOG Kconfig option.  This module has a single module
    parameter named "holdoff" that provides the number of seconds of delay
    before testing should start, which defaults to zero when built as a module
    and to 10 seconds when built directly into the kernel.  Very large systems
    that boot slowly may need to increase the value of this module parameter.
    
    This module uses hand-crafted clocksource structures to do its testing,
    thus avoiding messing up timing for the rest of the kernel and for user
    applications.  This module first verifies that the ->uncertainty_margin
    field of the clocksource structures are set sanely.  It then tests the
    delay-detection capability of the clocksource watchdog, increasing the
    number of consecutive delays injected, first provoking console messages
    complaining about the delays and finally forcing a clock-skew event.
    Unexpected test results cause at least one WARN_ON_ONCE() console splat.
    If there are no splats, the test has passed.  Finally, it fuzzes the
    value returned from a clocksource to test the clocksource watchdog's
    ability to detect time skew.
    
    This module checks the state of its clocksource after each test, and
    uses WARN_ON_ONCE() to emit a console splat if there are any failures.
    This should enable all types of test frameworks to detect any such
    failures.
    
    This facility is intended for diagnostic use only, and should be avoided
    on production systems.
    
    Reported-by: Chris Mason <clm@fb.com>
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-5-paulmck@kernel.org

commit 2e27e793e280ff12cb5c202a1214c08b0d3a0f26
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:22 2021 -0700

    clocksource: Reduce clocksource-skew threshold
    
    Currently, WATCHDOG_THRESHOLD is set to detect a 62.5-millisecond skew in
    a 500-millisecond WATCHDOG_INTERVAL.  This requires that clocks be skewed
    by more than 12.5% in order to be marked unstable.  Except that a clock
    that is skewed by that much is probably destroying unsuspecting software
    right and left.  And given that there are now checks for false-positive
    skews due to delays between reading the two clocks, it should be possible
    to greatly decrease WATCHDOG_THRESHOLD, at least for fine-grained clocks
    such as TSC.
    
    Therefore, add a new uncertainty_margin field to the clocksource structure
    that contains the maximum uncertainty in nanoseconds for the corresponding
    clock.  This field may be initialized manually, as it is for
    clocksource_tsc_early and clocksource_jiffies, which is copied to
    refined_jiffies.  If the field is not initialized manually, it will be
    computed at clock-registry time as the period of the clock in question
    based on the scale and freq parameters to __clocksource_update_freq_scale()
    function.  If either of those two parameters are zero, the
    tens-of-milliseconds WATCHDOG_THRESHOLD is used as a cowardly alternative
    to dividing by zero.  No matter how the uncertainty_margin field is
    calculated, it is bounded below by twice WATCHDOG_MAX_SKEW, that is, by 100
    microseconds.
    
    Note that manually initialized uncertainty_margin fields are not adjusted,
    but there is a WARN_ON_ONCE() that triggers if any such field is less than
    twice WATCHDOG_MAX_SKEW.  This WARN_ON_ONCE() is intended to discourage
    production use of the one-nanosecond uncertainty_margin values that are
    used to test the clock-skew code itself.
    
    The actual clock-skew check uses the sum of the uncertainty_margin fields
    of the two clocksource structures being compared.  Integer overflow is
    avoided because the largest computed value of the uncertainty_margin
    fields is one billion (10^9), and double that value fits into an
    unsigned int.  However, if someone manually specifies (say) UINT_MAX,
    they will get what they deserve.
    
    Note that the refined_jiffies uncertainty_margin field is initialized to
    TICK_NSEC, which means that skew checks involving this clocksource will
    be sufficently forgiving.  In a similar vein, the clocksource_tsc_early
    uncertainty_margin field is initialized to 32*NSEC_PER_MSEC, which
    replicates the current behavior and allows custom setting if needed
    in order to address the rare skews detected for this clocksource in
    current mainline.
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-4-paulmck@kernel.org

commit fa218f1cce6ba40069c8daab8821de7e6be1cdd0
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:21 2021 -0700

    clocksource: Limit number of CPUs checked for clock synchronization
    
    Currently, if skew is detected on a clock marked CLOCK_SOURCE_VERIFY_PERCPU,
    that clock is checked on all CPUs.  This is thorough, but might not be
    what you want on a system with a few tens of CPUs, let alone a few hundred
    of them.
    
    Therefore, by default check only up to eight randomly chosen CPUs.  Also
    provide a new clocksource.verify_n_cpus kernel boot parameter.  A value of
    -1 says to check all of the CPUs, and a non-negative value says to randomly
    select that number of CPUs, without concern about selecting the same CPU
    multiple times.  However, make use of a cpumask so that a given CPU will be
    checked at most once.
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de> # For verify_n_cpus=1.
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-3-paulmck@kernel.org

commit 7560c02bdffb7c52d1457fa551b9e745d4b9e754
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:20 2021 -0700

    clocksource: Check per-CPU clock synchronization when marked unstable
    
    Some sorts of per-CPU clock sources have a history of going out of
    synchronization with each other.  However, this problem has purportedy been
    solved in the past ten years.  Except that it is all too possible that the
    problem has instead simply been made less likely, which might mean that
    some of the occasional "Marking clocksource 'tsc' as unstable" messages
    might be due to desynchronization.  How would anyone know?
    
    Therefore apply CPU-to-CPU synchronization checking to newly unstable
    clocksource that are marked with the new CLOCK_SOURCE_VERIFY_PERCPU flag.
    Lists of desynchronized CPUs are printed, with the caveat that if it
    is the reporting CPU that is itself desynchronized, it will appear that
    all the other clocks are wrong.  Just like in real life.
    
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-2-paulmck@kernel.org

commit db3a34e17433de2390eb80d436970edcebd0ca3e
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu May 27 12:01:19 2021 -0700

    clocksource: Retry clock read if long delays detected
    
    When the clocksource watchdog marks a clock as unstable, this might be due
    to that clock being unstable or it might be due to delays that happen to
    occur between the reads of the two clocks.  Yes, interrupts are disabled
    across those two reads, but there are no shortage of things that can delay
    interrupts-disabled regions of code ranging from SMI handlers to vCPU
    preemption.  It would be good to have some indication as to why the clock
    was marked unstable.
    
    Therefore, re-read the watchdog clock on either side of the read from the
    clock under test.  If the watchdog clock shows an excessive time delta
    between its pair of reads, the reads are retried.
    
    The maximum number of retries is specified by a new kernel boot parameter
    clocksource.max_cswd_read_retries, which defaults to three, that is, up to
    four reads, one initial and up to three retries.  If more than one retry
    was required, a message is printed on the console (the occasional single
    retry is expected behavior, especially in guest OSes).  If the maximum
    number of retries is exceeded, the clock under test will be marked
    unstable.  However, the probability of this happening due to various sorts
    of delays is quite small.  In addition, the reason (clock-read delays) for
    the unstable marking will be apparent.
    
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210527190124.440372-1-paulmck@kernel.org

commit 3d41fff3ae3980c055f3c7861264c46c924f3e4c
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue May 18 10:53:06 2021 +0300

    clocksource/drivers/timer-ti-dm: Drop unnecessary restore
    
    The device is not losing context on CPU_CLUSTER_PM_ERROR. As we are only
    saving and restoring context with cpu_pm, there is no need to restore the
    context in case of an error.
    
    Note that the unnecessary restoring of context does not cause issues, it's
    just not needed.
    
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210518075306.35532-1-tony@atomide.com

commit 8b33dfe0ba1c84c1aab2456590b38195837f1e6e
Author: Samuel Holland <samuel@sholland.org>
Date:   Fri May 14 21:14:39 2021 -0500

    clocksource/arm_arch_timer: Improve Allwinner A64 timer workaround
    
    Bad counter reads are experienced sometimes when bit 10 or greater rolls
    over. Originally, testing showed that at least 10 lower bits would be
    set to the same value during these bad reads. However, some users still
    reported time skips.
    
    Wider testing revealed that on some chips, occasionally only the lowest
    9 bits would read as the anomalous value. During these reads (which
    still happen only when bit 10), bit 9 would read as the correct value.
    
    Reduce the mask by one bit to cover these cases as well.
    
    Cc: stable@vger.kernel.org
    Fixes: c950ca8c35ee ("clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability")
    Reported-by: Roman Stratiienko <r.stratiienko@gmail.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210515021439.55316-1-samuel@sholland.org

commit f94bc2667fb204d7c131ac39d9ea342bd16116dc
Author: Wan Jiabing <wanjiabing@vivo.com>
Date:   Tue Jun 15 19:54:40 2021 +0800

    clocksource/drivers/arm_global_timer: Remove duplicated argument in arm_global_timer
    
    Fix the following coccicheck warning:
    
        drivers/clocksource/arm_global_timer.c:107:4-23:
        duplicated argument to & or |
    
    Signed-off-by: Wan Jiabing <wanjiabing@vivo.com>
    Reviewed-by: Patrice Chotard <patrice.chotard@foss.st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210615115440.8881-1-wanjiabing@vivo.com

commit be534f8ee137b95046d7c53c8200ffdcf05781a7
Author: Zou Wei <zou_wei@huawei.com>
Date:   Sat Jun 12 17:27:26 2021 +0800

    clocksource/drivers/arm_global_timer: Make symbol 'gt_clk_rate_change_nb' static
    
    The sparse tool complains as follows:
    
    drivers/clocksource/arm_global_timer.c:54:23: warning:
     symbol 'gt_clk_rate_change_nb' was not declared. Should it be static?
    
    This symbol is not used outside of arm_global_timer.c, so mark it static.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1623490046-37972-1-git-send-email-zou_wei@huawei.com

commit 171b45a4a70eef2fd36bb794ce4f5a48c440361e
Author: Andrea Merello <andrea.merello@gmail.com>
Date:   Tue Apr 6 15:00:44 2021 +0200

    clocksource/drivers/arm_global_timer: Implement rate compensation whenever source clock changes
    
    This patch adds rate change notification support for the parent clock;
    should that clock change, then we try to adjust the our prescaler in order
    to compensate (i.e. we adjust to still get the same timer frequency).
    
    This is loosely based on what it's done in timer-cadence-ttc. timer-sun51,
    mips-gic-timer and smp_twd.c also seem to look at their parent clock rate
    and to perform some kind of adjustment whenever needed.
    
    In this particular case we have only one single counter and prescaler for
    all clocksource, clockevent and timer_delay, and we just update it for all
    (i.e. we don't let it go and call clockevents_update_freq() to notify to
    the kernel that our rate has changed).
    
    Note that, there is apparently no other way to fixup things, because once
    we call register_current_timer_delay(), specifying the timer rate, it seems
    that that rate is not supposed to change ever.
    
    In order for this mechanism to work, we have to make assumptions about how
    much the initial clock is supposed to eventually decrease from the initial
    one, and set our initial prescaler to a value that we can eventually
    decrease enough to compensate. We provide an option in KConfig for this.
    
    In case we end up in a situation in which we are not able to compensate the
    parent clock change, we fail returning NOTIFY_BAD.
    
    This fixes a real-world problem with Zynq arch not being able to use this
    driver and CPU_FREQ at the same time (because ARM global timer is fed by
    the CPU clock, which may keep changing when CPU_FREQ is enabled).
    
    Signed-off-by: Andrea Merello <andrea.merello@gmail.com>
    Cc: Patrice Chotard <patrice.chotard@st.com>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Sören Brinkmann <soren.brinkmann@xilinx.com>
    Reviewed-by: Patrice Chotard <patrice.chotard@foss.st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210406130045.15491-2-andrea.merello@gmail.com

commit 870a6e1539829356baf70b57c933d0b309cfac21
Author: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
Date:   Sat Jun 5 00:31:45 2021 +0800

    clocksource/drivers/ingenic: Rename unreasonable array names
    
    1.Rename the "ingenic_ost_clk_info[]" to "x1000_ost_clk_info[]" to
      facilitate the addition of OST support for X2000 SoC in a later
      commit
    
    2.When the OST support for X2000 SoC is added, there will be two
      compatible strings, so renaming "ingenic_ost_of_match[]" to
      "ingenic_ost_of_matches[]" is more reasonable
    
    3.Remove the unnecessary comma in "ingenic_ost_of_matches[]" to reduce
      code size as much as possible.
    
    Signed-off-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1622824306-30987-2-git-send-email-zhouyanjie@wanyeetech.com

commit 9517c577f9f722270584cfb1a7b4e1354e408658
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Apr 15 11:55:06 2021 +0300

    clocksource/drivers/timer-ti-dm: Save and restore timer TIOCP_CFG
    
    As we are using cpu_pm to save and restore context, we must also save and
    restore the timer sysconfig register TIOCP_CFG. This is needed because
    we are not calling PM runtime functions at all with cpu_pm.
    
    Fixes: b34677b0999a ("clocksource/drivers/timer-ti-dm: Implement cpu_pm notifier for context save and restore")
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Adam Ford <aford173@gmail.com>
    Cc: Andreas Kemnade <andreas@kemnade.info>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210415085506.56828-1-tony@atomide.com

commit 75ac5cc2ee6b499bc0225ad67302271772929f19
Author: Evan Benn <evanbenn@chromium.org>
Date:   Wed May 12 12:25:44 2021 +1000

    clocksource/drivers/mediatek: Ack and disable interrupts on suspend
    
    Interrupts are disabled during suspend before this driver disables its
    timers. ARM trusted firmware will abort suspend if the timer irq is
    pending, so ack and disable the timer interrupt during suspend.
    
    Signed-off-by: Evan Benn <evanbenn@chromium.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210512122528.v4.1.I1d9917047de06715da16e1620759f703fcfdcbcb@changeid

commit 3ff340e24c9dd5cff9fc07d67914c5adf67f80d6
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Jun 11 08:42:50 2021 +0300

    bus: ti-sysc: Fix gpt12 system timer issue with reserved status
    
    Jarkko Nikula <jarkko.nikula@bitmer.com> reported that Beagleboard
    revision c2 stopped booting. Jarkko bisected the issue down to
    commit 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend
    and resume for am3 and am4").
    
    Let's fix the issue by tagging system timers as reserved rather than
    ignoring them. And let's not probe any interconnect target module child
    devices for reserved modules.
    
    This allows PM runtime to keep track of clocks and clockdomains for
    the interconnect target module, and prevent the system timer from idling
    as we already have SYSC_QUIRK_NO_IDLE and SYSC_QUIRK_NO_IDLE_ON_INIT
    flags set for system timers.
    
    Fixes: 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend and resume for am3 and am4")
    Reported-by: Jarkko Nikula <jarkko.nikula@bitmer.com>
    Tested-by: Jarkko Nikula <jarkko.nikula@bitmer.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 1df2dc09926f61319116c80ee85701df33577d70
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Tue Jun 1 09:16:43 2021 +0200

    x86/kvm: Disable kvmclock on all CPUs on shutdown
    
    commit c02027b5742b5aa804ef08a4a9db433295533046 upstream.
    
    Currenly, we disable kvmclock from machine_shutdown() hook and this
    only happens for boot CPU. We need to disable it for all CPUs to
    guard against memory corruption e.g. on restore from hibernate.
    
    Note, writing '0' to kvmclock MSR doesn't clear memory location, it
    just prevents hypervisor from updating the location so for the short
    while after write and while CPU is still alive, the clock remains usable
    and correct so we don't need to switch to some other clocksource.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210414123544.1060604-4-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b0becf8b1ecf642a9edaf4c9628ffc641e490d6
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Mon May 31 16:05:25 2021 +0200

    x86/kvm: Disable kvmclock on all CPUs on shutdown
    
    commit c02027b5742b5aa804ef08a4a9db433295533046 upstream.
    
    Currenly, we disable kvmclock from machine_shutdown() hook and this
    only happens for boot CPU. We need to disable it for all CPUs to
    guard against memory corruption e.g. on restore from hibernate.
    
    Note, writing '0' to kvmclock MSR doesn't clear memory location, it
    just prevents hypervisor from updating the location so for the short
    while after write and while CPU is still alive, the clock remains usable
    and correct so we don't need to switch to some other clocksource.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210414123544.1060604-4-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9084fe1b3572664ad276f427dce575f580c9799a
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Mon May 31 16:03:46 2021 +0200

    x86/kvm: Disable kvmclock on all CPUs on shutdown
    
    commit c02027b5742b5aa804ef08a4a9db433295533046 upstream.
    
    Currenly, we disable kvmclock from machine_shutdown() hook and this
    only happens for boot CPU. We need to disable it for all CPUs to
    guard against memory corruption e.g. on restore from hibernate.
    
    Note, writing '0' to kvmclock MSR doesn't clear memory location, it
    just prevents hypervisor from updating the location so for the short
    while after write and while CPU is still alive, the clock remains usable
    and correct so we don't need to switch to some other clocksource.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210414123544.1060604-4-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4318ce203db8f8b7004e7ab82a957f894660c88
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Thu May 6 16:27:28 2021 -0400

    clocksource/drivers/samsung_pwm: Constify source IO memory
    
    The 'source_reg' IO memory is only read, so the pointer can point to
    const for safety.
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210506202729.157260-4-krzysztof.kozlowski@canonical.com

commit 63e83bd8cd848a3d1b4777d90635a309fa9cb2c7
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Thu May 6 16:27:27 2021 -0400

    clocksource/drivers/samsung_pwm: Cleanup on init error
    
    Failure of timer initialization is likely to be fatal for the system, so
    cleanup in such case is not strictly necessary.  However the code might
    be refactored or reused, so better not to rely on such assumption that
    system won't continue init failure.
    
    Unmap the IO memory and put the clock on initialization failures from
    devicetree.
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210506202729.157260-3-krzysztof.kozlowski@canonical.com

commit bb08e96575dbbd49acb49999dd0d7ffedb5c1608
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Thu May 6 16:27:26 2021 -0400

    clocksource/drivers/samsung_pwm: Constify passed structure
    
    The 'struct samsung_pwm_variant' argument passed to initialization
    functions is not modified, so it can be made const for safety.
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210506202729.157260-2-krzysztof.kozlowski@canonical.com

commit a0143f5ac0594d73ef91c2336d8172217ff9cd72
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Thu May 6 16:27:25 2021 -0400

    clocksource/drivers/samsung_pwm: Minor whitespace cleanup
    
    Cleanup the code to be slightly more readable and follow coding
    convention - only whitespace.  This fixes checkpatch warnings:
    
      WARNING: Block comments should align the * on each line
      WARNING: please, no space before tabs
      WARNING: Missing a blank line after declarations
      CHECK: Alignment should match open parenthesis
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210506202729.157260-1-krzysztof.kozlowski@canonical.com

commit 4f9f4f0f6261e4b162dfcaf91e08824a7c93da07
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Tue May 11 15:48:56 2021 +0800

    clocksource/drivers/arm_arch_timer: Remove arch_timer_rate1
    
    This variable is added by my mistake, it's not used at all.
    
    Fixes: e2bf384d4329 ("clocksource/drivers/arm_arch_timer: Add __ro_after_init and __init")
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210511154856.6afbcb65@xhacker.debian

commit a6419e53c779302f8d5dd409eccf5b41ffa184a4
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Thu May 6 16:27:29 2021 -0400

    MAINTAINERS: Include Samsung PWM in Samsung SoC entry
    
    The Samsung PWM and PWM-based timer/clocksource drivers lacked dedicated
    maintainers entry.  They are used on all Samsung SoC designs (although
    timer/clocksource driver only on older platforms), so include them in
    Samsung SoC entry maintained by Krzysztof Kozlowski.
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20210506202729.157260-5-krzysztof.kozlowski@canonical.com

commit de1a153bcd79f2a226c85f0027d3f0dbac5abcac
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 5 23:48:17 2021 +0200

    KVM: x86: Cancel pvclock_gtod_work on module removal
    
    commit 594b27e677b35f9734b1969d175ebc6146741109 upstream.
    
    Nothing prevents the following:
    
      pvclock_gtod_notify()
        queue_work(system_long_wq, &pvclock_gtod_work);
      ...
      remove_module(kvm);
      ...
      work_queue_run()
        pvclock_gtod_work() <- UAF
    
    Ditto for any other operation on that workqueue list head which touches
    pvclock_gtod_work after module removal.
    
    Cancel the work in kvm_arch_exit() to prevent that.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87czu4onry.ffs@nanos.tec.linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65440d2bcec2d66a6b58eafd112bbddc7636c053
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 5 23:48:17 2021 +0200

    KVM: x86: Cancel pvclock_gtod_work on module removal
    
    commit 594b27e677b35f9734b1969d175ebc6146741109 upstream.
    
    Nothing prevents the following:
    
      pvclock_gtod_notify()
        queue_work(system_long_wq, &pvclock_gtod_work);
      ...
      remove_module(kvm);
      ...
      work_queue_run()
        pvclock_gtod_work() <- UAF
    
    Ditto for any other operation on that workqueue list head which touches
    pvclock_gtod_work after module removal.
    
    Cancel the work in kvm_arch_exit() to prevent that.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87czu4onry.ffs@nanos.tec.linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eeebfa16b60107c8959189738914381327715ebc
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 5 23:48:17 2021 +0200

    KVM: x86: Cancel pvclock_gtod_work on module removal
    
    commit 594b27e677b35f9734b1969d175ebc6146741109 upstream.
    
    Nothing prevents the following:
    
      pvclock_gtod_notify()
        queue_work(system_long_wq, &pvclock_gtod_work);
      ...
      remove_module(kvm);
      ...
      work_queue_run()
        pvclock_gtod_work() <- UAF
    
    Ditto for any other operation on that workqueue list head which touches
    pvclock_gtod_work after module removal.
    
    Cancel the work in kvm_arch_exit() to prevent that.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87czu4onry.ffs@nanos.tec.linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5822103eb6af0acc30b06f545078666781044172
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 5 23:48:17 2021 +0200

    KVM: x86: Cancel pvclock_gtod_work on module removal
    
    commit 594b27e677b35f9734b1969d175ebc6146741109 upstream.
    
    Nothing prevents the following:
    
      pvclock_gtod_notify()
        queue_work(system_long_wq, &pvclock_gtod_work);
      ...
      remove_module(kvm);
      ...
      work_queue_run()
        pvclock_gtod_work() <- UAF
    
    Ditto for any other operation on that workqueue list head which touches
    pvclock_gtod_work after module removal.
    
    Cancel the work in kvm_arch_exit() to prevent that.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87czu4onry.ffs@nanos.tec.linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8aeb722aeac7110a2f9023bba46a0c2e6e88b66
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 23 09:43:26 2021 +0200

    clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940
    
    commit 25de4ce5ed02994aea8bc111d133308f6fd62566 upstream.
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm percpu timers instead.
    
    Let's configure dmtimer3 and 4 as percpu timers by default, and warn about
    the issue if the dtb is not configured properly.
    
    Let's do this as a single patch so it can be backported to v5.8 and later
    kernels easily. Note that this patch depends on earlier timer-ti-dm
    systimer posted mode fixes, and a preparatory clockevent patch
    "clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue".
    
    For more information, please see the errata for "AM572x Sitara Processors
    Silicon Revisions 1.1, 2.0":
    
    https://www.ti.com/lit/er/sprz429m/sprz429m.pdf
    
    The concept is based on earlier reference patches done by Tero Kristo and
    Keerthy.
    
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210323074326.28302-3-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be50eafb7ddf7c89514e3122fd102b4c425715be
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 23 09:43:25 2021 +0200

    clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue
    
    commit 3efe7a878a11c13b5297057bfc1e5639ce1241ce upstream.
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm timers instead.
    
    Let's prepare for adding support for percpu timers by adding a common
    dmtimer_clkevt_init_common() and call it from dmtimer_clockevent_init().
    This patch makes no intentional functional changes.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210323074326.28302-2-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80fae432eb8d3a3455d74190cf054c516809cac1
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu May 6 15:21:37 2021 +0200

    KVM: x86: Prevent deadlock against tk_core.seq
    
    [ Upstream commit 3f804f6d201ca93adf4c3df04d1bfd152c1129d6 ]
    
    syzbot reported a possible deadlock in pvclock_gtod_notify():
    
    CPU 0                                       CPU 1
    write_seqcount_begin(&tk_core.seq);
      pvclock_gtod_notify()                     spin_lock(&pool->lock);
        queue_work(..., &pvclock_gtod_work)     ktime_get()
         spin_lock(&pool->lock);                  do {
                                                    seq = read_seqcount_begin(tk_core.seq)
                                                    ...
                                                  } while (read_seqcount_retry(&tk_core.seq, seq);
    
    While this is unlikely to happen, it's possible.
    
    Delegate queue_work() to irq_work() which postpones it until the
    tk_core.seq write held region is left and interrupts are reenabled.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Reported-by: syzbot+6beae4000559d41d80f8@syzkaller.appspotmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87h7jgm1zy.ffs@nanos.tec.linutronix.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 171895f5b596780f125601469e12d8f61cd7af49
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 5 23:48:17 2021 +0200

    KVM: x86: Cancel pvclock_gtod_work on module removal
    
    [ Upstream commit 594b27e677b35f9734b1969d175ebc6146741109 ]
    
    Nothing prevents the following:
    
      pvclock_gtod_notify()
        queue_work(system_long_wq, &pvclock_gtod_work);
      ...
      remove_module(kvm);
      ...
      work_queue_run()
        pvclock_gtod_work() <- UAF
    
    Ditto for any other operation on that workqueue list head which touches
    pvclock_gtod_work after module removal.
    
    Cancel the work in kvm_arch_exit() to prevent that.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87czu4onry.ffs@nanos.tec.linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67c080e011c4026a8becf3cdab29d4e1169b4634
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 23 09:43:26 2021 +0200

    clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940
    
    commit 25de4ce5ed02994aea8bc111d133308f6fd62566 upstream.
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm percpu timers instead.
    
    Let's configure dmtimer3 and 4 as percpu timers by default, and warn about
    the issue if the dtb is not configured properly.
    
    Let's do this as a single patch so it can be backported to v5.8 and later
    kernels easily. Note that this patch depends on earlier timer-ti-dm
    systimer posted mode fixes, and a preparatory clockevent patch
    "clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue".
    
    For more information, please see the errata for "AM572x Sitara Processors
    Silicon Revisions 1.1, 2.0":
    
    https://www.ti.com/lit/er/sprz429m/sprz429m.pdf
    
    The concept is based on earlier reference patches done by Tero Kristo and
    Keerthy.
    
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210323074326.28302-3-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4a976a27a48343e691135aad74cb7bde2cf0ddf
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 23 09:43:25 2021 +0200

    clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue
    
    commit 3efe7a878a11c13b5297057bfc1e5639ce1241ce upstream.
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm timers instead.
    
    Let's prepare for adding support for percpu timers by adding a common
    dmtimer_clkevt_init_common() and call it from dmtimer_clockevent_init().
    This patch makes no intentional functional changes.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210323074326.28302-2-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4638f7b7988dc7b4a06ccb9ba3bc6bd98160aea
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu May 6 15:21:37 2021 +0200

    KVM: x86: Prevent deadlock against tk_core.seq
    
    [ Upstream commit 3f804f6d201ca93adf4c3df04d1bfd152c1129d6 ]
    
    syzbot reported a possible deadlock in pvclock_gtod_notify():
    
    CPU 0                                       CPU 1
    write_seqcount_begin(&tk_core.seq);
      pvclock_gtod_notify()                     spin_lock(&pool->lock);
        queue_work(..., &pvclock_gtod_work)     ktime_get()
         spin_lock(&pool->lock);                  do {
                                                    seq = read_seqcount_begin(tk_core.seq)
                                                    ...
                                                  } while (read_seqcount_retry(&tk_core.seq, seq);
    
    While this is unlikely to happen, it's possible.
    
    Delegate queue_work() to irq_work() which postpones it until the
    tk_core.seq write held region is left and interrupts are reenabled.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Reported-by: syzbot+6beae4000559d41d80f8@syzkaller.appspotmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87h7jgm1zy.ffs@nanos.tec.linutronix.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71479ab28b5ef62f206a66533bd0226f6c84f435
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 5 23:48:17 2021 +0200

    KVM: x86: Cancel pvclock_gtod_work on module removal
    
    [ Upstream commit 594b27e677b35f9734b1969d175ebc6146741109 ]
    
    Nothing prevents the following:
    
      pvclock_gtod_notify()
        queue_work(system_long_wq, &pvclock_gtod_work);
      ...
      remove_module(kvm);
      ...
      work_queue_run()
        pvclock_gtod_work() <- UAF
    
    Ditto for any other operation on that workqueue list head which touches
    pvclock_gtod_work after module removal.
    
    Cancel the work in kvm_arch_exit() to prevent that.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87czu4onry.ffs@nanos.tec.linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d5fda434b1f46c22ce3cde04729005dfb2eb2d6
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 23 09:43:26 2021 +0200

    clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940
    
    commit 25de4ce5ed02994aea8bc111d133308f6fd62566 upstream.
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm percpu timers instead.
    
    Let's configure dmtimer3 and 4 as percpu timers by default, and warn about
    the issue if the dtb is not configured properly.
    
    Let's do this as a single patch so it can be backported to v5.8 and later
    kernels easily. Note that this patch depends on earlier timer-ti-dm
    systimer posted mode fixes, and a preparatory clockevent patch
    "clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue".
    
    For more information, please see the errata for "AM572x Sitara Processors
    Silicon Revisions 1.1, 2.0":
    
    https://www.ti.com/lit/er/sprz429m/sprz429m.pdf
    
    The concept is based on earlier reference patches done by Tero Kristo and
    Keerthy.
    
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210323074326.28302-3-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06470de53e4f95fd8f2e608115dbac440ccf9007
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 23 09:43:25 2021 +0200

    clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue
    
    commit 3efe7a878a11c13b5297057bfc1e5639ce1241ce upstream.
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm timers instead.
    
    Let's prepare for adding support for percpu timers by adding a common
    dmtimer_clkevt_init_common() and call it from dmtimer_clockevent_init().
    This patch makes no intentional functional changes.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210323074326.28302-2-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9c663dc9a83c655853bc56c99fc747fe1c72e98
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu May 6 15:21:37 2021 +0200

    KVM: x86: Prevent deadlock against tk_core.seq
    
    [ Upstream commit 3f804f6d201ca93adf4c3df04d1bfd152c1129d6 ]
    
    syzbot reported a possible deadlock in pvclock_gtod_notify():
    
    CPU 0                                       CPU 1
    write_seqcount_begin(&tk_core.seq);
      pvclock_gtod_notify()                     spin_lock(&pool->lock);
        queue_work(..., &pvclock_gtod_work)     ktime_get()
         spin_lock(&pool->lock);                  do {
                                                    seq = read_seqcount_begin(tk_core.seq)
                                                    ...
                                                  } while (read_seqcount_retry(&tk_core.seq, seq);
    
    While this is unlikely to happen, it's possible.
    
    Delegate queue_work() to irq_work() which postpones it until the
    tk_core.seq write held region is left and interrupts are reenabled.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Reported-by: syzbot+6beae4000559d41d80f8@syzkaller.appspotmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87h7jgm1zy.ffs@nanos.tec.linutronix.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8aa7227a5d9b4ff8ea42bf653fbf8c08d7744e9d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 5 23:48:17 2021 +0200

    KVM: x86: Cancel pvclock_gtod_work on module removal
    
    [ Upstream commit 594b27e677b35f9734b1969d175ebc6146741109 ]
    
    Nothing prevents the following:
    
      pvclock_gtod_notify()
        queue_work(system_long_wq, &pvclock_gtod_work);
      ...
      remove_module(kvm);
      ...
      work_queue_run()
        pvclock_gtod_work() <- UAF
    
    Ditto for any other operation on that workqueue list head which touches
    pvclock_gtod_work after module removal.
    
    Cancel the work in kvm_arch_exit() to prevent that.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87czu4onry.ffs@nanos.tec.linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 187598fd82cb0ad4f3f24fe20252e0d79ee04a95
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 5 23:48:17 2021 +0200

    KVM: x86: Cancel pvclock_gtod_work on module removal
    
    commit 594b27e677b35f9734b1969d175ebc6146741109 upstream.
    
    Nothing prevents the following:
    
      pvclock_gtod_notify()
        queue_work(system_long_wq, &pvclock_gtod_work);
      ...
      remove_module(kvm);
      ...
      work_queue_run()
        pvclock_gtod_work() <- UAF
    
    Ditto for any other operation on that workqueue list head which touches
    pvclock_gtod_work after module removal.
    
    Cancel the work in kvm_arch_exit() to prevent that.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87czu4onry.ffs@nanos.tec.linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ce3648158d7bc9e5035d5a1db02c892905babbf
Merge: f44e58bb1905 3486d2c9be65
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun May 16 09:42:13 2021 -0700

    Merge tag 'timers-urgent-2021-05-16' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "Two fixes for timers:
    
       - Use the ALARM feature check in the alarmtimer core code insted of
         the old method of checking for the set_alarm() callback.
    
         Drivers can have that callback set but the feature bit cleared. If
         such a RTC device is selected then alarms wont work.
    
       - Use a proper define to let the preprocessor check whether Hyper-V
         VDSO clocksource should be active.
    
         The code used a constant in an enum with #ifdef, which evaluates to
         always false and disabled the clocksource for VDSO"
    
    * tag 'timers-urgent-2021-05-16' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/hyper-v: Re-enable VDSO_CLOCKMODE_HVCLOCK on X86
      alarmtimer: Check RTC features instead of ops

commit 3486d2c9be652a31033363bdd50391b0c8a8fe21
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu May 13 09:32:46 2021 +0200

    clocksource/drivers/hyper-v: Re-enable VDSO_CLOCKMODE_HVCLOCK on X86
    
    Mohammed reports (https://bugzilla.kernel.org/show_bug.cgi?id=213029)
    the commit e4ab4658f1cf ("clocksource/drivers/hyper-v: Handle vDSO
    differences inline") broke vDSO on x86. The problem appears to be that
    VDSO_CLOCKMODE_HVCLOCK is an enum value in 'enum vdso_clock_mode' and
    '#ifdef VDSO_CLOCKMODE_HVCLOCK' branch evaluates to false (it is not
    a define).
    
    Use a dedicated HAVE_VDSO_CLOCKMODE_HVCLOCK define instead.
    
    Fixes: e4ab4658f1cf ("clocksource/drivers/hyper-v: Handle vDSO differences inline")
    Reported-by: Mohammed Gamal <mgamal@redhat.com>
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20210513073246.1715070-1-vkuznets@redhat.com

commit 27502a922ec03b970e95a455b8e5474c72ededde
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Mar 8 12:30:31 2021 +0000

    clocksource/drivers/ingenic_ost: Fix return value check in ingenic_ost_probe()
    
    [ Upstream commit 2a65f7e2772613debd03fa2492e76a635aa04545 ]
    
    In case of error, the function device_node_to_regmap() returns
    ERR_PTR() and never returns NULL. The NULL test in the return
    value check should be replaced with IS_ERR().
    
    Fixes: ca7b72b5a5f2 ("clocksource: Add driver for the Ingenic JZ47xx OST")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210308123031.2285083-1-weiyongjun1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf2333393f33b9405727d5c3a0a151b0c558d01e
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 4 09:21:35 2021 +0200

    clocksource/drivers/timer-ti-dm: Add missing set_state_oneshot_stopped
    
    [ Upstream commit ac4daf737674b4d29e19b7c300caff3bcf7160d8 ]
    
    To avoid spurious timer interrupts when KTIME_MAX is used, we need to
    configure set_state_oneshot_stopped(). Although implementing this is
    optional, it still affects things like power management for the extra
    timer interrupt.
    
    For more information, please see commit 8fff52fd5093 ("clockevents:
    Introduce CLOCK_EVT_STATE_ONESHOT_STOPPED state") and commit cf8c5009ee37
    ("clockevents/drivers/arm_arch_timer: Implement
    ->set_state_oneshot_stopped()").
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210304072135.52712-4-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d510293acb68cbb4e5334b85908763cf09216fcd
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 4 09:21:33 2021 +0200

    clocksource/drivers/timer-ti-dm: Fix posted mode status check order
    
    [ Upstream commit 212709926c5493a566ca4086ad4f4b0d4e66b553 ]
    
    When the timer is configured in posted mode, we need to check the write-
    posted status register (TWPS) before writing to the register.
    
    We now check TWPS after the write starting with commit 52762fbd1c47
    ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource
    support").
    
    For example, in the TRM for am571x the following is documented in chapter
    "22.2.4.13.1.1 Write Posting Synchronization Mode":
    
    "For each register, a status bit is provided in the timer write-posted
     status (TWPS) register. In this mode, it is mandatory that software check
     this status bit before any write access. If a write is attempted to a
     register with a previous access pending, the previous access is discarded
     without notice."
    
    The regression happened when I updated the code to use standard read/write
    accessors for the driver instead of using __omap_dm_timer_load_start().
    We have__omap_dm_timer_load_start() check the TWPS status correctly using
    __omap_dm_timer_write().
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210304072135.52712-2-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a963945ecddc4ab30239ef81dde0a1b260bb5e38
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Mar 8 12:30:31 2021 +0000

    clocksource/drivers/ingenic_ost: Fix return value check in ingenic_ost_probe()
    
    [ Upstream commit 2a65f7e2772613debd03fa2492e76a635aa04545 ]
    
    In case of error, the function device_node_to_regmap() returns
    ERR_PTR() and never returns NULL. The NULL test in the return
    value check should be replaced with IS_ERR().
    
    Fixes: ca7b72b5a5f2 ("clocksource: Add driver for the Ingenic JZ47xx OST")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210308123031.2285083-1-weiyongjun1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 824b9aec96dc28a3df1a0f322c7010717abf214a
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 4 09:21:35 2021 +0200

    clocksource/drivers/timer-ti-dm: Add missing set_state_oneshot_stopped
    
    [ Upstream commit ac4daf737674b4d29e19b7c300caff3bcf7160d8 ]
    
    To avoid spurious timer interrupts when KTIME_MAX is used, we need to
    configure set_state_oneshot_stopped(). Although implementing this is
    optional, it still affects things like power management for the extra
    timer interrupt.
    
    For more information, please see commit 8fff52fd5093 ("clockevents:
    Introduce CLOCK_EVT_STATE_ONESHOT_STOPPED state") and commit cf8c5009ee37
    ("clockevents/drivers/arm_arch_timer: Implement
    ->set_state_oneshot_stopped()").
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210304072135.52712-4-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f03d99faab3512b4bac0843102331f9497467a8
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 4 09:21:33 2021 +0200

    clocksource/drivers/timer-ti-dm: Fix posted mode status check order
    
    [ Upstream commit 212709926c5493a566ca4086ad4f4b0d4e66b553 ]
    
    When the timer is configured in posted mode, we need to check the write-
    posted status register (TWPS) before writing to the register.
    
    We now check TWPS after the write starting with commit 52762fbd1c47
    ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource
    support").
    
    For example, in the TRM for am571x the following is documented in chapter
    "22.2.4.13.1.1 Write Posting Synchronization Mode":
    
    "For each register, a status bit is provided in the timer write-posted
     status (TWPS) register. In this mode, it is mandatory that software check
     this status bit before any write access. If a write is attempted to a
     register with a previous access pending, the previous access is discarded
     without notice."
    
    The regression happened when I updated the code to use standard read/write
    accessors for the driver instead of using __omap_dm_timer_load_start().
    We have__omap_dm_timer_load_start() check the TWPS status correctly using
    __omap_dm_timer_write().
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210304072135.52712-2-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1de36911689c192aa1c20682102ceb956b5372c0
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Mar 8 12:30:31 2021 +0000

    clocksource/drivers/ingenic_ost: Fix return value check in ingenic_ost_probe()
    
    [ Upstream commit 2a65f7e2772613debd03fa2492e76a635aa04545 ]
    
    In case of error, the function device_node_to_regmap() returns
    ERR_PTR() and never returns NULL. The NULL test in the return
    value check should be replaced with IS_ERR().
    
    Fixes: ca7b72b5a5f2 ("clocksource: Add driver for the Ingenic JZ47xx OST")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210308123031.2285083-1-weiyongjun1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit edfcc1835958392c0eaad85e6c0cb0b302fe3695
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 4 09:21:35 2021 +0200

    clocksource/drivers/timer-ti-dm: Add missing set_state_oneshot_stopped
    
    [ Upstream commit ac4daf737674b4d29e19b7c300caff3bcf7160d8 ]
    
    To avoid spurious timer interrupts when KTIME_MAX is used, we need to
    configure set_state_oneshot_stopped(). Although implementing this is
    optional, it still affects things like power management for the extra
    timer interrupt.
    
    For more information, please see commit 8fff52fd5093 ("clockevents:
    Introduce CLOCK_EVT_STATE_ONESHOT_STOPPED state") and commit cf8c5009ee37
    ("clockevents/drivers/arm_arch_timer: Implement
    ->set_state_oneshot_stopped()").
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210304072135.52712-4-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 410a1da7ee0e062c373ca71bdf77749d9248847c
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 4 09:21:33 2021 +0200

    clocksource/drivers/timer-ti-dm: Fix posted mode status check order
    
    [ Upstream commit 212709926c5493a566ca4086ad4f4b0d4e66b553 ]
    
    When the timer is configured in posted mode, we need to check the write-
    posted status register (TWPS) before writing to the register.
    
    We now check TWPS after the write starting with commit 52762fbd1c47
    ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource
    support").
    
    For example, in the TRM for am571x the following is documented in chapter
    "22.2.4.13.1.1 Write Posting Synchronization Mode":
    
    "For each register, a status bit is provided in the timer write-posted
     status (TWPS) register. In this mode, it is mandatory that software check
     this status bit before any write access. If a write is attempted to a
     register with a previous access pending, the previous access is discarded
     without notice."
    
    The regression happened when I updated the code to use standard read/write
    accessors for the driver instead of using __omap_dm_timer_load_start().
    We have__omap_dm_timer_load_start() check the TWPS status correctly using
    __omap_dm_timer_write().
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210304072135.52712-2-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f938233fe9a668268182aad387ddb39cbcfa4940
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Mon Mar 22 07:18:44 2021 -0500

    clocksource/drivers/dw_apb_timer_of: Add handling for potential memory leak
    
    [ Upstream commit 397dc6f7ca3c858dc95800f299357311ccf679e6 ]
    
    Add calls to disable the clock and unmap the timer base address in case
    of any failures.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210322121844.2271041-1-dinguyen@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8f7d9e53257dda02a6606c5fca87f405482665c
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Mon Mar 22 07:18:44 2021 -0500

    clocksource/drivers/dw_apb_timer_of: Add handling for potential memory leak
    
    [ Upstream commit 397dc6f7ca3c858dc95800f299357311ccf679e6 ]
    
    Add calls to disable the clock and unmap the timer base address in case
    of any failures.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210322121844.2271041-1-dinguyen@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f804f6d201ca93adf4c3df04d1bfd152c1129d6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu May 6 15:21:37 2021 +0200

    KVM: x86: Prevent deadlock against tk_core.seq
    
    syzbot reported a possible deadlock in pvclock_gtod_notify():
    
    CPU 0                                       CPU 1
    write_seqcount_begin(&tk_core.seq);
      pvclock_gtod_notify()                     spin_lock(&pool->lock);
        queue_work(..., &pvclock_gtod_work)     ktime_get()
         spin_lock(&pool->lock);                  do {
                                                    seq = read_seqcount_begin(tk_core.seq)
                                                    ...
                                                  } while (read_seqcount_retry(&tk_core.seq, seq);
    
    While this is unlikely to happen, it's possible.
    
    Delegate queue_work() to irq_work() which postpones it until the
    tk_core.seq write held region is left and interrupts are reenabled.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Reported-by: syzbot+6beae4000559d41d80f8@syzkaller.appspotmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87h7jgm1zy.ffs@nanos.tec.linutronix.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit 594b27e677b35f9734b1969d175ebc6146741109
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 5 23:48:17 2021 +0200

    KVM: x86: Cancel pvclock_gtod_work on module removal
    
    Nothing prevents the following:
    
      pvclock_gtod_notify()
        queue_work(system_long_wq, &pvclock_gtod_work);
      ...
      remove_module(kvm);
      ...
      work_queue_run()
        pvclock_gtod_work() <- UAF
    
    Ditto for any other operation on that workqueue list head which touches
    pvclock_gtod_work after module removal.
    
    Cancel the work in kvm_arch_exit() to prevent that.
    
    Fixes: 16e8d74d2da9 ("KVM: x86: notifier for clocksource changes")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Message-Id: <87czu4onry.ffs@nanos.tec.linutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit c02027b5742b5aa804ef08a4a9db433295533046
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Apr 14 14:35:42 2021 +0200

    x86/kvm: Disable kvmclock on all CPUs on shutdown
    
    Currenly, we disable kvmclock from machine_shutdown() hook and this
    only happens for boot CPU. We need to disable it for all CPUs to
    guard against memory corruption e.g. on restore from hibernate.
    
    Note, writing '0' to kvmclock MSR doesn't clear memory location, it
    just prevents hypervisor from updating the location so for the short
    while after write and while CPU is still alive, the clock remains usable
    and correct so we don't need to switch to some other clocksource.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210414123544.1060604-4-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit d4e3e52b4dd57b1cfd4b43a20976385463e16126
Author: Drew Fustini <drew@beagleboard.org>
Date:   Thu May 6 18:06:18 2021 -0700

    scripts/spelling.txt: add "overflw"
    
    Add typo "overflw" for "overflow".  This typo was found and fixed in
    drivers/clocksource/timer-pistachio.c.
    
    Link: https://lore.kernel.org/lkml/20210305090315.384547-1-drew@beagleboard.org/
    Link: https://lkml.kernel.org/r/20210305095151.388182-1-drew@beagleboard.org
    Signed-off-by: Drew Fustini <drew@beagleboard.org>
    Suggested-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4d480dbf21f3385e9957b1ee8dadee35548f4516
Merge: 8e47c5f0e232 753ed9c95c37
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 26 10:44:16 2021 -0700

    Merge tag 'hyperv-next-signed-20210426' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux
    
    Pull Hyper-V updates from Wei Liu:
    
     - VMBus enhancement
    
     - Free page reporting support for Hyper-V balloon driver
    
     - Some patches for running Linux as Arm64 Hyper-V guest
    
     - A few misc clean-up patches
    
    * tag 'hyperv-next-signed-20210426' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux: (30 commits)
      drivers: hv: Create a consistent pattern for checking Hyper-V hypercall status
      x86/hyperv: Move hv_do_rep_hypercall to asm-generic
      video: hyperv_fb: Add ratelimit on error message
      Drivers: hv: vmbus: Increase wait time for VMbus unload
      Drivers: hv: vmbus: Initialize unload_event statically
      Drivers: hv: vmbus: Check for pending channel interrupts before taking a CPU offline
      Drivers: hv: vmbus: Drivers: hv: vmbus: Introduce CHANNELMSG_MODIFYCHANNEL_RESPONSE
      Drivers: hv: vmbus: Introduce and negotiate VMBus protocol version 5.3
      Drivers: hv: vmbus: Use after free in __vmbus_open()
      Drivers: hv: vmbus: remove unused function
      Drivers: hv: vmbus: Remove unused linux/version.h header
      x86/hyperv: remove unused linux/version.h header
      x86/Hyper-V: Support for free page reporting
      x86/hyperv: Fix unused variable 'hi' warning in hv_apic_read
      x86/hyperv: Fix unused variable 'msr_val' warning in hv_qlock_wait
      hv: hyperv.h: a few mundane typo fixes
      drivers: hv: Fix EXPORT_SYMBOL and tab spaces issue
      Drivers: hv: vmbus: Drop error message when 'No request id available'
      asm-generic/hyperv: Add missing function prototypes per -W1 warnings
      clocksource/drivers/hyper-v: Move handling of STIMER0 interrupts
      ...

commit 87dcebff9262330ceffad8f1732f29fd35feab5a
Merge: 91552ab8ffb8 2d036dfa5f10
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 26 09:54:03 2021 -0700

    Merge tag 'timers-core-2021-04-26' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The time and timers updates contain:
    
      Core changes:
    
       - Allow runtime power management when the clocksource is changed.
    
       - A correctness fix for clock_adjtime32() so that the return value on
         success is not overwritten by the result of the copy to user.
    
       - Allow late installment of broadcast clockevent devices which was
         broken because nothing switched them over to oneshot mode. This
         went unnoticed so far because clockevent devices used to be built
         in, but now people started to make them modular.
    
       - Debugfs related simplifications
    
       - Small cleanups and improvements here and there
    
      Driver changes:
    
       - The usual set of device tree binding updates for a wide range of
         drivers/devices.
    
       - The usual updates and improvements for drivers all over the place
         but nothing outstanding.
    
       - No new clocksource/event drivers. They'll come back next time"
    
    * tag 'timers-core-2021-04-26' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (24 commits)
      posix-timers: Preserve return value in clock_adjtime32()
      tick/broadcast: Allow late registered device to enter oneshot mode
      tick: Use tick_check_replacement() instead of open coding it
      time/timecounter: Mark 1st argument of timecounter_cyc2time() as const
      dt-bindings: timer: nuvoton,npcm7xx: Add wpcm450-timer
      clocksource/drivers/arm_arch_timer: Add __ro_after_init and __init
      clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940
      clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue
      clocksource/drivers/dw_apb_timer_of: Add handling for potential memory leak
      clocksource/drivers/npcm: Add support for WPCM450
      clocksource/drivers/sh_cmt: Don't use CMTOUT_IE with R-Car Gen2/3
      clocksource/drivers/pistachio: Fix trivial typo
      clocksource/drivers/ingenic_ost: Fix return value check in ingenic_ost_probe()
      clocksource/drivers/timer-ti-dm: Add missing set_state_oneshot_stopped
      clocksource/drivers/timer-ti-dm: Fix posted mode status check order
      dt-bindings: timer: renesas,cmt: Document R8A77961
      dt-bindings: timer: renesas,cmt: Add r8a779a0 CMT support
      clocksource/drivers/ingenic-ost: Add support for the JZ4760B
      clocksource/drivers/ingenic: Add support for the JZ4760
      dt-bindings: timer: ingenic: Add compatible strings for JZ4760(B)
      ...

commit 7b3efb50f7831102cb44d8a0e55d21f2cbac85fa
Merge: d4c7c2880661 8120891105ba
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Apr 9 12:25:16 2021 +0200

    Merge tag 'timers-v5.13-rc1' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/event updates from Daniel Lezcano:
    
     - Add dt bindings for the wpcm450 and the timer declaration (Jonathan
       Neuschäfer)
    
     - Add dt bindings for the JZ4760, the timer declaration for the
       ingenic ost and timer (Paul Cercueil)
    
     - Add dt bindings for the cmt r8a779a0 (Wolfram Sang)
    
     - Add dt bindings for the cmt r8a77961 (Niklas Söderlund)
    
     - Add missing dt bindings for the tmu r8a7795, r8a7796, r8a77961, r8a77965,
       r8a77990 and r8a77995 (Niklas Söderlund)
    
     - Check pending post before writing a new post in register for the
       timer TI dm and add the stopped callback ops to prevent any
       spurious interrupt (Tony Lindgren)
    
     - Fix return value check at init when calling device_node_to_regmap()
       for the Ingenic OST timer (Wei Yongjun)
    
     - Fix a trivial typo s/overflw/overflow/ for the pistachio timer (Drew Fustini)
    
     - Don't use CMTOUT_IE with R-Car Gen2/3 (Wolfram Sang)
    
     - Fix rollback when the initialization fails on the dw_apb timer (Dinh Nguyen)
    
     - Switch to timer TI dm on dra7 in order to prevent using the bogus
       architected timer which fails to wrap correctly after 388 days (Tony Lindgren)
    
     - Add function annotation to optimize memory for the ARM architected
       timer (Jisheng Zhang)

commit e2bf384d4329bb478ad003eae1ab644756a42266
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Tue Mar 30 14:04:44 2021 +0800

    clocksource/drivers/arm_arch_timer: Add __ro_after_init and __init
    
    Some functions are not needed after booting, so mark them as __init
    to move them to the .init section.
    
    Some global variables are never modified after init, so can be
    __ro_after_init.
    
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210330140444.4fb2a7cb@xhacker.debian

commit 25de4ce5ed02994aea8bc111d133308f6fd62566
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 23 09:43:26 2021 +0200

    clocksource/drivers/timer-ti-dm: Handle dra7 timer wrap errata i940
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm percpu timers instead.
    
    Let's configure dmtimer3 and 4 as percpu timers by default, and warn about
    the issue if the dtb is not configured properly.
    
    Let's do this as a single patch so it can be backported to v5.8 and later
    kernels easily. Note that this patch depends on earlier timer-ti-dm
    systimer posted mode fixes, and a preparatory clockevent patch
    "clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue".
    
    For more information, please see the errata for "AM572x Sitara Processors
    Silicon Revisions 1.1, 2.0":
    
    https://www.ti.com/lit/er/sprz429m/sprz429m.pdf
    
    The concept is based on earlier reference patches done by Tero Kristo and
    Keerthy.
    
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210323074326.28302-3-tony@atomide.com

commit 3efe7a878a11c13b5297057bfc1e5639ce1241ce
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 23 09:43:25 2021 +0200

    clocksource/drivers/timer-ti-dm: Prepare to handle dra7 timer wrap issue
    
    There is a timer wrap issue on dra7 for the ARM architected timer.
    In a typical clock configuration the timer fails to wrap after 388 days.
    
    To work around the issue, we need to use timer-ti-dm timers instead.
    
    Let's prepare for adding support for percpu timers by adding a common
    dmtimer_clkevt_init_common() and call it from dmtimer_clockevent_init().
    This patch makes no intentional functional changes.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210323074326.28302-2-tony@atomide.com

commit 397dc6f7ca3c858dc95800f299357311ccf679e6
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Mon Mar 22 07:18:44 2021 -0500

    clocksource/drivers/dw_apb_timer_of: Add handling for potential memory leak
    
    Add calls to disable the clock and unmap the timer base address in case
    of any failures.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210322121844.2271041-1-dinguyen@kernel.org

commit 690daddcb60246d8a510aaad7b954bcc53eba17e
Author: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
Date:   Sat Mar 20 19:16:06 2021 +0100

    clocksource/drivers/npcm: Add support for WPCM450
    
    Add a compatible string for WPCM450, which has essentially the same
    timer controller.
    
    Signed-off-by: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210320181610.680870-11-j.neuschaefer@gmx.net

commit 68c70aae06e9660473a00fd7d68e0b53f4d7b6f4
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Tue Mar 9 10:44:48 2021 +0100

    clocksource/drivers/sh_cmt: Don't use CMTOUT_IE with R-Car Gen2/3
    
    CMTOUT_IE is only supported for older SoCs. Newer SoCs shall not set
    this bit. So, add a version check.
    
    Reported-by: Phong Hoang <phong.hoang.wz@renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210309094448.31823-1-wsa+renesas@sang-engineering.com

commit a47d7ef4550d08fb428ea4c3f1a9c71674212208
Author: Drew Fustini <drew@beagleboard.org>
Date:   Fri Mar 5 01:03:17 2021 -0800

    clocksource/drivers/pistachio: Fix trivial typo
    
    Fix trivial typo, rename local variable from 'overflw' to 'overflow' in
    pistachio_clocksource_read_cycles().
    
    Reported-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Drew Fustini <drew@beagleboard.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210305090315.384547-1-drew@beagleboard.org

commit 2a65f7e2772613debd03fa2492e76a635aa04545
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Mar 8 12:30:31 2021 +0000

    clocksource/drivers/ingenic_ost: Fix return value check in ingenic_ost_probe()
    
    In case of error, the function device_node_to_regmap() returns
    ERR_PTR() and never returns NULL. The NULL test in the return
    value check should be replaced with IS_ERR().
    
    Fixes: ca7b72b5a5f2 ("clocksource: Add driver for the Ingenic JZ47xx OST")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210308123031.2285083-1-weiyongjun1@huawei.com

commit ac4daf737674b4d29e19b7c300caff3bcf7160d8
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 4 09:21:35 2021 +0200

    clocksource/drivers/timer-ti-dm: Add missing set_state_oneshot_stopped
    
    To avoid spurious timer interrupts when KTIME_MAX is used, we need to
    configure set_state_oneshot_stopped(). Although implementing this is
    optional, it still affects things like power management for the extra
    timer interrupt.
    
    For more information, please see commit 8fff52fd5093 ("clockevents:
    Introduce CLOCK_EVT_STATE_ONESHOT_STOPPED state") and commit cf8c5009ee37
    ("clockevents/drivers/arm_arch_timer: Implement
    ->set_state_oneshot_stopped()").
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210304072135.52712-4-tony@atomide.com

commit 212709926c5493a566ca4086ad4f4b0d4e66b553
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 4 09:21:33 2021 +0200

    clocksource/drivers/timer-ti-dm: Fix posted mode status check order
    
    When the timer is configured in posted mode, we need to check the write-
    posted status register (TWPS) before writing to the register.
    
    We now check TWPS after the write starting with commit 52762fbd1c47
    ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource
    support").
    
    For example, in the TRM for am571x the following is documented in chapter
    "22.2.4.13.1.1 Write Posting Synchronization Mode":
    
    "For each register, a status bit is provided in the timer write-posted
     status (TWPS) register. In this mode, it is mandatory that software check
     this status bit before any write access. If a write is attempted to a
     register with a previous access pending, the previous access is discarded
     without notice."
    
    The regression happened when I updated the code to use standard read/write
    accessors for the driver instead of using __omap_dm_timer_load_start().
    We have__omap_dm_timer_load_start() check the TWPS status correctly using
    __omap_dm_timer_write().
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210304072135.52712-2-tony@atomide.com

commit 352408aff91d06fd2f0e35d52079bd0cd70cd29e
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Mon Mar 8 21:23:02 2021 +0000

    clocksource/drivers/ingenic-ost: Add support for the JZ4760B
    
    The OST in the JZ4760B SoC works exactly the same as in the JZ4770. But
    since the JZ4760B is older, its Device Tree string does not fall back to
    the JZ4770 one; so add support for the JZ4760B compatible string here.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210308212302.10288-3-paul@crapouillou.net

commit 8a3f717f35a3e9a28a935f8e4459c72ba00e90ca
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Mon Mar 8 21:23:01 2021 +0000

    clocksource/drivers/ingenic: Add support for the JZ4760
    
    Add support for the TCU (Timer/Counter Unit) of the JZ4760 and JZ4760B
    SoCs.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210308212302.10288-2-paul@crapouillou.net

commit 507d8c5a418a5d413bf9751d4ff94b259e947736
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Mon Mar 8 21:23:00 2021 +0000

    dt-bindings: timer: ingenic: Add compatible strings for JZ4760(B)
    
    Add compatible strings to support the system timer, clocksource, OST,
    watchdog and PWM blocks of the JZ4760 and JZ4760B SoCs.
    
    Newer SoCs which behave like the JZ4760 or JZ4760B now see their
    compatible string require a fallback compatible string that corresponds
    to one of these two SoCs.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210308212302.10288-1-paul@crapouillou.net

commit 36c5dde5fdf028daf005197a4dd08b196784bf9e
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Wed Mar 31 13:57:35 2021 +0300

    drm/msm/dsi: stop passing src_pll_id to the phy_enable call
    
    Phy driver already knows the source PLL id basing on the set usecase and
    the current PLL id. Stop passing it to the phy_enable call. As a
    reminder, dsi manager will always use DSI 0 as a clock master in a slave
    mode, so PLL 0 is always a clocksource for DSI 0 and it is always a
    clocksource for DSI 1 too unless DSI 1 is used in the standalone mode.
    
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Tested-by: Stephen Boyd <swboyd@chromium.org> # on sc7180 lazor
    Reviewed-by: Abhinav Kumar <abhinavk@codeaurora.org>
    Link: https://lore.kernel.org/r/20210331105735.3690009-25-dmitry.baryshkov@linaro.org
    Signed-off-by: Rob Clark <robdclark@chromium.org>

commit 100148d0fc7dcf8672fe0ac83f44dc5749b4da5c
Author: Jianyong Wu <jianyong.wu@arm.com>
Date:   Wed Dec 9 14:09:28 2020 +0800

    clocksource: Add clocksource id for arm arch counter
    
    Add clocksource id to the ARM generic counter so that it can be easily
    identified from callers such as ptp_kvm.
    
    Cc: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Jianyong Wu <jianyong.wu@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20201209060932.212364-6-jianyong.wu@arm.com

commit b2c67cbe9f447312f5cdd7c6641b463f2349aec0
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Dec 9 14:09:27 2020 +0800

    time: Add mechanism to recognize clocksource in time_get_snapshot
    
    System time snapshots are not conveying information about the current
    clocksource which was used, but callers like the PTP KVM guest
    implementation have the requirement to evaluate the clocksource type to
    select the appropriate mechanism.
    
    Introduce a clocksource id field in struct clocksource which is by default
    set to CSID_GENERIC (0). Clocksource implementations can set that field to
    a value which allows to identify the clocksource.
    
    Store the clocksource id of the current clocksource in the
    system_time_snapshot so callers can evaluate which clocksource was used to
    take the snapshot and act accordingly.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Jianyong Wu <jianyong.wu@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20201209060932.212364-5-jianyong.wu@arm.com

commit 53d3c8063590968f415d67e2708f679edfab6d6c
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Tue Mar 23 14:20:33 2021 -0700

    ACPICA: Always create namespace nodes using acpi_ns_create_node()
    
    commit 25928deeb1e4e2cdae1dccff349320c6841eb5f8 upstream.
    
    ACPICA commit 29da9a2a3f5b2c60420893e5c6309a0586d7a329
    
    ACPI is allocating an object using kmalloc(), but then frees it
    using kmem_cache_free(<"Acpi-Namespace" kmem_cache>).
    
    This is wrong and can lead to boot failures manifesting like this:
    
        hpet0: 3 comparators, 64-bit 100.000000 MHz counter
        clocksource: Switched to clocksource tsc-early
        BUG: unable to handle page fault for address: 000000003ffe0018
        #PF: supervisor read access in kernel mode
        #PF: error_code(0x0000) - not-present page
        PGD 0 P4D 0
        Oops: 0000 [#1] SMP PTI
        CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.6.0+ #211
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    Ubuntu-1.8.2-1ubuntu1 04/01/2014
        RIP: 0010:kmem_cache_alloc+0x70/0x1d0
        Code: 00 00 4c 8b 45 00 65 49 8b 50 08 65 4c 03 05 6f cc e7 7e 4d 8b
    20 4d 85 e4 0f 84 3d 01 00 00 8b 45 20 48 8b 7d 00 48 8d 4a 01 <49> 8b
       1c 04 4c 89 e0 65 48 0f c7 0f 0f 94 c0 84 c0 74 c5 8b 45 20
        RSP: 0000:ffffc90000013df8 EFLAGS: 00010206
        RAX: 0000000000000018 RBX: ffffffff81c49200 RCX: 0000000000000002
        RDX: 0000000000000001 RSI: 0000000000000dc0 RDI: 000000000002b300
        RBP: ffff88803e403d00 R08: ffff88803ec2b300 R09: 0000000000000001
        R10: 0000000000000dc0 R11: 0000000000000006 R12: 000000003ffe0000
        R13: ffffffff8110a583 R14: 0000000000000dc0 R15: ffffffff81c49a80
        FS:  0000000000000000(0000) GS:ffff88803ec00000(0000)
    knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 000000003ffe0018 CR3: 0000000001c0a001 CR4: 00000000003606f0
        DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
        DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
        Call Trace:
         __trace_define_field+0x33/0xa0
         event_trace_init+0xeb/0x2b4
         tracer_init_tracefs+0x60/0x195
         ? register_tracer+0x1e7/0x1e7
         do_one_initcall+0x74/0x160
         kernel_init_freeable+0x190/0x1f0
         ? rest_init+0x9a/0x9a
         kernel_init+0x5/0xf6
         ret_from_fork+0x35/0x40
        CR2: 000000003ffe0018
        ---[ end trace 707efa023f2ee960 ]---
        RIP: 0010:kmem_cache_alloc+0x70/0x1d0
    
    Bisection leads to unrelated changes in slab; Vlastimil Babka
    suggests an unrelated layout or slab merge change merely exposed
    the underlying bug.
    
    Link: https://lore.kernel.org/lkml/4dc93ff8-f86e-f4c9-ebeb-6d3153a78d03@oracle.com/
    Link: https://lore.kernel.org/r/a1461e21-c744-767d-6dfc-6641fd3e3ce2@siemens.com
    Link: https://github.com/acpica/acpica/commit/29da9a2a
    Fixes: f79c8e4136ea ("ACPICA: Namespace: simplify creation of the initial/default namespace")
    Reported-by: Jan Kiszka <jan.kiszka@siemens.com>
    Diagnosed-by: Vlastimil Babka <vbabka@suse.cz>
    Diagnosed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Erik Kaneda <erik.kaneda@intel.com>
    Cc: 5.10+ <stable@vger.kernel.org> # 5.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7c8b959cc877bf2cf2c4de185e5c361ba1eee90
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Tue Mar 23 14:20:33 2021 -0700

    ACPICA: Always create namespace nodes using acpi_ns_create_node()
    
    commit 25928deeb1e4e2cdae1dccff349320c6841eb5f8 upstream.
    
    ACPICA commit 29da9a2a3f5b2c60420893e5c6309a0586d7a329
    
    ACPI is allocating an object using kmalloc(), but then frees it
    using kmem_cache_free(<"Acpi-Namespace" kmem_cache>).
    
    This is wrong and can lead to boot failures manifesting like this:
    
        hpet0: 3 comparators, 64-bit 100.000000 MHz counter
        clocksource: Switched to clocksource tsc-early
        BUG: unable to handle page fault for address: 000000003ffe0018
        #PF: supervisor read access in kernel mode
        #PF: error_code(0x0000) - not-present page
        PGD 0 P4D 0
        Oops: 0000 [#1] SMP PTI
        CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.6.0+ #211
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    Ubuntu-1.8.2-1ubuntu1 04/01/2014
        RIP: 0010:kmem_cache_alloc+0x70/0x1d0
        Code: 00 00 4c 8b 45 00 65 49 8b 50 08 65 4c 03 05 6f cc e7 7e 4d 8b
    20 4d 85 e4 0f 84 3d 01 00 00 8b 45 20 48 8b 7d 00 48 8d 4a 01 <49> 8b
       1c 04 4c 89 e0 65 48 0f c7 0f 0f 94 c0 84 c0 74 c5 8b 45 20
        RSP: 0000:ffffc90000013df8 EFLAGS: 00010206
        RAX: 0000000000000018 RBX: ffffffff81c49200 RCX: 0000000000000002
        RDX: 0000000000000001 RSI: 0000000000000dc0 RDI: 000000000002b300
        RBP: ffff88803e403d00 R08: ffff88803ec2b300 R09: 0000000000000001
        R10: 0000000000000dc0 R11: 0000000000000006 R12: 000000003ffe0000
        R13: ffffffff8110a583 R14: 0000000000000dc0 R15: ffffffff81c49a80
        FS:  0000000000000000(0000) GS:ffff88803ec00000(0000)
    knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 000000003ffe0018 CR3: 0000000001c0a001 CR4: 00000000003606f0
        DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
        DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
        Call Trace:
         __trace_define_field+0x33/0xa0
         event_trace_init+0xeb/0x2b4
         tracer_init_tracefs+0x60/0x195
         ? register_tracer+0x1e7/0x1e7
         do_one_initcall+0x74/0x160
         kernel_init_freeable+0x190/0x1f0
         ? rest_init+0x9a/0x9a
         kernel_init+0x5/0xf6
         ret_from_fork+0x35/0x40
        CR2: 000000003ffe0018
        ---[ end trace 707efa023f2ee960 ]---
        RIP: 0010:kmem_cache_alloc+0x70/0x1d0
    
    Bisection leads to unrelated changes in slab; Vlastimil Babka
    suggests an unrelated layout or slab merge change merely exposed
    the underlying bug.
    
    Link: https://lore.kernel.org/lkml/4dc93ff8-f86e-f4c9-ebeb-6d3153a78d03@oracle.com/
    Link: https://lore.kernel.org/r/a1461e21-c744-767d-6dfc-6641fd3e3ce2@siemens.com
    Link: https://github.com/acpica/acpica/commit/29da9a2a
    Fixes: f79c8e4136ea ("ACPICA: Namespace: simplify creation of the initial/default namespace")
    Reported-by: Jan Kiszka <jan.kiszka@siemens.com>
    Diagnosed-by: Vlastimil Babka <vbabka@suse.cz>
    Diagnosed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Erik Kaneda <erik.kaneda@intel.com>
    Cc: 5.10+ <stable@vger.kernel.org> # 5.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4c7c28806616809e3baa0b7cd8c665516b2726d
Author: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
Date:   Thu Feb 11 14:43:18 2021 +0100

    timekeeping: Allow runtime PM from change_clocksource()
    
    The struct clocksource callbacks enable() and disable() are described as a
    way to allow clock sources to enter a power save mode. See commit
    4614e6adafa2 ("clocksource: add enable() and disable() callbacks")
    
    But using runtime PM from these callbacks triggers a cyclic lockdep warning when
    switching clock source using change_clocksource().
    
      # echo e60f0000.timer > /sys/devices/system/clocksource/clocksource0/current_clocksource
       ======================================================
       WARNING: possible circular locking dependency detected
       ------------------------------------------------------
       migration/0/11 is trying to acquire lock:
       ffff0000403ed220 (&dev->power.lock){-...}-{2:2}, at: __pm_runtime_resume+0x40/0x74
    
       but task is already holding lock:
       ffff8000113c8f88 (tk_core.seq.seqcount){----}-{0:0}, at: multi_cpu_stop+0xa4/0x190
    
       which lock already depends on the new lock.
    
       the existing dependency chain (in reverse order) is:
    
       -> #2 (tk_core.seq.seqcount){----}-{0:0}:
              ktime_get+0x28/0xa0
              hrtimer_start_range_ns+0x210/0x2dc
              generic_sched_clock_init+0x70/0x88
              sched_clock_init+0x40/0x64
              start_kernel+0x494/0x524
    
       -> #1 (hrtimer_bases.lock){-.-.}-{2:2}:
              hrtimer_start_range_ns+0x68/0x2dc
              rpm_suspend+0x308/0x5dc
              rpm_idle+0xc4/0x2a4
              pm_runtime_work+0x98/0xc0
              process_one_work+0x294/0x6f0
              worker_thread+0x70/0x45c
              kthread+0x154/0x160
              ret_from_fork+0x10/0x20
    
       -> #0 (&dev->power.lock){-...}-{2:2}:
              _raw_spin_lock_irqsave+0x7c/0xc4
              __pm_runtime_resume+0x40/0x74
              sh_cmt_start+0x1c4/0x260
              sh_cmt_clocksource_enable+0x28/0x50
              change_clocksource+0x9c/0x160
              multi_cpu_stop+0xa4/0x190
              cpu_stopper_thread+0x90/0x154
              smpboot_thread_fn+0x244/0x270
              kthread+0x154/0x160
              ret_from_fork+0x10/0x20
    
       other info that might help us debug this:
    
       Chain exists of:
         &dev->power.lock --> hrtimer_bases.lock --> tk_core.seq.seqcount
    
        Possible unsafe locking scenario:
    
              CPU0                    CPU1
              ----                    ----
         lock(tk_core.seq.seqcount);
                                      lock(hrtimer_bases.lock);
                                      lock(tk_core.seq.seqcount);
         lock(&dev->power.lock);
    
        *** DEADLOCK ***
    
       2 locks held by migration/0/11:
        #0: ffff8000113c9278 (timekeeper_lock){-.-.}-{2:2}, at: change_clocksource+0x2c/0x160
        #1: ffff8000113c8f88 (tk_core.seq.seqcount){----}-{0:0}, at: multi_cpu_stop+0xa4/0x190
    
    Rework change_clocksource() so it enables the new clocksource and disables
    the old clocksource outside of the timekeeper_lock and seqcount write held
    region. There is no requirement that these callbacks are invoked from the
    lock held region.
    
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Link: https://lore.kernel.org/r/20210211134318.323910-1-niklas.soderlund+renesas@ragnatech.se

commit ea2c679edc4120354ff15818f78ad64921534c03
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Mar 15 12:33:03 2021 +0000

    selftests/timers: Fix spelling mistake "clocksourc" -> "clocksource"
    
    There is a spelling mistake in a comment. Fix it.
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

commit 25928deeb1e4e2cdae1dccff349320c6841eb5f8
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Tue Mar 23 14:20:33 2021 -0700

    ACPICA: Always create namespace nodes using acpi_ns_create_node()
    
    ACPICA commit 29da9a2a3f5b2c60420893e5c6309a0586d7a329
    
    ACPI is allocating an object using kmalloc(), but then frees it
    using kmem_cache_free(<"Acpi-Namespace" kmem_cache>).
    
    This is wrong and can lead to boot failures manifesting like this:
    
        hpet0: 3 comparators, 64-bit 100.000000 MHz counter
        clocksource: Switched to clocksource tsc-early
        BUG: unable to handle page fault for address: 000000003ffe0018
        #PF: supervisor read access in kernel mode
        #PF: error_code(0x0000) - not-present page
        PGD 0 P4D 0
        Oops: 0000 [#1] SMP PTI
        CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.6.0+ #211
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    Ubuntu-1.8.2-1ubuntu1 04/01/2014
        RIP: 0010:kmem_cache_alloc+0x70/0x1d0
        Code: 00 00 4c 8b 45 00 65 49 8b 50 08 65 4c 03 05 6f cc e7 7e 4d 8b
    20 4d 85 e4 0f 84 3d 01 00 00 8b 45 20 48 8b 7d 00 48 8d 4a 01 <49> 8b
       1c 04 4c 89 e0 65 48 0f c7 0f 0f 94 c0 84 c0 74 c5 8b 45 20
        RSP: 0000:ffffc90000013df8 EFLAGS: 00010206
        RAX: 0000000000000018 RBX: ffffffff81c49200 RCX: 0000000000000002
        RDX: 0000000000000001 RSI: 0000000000000dc0 RDI: 000000000002b300
        RBP: ffff88803e403d00 R08: ffff88803ec2b300 R09: 0000000000000001
        R10: 0000000000000dc0 R11: 0000000000000006 R12: 000000003ffe0000
        R13: ffffffff8110a583 R14: 0000000000000dc0 R15: ffffffff81c49a80
        FS:  0000000000000000(0000) GS:ffff88803ec00000(0000)
    knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 000000003ffe0018 CR3: 0000000001c0a001 CR4: 00000000003606f0
        DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
        DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
        Call Trace:
         __trace_define_field+0x33/0xa0
         event_trace_init+0xeb/0x2b4
         tracer_init_tracefs+0x60/0x195
         ? register_tracer+0x1e7/0x1e7
         do_one_initcall+0x74/0x160
         kernel_init_freeable+0x190/0x1f0
         ? rest_init+0x9a/0x9a
         kernel_init+0x5/0xf6
         ret_from_fork+0x35/0x40
        CR2: 000000003ffe0018
        ---[ end trace 707efa023f2ee960 ]---
        RIP: 0010:kmem_cache_alloc+0x70/0x1d0
    
    Bisection leads to unrelated changes in slab; Vlastimil Babka
    suggests an unrelated layout or slab merge change merely exposed
    the underlying bug.
    
    Link: https://lore.kernel.org/lkml/4dc93ff8-f86e-f4c9-ebeb-6d3153a78d03@oracle.com/
    Link: https://lore.kernel.org/r/a1461e21-c744-767d-6dfc-6641fd3e3ce2@siemens.com
    Link: https://github.com/acpica/acpica/commit/29da9a2a
    Fixes: f79c8e4136ea ("ACPICA: Namespace: simplify creation of the initial/default namespace")
    Reported-by: Jan Kiszka <jan.kiszka@siemens.com>
    Diagnosed-by: Vlastimil Babka <vbabka@suse.cz>
    Diagnosed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Erik Kaneda <erik.kaneda@intel.com>
    Cc: 5.10+ <stable@vger.kernel.org> # 5.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 4bf07f6562a01a488877e05267808da7147f44a5
Author: Ingo Molnar <mingo@kernel.org>
Date:   Mon Mar 22 22:39:03 2021 +0100

    timekeeping, clocksource: Fix various typos in comments
    
    Fix ~56 single-word typos in timekeeping & clocksource code comments.
    
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-kernel@vger.kernel.org

commit ecd8ee7f9c1af253738ca4321509ddee727d468d
Merge: 3149860dc717 9ce3746d6413
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Mar 19 14:10:07 2021 -0700

    Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm
    
    Pull kvm fixes from Paolo Bonzini:
     "Fixes for kvm on x86:
    
       - new selftests
    
       - fixes for migration with HyperV re-enlightenment enabled
    
       - fix RCU/SRCU usage
    
       - fixes for local_irq_restore misuse false positive"
    
    * tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm:
      documentation/kvm: additional explanations on KVM_SET_BOOT_CPU_ID
      x86/kvm: Fix broken irq restoration in kvm_wait
      KVM: X86: Fix missing local pCPU when executing wbinvd on all dirty pCPUs
      KVM: x86: Protect userspace MSR filter with SRCU, and set atomically-ish
      selftests: kvm: add set_boot_cpu_id test
      selftests: kvm: add _vm_ioctl
      selftests: kvm: add get_msr_index_features
      selftests: kvm: Add basic Hyper-V clocksources tests
      KVM: x86: hyper-v: Don't touch TSC page values when guest opted for re-enlightenment
      KVM: x86: hyper-v: Track Hyper-V TSC page status
      KVM: x86: hyper-v: Prevent using not-yet-updated TSC page by secondary CPUs
      KVM: x86: hyper-v: Limit guest to writing zero to HV_X64_MSR_TSC_EMULATION_STATUS
      KVM: x86/mmu: Store the address space ID in the TDP iterator
      KVM: x86/mmu: Factor out tdp_iter_return_to_root
      KVM: x86/mmu: Fix RCU usage when atomically zapping SPTEs
      KVM: x86/mmu: Fix RCU usage in handle_removed_tdp_mmu_page

commit 2c7f76b4c42bd5d953bc821e151644434865f999
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Mar 18 15:09:49 2021 +0100

    selftests: kvm: Add basic Hyper-V clocksources tests
    
    Introduce a new selftest for Hyper-V clocksources (MSR-based reference TSC
    and TSC page). As a starting point, test the following:
    1) Reference TSC is 1Ghz clock.
    2) Reference TSC and TSC page give the same reading.
    3) TSC page gets updated upon KVM_SET_CLOCK call.
    4) TSC page does not get updated when guest opted for reenlightenment.
    5) Disabled TSC page doesn't get updated.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210318140949.1065740-1-vkuznets@redhat.com>
    [Add a host-side test using TSC + KVM_GET_MSR too. - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit 0469f2f7ab4c6a6cae4b74c4f981c4da6d909411
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Tue Mar 16 15:37:36 2021 +0100

    KVM: x86: hyper-v: Don't touch TSC page values when guest opted for re-enlightenment
    
    When guest opts for re-enlightenment notifications upon migration, it is
    in its right to assume that TSC page values never change (as they're only
    supposed to change upon migration and the host has to keep things as they
    are before it receives confirmation from the guest). This is mostly true
    until the guest is migrated somewhere. KVM userspace (e.g. QEMU) will
    trigger masterclock update by writing to HV_X64_MSR_REFERENCE_TSC, by
    calling KVM_SET_CLOCK,... and as TSC value and kvmclock reading drift
    apart (even slightly), the update causes TSC page values to change.
    
    The issue at hand is that when Hyper-V is migrated, it uses stale (cached)
    TSC page values to compute the difference between its own clocksource
    (provided by KVM) and its guests' TSC pages to program synthetic timers
    and in some cases, when TSC page is updated, this puts all stimer
    expirations in the past. This, in its turn, causes an interrupt storm
    and L2 guests not making much forward progress.
    
    Note, KVM doesn't fully implement re-enlightenment notification. Basically,
    the support for reenlightenment MSRs is just a stub and userspace is only
    expected to expose the feature when TSC scaling on the expected destination
    hosts is available. With TSC scaling, no real re-enlightenment is needed
    as TSC frequency doesn't change. With TSC scaling becoming ubiquitous, it
    likely makes little sense to fully implement re-enlightenment in KVM.
    
    Prevent TSC page from being updated after migration. In case it's not the
    guest who's initiating the change and when TSC page is already enabled,
    just keep it as it is: TSC value is supposed to be preserved across
    migration and TSC frequency can't change with re-enlightenment enabled.
    The guest is doomed anyway if any of this is not true.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210316143736.964151-5-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit e880c6ea55b9805294ecc100ee95e0c9860ae90e
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Tue Mar 16 15:37:34 2021 +0100

    KVM: x86: hyper-v: Prevent using not-yet-updated TSC page by secondary CPUs
    
    When KVM_REQ_MASTERCLOCK_UPDATE request is issued (e.g. after migration)
    we need to make sure no vCPU sees stale values in PV clock structures and
    thus all vCPUs are kicked with KVM_REQ_CLOCK_UPDATE. Hyper-V TSC page
    clocksource is global and kvm_guest_time_update() only updates in on vCPU0
    but this is not entirely correct: nothing blocks some other vCPU from
    entering the guest before we finish the update on CPU0 and it can read
    stale values from the page.
    
    Invalidate TSC page in kvm_gen_update_masterclock() to switch all vCPUs
    to using MSR based clocksource (HV_X64_MSR_TIME_REF_COUNT).
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210316143736.964151-3-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit ec866be6ec547c9e1cc4451f04250e08b5fe67c7
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Tue Mar 2 13:38:22 2021 -0800

    clocksource/drivers/hyper-v: Move handling of STIMER0 interrupts
    
    STIMER0 interrupts are most naturally modeled as per-cpu IRQs. But
    because x86/x64 doesn't have per-cpu IRQs, the core STIMER0 interrupt
    handling machinery is done in code under arch/x86 and Linux IRQs are
    not used. Adding support for ARM64 means adding equivalent code
    using per-cpu IRQs under arch/arm64.
    
    A better model is to treat per-cpu IRQs as the normal path (which it is
    for modern architectures), and the x86/x64 path as the exception. Do this
    by incorporating standard Linux per-cpu IRQ allocation into the main
    SITMER0 driver code, and bypass it in the x86/x64 exception case. For
    x86/x64, special case code is retained under arch/x86, but no STIMER0
    interrupt handling code is needed under arch/arm64.
    
    No functional change.
    
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1614721102-2241-11-git-send-email-mikelley@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit 4c78738ead4e195c7032c31fe56135c1b00e1784
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Tue Mar 2 13:38:21 2021 -0800

    clocksource/drivers/hyper-v: Set clocksource rating based on Hyper-V feature
    
    On x86/x64, the TSC clocksource is available in a Hyper-V VM only if
    Hyper-V provides the TSC_INVARIANT flag. The rating on the Hyper-V
    Reference TSC page clocksource is currently set so that it will not
    override the TSC clocksource in this case.  Alternatively, if the TSC
    clocksource is not available, then the Hyper-V clocksource is used.
    
    But on ARM64, the Hyper-V Reference TSC page clocksource should
    override the ARM arch counter, since the Hyper-V clocksource provides
    scaling and offsetting during live migrations that is not provided
    for the ARM arch counter.
    
    To get the needed behavior for both x86/x64 and ARM64, tweak the
    logic by defaulting the Hyper-V Reference TSC page clocksource
    rating to a large value that will always override.  If the Hyper-V
    TSC_INVARIANT flag is set, then reduce the rating so that it will not
    override the TSC.
    
    While the logic for getting there is slightly different, the net
    result in the normal cases is no functional change.
    
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1614721102-2241-10-git-send-email-mikelley@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit eb3e1d370b4c57be1acbb9de51a7deaa036eff4b
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Tue Mar 2 13:38:20 2021 -0800

    clocksource/drivers/hyper-v: Handle sched_clock differences inline
    
    While the Hyper-V Reference TSC code is architecture neutral, the
    pv_ops.time.sched_clock() function is implemented for x86/x64, but not
    for ARM64. Current code calls a utility function under arch/x86 (and
    coming, under arch/arm64) to handle the difference.
    
    Change this approach to handle the difference inline based on whether
    GENERIC_SCHED_CLOCK is present.  The new approach removes code under
    arch/* since the difference is tied more to the specifics of the Linux
    implementation than to the architecture.
    
    No functional change.
    
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Boqun Feng <boqun.feng@gmail.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1614721102-2241-9-git-send-email-mikelley@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit e4ab4658f1cff14c82202132f7af2cb5c2741469
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Tue Mar 2 13:38:19 2021 -0800

    clocksource/drivers/hyper-v: Handle vDSO differences inline
    
    While the driver for the Hyper-V Reference TSC and STIMERs is architecture
    neutral, vDSO is implemented for x86/x64, but not for ARM64.  Current code
    calls into utility functions under arch/x86 (and coming, under arch/arm64)
    to handle the difference.
    
    Change this approach to handle the difference inline based on whether
    VDSO_CLOCK_MODE_HVCLOCK is present.  The new approach removes code under
    arch/* since the difference is tied more to the specifics of the Linux
    implementation than to the architecture.
    
    No functional change.
    
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Boqun Feng <boqun.feng@gmail.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1614721102-2241-8-git-send-email-mikelley@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit 6694c18f3c92542b1f292800ff9af9987002ac58
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Dec 16 11:22:16 2020 -0500

    btrfs: do not cleanup upper nodes in btrfs_backref_cleanup_node
    
    commit 7e2a870a599d4699a626ec26430c7a1ab14a2a49 upstream.
    
    Zygo reported the following panic when testing my error handling patches
    for relocation:
    
      kernel BUG at fs/btrfs/backref.c:2545!
      invalid opcode: 0000 [#1] SMP KASAN PTI CPU: 3 PID: 8472 Comm: btrfs Tainted: G        W 14
      Hardware name: QEMU Standard PC (i440FX + PIIX,
    
      Call Trace:
       btrfs_backref_error_cleanup+0x4df/0x530
       build_backref_tree+0x1a5/0x700
       ? _raw_spin_unlock+0x22/0x30
       ? release_extent_buffer+0x225/0x280
       ? free_extent_buffer.part.52+0xd7/0x140
       relocate_tree_blocks+0x2a6/0xb60
       ? kasan_unpoison_shadow+0x35/0x50
       ? do_relocation+0xc10/0xc10
       ? kasan_kmalloc+0x9/0x10
       ? kmem_cache_alloc_trace+0x6a3/0xcb0
       ? free_extent_buffer.part.52+0xd7/0x140
       ? rb_insert_color+0x342/0x360
       ? add_tree_block.isra.36+0x236/0x2b0
       relocate_block_group+0x2eb/0x780
       ? merge_reloc_roots+0x470/0x470
       btrfs_relocate_block_group+0x26e/0x4c0
       btrfs_relocate_chunk+0x52/0x120
       btrfs_balance+0xe2e/0x18f0
       ? pvclock_clocksource_read+0xeb/0x190
       ? btrfs_relocate_chunk+0x120/0x120
       ? lock_contended+0x620/0x6e0
       ? do_raw_spin_lock+0x1e0/0x1e0
       ? do_raw_spin_unlock+0xa8/0x140
       btrfs_ioctl_balance+0x1f9/0x460
       btrfs_ioctl+0x24c8/0x4380
       ? __kasan_check_read+0x11/0x20
       ? check_chain_key+0x1f4/0x2f0
       ? __asan_loadN+0xf/0x20
       ? btrfs_ioctl_get_supported_features+0x30/0x30
       ? kvm_sched_clock_read+0x18/0x30
       ? check_chain_key+0x1f4/0x2f0
       ? lock_downgrade+0x3f0/0x3f0
       ? handle_mm_fault+0xad6/0x2150
       ? do_vfs_ioctl+0xfc/0x9d0
       ? ioctl_file_clone+0xe0/0xe0
       ? check_flags.part.50+0x6c/0x1e0
       ? check_flags.part.50+0x6c/0x1e0
       ? check_flags+0x26/0x30
       ? lock_is_held_type+0xc3/0xf0
       ? syscall_enter_from_user_mode+0x1b/0x60
       ? do_syscall_64+0x13/0x80
       ? rcu_read_lock_sched_held+0xa1/0xd0
       ? __kasan_check_read+0x11/0x20
       ? __fget_light+0xae/0x110
       __x64_sys_ioctl+0xc3/0x100
       do_syscall_64+0x37/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This occurs because of this check
    
      if (RB_EMPTY_NODE(&upper->rb_node))
              BUG_ON(!list_empty(&node->upper));
    
    As we are dropping the backref node, if we discover that our upper node
    in the edge we just cleaned up isn't linked into the cache that we are
    now done with this node, thus the BUG_ON().
    
    However this is an erroneous assumption, as we will look up all the
    references for a node first, and then process the pending edges.  All of
    the 'upper' nodes in our pending edges won't be in the cache's rb_tree
    yet, because they haven't been processed.  We could very well have many
    edges still left to cleanup on this node.
    
    The fact is we simply do not need this check, we can just process all of
    the edges only for this node, because below this check we do the
    following
    
      if (list_empty(&upper->lower)) {
              list_add_tail(&upper->lower, &cache->leaves);
              upper->lowest = 1;
      }
    
    If the upper node truly isn't used yet, then we add it to the
    cache->leaves list to be cleaned up later.  If it is still used then the
    last child node that has it linked into its node will add it to the
    leaves list and then it will be cleaned up.
    
    Fix this problem by dropping this logic altogether.  With this fix I no
    longer see the panic when testing with error injection in the backref
    code.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62ecd2b17d7078ceec69c6b3c55d14ecc4c95621
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 18 13:19:55 2021 -0800

    clocksource/drivers/mxs_timer: Add missing semicolon when DEBUG is defined
    
    [ Upstream commit 7da390694afbaed8e0f05717a541dfaf1077ba51 ]
    
    When DEBUG is defined this error occurs
    
    drivers/clocksource/mxs_timer.c:138:1: error:
      expected ‘;’ before ‘}’ token
    
    The preceding statement needs a semicolon.
    Replace pr_info() with pr_debug() and remove the unneeded ifdef.
    
    Fixes: eb8703e2ef7c ("clockevents/drivers/mxs: Migrate to new 'set-state' interface")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210118211955.763609-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9085a3d97b3190f7f79dade1058b6235b681a46e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 14:59:24 2021 +0100

    clocksource/drivers/ixp4xx: Select TIMER_OF when needed
    
    [ Upstream commit 7a3b8758bd6e45f7b671723b5c9fa2b69d0787ae ]
    
    Compile-testing the ixp4xx timer with CONFIG_OF enabled but
    CONFIG_TIMER_OF disabled leads to a harmless warning:
    
    arm-linux-gnueabi-ld: warning: orphan section `__timer_of_table' from `drivers/clocksource/timer-ixp4xx.o' being placed in section `__timer_of_table'
    
    Move the select statement from the platform code into the driver
    so it always gets enabled in configurations that rely on it.
    
    Fixes: 40df14cc5cc0 ("clocksource/drivers/ixp4xx: Add OF initialization support")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210103135955.3808976-1-arnd@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02785bae77ca9903dd2534a532b041d9730cbc56
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Dec 16 11:22:16 2020 -0500

    btrfs: do not cleanup upper nodes in btrfs_backref_cleanup_node
    
    commit 7e2a870a599d4699a626ec26430c7a1ab14a2a49 upstream.
    
    Zygo reported the following panic when testing my error handling patches
    for relocation:
    
      kernel BUG at fs/btrfs/backref.c:2545!
      invalid opcode: 0000 [#1] SMP KASAN PTI CPU: 3 PID: 8472 Comm: btrfs Tainted: G        W 14
      Hardware name: QEMU Standard PC (i440FX + PIIX,
    
      Call Trace:
       btrfs_backref_error_cleanup+0x4df/0x530
       build_backref_tree+0x1a5/0x700
       ? _raw_spin_unlock+0x22/0x30
       ? release_extent_buffer+0x225/0x280
       ? free_extent_buffer.part.52+0xd7/0x140
       relocate_tree_blocks+0x2a6/0xb60
       ? kasan_unpoison_shadow+0x35/0x50
       ? do_relocation+0xc10/0xc10
       ? kasan_kmalloc+0x9/0x10
       ? kmem_cache_alloc_trace+0x6a3/0xcb0
       ? free_extent_buffer.part.52+0xd7/0x140
       ? rb_insert_color+0x342/0x360
       ? add_tree_block.isra.36+0x236/0x2b0
       relocate_block_group+0x2eb/0x780
       ? merge_reloc_roots+0x470/0x470
       btrfs_relocate_block_group+0x26e/0x4c0
       btrfs_relocate_chunk+0x52/0x120
       btrfs_balance+0xe2e/0x18f0
       ? pvclock_clocksource_read+0xeb/0x190
       ? btrfs_relocate_chunk+0x120/0x120
       ? lock_contended+0x620/0x6e0
       ? do_raw_spin_lock+0x1e0/0x1e0
       ? do_raw_spin_unlock+0xa8/0x140
       btrfs_ioctl_balance+0x1f9/0x460
       btrfs_ioctl+0x24c8/0x4380
       ? __kasan_check_read+0x11/0x20
       ? check_chain_key+0x1f4/0x2f0
       ? __asan_loadN+0xf/0x20
       ? btrfs_ioctl_get_supported_features+0x30/0x30
       ? kvm_sched_clock_read+0x18/0x30
       ? check_chain_key+0x1f4/0x2f0
       ? lock_downgrade+0x3f0/0x3f0
       ? handle_mm_fault+0xad6/0x2150
       ? do_vfs_ioctl+0xfc/0x9d0
       ? ioctl_file_clone+0xe0/0xe0
       ? check_flags.part.50+0x6c/0x1e0
       ? check_flags.part.50+0x6c/0x1e0
       ? check_flags+0x26/0x30
       ? lock_is_held_type+0xc3/0xf0
       ? syscall_enter_from_user_mode+0x1b/0x60
       ? do_syscall_64+0x13/0x80
       ? rcu_read_lock_sched_held+0xa1/0xd0
       ? __kasan_check_read+0x11/0x20
       ? __fget_light+0xae/0x110
       __x64_sys_ioctl+0xc3/0x100
       do_syscall_64+0x37/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This occurs because of this check
    
      if (RB_EMPTY_NODE(&upper->rb_node))
              BUG_ON(!list_empty(&node->upper));
    
    As we are dropping the backref node, if we discover that our upper node
    in the edge we just cleaned up isn't linked into the cache that we are
    now done with this node, thus the BUG_ON().
    
    However this is an erroneous assumption, as we will look up all the
    references for a node first, and then process the pending edges.  All of
    the 'upper' nodes in our pending edges won't be in the cache's rb_tree
    yet, because they haven't been processed.  We could very well have many
    edges still left to cleanup on this node.
    
    The fact is we simply do not need this check, we can just process all of
    the edges only for this node, because below this check we do the
    following
    
      if (list_empty(&upper->lower)) {
              list_add_tail(&upper->lower, &cache->leaves);
              upper->lowest = 1;
      }
    
    If the upper node truly isn't used yet, then we add it to the
    cache->leaves list to be cleaned up later.  If it is still used then the
    last child node that has it linked into its node will add it to the
    leaves list and then it will be cleaned up.
    
    Fix this problem by dropping this logic altogether.  With this fix I no
    longer see the panic when testing with error injection in the backref
    code.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8b64afe9166c8ceec5d7e3893381283b5a07e99
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 18 13:19:55 2021 -0800

    clocksource/drivers/mxs_timer: Add missing semicolon when DEBUG is defined
    
    [ Upstream commit 7da390694afbaed8e0f05717a541dfaf1077ba51 ]
    
    When DEBUG is defined this error occurs
    
    drivers/clocksource/mxs_timer.c:138:1: error:
      expected ‘;’ before ‘}’ token
    
    The preceding statement needs a semicolon.
    Replace pr_info() with pr_debug() and remove the unneeded ifdef.
    
    Fixes: eb8703e2ef7c ("clockevents/drivers/mxs: Migrate to new 'set-state' interface")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210118211955.763609-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f5c5595cf13d9397d1af82d057edfed13f0dbaa
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 14:59:24 2021 +0100

    clocksource/drivers/ixp4xx: Select TIMER_OF when needed
    
    [ Upstream commit 7a3b8758bd6e45f7b671723b5c9fa2b69d0787ae ]
    
    Compile-testing the ixp4xx timer with CONFIG_OF enabled but
    CONFIG_TIMER_OF disabled leads to a harmless warning:
    
    arm-linux-gnueabi-ld: warning: orphan section `__timer_of_table' from `drivers/clocksource/timer-ixp4xx.o' being placed in section `__timer_of_table'
    
    Move the select statement from the platform code into the driver
    so it always gets enabled in configurations that rely on it.
    
    Fixes: 40df14cc5cc0 ("clocksource/drivers/ixp4xx: Add OF initialization support")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210103135955.3808976-1-arnd@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a52a17fd0a3b3da5414ca3f81d21f5b7dd6053c
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 18 13:19:55 2021 -0800

    clocksource/drivers/mxs_timer: Add missing semicolon when DEBUG is defined
    
    [ Upstream commit 7da390694afbaed8e0f05717a541dfaf1077ba51 ]
    
    When DEBUG is defined this error occurs
    
    drivers/clocksource/mxs_timer.c:138:1: error:
      expected ‘;’ before ‘}’ token
    
    The preceding statement needs a semicolon.
    Replace pr_info() with pr_debug() and remove the unneeded ifdef.
    
    Fixes: eb8703e2ef7c ("clockevents/drivers/mxs: Migrate to new 'set-state' interface")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210118211955.763609-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 898c96f756163f757fc9b89a7c23ffd28917d57f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 14:59:24 2021 +0100

    clocksource/drivers/ixp4xx: Select TIMER_OF when needed
    
    [ Upstream commit 7a3b8758bd6e45f7b671723b5c9fa2b69d0787ae ]
    
    Compile-testing the ixp4xx timer with CONFIG_OF enabled but
    CONFIG_TIMER_OF disabled leads to a harmless warning:
    
    arm-linux-gnueabi-ld: warning: orphan section `__timer_of_table' from `drivers/clocksource/timer-ixp4xx.o' being placed in section `__timer_of_table'
    
    Move the select statement from the platform code into the driver
    so it always gets enabled in configurations that rely on it.
    
    Fixes: 40df14cc5cc0 ("clocksource/drivers/ixp4xx: Add OF initialization support")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210103135955.3808976-1-arnd@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ac171abc715e45c09232391bac1f1cca443c6a5
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 18 13:19:55 2021 -0800

    clocksource/drivers/mxs_timer: Add missing semicolon when DEBUG is defined
    
    [ Upstream commit 7da390694afbaed8e0f05717a541dfaf1077ba51 ]
    
    When DEBUG is defined this error occurs
    
    drivers/clocksource/mxs_timer.c:138:1: error:
      expected ‘;’ before ‘}’ token
    
    The preceding statement needs a semicolon.
    Replace pr_info() with pr_debug() and remove the unneeded ifdef.
    
    Fixes: eb8703e2ef7c ("clockevents/drivers/mxs: Migrate to new 'set-state' interface")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210118211955.763609-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe25fe09421eee24b22bd3da94e9a54720fb6ceb
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 18 13:19:55 2021 -0800

    clocksource/drivers/mxs_timer: Add missing semicolon when DEBUG is defined
    
    [ Upstream commit 7da390694afbaed8e0f05717a541dfaf1077ba51 ]
    
    When DEBUG is defined this error occurs
    
    drivers/clocksource/mxs_timer.c:138:1: error:
      expected ‘;’ before ‘}’ token
    
    The preceding statement needs a semicolon.
    Replace pr_info() with pr_debug() and remove the unneeded ifdef.
    
    Fixes: eb8703e2ef7c ("clockevents/drivers/mxs: Migrate to new 'set-state' interface")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210118211955.763609-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b1cbe30b1da2a46d8032868d391362cdec90088
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 18 13:19:55 2021 -0800

    clocksource/drivers/mxs_timer: Add missing semicolon when DEBUG is defined
    
    [ Upstream commit 7da390694afbaed8e0f05717a541dfaf1077ba51 ]
    
    When DEBUG is defined this error occurs
    
    drivers/clocksource/mxs_timer.c:138:1: error:
      expected ‘;’ before ‘}’ token
    
    The preceding statement needs a semicolon.
    Replace pr_info() with pr_debug() and remove the unneeded ifdef.
    
    Fixes: eb8703e2ef7c ("clockevents/drivers/mxs: Migrate to new 'set-state' interface")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210118211955.763609-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da3f0e7b38984eaaef8650d6c82738f986b007a4
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 18 13:19:55 2021 -0800

    clocksource/drivers/mxs_timer: Add missing semicolon when DEBUG is defined
    
    [ Upstream commit 7da390694afbaed8e0f05717a541dfaf1077ba51 ]
    
    When DEBUG is defined this error occurs
    
    drivers/clocksource/mxs_timer.c:138:1: error:
      expected ‘;’ before ‘}’ token
    
    The preceding statement needs a semicolon.
    Replace pr_info() with pr_debug() and remove the unneeded ifdef.
    
    Fixes: eb8703e2ef7c ("clockevents/drivers/mxs: Migrate to new 'set-state' interface")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210118211955.763609-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13dcfae0b23489118654005b9328aa3a5706c859
Author: Damien Le Moal <damien.lemoal@wdc.com>
Date:   Wed Feb 10 14:02:22 2021 +0900

    dt-bindings: add resets property to dw-apb-timer
    
    The Synopsis DesignWare APB timer driver
    (drivers/clocksource/dw_apb_timer_of.c) indirectly uses the resets
    property of its node as it executes the function of_reset_control_get().
    Make sure that this property is documented in
    timer/snps,dw-apb-timer.yaml to avoid make dtbs_check warnings.
    
    Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
    Reviewed-by: Atish Patra <atish.patra@wdc.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>

commit 4aa364443d023fab08c9dd4fe6785e8b73f6eaeb
Merge: c9584234709a 8acb54abc1db
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Feb 22 14:11:36 2021 -0800

    Merge tag 'timers-urgent-2021-02-22' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A small set of clockevent fixes which fell through the cracks before
      the 5.11 release:
    
       - Ensure a clock is enabled on sh_cmt
    
       - Trivial compile fail and compile warning fixes"
    
    * tag 'timers-urgent-2021-02-22' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/mxs_timer: Add missing semicolon when DEBUG is defined
      clocksource/drivers/sh_cmt: Make sure channel clock supply is enabled
      clocksource/drivers/ixp4xx: Select TIMER_OF when needed

commit 9c5b80b795e9c847a7b7f5e63c6bcf07873fbcdf
Merge: 08179b47e1fd 3019270282a1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Feb 21 13:24:39 2021 -0800

    Merge tag 'hyperv-next-signed-20210216' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux
    
    Pull Hyper-V updates from Wei Liu:
    
     - VMBus hardening patches from Andrea Parri and Andres Beltran.
    
     - Patches to make Linux boot as the root partition on Microsoft
       Hypervisor from Wei Liu.
    
     - One patch to add a new sysfs interface to support hibernation on
       Hyper-V from Dexuan Cui.
    
     - Two miscellaneous clean-up patches from Colin and Gustavo.
    
    * tag 'hyperv-next-signed-20210216' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux: (31 commits)
      Revert "Drivers: hv: vmbus: Copy packets sent by Hyper-V out of the ring buffer"
      iommu/hyperv: setup an IO-APIC IRQ remapping domain for root partition
      x86/hyperv: implement an MSI domain for root partition
      asm-generic/hyperv: import data structures for mapping device interrupts
      asm-generic/hyperv: introduce hv_device_id and auxiliary structures
      asm-generic/hyperv: update hv_interrupt_entry
      asm-generic/hyperv: update hv_msi_entry
      x86/hyperv: implement and use hv_smp_prepare_cpus
      x86/hyperv: provide a bunch of helper functions
      ACPI / NUMA: add a stub function for node_to_pxm()
      x86/hyperv: handling hypercall page setup for root
      x86/hyperv: extract partition ID from Microsoft Hypervisor if necessary
      x86/hyperv: allocate output arg pages if required
      clocksource/hyperv: use MSR-based access if running as root
      Drivers: hv: vmbus: skip VMBus initialization if Linux is root
      x86/hyperv: detect if Linux is the root partition
      asm-generic/hyperv: change HV_CPU_POWER_MANAGEMENT to HV_CPU_MANAGEMENT
      hv: hyperv.h: Replace one-element array with flexible-array in struct icmsg_negotiate
      hv_netvsc: Restrict configurations on isolated guests
      Drivers: hv: vmbus: Enforce 'VMBus version >= 5.2' on isolated guests
      ...

commit 3f6ec19f2d05d800bbc42d95dece433da7697864
Merge: b5183bc94b6d 11db5710d4a9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Feb 21 11:55:43 2021 -0800

    Merge tag 'timers-core-2021-02-15' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Time and timer updates:
    
       - Instead of new drivers remove tango, sirf, u300 and atlas drivers
    
       - Add suspend/resume support for microchip pit64b
    
       - The usual fixes, improvements and cleanups here and there"
    
    * tag 'timers-core-2021-02-15' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      timens: Delete no-op time_ns_init()
      alarmtimer: Update kerneldoc
      clocksource/drivers/timer-microchip-pit64b: Add clocksource suspend/resume
      clocksource/drivers/prima: Remove sirf prima driver
      clocksource/drivers/atlas: Remove sirf atlas driver
      clocksource/drivers/tango: Remove tango driver
      clocksource/drivers/u300: Remove the u300 driver
      dt-bindings: timer: nuvoton: Clarify that interrupt of timer 0 should be specified
      clocksource/drivers/davinci: Move pr_fmt() before the includes
      clocksource/drivers/efm32: Drop unused timer code

commit 7d4163c8315729140ad99d6e1ab10dfc7a685640
Author: Wei Liu <wei.liu@kernel.org>
Date:   Wed Feb 3 15:04:23 2021 +0000

    clocksource/hyperv: use MSR-based access if running as root
    
    When Linux runs as the root partition, the setup required for TSC page
    is different. Luckily Linux also has access to the MSR based
    clocksource. We can just disable the TSC page clocksource if Linux is
    the root partition.
    
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20210203150435.27941-5-wei.liu@kernel.org

commit 11db5710d4a954148e00e376f04ba91a498a20dd
Merge: 174bcc691f44 e85c1d21b16b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Feb 10 11:02:20 2021 +0100

    Merge tag 'timers-v5.12-rc1' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/events updates from Daniel Lezcano:
    
     - Drop dead code on efm32 (Uwe Kleine-König)
    
     - Move pr_fmt() before the includes on davinci driver (Bartosz
       Golaszewski)
    
     - Clarified timer interrupt must be specified on nuvoton DT bindings
       (Jonathan Neuschäfer)
    
     - Remove tango, sirf, u300 and atlas timer drivers (Arnd Bergman)
    
     - Add suspend/resume on pit64b (Claudiu Beznea)
    
    Link: https://lore.kernel.org/r/3747fbde-134f-5e1d-47d5-8776c1a52aa1@linaro.org

commit 428d97e18594bc2c5cfd7207dff883384bac6822
Author: Tudor Ambarus <tudor.ambarus@microchip.com>
Date:   Wed Feb 3 17:43:32 2021 +0200

    clk: at91: Fix the declaration of the clocks
    
    These are all "early clocks" that require initialization just at
    of_clk_init() time. Use CLK_OF_DECLARE() to declare them.
    
    This also fixes a problem that was spotted when fw_devlink was
    set to 'on' by default: the boards failed to boot. The reason is
    that CLK_OF_DECLARE_DRIVER() clears the OF_POPULATED and causes
    the consumers of the clock to be postponed by fw_devlink until
    the second initialization routine of the clock has been completed.
    One of the consumers of the clock is the timer, which is used as a
    clocksource, and needs the clock initialized early. Postponing the
    timers caused the fail at boot.
    
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Link: https://lore.kernel.org/r/20210203154332.470587-1-tudor.ambarus@microchip.com
    Acked-by: Saravana Kannan <saravanak@google.com>
    Tested-by: Eugen Hristev <eugen.hristev@microchip.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Reviewed-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

commit 7e2a870a599d4699a626ec26430c7a1ab14a2a49
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Dec 16 11:22:16 2020 -0500

    btrfs: do not cleanup upper nodes in btrfs_backref_cleanup_node
    
    Zygo reported the following panic when testing my error handling patches
    for relocation:
    
      kernel BUG at fs/btrfs/backref.c:2545!
      invalid opcode: 0000 [#1] SMP KASAN PTI CPU: 3 PID: 8472 Comm: btrfs Tainted: G        W 14
      Hardware name: QEMU Standard PC (i440FX + PIIX,
    
      Call Trace:
       btrfs_backref_error_cleanup+0x4df/0x530
       build_backref_tree+0x1a5/0x700
       ? _raw_spin_unlock+0x22/0x30
       ? release_extent_buffer+0x225/0x280
       ? free_extent_buffer.part.52+0xd7/0x140
       relocate_tree_blocks+0x2a6/0xb60
       ? kasan_unpoison_shadow+0x35/0x50
       ? do_relocation+0xc10/0xc10
       ? kasan_kmalloc+0x9/0x10
       ? kmem_cache_alloc_trace+0x6a3/0xcb0
       ? free_extent_buffer.part.52+0xd7/0x140
       ? rb_insert_color+0x342/0x360
       ? add_tree_block.isra.36+0x236/0x2b0
       relocate_block_group+0x2eb/0x780
       ? merge_reloc_roots+0x470/0x470
       btrfs_relocate_block_group+0x26e/0x4c0
       btrfs_relocate_chunk+0x52/0x120
       btrfs_balance+0xe2e/0x18f0
       ? pvclock_clocksource_read+0xeb/0x190
       ? btrfs_relocate_chunk+0x120/0x120
       ? lock_contended+0x620/0x6e0
       ? do_raw_spin_lock+0x1e0/0x1e0
       ? do_raw_spin_unlock+0xa8/0x140
       btrfs_ioctl_balance+0x1f9/0x460
       btrfs_ioctl+0x24c8/0x4380
       ? __kasan_check_read+0x11/0x20
       ? check_chain_key+0x1f4/0x2f0
       ? __asan_loadN+0xf/0x20
       ? btrfs_ioctl_get_supported_features+0x30/0x30
       ? kvm_sched_clock_read+0x18/0x30
       ? check_chain_key+0x1f4/0x2f0
       ? lock_downgrade+0x3f0/0x3f0
       ? handle_mm_fault+0xad6/0x2150
       ? do_vfs_ioctl+0xfc/0x9d0
       ? ioctl_file_clone+0xe0/0xe0
       ? check_flags.part.50+0x6c/0x1e0
       ? check_flags.part.50+0x6c/0x1e0
       ? check_flags+0x26/0x30
       ? lock_is_held_type+0xc3/0xf0
       ? syscall_enter_from_user_mode+0x1b/0x60
       ? do_syscall_64+0x13/0x80
       ? rcu_read_lock_sched_held+0xa1/0xd0
       ? __kasan_check_read+0x11/0x20
       ? __fget_light+0xae/0x110
       __x64_sys_ioctl+0xc3/0x100
       do_syscall_64+0x37/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This occurs because of this check
    
      if (RB_EMPTY_NODE(&upper->rb_node))
              BUG_ON(!list_empty(&node->upper));
    
    As we are dropping the backref node, if we discover that our upper node
    in the edge we just cleaned up isn't linked into the cache that we are
    now done with this node, thus the BUG_ON().
    
    However this is an erroneous assumption, as we will look up all the
    references for a node first, and then process the pending edges.  All of
    the 'upper' nodes in our pending edges won't be in the cache's rb_tree
    yet, because they haven't been processed.  We could very well have many
    edges still left to cleanup on this node.
    
    The fact is we simply do not need this check, we can just process all of
    the edges only for this node, because below this check we do the
    following
    
      if (list_empty(&upper->lower)) {
              list_add_tail(&upper->lower, &cache->leaves);
              upper->lowest = 1;
      }
    
    If the upper node truly isn't used yet, then we add it to the
    cache->leaves list to be cleaned up later.  If it is still used then the
    last child node that has it linked into its node will add it to the
    leaves list and then it will be cleaned up.
    
    Fix this problem by dropping this logic altogether.  With this fix I no
    longer see the panic when testing with error injection in the backref
    code.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit e85c1d21b16b278f50d191155bc674633270e9c6
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Tue Jan 19 14:59:25 2021 +0200

    clocksource/drivers/timer-microchip-pit64b: Add clocksource suspend/resume
    
    Add suspend/resume support for clocksource timer.
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1611061165-30180-1-git-send-email-claudiu.beznea@microchip.com

commit a8d80235808c8359b614412da76dc10518ea9090
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jan 20 14:15:59 2021 +0100

    clocksource/drivers/prima: Remove sirf prima driver
    
    The CSR SiRF prima2/atlas platforms are getting removed, so this driver
    is no longer needed.
    
    Cc: Barry Song <baohua@kernel.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Barry Song <baohua@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210120131559.1971359-5-arnd@kernel.org

commit 446262b27285e86bfc078d5602d7e047a351d536
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jan 20 14:15:58 2021 +0100

    clocksource/drivers/atlas: Remove sirf atlas driver
    
    The CSR SiRF prima2/atlas platforms are getting removed, so this driver
    is no longer needed.
    
    Cc: Barry Song <baohua@kernel.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Barry Song <baohua@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210120131559.1971359-4-arnd@kernel.org

commit 8fdb44176928fb3ef3e10d97eaf1aed82c90bd58
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jan 20 14:15:57 2021 +0100

    clocksource/drivers/tango: Remove tango driver
    
    The tango platform is getting removed, so the driver is no
    longer needed.
    
    Cc: Marc Gonzalez <marc.w.gonzalez@free.fr>
    Cc: Mans Rullgard <mans@mansr.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Mans Rullgard <mans@mansr.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210120131559.1971359-3-arnd@kernel.org

commit 33105406764f7f13c5e7279826f77342c82c41b5
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jan 20 14:15:56 2021 +0100

    clocksource/drivers/u300: Remove the u300 driver
    
    The ST-Ericsson U300 platform is getting removed, so this driver is no
    longer needed.
    
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210120131559.1971359-2-arnd@kernel.org

commit 7da390694afbaed8e0f05717a541dfaf1077ba51
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 18 13:19:55 2021 -0800

    clocksource/drivers/mxs_timer: Add missing semicolon when DEBUG is defined
    
    When DEBUG is defined this error occurs
    
    drivers/clocksource/mxs_timer.c:138:1: error:
      expected ‘;’ before ‘}’ token
    
    The preceding statement needs a semicolon.
    Replace pr_info() with pr_debug() and remove the unneeded ifdef.
    
    Fixes: eb8703e2ef7c ("clockevents/drivers/mxs: Migrate to new 'set-state' interface")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210118211955.763609-1-trix@redhat.com

commit 98509310e490bf3de13c96fbbbca8ef4af9db010
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jan 11 15:08:14 2021 +0100

    clocksource/drivers/davinci: Move pr_fmt() before the includes
    
    We no longer need to undef pr_fmt if we define our own before including
    any headers.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Acked-by: David Lechner <david@lechnology.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210111140814.3668-1-brgl@bgdev.pl

commit 523d83ef0979a9d0c8340913b40b696cb4f2f050
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Fri Jan 15 16:51:26 2021 +0100

    clocksource/drivers/efm32: Drop unused timer code
    
    Support for this machine was just removed, so drop the now unused timer
    code, too.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210115155130.185010-4-u.kleine-koenig@pengutronix.de

commit 2a97d55333e4299f32c98cca6dc5c4db1c5855fc
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Dec 10 20:46:48 2020 +0100

    clocksource/drivers/sh_cmt: Make sure channel clock supply is enabled
    
    The Renesas Compare Match Timer 0 and 1 (CMT0/1) variants have a
    register to control the clock supply to the individual channels.
    Currently the driver does not touch this register, and relies on the
    documented initial value, which has the clock supply enabled for all
    channels present.
    
    However, when Linux starts on the APE6-EVM development board, only the
    clock supply to the first CMT1 channel is enabled.  Hence the first
    channel (used as a clockevent) works, while the second channel (used as
    a clocksource) does not.  Note that the default system clocksource is
    the Cortex-A15 architectured timer, and the user needs to manually
    switch to the CMT1 clocksource to trigger the broken behavior.
    
    Fix this by removing the fragile dependency on implicit reset and/or
    boot loader state, and by enabling the clock supply explicitly for all
    channels used instead.  This requires postponing the clk_disable() call,
    else the timer's registers cannot be accessed in sh_cmt_setup_channel().
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201210194648.2901899-1-geert+renesas@glider.be

commit 7a3b8758bd6e45f7b671723b5c9fa2b69d0787ae
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 14:59:24 2021 +0100

    clocksource/drivers/ixp4xx: Select TIMER_OF when needed
    
    Compile-testing the ixp4xx timer with CONFIG_OF enabled but
    CONFIG_TIMER_OF disabled leads to a harmless warning:
    
    arm-linux-gnueabi-ld: warning: orphan section `__timer_of_table' from `drivers/clocksource/timer-ixp4xx.o' being placed in section `__timer_of_table'
    
    Move the select statement from the platform code into the driver
    so it always gets enabled in configurations that rely on it.
    
    Fixes: 40df14cc5cc0 ("clocksource/drivers/ixp4xx: Add OF initialization support")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210103135955.3808976-1-arnd@kernel.org

commit de634b8986090616627bd0f3c01e057f40618c98
Merge: a402e397b938 0ba882ae2818
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Jan 15 18:17:11 2021 +0000

    Merge series "Remove ARM platform efm32" from Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Uwe Kleine-König <uwe.kleine-koenig@pengutronix.de>:
    
    From: Uwe Kleine-König <uwe.kleine-koenig@pengutronix.de>
    
    Hello,
    
    there are no known active users of the efm32 platform. Given that the
    only machine that is supported has only 4 MiB of RAM its use is also
    quite limited.
    
    Back then it served as the platform to develop ARMv7-M support in Linux
    which was quite fun and still is a blissful memory.
    
    Still given that the code serves no purpose and this probably won't
    change anytime soon, remove all platform support.
    
    I'm unsure what to do with the device tree bindings. Should we delete
    them, too?
    
    Best regards
    Uwe
    
    Uwe Kleine-König (7):
      ARM: drop efm32 platform
      clk: Drop unused efm32gg driver
      clocksource: Drop unused efm32 timer code
      spi: Drop unused efm32 bus driver
      i2c: Drop unused efm32 bus driver
      tty: Drop unused efm32 serial driver
      MAINTAINERS: Remove deleted platform efm32
    
     MAINTAINERS                              |   7 -
     arch/arm/Kconfig                         |  10 +-
     arch/arm/Kconfig.debug                   |  17 -
     arch/arm/Makefile                        |   1 -
     arch/arm/boot/dts/Makefile               |   2 -
     arch/arm/boot/dts/efm32gg-dk3750.dts     |  88 ---
     arch/arm/boot/dts/efm32gg.dtsi           | 177 -----
     arch/arm/configs/efm32_defconfig         |  98 ---
     arch/arm/include/debug/efm32.S           |  45 --
     arch/arm/mach-efm32/Makefile             |   2 -
     arch/arm/mach-efm32/Makefile.boot        |   4 -
     arch/arm/mach-efm32/dtmachine.c          |  16 -
     arch/arm/mm/Kconfig                      |   1 -
     drivers/clk/Makefile                     |   1 -
     drivers/clk/clk-efm32gg.c                |  84 ---
     drivers/clocksource/Kconfig              |   9 -
     drivers/clocksource/Makefile             |   1 -
     drivers/clocksource/timer-efm32.c        | 278 --------
     drivers/i2c/busses/Kconfig               |   7 -
     drivers/i2c/busses/Makefile              |   1 -
     drivers/i2c/busses/i2c-efm32.c           | 469 -------------
     drivers/spi/Kconfig                      |   7 -
     drivers/spi/Makefile                     |   1 -
     drivers/spi/spi-efm32.c                  | 462 ------------
     drivers/tty/serial/Kconfig               |  13 -
     drivers/tty/serial/Makefile              |   1 -
     drivers/tty/serial/efm32-uart.c          | 852 -----------------------
     include/linux/platform_data/efm32-spi.h  |  15 -
     include/linux/platform_data/efm32-uart.h |  19 -
     include/uapi/linux/serial_core.h         |   3 -
     30 files changed, 1 insertion(+), 2690 deletions(-)
     delete mode 100644 arch/arm/boot/dts/efm32gg-dk3750.dts
     delete mode 100644 arch/arm/boot/dts/efm32gg.dtsi
     delete mode 100644 arch/arm/configs/efm32_defconfig
     delete mode 100644 arch/arm/include/debug/efm32.S
     delete mode 100644 arch/arm/mach-efm32/Makefile
     delete mode 100644 arch/arm/mach-efm32/Makefile.boot
     delete mode 100644 arch/arm/mach-efm32/dtmachine.c
     delete mode 100644 drivers/clk/clk-efm32gg.c
     delete mode 100644 drivers/clocksource/timer-efm32.c
     delete mode 100644 drivers/i2c/busses/i2c-efm32.c
     delete mode 100644 drivers/spi/spi-efm32.c
     delete mode 100644 drivers/tty/serial/efm32-uart.c
     delete mode 100644 include/linux/platform_data/efm32-spi.h
     delete mode 100644 include/linux/platform_data/efm32-uart.h
    
    base-commit: 5c8fe583cce542aa0b84adc939ce85293de36e5e
    --
    2.29.2
    
    _______________________________________________
    linux-arm-kernel mailing list
    linux-arm-kernel@lists.infradead.org
    http://lists.infradead.org/mailman/listinfo/linux-arm-kernel

commit 276c71eea8c74cb81ffb587f4a7abdcb808c5a1a
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:26 2020 +0800

    clocksource/drivers/arm_arch_timer: Correct fault programming of CNTKCTL_EL1.EVNTI
    
    [ Upstream commit 8b7770b877d187bfdae1eaf587bd2b792479a31c ]
    
    ARM virtual counter supports event stream, it can only trigger an event
    when the trigger bit (the value of CNTKCTL_EL1.EVNTI) of CNTVCT_EL0 changes,
    so the actual period of event stream is 2^(cntkctl_evnti + 1). For example,
    when the trigger bit is 0, then virtual counter trigger an event for every
    two cycles.
    
    While we're at it, rework the way we compute the trigger bit position
    by making it more obvious that when bits [n:n-1] are both set (with n
    being the most significant bit), we pick bit (n + 1).
    
    Fixes: 037f637767a8 ("drivers: clocksource: add support for ARM architected timer event stream")
    Suggested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-3-zhukeqian1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f94df0cb1e099661f20a7817183d1669f5b323b7
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:25 2020 +0800

    clocksource/drivers/arm_arch_timer: Use stable count reader in erratum sne
    
    [ Upstream commit d8cc3905b8073c7cfbff94af889fa8dc71f21dd5 ]
    
    In commit 0ea415390cd3 ("clocksource/arm_arch_timer: Use arch_timer_read_counter
    to access stable counters"), we separate stable and normal count reader to omit
    unnecessary overhead on systems that have no timer erratum.
    
    However, in erratum_set_next_event_tval_generic(), count reader becomes normal
    reader. This converts it to stable reader.
    
    Fixes: 0ea415390cd3 ("clocksource/arm_arch_timer: Use arch_timer_read_counter to access stable counters")
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-2-zhukeqian1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16cf69c25c96b366d77d9ffd2b5fce6394499e32
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Wed Oct 28 21:12:30 2020 +0800

    clocksource/drivers/riscv: Make RISCV_TIMER depends on RISCV_SBI
    
    [ Upstream commit ab3105446f1ec4e98fadfc998ee24feec271c16c ]
    
    The riscv timer is set via SBI timer call, let's make RISCV_TIMER
    depends on RISCV_SBI, and it also fixes some build issue.
    
    Fixes: d5be89a8d118 ("RISC-V: Resurrect the MMIO timer implementation for M-mode systems")
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Reviewed-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Acked-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201028131230.72907-1-wangkefeng.wang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df4411e4b8d09a75400ee72f1fdc5cd58bb96574
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Wed Nov 25 11:23:45 2020 +0100

    clocksource/drivers/ingenic: Fix section mismatch
    
    [ Upstream commit 5bd7cb29eceb52e4b108917786fdbf2a2c2048ef ]
    
    The function ingenic_tcu_get_clock() is annotated for the __init
    section but it is actually called from the online cpu callback.
    
    That will lead to a crash if a CPU is hotplugged after boot time.
    
    Remove the __init annotation for the ingenic_tcu_get_clock()
    function.
    
    Fixes: f19d838d08fc (clocksource/drivers/ingenic: Add high resolution timer support for SMP/SMT)
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Paul Cercueil <paul@crapouillou.net>
    Tested-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Link: https://lore.kernel.org/r/20201125102346.1816310-1-daniel.lezcano@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93bf920799d92d883cc7240ee8bc648d5534117c
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon Nov 16 21:51:23 2020 +0800

    clocksource/drivers/cadence_ttc: Fix memory leak in ttc_setup_clockevent()
    
    [ Upstream commit eee422c46e6840a81c9db18a497b74387a557b29 ]
    
    If clk_notifier_register() failed, ttc_setup_clockevent() will return
    without freeing 'ttcce', which will leak memory.
    
    Fixes: 70504f311d4b ("clocksource/drivers/cadence_ttc: Convert init function to return error")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201116135123.2164033-1-yukuai3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2983080b0230c7e6316e0c955bf12abaad149fa
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 11 14:47:06 2020 +0800

    clocksource/drivers/orion: Add missing clk_disable_unprepare() on error path
    
    [ Upstream commit c1e6cad00aa2f17845e7270e38ff3cc82c7b022a ]
    
    After calling clk_prepare_enable(), clk_disable_unprepare() need
    be called on error path.
    
    Fixes: fbe4b3566ddc ("clocksource/drivers/orion: Convert init function...")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201111064706.3397156-1-yangyingliang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b6ba2fe652484dcfc5c29a2479d8cda6d817295
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:26 2020 +0800

    clocksource/drivers/arm_arch_timer: Correct fault programming of CNTKCTL_EL1.EVNTI
    
    [ Upstream commit 8b7770b877d187bfdae1eaf587bd2b792479a31c ]
    
    ARM virtual counter supports event stream, it can only trigger an event
    when the trigger bit (the value of CNTKCTL_EL1.EVNTI) of CNTVCT_EL0 changes,
    so the actual period of event stream is 2^(cntkctl_evnti + 1). For example,
    when the trigger bit is 0, then virtual counter trigger an event for every
    two cycles.
    
    While we're at it, rework the way we compute the trigger bit position
    by making it more obvious that when bits [n:n-1] are both set (with n
    being the most significant bit), we pick bit (n + 1).
    
    Fixes: 037f637767a8 ("drivers: clocksource: add support for ARM architected timer event stream")
    Suggested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-3-zhukeqian1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4219894d1542f118ed8ee85b5dc1567a3149368
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:25 2020 +0800

    clocksource/drivers/arm_arch_timer: Use stable count reader in erratum sne
    
    [ Upstream commit d8cc3905b8073c7cfbff94af889fa8dc71f21dd5 ]
    
    In commit 0ea415390cd3 ("clocksource/arm_arch_timer: Use arch_timer_read_counter
    to access stable counters"), we separate stable and normal count reader to omit
    unnecessary overhead on systems that have no timer erratum.
    
    However, in erratum_set_next_event_tval_generic(), count reader becomes normal
    reader. This converts it to stable reader.
    
    Fixes: 0ea415390cd3 ("clocksource/arm_arch_timer: Use arch_timer_read_counter to access stable counters")
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-2-zhukeqian1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d903b80e1abc85de283917a76e508d4b35db2758
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon Nov 16 21:51:23 2020 +0800

    clocksource/drivers/cadence_ttc: Fix memory leak in ttc_setup_clockevent()
    
    [ Upstream commit eee422c46e6840a81c9db18a497b74387a557b29 ]
    
    If clk_notifier_register() failed, ttc_setup_clockevent() will return
    without freeing 'ttcce', which will leak memory.
    
    Fixes: 70504f311d4b ("clocksource/drivers/cadence_ttc: Convert init function to return error")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201116135123.2164033-1-yukuai3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 742d5de6c2fc7fa1d514ab13afa125c3c990a6b5
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 11 14:47:06 2020 +0800

    clocksource/drivers/orion: Add missing clk_disable_unprepare() on error path
    
    [ Upstream commit c1e6cad00aa2f17845e7270e38ff3cc82c7b022a ]
    
    After calling clk_prepare_enable(), clk_disable_unprepare() need
    be called on error path.
    
    Fixes: fbe4b3566ddc ("clocksource/drivers/orion: Convert init function...")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201111064706.3397156-1-yangyingliang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21253ff57b2c953aba6d4615fd185431bf6ff4cc
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:26 2020 +0800

    clocksource/drivers/arm_arch_timer: Correct fault programming of CNTKCTL_EL1.EVNTI
    
    [ Upstream commit 8b7770b877d187bfdae1eaf587bd2b792479a31c ]
    
    ARM virtual counter supports event stream, it can only trigger an event
    when the trigger bit (the value of CNTKCTL_EL1.EVNTI) of CNTVCT_EL0 changes,
    so the actual period of event stream is 2^(cntkctl_evnti + 1). For example,
    when the trigger bit is 0, then virtual counter trigger an event for every
    two cycles.
    
    While we're at it, rework the way we compute the trigger bit position
    by making it more obvious that when bits [n:n-1] are both set (with n
    being the most significant bit), we pick bit (n + 1).
    
    Fixes: 037f637767a8 ("drivers: clocksource: add support for ARM architected timer event stream")
    Suggested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-3-zhukeqian1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 058656355dea56f7383fc68649fa7b2cdb2193dc
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon Nov 16 21:51:23 2020 +0800

    clocksource/drivers/cadence_ttc: Fix memory leak in ttc_setup_clockevent()
    
    [ Upstream commit eee422c46e6840a81c9db18a497b74387a557b29 ]
    
    If clk_notifier_register() failed, ttc_setup_clockevent() will return
    without freeing 'ttcce', which will leak memory.
    
    Fixes: 70504f311d4b ("clocksource/drivers/cadence_ttc: Convert init function to return error")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201116135123.2164033-1-yukuai3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 290a79f8afdd6ded217f3d5981c3c10143c4d551
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:26 2020 +0800

    clocksource/drivers/arm_arch_timer: Correct fault programming of CNTKCTL_EL1.EVNTI
    
    [ Upstream commit 8b7770b877d187bfdae1eaf587bd2b792479a31c ]
    
    ARM virtual counter supports event stream, it can only trigger an event
    when the trigger bit (the value of CNTKCTL_EL1.EVNTI) of CNTVCT_EL0 changes,
    so the actual period of event stream is 2^(cntkctl_evnti + 1). For example,
    when the trigger bit is 0, then virtual counter trigger an event for every
    two cycles.
    
    While we're at it, rework the way we compute the trigger bit position
    by making it more obvious that when bits [n:n-1] are both set (with n
    being the most significant bit), we pick bit (n + 1).
    
    Fixes: 037f637767a8 ("drivers: clocksource: add support for ARM architected timer event stream")
    Suggested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-3-zhukeqian1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b909b090c9a96147bd0217d06886a003a8fb058
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon Nov 16 21:51:23 2020 +0800

    clocksource/drivers/cadence_ttc: Fix memory leak in ttc_setup_clockevent()
    
    [ Upstream commit eee422c46e6840a81c9db18a497b74387a557b29 ]
    
    If clk_notifier_register() failed, ttc_setup_clockevent() will return
    without freeing 'ttcce', which will leak memory.
    
    Fixes: 70504f311d4b ("clocksource/drivers/cadence_ttc: Convert init function to return error")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201116135123.2164033-1-yukuai3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae5d2a1f890f7b06e44911a08433fa3e898dfa32
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:26 2020 +0800

    clocksource/drivers/arm_arch_timer: Correct fault programming of CNTKCTL_EL1.EVNTI
    
    [ Upstream commit 8b7770b877d187bfdae1eaf587bd2b792479a31c ]
    
    ARM virtual counter supports event stream, it can only trigger an event
    when the trigger bit (the value of CNTKCTL_EL1.EVNTI) of CNTVCT_EL0 changes,
    so the actual period of event stream is 2^(cntkctl_evnti + 1). For example,
    when the trigger bit is 0, then virtual counter trigger an event for every
    two cycles.
    
    While we're at it, rework the way we compute the trigger bit position
    by making it more obvious that when bits [n:n-1] are both set (with n
    being the most significant bit), we pick bit (n + 1).
    
    Fixes: 037f637767a8 ("drivers: clocksource: add support for ARM architected timer event stream")
    Suggested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-3-zhukeqian1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67e32fdae622f446e1532c45b570a127e736b715
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon Nov 16 21:51:23 2020 +0800

    clocksource/drivers/cadence_ttc: Fix memory leak in ttc_setup_clockevent()
    
    [ Upstream commit eee422c46e6840a81c9db18a497b74387a557b29 ]
    
    If clk_notifier_register() failed, ttc_setup_clockevent() will return
    without freeing 'ttcce', which will leak memory.
    
    Fixes: 70504f311d4b ("clocksource/drivers/cadence_ttc: Convert init function to return error")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201116135123.2164033-1-yukuai3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5ff4065076f5d71e91ac65fe86bdd582dbd168c
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:26 2020 +0800

    clocksource/drivers/arm_arch_timer: Correct fault programming of CNTKCTL_EL1.EVNTI
    
    [ Upstream commit 8b7770b877d187bfdae1eaf587bd2b792479a31c ]
    
    ARM virtual counter supports event stream, it can only trigger an event
    when the trigger bit (the value of CNTKCTL_EL1.EVNTI) of CNTVCT_EL0 changes,
    so the actual period of event stream is 2^(cntkctl_evnti + 1). For example,
    when the trigger bit is 0, then virtual counter trigger an event for every
    two cycles.
    
    While we're at it, rework the way we compute the trigger bit position
    by making it more obvious that when bits [n:n-1] are both set (with n
    being the most significant bit), we pick bit (n + 1).
    
    Fixes: 037f637767a8 ("drivers: clocksource: add support for ARM architected timer event stream")
    Suggested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-3-zhukeqian1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a932e5702886e872a545d64605c06a51ee17973
Merge: 157807123c94 0774a6ed294b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 16 00:07:17 2020 -0800

    Merge tag 'asm-generic-timers-5.11' of git://git.kernel.org/pub/scm/linux/kernel/git/arnd/asm-generic
    
    Pull asm-generic cross-architecture timer cleanup from Arnd Bergmann:
     "This cleans up two ancient timer features that were never completed in
      the past, CONFIG_GENERIC_CLOCKEVENTS and CONFIG_ARCH_USES_GETTIMEOFFSET.
    
      There was only one user left for the ARCH_USES_GETTIMEOFFSET variant
      of clocksource implementations, the ARM EBSA110 platform. Rather than
      changing to use modern timekeeping, we remove the platform entirely as
      Russell no longer uses his machine and nobody else seems to have one
      any more.
    
      The conditional code for using arch_gettimeoffset() is removed as a
      result.
    
      For CONFIG_GENERIC_CLOCKEVENTS, there are still a couple of platforms
      not using clockevent drivers: parisc, ia64, most of m68k, and one Arm
      platform. These all do timer ticks slighly differently, and this gets
      cleaned up to the point they at least all call the same helper
      function.
    
      Instead of most platforms using 'select GENERIC_CLOCKEVENTS' in
      Kconfig, the polarity is now reversed, with the few remaining ones
      selecting LEGACY_TIMER_TICK instead"
    
    * tag 'asm-generic-timers-5.11' of git://git.kernel.org/pub/scm/linux/kernel/git/arnd/asm-generic:
      timekeeping: default GENERIC_CLOCKEVENTS to enabled
      timekeeping: remove xtime_update
      m68k: remove timer_interrupt() function
      m68k: change remaining timers to legacy_timer_tick
      m68k: m68328: use legacy_timer_tick()
      m68k: sun3/sun3c: use legacy_timer_tick
      m68k: split heartbeat out of timer function
      m68k: coldfire: use legacy_timer_tick()
      parisc: use legacy_timer_tick
      ARM: rpc: use legacy_timer_tick
      ia64: convert to legacy_timer_tick
      timekeeping: add CONFIG_LEGACY_TIMER_TICK
      timekeeping: remove arch_gettimeoffset
      net: remove am79c961a driver
      ARM: remove ebsa110 platform

commit 533369b145d8d1bc44b8ed7f0dd0ecffb16384cc
Merge: 76d4acf22b48 3cabca87b329
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 14 18:21:14 2020 -0800

    Merge tag 'timers-core-2020-12-14' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timers and timekeeping updates from Thomas Gleixner:
     "Core:
    
       - Robustness improvements for the NOHZ tick management
    
       - Fixes and consolidation of the NTP/RTC synchronization code
    
       - Small fixes and improvements in various places
    
       - A set of function documentation udpates and fixes
    
       Drivers:
    
       - Cleanups and improvements in various clocksoure/event drivers
    
       - Removal of the EZChip NPS clocksource driver as the platfrom
         support was removed from ARC
    
       - The usual set of new device tree binding and json conversions
    
       - The RTC driver which have been acked by the RTC maintainer:
    
           * fix a long standing bug in the MC146818 library code which can
             cause reading garbage during the RTC internal update.
    
           * changes related to the NTP/RTC consolidation work"
    
    * tag 'timers-core-2020-12-14' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (46 commits)
      ntp: Fix prototype in the !CONFIG_GENERIC_CMOS_UPDATE case
      tick/sched: Make jiffies update quick check more robust
      ntp: Consolidate the RTC update implementation
      ntp: Make the RTC sync offset less obscure
      ntp, rtc: Move rtc_set_ntp_time() to ntp code
      ntp: Make the RTC synchronization more reliable
      rtc: core: Make the sync offset default more realistic
      rtc: cmos: Make rtc_cmos sync offset correct
      rtc: mc146818: Reduce spinlock section in mc146818_set_time()
      rtc: mc146818: Prevent reading garbage
      clocksource/drivers/sh_cmt: Fix potential deadlock when calling runtime PM
      clocksource/drivers/arm_arch_timer: Correct fault programming of CNTKCTL_EL1.EVNTI
      clocksource/drivers/arm_arch_timer: Use stable count reader in erratum sne
      clocksource/drivers/dw_apb_timer_of: Add error handling if no clock available
      clocksource/drivers/riscv: Make RISCV_TIMER depends on RISCV_SBI
      clocksource/drivers/ingenic: Fix section mismatch
      clocksource/drivers/cadence_ttc: Fix memory leak in ttc_setup_clockevent()
      dt-bindings: timer: renesas: tmu: Convert to json-schema
      dt-bindings: timer: renesas: tmu: Document r8a774e1 bindings
      clocksource/drivers/orion: Add missing clk_disable_unprepare() on error path
      ...

commit 464d2ff716c37d83e8bb0c4f1c1acfc02dbc9984
Merge: aa3b66f401b3 8ae954caf49a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Dec 12 13:53:15 2020 +0100

    Merge tag 'timers-v5.11-2' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/events updates from Daniel Lezcano:
    
     - Fix error handling if no clock is available on dw_apb_timer_of (Dinh Nguyen)
    
     - Fix overhead for erratum handling when the timer has no erratum and
       fix fault programing for the event stream on the arm arch timer
       (Keqian Zhu)
    
     - Fix potential deadlock when calling runtime PM on sh_cmt (Niklas
       Söderlund)

commit eb672def8b9d735b5b6aa2b76a595a3e35bf5898
Merge: 07dd966db740 df6c2ec872a6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Dec 9 21:13:41 2020 +0100

    Merge tag 'omap-for-v5.11/genpd-am437x-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into arm/omap-genpd
    
    Update am473x to boot without platform data
    
    Similar to am335x, we can now update am437x dts files to boot
    with genpd and simple-pm-bus, and drop the related platform data.
    
    To do that, we need to do the following changes for am437x:
    
    - Update the clock driver to keep the l3_main clock always on for
      suspend and resume to work
    
    - Add power domain and reset controller data to omap-prm driver
    
    - Configure interconnect clocks for system timers as those are
      now managed separately by the drivers/clocksource drivers
    
    - Update control module, wkup_m3, emif, ocmcram, mpuss and l3_noc
      for device tree data and drop the legacy platform data
    
    - Update the interconnect instances to boot with gendp and
      simple-pm-bus
    
    - Drop the remaining platform data for am437x
    
    * tag 'omap-for-v5.11/genpd-am437x-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: OMAP2+: Drop legacy remaining legacy platform data for am4
      ARM: dts: Use simple-pm-bus for genpd for am4 l3
      ARM: dts: Move am4 l3 noc to a separate node
      ARM: dts: Use simple-pm-bus for genpd for am4 l4_per
      ARM: dts: Use simple-pm-bus for genpd for am4 l4_fast
      ARM: dts: Use simple-pm-bus for genpd for am4 l4_wkup
      ARM: OMAP2+: Drop legacy platform data for am4 mpuss
      ARM: OMAP2+: Drop legacy platform data for am4 ocmcram
      ARM: OMAP2+: Drop legacy platform data for am4 emif
      ARM: OMAP2+: Drop legacy platform data for am4 wkup_m3
      ARM: dts: Configure interconnect target module for am4 wkup_m3
      ARM: dts: Configure RTC powerdomain for am4
      ARM: OMAP2+: Drop legacy platform data for am4 control module
      ARM: dts: Configure also interconnect clocks for am4 system timer
      ARM: dts: am43xx: add remaining PRM instances
      soc: ti: omap-prm: am4: add genpd support for remaining PRM instances
      clk: ti: am437x: Keep am4 l3 main clock always on for genpd
    
    Link: https://lore.kernel.org/r/pull-1606806458-694517@atomide.com-3
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 07dd966db74047098f7443d4b3493d07bc4d8897
Merge: 80c25006bc97 133ad7ab7005
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Dec 9 21:12:09 2020 +0100

    Merge tag 'omap-for-v5.11/genpd-am335x-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into arm/omap-genpd
    
    Update am335x to boot without platform data
    
    With the driver updates done for genpd support, we can now update
    am335x dts files to boot with genpd and simple-pm-bus, and drop
    the related platform data.
    
    To do that, we need to do the following changes for am335x:
    
    - Add the remaining power domain and reset controller instances
    
    - Configure interconnect clocks for system timers as those are
      now managed separately by the drivers/clocksource drivers
    
    - Update control module, RTC, gpmc, debugss, emif, ocmcram,
      instr, and mpuss for device tree data and drop the legacy
      platform data
    
    - Update the interconnect instances to boot with gendp and
      simple-pm-bus
    
    - Drop the remaining platform data for am335x
    
    - Add kconfig option for OMAP_HWMOD to build it only for the
      SoCs that need it
    
    * tag 'omap-for-v5.11/genpd-am335x-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: OMAP2+: Build hwmod related code as needed
      ARM: OMAP2+: Drop legacy remaining legacy platform data for am3
      ARM: dts: Use simple-pm-bus for genpd for am3 l3
      ARM: dts: Use simple-pm-bus for genpd for am3 l4_per
      ARM: dts: Use simple-pm-bus for genpd for am3 l4_fast
      ARM: dts: Use simple-pm-bus for genpd for am3 l4_wkup
      ARM: OMAP2+: Drop legacy platform data for am3 mpuss
      ARM: OMAP2+: Drop legacy platform data for am3 instr
      ARM: OMAP2+: Drop legacy platform data for am3 ocmcram
      ARM: OMAP2+: Drop legacy platform data for am3 emif
      ARM: OMAP2+: Drop legacy platform data for am3 debugss
      ARM: OMAP2+: Drop legacy platform data for am3 and am4 gpmc
      ARM: OMAP2+: Drop legacy platform data for am3 wkup_m3
      ARM: dts: Configure interconnect target module for am3 wkup_m3
      ARM: dts: Configure RTC powerdomain for am3
      ARM: OMAP2+: Drop legacy platform data for am3 control module
      ARM: dts: Configure also interconnect clocks for am4 system timer
      ARM: dts: am33xx: add remaining PRM instances
    
    Link: https://lore.kernel.org/r/pull-1606806458-694517@atomide.com-2
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 8ae954caf49ac403c177d117fb8e05cbc866aa3c
Author: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
Date:   Sat Dec 5 03:19:20 2020 +0100

    clocksource/drivers/sh_cmt: Fix potential deadlock when calling runtime PM
    
    The ch->lock is used to protect the whole enable() and read() of
    sh_cmt's implementation of struct clocksource. The enable()
    implementation calls pm_runtime_get_sync() which may result in the clock
    source to be read() triggering a cyclic lockdep warning for the
    ch->lock.
    
    The sh_cmt driver implement its own balancing of calls to
    sh_cmt_{enable,disable}() with flags in sh_cmt_{start,stop}(). It does
    this to deal with that start and stop are shared between the clock
    source and clock event providers. While this could be improved on
    verifying corner cases based on any substantial rework on all devices
    this driver supports might prove hard.
    
    As a first step separate the PM handling for clock event and clock
    source. Always put/get the device when enabling/disabling the clock
    source but keep the clock event logic unchanged. This allows the sh_cmt
    implementation of struct clocksource to call PM without holding the
    ch->lock and avoiding the deadlock.
    
    Triggering and log of the deadlock warning,
    
      # echo e60f0000.timer > /sys/devices/system/clocksource/clocksource0/current_clocksource
      [   46.948370] ======================================================
      [   46.954730] WARNING: possible circular locking dependency detected
      [   46.961094] 5.10.0-rc6-arm64-renesas-00001-g0e5fd7414e8b #36 Not tainted
      [   46.967985] ------------------------------------------------------
      [   46.974342] migration/0/11 is trying to acquire lock:
      [   46.979543] ffff0000403ed220 (&dev->power.lock){-...}-{2:2}, at: __pm_runtime_resume+0x40/0x74
      [   46.988445]
      [   46.988445] but task is already holding lock:
      [   46.994441] ffff000040ad0298 (&ch->lock){....}-{2:2}, at: sh_cmt_start+0x28/0x210
      [   47.002173]
      [   47.002173] which lock already depends on the new lock.
      [   47.002173]
      [   47.010573]
      [   47.010573] the existing dependency chain (in reverse order) is:
      [   47.018262]
      [   47.018262] -> #3 (&ch->lock){....}-{2:2}:
      [   47.024033]        lock_acquire.part.0+0x120/0x330
      [   47.028970]        lock_acquire+0x64/0x80
      [   47.033105]        _raw_spin_lock_irqsave+0x7c/0xc4
      [   47.038130]        sh_cmt_start+0x28/0x210
      [   47.042352]        sh_cmt_clocksource_enable+0x28/0x50
      [   47.047644]        change_clocksource+0x9c/0x160
      [   47.052402]        multi_cpu_stop+0xa4/0x190
      [   47.056799]        cpu_stopper_thread+0x90/0x154
      [   47.061557]        smpboot_thread_fn+0x244/0x270
      [   47.066310]        kthread+0x154/0x160
      [   47.070175]        ret_from_fork+0x10/0x20
      [   47.074390]
      [   47.074390] -> #2 (tk_core.seq.seqcount){----}-{0:0}:
      [   47.081136]        lock_acquire.part.0+0x120/0x330
      [   47.086070]        lock_acquire+0x64/0x80
      [   47.090203]        seqcount_lockdep_reader_access.constprop.0+0x74/0x100
      [   47.097096]        ktime_get+0x28/0xa0
      [   47.100960]        hrtimer_start_range_ns+0x210/0x2dc
      [   47.106164]        generic_sched_clock_init+0x70/0x88
      [   47.111364]        sched_clock_init+0x40/0x64
      [   47.115853]        start_kernel+0x494/0x524
      [   47.120156]
      [   47.120156] -> #1 (hrtimer_bases.lock){-.-.}-{2:2}:
      [   47.126721]        lock_acquire.part.0+0x120/0x330
      [   47.136042]        lock_acquire+0x64/0x80
      [   47.144461]        _raw_spin_lock_irqsave+0x7c/0xc4
      [   47.153721]        hrtimer_start_range_ns+0x68/0x2dc
      [   47.163054]        rpm_suspend+0x308/0x5dc
      [   47.171473]        rpm_idle+0xc4/0x2a4
      [   47.179550]        pm_runtime_work+0x98/0xc0
      [   47.188209]        process_one_work+0x294/0x6f0
      [   47.197142]        worker_thread+0x70/0x45c
      [   47.205661]        kthread+0x154/0x160
      [   47.213673]        ret_from_fork+0x10/0x20
      [   47.221957]
      [   47.221957] -> #0 (&dev->power.lock){-...}-{2:2}:
      [   47.236292]        check_noncircular+0x128/0x140
      [   47.244907]        __lock_acquire+0x13b0/0x204c
      [   47.253332]        lock_acquire.part.0+0x120/0x330
      [   47.262033]        lock_acquire+0x64/0x80
      [   47.269826]        _raw_spin_lock_irqsave+0x7c/0xc4
      [   47.278430]        __pm_runtime_resume+0x40/0x74
      [   47.286758]        sh_cmt_start+0x84/0x210
      [   47.294537]        sh_cmt_clocksource_enable+0x28/0x50
      [   47.303449]        change_clocksource+0x9c/0x160
      [   47.311783]        multi_cpu_stop+0xa4/0x190
      [   47.319720]        cpu_stopper_thread+0x90/0x154
      [   47.328022]        smpboot_thread_fn+0x244/0x270
      [   47.336298]        kthread+0x154/0x160
      [   47.343708]        ret_from_fork+0x10/0x20
      [   47.351445]
      [   47.351445] other info that might help us debug this:
      [   47.351445]
      [   47.370225] Chain exists of:
      [   47.370225]   &dev->power.lock --> tk_core.seq.seqcount --> &ch->lock
      [   47.370225]
      [   47.392003]  Possible unsafe locking scenario:
      [   47.392003]
      [   47.405314]        CPU0                    CPU1
      [   47.413569]        ----                    ----
      [   47.421768]   lock(&ch->lock);
      [   47.428425]                                lock(tk_core.seq.seqcount);
      [   47.438701]                                lock(&ch->lock);
      [   47.447930]   lock(&dev->power.lock);
      [   47.455172]
      [   47.455172]  *** DEADLOCK ***
      [   47.455172]
      [   47.471433] 3 locks held by migration/0/11:
      [   47.479099]  #0: ffff8000113c9278 (timekeeper_lock){-.-.}-{2:2}, at: change_clocksource+0x2c/0x160
      [   47.491834]  #1: ffff8000113c8f88 (tk_core.seq.seqcount){----}-{0:0}, at: multi_cpu_stop+0xa4/0x190
      [   47.504727]  #2: ffff000040ad0298 (&ch->lock){....}-{2:2}, at: sh_cmt_start+0x28/0x210
      [   47.516541]
      [   47.516541] stack backtrace:
      [   47.528480] CPU: 0 PID: 11 Comm: migration/0 Not tainted 5.10.0-rc6-arm64-renesas-00001-g0e5fd7414e8b #36
      [   47.542147] Hardware name: Renesas Salvator-X 2nd version board based on r8a77965 (DT)
      [   47.554241] Call trace:
      [   47.560832]  dump_backtrace+0x0/0x190
      [   47.568670]  show_stack+0x14/0x30
      [   47.576144]  dump_stack+0xe8/0x130
      [   47.583670]  print_circular_bug+0x1f0/0x200
      [   47.592015]  check_noncircular+0x128/0x140
      [   47.600289]  __lock_acquire+0x13b0/0x204c
      [   47.608486]  lock_acquire.part.0+0x120/0x330
      [   47.616953]  lock_acquire+0x64/0x80
      [   47.624582]  _raw_spin_lock_irqsave+0x7c/0xc4
      [   47.633114]  __pm_runtime_resume+0x40/0x74
      [   47.641371]  sh_cmt_start+0x84/0x210
      [   47.649115]  sh_cmt_clocksource_enable+0x28/0x50
      [   47.657916]  change_clocksource+0x9c/0x160
      [   47.666165]  multi_cpu_stop+0xa4/0x190
      [   47.674056]  cpu_stopper_thread+0x90/0x154
      [   47.682308]  smpboot_thread_fn+0x244/0x270
      [   47.690560]  kthread+0x154/0x160
      [   47.697927]  ret_from_fork+0x10/0x20
      [   47.708447] clocksource: Switched to clocksource e60f0000.timer
    
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201205021921.1456190-2-niklas.soderlund+renesas@ragnatech.se

commit 8b7770b877d187bfdae1eaf587bd2b792479a31c
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:26 2020 +0800

    clocksource/drivers/arm_arch_timer: Correct fault programming of CNTKCTL_EL1.EVNTI
    
    ARM virtual counter supports event stream, it can only trigger an event
    when the trigger bit (the value of CNTKCTL_EL1.EVNTI) of CNTVCT_EL0 changes,
    so the actual period of event stream is 2^(cntkctl_evnti + 1). For example,
    when the trigger bit is 0, then virtual counter trigger an event for every
    two cycles.
    
    While we're at it, rework the way we compute the trigger bit position
    by making it more obvious that when bits [n:n-1] are both set (with n
    being the most significant bit), we pick bit (n + 1).
    
    Fixes: 037f637767a8 ("drivers: clocksource: add support for ARM architected timer event stream")
    Suggested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-3-zhukeqian1@huawei.com

commit d8cc3905b8073c7cfbff94af889fa8dc71f21dd5
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:25 2020 +0800

    clocksource/drivers/arm_arch_timer: Use stable count reader in erratum sne
    
    In commit 0ea415390cd3 ("clocksource/arm_arch_timer: Use arch_timer_read_counter
    to access stable counters"), we separate stable and normal count reader to omit
    unnecessary overhead on systems that have no timer erratum.
    
    However, in erratum_set_next_event_tval_generic(), count reader becomes normal
    reader. This converts it to stable reader.
    
    Fixes: 0ea415390cd3 ("clocksource/arm_arch_timer: Use arch_timer_read_counter to access stable counters")
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-2-zhukeqian1@huawei.com

commit 5d9814df0aec56a638bbf20795abb4cfaf3cd331
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Sat Dec 5 04:52:23 2020 -0600

    clocksource/drivers/dw_apb_timer_of: Add error handling if no clock available
    
    commit ("b0fc70ce1f02 arm64: berlin: Select DW_APB_TIMER_OF") added the
    support for the dw_apb_timer into the arm64 defconfig. However, for some
    platforms like the Intel Stratix10 and Agilex, the clock manager doesn't
    get loaded until after the timer driver get loaded. Thus, the driver hits
    the panic "No clock nor clock-frequency property for" because it cannot
    properly get the clock.
    
    This patch adds the error handling needed for the timer driver so that
    the kernel can continue booting instead of just hitting the panic.
    
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201205105223.208604-1-dinguyen@kernel.org

commit fef92cd2bc04c64bb3743d40c0b4be47aedf9e23
Merge: b99654491642 ab3105446f1e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Dec 4 00:39:45 2020 +0100

    Merge tag 'timers-v5.11' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/event driver updates from Daniel Lezcano:
    
     - Add static annotation for the sp804 init functions (Zhen Lei)
    
     - Code cleanups and error code path at init time fixes on the sp804
       (Kefen Wang)
    
     - Add new OST timer driver device tree bindings (Zhou Yanjie)
    
     - Remove EZChip NPS clocksource driver corresponding to the NPS
       platform which was removed from the ARC architecture (Vineet Gupta)
    
     - Add missing clk_disable_unprepare() on error path for Orion (Yang
       Yingliang)
    
     - Add device tree bindings documentation for Renesas r8a774e1
       (Marian-Cristian Rotariu)
    
     - Convert Renesas TMU to json-schema (Geert Uytterhoeven)
    
     - Fix memory leak on the error path at init time on the cadence_ttc
       driver (Yu Kuai)
    
     - Fix section mismatch for Ingenic timer driver (Daniel Lezcano)
    
     - Make RISCV_TIMER depends on RISCV_SBI (Kefeng Wang)
    
    Link: https://lore.kernel.org/r/028084fa-d29b-a1d5-7eab-17f77ef69863@linaro.org

commit ab3105446f1ec4e98fadfc998ee24feec271c16c
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Wed Oct 28 21:12:30 2020 +0800

    clocksource/drivers/riscv: Make RISCV_TIMER depends on RISCV_SBI
    
    The riscv timer is set via SBI timer call, let's make RISCV_TIMER
    depends on RISCV_SBI, and it also fixes some build issue.
    
    Fixes: d5be89a8d118 ("RISC-V: Resurrect the MMIO timer implementation for M-mode systems")
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Reviewed-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Acked-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201028131230.72907-1-wangkefeng.wang@huawei.com

commit 5bd7cb29eceb52e4b108917786fdbf2a2c2048ef
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Wed Nov 25 11:23:45 2020 +0100

    clocksource/drivers/ingenic: Fix section mismatch
    
    The function ingenic_tcu_get_clock() is annotated for the __init
    section but it is actually called from the online cpu callback.
    
    That will lead to a crash if a CPU is hotplugged after boot time.
    
    Remove the __init annotation for the ingenic_tcu_get_clock()
    function.
    
    Fixes: f19d838d08fc (clocksource/drivers/ingenic: Add high resolution timer support for SMP/SMT)
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Paul Cercueil <paul@crapouillou.net>
    Tested-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Link: https://lore.kernel.org/r/20201125102346.1816310-1-daniel.lezcano@linaro.org

commit eee422c46e6840a81c9db18a497b74387a557b29
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon Nov 16 21:51:23 2020 +0800

    clocksource/drivers/cadence_ttc: Fix memory leak in ttc_setup_clockevent()
    
    If clk_notifier_register() failed, ttc_setup_clockevent() will return
    without freeing 'ttcce', which will leak memory.
    
    Fixes: 70504f311d4b ("clocksource/drivers/cadence_ttc: Convert init function to return error")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201116135123.2164033-1-yukuai3@huawei.com

commit c1e6cad00aa2f17845e7270e38ff3cc82c7b022a
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Nov 11 14:47:06 2020 +0800

    clocksource/drivers/orion: Add missing clk_disable_unprepare() on error path
    
    After calling clk_prepare_enable(), clk_disable_unprepare() need
    be called on error path.
    
    Fixes: fbe4b3566ddc ("clocksource/drivers/orion: Convert init function...")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201111064706.3397156-1-yangyingliang@huawei.com

commit b6ea209ef124dad4045772a759e2aecd191534c0
Author: Vineet Gupta <Vineet.Gupta1@synopsys.com>
Date:   Thu Nov 5 13:22:08 2020 -0800

    clocksource/drivers/nps: Remove EZChip NPS clocksource driver
    
    NPS platform has been removed from ARC port and there are no in-tree
    users of it now. So RIP !
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201105212210.1891598-2-vgupta@synopsys.com

commit 19f7ce8e36c09f4a2491b065dabd9162018309b6
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Thu Oct 29 20:33:17 2020 +0800

    clocksource/drivers/sp804: Use pr_fmt
    
    Add pr_fmt to prefix pr_<level> output.
    
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201029123317.90286-5-wangkefeng.wang@huawei.com

commit dca54f8ce1c3c979caf06cfdcdf8eab05a00f5ff
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Thu Oct 29 20:33:16 2020 +0800

    clocksource/drivers/sp804: Correct clk_get_rate handle
    
    clk_get_rate won't return negative value, correct clk_get_rate handle.
    
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201029123317.90286-4-wangkefeng.wang@huawei.com

commit 9d4965eb438f0c9f93e91ce6bfec72bbb8def988
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Thu Oct 29 20:33:15 2020 +0800

    clocksource/drivers/sp804: Use clk_prepare_enable and clk_disable_unprepare
    
    Directly use clk_prepare_enable and clk_disable_unprepare.
    
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201029123317.90286-3-wangkefeng.wang@huawei.com

commit 3c07bf0fc3558f680374f8ac6d148b0082aa08c6
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Thu Oct 29 20:33:14 2020 +0800

    clocksource/drivers/sp804: Make some symbol static
    
    drivers/clocksource/timer-sp804.c:38:31: warning: symbol 'arm_sp804_timer' was not declared. Should it be static?
    drivers/clocksource/timer-sp804.c:47:31: warning: symbol 'hisi_sp804_timer' was not declared. Should it be static?
    drivers/clocksource/timer-sp804.c:120:12: warning: symbol 'sp804_clocksource_and_sched_clock_init' was not declared. Should it be static?
    drivers/clocksource/timer-sp804.c:219:12: warning: symbol 'sp804_clockevents_init' was not declared. Should it be static?
    
    And move __initdata after the variables.
    
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201029123317.90286-2-wangkefeng.wang@huawei.com

commit 3c0a4b185f6c82c06025720b00a490c719a6f0ff
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Wed Oct 21 09:22:59 2020 +0800

    clocksource/drivers/sp804: Add static for functions such as sp804_clockevents_init()
    
    Add static for sp804_clocksource_and_sched_clock_init() and
    sp804_clockevents_init(), they are only used in timer-sp804.c now.
    Otherwise, the following warning will be reported:
    
    drivers/clocksource/timer-sp804.c:68:12: warning: no previous prototype \
    for 'sp804_clocksource_and_sched_clock_init' [-Wmissing-prototypes]
    drivers/clocksource/timer-sp804.c:162:12: warning: no previous prototype \
    for 'sp804_clockevents_init' [-Wmissing-prototypes]
    
    Fixes: 975434f8b24a ("clocksource/drivers/sp804: Delete the leading "__" of some functions")
    Fixes: 65f4d7ddc7b6 ("clocksource/drivers/sp804: Remove unused sp804_timer_disable() and timer-sp804.h")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201021012259.2067-2-thunder.leizhen@huawei.com

commit ce7d8056e38b770f070fc4499c577322b6ccb9c7
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Fri Nov 27 00:10:03 2020 +1100

    powerpc/vdso: Prepare for switching VDSO to generic C implementation.
    
    Prepare for switching VDSO to generic C implementation in following
    patch. Here, we:
    - Prepare the helpers to call the C VDSO functions
    - Prepare the required callbacks for the C VDSO functions
    - Prepare the clocksource.h files to define VDSO_ARCH_CLOCKMODES
    - Add the C trampolines to the generic C VDSO functions
    
    powerpc is a bit special for VDSO as well as system calls in the
    way that it requires setting CR SO bit which cannot be done in C.
    Therefore, entry/exit needs to be performed in ASM.
    
    Implementing __arch_get_vdso_data() would clobber the link register,
    requiring the caller to save it. As the ASM calling function already
    has to set a stack frame and saves the link register before calling
    the C vdso function, retriving the vdso data pointer there is lighter.
    
    Implement __arch_vdso_capable() and always return true.
    
    Provide vdso_shift_ns(), as the generic x >> s gives the following
    bad result:
    
      18:   35 25 ff e0     addic.  r9,r5,-32
      1c:   41 80 00 10     blt     2c <shift+0x14>
      20:   7c 64 4c 30     srw     r4,r3,r9
      24:   38 60 00 00     li      r3,0
      ...
      2c:   54 69 08 3c     rlwinm  r9,r3,1,0,30
      30:   21 45 00 1f     subfic  r10,r5,31
      34:   7c 84 2c 30     srw     r4,r4,r5
      38:   7d 29 50 30     slw     r9,r9,r10
      3c:   7c 63 2c 30     srw     r3,r3,r5
      40:   7d 24 23 78     or      r4,r9,r4
    
    In our case the shift is always <= 32. In addition,  the upper 32 bits
    of the result are likely nul. Lets GCC know it, it also optimises the
    following calculations.
    
    With the patch, we get:
       0:   21 25 00 20     subfic  r9,r5,32
       4:   7c 69 48 30     slw     r9,r3,r9
       8:   7c 84 2c 30     srw     r4,r4,r5
       c:   7d 24 23 78     or      r4,r9,r4
      10:   7c 63 2c 30     srw     r3,r3,r5
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201126131006.2431205-6-mpe@ellerman.id.au

commit 5da5a1a1256c33570a51ad47b9616106d9083074
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Wed Nov 18 16:19:00 2020 +0200

    bus: ti-sysc: suppress err msg for timers used as clockevent/source
    
    [ Upstream commit 65fb73676112f6fd107c5e542b2cbcfb206fe881 ]
    
    GP Timers used as clockevent/source are not available for ti-sysc bus and
    handled by Kernel timekeeping core. Now ti-sysc produces error message
    every time such timer is detected:
    
     "ti-sysc: probe of 48040000.target-module failed with error -16"
    
    Such messages are not necessary, so suppress them by returning -ENXIO
    instead of -EBUSY.
    
    Fixes: 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend and resume for am3 and am4")
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44a9e78f9242872c889f176782777fa2ed535650
Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
Date:   Fri Nov 20 16:57:31 2020 +0100

    clk: samsung: Prevent potential endless loop in the PLL ops
    
    The PLL status polling loops in the set_rate callbacks of some PLLs
    have no timeout detection and may become endless loops when something
    goes wrong with the PLL.
    
    For some PLLs there is already the ktime API based timeout detection,
    but it will not work in all conditions when .set_rate gets called.
    In particular, before the clocksource is initialized or when the
    timekeeping is suspended.
    
    This patch adds a common helper with the PLL status bit polling and
    timeout detection. For conditions where the timekeeping API should not
    be used a simple readl_relaxed/cpu_relax() busy loop is added with the
    iterations limit derived from measurements of readl_relaxed() execution
    time for various PLL types and Exynos SoCs variants.
    
    Actual PLL lock time depends on the P divider value, the VCO frequency
    and a constant PLL type specific LOCK_FACTOR and can be calculated as
    
     lock_time = Pdiv * LOCK_FACTOR / VCO_freq
    
    For the ktime API use cases a common timeout value of 20 ms is applied
    for all the PLLs with an assumption that maximum possible value of Pdiv
    is 64, maximum possible LOCK_FACTOR value is 3000 and minimum VCO
    frequency is 24 MHz.
    
    Link: https://lore.kernel.org/r/20201120155731.26898-1-s.nawrocki@samsung.com
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>

commit 65fb73676112f6fd107c5e542b2cbcfb206fe881
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Wed Nov 18 16:19:00 2020 +0200

    bus: ti-sysc: suppress err msg for timers used as clockevent/source
    
    GP Timers used as clockevent/source are not available for ti-sysc bus and
    handled by Kernel timekeeping core. Now ti-sysc produces error message
    every time such timer is detected:
    
     "ti-sysc: probe of 48040000.target-module failed with error -16"
    
    Such messages are not necessary, so suppress them by returning -ENXIO
    instead of -EBUSY.
    
    Fixes: 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend and resume for am3 and am4")
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 00cb24bec0abcf177613abbfc32d7710ac8d6544
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Nov 16 12:57:13 2020 +0200

    ARM: dts: Configure also interconnect clocks for am4 system timer
    
    We now manage clocksource and clockevent clocks directly with
    timer-ti-dm-systimer. In order to use genpd with prm_omap,
    GENPD_FLAG_PM_CLK and simple-pm-bus, we need to keep the system
    timer related interconnect clocks enabled until clocksource suspend
    is done.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit b7427dc49fcc8dfa95502f8c8e009738d4906d4e
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Nov 16 12:57:13 2020 +0200

    ARM: dts: Configure also interconnect clocks for am4 system timer
    
    We now manage clocksource and clockevent clocks directly with
    timer-ti-dm-systimer. In order to use genpd with prm_omap,
    GENPD_FLAG_PM_CLK and simple-pm-bus, we need to keep the system
    timer related interconnect clocks enabled until clocksource suspend
    is done.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit fc51989062138744b56e47190915ce68484e73f3
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Nov 3 16:06:25 2020 +0100

    PM: domains: Rename pm_genpd_syscore_poweroff|poweron()
    
    To better describe what the pm_genpd_syscore_poweroff|poweron() functions
    actually do, let's rename them to dev_pm_genpd_suspend|resume() and update
    the rather few callers of them accordingly (a couple of clocksource
    drivers).
    
    Moreover, let's take the opportunity to add some documentation of these
    exported functions, as that is currently missing.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 0fd19be98a2679d41d711fc324f5ce8a1e85d780
Author: Mohammed Gamal <mgamal@redhat.com>
Date:   Thu Sep 24 17:11:17 2020 +0200

    hv: clocksource: Add notrace attribute to read_hv_sched_clock_*() functions
    
    [ Upstream commit 1f3aed01473c41c9f896fbf4c30d330655e8aa7c ]
    
    When selecting function_graph tracer with the command:
     # echo function_graph > /sys/kernel/debug/tracing/current_tracer
    
    The kernel crashes with the following stack trace:
    
    [69703.122389] BUG: stack guard page was hit at 000000001056545c (stack is 00000000fa3f8fed..0000000005d39503)
    [69703.122403] kernel stack overflow (double-fault): 0000 [#1] SMP PTI
    [69703.122413] CPU: 0 PID: 16982 Comm: bash Kdump: loaded Not tainted 4.18.0-236.el8.x86_64 #1
    [69703.122420] Hardware name: Microsoft Corporation Virtual Machine/Virtual Machine, BIOS Hyper-V UEFI Release v4.0 12/17/2019
    [69703.122433] RIP: 0010repare_ftrace_return+0xa/0x110
    [69703.122458] Code: 05 00 0f 0b 48 c7 c7 10 ca 69 ae 0f b6 f0 e8 4b 52 0c 00 31 c0 eb ca 66 0f 1f 84 00 00 00 00 00 55 48 89 e5 41 56 41 55 41 54 <53> 48 83 ec 18 65 48 8b 04 25 28 00 00 00 48 89 45 d8 31 c0 48 85
    [69703.122467] RSP: 0018:ffffbd6d01118000 EFLAGS: 00010086
    [69703.122476] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000003
    [69703.122484] RDX: 0000000000000000 RSI: ffffbd6d011180d8 RDI: ffffffffadce7550
    [69703.122491] RBP: ffffbd6d01118018 R08: 0000000000000000 R09: ffff9d4b09266000
    [69703.122498] R10: ffff9d4b0fc04540 R11: ffff9d4b0fc20a00 R12: ffff9d4b6e42aa90
    [69703.122506] R13: ffff9d4b0fc20ab8 R14: 00000000000003e8 R15: ffffbd6d0111837c
    [69703.122514] FS:  00007fd5f2588740(0000) GS:ffff9d4b6e400000(0000) knlGS:0000000000000000
    [69703.122521] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [69703.122528] CR2: ffffbd6d01117ff8 CR3: 00000000565d8001 CR4: 00000000003606f0
    [69703.122538] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [69703.122545] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [69703.122552] Call Trace:
    [69703.122568]  ftrace_graph_caller+0x6b/0xa0
    [69703.122589]  ? read_hv_sched_clock_tsc+0x5/0x20
    [69703.122599]  read_hv_sched_clock_tsc+0x5/0x20
    [69703.122611]  sched_clock+0x5/0x10
    [69703.122621]  sched_clock_local+0x12/0x80
    [69703.122631]  sched_clock_cpu+0x8c/0xb0
    [69703.122644]  trace_clock_global+0x21/0x90
    [69703.122655]  ring_buffer_lock_reserve+0x100/0x3c0
    [69703.122671]  trace_buffer_lock_reserve+0x16/0x50
    [69703.122683]  __trace_graph_entry+0x28/0x90
    [69703.122695]  trace_graph_entry+0xfd/0x1a0
    [69703.122705]  ? read_hv_clock_tsc_cs+0x10/0x10
    [69703.122714]  ? sched_clock+0x5/0x10
    [69703.122723]  prepare_ftrace_return+0x99/0x110
    [69703.122734]  ? read_hv_clock_tsc_cs+0x10/0x10
    [69703.122743]  ? sched_clock+0x5/0x10
    [69703.122752]  ftrace_graph_caller+0x6b/0xa0
    [69703.122768]  ? read_hv_clock_tsc_cs+0x10/0x10
    [69703.122777]  ? sched_clock+0x5/0x10
    [69703.122786]  ? read_hv_sched_clock_tsc+0x5/0x20
    [69703.122796]  ? ring_buffer_unlock_commit+0x1d/0xa0
    [69703.122805]  read_hv_sched_clock_tsc+0x5/0x20
    [69703.122814]  ftrace_graph_caller+0xa0/0xa0
    [ ... recursion snipped ... ]
    
    Setting the notrace attribute for read_hv_sched_clock_msr() and
    read_hv_sched_clock_tsc() fixes it.
    
    Fixes: bd00cd52d5be ("clocksource/drivers/hyperv: Add Hyper-V specific sched clock function")
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Mohammed Gamal <mgamal@redhat.com>
    Link: https://lore.kernel.org/r/20200924151117.767442-1-mgamal@redhat.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6ca9ea12055a15693071d24ea6cf36c05d50770
Author: Mohammed Gamal <mgamal@redhat.com>
Date:   Thu Sep 24 17:11:17 2020 +0200

    hv: clocksource: Add notrace attribute to read_hv_sched_clock_*() functions
    
    [ Upstream commit 1f3aed01473c41c9f896fbf4c30d330655e8aa7c ]
    
    When selecting function_graph tracer with the command:
     # echo function_graph > /sys/kernel/debug/tracing/current_tracer
    
    The kernel crashes with the following stack trace:
    
    [69703.122389] BUG: stack guard page was hit at 000000001056545c (stack is 00000000fa3f8fed..0000000005d39503)
    [69703.122403] kernel stack overflow (double-fault): 0000 [#1] SMP PTI
    [69703.122413] CPU: 0 PID: 16982 Comm: bash Kdump: loaded Not tainted 4.18.0-236.el8.x86_64 #1
    [69703.122420] Hardware name: Microsoft Corporation Virtual Machine/Virtual Machine, BIOS Hyper-V UEFI Release v4.0 12/17/2019
    [69703.122433] RIP: 0010repare_ftrace_return+0xa/0x110
    [69703.122458] Code: 05 00 0f 0b 48 c7 c7 10 ca 69 ae 0f b6 f0 e8 4b 52 0c 00 31 c0 eb ca 66 0f 1f 84 00 00 00 00 00 55 48 89 e5 41 56 41 55 41 54 <53> 48 83 ec 18 65 48 8b 04 25 28 00 00 00 48 89 45 d8 31 c0 48 85
    [69703.122467] RSP: 0018:ffffbd6d01118000 EFLAGS: 00010086
    [69703.122476] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000003
    [69703.122484] RDX: 0000000000000000 RSI: ffffbd6d011180d8 RDI: ffffffffadce7550
    [69703.122491] RBP: ffffbd6d01118018 R08: 0000000000000000 R09: ffff9d4b09266000
    [69703.122498] R10: ffff9d4b0fc04540 R11: ffff9d4b0fc20a00 R12: ffff9d4b6e42aa90
    [69703.122506] R13: ffff9d4b0fc20ab8 R14: 00000000000003e8 R15: ffffbd6d0111837c
    [69703.122514] FS:  00007fd5f2588740(0000) GS:ffff9d4b6e400000(0000) knlGS:0000000000000000
    [69703.122521] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [69703.122528] CR2: ffffbd6d01117ff8 CR3: 00000000565d8001 CR4: 00000000003606f0
    [69703.122538] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [69703.122545] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [69703.122552] Call Trace:
    [69703.122568]  ftrace_graph_caller+0x6b/0xa0
    [69703.122589]  ? read_hv_sched_clock_tsc+0x5/0x20
    [69703.122599]  read_hv_sched_clock_tsc+0x5/0x20
    [69703.122611]  sched_clock+0x5/0x10
    [69703.122621]  sched_clock_local+0x12/0x80
    [69703.122631]  sched_clock_cpu+0x8c/0xb0
    [69703.122644]  trace_clock_global+0x21/0x90
    [69703.122655]  ring_buffer_lock_reserve+0x100/0x3c0
    [69703.122671]  trace_buffer_lock_reserve+0x16/0x50
    [69703.122683]  __trace_graph_entry+0x28/0x90
    [69703.122695]  trace_graph_entry+0xfd/0x1a0
    [69703.122705]  ? read_hv_clock_tsc_cs+0x10/0x10
    [69703.122714]  ? sched_clock+0x5/0x10
    [69703.122723]  prepare_ftrace_return+0x99/0x110
    [69703.122734]  ? read_hv_clock_tsc_cs+0x10/0x10
    [69703.122743]  ? sched_clock+0x5/0x10
    [69703.122752]  ftrace_graph_caller+0x6b/0xa0
    [69703.122768]  ? read_hv_clock_tsc_cs+0x10/0x10
    [69703.122777]  ? sched_clock+0x5/0x10
    [69703.122786]  ? read_hv_sched_clock_tsc+0x5/0x20
    [69703.122796]  ? ring_buffer_unlock_commit+0x1d/0xa0
    [69703.122805]  read_hv_sched_clock_tsc+0x5/0x20
    [69703.122814]  ftrace_graph_caller+0xa0/0xa0
    [ ... recursion snipped ... ]
    
    Setting the notrace attribute for read_hv_sched_clock_msr() and
    read_hv_sched_clock_tsc() fixes it.
    
    Fixes: bd00cd52d5be ("clocksource/drivers/hyperv: Add Hyper-V specific sched clock function")
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Mohammed Gamal <mgamal@redhat.com>
    Link: https://lore.kernel.org/r/20200924151117.767442-1-mgamal@redhat.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4907a43da83184d4e88009654c9b31f5e091f709
Merge: da9803dfd395 1f3aed01473c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 14 10:32:10 2020 -0700

    Merge tag 'hyperv-next-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux
    
    Pull Hyper-V updates from Wei Liu:
    
     - a series from Boqun Feng to support page size larger than 4K
    
     - a few miscellaneous clean-ups
    
    * tag 'hyperv-next-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux:
      hv: clocksource: Add notrace attribute to read_hv_sched_clock_*() functions
      x86/hyperv: Remove aliases with X64 in their name
      PCI: hv: Document missing hv_pci_protocol_negotiation() parameter
      scsi: storvsc: Support PAGE_SIZE larger than 4K
      Driver: hv: util: Use VMBUS_RING_SIZE() for ringbuffer sizes
      HID: hyperv: Use VMBUS_RING_SIZE() for ringbuffer sizes
      Input: hyperv-keyboard: Use VMBUS_RING_SIZE() for ringbuffer sizes
      hv_netvsc: Use HV_HYP_PAGE_SIZE for Hyper-V communication
      hv: hyperv.h: Introduce some hvpfn helper functions
      Drivers: hv: vmbus: Move virt_to_hvpfn() to hyperv header
      Drivers: hv: Use HV_HYP_PAGE in hv_synic_enable_regs()
      Drivers: hv: vmbus: Introduce types of GPADL
      Drivers: hv: vmbus: Move __vmbus_open()
      Drivers: hv: vmbus: Always use HV_HYP_PAGE_SIZE for gpadl
      drivers: hv: remove cast from hyperv_die_event

commit f5f59336a9ae8f683772d6b8cb2d6732b5e567ea
Merge: 20d49bfcc3d2 1b80043ed218
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 12 11:27:54 2020 -0700

    Merge tag 'timers-core-2020-10-12' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timekeeping updates from Thomas Gleixner:
     "Updates for timekeeping, timers and related drivers:
    
      Core:
    
       - Early boot support for the NMI safe timekeeper by utilizing
         local_clock() up to the point where timekeeping is initialized.
         This allows printk() to store multiple timestamps in the ringbuffer
         which is useful for coordinating dmesg information across a fleet
         of machines.
    
       - Provide a multi-timestamp accessor for printk()
    
       - Make timer init more robust by checking for invalid timer flags.
    
       - Comma vs semicolon fixes
    
      Drivers:
    
       - Support for new platforms in existing drivers (SP804 and Renesas
         CMT)
    
       - Comma vs semicolon fixes
    
    * tag 'timers-core-2020-10-12' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/armada-370-xp: Use semicolons rather than commas to separate statements
      clocksource/drivers/mps2-timer: Use semicolons rather than commas to separate statements
      timers: Mask invalid flags in do_init_timer()
      clocksource/drivers/sp804: Enable Hisilicon sp804 timer 64bit mode
      clocksource/drivers/sp804: Add support for Hisilicon sp804 timer
      clocksource/drivers/sp804: Support non-standard register offset
      clocksource/drivers/sp804: Prepare for support non-standard register offset
      clocksource/drivers/sp804: Remove a mismatched comment
      clocksource/drivers/sp804: Delete the leading "__" of some functions
      clocksource/drivers/sp804: Remove unused sp804_timer_disable() and timer-sp804.h
      clocksource/drivers/sp804: Cleanup clk_get_sys()
      dt-bindings: timer: renesas,cmt: Document r8a774e1 CMT support
      dt-bindings: timer: renesas,cmt: Document r8a7742 CMT support
      alarmtimer: Convert comma to semicolon
      timekeeping: Provide multi-timestamp accessor to NMI safe timekeeper
      timekeeping: Utilize local_clock() for NMI safe timekeeper during early boot

commit 4a1db91e697a2cb2eb5061a08560f884221f915c
Author: Guo Ren <guoren@linux.alibaba.com>
Date:   Tue Aug 18 07:31:17 2020 +0000

    clocksource/drivers/timer-gx6605s: Fixup counter reload
    
    [ Upstream commit bc6717d55d07110d8f3c6d31ec2af50c11b07091 ]
    
    When the timer counts to the upper limit, an overflow interrupt is
    generated, and the count is reset with the value in the TIME_INI
    register. But the software expects to start counting from 0 when
    the count overflows, so it forces TIME_INI to 0 to solve the
    potential interrupt storm problem.
    
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Tested-by: Xu Kai <xukai@nationalchip.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1597735877-71115-1-git-send-email-guoren@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 688aa0e0aaf947e397004236318a705181591828
Author: Guo Ren <guoren@linux.alibaba.com>
Date:   Tue Aug 18 07:31:17 2020 +0000

    clocksource/drivers/timer-gx6605s: Fixup counter reload
    
    [ Upstream commit bc6717d55d07110d8f3c6d31ec2af50c11b07091 ]
    
    When the timer counts to the upper limit, an overflow interrupt is
    generated, and the count is reset with the value in the TIME_INI
    register. But the software expects to start counting from 0 when
    the count overflows, so it forces TIME_INI to 0 to solve the
    potential interrupt storm problem.
    
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Tested-by: Xu Kai <xukai@nationalchip.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1597735877-71115-1-git-send-email-guoren@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db23baa28eb1f93df1fc175a419e7ffe5b6f1582
Merge: 4e3b9ce271b4 aa9887608e77
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 2 10:13:05 2020 -0700

    Merge tag 'riscv-for-linus-5.9-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux
    
    Pull RISC-V fixes from Palmer Dabbelt:
     "Two fixes for this week:
    
       - The addition of a symbol export for clint_time_val, which has been
         inlined into some timex functions and can be used by drivers.
    
       - A fix to avoid calling get_cycles() before the timers have been
         probed.
    
      These both only effect !MMU systems"
    
    * tag 'riscv-for-linus-5.9-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux:
      RISC-V: Check clint_time_val before use
      clocksource: clint: Export clint_time_val for modules

commit 1b80043ed21894eca888157145b955df02887995
Author: Julia Lawall <Julia.Lawall@inria.fr>
Date:   Sun Sep 27 21:12:26 2020 +0200

    clocksource/drivers/armada-370-xp: Use semicolons rather than commas to separate statements
    
    Replace commas with semicolons.  What is done is essentially described by
    the following Coccinelle semantic patch (http://coccinelle.lip6.fr/):
    
    // <smpl>
    @@ expression e1,e2; @@
    e1
    -,
    +;
    e2
    ... when any
    // </smpl>
    
    Signed-off-by: Julia Lawall <Julia.Lawall@inria.fr>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1601233948-11629-17-git-send-email-Julia.Lawall@inria.fr

commit 92ec195fb92adbe31efc631b9c96630ce5684cdd
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:41 2020 +0800

    clocksource/drivers/h8300_timer8: Fix wrong return value in h8300_8timer_init()
    
    [ Upstream commit 400d033f5a599120089b5f0c54d14d198499af5a ]
    
    In the init function, if the call to of_iomap() fails, the return
    value is ENXIO instead of -ENXIO.
    
    Change to the right negative errno.
    
    Fixes: 691f8f878290f ("clocksource/drivers/h8300_timer8: Convert init function to return error")
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200802111541.5429-1-tianjia.zhang@linux.alibaba.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 510c51ff61e3313426f4103dc12766156335a8db
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 17 12:24:28 2020 +0300

    clocksource/drivers/timer-ti-dm: Do reset before enable
    
    commit 164805157f3c6834670afbaff563353c773131f1 upstream.
    
    Commit 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend and
    resume for am3 and am4") exposed a new issue for type2 dual mode timers
    on at least omap5 where the clockevent will stop when the SoC starts
    entering idle states during the boot.
    
    Turns out we are wrongly first enabling the system timer and then
    resetting it, while we must also re-enable it after reset. The current
    sequence leaves the timer module in a partially initialized state. This
    issue went unnoticed earlier with ti-sysc driver reconfiguring the timer
    module until we fixed the issue of ti-sysc reconfiguring system timers.
    
    Let's fix the issue by calling dmtimer_systimer_enable() from reset for
    both type1 and type2 timers, and switch the order of reset and enable in
    dmtimer_systimer_setup(). Let's also move dmtimer_systimer_enable() and
    dmtimer_systimer_disable() to do this without adding forward declarations.
    
    Fixes: 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend and resume for am3 and am4")
    Reported-by: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200817092428.6176-1-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab7eeefd46b5bf1d7d2b9be15fe306a19e0bc569
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:41 2020 +0800

    clocksource/drivers/h8300_timer8: Fix wrong return value in h8300_8timer_init()
    
    [ Upstream commit 400d033f5a599120089b5f0c54d14d198499af5a ]
    
    In the init function, if the call to of_iomap() fails, the return
    value is ENXIO instead of -ENXIO.
    
    Change to the right negative errno.
    
    Fixes: 691f8f878290f ("clocksource/drivers/h8300_timer8: Convert init function to return error")
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200802111541.5429-1-tianjia.zhang@linux.alibaba.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f43500892470820d190e044364094d93b20d0c4e
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:41 2020 +0800

    clocksource/drivers/h8300_timer8: Fix wrong return value in h8300_8timer_init()
    
    [ Upstream commit 400d033f5a599120089b5f0c54d14d198499af5a ]
    
    In the init function, if the call to of_iomap() fails, the return
    value is ENXIO instead of -ENXIO.
    
    Change to the right negative errno.
    
    Fixes: 691f8f878290f ("clocksource/drivers/h8300_timer8: Convert init function to return error")
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200802111541.5429-1-tianjia.zhang@linux.alibaba.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 907a6ee8b0e5691abefcc599b27ca7edee00600a
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:41 2020 +0800

    clocksource/drivers/h8300_timer8: Fix wrong return value in h8300_8timer_init()
    
    [ Upstream commit 400d033f5a599120089b5f0c54d14d198499af5a ]
    
    In the init function, if the call to of_iomap() fails, the return
    value is ENXIO instead of -ENXIO.
    
    Change to the right negative errno.
    
    Fixes: 691f8f878290f ("clocksource/drivers/h8300_timer8: Convert init function to return error")
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200802111541.5429-1-tianjia.zhang@linux.alibaba.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47662437672be7b993611e0dfb182480eafcf570
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:41 2020 +0800

    clocksource/drivers/h8300_timer8: Fix wrong return value in h8300_8timer_init()
    
    [ Upstream commit 400d033f5a599120089b5f0c54d14d198499af5a ]
    
    In the init function, if the call to of_iomap() fails, the return
    value is ENXIO instead of -ENXIO.
    
    Change to the right negative errno.
    
    Fixes: 691f8f878290f ("clocksource/drivers/h8300_timer8: Convert init function to return error")
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200802111541.5429-1-tianjia.zhang@linux.alibaba.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d555b3ac49b40f94c270681b697d45dcae9faa6
Author: Julia Lawall <Julia.Lawall@inria.fr>
Date:   Sun Sep 27 21:12:21 2020 +0200

    clocksource/drivers/mps2-timer: Use semicolons rather than commas to separate statements
    
    Replace commas with semicolons.  What is done is essentially described by
    the following Coccinelle semantic patch (http://coccinelle.lip6.fr/):
    
    // <smpl>
    @@ expression e1,e2; @@
    e1
    -,
    +;
    e2
    ... when any
    // </smpl>
    
    Signed-off-by: Julia Lawall <Julia.Lawall@inria.fr>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1601233948-11629-12-git-send-email-Julia.Lawall@inria.fr

commit c14decfca23cfbeb423ad8be3961a58a31a5473c
Author: Palmer Dabbelt <palmerdabbelt@google.com>
Date:   Tue Sep 29 23:48:47 2020 -0700

    clocksource: clint: Export clint_time_val for modules
    
    clint_time_val will soon be used by the RISC-V implementation of
    random_get_entropy(), which is a static inline function that may be used by
    modules (at least CRYPTO_JITTERENTROPY=m).
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>

commit 2defc3fa18a68963a330187f5386968e50832d06
Merge: eb45df24fe82 7f4a122d0b50
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Sep 28 18:28:48 2020 +0100

    Merge series "use semicolons rather than commas to separate statements" from Julia Lawall <Julia.Lawall@inria.fr>:
    
    These patches replace commas by semicolons.  This was done using the
    Coccinelle semantic patch (http://coccinelle.lip6.fr/) shown below.
    
    This semantic patch ensures that commas inside for loop headers will not be
    transformed.  It also doesn't touch macro definitions.
    
    Coccinelle ensures that braces are added as needed when a single-statement
    branch turns into a multi-statement one.
    
    This semantic patch has a few false positives, for variable delcarations
    such as:
    
    LIST_HEAD(x), *y;
    
    The semantic patch could be improved to avoid these, but for the moment
    they have been removed manually (2 occurrences).
    
    // <smpl>
    @initialize:ocaml@
    @@
    
    let infunction p =
      (* avoid macros *)
      (List.hd p).current_element <> "something_else"
    
    let combined p1 p2 =
      (List.hd p1).line_end = (List.hd p2).line ||
      (((List.hd p1).line_end < (List.hd p2).line) &&
       ((List.hd p1).col < (List.hd p2).col))
    
    @bad@
    statement S;
    declaration d;
    position p;
    @@
    
    S@p
    d
    
    // special cases where newlines are needed (hope for no more than 5)
    @@
    expression e1,e2;
    statement S;
    position p != bad.p;
    position p1;
    position p2 :
        script:ocaml(p1) { infunction p1 && combined p1 p2 };
    @@
    
    - e1@p1,@S@p e2@p2;
    + e1; e2;
    
    @@
    expression e1,e2;
    statement S;
    position p != bad.p;
    position p1;
    position p2 :
        script:ocaml(p1) { infunction p1 && combined p1 p2 };
    @@
    
    - e1@p1,@S@p e2@p2;
    + e1; e2;
    
    @@
    expression e1,e2;
    statement S;
    position p != bad.p;
    position p1;
    position p2 :
        script:ocaml(p1) { infunction p1 && combined p1 p2 };
    @@
    
    - e1@p1,@S@p e2@p2;
    + e1; e2;
    
    @@
    expression e1,e2;
    statement S;
    position p != bad.p;
    position p1;
    position p2 :
        script:ocaml(p1) { infunction p1 && combined p1 p2 };
    @@
    
    - e1@p1,@S@p e2@p2;
    + e1; e2;
    
    @@
    expression e1,e2;
    statement S;
    position p != bad.p;
    position p1;
    position p2 :
        script:ocaml(p1) { infunction p1 && combined p1 p2 };
    @@
    
    - e1@p1,@S@p e2@p2;
    + e1; e2;
    
    @r@
    expression e1,e2;
    statement S;
    position p != bad.p;
    @@
    
    e1 ,@S@p e2;
    
    @@
    expression e1,e2;
    position p1;
    position p2 :
        script:ocaml(p1) { infunction p1 && not(combined p1 p2) };
    statement S;
    position r.p;
    @@
    
    e1@p1
    -,@S@p
    +;
    e2@p2
    ... when any
    // </smpl>
    
    ---
    
     drivers/acpi/processor_idle.c               |    4 +++-
     drivers/ata/pata_icside.c                   |   21 +++++++++++++--------
     drivers/base/regmap/regmap-debugfs.c        |    2 +-
     drivers/bcma/driver_pci_host.c              |    4 ++--
     drivers/block/drbd/drbd_receiver.c          |    6 ++++--
     drivers/char/agp/amd-k7-agp.c               |    2 +-
     drivers/char/agp/nvidia-agp.c               |    2 +-
     drivers/char/agp/sworks-agp.c               |    2 +-
     drivers/char/hw_random/iproc-rng200.c       |    8 ++++----
     drivers/char/hw_random/mxc-rnga.c           |    6 +++---
     drivers/char/hw_random/stm32-rng.c          |    8 ++++----
     drivers/char/ipmi/bt-bmc.c                  |    6 +++---
     drivers/clk/meson/meson-aoclk.c             |    2 +-
     drivers/clk/mvebu/ap-cpu-clk.c              |    2 +-
     drivers/clk/uniphier/clk-uniphier-cpugear.c |    2 +-
     drivers/clk/uniphier/clk-uniphier-mux.c     |    2 +-
     drivers/clocksource/mps2-timer.c            |    6 +++---
     drivers/clocksource/timer-armada-370-xp.c   |    8 ++++----
     drivers/counter/ti-eqep.c                   |    2 +-
     drivers/crypto/amcc/crypto4xx_alg.c         |    2 +-
     drivers/crypto/atmel-tdes.c                 |    2 +-
     drivers/crypto/hifn_795x.c                  |    4 ++--
     drivers/crypto/talitos.c                    |    8 ++++----
     23 files changed, 60 insertions(+), 51 deletions(-)

commit 1f3aed01473c41c9f896fbf4c30d330655e8aa7c
Author: Mohammed Gamal <mgamal@redhat.com>
Date:   Thu Sep 24 17:11:17 2020 +0200

    hv: clocksource: Add notrace attribute to read_hv_sched_clock_*() functions
    
    When selecting function_graph tracer with the command:
     # echo function_graph > /sys/kernel/debug/tracing/current_tracer
    
    The kernel crashes with the following stack trace:
    
    [69703.122389] BUG: stack guard page was hit at 000000001056545c (stack is 00000000fa3f8fed..0000000005d39503)
    [69703.122403] kernel stack overflow (double-fault): 0000 [#1] SMP PTI
    [69703.122413] CPU: 0 PID: 16982 Comm: bash Kdump: loaded Not tainted 4.18.0-236.el8.x86_64 #1
    [69703.122420] Hardware name: Microsoft Corporation Virtual Machine/Virtual Machine, BIOS Hyper-V UEFI Release v4.0 12/17/2019
    [69703.122433] RIP: 0010repare_ftrace_return+0xa/0x110
    [69703.122458] Code: 05 00 0f 0b 48 c7 c7 10 ca 69 ae 0f b6 f0 e8 4b 52 0c 00 31 c0 eb ca 66 0f 1f 84 00 00 00 00 00 55 48 89 e5 41 56 41 55 41 54 <53> 48 83 ec 18 65 48 8b 04 25 28 00 00 00 48 89 45 d8 31 c0 48 85
    [69703.122467] RSP: 0018:ffffbd6d01118000 EFLAGS: 00010086
    [69703.122476] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000003
    [69703.122484] RDX: 0000000000000000 RSI: ffffbd6d011180d8 RDI: ffffffffadce7550
    [69703.122491] RBP: ffffbd6d01118018 R08: 0000000000000000 R09: ffff9d4b09266000
    [69703.122498] R10: ffff9d4b0fc04540 R11: ffff9d4b0fc20a00 R12: ffff9d4b6e42aa90
    [69703.122506] R13: ffff9d4b0fc20ab8 R14: 00000000000003e8 R15: ffffbd6d0111837c
    [69703.122514] FS:  00007fd5f2588740(0000) GS:ffff9d4b6e400000(0000) knlGS:0000000000000000
    [69703.122521] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [69703.122528] CR2: ffffbd6d01117ff8 CR3: 00000000565d8001 CR4: 00000000003606f0
    [69703.122538] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [69703.122545] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [69703.122552] Call Trace:
    [69703.122568]  ftrace_graph_caller+0x6b/0xa0
    [69703.122589]  ? read_hv_sched_clock_tsc+0x5/0x20
    [69703.122599]  read_hv_sched_clock_tsc+0x5/0x20
    [69703.122611]  sched_clock+0x5/0x10
    [69703.122621]  sched_clock_local+0x12/0x80
    [69703.122631]  sched_clock_cpu+0x8c/0xb0
    [69703.122644]  trace_clock_global+0x21/0x90
    [69703.122655]  ring_buffer_lock_reserve+0x100/0x3c0
    [69703.122671]  trace_buffer_lock_reserve+0x16/0x50
    [69703.122683]  __trace_graph_entry+0x28/0x90
    [69703.122695]  trace_graph_entry+0xfd/0x1a0
    [69703.122705]  ? read_hv_clock_tsc_cs+0x10/0x10
    [69703.122714]  ? sched_clock+0x5/0x10
    [69703.122723]  prepare_ftrace_return+0x99/0x110
    [69703.122734]  ? read_hv_clock_tsc_cs+0x10/0x10
    [69703.122743]  ? sched_clock+0x5/0x10
    [69703.122752]  ftrace_graph_caller+0x6b/0xa0
    [69703.122768]  ? read_hv_clock_tsc_cs+0x10/0x10
    [69703.122777]  ? sched_clock+0x5/0x10
    [69703.122786]  ? read_hv_sched_clock_tsc+0x5/0x20
    [69703.122796]  ? ring_buffer_unlock_commit+0x1d/0xa0
    [69703.122805]  read_hv_sched_clock_tsc+0x5/0x20
    [69703.122814]  ftrace_graph_caller+0xa0/0xa0
    [ ... recursion snipped ... ]
    
    Setting the notrace attribute for read_hv_sched_clock_msr() and
    read_hv_sched_clock_tsc() fixes it.
    
    Fixes: bd00cd52d5be ("clocksource/drivers/hyperv: Add Hyper-V specific sched clock function")
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Mohammed Gamal <mgamal@redhat.com>
    Link: https://lore.kernel.org/r/20200924151117.767442-1-mgamal@redhat.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit ba25f0570b53267e8b9dc1f2e185caa3d3bc7633
Merge: d042035eaf5f a7b6c0feda15
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Sep 27 12:11:35 2020 -0700

    Merge tag 'timers-urgent-2020-09-27' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "A set of clocksource/clockevents updates:
    
       - Reset the TI/DM timer before enabling it instead of doing it the
         other way round.
    
       - Initialize the reload value for the GX6605s timer correctly so the
         hardware counter starts at 0 again after overrun.
    
       - Make error return value negative in the h8300 timer init function"
    
    * tag 'timers-urgent-2020-09-27' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/timer-gx6605s: Fixup counter reload
      clocksource/drivers/timer-ti-dm: Do reset before enable
      clocksource/drivers/h8300_timer8: Fix wrong return value in h8300_8timer_init()

commit a7b6c0feda15c9881cac83102cdbc82e39889995
Merge: b0294f30256b bc6717d55d07
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Sep 27 11:24:34 2020 +0200

    Merge tag 'timers-v5.9-rc4' of https://git.linaro.org/people/daniel.lezcano/linux into timers/urgent
    
    Pull clocksource/clockevent fixes from Daniel Lezcano:
    
     - Fix wrong signed return value when checking of_iomap in the probe
       function for the h8300 timer (Tianjia Zhang)
    
     - Fix reset sequence when setting up the timer on the dm_timer (Tony
       Lindgren)
    
     - Fix counter reload when the interrupt fires on gx6605s (Guo Ren)

commit 3b17c8f9a4b680b938b0bf51db38bb510e12555e
Merge: b952caf2d5ca 549437a43f45
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Sep 27 11:21:20 2020 +0200

    Merge tag 'timers-v5.10' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/event updates from Daniel Lezcano:
    
     - Add DT binding documentation to support the r8a7742 and r8a774e1
       platforms (Lad Prabhakar)
    
     - Add sp804 variant support for the Hisilicon platforms (Kefeng Wang)

commit 549437a43f45ce70cf5012317633c635c43ba4f4
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Fri Sep 18 21:22:36 2020 +0800

    clocksource/drivers/sp804: Enable Hisilicon sp804 timer 64bit mode
    
    A 100MHZ 32-bit timer will be wrapped up less than 43s. Although the
    kernel maintains a software high 32-bit count in the tick IRQ. But it's
    not applicable to the user mode APPs.
    
    Note: The kernel still uses the lower 32 bits of the timer.
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200918132237.3552-9-thunder.leizhen@huawei.com

commit bd5a1936ffa2b69032815775fa54fc1c422d49d5
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Fri Sep 18 21:22:35 2020 +0800

    clocksource/drivers/sp804: Add support for Hisilicon sp804 timer
    
    The ARM SP804 supports a maximum of 32-bit counter, but Hisilicon extends
    it to 64-bit. That means, the registers: TimerXload, TimerXValue and
    TimerXBGLoad are 64bits, all other registers are the same as those in the
    SP804. The driver code can be completely reused except that the register
    offset is different.
    
    Use compatible = "hisilicon,sp804" mark as Hisilicon sp804 timer.
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200918132237.3552-8-thunder.leizhen@huawei.com

commit 23c788cd48db9e2646fb5455f004e4a5626e4230
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Fri Sep 18 21:22:34 2020 +0800

    clocksource/drivers/sp804: Support non-standard register offset
    
    The ARM SP804 supports a maximum of 32-bit counter, but Hisilicon extends
    it to 64-bit. That means, the registers: TimerXload, TimerXValue and
    TimerXBGLoad are 64bits, all other registers are the same as those in the
    SP804. The driver code can be completely reused except that the register
    offset is different.
    
    Currently, we get a timer register address by: add the constant register
    offset to the timer base address. e.g. "base + TIMER_CTRL". It can not be
    dynamically adjusted at run time.
    
    So create a new structure "sp804_timer" to record the original registers
    offset, and create a new structure "sp804_clkevt" to record the
    calculated registers address. So the "base + TIMER_CTRL" is changed to
    "clkevt->ctrl", this will faster than "base + timer->ctrl".
    
    For example:
            struct sp804_timer arm_sp804_timer = {
                    .ctrl   = TIMER_CTRL,
            };
    
            struct sp804_clkevt clkevt;
    
            clkevt.ctrl = base + arm_sp804_timer.ctrl.
    
    -       writel(0, base + TIMER_CTRL);
    +       writel(0, clkevt->ctrl);
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200918132237.3552-7-thunder.leizhen@huawei.com

commit e69aae713bef63b357d4ff85bcb3f8f63dbf4ba3
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Fri Sep 18 21:22:33 2020 +0800

    clocksource/drivers/sp804: Prepare for support non-standard register offset
    
    Add two local variables: timer1_base and timer2_base in sp804_of_init(),
    to avoid repeatedly calculate the base address of timer2, and make it
    easier to recognize timer1. Hope to make the next patch looks more clear.
    
    No functional change.
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200918132237.3552-6-thunder.leizhen@huawei.com

commit 2f71078e7753b2fbba62999aa46c2fad16df9d98
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Fri Sep 18 21:22:32 2020 +0800

    clocksource/drivers/sp804: Remove a mismatched comment
    
    writel(0, base + TIMER_CTRL);
    ... ...
    writel(xxx | TIMER_CTRL_PERIODIC, base + TIMER_CTRL);
    
    The timer is just temporarily disabled, and it will be set to periodic
    mode later.
    
    The description of the field TimerMode of the register TimerXControl
    as shown below:
    0 = Timer module is in free-running mode (default)
    1 = Timer module is in periodic mode.
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200918132237.3552-5-thunder.leizhen@huawei.com

commit 975434f8b24a55af31daa4634972890c061a0a0c
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Fri Sep 18 21:22:31 2020 +0800

    clocksource/drivers/sp804: Delete the leading "__" of some functions
    
    Delete the leading "__" of __sp804_clocksource_and_sched_clock_init() and
    __sp804_clockevents_init(), make it looks a little more comfortable.
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200918132237.3552-4-thunder.leizhen@huawei.com

commit 65f4d7ddc7b681001246f60c22a3cf650864da35
Author: Zhen Lei <thunder.leizhen@huawei.com>
Date:   Fri Sep 18 21:22:30 2020 +0800

    clocksource/drivers/sp804: Remove unused sp804_timer_disable() and timer-sp804.h
    
    Since commit 7484c727b636 ("ARM: realview: delete the RealView board
    files") and commit 16956fed35fe ("ARM: versatile: switch to DT only
    booting and remove legacy code"), there's no one to use the functions
    defined or declared in include/clocksource/timer-sp804.h. Delete it.
    
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200918132237.3552-3-thunder.leizhen@huawei.com

commit 7d19d521a034a8c58586814e0320463d1299a3a9
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Fri Sep 18 21:22:29 2020 +0800

    clocksource/drivers/sp804: Cleanup clk_get_sys()
    
    Move the clk_get_sys() part into sp804_get_clock_rate(), cleanup the same
    code.
    
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200918132237.3552-2-thunder.leizhen@huawei.com

commit 17281a3c7f5c4e43ec61efe62c24ff593eb57cf5
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Sep 7 20:33:11 2020 +0200

    ARM: dts: s3c24xx: align PWM/timer node name with dtschema
    
    Although PWM is used on S3C24xx as clocksource/timer, the dtschema
    expects the node to be named in certain format:
    
      timer@51000000: $nodename:0: 'timer@51000000' does not match '^pwm(@.*|-[0-9a-f])*$'
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20200907183313.29234-10-krzk@kernel.org

commit bc6717d55d07110d8f3c6d31ec2af50c11b07091
Author: Guo Ren <guoren@linux.alibaba.com>
Date:   Tue Aug 18 07:31:17 2020 +0000

    clocksource/drivers/timer-gx6605s: Fixup counter reload
    
    When the timer counts to the upper limit, an overflow interrupt is
    generated, and the count is reset with the value in the TIME_INI
    register. But the software expects to start counting from 0 when
    the count overflows, so it forces TIME_INI to 0 to solve the
    potential interrupt storm problem.
    
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>
    Tested-by: Xu Kai <xukai@nationalchip.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1597735877-71115-1-git-send-email-guoren@kernel.org

commit 164805157f3c6834670afbaff563353c773131f1
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Aug 17 12:24:28 2020 +0300

    clocksource/drivers/timer-ti-dm: Do reset before enable
    
    Commit 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend and
    resume for am3 and am4") exposed a new issue for type2 dual mode timers
    on at least omap5 where the clockevent will stop when the SoC starts
    entering idle states during the boot.
    
    Turns out we are wrongly first enabling the system timer and then
    resetting it, while we must also re-enable it after reset. The current
    sequence leaves the timer module in a partially initialized state. This
    issue went unnoticed earlier with ti-sysc driver reconfiguring the timer
    module until we fixed the issue of ti-sysc reconfiguring system timers.
    
    Let's fix the issue by calling dmtimer_systimer_enable() from reset for
    both type1 and type2 timers, and switch the order of reset and enable in
    dmtimer_systimer_setup(). Let's also move dmtimer_systimer_enable() and
    dmtimer_systimer_disable() to do this without adding forward declarations.
    
    Fixes: 6cfcd5563b4f ("clocksource/drivers/timer-ti-dm: Fix suspend and resume for am3 and am4")
    Reported-by: H. Nikolaus Schaller" <hns@goldelico.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200817092428.6176-1-tony@atomide.com

commit 400d033f5a599120089b5f0c54d14d198499af5a
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:41 2020 +0800

    clocksource/drivers/h8300_timer8: Fix wrong return value in h8300_8timer_init()
    
    In the init function, if the call to of_iomap() fails, the return
    value is ENXIO instead of -ENXIO.
    
    Change to the right negative errno.
    
    Fixes: 691f8f878290f ("clocksource/drivers/h8300_timer8: Convert init function to return error")
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200802111541.5429-1-tianjia.zhang@linux.alibaba.com

commit 71419b30cab099f7ca37e61bf41028d8b7d4984d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Aug 14 12:19:34 2020 +0200

    timekeeping: Utilize local_clock() for NMI safe timekeeper during early boot
    
    During early boot the NMI safe timekeeper returns 0 until the first
    clocksource becomes available.
    
    This prevents it from being used for printk or other facilities which today
    use sched clock. sched clock can be available way before timekeeping is
    initialized.
    
    The obvious workaround for this is to utilize the early sched clock in the
    default dummy clock read function until a clocksource becomes available.
    
    After switching to the clocksource clock MONOTONIC and BOOTTIME will not
    jump because the timekeeping_init() bases clock MONOTONIC on sched clock
    and the offset between clock MONOTONIC and BOOTTIME is zero during boot.
    
    Clock REALTIME cannot provide useful timestamps during early boot up to
    the point where a persistent clock becomes available, which is either in
    timekeeping_init() or later when the RTC driver which might depend on I2C
    or other subsystems is initialized.
    
    There is a minor difference to sched_clock() vs. suspend/resume. As the
    timekeeper clock source might not be accessible during suspend, after
    timekeeping_suspend() timestamps freeze up to the point where
    timekeeping_resume() is invoked. OTOH this is true for some sched clock
    implementations as well.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Petr Mladek <pmladek@suse.com>
    Link: https://lore.kernel.org/r/20200814115512.041422402@linutronix.de

commit f22c5579a7d600fa03f8c1d150cf78188f8709b6
Merge: c0a4f5b354dc fc26f5bbf194
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 21 12:32:42 2020 -0700

    Merge tag 'riscv-for-linus-5.9-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux
    
    Pull RISC-V fixes from Palmer Dabbelt:
    
     - The CLINT driver has been split in two: one to handle the M-mode
       CLINT (memory mapped and used on NOMMU systems) and one to handle the
       S-mode CLINT (via SBI).
    
     - The addition of SiFive's drivers to rv32_defconfig
    
    * tag 'riscv-for-linus-5.9-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux:
      riscv: Add SiFive drivers to rv32_defconfig
      dt-bindings: timer: Add CLINT bindings
      RISC-V: Remove CLINT related code from timer and arch
      clocksource/drivers: Add CLINT timer driver
      RISC-V: Add mechanism to provide custom IPI operations

commit 2bc3fc877aa9c4c8b80cc49f66dfcb7e4857a128
Author: Anup Patel <anup.patel@wdc.com>
Date:   Mon Aug 17 18:12:50 2020 +0530

    RISC-V: Remove CLINT related code from timer and arch
    
    Right now the RISC-V timer driver is convoluted to support:
    1. Linux RISC-V S-mode (with MMU) where it will use TIME CSR for
       clocksource and SBI timer calls for clockevent device.
    2. Linux RISC-V M-mode (without MMU) where it will use CLINT MMIO
       counter register for clocksource and CLINT MMIO compare register
       for clockevent device.
    
    We now have a separate CLINT timer driver which also provide CLINT
    based IPI operations so let's remove CLINT MMIO related code from
    arch/riscv directory and RISC-V timer driver.
    
    Signed-off-by: Anup Patel <anup.patel@wdc.com>
    Tested-by: Emil Renner Berhing <kernel@esmil.dk>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Atish Patra <atish.patra@wdc.com>
    Reviewed-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>

commit 2ac6795fcc085e8d03649f1bbd0d70aaff612cad
Author: Anup Patel <anup.patel@wdc.com>
Date:   Mon Aug 17 18:12:49 2020 +0530

    clocksource/drivers: Add CLINT timer driver
    
    We add a separate CLINT timer driver for Linux RISC-V M-mode (i.e.
    RISC-V NoMMU kernel).
    
    The CLINT MMIO device provides three things:
    1. 64bit free running counter register
    2. 64bit per-CPU time compare registers
    3. 32bit per-CPU inter-processor interrupt registers
    
    Unlike other timer devices, CLINT provides IPI registers along with
    timer registers. To use CLINT IPI registers, the CLINT timer driver
    provides IPI related callbacks to arch/riscv.
    
    Signed-off-by: Anup Patel <anup.patel@wdc.com>
    Tested-by: Emil Renner Berhing <kernel@esmil.dk>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Atish Patra <atish.patra@wdc.com>
    Reviewed-by: Palmer Dabbelt <palmerdabbelt@google.com>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>

commit 442489c219235991de86d0277b5d859ede6d8792
Merge: f8b036a7fc23 31cd0e119d50
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Aug 4 18:17:37 2020 -0700

    Merge tag 'timers-core-2020-08-04' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Time, timers and related driver updates:
    
       - Prevent unnecessary timer softirq invocations by extending the
         tracking of the next expiring timer in the timer wheel beyond the
         existing NOHZ functionality.
    
         The tracking overhead at enqueue time is within the noise, but on
         sensitive workloads the avoidance of the soft interrupt invocation
         is a measurable improvement.
    
       - The obligatory new clocksource driver for Ingenic X100 OST
    
       - The usual fixes, improvements, cleanups and extensions for newer
         chip variants all over the driver space"
    
    * tag 'timers-core-2020-08-04' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (28 commits)
      timers: Recalculate next timer interrupt only when necessary
      clocksource/drivers/ingenic: Add support for the Ingenic X1000 OST.
      dt-bindings: timer: Add Ingenic X1000 OST bindings.
      clocksource/drivers: Replace HTTP links with HTTPS ones
      clocksource/drivers/nomadik-mtu: Handle 32kHz clock
      clocksource/drivers/sh_cmt: Use "kHz" for kilohertz
      clocksource/drivers/imx: Add support for i.MX TPM driver with ARM64
      clocksource/drivers/ingenic: Add high resolution timer support for SMP/SMT.
      timers: Lower base clock forwarding threshold
      timers: Remove must_forward_clk
      timers: Spare timer softirq until next expiry
      timers: Expand clk forward logic beyond nohz
      timers: Reuse next expiry cache after nohz exit
      timers: Always keep track of next expiry
      timers: Optimize _next_timer_interrupt() level iteration
      timers: Add comments about calc_index() ceiling work
      timers: Move trigger_dyntick_cpu() to enqueue_timer()
      timers: Use only bucket expiry for base->next_expiry value
      timers: Preserve higher bits of expiration on index calculation
      clocksource/drivers/timer-atmel-tcb: Add sama5d2 support
      ...

commit a7b36c2b134f7ca75789d174b97d07acccbf6b93
Merge: 3077805eebb6 b4a25fb0e629
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 25 13:27:12 2020 -0700

    Merge tag 'timers-urgent-2020-07-25' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip into master
    
    Pull timer fix from Ingo Molnar:
     "Fix a suspend/resume regression (crash) on TI AM3/AM4 SoC's"
    
    * tag 'timers-urgent-2020-07-25' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/timer-ti-dm: Fix suspend and resume for am3 and am4

commit 5ecafc120bbea614c9d29d0ee2cbb77bbb786059
Author: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
Date:   Thu Jul 23 01:18:04 2020 +0800

    clocksource/drivers/ingenic: Add support for the Ingenic X1000 OST.
    
    X1000 and SoCs after X1000 (such as X1500 and X1830) had a separate
    OST, it no longer belongs to TCU. This driver will register both a
    clocksource and a sched_clock to the system.
    
    Tested-by: 周正 (Zhou Zheng) <sernia.zhou@foxmail.com>
    Co-developed-by: 漆鹏振 (Qi Pengzhen) <aric.pzqi@ingenic.com>
    Signed-off-by: 漆鹏振 (Qi Pengzhen) <aric.pzqi@ingenic.com>
    Signed-off-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Reviewed-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200722171804.97559-3-zhouyanjie@wanyeetech.com

commit dcf30fc0ca9e2df2f5f9daddd1a0ab8f1ccbc9e4
Author: Alexander A. Klimov <grandmaster@al2klimov.de>
Date:   Wed Jul 8 18:58:56 2020 +0200

    clocksource/drivers: Replace HTTP links with HTTPS ones
    
    Rationale:
    Reduces attack surface on kernel devs opening the links for MITM
    as HTTPS traffic is much harder to manipulate.
    
    Deterministic algorithm:
    For each file:
      If not .svg:
        For each line:
          If doesn't contain `\bxmlns\b`:
            For each link, `\bhttp://[^# \t\r\n]*(?:\w|/)`:
              If neither `\bgnu\.org/license`, nor `\bmozilla\.org/MPL\b`:
                If both the HTTP and HTTPS versions
                return 200 OK and serve the same content:
                  Replace HTTP with HTTPS.
    
    Signed-off-by: Alexander A. Klimov <grandmaster@al2klimov.de>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200708165856.15322-1-grandmaster@al2klimov.de

commit aaea0b83458cdb3467e27deb7403b4403152dbd6
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Jun 29 00:01:53 2020 +0200

    clocksource/drivers/nomadik-mtu: Handle 32kHz clock
    
    It happens on the U8420-sysclk Ux500 PRCMU firmware
    variant that the MTU clock is just 32768 Hz, and in this
    mode the minimum ticks is 5 rather than two.
    
    I think this is simply so that there is enough time
    for the register write to propagate through the
    interconnect to the registers.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200628220153.67011-1-linus.walleij@linaro.org

commit ad7794d4dd0c3f03a81a0dbec3e9e3906edb9893
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Jun 18 10:02:12 2020 +0200

    clocksource/drivers/sh_cmt: Use "kHz" for kilohertz
    
    "K" stands for "kelvin".
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200618080212.16560-1-geert+renesas@glider.be

commit a6d0812a081defd8bef5453c7b69a1cb4735a170
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Wed Jul 8 11:16:07 2020 +0800

    clocksource/drivers/imx: Add support for i.MX TPM driver with ARM64
    
    Allows building and compile-testing the i.MX TPM driver for ARM64.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1594178168-13007-1-git-send-email-Anson.Huang@nxp.com

commit f19d838d08fc1cde742dedafa776a865e1682e63
Author: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
Date:   Thu Jun 25 01:07:49 2020 +0800

    clocksource/drivers/ingenic: Add high resolution timer support for SMP/SMT.
    
    Enable clock event handling on per CPU core basis. Make sure that
    interrupts raised on the first core execute event handlers on the
    correct CPU core. This driver is required by Ingenic processors
    that support SMP/SMT, such as JZ4780 and X2000.
    
    Tested-by: H. Nikolaus Schaller <hns@goldelico.com>
    Tested-by: Paul Boddie <paul@boddie.org.uk>
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200624170749.31762-2-zhouyanjie@wanyeetech.com

commit 6c1649f51c22c2728483965eb48825e73b35de92
Merge: 70476feb62ce a1bab9396c2d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 22 16:26:14 2020 +0200

    Merge tag 'iio-for-5.9b' of git://git.kernel.org/pub/scm/linux/kernel/git/jic23/iio into staging-next
    
    Jonathan writes:
    
    Second set of new device support, cleanups etc for IIO/Counters in the 5.9 cycle
    
    There are two merge commits in here of immutable branches that may
    also be picked up through other trees (clocksource and input)
    
    I've put a few late breaking fixes in here that aren't worth rushing
    in before the  merge window.  One major fix for an issue introduced
    in the last set that can result in devices not having their parent set.
    
    This set is dominated by W=1 cleanups from Lee Jones. I won't list them
    all separately.  They are mostly:
    * Kernel doc fixes
    * Unused variable removal.
    * Suppression of unused stuff that is static in headers.
    
    Counters subsystem
    * atmel-tcb
      - New counter driver after various cleanups of existing tcb code and bindings.
    
    Device support
    * stk311
      - Trivial addition of ID for STK311-X variant.
    
    yaml conversions
    * kionix,kxsd9
    * ti,ads8688
    
    Features
    * jz47xx
      - Add support for touch screen channels. In this particular case the
        boards in question actually wire a joystick to them so we want them
        as simple voltage channels. The joystick driver will probably go
        via the input tree.
    
    Cleanups + fixes
    * core
      - A rebase issue in recent major refactoring dropped the assignment of
        of the device parent in the core. Put it back.
    * ad5592r
      - Fix unbalanced mutex unlocks in *_read_raw()
    * ad7124
      - Move chip ID and name to the chip_info table plus add a read of the
        revision register to check the device is working during probe.
    * ad7192
      - Ridy up ordering to put the match table near the end fo the file where it
        is used.
    * lsm6dsx
      - Reset the hardware timestamp after a resume to avoid an issue with
        missaligned timestamps after suspend.
    * jz47xx
      - Error checks on clk_enable() calls.
      - xlate callaback to find channel index.
      - Use separate chan_spec arrays for different variants rather than
        parts of a single list.  Simplifies code.
    
    * tag 'iio-for-5.9b' of git://git.kernel.org/pub/scm/linux/kernel/git/jic23/iio: (69 commits)
      iio: imu: st_lsm6dsx: reset hw ts after resume
      iio: dac: ad5592r: fix unbalanced mutex unlocks in ad5592r_read_raw()
      iio: core: fix/re-introduce back parent assignment
      iio: adc: ad7124: move chip ID & name on the chip_info table
      counter: Add microchip TCB capture counter
      dt-bindings: counter: microchip-tcb-capture counter
      dt-bindings: microchip: atmel,at91rm9200-tcb: add sama5d2 compatible
      dt-bindings: atmel-tcb: convert bindings to json-schema
      ARM: at91: add atmel tcb capabilities
      IIO: Ingenic JZ47xx: Add touchscreen mode.
      dt-bindings: iio/adc: Add touchscreen idx for JZ47xx SoC ADC
      iio/adc: ingenic: Retrieve channels list from soc data struct
      IIO: Ingenic JZ47xx: Add xlate cb to retrieve correct channel idx
      IIO: Ingenic JZ47xx: Error check clk_enable calls.
      dt-bindings: iio: ti,ads8688 yaml conversion
      iio: light: stk3310: add chip id for STK3311-X variant
      dt-bindings: iio: accel: kionix,kxsd9 yaml conversion.
      iio: adc: ad7192: move ad7192_of_match table closer to the end of the file
      iio: adc: rockchip_saradc: Demote seemingly unintentional kerneldoc header
      iio: imu: st_lsm6dsx: st_lsm6dsx: Mark 'st_lsm6dsx_accel_ext_info' as __maybe_unused
      ...

commit 1c2f21be65028b25e778e52b106b8b719b3f9ed9
Merge: d0d7c5845e7f 106b104137fd
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 14:37:23 2020 +0100

    Merge branch 'ib-5.8-tcb' into HEAD
    
    Series needed as base for a clocksource tree hence immutable branch

commit 71d65a3fc62888505bcaff5eaabf8ffc6b6d7be2
Author: Marc Zyngier <maz@kernel.org>
Date:   Mon Jul 6 17:37:59 2020 +0100

    arm64: Introduce a way to disable the 32bit vdso
    
    commit 97884ca8c2925d14c32188e865069f21378b4b4f upstream.
    
    [this is a redesign rather than a backport]
    
    We have a class of errata (grouped under the ARM64_WORKAROUND_1418040
    banner) that force the trapping of counter access from 32bit EL0.
    
    We would normally disable the whole vdso for such defect, except that
    it would disable it for 64bit userspace as well, which is a shame.
    
    Instead, add a new vdso_clock_mode, which signals that the vdso
    isn't usable for compat tasks.  This gets checked in the new
    vdso_clocksource_ok() helper, now provided for the 32bit vdso.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200706163802.1836732-2-maz@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cfcd5563b4fadbf49ba8fa481978e5e86d30322
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Jul 13 09:26:01 2020 -0700

    clocksource/drivers/timer-ti-dm: Fix suspend and resume for am3 and am4
    
    Carlos Hernandez <ceh@ti.com> reported that we now have a suspend and
    resume regresssion on am3 and am4 compared to the earlier kernels. While
    suspend and resume works with v5.8-rc3, we now get errors with rtcwake:
    
    pm33xx pm33xx: PM: Could not transition all powerdomains to target state
    ...
    rtcwake: write error
    
    This is because we now fail to idle the system timer clocks that the
    idle code checks and the error gets propagated to the rtcwake.
    
    Turns out there are several issues that need to be fixed:
    
    1. Ignore no-idle and no-reset configured timers for the ti-sysc
       interconnect target driver as otherwise it will keep the system timer
       clocks enabled
    
    2. Toggle the system timer functional clock for suspend for am3 and am4
       (but not for clocksource on am3)
    
    3. Only reconfigure type1 timers in dmtimer_systimer_disable()
    
    4. Use of_machine_is_compatible() instead of of_device_is_compatible()
       for checking the SoC type
    
    Fixes: 52762fbd1c47 ("clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support")
    Reported-by: Carlos Hernandez <ceh@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Tested-by: Carlos Hernandez <ceh@ti.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200713162601.6829-1-tony@atomide.com

commit 0f907048b7ea67d0f1145c27fc734d4af0ddc93f
Author: Marc Zyngier <maz@kernel.org>
Date:   Mon Jul 6 17:37:59 2020 +0100

    arm64: Introduce a way to disable the 32bit vdso
    
    commit 97884ca8c2925d14c32188e865069f21378b4b4f upstream.
    
    We have a class of errata (grouped under the ARM64_WORKAROUND_1418040
    banner) that force the trapping of counter access from 32bit EL0.
    
    We would normally disable the whole vdso for such defect, except that
    it would disable it for 64bit userspace as well, which is a shame.
    
    Instead, add a new vdso_clock_mode, which signals that the vdso
    isn't usable for compat tasks.  This gets checked in the new
    vdso_clocksource_ok() helper, now provided for the 32bit vdso.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200706163802.1836732-2-maz@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c46ed28dbe95844c1d15addd26ff05499057c4d5
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Jul 2 17:51:42 2020 +0200

    dt-bindings: pwm: samsung: Do not require interrupts on Exynos SoCs
    
    The bindings required interrupts for all SoCs but actually only the PWM
    timer clocksource (for S3C/S5P SoCs) was using them.  This PWM timer
    clocksource driver is not used on Exynos SoCs thus the interrupts can be
    marked as optional.
    
    Reported-by: Alim Akhtar <alim.akhtar@samsung.com>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20200702155149.12854-1-krzk@kernel.org
    Signed-off-by: Rob Herring <robh@kernel.org>

commit 52ddb6d914d6c6292463bd329c1f501b4c2dfdce
Author: Suman Anna <s-anna@ti.com>
Date:   Thu Jul 9 18:19:43 2020 -0500

    ARM: dts: omap5: Add timer_sys_ck clocks for timers
    
    The commit d41e53040926 ("clk: ti: omap5: cleanup unnecessary clock
    aliases") has cleaned up all timer_sys_ck clock aliases and retained
    only the timer_32k_ck clock alias. The OMAP clocksource timer driver
    though still uses this clock alias when reconfiguring the parent
    clock source for the timer functional clocks, so add these clocks
    to all the timer nodes except for the always-on timers 1 and 12.
    
    This is required by the OMAP remoteproc driver to successfully
    acquire a timer and configure the source clock to be driven from
    timer_sys_ck clock.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 214ec0319e53075c6e36dca67e86a0d9699d1d9e
Author: Suman Anna <s-anna@ti.com>
Date:   Thu Jul 9 18:19:42 2020 -0500

    ARM: dts: omap4: Add timer_sys_ck clocks for timers
    
    The commit 1c7de9f27a65 ("clk: ti: omap4: cleanup unnecessary clock
    aliases") has cleaned up all timer_sys_ck clock aliases and retained
    only the timer_32k_ck clock alias. The OMAP clocksource timer driver
    though still uses this clock alias when reconfiguring the parent
    clock source for the timer functional clocks, so add these clocks
    to all the timer nodes.
    
    This is required by the OMAP remoteproc driver to successfully
    acquire a timer and configure the source clock to be driven from
    timer_sys_ck clock.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 467ae18aa057c44417afc92896879c2fb37a8b65
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Sat Jul 11 01:08:13 2020 +0200

    clocksource/drivers/timer-atmel-tcb: Add sama5d2 support
    
    The first divisor for the sama5d2 is actually the gclk selector. Because
    the currently remaining divisors are fitting the use case, currently ensure
    it is skipped.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200710230813.1005150-10-alexandre.belloni@bootlin.com

commit 501465d5d7af63af5942cf6af783952bdd757c52
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Sat Jul 11 01:08:12 2020 +0200

    clocksource/drivers/timer-atmel-tcb: Allow selecting first divider
    
    The divider selection algorithm never allowed to get index 0. It was also
    continuing to look for dividers, trying to find the slow clock selection.
    This is not necessary anymore.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200710230813.1005150-9-alexandre.belloni@bootlin.com

commit ef1d6a20e06397f4a28f23524cdb4611fd629063
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Sat Jul 11 01:08:11 2020 +0200

    clocksource/drivers/timer-atmel-tcb: Stop using the 32kHz for clockevents
    
    Stop using the slow clock as the clock source for 32 bit counters because
    even at 10MHz, they are able to handle delays up to two minutes. This
    provides a way better resolution.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200710230813.1005150-8-alexandre.belloni@bootlin.com

commit d2c60dcf86fabb542b96b4444ca81be0b1b30099
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Sat Jul 11 01:08:10 2020 +0200

    clocksource/drivers/timer-atmel-tcb: Fill tcb_config
    
    Use the tcb_config and struct atmel_tcb_config to get the timer counter
    width. This is necessary because atmel_tcb_config will be extended later
    on.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200710230813.1005150-7-alexandre.belloni@bootlin.com

commit 228e21848623e0ce54a1a3d7857b444813e49b2e
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Sat Jul 11 01:08:09 2020 +0200

    clocksource/drivers/timer-atmel-tcb: Rework 32khz clock selection
    
    On all the supported SoCs, the slow clock is always ATMEL_TC_TIMER_CLOCK5,
    avoid looking it up and pass it directly to setup_clkevents.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200710230813.1005150-6-alexandre.belloni@bootlin.com

commit 97884ca8c2925d14c32188e865069f21378b4b4f
Author: Marc Zyngier <maz@kernel.org>
Date:   Mon Jul 6 17:37:59 2020 +0100

    arm64: Introduce a way to disable the 32bit vdso
    
    We have a class of errata (grouped under the ARM64_WORKAROUND_1418040
    banner) that force the trapping of counter access from 32bit EL0.
    
    We would normally disable the whole vdso for such defect, except that
    it would disable it for 64bit userspace as well, which is a shame.
    
    Instead, add a new vdso_clock_mode, which signals that the vdso
    isn't usable for compat tasks.  This gets checked in the new
    vdso_clocksource_ok() helper, now provided for the 32bit vdso.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200706163802.1836732-2-maz@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>

commit 4bd6574fa27559657c0e722bc4a0df7c47989a3d
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Sun Apr 26 22:43:56 2020 +1000

    clocksource/drivers/timer-microchip-pit64b: Select CONFIG_TIMER_OF
    
    commit 25259f7a5de2de9d67793dc584b15c83a3134c93 upstream.
    
    This driver is an OF driver, it depends on OF, and uses
    TIMER_OF_DECLARE, so it should select CONFIG_TIMER_OF.
    
    Without CONFIG_TIMER_OF enabled this can lead to warnings such as:
    
      powerpc-linux-ld: warning: orphan section `__timer_of_table' from
      `drivers/clocksource/timer-microchip-pit64b.o' being placed in
      section `__timer_of_table'.
    
    Because TIMER_OF_TABLES in vmlinux.lds.h doesn't emit anything into
    the linker script when CONFIG_TIMER_OF is not enabled.
    
    Fixes: 625022a5f160 ("clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support")
    Cc: stable@vger.kernel.org # v5.6+
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200426124356.3929682-1-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fc7598b9c7e8eacc1bdde4ba1044e96cf64adb9
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Jun 6 23:51:15 2020 +0200

    clocksource: Remove obsolete ifdef
    
    commit c7f3d43b629b598a2bb9ec3524e844eae7492e7e upstream.
    
    CONFIG_GENERIC_VDSO_CLOCK_MODE was a transitional config switch which got
    removed after all architectures got converted to the new storage model.
    
    But the removal forgot to remove the #ifdef which guards the
    vdso_clock_mode sanity check, which effectively disables the sanity check.
    
    Remove it now.
    
    Fixes: f86fd32db706 ("lib/vdso: Cleanup clock mode storage leftovers")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Miklos Szeredi <mszeredi@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200606221531.845475036@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43ecb1530f7d03d41242b5a65990e164e1dc3764
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Wed May 20 14:32:02 2020 +1000

    m68k: mac: Don't call via_flush_cache() on Mac IIfx
    
    [ Upstream commit bcc44f6b74106b31f0b0408b70305a40360d63b7 ]
    
    There is no VIA2 chip on the Mac IIfx, so don't call via_flush_cache().
    This avoids a boot crash which appeared in v5.4.
    
    printk: console [ttyS0] enabled
    printk: bootconsole [debug0] disabled
    printk: bootconsole [debug0] disabled
    Calibrating delay loop... 9.61 BogoMIPS (lpj=48064)
    pid_max: default: 32768 minimum: 301
    Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    devtmpfs: initialized
    random: get_random_u32 called from bucket_table_alloc.isra.27+0x68/0x194 with crng_init=0
    clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
    futex hash table entries: 256 (order: -1, 3072 bytes, linear)
    NET: Registered protocol family 16
    Data read fault at 0x00000000 in Super Data (pc=0x8a6a)
    BAD KERNEL BUSERR
    Oops: 00000000
    Modules linked in:
    PC: [<00008a6a>] via_flush_cache+0x12/0x2c
    SR: 2700  SP: 01c1fe3c  a2: 01c24000
    d0: 00001119    d1: 0000000c    d2: 00012000    d3: 0000000f
    d4: 01c06840    d5: 00033b92    a0: 00000000    a1: 00000000
    Process swapper (pid: 1, task=01c24000)
    Frame format=B ssw=0755 isc=0200 isb=fff7 daddr=00000000 dobuf=01c1fed0
    baddr=00008a6e dibuf=0000004e ver=f
    Stack from 01c1fec4:
            01c1fed0 00007d7e 00010080 01c1fedc 0000792e 00000001 01c1fef4 00006b40
            01c80000 00040000 00000006 00000003 01c1ff1c 004a545e 004ff200 00040000
            00000000 00000003 01c06840 00033b92 004a5410 004b6c88 01c1ff84 000021e2
            00000073 00000003 01c06840 00033b92 0038507a 004bb094 004b6ca8 004b6c88
            004b6ca4 004b6c88 000021ae 00020002 00000000 01c0685d 00000000 01c1ffb4
            0049f938 00409c85 01c06840 0045bd40 00000073 00000002 00000002 00000000
    Call Trace: [<00007d7e>] mac_cache_card_flush+0x12/0x1c
     [<00010080>] fix_dnrm+0x2/0x18
     [<0000792e>] cache_push+0x46/0x5a
     [<00006b40>] arch_dma_prep_coherent+0x60/0x6e
     [<00040000>] switched_to_dl+0x76/0xd0
     [<004a545e>] dma_atomic_pool_init+0x4e/0x188
     [<00040000>] switched_to_dl+0x76/0xd0
     [<00033b92>] parse_args+0x0/0x370
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<000021e2>] do_one_initcall+0x34/0x1be
     [<00033b92>] parse_args+0x0/0x370
     [<0038507a>] strcpy+0x0/0x1e
     [<000021ae>] do_one_initcall+0x0/0x1be
     [<00020002>] do_proc_dointvec_conv+0x54/0x74
     [<0049f938>] kernel_init_freeable+0x126/0x190
     [<0049f94c>] kernel_init_freeable+0x13a/0x190
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<00041798>] complete+0x0/0x3c
     [<000b9b0c>] kfree+0x0/0x20a
     [<0038df98>] schedule+0x0/0xd0
     [<0038d604>] kernel_init+0x0/0xda
     [<0038d610>] kernel_init+0xc/0xda
     [<0038d604>] kernel_init+0x0/0xda
     [<00002d38>] ret_from_kernel_thread+0xc/0x14
    Code: 0000 2079 0048 10da 2279 0048 10c8 d3c8 <1011> 0200 fff7 1280 d1f9 0048 10c8 1010 0000 0008 1080 4e5e 4e75 4e56 0000 2039
    Disabling lock debugging due to kernel taint
    Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Thanks to Stan Johnson for capturing the console log and running git
    bisect.
    
    Git bisect said commit 8e3a68fb55e0 ("dma-mapping: make
    dma_atomic_pool_init self-contained") is the first "bad" commit. I don't
    know why. Perhaps mach_l2_flush first became reachable with that commit.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Cc: Joshua Thompson <funaho@jurai.org>
    Link: https://lore.kernel.org/r/b8bbeef197d6b3898e82ed0d231ad08f575a4b34.1589949122.git.fthain@telegraphics.com.au
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f7e94547c0e82af77c94133723daa64b54b68c1
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:15 2020 +0300

    clocksource: dw_apb_timer_of: Fix missing clockevent timers
    
    [ Upstream commit 6d2e16a3181bafb77b535095c39ad1c8b9558c8c ]
    
    Commit 100214889973 ("clocksource: dw_apb_timer_of: use
    clocksource_of_init") replaced a publicly available driver
    initialization method with one called by the timer_probe() method
    available after CLKSRC_OF. In current implementation it traverses
    all the timers available in the system and calls their initialization
    methods if corresponding devices were either in dtb or in acpi. But
    if before the commit any number of available timers would be installed
    as clockevent and clocksource devices, after that there would be at most
    two. The rest are just ignored since default case branch doesn't do
    anything. I don't see a reason of such behaviour, neither the commit
    message explains it. Moreover this might be wrong if on some platforms
    these timers might be used for different purpose, as virtually CPU-local
    clockevent timers and as an independent broadcast timer. So in order
    to keep the compatibility with the platforms where the order of the
    timers detection has some meaning, lets add the secondly discovered
    timer to be of clocksource/sched_clock type, while the very first and
    the others would provide the clockevents service.
    
    Fixes: 100214889973 ("clocksource: dw_apb_timer_of: use clocksource_of_init")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-7-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 561a4cc533e866990f4e9b0bb4e75448ebce0e28
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:13 2020 +0300

    clocksource: dw_apb_timer: Make CPU-affiliation being optional
    
    [ Upstream commit cee43dbf2ee3f430434e2b66994eff8a1aeda889 ]
    
    Currently the DW APB Timer driver binds each clockevent timers to a
    particular CPU. This isn't good for multiple reasons. First of all seeing
    the device is placed on APB bus (which makes it accessible from any CPU
    core), accessible over MMIO and having the DYNIRQ flag set we can be sure
    that manually binding the timer to any CPU just isn't correct. By doing
    so we just set an extra limitation on device usage. This also doesn't
    reflect the device actual capability, since by setting the IRQ affinity
    we can make it virtually local to any CPU. Secondly imagine if you had a
    real CPU-local timer with the same rating and the same CPU-affinity.
    In this case if DW APB timer was registered first, then due to the
    clockevent framework tick-timer selection procedure we'll end up with the
    real CPU-local timer being left unselected for clock-events tracking. But
    on most of the platforms (MIPS/ARM/etc) such timers are normally embedded
    into the CPU core and are accessible with much better performance then
    devices placed on APB. For instance in MIPS architectures there is
    r4k-timer, which is CPU-local, assigned with the same rating, and normally
    its clockevent device is registered after the platform-specific one.
    
    So in order to fix all of these issues let's make the DW APB Timer CPU
    affinity being optional and deactivated by passing a negative CPU id,
    which will effectively set the DW APB clockevent timer cpumask to
    'cpu_possible_mask'.
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-5-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6952fb745a8b2df498df4d5938614b8de45ecc5c
Author: Saravana Kannan <saravanak@google.com>
Date:   Tue Mar 24 12:53:02 2020 -0700

    clocksource/drivers/timer-versatile: Clear OF_POPULATED flag
    
    [ Upstream commit 7a3768c206a006525afc090f92d4d618d8356b92 ]
    
    The commit 4f41fe386a94 ("clocksource/drivers/timer-probe: Avoid
    creating dead devices") broke the handling of arm,vexpress-sysreg [1].
    
    The arm,vexpress-sysreg device is handled by both timer-versatile.c and
    drivers/mfd/vexpress-sysreg.c. While the timer driver doesn't use the
    device, the mfd driver still needs a device to probe.
    
    So, this patch clears the OF_POPULATED flag to continue creating the
    device.
    
    [1] - https://lore.kernel.org/lkml/20200324175955.GA16972@arm.com/
    
    Fixes: 4f41fe386a94 ("clocksource/drivers/timer-probe: Avoid creating dead devices")
    Signed-off-by: Saravana Kannan <saravanak@google.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200324195302.203115-1-saravanak@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 590aad883521c9ab21bcf7167f99ba1278b22375
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Wed May 20 14:32:02 2020 +1000

    m68k: mac: Don't call via_flush_cache() on Mac IIfx
    
    [ Upstream commit bcc44f6b74106b31f0b0408b70305a40360d63b7 ]
    
    There is no VIA2 chip on the Mac IIfx, so don't call via_flush_cache().
    This avoids a boot crash which appeared in v5.4.
    
    printk: console [ttyS0] enabled
    printk: bootconsole [debug0] disabled
    printk: bootconsole [debug0] disabled
    Calibrating delay loop... 9.61 BogoMIPS (lpj=48064)
    pid_max: default: 32768 minimum: 301
    Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    devtmpfs: initialized
    random: get_random_u32 called from bucket_table_alloc.isra.27+0x68/0x194 with crng_init=0
    clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
    futex hash table entries: 256 (order: -1, 3072 bytes, linear)
    NET: Registered protocol family 16
    Data read fault at 0x00000000 in Super Data (pc=0x8a6a)
    BAD KERNEL BUSERR
    Oops: 00000000
    Modules linked in:
    PC: [<00008a6a>] via_flush_cache+0x12/0x2c
    SR: 2700  SP: 01c1fe3c  a2: 01c24000
    d0: 00001119    d1: 0000000c    d2: 00012000    d3: 0000000f
    d4: 01c06840    d5: 00033b92    a0: 00000000    a1: 00000000
    Process swapper (pid: 1, task=01c24000)
    Frame format=B ssw=0755 isc=0200 isb=fff7 daddr=00000000 dobuf=01c1fed0
    baddr=00008a6e dibuf=0000004e ver=f
    Stack from 01c1fec4:
            01c1fed0 00007d7e 00010080 01c1fedc 0000792e 00000001 01c1fef4 00006b40
            01c80000 00040000 00000006 00000003 01c1ff1c 004a545e 004ff200 00040000
            00000000 00000003 01c06840 00033b92 004a5410 004b6c88 01c1ff84 000021e2
            00000073 00000003 01c06840 00033b92 0038507a 004bb094 004b6ca8 004b6c88
            004b6ca4 004b6c88 000021ae 00020002 00000000 01c0685d 00000000 01c1ffb4
            0049f938 00409c85 01c06840 0045bd40 00000073 00000002 00000002 00000000
    Call Trace: [<00007d7e>] mac_cache_card_flush+0x12/0x1c
     [<00010080>] fix_dnrm+0x2/0x18
     [<0000792e>] cache_push+0x46/0x5a
     [<00006b40>] arch_dma_prep_coherent+0x60/0x6e
     [<00040000>] switched_to_dl+0x76/0xd0
     [<004a545e>] dma_atomic_pool_init+0x4e/0x188
     [<00040000>] switched_to_dl+0x76/0xd0
     [<00033b92>] parse_args+0x0/0x370
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<000021e2>] do_one_initcall+0x34/0x1be
     [<00033b92>] parse_args+0x0/0x370
     [<0038507a>] strcpy+0x0/0x1e
     [<000021ae>] do_one_initcall+0x0/0x1be
     [<00020002>] do_proc_dointvec_conv+0x54/0x74
     [<0049f938>] kernel_init_freeable+0x126/0x190
     [<0049f94c>] kernel_init_freeable+0x13a/0x190
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<00041798>] complete+0x0/0x3c
     [<000b9b0c>] kfree+0x0/0x20a
     [<0038df98>] schedule+0x0/0xd0
     [<0038d604>] kernel_init+0x0/0xda
     [<0038d610>] kernel_init+0xc/0xda
     [<0038d604>] kernel_init+0x0/0xda
     [<00002d38>] ret_from_kernel_thread+0xc/0x14
    Code: 0000 2079 0048 10da 2279 0048 10c8 d3c8 <1011> 0200 fff7 1280 d1f9 0048 10c8 1010 0000 0008 1080 4e5e 4e75 4e56 0000 2039
    Disabling lock debugging due to kernel taint
    Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Thanks to Stan Johnson for capturing the console log and running git
    bisect.
    
    Git bisect said commit 8e3a68fb55e0 ("dma-mapping: make
    dma_atomic_pool_init self-contained") is the first "bad" commit. I don't
    know why. Perhaps mach_l2_flush first became reachable with that commit.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Cc: Joshua Thompson <funaho@jurai.org>
    Link: https://lore.kernel.org/r/b8bbeef197d6b3898e82ed0d231ad08f575a4b34.1589949122.git.fthain@telegraphics.com.au
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bffe2c8e2303dfa1aa409745963c626ecb78ec89
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:15 2020 +0300

    clocksource: dw_apb_timer_of: Fix missing clockevent timers
    
    [ Upstream commit 6d2e16a3181bafb77b535095c39ad1c8b9558c8c ]
    
    Commit 100214889973 ("clocksource: dw_apb_timer_of: use
    clocksource_of_init") replaced a publicly available driver
    initialization method with one called by the timer_probe() method
    available after CLKSRC_OF. In current implementation it traverses
    all the timers available in the system and calls their initialization
    methods if corresponding devices were either in dtb or in acpi. But
    if before the commit any number of available timers would be installed
    as clockevent and clocksource devices, after that there would be at most
    two. The rest are just ignored since default case branch doesn't do
    anything. I don't see a reason of such behaviour, neither the commit
    message explains it. Moreover this might be wrong if on some platforms
    these timers might be used for different purpose, as virtually CPU-local
    clockevent timers and as an independent broadcast timer. So in order
    to keep the compatibility with the platforms where the order of the
    timers detection has some meaning, lets add the secondly discovered
    timer to be of clocksource/sched_clock type, while the very first and
    the others would provide the clockevents service.
    
    Fixes: 100214889973 ("clocksource: dw_apb_timer_of: use clocksource_of_init")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-7-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bd656984566dde3f3563dd4a3b6337ea44b1da4
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:13 2020 +0300

    clocksource: dw_apb_timer: Make CPU-affiliation being optional
    
    [ Upstream commit cee43dbf2ee3f430434e2b66994eff8a1aeda889 ]
    
    Currently the DW APB Timer driver binds each clockevent timers to a
    particular CPU. This isn't good for multiple reasons. First of all seeing
    the device is placed on APB bus (which makes it accessible from any CPU
    core), accessible over MMIO and having the DYNIRQ flag set we can be sure
    that manually binding the timer to any CPU just isn't correct. By doing
    so we just set an extra limitation on device usage. This also doesn't
    reflect the device actual capability, since by setting the IRQ affinity
    we can make it virtually local to any CPU. Secondly imagine if you had a
    real CPU-local timer with the same rating and the same CPU-affinity.
    In this case if DW APB timer was registered first, then due to the
    clockevent framework tick-timer selection procedure we'll end up with the
    real CPU-local timer being left unselected for clock-events tracking. But
    on most of the platforms (MIPS/ARM/etc) such timers are normally embedded
    into the CPU core and are accessible with much better performance then
    devices placed on APB. For instance in MIPS architectures there is
    r4k-timer, which is CPU-local, assigned with the same rating, and normally
    its clockevent device is registered after the platform-specific one.
    
    So in order to fix all of these issues let's make the DW APB Timer CPU
    affinity being optional and deactivated by passing a negative CPU id,
    which will effectively set the DW APB clockevent timer cpumask to
    'cpu_possible_mask'.
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-5-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7736adec98a33bae11c4032165dc400293a87dc9
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Wed May 20 14:32:02 2020 +1000

    m68k: mac: Don't call via_flush_cache() on Mac IIfx
    
    [ Upstream commit bcc44f6b74106b31f0b0408b70305a40360d63b7 ]
    
    There is no VIA2 chip on the Mac IIfx, so don't call via_flush_cache().
    This avoids a boot crash which appeared in v5.4.
    
    printk: console [ttyS0] enabled
    printk: bootconsole [debug0] disabled
    printk: bootconsole [debug0] disabled
    Calibrating delay loop... 9.61 BogoMIPS (lpj=48064)
    pid_max: default: 32768 minimum: 301
    Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    devtmpfs: initialized
    random: get_random_u32 called from bucket_table_alloc.isra.27+0x68/0x194 with crng_init=0
    clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
    futex hash table entries: 256 (order: -1, 3072 bytes, linear)
    NET: Registered protocol family 16
    Data read fault at 0x00000000 in Super Data (pc=0x8a6a)
    BAD KERNEL BUSERR
    Oops: 00000000
    Modules linked in:
    PC: [<00008a6a>] via_flush_cache+0x12/0x2c
    SR: 2700  SP: 01c1fe3c  a2: 01c24000
    d0: 00001119    d1: 0000000c    d2: 00012000    d3: 0000000f
    d4: 01c06840    d5: 00033b92    a0: 00000000    a1: 00000000
    Process swapper (pid: 1, task=01c24000)
    Frame format=B ssw=0755 isc=0200 isb=fff7 daddr=00000000 dobuf=01c1fed0
    baddr=00008a6e dibuf=0000004e ver=f
    Stack from 01c1fec4:
            01c1fed0 00007d7e 00010080 01c1fedc 0000792e 00000001 01c1fef4 00006b40
            01c80000 00040000 00000006 00000003 01c1ff1c 004a545e 004ff200 00040000
            00000000 00000003 01c06840 00033b92 004a5410 004b6c88 01c1ff84 000021e2
            00000073 00000003 01c06840 00033b92 0038507a 004bb094 004b6ca8 004b6c88
            004b6ca4 004b6c88 000021ae 00020002 00000000 01c0685d 00000000 01c1ffb4
            0049f938 00409c85 01c06840 0045bd40 00000073 00000002 00000002 00000000
    Call Trace: [<00007d7e>] mac_cache_card_flush+0x12/0x1c
     [<00010080>] fix_dnrm+0x2/0x18
     [<0000792e>] cache_push+0x46/0x5a
     [<00006b40>] arch_dma_prep_coherent+0x60/0x6e
     [<00040000>] switched_to_dl+0x76/0xd0
     [<004a545e>] dma_atomic_pool_init+0x4e/0x188
     [<00040000>] switched_to_dl+0x76/0xd0
     [<00033b92>] parse_args+0x0/0x370
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<000021e2>] do_one_initcall+0x34/0x1be
     [<00033b92>] parse_args+0x0/0x370
     [<0038507a>] strcpy+0x0/0x1e
     [<000021ae>] do_one_initcall+0x0/0x1be
     [<00020002>] do_proc_dointvec_conv+0x54/0x74
     [<0049f938>] kernel_init_freeable+0x126/0x190
     [<0049f94c>] kernel_init_freeable+0x13a/0x190
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<00041798>] complete+0x0/0x3c
     [<000b9b0c>] kfree+0x0/0x20a
     [<0038df98>] schedule+0x0/0xd0
     [<0038d604>] kernel_init+0x0/0xda
     [<0038d610>] kernel_init+0xc/0xda
     [<0038d604>] kernel_init+0x0/0xda
     [<00002d38>] ret_from_kernel_thread+0xc/0x14
    Code: 0000 2079 0048 10da 2279 0048 10c8 d3c8 <1011> 0200 fff7 1280 d1f9 0048 10c8 1010 0000 0008 1080 4e5e 4e75 4e56 0000 2039
    Disabling lock debugging due to kernel taint
    Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Thanks to Stan Johnson for capturing the console log and running git
    bisect.
    
    Git bisect said commit 8e3a68fb55e0 ("dma-mapping: make
    dma_atomic_pool_init self-contained") is the first "bad" commit. I don't
    know why. Perhaps mach_l2_flush first became reachable with that commit.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Cc: Joshua Thompson <funaho@jurai.org>
    Link: https://lore.kernel.org/r/b8bbeef197d6b3898e82ed0d231ad08f575a4b34.1589949122.git.fthain@telegraphics.com.au
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffa7a58fb048e577b358e521369bdc2cd354f8b6
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:15 2020 +0300

    clocksource: dw_apb_timer_of: Fix missing clockevent timers
    
    [ Upstream commit 6d2e16a3181bafb77b535095c39ad1c8b9558c8c ]
    
    Commit 100214889973 ("clocksource: dw_apb_timer_of: use
    clocksource_of_init") replaced a publicly available driver
    initialization method with one called by the timer_probe() method
    available after CLKSRC_OF. In current implementation it traverses
    all the timers available in the system and calls their initialization
    methods if corresponding devices were either in dtb or in acpi. But
    if before the commit any number of available timers would be installed
    as clockevent and clocksource devices, after that there would be at most
    two. The rest are just ignored since default case branch doesn't do
    anything. I don't see a reason of such behaviour, neither the commit
    message explains it. Moreover this might be wrong if on some platforms
    these timers might be used for different purpose, as virtually CPU-local
    clockevent timers and as an independent broadcast timer. So in order
    to keep the compatibility with the platforms where the order of the
    timers detection has some meaning, lets add the secondly discovered
    timer to be of clocksource/sched_clock type, while the very first and
    the others would provide the clockevents service.
    
    Fixes: 100214889973 ("clocksource: dw_apb_timer_of: use clocksource_of_init")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-7-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56fee2aa8469595b9c62021e3092c2ebfba0e30f
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:13 2020 +0300

    clocksource: dw_apb_timer: Make CPU-affiliation being optional
    
    [ Upstream commit cee43dbf2ee3f430434e2b66994eff8a1aeda889 ]
    
    Currently the DW APB Timer driver binds each clockevent timers to a
    particular CPU. This isn't good for multiple reasons. First of all seeing
    the device is placed on APB bus (which makes it accessible from any CPU
    core), accessible over MMIO and having the DYNIRQ flag set we can be sure
    that manually binding the timer to any CPU just isn't correct. By doing
    so we just set an extra limitation on device usage. This also doesn't
    reflect the device actual capability, since by setting the IRQ affinity
    we can make it virtually local to any CPU. Secondly imagine if you had a
    real CPU-local timer with the same rating and the same CPU-affinity.
    In this case if DW APB timer was registered first, then due to the
    clockevent framework tick-timer selection procedure we'll end up with the
    real CPU-local timer being left unselected for clock-events tracking. But
    on most of the platforms (MIPS/ARM/etc) such timers are normally embedded
    into the CPU core and are accessible with much better performance then
    devices placed on APB. For instance in MIPS architectures there is
    r4k-timer, which is CPU-local, assigned with the same rating, and normally
    its clockevent device is registered after the platform-specific one.
    
    So in order to fix all of these issues let's make the DW APB Timer CPU
    affinity being optional and deactivated by passing a negative CPU id,
    which will effectively set the DW APB clockevent timer cpumask to
    'cpu_possible_mask'.
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-5-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a7acfe428fd1d4a7d280eb72c357a807b5cf3f2
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Wed May 20 14:32:02 2020 +1000

    m68k: mac: Don't call via_flush_cache() on Mac IIfx
    
    [ Upstream commit bcc44f6b74106b31f0b0408b70305a40360d63b7 ]
    
    There is no VIA2 chip on the Mac IIfx, so don't call via_flush_cache().
    This avoids a boot crash which appeared in v5.4.
    
    printk: console [ttyS0] enabled
    printk: bootconsole [debug0] disabled
    printk: bootconsole [debug0] disabled
    Calibrating delay loop... 9.61 BogoMIPS (lpj=48064)
    pid_max: default: 32768 minimum: 301
    Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    devtmpfs: initialized
    random: get_random_u32 called from bucket_table_alloc.isra.27+0x68/0x194 with crng_init=0
    clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
    futex hash table entries: 256 (order: -1, 3072 bytes, linear)
    NET: Registered protocol family 16
    Data read fault at 0x00000000 in Super Data (pc=0x8a6a)
    BAD KERNEL BUSERR
    Oops: 00000000
    Modules linked in:
    PC: [<00008a6a>] via_flush_cache+0x12/0x2c
    SR: 2700  SP: 01c1fe3c  a2: 01c24000
    d0: 00001119    d1: 0000000c    d2: 00012000    d3: 0000000f
    d4: 01c06840    d5: 00033b92    a0: 00000000    a1: 00000000
    Process swapper (pid: 1, task=01c24000)
    Frame format=B ssw=0755 isc=0200 isb=fff7 daddr=00000000 dobuf=01c1fed0
    baddr=00008a6e dibuf=0000004e ver=f
    Stack from 01c1fec4:
            01c1fed0 00007d7e 00010080 01c1fedc 0000792e 00000001 01c1fef4 00006b40
            01c80000 00040000 00000006 00000003 01c1ff1c 004a545e 004ff200 00040000
            00000000 00000003 01c06840 00033b92 004a5410 004b6c88 01c1ff84 000021e2
            00000073 00000003 01c06840 00033b92 0038507a 004bb094 004b6ca8 004b6c88
            004b6ca4 004b6c88 000021ae 00020002 00000000 01c0685d 00000000 01c1ffb4
            0049f938 00409c85 01c06840 0045bd40 00000073 00000002 00000002 00000000
    Call Trace: [<00007d7e>] mac_cache_card_flush+0x12/0x1c
     [<00010080>] fix_dnrm+0x2/0x18
     [<0000792e>] cache_push+0x46/0x5a
     [<00006b40>] arch_dma_prep_coherent+0x60/0x6e
     [<00040000>] switched_to_dl+0x76/0xd0
     [<004a545e>] dma_atomic_pool_init+0x4e/0x188
     [<00040000>] switched_to_dl+0x76/0xd0
     [<00033b92>] parse_args+0x0/0x370
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<000021e2>] do_one_initcall+0x34/0x1be
     [<00033b92>] parse_args+0x0/0x370
     [<0038507a>] strcpy+0x0/0x1e
     [<000021ae>] do_one_initcall+0x0/0x1be
     [<00020002>] do_proc_dointvec_conv+0x54/0x74
     [<0049f938>] kernel_init_freeable+0x126/0x190
     [<0049f94c>] kernel_init_freeable+0x13a/0x190
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<00041798>] complete+0x0/0x3c
     [<000b9b0c>] kfree+0x0/0x20a
     [<0038df98>] schedule+0x0/0xd0
     [<0038d604>] kernel_init+0x0/0xda
     [<0038d610>] kernel_init+0xc/0xda
     [<0038d604>] kernel_init+0x0/0xda
     [<00002d38>] ret_from_kernel_thread+0xc/0x14
    Code: 0000 2079 0048 10da 2279 0048 10c8 d3c8 <1011> 0200 fff7 1280 d1f9 0048 10c8 1010 0000 0008 1080 4e5e 4e75 4e56 0000 2039
    Disabling lock debugging due to kernel taint
    Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Thanks to Stan Johnson for capturing the console log and running git
    bisect.
    
    Git bisect said commit 8e3a68fb55e0 ("dma-mapping: make
    dma_atomic_pool_init self-contained") is the first "bad" commit. I don't
    know why. Perhaps mach_l2_flush first became reachable with that commit.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Cc: Joshua Thompson <funaho@jurai.org>
    Link: https://lore.kernel.org/r/b8bbeef197d6b3898e82ed0d231ad08f575a4b34.1589949122.git.fthain@telegraphics.com.au
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a49fdcefa920293883877ed7c2029e242823ace7
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:15 2020 +0300

    clocksource: dw_apb_timer_of: Fix missing clockevent timers
    
    [ Upstream commit 6d2e16a3181bafb77b535095c39ad1c8b9558c8c ]
    
    Commit 100214889973 ("clocksource: dw_apb_timer_of: use
    clocksource_of_init") replaced a publicly available driver
    initialization method with one called by the timer_probe() method
    available after CLKSRC_OF. In current implementation it traverses
    all the timers available in the system and calls their initialization
    methods if corresponding devices were either in dtb or in acpi. But
    if before the commit any number of available timers would be installed
    as clockevent and clocksource devices, after that there would be at most
    two. The rest are just ignored since default case branch doesn't do
    anything. I don't see a reason of such behaviour, neither the commit
    message explains it. Moreover this might be wrong if on some platforms
    these timers might be used for different purpose, as virtually CPU-local
    clockevent timers and as an independent broadcast timer. So in order
    to keep the compatibility with the platforms where the order of the
    timers detection has some meaning, lets add the secondly discovered
    timer to be of clocksource/sched_clock type, while the very first and
    the others would provide the clockevents service.
    
    Fixes: 100214889973 ("clocksource: dw_apb_timer_of: use clocksource_of_init")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-7-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9580a652ba8c3acae495589cb21b06d488e2973b
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:13 2020 +0300

    clocksource: dw_apb_timer: Make CPU-affiliation being optional
    
    [ Upstream commit cee43dbf2ee3f430434e2b66994eff8a1aeda889 ]
    
    Currently the DW APB Timer driver binds each clockevent timers to a
    particular CPU. This isn't good for multiple reasons. First of all seeing
    the device is placed on APB bus (which makes it accessible from any CPU
    core), accessible over MMIO and having the DYNIRQ flag set we can be sure
    that manually binding the timer to any CPU just isn't correct. By doing
    so we just set an extra limitation on device usage. This also doesn't
    reflect the device actual capability, since by setting the IRQ affinity
    we can make it virtually local to any CPU. Secondly imagine if you had a
    real CPU-local timer with the same rating and the same CPU-affinity.
    In this case if DW APB timer was registered first, then due to the
    clockevent framework tick-timer selection procedure we'll end up with the
    real CPU-local timer being left unselected for clock-events tracking. But
    on most of the platforms (MIPS/ARM/etc) such timers are normally embedded
    into the CPU core and are accessible with much better performance then
    devices placed on APB. For instance in MIPS architectures there is
    r4k-timer, which is CPU-local, assigned with the same rating, and normally
    its clockevent device is registered after the platform-specific one.
    
    So in order to fix all of these issues let's make the DW APB Timer CPU
    affinity being optional and deactivated by passing a negative CPU id,
    which will effectively set the DW APB clockevent timer cpumask to
    'cpu_possible_mask'.
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-5-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04c01ac27d08fdf8933ecdf3e74fed9737e6fb55
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Wed May 20 14:32:02 2020 +1000

    m68k: mac: Don't call via_flush_cache() on Mac IIfx
    
    [ Upstream commit bcc44f6b74106b31f0b0408b70305a40360d63b7 ]
    
    There is no VIA2 chip on the Mac IIfx, so don't call via_flush_cache().
    This avoids a boot crash which appeared in v5.4.
    
    printk: console [ttyS0] enabled
    printk: bootconsole [debug0] disabled
    printk: bootconsole [debug0] disabled
    Calibrating delay loop... 9.61 BogoMIPS (lpj=48064)
    pid_max: default: 32768 minimum: 301
    Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    devtmpfs: initialized
    random: get_random_u32 called from bucket_table_alloc.isra.27+0x68/0x194 with crng_init=0
    clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
    futex hash table entries: 256 (order: -1, 3072 bytes, linear)
    NET: Registered protocol family 16
    Data read fault at 0x00000000 in Super Data (pc=0x8a6a)
    BAD KERNEL BUSERR
    Oops: 00000000
    Modules linked in:
    PC: [<00008a6a>] via_flush_cache+0x12/0x2c
    SR: 2700  SP: 01c1fe3c  a2: 01c24000
    d0: 00001119    d1: 0000000c    d2: 00012000    d3: 0000000f
    d4: 01c06840    d5: 00033b92    a0: 00000000    a1: 00000000
    Process swapper (pid: 1, task=01c24000)
    Frame format=B ssw=0755 isc=0200 isb=fff7 daddr=00000000 dobuf=01c1fed0
    baddr=00008a6e dibuf=0000004e ver=f
    Stack from 01c1fec4:
            01c1fed0 00007d7e 00010080 01c1fedc 0000792e 00000001 01c1fef4 00006b40
            01c80000 00040000 00000006 00000003 01c1ff1c 004a545e 004ff200 00040000
            00000000 00000003 01c06840 00033b92 004a5410 004b6c88 01c1ff84 000021e2
            00000073 00000003 01c06840 00033b92 0038507a 004bb094 004b6ca8 004b6c88
            004b6ca4 004b6c88 000021ae 00020002 00000000 01c0685d 00000000 01c1ffb4
            0049f938 00409c85 01c06840 0045bd40 00000073 00000002 00000002 00000000
    Call Trace: [<00007d7e>] mac_cache_card_flush+0x12/0x1c
     [<00010080>] fix_dnrm+0x2/0x18
     [<0000792e>] cache_push+0x46/0x5a
     [<00006b40>] arch_dma_prep_coherent+0x60/0x6e
     [<00040000>] switched_to_dl+0x76/0xd0
     [<004a545e>] dma_atomic_pool_init+0x4e/0x188
     [<00040000>] switched_to_dl+0x76/0xd0
     [<00033b92>] parse_args+0x0/0x370
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<000021e2>] do_one_initcall+0x34/0x1be
     [<00033b92>] parse_args+0x0/0x370
     [<0038507a>] strcpy+0x0/0x1e
     [<000021ae>] do_one_initcall+0x0/0x1be
     [<00020002>] do_proc_dointvec_conv+0x54/0x74
     [<0049f938>] kernel_init_freeable+0x126/0x190
     [<0049f94c>] kernel_init_freeable+0x13a/0x190
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<00041798>] complete+0x0/0x3c
     [<000b9b0c>] kfree+0x0/0x20a
     [<0038df98>] schedule+0x0/0xd0
     [<0038d604>] kernel_init+0x0/0xda
     [<0038d610>] kernel_init+0xc/0xda
     [<0038d604>] kernel_init+0x0/0xda
     [<00002d38>] ret_from_kernel_thread+0xc/0x14
    Code: 0000 2079 0048 10da 2279 0048 10c8 d3c8 <1011> 0200 fff7 1280 d1f9 0048 10c8 1010 0000 0008 1080 4e5e 4e75 4e56 0000 2039
    Disabling lock debugging due to kernel taint
    Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Thanks to Stan Johnson for capturing the console log and running git
    bisect.
    
    Git bisect said commit 8e3a68fb55e0 ("dma-mapping: make
    dma_atomic_pool_init self-contained") is the first "bad" commit. I don't
    know why. Perhaps mach_l2_flush first became reachable with that commit.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Cc: Joshua Thompson <funaho@jurai.org>
    Link: https://lore.kernel.org/r/b8bbeef197d6b3898e82ed0d231ad08f575a4b34.1589949122.git.fthain@telegraphics.com.au
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec718fc8acdbba62351c2988dfb4355e73df8b3e
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:15 2020 +0300

    clocksource: dw_apb_timer_of: Fix missing clockevent timers
    
    [ Upstream commit 6d2e16a3181bafb77b535095c39ad1c8b9558c8c ]
    
    Commit 100214889973 ("clocksource: dw_apb_timer_of: use
    clocksource_of_init") replaced a publicly available driver
    initialization method with one called by the timer_probe() method
    available after CLKSRC_OF. In current implementation it traverses
    all the timers available in the system and calls their initialization
    methods if corresponding devices were either in dtb or in acpi. But
    if before the commit any number of available timers would be installed
    as clockevent and clocksource devices, after that there would be at most
    two. The rest are just ignored since default case branch doesn't do
    anything. I don't see a reason of such behaviour, neither the commit
    message explains it. Moreover this might be wrong if on some platforms
    these timers might be used for different purpose, as virtually CPU-local
    clockevent timers and as an independent broadcast timer. So in order
    to keep the compatibility with the platforms where the order of the
    timers detection has some meaning, lets add the secondly discovered
    timer to be of clocksource/sched_clock type, while the very first and
    the others would provide the clockevents service.
    
    Fixes: 100214889973 ("clocksource: dw_apb_timer_of: use clocksource_of_init")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-7-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9c525c298bbc0b997bbb7b3bbc1c2b44f78cedf
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Wed May 20 14:32:02 2020 +1000

    m68k: mac: Don't call via_flush_cache() on Mac IIfx
    
    [ Upstream commit bcc44f6b74106b31f0b0408b70305a40360d63b7 ]
    
    There is no VIA2 chip on the Mac IIfx, so don't call via_flush_cache().
    This avoids a boot crash which appeared in v5.4.
    
    printk: console [ttyS0] enabled
    printk: bootconsole [debug0] disabled
    printk: bootconsole [debug0] disabled
    Calibrating delay loop... 9.61 BogoMIPS (lpj=48064)
    pid_max: default: 32768 minimum: 301
    Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    devtmpfs: initialized
    random: get_random_u32 called from bucket_table_alloc.isra.27+0x68/0x194 with crng_init=0
    clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
    futex hash table entries: 256 (order: -1, 3072 bytes, linear)
    NET: Registered protocol family 16
    Data read fault at 0x00000000 in Super Data (pc=0x8a6a)
    BAD KERNEL BUSERR
    Oops: 00000000
    Modules linked in:
    PC: [<00008a6a>] via_flush_cache+0x12/0x2c
    SR: 2700  SP: 01c1fe3c  a2: 01c24000
    d0: 00001119    d1: 0000000c    d2: 00012000    d3: 0000000f
    d4: 01c06840    d5: 00033b92    a0: 00000000    a1: 00000000
    Process swapper (pid: 1, task=01c24000)
    Frame format=B ssw=0755 isc=0200 isb=fff7 daddr=00000000 dobuf=01c1fed0
    baddr=00008a6e dibuf=0000004e ver=f
    Stack from 01c1fec4:
            01c1fed0 00007d7e 00010080 01c1fedc 0000792e 00000001 01c1fef4 00006b40
            01c80000 00040000 00000006 00000003 01c1ff1c 004a545e 004ff200 00040000
            00000000 00000003 01c06840 00033b92 004a5410 004b6c88 01c1ff84 000021e2
            00000073 00000003 01c06840 00033b92 0038507a 004bb094 004b6ca8 004b6c88
            004b6ca4 004b6c88 000021ae 00020002 00000000 01c0685d 00000000 01c1ffb4
            0049f938 00409c85 01c06840 0045bd40 00000073 00000002 00000002 00000000
    Call Trace: [<00007d7e>] mac_cache_card_flush+0x12/0x1c
     [<00010080>] fix_dnrm+0x2/0x18
     [<0000792e>] cache_push+0x46/0x5a
     [<00006b40>] arch_dma_prep_coherent+0x60/0x6e
     [<00040000>] switched_to_dl+0x76/0xd0
     [<004a545e>] dma_atomic_pool_init+0x4e/0x188
     [<00040000>] switched_to_dl+0x76/0xd0
     [<00033b92>] parse_args+0x0/0x370
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<000021e2>] do_one_initcall+0x34/0x1be
     [<00033b92>] parse_args+0x0/0x370
     [<0038507a>] strcpy+0x0/0x1e
     [<000021ae>] do_one_initcall+0x0/0x1be
     [<00020002>] do_proc_dointvec_conv+0x54/0x74
     [<0049f938>] kernel_init_freeable+0x126/0x190
     [<0049f94c>] kernel_init_freeable+0x13a/0x190
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<00041798>] complete+0x0/0x3c
     [<000b9b0c>] kfree+0x0/0x20a
     [<0038df98>] schedule+0x0/0xd0
     [<0038d604>] kernel_init+0x0/0xda
     [<0038d610>] kernel_init+0xc/0xda
     [<0038d604>] kernel_init+0x0/0xda
     [<00002d38>] ret_from_kernel_thread+0xc/0x14
    Code: 0000 2079 0048 10da 2279 0048 10c8 d3c8 <1011> 0200 fff7 1280 d1f9 0048 10c8 1010 0000 0008 1080 4e5e 4e75 4e56 0000 2039
    Disabling lock debugging due to kernel taint
    Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Thanks to Stan Johnson for capturing the console log and running git
    bisect.
    
    Git bisect said commit 8e3a68fb55e0 ("dma-mapping: make
    dma_atomic_pool_init self-contained") is the first "bad" commit. I don't
    know why. Perhaps mach_l2_flush first became reachable with that commit.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Cc: Joshua Thompson <funaho@jurai.org>
    Link: https://lore.kernel.org/r/b8bbeef197d6b3898e82ed0d231ad08f575a4b34.1589949122.git.fthain@telegraphics.com.au
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea4f019105a00186f1770eeb5d0bd280cc6c7498
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:15 2020 +0300

    clocksource: dw_apb_timer_of: Fix missing clockevent timers
    
    [ Upstream commit 6d2e16a3181bafb77b535095c39ad1c8b9558c8c ]
    
    Commit 100214889973 ("clocksource: dw_apb_timer_of: use
    clocksource_of_init") replaced a publicly available driver
    initialization method with one called by the timer_probe() method
    available after CLKSRC_OF. In current implementation it traverses
    all the timers available in the system and calls their initialization
    methods if corresponding devices were either in dtb or in acpi. But
    if before the commit any number of available timers would be installed
    as clockevent and clocksource devices, after that there would be at most
    two. The rest are just ignored since default case branch doesn't do
    anything. I don't see a reason of such behaviour, neither the commit
    message explains it. Moreover this might be wrong if on some platforms
    these timers might be used for different purpose, as virtually CPU-local
    clockevent timers and as an independent broadcast timer. So in order
    to keep the compatibility with the platforms where the order of the
    timers detection has some meaning, lets add the secondly discovered
    timer to be of clocksource/sched_clock type, while the very first and
    the others would provide the clockevents service.
    
    Fixes: 100214889973 ("clocksource: dw_apb_timer_of: use clocksource_of_init")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-7-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72b01e01812e774e8aece494c845dadf86825168
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Jun 6 23:51:16 2020 +0200

    lib/vdso: Provide sanity check for cycles (again)
    
    commit 72ce778007e57e8996b4bebdec738fc5e1145fd2 upstream.
    
    The original x86 VDSO implementation checked for the validity of the clock
    source read by testing whether the returned signed cycles value is less
    than zero. This check was also used by the vdso read function to signal
    that the current selected clocksource is not VDSO capable.
    
    During the rework of the VDSO code the check was removed and replaced with
    a check for the clocksource mode being != NONE.
    
    This turned out to be a mistake because the check is necessary for paravirt
    and hyperv clock sources. The reason is that these clock sources have their
    own internal sequence counter to validate the clocksource at the point of
    reading it. This is necessary because the hypervisor can invalidate the
    clocksource asynchronously so a check during the VDSO data update is not
    sufficient. Having a separate indicator for the validity is slower than
    just validating the cycles value. The check for it being negative turned
    out to be the fastest implementation and safe as it would require an uptime
    of ~73 years with a 4GHz counter frequency to result in a false positive.
    
    Add an optional function to validate the cycles with a default
    implementation which allows the compiler to optimize it out for
    architectures which do not require it.
    
    Fixes: 5d51bee725cc ("clocksource: Add common vdso clock mode storage")
    Reported-by: Miklos Szeredi <miklos@szeredi.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Miklos Szeredi <mszeredi@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200606221531.963970768@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48b41c5e2de6c52c90efa99cfa122a5da7a7f0cd
Author: Benjamin Gaignard <benjamin.gaignard@linaro.org>
Date:   Wed Jun 3 14:54:38 2020 +0200

    clocksource: Add Low Power STM32 timers driver
    
    Implement clock event driver using low power STM32 timers.
    Low power timer counters running even when CPUs are stopped.
    It could be used as clock event broadcaster to wake up CPUs but not like
    a clocksource because each it rise an interrupt the counter restart from 0.
    
    Low power timers have a 16 bits counter and a prescaler which allow to
    divide the clock per power of 2 to up 128 to target a 32KHz rate.
    
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Signed-off-by: Pascal Paillet <p.paillet@st.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit d7d3023c220d40472adb5789322a91bffb9f6401
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Jun 6 23:51:17 2020 +0200

    x86/vdso: Unbreak paravirt VDSO clocks
    
    commit 7778d8417b74aded842eeb372961cfc460417fa0 upstream.
    
    The conversion of x86 VDSO to the generic clock mode storage broke the
    paravirt and hyperv clocksource logic. These clock sources have their own
    internal sequence counter to validate the clocksource at the point of
    reading it. This is necessary because the hypervisor can invalidate the
    clocksource asynchronously so a check during the VDSO data update is not
    sufficient. If the internal check during read invalidates the clocksource
    the read return U64_MAX. The original code checked this efficiently by
    testing whether the result (casted to signed) is negative, i.e. bit 63 is
    set. This was done that way because an extra indicator for the validity had
    more overhead.
    
    The conversion broke this check because the check was replaced by a check
    for a valid VDSO clock mode.
    
    The wreckage manifests itself when the paravirt clock is installed as a
    valid VDSO clock and during runtime invalidated by the hypervisor,
    e.g. after a host suspend/resume cycle. After the invalidation the read
    function returns U64_MAX which is used as cycles and makes the clock jump
    by ~2200 seconds, and become stale until the 2200 seconds have elapsed
    where it starts to jump again. The period of this effect depends on the
    shift/mult pair of the clocksource and the jumps and staleness are an
    artifact of undefined but reproducible behaviour of math overflow.
    
    Implement an x86 version of the new vdso_cycles_ok() inline which adds this
    check back and a variant of vdso_clocksource_ok() which lets the compiler
    optimize it out to avoid the extra conditional. That's suboptimal when the
    system does not have a VDSO capable clocksource, but that's not the case
    which is optimized for.
    
    Fixes: 5d51bee725cc ("clocksource: Add common vdso clock mode storage")
    Reported-by: Miklos Szeredi <miklos@szeredi.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Miklos Szeredi <mszeredi@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200606221532.080560273@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a45a65888393eda692fce0851c40d9f5ce4ef66
Merge: 92ac971219a2 7778d8417b74
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jun 11 15:54:31 2020 -0700

    Merge tag 'x86-urgent-2020-06-11' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull more x86 updates from Thomas Gleixner:
     "A set of fixes and updates for x86:
    
       - Unbreak paravirt VDSO clocks.
    
         While the VDSO code was moved into lib for sharing a subtle check
         for the validity of paravirt clocks got replaced. While the
         replacement works perfectly fine for bare metal as the update of
         the VDSO clock mode is synchronous, it fails for paravirt clocks
         because the hypervisor can invalidate them asynchronously.
    
         Bring it back as an optional function so it does not inflict this
         on architectures which are free of PV damage.
    
       - Fix the jiffies to jiffies64 mapping on 64bit so it does not
         trigger an ODR violation on newer compilers
    
       - Three fixes for the SSBD and *IB* speculation mitigation maze to
         ensure consistency, not disabling of some *IB* variants wrongly and
         to prevent a rogue cross process shutdown of SSBD. All marked for
         stable.
    
       - Add yet more CPU models to the splitlock detection capable list
         !@#%$!
    
       - Bring the pr_info() back which tells that TSC deadline timer is
         enabled.
    
       - Reboot quirk for MacBook6,1"
    
    * tag 'x86-urgent-2020-06-11' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/vdso: Unbreak paravirt VDSO clocks
      lib/vdso: Provide sanity check for cycles (again)
      clocksource: Remove obsolete ifdef
      x86_64: Fix jiffies ODR violation
      x86/speculation: PR_SPEC_FORCE_DISABLE enforcement for indirect branches.
      x86/speculation: Prevent rogue cross-process SSBD shutdown
      x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.
      x86/cpu: Add Sapphire Rapids CPU model number
      x86/split_lock: Add Icelake microserver and Tigerlake CPU models
      x86/apic: Make TSC deadline timer detection message visible
      x86/reboot/quirks: Add MacBook6,1 reboot quirk

commit cd16ed33c3c618930ccda7049dcea05ee707a9c0
Merge: 55d728b2b05f 01f76386b0ac
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jun 11 12:55:20 2020 -0700

    Merge tag 'riscv-for-linus-5.8-mw1' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux
    
    Pull more RISC-V updates from Palmer Dabbelt:
    
     - Kconfig select statements are now sorted alphanumerically
    
     - first-level interrupts are now handled via a full irqchip driver
    
     - CPU hotplug is fixed
    
     - vDSO calls now use the common vDSO infrastructure
    
    * tag 'riscv-for-linus-5.8-mw1' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux:
      riscv: set the permission of vdso_data to read-only
      riscv: use vDSO common flow to reduce the latency of the time-related functions
      riscv: fix build warning of missing prototypes
      RISC-V: Don't mark init section as non-executable
      RISC-V: Force select RISCV_INTC for CONFIG_RISCV
      RISC-V: Remove do_IRQ() function
      clocksource/drivers/timer-riscv: Use per-CPU timer interrupt
      irqchip: RISC-V per-HART local interrupt controller driver
      RISC-V: Rename and move plic_find_hart_id() to arch directory
      RISC-V: self-contained IPI handling routine
      RISC-V: Sort select statements alphanumerically

commit 033a65de7eced89f62d2cd166b1ee2d33af4f1e4
Author: Anup Patel <anup.patel@wdc.com>
Date:   Mon Jun 1 14:45:41 2020 +0530

    clocksource/drivers/timer-riscv: Use per-CPU timer interrupt
    
    Instead of directly calling RISC-V timer interrupt handler from
    RISC-V local interrupt conntroller driver, this patch implements
    RISC-V timer interrupt as a per-CPU interrupt using per-CPU APIs
    of Linux IRQ subsystem.
    
    Signed-off-by: Anup Patel <anup.patel@wdc.com>
    Reviewed-by: Atish Patra <atish.patra@wdc.com>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Palmer Dabbelt <palmerdabbelt@google.com>

commit 7778d8417b74aded842eeb372961cfc460417fa0
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Jun 6 23:51:17 2020 +0200

    x86/vdso: Unbreak paravirt VDSO clocks
    
    The conversion of x86 VDSO to the generic clock mode storage broke the
    paravirt and hyperv clocksource logic. These clock sources have their own
    internal sequence counter to validate the clocksource at the point of
    reading it. This is necessary because the hypervisor can invalidate the
    clocksource asynchronously so a check during the VDSO data update is not
    sufficient. If the internal check during read invalidates the clocksource
    the read return U64_MAX. The original code checked this efficiently by
    testing whether the result (casted to signed) is negative, i.e. bit 63 is
    set. This was done that way because an extra indicator for the validity had
    more overhead.
    
    The conversion broke this check because the check was replaced by a check
    for a valid VDSO clock mode.
    
    The wreckage manifests itself when the paravirt clock is installed as a
    valid VDSO clock and during runtime invalidated by the hypervisor,
    e.g. after a host suspend/resume cycle. After the invalidation the read
    function returns U64_MAX which is used as cycles and makes the clock jump
    by ~2200 seconds, and become stale until the 2200 seconds have elapsed
    where it starts to jump again. The period of this effect depends on the
    shift/mult pair of the clocksource and the jumps and staleness are an
    artifact of undefined but reproducible behaviour of math overflow.
    
    Implement an x86 version of the new vdso_cycles_ok() inline which adds this
    check back and a variant of vdso_clocksource_ok() which lets the compiler
    optimize it out to avoid the extra conditional. That's suboptimal when the
    system does not have a VDSO capable clocksource, but that's not the case
    which is optimized for.
    
    Fixes: 5d51bee725cc ("clocksource: Add common vdso clock mode storage")
    Reported-by: Miklos Szeredi <miklos@szeredi.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Miklos Szeredi <mszeredi@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200606221532.080560273@linutronix.de

commit 72ce778007e57e8996b4bebdec738fc5e1145fd2
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Jun 6 23:51:16 2020 +0200

    lib/vdso: Provide sanity check for cycles (again)
    
    The original x86 VDSO implementation checked for the validity of the clock
    source read by testing whether the returned signed cycles value is less
    than zero. This check was also used by the vdso read function to signal
    that the current selected clocksource is not VDSO capable.
    
    During the rework of the VDSO code the check was removed and replaced with
    a check for the clocksource mode being != NONE.
    
    This turned out to be a mistake because the check is necessary for paravirt
    and hyperv clock sources. The reason is that these clock sources have their
    own internal sequence counter to validate the clocksource at the point of
    reading it. This is necessary because the hypervisor can invalidate the
    clocksource asynchronously so a check during the VDSO data update is not
    sufficient. Having a separate indicator for the validity is slower than
    just validating the cycles value. The check for it being negative turned
    out to be the fastest implementation and safe as it would require an uptime
    of ~73 years with a 4GHz counter frequency to result in a false positive.
    
    Add an optional function to validate the cycles with a default
    implementation which allows the compiler to optimize it out for
    architectures which do not require it.
    
    Fixes: 5d51bee725cc ("clocksource: Add common vdso clock mode storage")
    Reported-by: Miklos Szeredi <miklos@szeredi.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Miklos Szeredi <mszeredi@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200606221531.963970768@linutronix.de

commit c7f3d43b629b598a2bb9ec3524e844eae7492e7e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Jun 6 23:51:15 2020 +0200

    clocksource: Remove obsolete ifdef
    
    CONFIG_GENERIC_VDSO_CLOCK_MODE was a transitional config switch which got
    removed after all architectures got converted to the new storage model.
    
    But the removal forgot to remove the #ifdef which guards the
    vdso_clock_mode sanity check, which effectively disables the sanity check.
    
    Remove it now.
    
    Fixes: f86fd32db706 ("lib/vdso: Cleanup clock mode storage leftovers")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Miklos Szeredi <mszeredi@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200606221531.845475036@linutronix.de

commit ebf89ed78b6ad6bc53f49a9dc0754fa97bb11e4a
Author: Suman Anna <s-anna@ti.com>
Date:   Fri Jun 5 17:13:46 2020 -0500

    ARM: dts: dra7: Fix timer nodes properly for timer_sys_ck clocks
    
    The commit 5390130f3b28 ("ARM: dts: dra7: add timer_sys_ck entries
    for IPU/DSP timers") was added to allow the OMAP clocksource timer
    driver to use the clock aliases when reconfiguring the parent clock
    source for the timer functional clocks after the timer_sys_ck clock
    aliases got cleaned up in commit a8202cd5174d ("clk: ti: dra7: drop
    unnecessary clock aliases").
    
    The above patch however has missed adding the entries for couple of
    timers (14, 15 and 16), and also added erroneously in the parent
    ti-sysc nodes for couple of clocks (timers 4, 5 and 6). Fix these
    properly, so that any of these timers can be used with OMAP remoteproc
    IPU and DSP devices. The always-on timers 1 and 12 are not expected
    to use this clock source, so they are not modified.
    
    Fixes: 5390130f3b28 ("ARM: dts: dra7: add timer_sys_ck entries for IPU/DSP timers")
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit dabc4df27c628866ede130a09121f255ca894d8c
Merge: f6606d0c0010 809eb4e9bf9d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jun 3 10:10:07 2020 -0700

    Merge tag 'timers-core-2020-06-02' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The truly boring timer and clocksource updates for 5.8:
    
       - Not a single new clocksource or clockevent driver!
    
       - Device tree updates for various chips
    
       - Fixes and improvements and cleanups all over the place"
    
    * tag 'timers-core-2020-06-02' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (27 commits)
      dt-bindings: timer: Add renesas,em-sti bindings
      clocksource/drivers/timer-versatile: Clear OF_POPULATED flag
      clocksource: mips-gic-timer: Mark GIC timer as unstable if ref clock changes
      clocksource: mips-gic-timer: Register as sched_clock
      clocksource: dw_apb_timer_of: Fix missing clockevent timers
      clocksource: dw_apb_timer: Affiliate of-based timer with any CPU
      clocksource: dw_apb_timer: Make CPU-affiliation being optional
      dt-bindings: timer: Move snps,dw-apb-timer DT schema from rtc
      dt-bindings: rtc: Convert snps,dw-apb-timer to DT schema
      clocksource/drivers/timer-ti-dm: Do one override clock parent in prepare()
      clocksource/drivers/timer-ti-dm: Fix spelling mistake "detectt" -> "detect"
      clocksource/drivers/timer-ti-dm: Fix warning for set but not used
      clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support
      clocksource/drivers/timer-ti-32k: Add support for initializing directly
      drivers/clocksource/arm_arch_timer: Remove duplicate error message
      clocksource/drivers/arc_timer: Remove duplicate error message
      clocksource/drivers/rda: drop redundant Kconfig dependency
      clocksource/drivers/timer-ti-dm: Fix warning for set but not used
      clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support
      clocksource/drivers/timer-ti-32k: Add support for initializing directly
      ...

commit 803b504bf5527775d00a45182fd996e6dd665e8c
Merge: 66ee9359b0d4 1a5428119bc3
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue May 26 00:04:19 2020 +0200

    Merge tag 'omap-for-v5.8/timer-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into arm/soc
    
    System timer changes for omaps for v5.8 merge window
    
    This series of changes finally gets the legacy omap dual-mode timer and
    32k counter system timer updated to use drivers/clocksource and device
    tree data. And we can now remove the unused legacy platform data.
    
    These changes are based on an immutable clocksource branch set up by
    Daniel Lezcano.
    
    * tag 'omap-for-v5.8/timer-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      bus: ti-sysc: Timers no longer need legacy quirk handling
      ARM: OMAP2+: Drop old timer code for dmtimer and 32k counter
      ARM: dts: Configure system timers for omap2
      ARM: dts: Configure system timers for ti81xx
      ARM: dts: Configure system timers for omap3
      ARM: dts: Configure system timers for omap5 and dra7
      ARM: dts: Configure system timers for omap4
      ARM: dts: Configure system timers for am437x
      ARM: dts: Configure system timers for am335x
      ARM: OMAP2+: Add omap_init_time_of()
      bus: ti-sysc: Ignore timer12 on secure omap3
      clk: ti: dm816: enable sysclk6_ck on init
      clocksource/drivers/timer-ti-dm: Fix warning for set but not used
      clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support
      clocksource/drivers/timer-ti-32k: Add support for initializing directly
    
    Link: https://lore.kernel.org/r/pull-1590169577-735045@atomide.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit bcc44f6b74106b31f0b0408b70305a40360d63b7
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Wed May 20 14:32:02 2020 +1000

    m68k: mac: Don't call via_flush_cache() on Mac IIfx
    
    There is no VIA2 chip on the Mac IIfx, so don't call via_flush_cache().
    This avoids a boot crash which appeared in v5.4.
    
    printk: console [ttyS0] enabled
    printk: bootconsole [debug0] disabled
    printk: bootconsole [debug0] disabled
    Calibrating delay loop... 9.61 BogoMIPS (lpj=48064)
    pid_max: default: 32768 minimum: 301
    Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    devtmpfs: initialized
    random: get_random_u32 called from bucket_table_alloc.isra.27+0x68/0x194 with crng_init=0
    clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
    futex hash table entries: 256 (order: -1, 3072 bytes, linear)
    NET: Registered protocol family 16
    Data read fault at 0x00000000 in Super Data (pc=0x8a6a)
    BAD KERNEL BUSERR
    Oops: 00000000
    Modules linked in:
    PC: [<00008a6a>] via_flush_cache+0x12/0x2c
    SR: 2700  SP: 01c1fe3c  a2: 01c24000
    d0: 00001119    d1: 0000000c    d2: 00012000    d3: 0000000f
    d4: 01c06840    d5: 00033b92    a0: 00000000    a1: 00000000
    Process swapper (pid: 1, task=01c24000)
    Frame format=B ssw=0755 isc=0200 isb=fff7 daddr=00000000 dobuf=01c1fed0
    baddr=00008a6e dibuf=0000004e ver=f
    Stack from 01c1fec4:
            01c1fed0 00007d7e 00010080 01c1fedc 0000792e 00000001 01c1fef4 00006b40
            01c80000 00040000 00000006 00000003 01c1ff1c 004a545e 004ff200 00040000
            00000000 00000003 01c06840 00033b92 004a5410 004b6c88 01c1ff84 000021e2
            00000073 00000003 01c06840 00033b92 0038507a 004bb094 004b6ca8 004b6c88
            004b6ca4 004b6c88 000021ae 00020002 00000000 01c0685d 00000000 01c1ffb4
            0049f938 00409c85 01c06840 0045bd40 00000073 00000002 00000002 00000000
    Call Trace: [<00007d7e>] mac_cache_card_flush+0x12/0x1c
     [<00010080>] fix_dnrm+0x2/0x18
     [<0000792e>] cache_push+0x46/0x5a
     [<00006b40>] arch_dma_prep_coherent+0x60/0x6e
     [<00040000>] switched_to_dl+0x76/0xd0
     [<004a545e>] dma_atomic_pool_init+0x4e/0x188
     [<00040000>] switched_to_dl+0x76/0xd0
     [<00033b92>] parse_args+0x0/0x370
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<000021e2>] do_one_initcall+0x34/0x1be
     [<00033b92>] parse_args+0x0/0x370
     [<0038507a>] strcpy+0x0/0x1e
     [<000021ae>] do_one_initcall+0x0/0x1be
     [<00020002>] do_proc_dointvec_conv+0x54/0x74
     [<0049f938>] kernel_init_freeable+0x126/0x190
     [<0049f94c>] kernel_init_freeable+0x13a/0x190
     [<004a5410>] dma_atomic_pool_init+0x0/0x188
     [<00041798>] complete+0x0/0x3c
     [<000b9b0c>] kfree+0x0/0x20a
     [<0038df98>] schedule+0x0/0xd0
     [<0038d604>] kernel_init+0x0/0xda
     [<0038d610>] kernel_init+0xc/0xda
     [<0038d604>] kernel_init+0x0/0xda
     [<00002d38>] ret_from_kernel_thread+0xc/0x14
    Code: 0000 2079 0048 10da 2279 0048 10c8 d3c8 <1011> 0200 fff7 1280 d1f9 0048 10c8 1010 0000 0008 1080 4e5e 4e75 4e56 0000 2039
    Disabling lock debugging due to kernel taint
    Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    
    Thanks to Stan Johnson for capturing the console log and running git
    bisect.
    
    Git bisect said commit 8e3a68fb55e0 ("dma-mapping: make
    dma_atomic_pool_init self-contained") is the first "bad" commit. I don't
    know why. Perhaps mach_l2_flush first became reachable with that commit.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Cc: Joshua Thompson <funaho@jurai.org>
    Link: https://lore.kernel.org/r/b8bbeef197d6b3898e82ed0d231ad08f575a4b34.1589949122.git.fthain@telegraphics.com.au
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit 7a3768c206a006525afc090f92d4d618d8356b92
Author: Saravana Kannan <saravanak@google.com>
Date:   Tue Mar 24 12:53:02 2020 -0700

    clocksource/drivers/timer-versatile: Clear OF_POPULATED flag
    
    The commit 4f41fe386a94 ("clocksource/drivers/timer-probe: Avoid
    creating dead devices") broke the handling of arm,vexpress-sysreg [1].
    
    The arm,vexpress-sysreg device is handled by both timer-versatile.c and
    drivers/mfd/vexpress-sysreg.c. While the timer driver doesn't use the
    device, the mfd driver still needs a device to probe.
    
    So, this patch clears the OF_POPULATED flag to continue creating the
    device.
    
    [1] - https://lore.kernel.org/lkml/20200324175955.GA16972@arm.com/
    
    Fixes: 4f41fe386a94 ("clocksource/drivers/timer-probe: Avoid creating dead devices")
    Signed-off-by: Saravana Kannan <saravanak@google.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200324195302.203115-1-saravanak@google.com

commit 7d7de1a65349811b24971c5e8e040e6aac192dd4
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:17 2020 +0300

    clocksource: mips-gic-timer: Mark GIC timer as unstable if ref clock changes
    
    Currently clocksource framework doesn't support the clocks with variable
    frequency. Since MIPS GIC timer ticks rate might be unstable on some
    platforms, we must make sure that it justifies the clocksource
    requirements. MIPS GIC timer is incremented with the CPU cluster reference
    clocks rate. So in case if CPU frequency changes, the MIPS GIC tick rate
    changes synchronously. Due to this the clocksource subsystem can't rely on
    the timer to measure system clocks anymore. This commit marks the MIPS GIC
    based clocksource as unstable if reference clock (normally it's a CPU
    reference clocks) rate changes. The clocksource will execute a watchdog
    thread, which lowers the MIPS GIC timer rating to zero and fallbacks to a
    new stable one.
    
    Note we don't need to set the CLOCK_SOURCE_MUST_VERIFY flag to the MIPS
    GIC clocksource since normally the timer is stable. The only reason why
    it gets unstable is due to the ref clock rate change, which event we
    detect here in the driver by means of the clocks event notifier.
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-9-Sergey.Semin@baikalelectronics.ru

commit 48016e78d328998b1f00bcfb639adeabca51abe5
Author: Paul Burton <paulburton@kernel.org>
Date:   Thu May 21 23:48:16 2020 +0300

    clocksource: mips-gic-timer: Register as sched_clock
    
    The MIPS GIC timer is well suited for use as sched_clock, so register it
    as such.
    
    Whilst the existing gic_read_count() function matches the prototype
    needed by sched_clock_register() already, we split it into 2 functions
    in order to remove the need to evaluate the mips_cm_is64 condition
    within each call since sched_clock should be as fast as possible.
    
    Note the sched clock framework needs the clock source being stable in
    order to rely on it. So we register the MIPS GIC timer as schedule clocks
    only if it's, if either the system doesn't have CPU-frequency enabled or
    the CPU frequency is changed by means of the CPC core clock divider
    available on the platforms with CM3 or newer.
    
    Signed-off-by: Paul Burton <paulburton@kernel.org>
    Co-developed-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    [Sergey.Semin@baikalelectronics.ru: Register sched-clock if CM3 or !CPU-freq]
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-8-Sergey.Semin@baikalelectronics.ru

commit 6d2e16a3181bafb77b535095c39ad1c8b9558c8c
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:15 2020 +0300

    clocksource: dw_apb_timer_of: Fix missing clockevent timers
    
    Commit 100214889973 ("clocksource: dw_apb_timer_of: use
    clocksource_of_init") replaced a publicly available driver
    initialization method with one called by the timer_probe() method
    available after CLKSRC_OF. In current implementation it traverses
    all the timers available in the system and calls their initialization
    methods if corresponding devices were either in dtb or in acpi. But
    if before the commit any number of available timers would be installed
    as clockevent and clocksource devices, after that there would be at most
    two. The rest are just ignored since default case branch doesn't do
    anything. I don't see a reason of such behaviour, neither the commit
    message explains it. Moreover this might be wrong if on some platforms
    these timers might be used for different purpose, as virtually CPU-local
    clockevent timers and as an independent broadcast timer. So in order
    to keep the compatibility with the platforms where the order of the
    timers detection has some meaning, lets add the secondly discovered
    timer to be of clocksource/sched_clock type, while the very first and
    the others would provide the clockevents service.
    
    Fixes: 100214889973 ("clocksource: dw_apb_timer_of: use clocksource_of_init")
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-7-Sergey.Semin@baikalelectronics.ru

commit 65e0f876405ef4f0ff25eb1c5ff3e9b536d68805
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:14 2020 +0300

    clocksource: dw_apb_timer: Affiliate of-based timer with any CPU
    
    Currently any DW APB Timer device detected in OF is bound to CPU #0.
    Doing so is redundant since DW APB Timer isn't CPU-local timer, but as
    having APB interface is normally accessible from any CPU in the system. By
    artificially affiliating the DW timer to the very first CPU we may and in
    our case will make the clockevent subsystem to decline the more performant
    real CPU-local timers selection in favor of in fact non-local and
    accessible over a slow bus - DW APB Timers.
    
    Let's not affiliate the of-detected DW APB Timers to any CPU. By doing so
    the clockevent framework would prefer to select the real CPU-local timer
    instead of DW APB one. Otherwise if there is no other than DW APB device
    for clockevents tracking then it will be selected.
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-6-Sergey.Semin@baikalelectronics.ru

commit cee43dbf2ee3f430434e2b66994eff8a1aeda889
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 23:48:13 2020 +0300

    clocksource: dw_apb_timer: Make CPU-affiliation being optional
    
    Currently the DW APB Timer driver binds each clockevent timers to a
    particular CPU. This isn't good for multiple reasons. First of all seeing
    the device is placed on APB bus (which makes it accessible from any CPU
    core), accessible over MMIO and having the DYNIRQ flag set we can be sure
    that manually binding the timer to any CPU just isn't correct. By doing
    so we just set an extra limitation on device usage. This also doesn't
    reflect the device actual capability, since by setting the IRQ affinity
    we can make it virtually local to any CPU. Secondly imagine if you had a
    real CPU-local timer with the same rating and the same CPU-affinity.
    In this case if DW APB timer was registered first, then due to the
    clockevent framework tick-timer selection procedure we'll end up with the
    real CPU-local timer being left unselected for clock-events tracking. But
    on most of the platforms (MIPS/ARM/etc) such timers are normally embedded
    into the CPU core and are accessible with much better performance then
    devices placed on APB. For instance in MIPS architectures there is
    r4k-timer, which is CPU-local, assigned with the same rating, and normally
    its clockevent device is registered after the platform-specific one.
    
    So in order to fix all of these issues let's make the DW APB Timer CPU
    affinity being optional and deactivated by passing a negative CPU id,
    which will effectively set the DW APB clockevent timer cpumask to
    'cpu_possible_mask'.
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-rtc@vger.kernel.org
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200521204818.25436-5-Sergey.Semin@baikalelectronics.ru

commit 264418e20d1fedbed8ad79683b63caa3d72c3b2e
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Mon Apr 27 22:58:31 2020 +0530

    clocksource/drivers/timer-ti-dm: Do one override clock parent in prepare()
    
    omap_dm_timer_prepare() is setting up the parent 32KHz clock. This
    prepare() gets called by request_timer in the client's driver. Because of
    this, the timer clock parent that is set with assigned-clock-parent is being
    overwritten. So drop this default setting of parent in prepare().
    
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Reviewed-by: Suman Anna <s-anna@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200427172831.16546-1-lokeshvutla@ti.com

commit ac593e62b0cfcbc53502be8b6c7e40fed8baff8c
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue May 19 23:44:28 2020 +0100

    clocksource/drivers/timer-ti-dm: Fix spelling mistake "detectt" -> "detect"
    
    There is a spelling mistake in a pr_err message. Fix it.
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200519224428.6195-1-colin.king@canonical.com

commit c177e2975430cec296aa52a0d413e447417d6cf9
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue May 19 08:51:57 2020 -0700

    clocksource/drivers/timer-ti-dm: Fix warning for set but not used
    
    We can get a warning for dmtimer_clocksource_init() with 'pa' set but
    not used. This was used in the earlier revisions of the code but no
    longer needed, so let's remove the unused pa and of_translate_address().
    Let's also do it for dmtimer_clockevent_init() that has a similar issue.
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200519155157.12804-1-tony@atomide.com

commit 52762fbd1c4778ac9b173624ca0faacd22ef4724
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 10:23:18 2020 -0700

    clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support
    
    We can move the TI dmtimer clockevent and clocksource to live under
    drivers/clocksource if we rely only on the clock framework, and handle
    the module configuration directly in the clocksource driver based on the
    device tree data.
    
    This removes the early dependency with system timers to the interconnect
    related code, and we can probe pretty much everything else later on at
    the module_init level.
    
    Let's first add a new driver for timer-ti-dm-systimer based on existing
    arch/arm/mach-omap2/timer.c. Then let's start moving SoCs to probe with
    device tree data while still keeping the old timer.c. And eventually we
    can just drop the old timer.c.
    
    Let's take the opportunity to switch to use readl/writel as pointed out
    by Daniel Lezcano <daniel.lezcano@linaro.org>. This allows further
    clean-up of the timer-ti-dm code the a lot of the shared helpers can
    just become static to the non-syster related code.
    
    Note the boards can optionally configure different timer source clocks
    if needed with assigned-clocks and assigned-clock-parents.
    
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-omap@vger.kernel.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200507172330.18679-3-tony@atomide.com

commit 46b30515f97ece3da661b251e4a0ad9ac7a338d3
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 10:23:17 2020 -0700

    clocksource/drivers/timer-ti-32k: Add support for initializing directly
    
    Let's allow probing the 32k counter directly based on devicetree data to
    prepare for dropping the related legacy platform code. Let's only do this
    if the parent node is compatible with ti-sysc to make sure we have the
    related devicetree data available.
    
    Let's also show the 32k counter information before registering the
    clocksource, now we see it after the clocksource information which is a
    bit confusing.
    
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-omap@vger.kernel.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200507172330.18679-2-tony@atomide.com

commit d1b5e55208fd8e1c73876ab6ad1ce93485e3f5a2
Author: Dejin Zheng <zhengdejin5@gmail.com>
Date:   Wed Apr 29 23:35:59 2020 +0800

    drivers/clocksource/arm_arch_timer: Remove duplicate error message
    
    The function acpi_gtdt_init() prints a message in case of
    error. Remove the error message after testing if the function fails,
    otherwise it is a duplicate message.
    
    Signed-off-by: Dejin Zheng <zhengdejin5@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200429153559.21189-1-zhengdejin5@gmail.com

commit 311fb70aa55174ddebb5c6022b23e58b85e9f116
Author: Dejin Zheng <zhengdejin5@gmail.com>
Date:   Wed Apr 29 23:12:23 2020 +0800

    clocksource/drivers/arc_timer: Remove duplicate error message
    
    The function arc_get_timer_clk() prints an error message if it fails,
    remove the second error message if the function fails.
    
    Signed-off-by: Dejin Zheng <zhengdejin5@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200429151223.3120-1-zhengdejin5@gmail.com

commit 83cba9536905e4f82b726a98fe404400f0c9eb76
Author: Johan Hovold <johan@kernel.org>
Date:   Wed May 13 14:25:48 2020 +0200

    clocksource/drivers/rda: drop redundant Kconfig dependency
    
    Since commit 2f8a26c166eb ("clocksource: Improve GENERIC_CLOCKEVENTS
    dependency") all clocksource drivers depend on GENERIC_CLOCKEVENTS so
    drop the redundant attribute from the RDA-timer entry which was added
    later.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200513122548.16974-1-johan@kernel.org

commit 6b8135e7d35add8c2497c0d2053261361b92d92d
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jan 31 19:08:59 2020 +0300

    clocksource: Prevent double add_timer_on() for watchdog_timer
    
    commit febac332a819f0e764aa4da62757ba21d18c182b upstream.
    
    Kernel crashes inside QEMU/KVM are observed:
    
      kernel BUG at kernel/time/timer.c:1154!
      BUG_ON(timer_pending(timer) || !timer->function) in add_timer_on().
    
    At the same time another cpu got:
    
      general protection fault: 0000 [#1] SMP PTI of poinson pointer 0xdead000000000200 in:
    
      __hlist_del at include/linux/list.h:681
      (inlined by) detach_timer at kernel/time/timer.c:818
      (inlined by) expire_timers at kernel/time/timer.c:1355
      (inlined by) __run_timers at kernel/time/timer.c:1686
      (inlined by) run_timer_softirq at kernel/time/timer.c:1699
    
    Unfortunately kernel logs are badly scrambled, stacktraces are lost.
    
    Printing the timer->function before the BUG_ON() pointed to
    clocksource_watchdog().
    
    The execution of clocksource_watchdog() can race with a sequence of
    clocksource_stop_watchdog() .. clocksource_start_watchdog():
    
    expire_timers()
     detach_timer(timer, true);
      timer->entry.pprev = NULL;
     raw_spin_unlock_irq(&base->lock);
     call_timer_fn
      clocksource_watchdog()
    
                                            clocksource_watchdog_kthread() or
                                            clocksource_unbind()
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_stop_watchdog();
                                             del_timer(&watchdog_timer);
                                             watchdog_running = 0;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_start_watchdog();
                                             add_timer_on(&watchdog_timer, ...);
                                             watchdog_running = 1;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
      spin_lock(&watchdog_lock);
      add_timer_on(&watchdog_timer, ...);
       BUG_ON(timer_pending(timer) || !timer->function);
        timer_pending() -> true
        BUG()
    
    I.e. inside clocksource_watchdog() watchdog_timer could be already armed.
    
    Check timer_pending() before calling add_timer_on(). This is sufficient as
    all operations are synchronized by watchdog_lock.
    
    Fixes: 75c5158f70c0 ("timekeeping: Update clocksource with stop_machine")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/158048693917.4378.13823603769948933793.stgit@buzz
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3858642805973d194935c0641d8e825f9192d384
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 17:07:23 2020 +0300

    mips: csrc-r4k: Mark R4K timer as unstable if CPU freq changes
    
    Commit 07d69579e7fe ("MIPS: Don't register r4k sched clock when CPUFREQ
    enabled") disabled the r4k-clock usage for scheduler ticks counting due
    to the scheduler being non-tolerant for unstable clocks sources. For the
    same reason the clock should be used in the system clocksource framework
    with care. As soon as CPU frequency changes the clocksource framework
    should be notified about this by marking the R4K timer being unstable
    (which it really is, since the ticks rate has been changed synchronously
    with the CPU frequency).
    
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

commit 64dbc3d55d60fd115e058e9f1689542daa37356c
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 09:59:31 2020 -0700

    ARM: dts: Configure system timers for omap2
    
    We can now init system timers using the dmtimer and 32k counter
    based on only devicetree data and drivers/clocksource timers.
    Let's configure the clocksource and clockevent, and drop the old
    unused platform data.
    
    As we're just dropping platform data, and the early platform data
    init is based on the custom ti,hwmods property, we want to drop
    both the platform data and ti,hwmods property in a single patch.
    
    Since the dmtimer can use both 32k clock and system clock as the
    source, let's also configure the SoC specific default values. The
    board specific dts files can reconfigure these with assigned-clocks
    and assigned-clock-parents as needed.
    
    Let's also update the dts file to use #include while at it.
    
    Cc: devicetree@vger.kernel.org
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 83bd18b46600a37d977e811dca1334e09a6e03eb
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 09:59:31 2020 -0700

    ARM: dts: Configure system timers for ti81xx
    
    We can now init system timers using the dmtimer and 32k counter
    based on only devicetree data and drivers/clocksource timers.
    Let's configure the clocksource and clockevent, and drop the old
    unused platform data.
    
    As we're just dropping platform data, and the early platform data
    init is based on the custom ti,hwmods property, we want to drop
    both the platform data and ti,hwmods property in a single patch.
    
    Since the dmtimer can use both 32k clock and system clock as the
    source, let's also configure the SoC specific default values. The
    board specific dts files can reconfigure these with assigned-clocks
    and assigned-clock-parents as needed.
    
    Note that for ti81xx, also timer1 is of type 2 unlike on am335x
    where timer1 is type1 while the rest of the timers are type 2.
    
    Cc: devicetree@vger.kernel.org
    Cc: Brian Hutchinson <b.hutchman@gmail.com>
    Cc: Graeme Smecher <gsmecher@threespeedlogic.com>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit e428e250fde683ad3a658f8476f0914714e7eb6f
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 09:59:31 2020 -0700

    ARM: dts: Configure system timers for omap3
    
    We can now init system timers using the dmtimer and 32k counter
    based on only devicetree data and drivers/clocksource timers.
    Let's configure the clocksource and clockevent, and drop the old
    unused platform data.
    
    As we're just dropping platform data, and the early platform data
    init is based on the custom ti,hwmods property, we want to drop
    both the platform data and ti,hwmods property in a single patch.
    
    Since the dmtimer can use both 32k clock and system clock as the
    source, let's also configure the SoC specific default values. The
    board specific dts files can reconfigure these with assigned-clocks
    and assigned-clock-parents as needed.
    
    Let's also update the dts file to use #include while at it.
    
    Cc: devicetree@vger.kernel.org
    Cc: Adam Ford <aford173@gmail.com>
    Cc: Andreas Kemnade <andreas@kemnade.info>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: "H. Nikolaus Schaller" <hns@goldelico.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 036a3d42bb8f28ae3cdd7c9570135c243724fbd6
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 09:59:31 2020 -0700

    ARM: dts: Configure system timers for omap5 and dra7
    
    We can now init system timers using the dmtimer and 32k counter
    based on only devicetree data and drivers/clocksource timers.
    Let's configure the clocksource and clockevent, and drop the old
    unused platform data.
    
    As we're just dropping platform data, and the early platform data
    init is based on the custom ti,hwmods property, we want to drop
    both the platform data and ti,hwmods property in a single patch.
    
    Since the dmtimer can use both 32k clock and system clock as the
    source, let's also configure the SoC specific default values. The
    board specific dts files can reconfigure these with assigned-clocks
    and assigned-clock-parents as needed.
    
    Note that similar to omap_init_time_of(), we now need to call
    omap_clk_init() also from omap5_realtime_timer_init().
    
    Cc: devicetree@vger.kernel.org
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 14b1925a721992d781f5e9d28db26b85174e3927
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 09:59:31 2020 -0700

    ARM: dts: Configure system timers for omap4
    
    We can now init system timers using the dmtimer and 32k counter
    based on only devicetree data and drivers/clocksource timers.
    Let's configure the clocksource and clockevent, and drop the old
    unused platform data.
    
    As we're just dropping platform data, and the early platform data
    init is based on the custom ti,hwmods property, we want to drop
    both the platform data and ti,hwmods property in a single patch.
    
    Since the dmtimer can use both 32k clock and system clock as the
    source, let's also configure the SoC specific default values. The
    board specific dts files can reconfigure these with assigned-clocks
    and assigned-clock-parents as needed.
    
    Cc: devicetree@vger.kernel.org
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 545a95582e80a2c66527dbf7f0ae495902fc083a
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 09:59:31 2020 -0700

    ARM: dts: Configure system timers for am437x
    
    We can now init system timers using the dmtimer and 32k counter
    based on only devicetree data and drivers/clocksource timers.
    Let's configure the clocksource and clockevent, and drop the old
    unused platform data.
    
    As we're just dropping platform data, and the early platform data
    init is based on the custom ti,hwmods property, we want to drop
    both the platform data and ti,hwmods property in a single patch.
    
    Since the dmtimer can use both 32k clock and system clock as the
    source, let's also configure the SoC specific default values. The
    board specific dts files can reconfigure these with assigned-clocks
    and assigned-clock-parents as needed.
    
    Cc: devicetree@vger.kernel.org
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit e20ef23dd6937c38df2cfddf15270668153c8177
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 09:59:31 2020 -0700

    ARM: dts: Configure system timers for am335x
    
    We can now init system timers using the dmtimer and 32k counter
    based on only devicetree data and drivers/clocksource timers.
    Let's configure the clocksource and clockevent, and drop the old
    unused platform data.
    
    As we're just dropping platform data, and the early platform data
    init is based on the custom ti,hwmods property, we want to drop
    both the platform data and ti,hwmods property in a single patch.
    
    Since the dmtimer can use both 32k clock and system clock as the
    source, let's also configure the SoC specific default values. The
    board specific dts files can reconfigure these with assigned-clocks
    and assigned-clock-parents as needed.
    
    Cc: devicetree@vger.kernel.org
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 6d15120b282e49811a47f2f6d6b749d178be7e99
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue May 19 08:51:57 2020 -0700

    clocksource/drivers/timer-ti-dm: Fix warning for set but not used
    
    We can get a warning for dmtimer_clocksource_init() with 'pa' set but
    not used. This was used in the earlier revisions of the code but no
    longer needed, so let's remove the unused pa and of_translate_address().
    Let's also do it for dmtimer_clockevent_init() that has a similar issue.
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200519155157.12804-1-tony@atomide.com

commit aba1ad05da088944a62eb87fb0cd8391152e8985
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 10:23:18 2020 -0700

    clocksource/drivers/timer-ti-dm: Add clockevent and clocksource support
    
    We can move the TI dmtimer clockevent and clocksource to live under
    drivers/clocksource if we rely only on the clock framework, and handle
    the module configuration directly in the clocksource driver based on the
    device tree data.
    
    This removes the early dependency with system timers to the interconnect
    related code, and we can probe pretty much everything else later on at
    the module_init level.
    
    Let's first add a new driver for timer-ti-dm-systimer based on existing
    arch/arm/mach-omap2/timer.c. Then let's start moving SoCs to probe with
    device tree data while still keeping the old timer.c. And eventually we
    can just drop the old timer.c.
    
    Let's take the opportunity to switch to use readl/writel as pointed out
    by Daniel Lezcano <daniel.lezcano@linaro.org>. This allows further
    clean-up of the timer-ti-dm code the a lot of the shared helpers can
    just become static to the non-syster related code.
    
    Note the boards can optionally configure different timer source clocks
    if needed with assigned-clocks and assigned-clock-parents.
    
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-omap@vger.kernel.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200507172330.18679-3-tony@atomide.com

commit d15483bb49bae0f9cbb67c54becec252545752d3
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 7 10:23:17 2020 -0700

    clocksource/drivers/timer-ti-32k: Add support for initializing directly
    
    Let's allow probing the 32k counter directly based on devicetree data to
    prepare for dropping the related legacy platform code. Let's only do this
    if the parent node is compatible with ti-sysc to make sure we have the
    related devicetree data available.
    
    Let's also show the 32k counter information before registering the
    clocksource, now we see it after the clocksource information which is a
    bit confusing.
    
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-omap@vger.kernel.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Grygorii Strashko <grygorii.strashko@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200507172330.18679-2-tony@atomide.com

commit a229635f3bc981ea9e19810ae09b171952fa676b
Author: Rob Herring <robh@kernel.org>
Date:   Wed Apr 29 15:58:17 2020 -0500

    mfd: vexpress-sysreg: Drop selecting CONFIG_CLKSRC_MMIO
    
    Nothing in the VExpress sysregs nor the MFD child drivers use
    CONFIG_CLKSRC_MMIO. There's the 24MHz counter, but that's handled by
    drivers/clocksource/timer-versatile.c which doesn't use
    CONFIG_CLKSRC_MMIO either. So let's just drop CONFIG_CLKSRC_MMIO.
    
    As the !ARCH_USES_GETTIMEOFFSET dependency was added for
    CONFIG_CLKSRC_MMIO, that can be dropped, too.
    
    Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Liviu Dudau <liviu.dudau@arm.com>
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

commit c54030b191142ac40250091cb890bcd78497a35b
Author: Samuel Holland <samuel@sholland.org>
Date:   Sun Apr 26 11:20:32 2020 -0500

    dt-bindings: timer: Document allwinner,erratum-unknown1 property
    
    This arch_timer property was added in commit c950ca8c35ee
    ("clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability")
    but I omitted the device tree binding documentation. Now
    `make dtbs_check` prints the following warning for all A64 boards:
    
    timer: 'allwinner,erratum-unknown1' does not match any of the regexes: 'pinctrl-[0-9]+'
    
    Resolve this by documenting the erratum property.
    
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

commit 5390130f3b288db7d67de5e6c29d0de70d327ff0
Author: Tero Kristo <t-kristo@ti.com>
Date:   Fri Apr 24 18:12:28 2020 +0300

    ARM: dts: dra7: add timer_sys_ck entries for IPU/DSP timers
    
    With this, the clocksource driver can setup the timers properly.
    
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 818c2b36383e3ef421b9b435a1215a50fc163f82
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Mon Apr 13 17:26:31 2020 +0200

    MIPS: ingenic: CI20: enable OST, PWM drivers in defconfig
    
    The OST driver provides a clocksource and sched_clock that are much more
    accurate than the default ones.
    
    The PWM driver allows to use the PWM pins on the external header of the
    board.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

commit fea89b265f78b639c4845be6b3778a2957eac4bc
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Apr 20 17:15:53 2020 +0200

    ARM: dts: shmobile: Update CMT1 compatible values
    
    New compatible values were introduced for the 48-bit CMT devices on
    SH-Mobile AG5 and R-Mobile A1, and the old "cmt-48"-based values were
    deprecated.  However, the actual DTS files were never updated.
    
    See also commits:
      - 81b604c39997de91 ("dt-bindings: timer: renesas, cmt: Update CMT1 on
        sh73a0 and r8a7740"),
      - 8c1afba285a86b9d ("clocksource/drivers/sh_cmt: r8a7740 and sh73a0
        SoC-specific match"),
      - 19d608458f4f3bb3 ("clocksource/drivers/sh_cmt: Document "cmt-48" as
        deprecated").
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20200420151553.22975-1-geert+renesas@glider.be

commit bfed0eded1ce00bda5cc2d2939b017f88e6b1fd0
Author: Rob Herring <robh@kernel.org>
Date:   Fri Apr 17 16:20:45 2020 -0500

    clocksource/drivers/versatile: Allow CONFIG_CLKSRC_VERSATILE to be disabled
    
    The timer-versatile driver provides a sched_clock for certain Arm Ltd.
    reference platforms. Specifically, it is used on Versatile and 32-bit
    VExpress. It is not needed for those platforms with an arch timer (all
    the 64-bit ones) yet CONFIG_MFD_VEXPRESS_SYSREG does still need to be
    enabled. In that case, the timer-versatile can only be disabled when
    COMPILE_TEST is enabled which is not desirable. Let's use the sub-arch
    kconfig symbols instead.
    
    Realview platforms don't have the sysregs that this driver uses so
    correct the help text.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200417212045.16917-1-robh@kernel.org

commit 25259f7a5de2de9d67793dc584b15c83a3134c93
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Sun Apr 26 22:43:56 2020 +1000

    clocksource/drivers/timer-microchip-pit64b: Select CONFIG_TIMER_OF
    
    This driver is an OF driver, it depends on OF, and uses
    TIMER_OF_DECLARE, so it should select CONFIG_TIMER_OF.
    
    Without CONFIG_TIMER_OF enabled this can lead to warnings such as:
    
      powerpc-linux-ld: warning: orphan section `__timer_of_table' from
      `drivers/clocksource/timer-microchip-pit64b.o' being placed in
      section `__timer_of_table'.
    
    Because TIMER_OF_TABLES in vmlinux.lds.h doesn't emit anything into
    the linker script when CONFIG_TIMER_OF is not enabled.
    
    Fixes: 625022a5f160 ("clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support")
    Cc: stable@vger.kernel.org # v5.6+
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200426124356.3929682-1-mpe@ellerman.id.au

commit 8807401c6fef447364959d58512a15834d841d1c
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Mar 19 10:11:32 2020 -0400

    btrfs: use nofs allocations for running delayed items
    
    [ Upstream commit 351cbf6e4410e7ece05e35d0a07320538f2418b4 ]
    
    Zygo reported the following lockdep splat while testing the balance
    patches
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.6.0-c6f0579d496a+ #53 Not tainted
    ------------------------------------------------------
    kswapd0/1133 is trying to acquire lock:
    ffff888092f622c0 (&delayed_node->mutex){+.+.}, at: __btrfs_release_delayed_node+0x7c/0x5b0
    
    but task is already holding lock:
    ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (fs_reclaim){+.+.}:
           fs_reclaim_acquire.part.91+0x29/0x30
           fs_reclaim_acquire+0x19/0x20
           kmem_cache_alloc_trace+0x32/0x740
           add_block_entry+0x45/0x260
           btrfs_ref_tree_mod+0x6e2/0x8b0
           btrfs_alloc_tree_block+0x789/0x880
           alloc_tree_block_no_bg_flush+0xc6/0xf0
           __btrfs_cow_block+0x270/0x940
           btrfs_cow_block+0x1ba/0x3a0
           btrfs_search_slot+0x999/0x1030
           btrfs_insert_empty_items+0x81/0xe0
           btrfs_insert_delayed_items+0x128/0x7d0
           __btrfs_run_delayed_items+0xf4/0x2a0
           btrfs_run_delayed_items+0x13/0x20
           btrfs_commit_transaction+0x5cc/0x1390
           insert_balance_item.isra.39+0x6b2/0x6e0
           btrfs_balance+0x72d/0x18d0
           btrfs_ioctl_balance+0x3de/0x4c0
           btrfs_ioctl+0x30ab/0x44a0
           ksys_ioctl+0xa1/0xe0
           __x64_sys_ioctl+0x43/0x50
           do_syscall_64+0x77/0x2c0
           entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    -> #0 (&delayed_node->mutex){+.+.}:
           __lock_acquire+0x197e/0x2550
           lock_acquire+0x103/0x220
           __mutex_lock+0x13d/0xce0
           mutex_lock_nested+0x1b/0x20
           __btrfs_release_delayed_node+0x7c/0x5b0
           btrfs_remove_delayed_node+0x49/0x50
           btrfs_evict_inode+0x6fc/0x900
           evict+0x19a/0x2c0
           dispose_list+0xa0/0xe0
           prune_icache_sb+0xbd/0xf0
           super_cache_scan+0x1b5/0x250
           do_shrink_slab+0x1f6/0x530
           shrink_slab+0x32e/0x410
           shrink_node+0x2a5/0xba0
           balance_pgdat+0x4bd/0x8a0
           kswapd+0x35a/0x800
           kthread+0x1e9/0x210
           ret_from_fork+0x3a/0x50
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(fs_reclaim);
                                   lock(&delayed_node->mutex);
                                   lock(fs_reclaim);
      lock(&delayed_node->mutex);
    
     *** DEADLOCK ***
    
    3 locks held by kswapd0/1133:
     #0: ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
     #1: ffffffff8fc380d8 (shrinker_rwsem){++++}, at: shrink_slab+0x1e8/0x410
     #2: ffff8881e0e6c0e8 (&type->s_umount_key#42){++++}, at: trylock_super+0x1b/0x70
    
    stack backtrace:
    CPU: 2 PID: 1133 Comm: kswapd0 Not tainted 5.6.0-c6f0579d496a+ #53
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
     dump_stack+0xc1/0x11a
     print_circular_bug.isra.38.cold.57+0x145/0x14a
     check_noncircular+0x2a9/0x2f0
     ? print_circular_bug.isra.38+0x130/0x130
     ? stack_trace_consume_entry+0x90/0x90
     ? save_trace+0x3cc/0x420
     __lock_acquire+0x197e/0x2550
     ? btrfs_inode_clear_file_extent_range+0x9b/0xb0
     ? register_lock_class+0x960/0x960
     lock_acquire+0x103/0x220
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     __mutex_lock+0x13d/0xce0
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? __asan_loadN+0xf/0x20
     ? pvclock_clocksource_read+0xeb/0x190
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? mutex_lock_io_nested+0xc20/0xc20
     ? __kasan_check_read+0x11/0x20
     ? check_chain_key+0x1e6/0x2e0
     mutex_lock_nested+0x1b/0x20
     ? mutex_lock_nested+0x1b/0x20
     __btrfs_release_delayed_node+0x7c/0x5b0
     btrfs_remove_delayed_node+0x49/0x50
     btrfs_evict_inode+0x6fc/0x900
     ? btrfs_setattr+0x840/0x840
     ? do_raw_spin_unlock+0xa8/0x140
     evict+0x19a/0x2c0
     dispose_list+0xa0/0xe0
     prune_icache_sb+0xbd/0xf0
     ? invalidate_inodes+0x310/0x310
     super_cache_scan+0x1b5/0x250
     do_shrink_slab+0x1f6/0x530
     shrink_slab+0x32e/0x410
     ? do_shrink_slab+0x530/0x530
     ? do_shrink_slab+0x530/0x530
     ? __kasan_check_read+0x11/0x20
     ? mem_cgroup_protected+0x13d/0x260
     shrink_node+0x2a5/0xba0
     balance_pgdat+0x4bd/0x8a0
     ? mem_cgroup_shrink_node+0x490/0x490
     ? _raw_spin_unlock_irq+0x27/0x40
     ? finish_task_switch+0xce/0x390
     ? rcu_read_lock_bh_held+0xb0/0xb0
     kswapd+0x35a/0x800
     ? _raw_spin_unlock_irqrestore+0x4c/0x60
     ? balance_pgdat+0x8a0/0x8a0
     ? finish_wait+0x110/0x110
     ? __kasan_check_read+0x11/0x20
     ? __kthread_parkme+0xc6/0xe0
     ? balance_pgdat+0x8a0/0x8a0
     kthread+0x1e9/0x210
     ? kthread_create_worker_on_cpu+0xc0/0xc0
     ret_from_fork+0x3a/0x50
    
    This is because we hold that delayed node's mutex while doing tree
    operations.  Fix this by just wrapping the searches in nofs.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92a8da46462ecf8141a5a0055be98370dcfdea2c
Merge: 4c532b144fc2 84ea9c0a95d7
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Apr 23 12:50:21 2020 -0700

    Merge branch 'net-ethernet-ti-cpts-add-irq-and-HW_TS_PUSH-events'
    
    Grygorii Strashko says:
    
    ====================
    net: ethernet: ti: cpts: add irq and HW_TS_PUSH events
    
    This is re-spin of patches to add CPSW IRQ and HW_TS_PUSH events support I've
    sent long time ago [1]. In this series, I've tried to restructure and split changes,
    and also add few additional optimizations comparing to initial RFC submission [1].
    
    The HW_TS_PUSH events intended to serve for different timesync purposes on of
    which is to add PPS generation function, which can be implemented as below:
    
                         +-----------------+
                         | Control         |
                         | application     |
                +------->+                 +----------+
                |        |                 |          |
                |        |                 |          |
                |        +-----------------+          |
                |                                     |
                |                                     |
                | PTP_EXTTS_REQUEST                   |
                |                                     |
                |                                     |
     +----------------------------------------------------------------+
                |                                     |    Kernel
        +-------+----------+                  +-------v--------+
        |  \dev\ptpX       |                  | /sys/class/pwm/|
        |                  |                  |                |
        +-------^----------+                  +-------+--------+
                |                                     |
                |                                     |
                |                             +-------v-------------------+
        +-------+----------+                  |                           |
        | CPTS driver      |                  |pwm/pwm-omap-dmtimer.c     |
        |                  |                  +---------------------------+
        +-------^----------+                  |clocksource/timer_ti_dm.c  |
                |                             +-------+-------------------+
                |HWx_TS_PUSH evt                      |
     +----------------------------------------------------------------+
                |                                     |         HW
        +-------+----------+                  +-------v--------+
        | CPTS             |                  | DMTimer        |
        |                  |                  |                |
        |      HWx_TS_PUSH X<-----------------+                |
        |                  +                  |                |
        +------------------+                  +-------+--------+
                                                      |
                                                      X timer4
    
    As per my knowledge there is at least one public implemented above PPS generation
    schema from Tusori Tibor [2] based on initial HW_TS_PUSH enable submission[1].
    And now there is work done by Lokesh Vutla <lokeshvutla@ti.com> published to
    enable PWM enable/improve PWM adjustment from user space [3][4][5].
    
    Main changes comparing to initial submission:
    - TX timestamp processing deferred to ptp worker only
    - both CPTS IRQ and polling events processing supported to make it work for
      Keystone 2 also
    - switch to use new .gettimex64() interface
    - no DT updates as number of HWx_TS_PUSH inputs is static per HW
    
    Testing on am571x-idk/omap2plus_defconfig/+CONFIG_PREEMPT=y:
    1) testing HW_TS_PUSH
     - enable pwm in DT
            pwm16: dmtimer-pwm {
                    compatible = "ti,omap-dmtimer-pwm";
                    ti,timers = <&timer16>;
                    #pwm-cells = <3>;
            };
     - configure and start pwm
      echo 0 > /sys/class/pwm/pwmchip0/export
      echo 1000000000 > /sys/class/pwm/pwmchip0/pwm0/period
      echo 500000000 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle
      echo 1 > /sys/class/pwm/pwmchip0/pwm0/enable
     - test HWx_TS_PUSH using Kernel selftest testptp application
      ./tools/testing/selftests/ptp/testptp -d /dev/ptp0 -e 1000 -i 3
    
    2) testing phc2sys
    phc2sys[1616.791]: eth0 rms 408190379792180864 max 1580914543017209856 freq +864 +/- 4635 delay 645 +/- 29
    phc2sys[1646.795]: eth0 rms 41 max 108 freq +0 +/- 36 delay 656 +/- 29
    phc2sys[1676.800]: eth0 rms 43 max 83 freq +2 +/- 38 delay 650 +/- 0
    phc2sys[1706.804]: eth0 rms 39 max 87 freq +4 +/- 34 delay 672 +/- 55
    phc2sys[1736.808]: eth0 rms 35 max 66 freq +1 +/- 30 delay 667 +/- 49
    phc2sys[1766.813]: eth0 rms 38 max 79 freq +2 +/- 33 delay 656 +/- 29
    phc2sys[1796.817]: eth0 rms 45 max 98 freq +1 +/- 39 delay 656 +/- 29
    phc2sys[1826.821]: eth0 rms 40 max 87 freq +5 +/- 35 delay 650 +/- 0
    phc2sys[1856.826]: eth0 rms 29 max 76 freq -0 +/- 25 delay 656 +/- 29
    phc2sys[1886.830]: eth0 rms 40 max 97 freq +4 +/- 35 delay 667 +/- 49
    phc2sys[1916.834]: eth0 rms 42 max 94 freq +2 +/- 36 delay 661 +/- 41
    phc2sys[1946.839]: eth0 rms 40 max 91 freq +2 +/- 35 delay 661 +/- 41
    phc2sys[1976.843]: eth0 rms 46 max 88 freq -0 +/- 40 delay 667 +/- 49
    phc2sys[2006.847]: eth0 rms 49 max 97 freq +2 +/- 43 delay 650 +/- 0
    
    3) testing ptp4l
    - 1G connection
    ptp4l[862.891]: port 1: UNCALIBRATED to SLAVE on MASTER_CLOCK_SELECTED
    ptp4l[923.894]: rms 1019697354682 max 5768279314068 freq +26053 +/- 72 delay 488 +/- 1
    ptp4l[987.896]: rms 13 max 26 freq +26005 +/- 29 delay 488 +/- 1
    ptp4l[1051.899]: rms 14 max 50 freq +25895 +/- 21 delay 488 +/- 1
    ptp4l[1115.901]: rms 11 max 27 freq +25878 +/- 17 delay 488 +/- 1
    ptp4l[1179.904]: rms 10 max 27 freq +25857 +/- 12 delay 488 +/- 1
    ptp4l[1243.906]: rms 14 max 37 freq +25851 +/- 15 delay 488 +/- 1
    ptp4l[1307.909]: rms 12 max 33 freq +25835 +/- 15 delay 488 +/- 1
    ptp4l[1371.911]: rms 11 max 27 freq +25832 +/- 14 delay 488 +/- 1
    ptp4l[1435.914]: rms 11 max 26 freq +25823 +/- 11 delay 488 +/- 1
    ptp4l[1499.916]: rms 10 max 29 freq +25829 +/- 11 delay 489 +/- 1
    ptp4l[1563.919]: rms 11 max 27 freq +25827 +/- 12 delay 488 +/- 1
    
    - 10M connection
    ptp4l[51.955]: port 1: UNCALIBRATED to SLAVE on MASTER_CLOCK_SELECTED
    ptp4l[112.957]: rms 279468848453933920 max 1580914542977391360 freq +25390 +/- 3207 delay 8222 +/- 36
    ptp4l[176.960]: rms 254 max 522 freq +25809 +/- 219 delay 8271 +/- 30
    ptp4l[240.962]: rms 271 max 684 freq +25868 +/- 234 delay 8249 +/- 22
    ptp4l[304.965]: rms 263 max 556 freq +25894 +/- 227 delay 8225 +/- 47
    ptp4l[368.967]: rms 238 max 648 freq +25908 +/- 204 delay 8234 +/- 40
    ptp4l[432.970]: rms 274 max 658 freq +25932 +/- 237 delay 8241 +/- 22
    ptp4l[496.972]: rms 247 max 557 freq +25943 +/- 213 delay 8223 +/- 26
    ptp4l[560.974]: rms 291 max 756 freq +25968 +/- 251 delay 8244 +/- 41
    ptp4l[624.977]: rms 249 max 697 freq +25975 +/- 216 delay 8258 +/- 22
    
    Changes in v5:
     - fixed build issue
    
    Changes in v4:
     - fixed comments from Richard Cochran
     - dropped patch "net: ethernet: ti: cpts: move rx timestamp processing to ptp
       worker only"
     - added "Acked-by" from Richard Cochran <richardcochran@gmail.com>
     - dependencies resolved, patch merged
    
    Changes in v3:
     - fixed rebase mess
     - fixed build issues
    
    Changes in v2 (broken):
     - fixed (formatting) comments from David Miller <davem@davemloft.net>
    
    v4: https://patchwork.ozlabs.org/project/netdev/cover/20200422201254.15232-1-grygorii.strashko@ti.com/
    v3: https://patchwork.ozlabs.org/project/netdev/cover/20200320194244.4703-1-grygorii.strashko@ti.com/
    v2: https://patchwork.ozlabs.org/cover/1258339/
    v1: https://patchwork.ozlabs.org/cover/1254708/
    
    [1] https://lore.kernel.org/patchwork/cover/799251/
    [2] https://usermanual.wiki/Document/SetupGuide.632280828.pdf
        https://github.com/t-tibor/msc_thesis
    [3] https://patchwork.kernel.org/cover/11421329/
    [4] https://patchwork.kernel.org/cover/11433197/
    [5] https://sourceforge.net/p/linuxptp/mailman/message/36943248/
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 98cbca530925210586ff918b4cd3fc3d9f0365dc
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Mar 19 10:11:32 2020 -0400

    btrfs: use nofs allocations for running delayed items
    
    commit 351cbf6e4410e7ece05e35d0a07320538f2418b4 upstream.
    
    Zygo reported the following lockdep splat while testing the balance
    patches
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.6.0-c6f0579d496a+ #53 Not tainted
    ------------------------------------------------------
    kswapd0/1133 is trying to acquire lock:
    ffff888092f622c0 (&delayed_node->mutex){+.+.}, at: __btrfs_release_delayed_node+0x7c/0x5b0
    
    but task is already holding lock:
    ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (fs_reclaim){+.+.}:
           fs_reclaim_acquire.part.91+0x29/0x30
           fs_reclaim_acquire+0x19/0x20
           kmem_cache_alloc_trace+0x32/0x740
           add_block_entry+0x45/0x260
           btrfs_ref_tree_mod+0x6e2/0x8b0
           btrfs_alloc_tree_block+0x789/0x880
           alloc_tree_block_no_bg_flush+0xc6/0xf0
           __btrfs_cow_block+0x270/0x940
           btrfs_cow_block+0x1ba/0x3a0
           btrfs_search_slot+0x999/0x1030
           btrfs_insert_empty_items+0x81/0xe0
           btrfs_insert_delayed_items+0x128/0x7d0
           __btrfs_run_delayed_items+0xf4/0x2a0
           btrfs_run_delayed_items+0x13/0x20
           btrfs_commit_transaction+0x5cc/0x1390
           insert_balance_item.isra.39+0x6b2/0x6e0
           btrfs_balance+0x72d/0x18d0
           btrfs_ioctl_balance+0x3de/0x4c0
           btrfs_ioctl+0x30ab/0x44a0
           ksys_ioctl+0xa1/0xe0
           __x64_sys_ioctl+0x43/0x50
           do_syscall_64+0x77/0x2c0
           entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    -> #0 (&delayed_node->mutex){+.+.}:
           __lock_acquire+0x197e/0x2550
           lock_acquire+0x103/0x220
           __mutex_lock+0x13d/0xce0
           mutex_lock_nested+0x1b/0x20
           __btrfs_release_delayed_node+0x7c/0x5b0
           btrfs_remove_delayed_node+0x49/0x50
           btrfs_evict_inode+0x6fc/0x900
           evict+0x19a/0x2c0
           dispose_list+0xa0/0xe0
           prune_icache_sb+0xbd/0xf0
           super_cache_scan+0x1b5/0x250
           do_shrink_slab+0x1f6/0x530
           shrink_slab+0x32e/0x410
           shrink_node+0x2a5/0xba0
           balance_pgdat+0x4bd/0x8a0
           kswapd+0x35a/0x800
           kthread+0x1e9/0x210
           ret_from_fork+0x3a/0x50
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(fs_reclaim);
                                   lock(&delayed_node->mutex);
                                   lock(fs_reclaim);
      lock(&delayed_node->mutex);
    
     *** DEADLOCK ***
    
    3 locks held by kswapd0/1133:
     #0: ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
     #1: ffffffff8fc380d8 (shrinker_rwsem){++++}, at: shrink_slab+0x1e8/0x410
     #2: ffff8881e0e6c0e8 (&type->s_umount_key#42){++++}, at: trylock_super+0x1b/0x70
    
    stack backtrace:
    CPU: 2 PID: 1133 Comm: kswapd0 Not tainted 5.6.0-c6f0579d496a+ #53
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
     dump_stack+0xc1/0x11a
     print_circular_bug.isra.38.cold.57+0x145/0x14a
     check_noncircular+0x2a9/0x2f0
     ? print_circular_bug.isra.38+0x130/0x130
     ? stack_trace_consume_entry+0x90/0x90
     ? save_trace+0x3cc/0x420
     __lock_acquire+0x197e/0x2550
     ? btrfs_inode_clear_file_extent_range+0x9b/0xb0
     ? register_lock_class+0x960/0x960
     lock_acquire+0x103/0x220
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     __mutex_lock+0x13d/0xce0
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? __asan_loadN+0xf/0x20
     ? pvclock_clocksource_read+0xeb/0x190
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? mutex_lock_io_nested+0xc20/0xc20
     ? __kasan_check_read+0x11/0x20
     ? check_chain_key+0x1e6/0x2e0
     mutex_lock_nested+0x1b/0x20
     ? mutex_lock_nested+0x1b/0x20
     __btrfs_release_delayed_node+0x7c/0x5b0
     btrfs_remove_delayed_node+0x49/0x50
     btrfs_evict_inode+0x6fc/0x900
     ? btrfs_setattr+0x840/0x840
     ? do_raw_spin_unlock+0xa8/0x140
     evict+0x19a/0x2c0
     dispose_list+0xa0/0xe0
     prune_icache_sb+0xbd/0xf0
     ? invalidate_inodes+0x310/0x310
     super_cache_scan+0x1b5/0x250
     do_shrink_slab+0x1f6/0x530
     shrink_slab+0x32e/0x410
     ? do_shrink_slab+0x530/0x530
     ? do_shrink_slab+0x530/0x530
     ? __kasan_check_read+0x11/0x20
     ? mem_cgroup_protected+0x13d/0x260
     shrink_node+0x2a5/0xba0
     balance_pgdat+0x4bd/0x8a0
     ? mem_cgroup_shrink_node+0x490/0x490
     ? _raw_spin_unlock_irq+0x27/0x40
     ? finish_task_switch+0xce/0x390
     ? rcu_read_lock_bh_held+0xb0/0xb0
     kswapd+0x35a/0x800
     ? _raw_spin_unlock_irqrestore+0x4c/0x60
     ? balance_pgdat+0x8a0/0x8a0
     ? finish_wait+0x110/0x110
     ? __kasan_check_read+0x11/0x20
     ? __kthread_parkme+0xc6/0xe0
     ? balance_pgdat+0x8a0/0x8a0
     kthread+0x1e9/0x210
     ? kthread_create_worker_on_cpu+0xc0/0xc0
     ret_from_fork+0x3a/0x50
    
    This is because we hold that delayed node's mutex while doing tree
    operations.  Fix this by just wrapping the searches in nofs.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02d989a0645639797e6e000b61336442c94cb879
Author: Ahmed S. Darwish <a.darwish@linutronix.de>
Date:   Mon Mar 9 18:15:29 2020 +0000

    time/sched_clock: Expire timer in hardirq context
    
    [ Upstream commit 2c8bd58812ee3dbf0d78b566822f7eacd34bdd7b ]
    
    To minimize latency, PREEMPT_RT kernels expires hrtimers in preemptible
    softirq context by default. This can be overriden by marking the timer's
    expiry with HRTIMER_MODE_HARD.
    
    sched_clock_timer is missing this annotation: if its callback is preempted
    and the duration of the preemption exceeds the wrap around time of the
    underlying clocksource, sched clock will get out of sync.
    
    Mark the sched_clock_timer for expiry in hard interrupt context.
    
    Signed-off-by: Ahmed S. Darwish <a.darwish@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200309181529.26558-1-a.darwish@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf0d357c52ec8881ec8fb2548aa3b8c2f44e1cb6
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Mon Mar 16 11:52:56 2020 +0200

    clocksource/drivers/timer-microchip-pit64b: Fix rate for gck
    
    [ Upstream commit 0585244523f0f4de7e4480375e871617a79cab98 ]
    
    Generic clock rate needs to be set in case it was selected as timer clock
    source in mchp_pit64b_init_mode(). Otherwise it will be enabled with wrong
    rate.
    
    Fixes: 625022a5f160 ("clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1584352376-32585-1-git-send-email-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06365163596879f4134920617a1fea3479442f4a
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Mar 19 10:11:32 2020 -0400

    btrfs: use nofs allocations for running delayed items
    
    commit 351cbf6e4410e7ece05e35d0a07320538f2418b4 upstream.
    
    Zygo reported the following lockdep splat while testing the balance
    patches
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.6.0-c6f0579d496a+ #53 Not tainted
    ------------------------------------------------------
    kswapd0/1133 is trying to acquire lock:
    ffff888092f622c0 (&delayed_node->mutex){+.+.}, at: __btrfs_release_delayed_node+0x7c/0x5b0
    
    but task is already holding lock:
    ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (fs_reclaim){+.+.}:
           fs_reclaim_acquire.part.91+0x29/0x30
           fs_reclaim_acquire+0x19/0x20
           kmem_cache_alloc_trace+0x32/0x740
           add_block_entry+0x45/0x260
           btrfs_ref_tree_mod+0x6e2/0x8b0
           btrfs_alloc_tree_block+0x789/0x880
           alloc_tree_block_no_bg_flush+0xc6/0xf0
           __btrfs_cow_block+0x270/0x940
           btrfs_cow_block+0x1ba/0x3a0
           btrfs_search_slot+0x999/0x1030
           btrfs_insert_empty_items+0x81/0xe0
           btrfs_insert_delayed_items+0x128/0x7d0
           __btrfs_run_delayed_items+0xf4/0x2a0
           btrfs_run_delayed_items+0x13/0x20
           btrfs_commit_transaction+0x5cc/0x1390
           insert_balance_item.isra.39+0x6b2/0x6e0
           btrfs_balance+0x72d/0x18d0
           btrfs_ioctl_balance+0x3de/0x4c0
           btrfs_ioctl+0x30ab/0x44a0
           ksys_ioctl+0xa1/0xe0
           __x64_sys_ioctl+0x43/0x50
           do_syscall_64+0x77/0x2c0
           entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    -> #0 (&delayed_node->mutex){+.+.}:
           __lock_acquire+0x197e/0x2550
           lock_acquire+0x103/0x220
           __mutex_lock+0x13d/0xce0
           mutex_lock_nested+0x1b/0x20
           __btrfs_release_delayed_node+0x7c/0x5b0
           btrfs_remove_delayed_node+0x49/0x50
           btrfs_evict_inode+0x6fc/0x900
           evict+0x19a/0x2c0
           dispose_list+0xa0/0xe0
           prune_icache_sb+0xbd/0xf0
           super_cache_scan+0x1b5/0x250
           do_shrink_slab+0x1f6/0x530
           shrink_slab+0x32e/0x410
           shrink_node+0x2a5/0xba0
           balance_pgdat+0x4bd/0x8a0
           kswapd+0x35a/0x800
           kthread+0x1e9/0x210
           ret_from_fork+0x3a/0x50
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(fs_reclaim);
                                   lock(&delayed_node->mutex);
                                   lock(fs_reclaim);
      lock(&delayed_node->mutex);
    
     *** DEADLOCK ***
    
    3 locks held by kswapd0/1133:
     #0: ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
     #1: ffffffff8fc380d8 (shrinker_rwsem){++++}, at: shrink_slab+0x1e8/0x410
     #2: ffff8881e0e6c0e8 (&type->s_umount_key#42){++++}, at: trylock_super+0x1b/0x70
    
    stack backtrace:
    CPU: 2 PID: 1133 Comm: kswapd0 Not tainted 5.6.0-c6f0579d496a+ #53
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
     dump_stack+0xc1/0x11a
     print_circular_bug.isra.38.cold.57+0x145/0x14a
     check_noncircular+0x2a9/0x2f0
     ? print_circular_bug.isra.38+0x130/0x130
     ? stack_trace_consume_entry+0x90/0x90
     ? save_trace+0x3cc/0x420
     __lock_acquire+0x197e/0x2550
     ? btrfs_inode_clear_file_extent_range+0x9b/0xb0
     ? register_lock_class+0x960/0x960
     lock_acquire+0x103/0x220
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     __mutex_lock+0x13d/0xce0
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? __asan_loadN+0xf/0x20
     ? pvclock_clocksource_read+0xeb/0x190
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? mutex_lock_io_nested+0xc20/0xc20
     ? __kasan_check_read+0x11/0x20
     ? check_chain_key+0x1e6/0x2e0
     mutex_lock_nested+0x1b/0x20
     ? mutex_lock_nested+0x1b/0x20
     __btrfs_release_delayed_node+0x7c/0x5b0
     btrfs_remove_delayed_node+0x49/0x50
     btrfs_evict_inode+0x6fc/0x900
     ? btrfs_setattr+0x840/0x840
     ? do_raw_spin_unlock+0xa8/0x140
     evict+0x19a/0x2c0
     dispose_list+0xa0/0xe0
     prune_icache_sb+0xbd/0xf0
     ? invalidate_inodes+0x310/0x310
     super_cache_scan+0x1b5/0x250
     do_shrink_slab+0x1f6/0x530
     shrink_slab+0x32e/0x410
     ? do_shrink_slab+0x530/0x530
     ? do_shrink_slab+0x530/0x530
     ? __kasan_check_read+0x11/0x20
     ? mem_cgroup_protected+0x13d/0x260
     shrink_node+0x2a5/0xba0
     balance_pgdat+0x4bd/0x8a0
     ? mem_cgroup_shrink_node+0x490/0x490
     ? _raw_spin_unlock_irq+0x27/0x40
     ? finish_task_switch+0xce/0x390
     ? rcu_read_lock_bh_held+0xb0/0xb0
     kswapd+0x35a/0x800
     ? _raw_spin_unlock_irqrestore+0x4c/0x60
     ? balance_pgdat+0x8a0/0x8a0
     ? finish_wait+0x110/0x110
     ? __kasan_check_read+0x11/0x20
     ? __kthread_parkme+0xc6/0xe0
     ? balance_pgdat+0x8a0/0x8a0
     kthread+0x1e9/0x210
     ? kthread_create_worker_on_cpu+0xc0/0xc0
     ret_from_fork+0x3a/0x50
    
    This is because we hold that delayed node's mutex while doing tree
    operations.  Fix this by just wrapping the searches in nofs.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4200816766ce1f1833b73d867622f79d5edd8232
Author: Ahmed S. Darwish <a.darwish@linutronix.de>
Date:   Mon Mar 9 18:15:29 2020 +0000

    time/sched_clock: Expire timer in hardirq context
    
    [ Upstream commit 2c8bd58812ee3dbf0d78b566822f7eacd34bdd7b ]
    
    To minimize latency, PREEMPT_RT kernels expires hrtimers in preemptible
    softirq context by default. This can be overriden by marking the timer's
    expiry with HRTIMER_MODE_HARD.
    
    sched_clock_timer is missing this annotation: if its callback is preempted
    and the duration of the preemption exceeds the wrap around time of the
    underlying clocksource, sched clock will get out of sync.
    
    Mark the sched_clock_timer for expiry in hard interrupt context.
    
    Signed-off-by: Ahmed S. Darwish <a.darwish@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200309181529.26558-1-a.darwish@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87a9058d5552a99060a3ff343f35bb882f820488
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Mar 19 10:11:32 2020 -0400

    btrfs: use nofs allocations for running delayed items
    
    commit 351cbf6e4410e7ece05e35d0a07320538f2418b4 upstream.
    
    Zygo reported the following lockdep splat while testing the balance
    patches
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.6.0-c6f0579d496a+ #53 Not tainted
    ------------------------------------------------------
    kswapd0/1133 is trying to acquire lock:
    ffff888092f622c0 (&delayed_node->mutex){+.+.}, at: __btrfs_release_delayed_node+0x7c/0x5b0
    
    but task is already holding lock:
    ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (fs_reclaim){+.+.}:
           fs_reclaim_acquire.part.91+0x29/0x30
           fs_reclaim_acquire+0x19/0x20
           kmem_cache_alloc_trace+0x32/0x740
           add_block_entry+0x45/0x260
           btrfs_ref_tree_mod+0x6e2/0x8b0
           btrfs_alloc_tree_block+0x789/0x880
           alloc_tree_block_no_bg_flush+0xc6/0xf0
           __btrfs_cow_block+0x270/0x940
           btrfs_cow_block+0x1ba/0x3a0
           btrfs_search_slot+0x999/0x1030
           btrfs_insert_empty_items+0x81/0xe0
           btrfs_insert_delayed_items+0x128/0x7d0
           __btrfs_run_delayed_items+0xf4/0x2a0
           btrfs_run_delayed_items+0x13/0x20
           btrfs_commit_transaction+0x5cc/0x1390
           insert_balance_item.isra.39+0x6b2/0x6e0
           btrfs_balance+0x72d/0x18d0
           btrfs_ioctl_balance+0x3de/0x4c0
           btrfs_ioctl+0x30ab/0x44a0
           ksys_ioctl+0xa1/0xe0
           __x64_sys_ioctl+0x43/0x50
           do_syscall_64+0x77/0x2c0
           entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    -> #0 (&delayed_node->mutex){+.+.}:
           __lock_acquire+0x197e/0x2550
           lock_acquire+0x103/0x220
           __mutex_lock+0x13d/0xce0
           mutex_lock_nested+0x1b/0x20
           __btrfs_release_delayed_node+0x7c/0x5b0
           btrfs_remove_delayed_node+0x49/0x50
           btrfs_evict_inode+0x6fc/0x900
           evict+0x19a/0x2c0
           dispose_list+0xa0/0xe0
           prune_icache_sb+0xbd/0xf0
           super_cache_scan+0x1b5/0x250
           do_shrink_slab+0x1f6/0x530
           shrink_slab+0x32e/0x410
           shrink_node+0x2a5/0xba0
           balance_pgdat+0x4bd/0x8a0
           kswapd+0x35a/0x800
           kthread+0x1e9/0x210
           ret_from_fork+0x3a/0x50
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(fs_reclaim);
                                   lock(&delayed_node->mutex);
                                   lock(fs_reclaim);
      lock(&delayed_node->mutex);
    
     *** DEADLOCK ***
    
    3 locks held by kswapd0/1133:
     #0: ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
     #1: ffffffff8fc380d8 (shrinker_rwsem){++++}, at: shrink_slab+0x1e8/0x410
     #2: ffff8881e0e6c0e8 (&type->s_umount_key#42){++++}, at: trylock_super+0x1b/0x70
    
    stack backtrace:
    CPU: 2 PID: 1133 Comm: kswapd0 Not tainted 5.6.0-c6f0579d496a+ #53
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
     dump_stack+0xc1/0x11a
     print_circular_bug.isra.38.cold.57+0x145/0x14a
     check_noncircular+0x2a9/0x2f0
     ? print_circular_bug.isra.38+0x130/0x130
     ? stack_trace_consume_entry+0x90/0x90
     ? save_trace+0x3cc/0x420
     __lock_acquire+0x197e/0x2550
     ? btrfs_inode_clear_file_extent_range+0x9b/0xb0
     ? register_lock_class+0x960/0x960
     lock_acquire+0x103/0x220
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     __mutex_lock+0x13d/0xce0
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? __asan_loadN+0xf/0x20
     ? pvclock_clocksource_read+0xeb/0x190
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? mutex_lock_io_nested+0xc20/0xc20
     ? __kasan_check_read+0x11/0x20
     ? check_chain_key+0x1e6/0x2e0
     mutex_lock_nested+0x1b/0x20
     ? mutex_lock_nested+0x1b/0x20
     __btrfs_release_delayed_node+0x7c/0x5b0
     btrfs_remove_delayed_node+0x49/0x50
     btrfs_evict_inode+0x6fc/0x900
     ? btrfs_setattr+0x840/0x840
     ? do_raw_spin_unlock+0xa8/0x140
     evict+0x19a/0x2c0
     dispose_list+0xa0/0xe0
     prune_icache_sb+0xbd/0xf0
     ? invalidate_inodes+0x310/0x310
     super_cache_scan+0x1b5/0x250
     do_shrink_slab+0x1f6/0x530
     shrink_slab+0x32e/0x410
     ? do_shrink_slab+0x530/0x530
     ? do_shrink_slab+0x530/0x530
     ? __kasan_check_read+0x11/0x20
     ? mem_cgroup_protected+0x13d/0x260
     shrink_node+0x2a5/0xba0
     balance_pgdat+0x4bd/0x8a0
     ? mem_cgroup_shrink_node+0x490/0x490
     ? _raw_spin_unlock_irq+0x27/0x40
     ? finish_task_switch+0xce/0x390
     ? rcu_read_lock_bh_held+0xb0/0xb0
     kswapd+0x35a/0x800
     ? _raw_spin_unlock_irqrestore+0x4c/0x60
     ? balance_pgdat+0x8a0/0x8a0
     ? finish_wait+0x110/0x110
     ? __kasan_check_read+0x11/0x20
     ? __kthread_parkme+0xc6/0xe0
     ? balance_pgdat+0x8a0/0x8a0
     kthread+0x1e9/0x210
     ? kthread_create_worker_on_cpu+0xc0/0xc0
     ret_from_fork+0x3a/0x50
    
    This is because we hold that delayed node's mutex while doing tree
    operations.  Fix this by just wrapping the searches in nofs.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2902207377f8b725d34be7d0a85c446b339792c7
Author: Ahmed S. Darwish <a.darwish@linutronix.de>
Date:   Mon Mar 9 18:15:29 2020 +0000

    time/sched_clock: Expire timer in hardirq context
    
    [ Upstream commit 2c8bd58812ee3dbf0d78b566822f7eacd34bdd7b ]
    
    To minimize latency, PREEMPT_RT kernels expires hrtimers in preemptible
    softirq context by default. This can be overriden by marking the timer's
    expiry with HRTIMER_MODE_HARD.
    
    sched_clock_timer is missing this annotation: if its callback is preempted
    and the duration of the preemption exceeds the wrap around time of the
    underlying clocksource, sched clock will get out of sync.
    
    Mark the sched_clock_timer for expiry in hard interrupt context.
    
    Signed-off-by: Ahmed S. Darwish <a.darwish@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200309181529.26558-1-a.darwish@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45b9d993dfe6846f7ec9aedf0591fed3f9dc0f0d
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Mar 19 10:11:32 2020 -0400

    btrfs: use nofs allocations for running delayed items
    
    [ Upstream commit 351cbf6e4410e7ece05e35d0a07320538f2418b4 ]
    
    Zygo reported the following lockdep splat while testing the balance
    patches
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.6.0-c6f0579d496a+ #53 Not tainted
    ------------------------------------------------------
    kswapd0/1133 is trying to acquire lock:
    ffff888092f622c0 (&delayed_node->mutex){+.+.}, at: __btrfs_release_delayed_node+0x7c/0x5b0
    
    but task is already holding lock:
    ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (fs_reclaim){+.+.}:
           fs_reclaim_acquire.part.91+0x29/0x30
           fs_reclaim_acquire+0x19/0x20
           kmem_cache_alloc_trace+0x32/0x740
           add_block_entry+0x45/0x260
           btrfs_ref_tree_mod+0x6e2/0x8b0
           btrfs_alloc_tree_block+0x789/0x880
           alloc_tree_block_no_bg_flush+0xc6/0xf0
           __btrfs_cow_block+0x270/0x940
           btrfs_cow_block+0x1ba/0x3a0
           btrfs_search_slot+0x999/0x1030
           btrfs_insert_empty_items+0x81/0xe0
           btrfs_insert_delayed_items+0x128/0x7d0
           __btrfs_run_delayed_items+0xf4/0x2a0
           btrfs_run_delayed_items+0x13/0x20
           btrfs_commit_transaction+0x5cc/0x1390
           insert_balance_item.isra.39+0x6b2/0x6e0
           btrfs_balance+0x72d/0x18d0
           btrfs_ioctl_balance+0x3de/0x4c0
           btrfs_ioctl+0x30ab/0x44a0
           ksys_ioctl+0xa1/0xe0
           __x64_sys_ioctl+0x43/0x50
           do_syscall_64+0x77/0x2c0
           entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    -> #0 (&delayed_node->mutex){+.+.}:
           __lock_acquire+0x197e/0x2550
           lock_acquire+0x103/0x220
           __mutex_lock+0x13d/0xce0
           mutex_lock_nested+0x1b/0x20
           __btrfs_release_delayed_node+0x7c/0x5b0
           btrfs_remove_delayed_node+0x49/0x50
           btrfs_evict_inode+0x6fc/0x900
           evict+0x19a/0x2c0
           dispose_list+0xa0/0xe0
           prune_icache_sb+0xbd/0xf0
           super_cache_scan+0x1b5/0x250
           do_shrink_slab+0x1f6/0x530
           shrink_slab+0x32e/0x410
           shrink_node+0x2a5/0xba0
           balance_pgdat+0x4bd/0x8a0
           kswapd+0x35a/0x800
           kthread+0x1e9/0x210
           ret_from_fork+0x3a/0x50
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(fs_reclaim);
                                   lock(&delayed_node->mutex);
                                   lock(fs_reclaim);
      lock(&delayed_node->mutex);
    
     *** DEADLOCK ***
    
    3 locks held by kswapd0/1133:
     #0: ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
     #1: ffffffff8fc380d8 (shrinker_rwsem){++++}, at: shrink_slab+0x1e8/0x410
     #2: ffff8881e0e6c0e8 (&type->s_umount_key#42){++++}, at: trylock_super+0x1b/0x70
    
    stack backtrace:
    CPU: 2 PID: 1133 Comm: kswapd0 Not tainted 5.6.0-c6f0579d496a+ #53
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
     dump_stack+0xc1/0x11a
     print_circular_bug.isra.38.cold.57+0x145/0x14a
     check_noncircular+0x2a9/0x2f0
     ? print_circular_bug.isra.38+0x130/0x130
     ? stack_trace_consume_entry+0x90/0x90
     ? save_trace+0x3cc/0x420
     __lock_acquire+0x197e/0x2550
     ? btrfs_inode_clear_file_extent_range+0x9b/0xb0
     ? register_lock_class+0x960/0x960
     lock_acquire+0x103/0x220
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     __mutex_lock+0x13d/0xce0
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? __asan_loadN+0xf/0x20
     ? pvclock_clocksource_read+0xeb/0x190
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? mutex_lock_io_nested+0xc20/0xc20
     ? __kasan_check_read+0x11/0x20
     ? check_chain_key+0x1e6/0x2e0
     mutex_lock_nested+0x1b/0x20
     ? mutex_lock_nested+0x1b/0x20
     __btrfs_release_delayed_node+0x7c/0x5b0
     btrfs_remove_delayed_node+0x49/0x50
     btrfs_evict_inode+0x6fc/0x900
     ? btrfs_setattr+0x840/0x840
     ? do_raw_spin_unlock+0xa8/0x140
     evict+0x19a/0x2c0
     dispose_list+0xa0/0xe0
     prune_icache_sb+0xbd/0xf0
     ? invalidate_inodes+0x310/0x310
     super_cache_scan+0x1b5/0x250
     do_shrink_slab+0x1f6/0x530
     shrink_slab+0x32e/0x410
     ? do_shrink_slab+0x530/0x530
     ? do_shrink_slab+0x530/0x530
     ? __kasan_check_read+0x11/0x20
     ? mem_cgroup_protected+0x13d/0x260
     shrink_node+0x2a5/0xba0
     balance_pgdat+0x4bd/0x8a0
     ? mem_cgroup_shrink_node+0x490/0x490
     ? _raw_spin_unlock_irq+0x27/0x40
     ? finish_task_switch+0xce/0x390
     ? rcu_read_lock_bh_held+0xb0/0xb0
     kswapd+0x35a/0x800
     ? _raw_spin_unlock_irqrestore+0x4c/0x60
     ? balance_pgdat+0x8a0/0x8a0
     ? finish_wait+0x110/0x110
     ? __kasan_check_read+0x11/0x20
     ? __kthread_parkme+0xc6/0xe0
     ? balance_pgdat+0x8a0/0x8a0
     kthread+0x1e9/0x210
     ? kthread_create_worker_on_cpu+0xc0/0xc0
     ret_from_fork+0x3a/0x50
    
    This is because we hold that delayed node's mutex while doing tree
    operations.  Fix this by just wrapping the searches in nofs.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db1e113578193c9f8d308cf1edfc1cb050984268
Author: Rob Herring <robh@kernel.org>
Date:   Thu Apr 9 16:19:52 2020 -0600

    ARM: versatile: Remove dead sched_clock code
    
    Now that there's a DT based sched_clock driver in
    drivers/clocksource/timer-versatile.c and all the Arm reference
    platforms are DT only, the non-DT versatile sched_clock code can be
    removed.
    
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://lore.kernel.org/r/20200409221952.31287-1-robh@kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 8c42c0f72d7c4f295646d3eba73f62e5579b1732
Author: Jason Yan <yanaijie@huawei.com>
Date:   Tue Apr 14 20:02:38 2020 +0800

    clocksource/drivers/atmel-st: Remove useless 'status'
    
    Fix the following coccicheck warning:
    
    drivers/clocksource/timer-atmel-st.c:142:6-12: Unneeded variable:
    "status". Return "0" on line 166
    
    Signed-off-by: Jason Yan <yanaijie@huawei.com>
    Acked-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200414120238.35704-1-yanaijie@huawei.com

commit ac161f57b66dcf14b3339b1c5857c08a9ad4d833
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Wed Apr 1 12:27:02 2020 +0800

    clocksource/drivers/imx-tpm: Add support for ARM64
    
    Allows building and compile-testing the i.MX TPM driver also
    for ARM64. The delay_timer is only supported on ARMv7.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1585715222-24489-1-git-send-email-Anson.Huang@nxp.com

commit 4855f2bd91b6e3461af7d795bfe9a40420122131
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Thu Apr 9 12:12:26 2020 +0200

    clocksource: davinci: axe a pointless __GFP_NOFAIL
    
    There is no need to specify __GFP_NOFAIL when allocating memory here, so
    axe it.
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200409101226.15432-1-christophe.jaillet@wanadoo.fr

commit bdf8783c0dae9d3d8fc1c4078fe849ab8aa8b583
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Thu Apr 9 11:25:43 2020 +0200

    clocksource/drivers/davinci: Avoid trailing '\n' hidden in pr_fmt()
    
    pr_xxx() functions usually have '\n' at the end of the logging message.
    Here, this '\n' is added via the 'pr_fmt' macro.
    
    In order to be more consistent with other files, use a more standard
    convention and put these '\n' back in the messages themselves and remove it
    from the pr_fmt macro.
    
    While at it, remove a useless message in case of 'kzalloc' failure,
    especially with a __GFP_NOFAIL flag.
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200409092543.14727-1-christophe.jaillet@wanadoo.fr

commit 295bcca84916cb5079140a89fccb472bb8d1f6e2
Author: Rikard Falkeborn <rikard.falkeborn@gmail.com>
Date:   Mon Apr 6 20:10:38 2020 -0700

    linux/bits.h: add compile time sanity check of GENMASK inputs
    
    GENMASK() and GENMASK_ULL() are supposed to be called with the high bit as
    the first argument and the low bit as the second argument.  Mixing them
    will return a mask with zero bits set.
    
    Recent commits show getting this wrong is not uncommon, see e.g.  commit
    aa4c0c9091b0 ("net: stmmac: Fix misuses of GENMASK macro") and commit
    9bdd7bb3a844 ("clocksource/drivers/npcm: Fix misuse of GENMASK macro").
    
    To prevent such mistakes from appearing again, add compile time sanity
    checking to the arguments of GENMASK() and GENMASK_ULL().  If both
    arguments are known at compile time, and the low bit is higher than the
    high bit, break the build to detect the mistake immediately.
    
    Since GENMASK() is used in declarations, BUILD_BUG_ON_ZERO() must be used
    instead of BUILD_BUG_ON().
    
    __builtin_constant_p does not evaluate is argument, it only checks if it
    is a constant or not at compile time, and __builtin_choose_expr does not
    evaluate the expression that is not chosen.  Therefore, GENMASK(x++, 0)
    does only evaluate x++ once.
    
    Commit 95b980d62d52 ("linux/bits.h: make BIT(), GENMASK(), and friends
    available in assembly") made the macros in linux/bits.h available in
    assembly.  Since BUILD_BUG_OR_ZERO() is not asm compatible, disable the
    checks if the file is included in an asm file.
    
    Due to bugs in GCC versions before 4.9 [0], disable the check if building
    with a too old GCC compiler.
    
    [0]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=19449
    
    Signed-off-by: Rikard Falkeborn <rikard.falkeborn@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: Haren Myneni <haren@us.ibm.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: Johannes Berg <johannes@sipsolutions.net>
    Cc: lkml <linux-kernel@vger.kernel.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/20200308193954.2372399-1-rikard.falkeborn@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d5ca32738f8fbd3632928929cccb5789d44be390
Merge: e5adbd6ec480 760a53768610
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Apr 5 12:06:51 2020 -0700

    Merge tag 'timers-urgent-2020-04-05' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "Two timer subsystem fixes:
    
       - Prevent a use after free in the new lockdep state tracking for
         hrtimers
    
       - Add missing parenthesis in the VF pit timer driver"
    
    * tag 'timers-urgent-2020-04-05' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/timer-vf-pit: Add missing parenthesis
      hrtimer: Don't dereference the hrtimer pointer after the callback

commit 760a53768610d427990192b5cfdb71310e1373db
Author: afzal mohammed <afzal.mohd.ma@gmail.com>
Date:   Mon Mar 23 11:41:30 2020 +0530

    clocksource/drivers/timer-vf-pit: Add missing parenthesis
    
    Recently all usage of setup_irq() was replaced by request_irq(). The
    replacement in timer-vf-pit.c missed closing parentheses resulting in a build
    error (vf610m4_defconfig). Fix it.
    
    Fixes: cc2550b421aa ("clocksource: Replace setup_irq() by request_irq()")
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: afzal mohammed <afzal.mohd.ma@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200323061130.GA6286@afzalpc

commit e6d05acd57013114977ec77a131fe79d2f542774
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Thu Apr 2 18:31:35 2020 -0700

    remoteproc/omap: Fix set_load call in omap_rproc_request_timer
    
    When building arm allyesconfig:
    
    drivers/remoteproc/omap_remoteproc.c:174:44: error: too many arguments
    to function call, expected 2, have 3
            timer->timer_ops->set_load(timer->odt, 0, 0);
            ~~~~~~~~~~~~~~~~~~~~~~~~~~                ^
    1 error generated.
    
    This is due to commit 02e6d546e3bd ("clocksource/drivers/timer-ti-dm:
    Enable autoreload in set_pwm") in the clockevents tree interacting with
    commit e28edc571925 ("remoteproc/omap: Request a timer(s) for remoteproc
    usage") from the rpmsg tree.
    
    This should have been fixed during the merge of the remoteproc tree
    since it happened after the clockevents tree merge; however, it does not
    look like my email was noticed by either maintainer and I did not pay
    attention when the pull was sent since I was on CC.
    
    Fixes: c6570114316f ("Merge tag 'rproc-v5.7' of git://git.kernel.org/pub/scm/linux/kernel/git/andersson/remoteproc")
    Link: https://lore.kernel.org/lkml/20200327185055.GA22438@ubuntu-m2-xlarge-x86/
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Acked-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f23f37fe702fec4d6e250354432f1921ec9fe5b4
Author: Yubo Xie <yuboxie@microsoft.com>
Date:   Thu Mar 26 19:11:59 2020 -0700

    clocksource/drivers/hyper-v: Untangle stimers and timesync from clocksources
    
    [ Upstream commit 0af3e137c144377fbaf5025ba784ff5ba7ad40c9 ]
    
    hyperv_timer.c exports hyperv_cs, which is used by stimers and the
    timesync mechanism.  However, the clocksource dependency is not
    needed: these mechanisms only depend on the partition reference
    counter (which can be read via a MSR or via the TSC Reference Page).
    
    Introduce the (function) pointer hv_read_reference_counter, as an
    embodiment of the partition reference counter read, and export it
    in place of the hyperv_cs pointer.  The latter can be removed.
    
    This should clarify that there's no relationship between Hyper-V
    stimers & timesync and the Linux clocksource abstractions.  No
    functional or semantic change.
    
    Suggested-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Andrea Parri <parri.andrea@gmail.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200109160650.16150-2-parri.andrea@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0994c33401cc4324ee23a3150cc795691530b1b7
Author: Yubo Xie <yuboxie@microsoft.com>
Date:   Thu Mar 26 19:11:59 2020 -0700

    clocksource/drivers/hyper-v: Untangle stimers and timesync from clocksources
    
    [ Upstream commit 0af3e137c144377fbaf5025ba784ff5ba7ad40c9 ]
    
    hyperv_timer.c exports hyperv_cs, which is used by stimers and the
    timesync mechanism.  However, the clocksource dependency is not
    needed: these mechanisms only depend on the partition reference
    counter (which can be read via a MSR or via the TSC Reference Page).
    
    Introduce the (function) pointer hv_read_reference_counter, as an
    embodiment of the partition reference counter read, and export it
    in place of the hyperv_cs pointer.  The latter can be removed.
    
    This should clarify that there's no relationship between Hyper-V
    stimers & timesync and the Linux clocksource abstractions.  No
    functional or semantic change.
    
    Suggested-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Andrea Parri <parri.andrea@gmail.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200109160650.16150-2-parri.andrea@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbb381b619aa5242c9cb1a8fd54d71c4d79c91eb
Merge: 336622e9fce7 4479730e9263
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 30 18:51:47 2020 -0700

    Merge tag 'timers-core-2020-03-30' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timekeeping and timer updates from Thomas Gleixner:
     "Core:
    
       - Consolidation of the vDSO build infrastructure to address the
         difficulties of cross-builds for ARM64 compat vDSO libraries by
         restricting the exposure of header content to the vDSO build.
    
         This is achieved by splitting out header content into separate
         headers. which contain only the minimaly required information which
         is necessary to build the vDSO. These new headers are included from
         the kernel headers and the vDSO specific files.
    
       - Enhancements to the generic vDSO library allowing more fine grained
         control over the compiled in code, further reducing architecture
         specific storage and preparing for adopting the generic library by
         PPC.
    
       - Cleanup and consolidation of the exit related code in posix CPU
         timers.
    
       - Small cleanups and enhancements here and there
    
      Drivers:
    
       - The obligatory new drivers: Ingenic JZ47xx and X1000 TCU support
    
       - Correct the clock rate of PIT64b global clock
    
       - setup_irq() cleanup
    
       - Preparation for PWM and suspend support for the TI DM timer
    
       - Expand the fttmr010 driver to support ast2600 systems
    
       - The usual small fixes, enhancements and cleanups all over the
         place"
    
    * tag 'timers-core-2020-03-30' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (80 commits)
      Revert "clocksource/drivers/timer-probe: Avoid creating dead devices"
      vdso: Fix clocksource.h macro detection
      um: Fix header inclusion
      arm64: vdso32: Enable Clang Compilation
      lib/vdso: Enable common headers
      arm: vdso: Enable arm to use common headers
      x86/vdso: Enable x86 to use common headers
      mips: vdso: Enable mips to use common headers
      arm64: vdso32: Include common headers in the vdso library
      arm64: vdso: Include common headers in the vdso library
      arm64: Introduce asm/vdso/processor.h
      arm64: vdso32: Code clean up
      linux/elfnote.h: Replace elf.h with UAPI equivalent
      scripts: Fix the inclusion order in modpost
      common: Introduce processor.h
      linux/ktime.h: Extract common header for vDSO
      linux/jiffies.h: Extract common header for vDSO
      linux/time64.h: Extract common header for vDSO
      linux/time32.h: Extract common header for vDSO
      linux/time.h: Extract common header for vDSO
      ...

commit ab93e984dbb41578b41208cee52ce4e709951eb2
Merge: 01af08bd24ed 749da8ca978f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Mar 29 10:36:29 2020 -0700

    Merge tag 'timers-urgent-2020-03-29' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Thomas Gleixner:
     "A single fix for the Hyper-V clocksource driver to make sched clock
      actually return nanoseconds and not the virtual clock value which
      increments at 10e7 HZ (100ns)"
    
    * tag 'timers-urgent-2020-03-29' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/hyper-v: Make sched clock return nanoseconds correctly

commit 4479730e9263befbb9ce9563a09563db2acb8f7c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Mar 28 11:20:36 2020 +0100

    Revert "clocksource/drivers/timer-probe: Avoid creating dead devices"
    
    This reverts commit 4f41fe386a94639cd9a1831298d4f85db5662f1e.
    
    The change breaks systems on which the DT node of a device is used by
    multiple drivers. The proposed workaround to clear OF_POPULATED is just a
    band aid and this needs to be cleaned up at the root of the problem.
    
    Revert this for now.
    
    Reported-by: Ionela Voinescu <ionela.voinescu@arm.com>
    Reported-by: Jon Hunter <jonathanh@nvidia.com>
    Requested-by: Rob Herring <robh+dt@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Saravana Kannan <saravanak@google.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200324175955.GA16972@arm.com

commit 749da8ca978f19710aba496208c480ad42d37f79
Author: Yubo Xie <yuboxie@microsoft.com>
Date:   Thu Mar 26 19:11:59 2020 -0700

    clocksource/drivers/hyper-v: Make sched clock return nanoseconds correctly
    
    The sched clock read functions return the HV clock (100ns granularity)
    without converting it to nanoseconds.
    
    Add the missing conversion.
    
    Fixes: bd00cd52d5be ("clocksource/drivers/hyperv: Add Hyper-V specific sched clock function")
    Signed-off-by: Yubo Xie <yuboxie@microsoft.com>
    Signed-off-by: Tianyu Lan <Tianyu.Lan@microsoft.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200327021159.31429-1-Tianyu.Lan@microsoft.com

commit e28edc571925ffe0e77aa4ab6082a829690c79f2
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Mar 24 13:00:30 2020 +0200

    remoteproc/omap: Request a timer(s) for remoteproc usage
    
    The remote processors in OMAP4+ SoCs are equipped with internal
    timers, like the internal SysTick timer in a Cortex M3/M4 NVIC or
    the CTM timer within Unicache in IPU & DSP. However, these timers
    are gated when the processor subsystem clock is gated, making
    them rather difficult to use as OS tick sources. They will not
    be able to wakeup the processor from any processor-sleep induced
    clock-gating states.
    
    This can be avoided by using an external timer as the tick source,
    which can be controlled independently by the OMAP remoteproc
    driver code, but still allowing the processor subsystem clock to
    be auto-gated when the remoteproc cores are idle.
    
    This patch adds the support for OMAP remote processors to request
    timer(s) to be used by the remoteproc. The timers are enabled and
    disabled in line with the enabling/disabling of the remoteproc.
    The timer data is not mandatory if the advanced device management
    features are not required.
    
    The core timer functionality is provided by the OMAP DMTimer
    clocksource driver, which does not export any API. The logic is
    implemented through the timer device's platform data ops. The OMAP
    remoteproc driver mainly requires ops to request/free a dmtimer,
    and to start/stop a timer. The split ops helps in controlling the
    timer state without having to request and release a timer everytime
    it needs to use the timer.
    
    NOTE: If the gptimer is already in use by the time IPU and/or
    DSP are loaded, the processors will fail to boot.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Reviewed-by: Andrew F. Davis <afd@ti.com>
    Acked-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Link: https://lore.kernel.org/r/20200324110035.29907-11-t-kristo@ti.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 351cbf6e4410e7ece05e35d0a07320538f2418b4
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Mar 19 10:11:32 2020 -0400

    btrfs: use nofs allocations for running delayed items
    
    Zygo reported the following lockdep splat while testing the balance
    patches
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.6.0-c6f0579d496a+ #53 Not tainted
    ------------------------------------------------------
    kswapd0/1133 is trying to acquire lock:
    ffff888092f622c0 (&delayed_node->mutex){+.+.}, at: __btrfs_release_delayed_node+0x7c/0x5b0
    
    but task is already holding lock:
    ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (fs_reclaim){+.+.}:
           fs_reclaim_acquire.part.91+0x29/0x30
           fs_reclaim_acquire+0x19/0x20
           kmem_cache_alloc_trace+0x32/0x740
           add_block_entry+0x45/0x260
           btrfs_ref_tree_mod+0x6e2/0x8b0
           btrfs_alloc_tree_block+0x789/0x880
           alloc_tree_block_no_bg_flush+0xc6/0xf0
           __btrfs_cow_block+0x270/0x940
           btrfs_cow_block+0x1ba/0x3a0
           btrfs_search_slot+0x999/0x1030
           btrfs_insert_empty_items+0x81/0xe0
           btrfs_insert_delayed_items+0x128/0x7d0
           __btrfs_run_delayed_items+0xf4/0x2a0
           btrfs_run_delayed_items+0x13/0x20
           btrfs_commit_transaction+0x5cc/0x1390
           insert_balance_item.isra.39+0x6b2/0x6e0
           btrfs_balance+0x72d/0x18d0
           btrfs_ioctl_balance+0x3de/0x4c0
           btrfs_ioctl+0x30ab/0x44a0
           ksys_ioctl+0xa1/0xe0
           __x64_sys_ioctl+0x43/0x50
           do_syscall_64+0x77/0x2c0
           entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    -> #0 (&delayed_node->mutex){+.+.}:
           __lock_acquire+0x197e/0x2550
           lock_acquire+0x103/0x220
           __mutex_lock+0x13d/0xce0
           mutex_lock_nested+0x1b/0x20
           __btrfs_release_delayed_node+0x7c/0x5b0
           btrfs_remove_delayed_node+0x49/0x50
           btrfs_evict_inode+0x6fc/0x900
           evict+0x19a/0x2c0
           dispose_list+0xa0/0xe0
           prune_icache_sb+0xbd/0xf0
           super_cache_scan+0x1b5/0x250
           do_shrink_slab+0x1f6/0x530
           shrink_slab+0x32e/0x410
           shrink_node+0x2a5/0xba0
           balance_pgdat+0x4bd/0x8a0
           kswapd+0x35a/0x800
           kthread+0x1e9/0x210
           ret_from_fork+0x3a/0x50
    
    other info that might help us debug this:
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(fs_reclaim);
                                   lock(&delayed_node->mutex);
                                   lock(fs_reclaim);
      lock(&delayed_node->mutex);
    
     *** DEADLOCK ***
    
    3 locks held by kswapd0/1133:
     #0: ffffffff8fc5f860 (fs_reclaim){+.+.}, at: __fs_reclaim_acquire+0x5/0x30
     #1: ffffffff8fc380d8 (shrinker_rwsem){++++}, at: shrink_slab+0x1e8/0x410
     #2: ffff8881e0e6c0e8 (&type->s_umount_key#42){++++}, at: trylock_super+0x1b/0x70
    
    stack backtrace:
    CPU: 2 PID: 1133 Comm: kswapd0 Not tainted 5.6.0-c6f0579d496a+ #53
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
     dump_stack+0xc1/0x11a
     print_circular_bug.isra.38.cold.57+0x145/0x14a
     check_noncircular+0x2a9/0x2f0
     ? print_circular_bug.isra.38+0x130/0x130
     ? stack_trace_consume_entry+0x90/0x90
     ? save_trace+0x3cc/0x420
     __lock_acquire+0x197e/0x2550
     ? btrfs_inode_clear_file_extent_range+0x9b/0xb0
     ? register_lock_class+0x960/0x960
     lock_acquire+0x103/0x220
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     __mutex_lock+0x13d/0xce0
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? __asan_loadN+0xf/0x20
     ? pvclock_clocksource_read+0xeb/0x190
     ? __btrfs_release_delayed_node+0x7c/0x5b0
     ? mutex_lock_io_nested+0xc20/0xc20
     ? __kasan_check_read+0x11/0x20
     ? check_chain_key+0x1e6/0x2e0
     mutex_lock_nested+0x1b/0x20
     ? mutex_lock_nested+0x1b/0x20
     __btrfs_release_delayed_node+0x7c/0x5b0
     btrfs_remove_delayed_node+0x49/0x50
     btrfs_evict_inode+0x6fc/0x900
     ? btrfs_setattr+0x840/0x840
     ? do_raw_spin_unlock+0xa8/0x140
     evict+0x19a/0x2c0
     dispose_list+0xa0/0xe0
     prune_icache_sb+0xbd/0xf0
     ? invalidate_inodes+0x310/0x310
     super_cache_scan+0x1b5/0x250
     do_shrink_slab+0x1f6/0x530
     shrink_slab+0x32e/0x410
     ? do_shrink_slab+0x530/0x530
     ? do_shrink_slab+0x530/0x530
     ? __kasan_check_read+0x11/0x20
     ? mem_cgroup_protected+0x13d/0x260
     shrink_node+0x2a5/0xba0
     balance_pgdat+0x4bd/0x8a0
     ? mem_cgroup_shrink_node+0x490/0x490
     ? _raw_spin_unlock_irq+0x27/0x40
     ? finish_task_switch+0xce/0x390
     ? rcu_read_lock_bh_held+0xb0/0xb0
     kswapd+0x35a/0x800
     ? _raw_spin_unlock_irqrestore+0x4c/0x60
     ? balance_pgdat+0x8a0/0x8a0
     ? finish_wait+0x110/0x110
     ? __kasan_check_read+0x11/0x20
     ? __kthread_parkme+0xc6/0xe0
     ? balance_pgdat+0x8a0/0x8a0
     kthread+0x1e9/0x210
     ? kthread_create_worker_on_cpu+0xc0/0xc0
     ret_from_fork+0x3a/0x50
    
    This is because we hold that delayed node's mutex while doing tree
    operations.  Fix this by just wrapping the searches in nofs.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit da12d2739fb69531bf6bb6eb7e46d73d1dabc814
Merge: bbd6ec605c0f f7d5ef0c654e c265861af2af b5475d8caedb de58ed5e16e6 c17a290f7e7e 8673e02e5841
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Wed Mar 25 11:10:32 2020 +0000

    Merge branches 'for-next/memory-hotremove', 'for-next/arm_sdei', 'for-next/amu', 'for-next/final-cap-helper', 'for-next/cpu_ops-cleanup', 'for-next/misc' and 'for-next/perf' into for-next/core
    
    * for-next/memory-hotremove:
      : Memory hot-remove support for arm64
      arm64/mm: Enable memory hot remove
      arm64/mm: Hold memory hotplug lock while walking for kernel page table dump
    
    * for-next/arm_sdei:
      : SDEI: fix double locking on return from hibernate and clean-up
      firmware: arm_sdei: clean up sdei_event_create()
      firmware: arm_sdei: Use cpus_read_lock() to avoid races with cpuhp
      firmware: arm_sdei: fix possible double-lock on hibernate error path
      firmware: arm_sdei: fix double-lock on hibernate with shared events
    
    * for-next/amu:
      : ARMv8.4 Activity Monitors support
      clocksource/drivers/arm_arch_timer: validate arch_timer_rate
      arm64: use activity monitors for frequency invariance
      cpufreq: add function to get the hardware max frequency
      Documentation: arm64: document support for the AMU extension
      arm64/kvm: disable access to AMU registers from kvm guests
      arm64: trap to EL1 accesses to AMU counters from EL0
      arm64: add support for the AMU extension v1
    
    * for-next/final-cap-helper:
      : Introduce cpus_have_final_cap_helper(), migrate arm64 KVM to it
      arm64: kvm: hyp: use cpus_have_final_cap()
      arm64: cpufeature: add cpus_have_final_cap()
    
    * for-next/cpu_ops-cleanup:
      : cpu_ops[] access code clean-up
      arm64: Introduce get_cpu_ops() helper function
      arm64: Rename cpu_read_ops() to init_cpu_ops()
      arm64: Declare ACPI parking protocol CPU operation if needed
    
    * for-next/misc:
      : Various fixes and clean-ups
      arm64: define __alloc_zeroed_user_highpage
      arm64/kernel: Simplify __cpu_up() by bailing out early
      arm64: remove redundant blank for '=' operator
      arm64: kexec_file: Fixed code style.
      arm64: add blank after 'if'
      arm64: fix spelling mistake "ca not" -> "cannot"
      arm64: entry: unmask IRQ in el0_sp()
      arm64: efi: add efi-entry.o to targets instead of extra-$(CONFIG_EFI)
      arm64: csum: Optimise IPv6 header checksum
      arch/arm64: fix typo in a comment
      arm64: remove gratuitious/stray .ltorg stanzas
      arm64: Update comment for ASID() macro
      arm64: mm: convert cpu_do_switch_mm() to C
      arm64: fix NUMA Kconfig typos
    
    * for-next/perf:
      : arm64 perf updates
      arm64: perf: Add support for ARMv8.5-PMU 64-bit counters
      KVM: arm64: limit PMU version to PMUv3 for ARMv8.1
      arm64: cpufeature: Extract capped perfmon fields
      arm64: perf: Clean up enable/disable calls
      perf: arm-ccn: Use scnprintf() for robustness
      arm64: perf: Support new DT compatibles
      arm64: perf: Refactor PMU init callbacks
      perf: arm_spe: Remove unnecessary zero check on 'nr_pages'

commit ca214e2c1793058e3a1387f9e343cc5b1731db15
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Mon Mar 23 13:39:20 2020 +0000

    vdso: Fix clocksource.h macro detection
    
    CONFIG_GENERIC_GETTIMEOFDAY is a sufficient condition to verify if an
    architecture implements asm/vdso/clocksource.h or not. The current
    implementation wrongly assumes that the same is true for the config
    option CONFIG_ARCH_CLOCKSOURCE_DATA.
    
    This results in a series of build errors on ia64/sparc/sparc64 like this:
    
      In file included from ./include/linux/clocksource.h:31,
                       from ./include/linux/clockchips.h:14,
                       from ./include/linux/tick.h:8,
                       from fs/proc/stat.c:15:
      ./include/vdso/clocksource.h:9:10: fatal error: asm/vdso/clocksource.h:
      No such file or directory
          9 | #include <asm/vdso/clocksource.h>
            |          ^~~~~~~~~~~~~~~~~~~~~~~~
    
    Fix the issue removing the unneeded config condition.
    
    Fixes: 14ee2ac618e4 ("linux/clocksource.h: Extract common header for vDSO")
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20200323133920.46546-1-vincenzo.frascino@arm.com

commit 14ee2ac618e49e767c9af4aa007f951eb9e35153
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Fri Mar 20 14:53:33 2020 +0000

    linux/clocksource.h: Extract common header for vDSO
    
    The vDSO library should only include the necessary headers required for
    a userspace library (UAPI and a minimal set of kernel headers). To make
    this possible it is necessary to isolate from the kernel headers the
    common parts that are strictly necessary to build the library.
    
    Split clocksource.h into linux and common headers to make the latter
    suitable for inclusion in the vDSO library.
    
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200320145351.32292-9-vincenzo.frascino@arm.com

commit 17e46656a82fc4645324043241b3294f6db9a6ce
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Fri Mar 20 14:53:32 2020 +0000

    mips: Introduce asm/vdso/clocksource.h
    
    The vDSO library should only include the necessary headers required for
    a userspace library (UAPI and a minimal set of kernel headers). To make
    this possible it is necessary to isolate from the kernel headers the
    common parts that are strictly necessary to build the library.
    
    Introduce asm/vdso/clocksource.h to contain all the arm64 specific
    functions that are suitable for vDSO inclusion.
    
    This header will be required by a future patch that will generalize
    vdso/clocksource.h.
    
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Link: https://lkml.kernel.org/r/20200320145351.32292-8-vincenzo.frascino@arm.com

commit 31fdcac07f679848b5ba371500292b685fd39217
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Fri Mar 20 14:53:31 2020 +0000

    arm64: Introduce asm/vdso/clocksource.h
    
    The vDSO library should only include the necessary headers required for
    a userspace library (UAPI and a minimal set of kernel headers). To make
    this possible it is necessary to isolate from the kernel headers the
    common parts that are strictly necessary to build the library.
    
    Introduce asm/vdso/clocksource.h to contain all the arm64 specific
    functions that are suitable for vDSO inclusion.
    
    This header will be required by a future patch that will generalize
    vdso/clocksource.h.
    
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lkml.kernel.org/r/20200320145351.32292-7-vincenzo.frascino@arm.com

commit c16b270b171177d1a602b270aef9bff45585bfa2
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Fri Mar 20 14:53:30 2020 +0000

    arm: Introduce asm/vdso/clocksource.h
    
    The vDSO library should only include the necessary headers required for
    a userspace library (UAPI and a minimal set of kernel headers). To make
    this possible it is necessary to isolate from the kernel headers the
    common parts that are strictly necessary to build the library.
    
    Introduce asm/vdso/clocksource.h to contain all the arm64 specific
    functions that are suitable for vDSO inclusion.
    
    This header will be required by a future patch that will generalize
    vdso/clocksource.h.
    
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Russell King <linux@armlinux.org.uk>
    Link: https://lkml.kernel.org/r/20200320145351.32292-6-vincenzo.frascino@arm.com

commit 659a9faa3f3c89de4c34c30c3da676059864e0fe
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Fri Mar 20 14:53:29 2020 +0000

    x86: Introduce asm/vdso/clocksource.h
    
    The vDSO library should only include the necessary headers required for
    a userspace library (UAPI and a minimal set of kernel headers). To make
    this possible it is necessary to isolate from the kernel headers the
    common parts that are strictly necessary to build the library.
    
    Introduce asm/vdso/clocksource.h to contain all the arm64 specific
    functions that are suitable for vDSO inclusion.
    
    This header will be required by a future patch that will generalize
    vdso/clocksource.h.
    
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200320145351.32292-5-vincenzo.frascino@arm.com

commit 2c8bd58812ee3dbf0d78b566822f7eacd34bdd7b
Author: Ahmed S. Darwish <a.darwish@linutronix.de>
Date:   Mon Mar 9 18:15:29 2020 +0000

    time/sched_clock: Expire timer in hardirq context
    
    To minimize latency, PREEMPT_RT kernels expires hrtimers in preemptible
    softirq context by default. This can be overriden by marking the timer's
    expiry with HRTIMER_MODE_HARD.
    
    sched_clock_timer is missing this annotation: if its callback is preempted
    and the duration of the preemption exceeds the wrap around time of the
    underlying clocksource, sched clock will get out of sync.
    
    Mark the sched_clock_timer for expiry in hard interrupt context.
    
    Signed-off-by: Ahmed S. Darwish <a.darwish@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200309181529.26558-1-a.darwish@linutronix.de

commit 048495eb28939996261754215b1d450756978499
Merge: d441dceb5dce 4f41fe386a94
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Mar 19 09:39:48 2020 +0100

    Merge tag 'timers-v5.7' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clockevent/clocksource updates from Daniel Lezcano:
    
    - Avoid creating dead devices by flagging the driver with OF_POPULATED
      in order to prevent the platform to create another device (Saravana Kannan)
    
    - Remove unused includes from imx family drivers (Anson Huang)
    
    - timer-dm-ti rework to prepare for pwm and suspend support (Lokesh Vutla)
    
    - Fix the rate for the global clock on the pit64b (Claudiu Beznea)
    
    - Fix timer-cs5535 by requesting an irq with non-NULL dev_id (Afzal Mohammed)
    
    - Replace setup_irq() by request_irq() (Afzal Mohammed)
    
    - Add support for the TCU of X1000 (Zhou Yanjie)
    
    - Drop the bogus omap_dm_timer_of_set_source() function (Suman Anna)
    
    - Do not update the counter when updating the period in order to
      prevent a disruption when the pwm is used (Lokesh Vutla)
    
    - Improve owl_timer_init() failure messages (Matheus Castello)
    
    - Add driver for the Ingenic JZ47xx OST (Maarten ter Huurne)
    
    - Pass the interrupt and the shutdown callbacks in the init function
      for ast2600 support (Joel Stanley)
    
    - Add the ast2600 compatible string for the fttmr010 (Joel Stanley)

commit 4f41fe386a94639cd9a1831298d4f85db5662f1e
Author: Saravana Kannan <saravanak@google.com>
Date:   Fri Jan 10 21:21:25 2020 -0800

    clocksource/drivers/timer-probe: Avoid creating dead devices
    
    Timer initialization is done during early boot way before the driver
    core starts processing devices and drivers. Timers initialized during
    this early boot period don't really need or use a struct device.
    
    However, for timers represented as device tree nodes, the struct devices
    are still created and sit around unused and wasting memory. This change
    avoid this by marking the device tree nodes as "populated" if the
    corresponding timer is successfully initialized.
    
    Signed-off-by: Saravana Kannan <saravanak@google.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200111052125.238212-1-saravanak@google.com

commit 3d17cee291e8a4bc4c8b29b1c8a1b79e12f95473
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Tue Mar 17 10:55:13 2020 +0800

    clocksource/drivers/imx-sysctr: Remove unused includes
    
    There is nothing in use from of_address.h/of_irq.h, remove them.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1584413713-7376-1-git-send-email-Anson.Huang@nxp.com

commit 55a690f4199d8ab111dceb0a3fd181b52d0938bf
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Tue Mar 17 10:35:49 2020 +0800

    clocksource/drivers/imx-tpm: Remove unused includes
    
    There is nothing in use from of_address.h/of_irq.h, remove them.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1584412549-18354-1-git-send-email-Anson.Huang@nxp.com

commit 02e6d546e3bdc1a8a764343cd1ba354da07e8623
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Thu Mar 5 13:57:15 2020 +0530

    clocksource/drivers/timer-ti-dm: Enable autoreload in set_pwm
    
    dm timer ops set_load() api allows to configure the load value and to
    set the auto reload feature. But auto reload feature is independent of
    load value and should be part of configuring pwm. This way pwm can be
    disabled by disabling auto reload feature using set_pwm() so that the
    current pwm cycle will be completed. Else pwm disabling causes the
    cycle to be stopped abruptly.
    
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200305082715.15861-7-lokeshvutla@ti.com

commit 92fd86864ec4ac089de47f0f1f4c47418b343448
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Thu Mar 5 13:57:14 2020 +0530

    clocksource/drivers/timer-ti-dm: Add support to get pwm current status
    
    omap_dm_timer_ops provide support to configure the pwm but there is no
    support to get the current status. For configuring pwm it is advised to
    check the current hw status instead of relying on pwm framework. So
    implement a new timer ops to get the current status of pwm.
    
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Acked-by: Tony Lindgen <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200305082715.15861-6-lokeshvutla@ti.com

commit aff7665dc64b60c1f93d6e52fde297ae6b8999ae
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Thu Mar 5 13:57:13 2020 +0530

    clocksource/drivers/timer-ti-dm: Do not update counter on updating the period
    
    Write to trigger register(OMAP_TIMER_TRIGGER_REG) will load the value
    in Load register(OMAP_TIMER_LOAD_REG) into Counter register
    (OMAP_TIMER_COUNTER_REG).
    
    omap_dm_timer_set_load() writes into trigger register every time load
    register is updated. When timer is configured in pwm mode, this causes
    disruption in current pwm cycle, which is not expected especially when
    pwm is used as PPS signal for synchronized PTP clocks. So do not write
    into trigger register on updating the period.
    
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200305082715.15861-5-lokeshvutla@ti.com

commit b34677b0999a7c0de45e57b780508c14cb438ed8
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Mon Mar 16 16:44:53 2020 +0530

    clocksource/drivers/timer-ti-dm: Implement cpu_pm notifier for context save and restore
    
    omap_dm_timer_enable() restores the entire context(including counter)
    based on 2 conditions:
    - If get_context_loss_count is populated and context is lost.
    - If get_context_loss_count is not populated update unconditionally.
    
    Case2 has a side effect of updating the counter register even though
    context is not lost. When timer is configured in pwm mode, this is
    causing undesired behaviour in the pwm period.
    
    Instead of using get_context_loss_count call back, implement cpu_pm
    notifier with context save and restore support. And delete the
    get_context_loss_count callback all together.
    
    Suggested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    [tony@atomide.com: removed pm_runtime calls from cpuidle calls]
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200316111453.15441-1-lokeshvutla@ti.com

commit 5e20931c6a750b4b1ea9a2f7b863cc2dd9222ead
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Mar 5 13:57:11 2020 +0530

    clocksource/drivers/timer-ti-dm: Prepare for using cpuidle
    
    Let's add runtime_suspend and resume functions and atomic enabled
    flag. This way we can use these when converting to use cpuidle
    for saving and restoring device context.
    
    And we need to maintain the driver state in the driver as documented
    in "9. Autosuspend, or automatically-delayed suspends" in the
    Documentation/power/runtime_pm.rst document related to using driver
    private lock and races with runtime_suspend().
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200305082715.15861-3-lokeshvutla@ti.com

commit 341e8cba6c32bb7509eabb91619a233b7ae249b9
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Thu Mar 5 13:57:10 2020 +0530

    clocksource/drivers/timer-ti-dm: Convert to SPDX identifier
    
    Use SPDX-License-Identifier instead of a verbose license text.
    
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200305082715.15861-2-lokeshvutla@ti.com

commit 0585244523f0f4de7e4480375e871617a79cab98
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Mon Mar 16 11:52:56 2020 +0200

    clocksource/drivers/timer-microchip-pit64b: Fix rate for gck
    
    Generic clock rate needs to be set in case it was selected as timer clock
    source in mchp_pit64b_init_mode(). Otherwise it will be enabled with wrong
    rate.
    
    Fixes: 625022a5f160 ("clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1584352376-32585-1-git-send-email-claudiu.beznea@microchip.com

commit 470cf1c28d2f601ea666a96d676c10b09b2321ab
Author: afzal mohammed <afzal.mohd.ma@gmail.com>
Date:   Thu Mar 12 12:18:17 2020 +0530

    clocksource/drivers/timer-cs5535: Request irq with non-NULL dev_id
    
    Recently all usages of setup_irq() was replaced by request_irq().
    request_irq() does a few sanity checks that were not done in
    setup_irq(), if they fail irq registration will fail. One of the check
    is to ensure that non-NULL dev_id is passed in the case of shared irq.
    
    Fix it by passing non-NULL dev_id while registering the shared irq.
    
    Fixes: cc2550b421aa ("clocksource: Replace setup_irq() by request_irq()")
    Signed-off-by: afzal mohammed <afzal.mohd.ma@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200312064817.19000-1-afzal.mohd.ma@gmail.com

commit c265861af2af0f667e88b1b70acc234f8c61e0ae
Author: Ionela Voinescu <ionela.voinescu@arm.com>
Date:   Thu Mar 5 09:06:27 2020 +0000

    clocksource/drivers/arm_arch_timer: validate arch_timer_rate
    
    Using an arch timer with a frequency of less than 1MHz can potentially
    result in incorrect functionality in systems that assume a reasonable
    rate of the arch timer of 1 to 50MHz, described as typical in the
    architecture specification.
    
    Therefore, warn if the arch timer rate is below 1MHz, which is
    considered atypical and worth emphasizing.
    
    Suggested-by: Valentin Schneider <valentin.schneider@arm.com>
    Signed-off-by: Ionela Voinescu <ionela.voinescu@arm.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

commit 05f4a6e5a615841f7cf87ae969cbc6ec499bb2b3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 14 19:52:39 2020 +0100

    lib/vdso: Update coarse timekeeper unconditionally
    
    commit 9f24c540f7f8eb3a981528da9a9a636a5bdf5987 upstream.
    
    The low resolution parts of the VDSO, i.e.:
    
      clock_gettime(CLOCK_*_COARSE), clock_getres(), time()
    
    can be used even if there is no VDSO capable clocksource.
    
    But if an architecture opts out of the VDSO data update then this
    information becomes stale. This affects ARM when there is no architected
    timer available. The lack of update causes userspace to use stale data
    forever.
    
    Make the update of the low resolution parts unconditional and only skip
    the update of the high resolution parts if the architecture requests it.
    
    Fixes: 44f57d788e7d ("timekeeping: Provide a generic update_vsyscall() implementation")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20200114185946.765577901@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fabae5c846f2c14f98f7e96228caa0e871cf922
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 14 19:52:39 2020 +0100

    lib/vdso: Update coarse timekeeper unconditionally
    
    commit 9f24c540f7f8eb3a981528da9a9a636a5bdf5987 upstream.
    
    The low resolution parts of the VDSO, i.e.:
    
      clock_gettime(CLOCK_*_COARSE), clock_getres(), time()
    
    can be used even if there is no VDSO capable clocksource.
    
    But if an architecture opts out of the VDSO data update then this
    information becomes stale. This affects ARM when there is no architected
    timer available. The lack of update causes userspace to use stale data
    forever.
    
    Make the update of the low resolution parts unconditional and only skip
    the update of the high resolution parts if the architecture requests it.
    
    Fixes: 44f57d788e7d ("timekeeping: Provide a generic update_vsyscall() implementation")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20200114185946.765577901@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a41bcb3bdc9236c3fe243b014e0d070f3bacd49
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Dec 19 21:32:46 2019 +0000

    clocksource/drivers/bcm2835_timer: Fix memory leak of timer
    
    [ Upstream commit 2052d032c06761330bca4944bb7858b00960e868 ]
    
    Currently when setup_irq fails the error exit path will leak the
    recently allocated timer structure.  Originally the code would
    throw a panic but a later commit changed the behaviour to return
    via the err_iounmap path and hence we now have a memory leak. Fix
    this by adding a err_timer_free error path that kfree's timer.
    
    Addresses-Coverity: ("Resource Leak")
    Fixes: 524a7f08983d ("clocksource/drivers/bcm2835_timer: Convert init function to return error")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191219213246.34437-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc2550b421aa30e3da67e5a7f6d14f3ecd3527b3
Author: afzal mohammed <afzal.mohd.ma@gmail.com>
Date:   Thu Feb 27 16:29:02 2020 +0530

    clocksource: Replace setup_irq() by request_irq()
    
    request_irq() is preferred over setup_irq(). The early boot setup_irq()
    invocations happen either via 'init_IRQ()' or 'time_init()', while
    memory allocators are ready by 'mm_init()'.
    
    Per tglx[1], setup_irq() existed in olden days when allocators were not
    ready by the time early interrupts were initialized.
    
    Hence replace setup_irq() by request_irq().
    
    Seldom remove_irq() usage has been observed coupled with setup_irq(),
    wherever that has been found, it too has been replaced by free_irq().
    
    A build error that was reported by kbuild test robot <lkp@intel.com>
    in the previous version of the patch also has been fixed.
    
    [1] https://lkml.kernel.org/r/alpine.DEB.2.20.1710191609480.1971@nanos
    
    Signed-off-by: afzal mohammed <afzal.mohd.ma@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/91961c77c1cf93d41523f5e1ac52043f32f97077.1582799709.git.afzal.mohd.ma@gmail.com

commit a7cd39552194954bcdecfd9ff775466a61bda5bb
Author: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
Date:   Wed Feb 19 16:29:33 2020 +0800

    clocksource/drivers/ingenic: Add support for TCU of X1000
    
    X1000 has a different TCU containing OST, since X1000, OST has been
    independent of TCU. This patch is prepare for later OST driver.
    
    Signed-off-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1582100974-129559-5-git-send-email-zhouyanjie@wanyeetech.com

commit 753e83408b7f2980b7a5bfcf01f1175a937a2340
Author: Suman Anna <s-anna@ti.com>
Date:   Wed Feb 12 23:35:04 2020 -0600

    clocksource/drivers/timer-ti-dm: Drop bogus omap_dm_timer_of_set_source()
    
    The function omap_dm_timer_of_set_source() was originally added in
    commit 31a7448f4fa8a ("ARM: OMAP: dmtimer: Add clock source from DT"),
    and is designed to set a clock source from DT using the clocks property
    of a timer node. This design choice is okay for clk provider nodes but
    otherwise is a bad design as typically the clocks property is used to
    specify the functional clocks for a device, and not its parents.
    
    The timer nodes now all define a timer functional clock after the
    conversion to ti-sysc and the new clkctrl layout, and this results
    in an attempt to set the same functional clock as its parent when a
    consumer driver attempts to acquire any of these timers in the
    omap_dm_timer_prepare() function. This was masked and worked around
    in commit 983a5a43ec25 ("clocksource: timer-ti-dm: Fix pwm dmtimer
    usage of fck reparenting"). Fix all of this by simply dropping the
    entire function.
    
    Any DT configuration of clock sources should be achieved using
    assigned-clocks and assigned-clock-parents properties provided
    by the Common Clock Framework.
    
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Tero Kristo <t-kristo@ti.com>
    Cc: Neil Armstrong <narmstrong@baylibre.com>
    Cc: H. Nikolaus Schaller <hns@goldelico.com>
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Tested-by: Lokesh Vutla <lokeshvutla@ti.com>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200213053504.22638-1-s-anna@ti.com

commit 6ce4fcb015a1a1290ffafcf3554901b40f9322df
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Mon Feb 24 10:37:53 2020 +0530

    clocksource/drivers/timer-ti-dm: Do not update counter on updating the period
    
    Write to trigger register(OMAP_TIMER_TRIGGER_REG) will load the value
    in Load register(OMAP_TIMER_LOAD_REG) into Counter register
    (OMAP_TIMER_COUNTER_REG).
    
    omap_dm_timer_set_load() writes into trigger register every time load
    register is updated. When timer is configured in pwm mode, this causes
    disruption in current pwm cycle, which is not expected especially when
    pwm is used as PPS signal for synchronized PTP clocks. So do not write
    into trigger register on updating the period.
    
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200224050753.17784-3-lokeshvutla@ti.com

commit ad1ded9d2e3d1eb452ff58d325aadf237e187bd9
Author: Matheus Castello <matheus@castello.eng.br>
Date:   Tue Feb 18 21:48:10 2020 -0300

    clocksource/drivers/owl: Improve owl_timer_init fail messages
    
    Check the return from clocksource_mmio_init, add messages in case of
    an error and in case of not having a defined clock property.
    
    Signed-off-by: Matheus Castello <matheus@castello.eng.br>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200219004810.411190-1-matheus@castello.eng.br

commit ca7b72b5a5f248b72c88441a93bdcee22f42b9b3
Author: Maarten ter Huurne <maarten@treewalker.org>
Date:   Wed Feb 12 15:04:08 2020 -0300

    clocksource: Add driver for the Ingenic JZ47xx OST
    
    OST is the OS Timer, a 64-bit timer/counter with buffered reading.
    
    SoCs before the JZ4770 had (if any) a 32-bit OST; the JZ4770 and
    JZ4780 have a 64-bit OST.
    
    This driver will register both a clocksource and a sched_clock to the
    system.
    
    Signed-off-by: Maarten ter Huurne <maarten@treewalker.org>
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Tested-by: Mathieu Malaterre <malat@debian.org>
    Tested-by: Artur Rojek <contact@artur-rojek.eu>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200212180408.30872-1-paul@crapouillou.net

commit a67de48b3075cbb6ec030205d7b78981def6596d
Author: Vincenzo Frascino <vincenzo.frascino@arm.com>
Date:   Mon Feb 24 15:15:52 2020 +0000

    clocksource/drivers/arm_arch_timer: Fix vDSO clockmode when vDSO disabled
    
    The arm_arch_timer requires VDSO_CLOCKMODE_ARCHTIMER to be defined to
    compile correctly. On ARM the vDSO can be disabled and when this is the
    case the compilation ends prematurely with an error:
    
     $ make ARCH=arm multi_v7_defconfig
     $ ./scripts/config -d VDSO
     $ make
    
    drivers/clocksource/arm_arch_timer.c:73:44: error:
    ‘VDSO_CLOCKMODE_ARCHTIMER’ undeclared here (not in a function)
      static enum vdso_clock_mode vdso_default = VDSO_CLOCKMODE_ARCHTIMER;
    
    Make the usage of VDSO_CLOCKMODE_ARCHTIMER depend on the VDSO enablement
    and initialize the vdso clockmode variable with VDSO_CLOCKMODE_NONE
    otherwise.
    
    [ tglx: Match changelog and patch content. ]
    
    Fixes: 5e3c6a312a09 ("ARM/arm64: vdso: Use common vdso clock mode storage")
    Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200224151552.57274-1-vincenzo.frascino@arm.com

commit 6adf50d0371ac22ecc424ee879fa3aed3b3de32e
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Jan 10 18:16:41 2020 +0100

    clocksource: davinci: only enable clockevents once tim34 is initialized
    
    [ Upstream commit cea931c25104e6bddc42eb067f58193f355dbdd7 ]
    
    The DM365 platform has a strange quirk (only present when using ancient
    u-boot - mainline u-boot v2013.01 and later works fine) where if we
    enable the second half of the timer in periodic mode before we do its
    initialization - the time won't start flowing and we can't boot.
    
    When using more recent u-boot, we can enable the timer, then reinitialize
    it and all works fine.
    
    To work around this issue only enable clockevents once tim34 is
    initialized i.e. move clockevents_config_and_register() below tim34
    initialization.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3019eab8600908cbed7c4bdf4a08fc6a8c20402f
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Dec 19 21:32:46 2019 +0000

    clocksource/drivers/bcm2835_timer: Fix memory leak of timer
    
    [ Upstream commit 2052d032c06761330bca4944bb7858b00960e868 ]
    
    Currently when setup_irq fails the error exit path will leak the
    recently allocated timer structure.  Originally the code would
    throw a panic but a later commit changed the behaviour to return
    via the err_iounmap path and hence we now have a memory leak. Fix
    this by adding a err_timer_free error path that kfree's timer.
    
    Addresses-Coverity: ("Resource Leak")
    Fixes: 524a7f08983d ("clocksource/drivers/bcm2835_timer: Convert init function to return error")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191219213246.34437-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 989a495ed9a34bc60a33d8ec9ce00dcade40b36c
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Jan 10 18:16:41 2020 +0100

    clocksource: davinci: only enable clockevents once tim34 is initialized
    
    [ Upstream commit cea931c25104e6bddc42eb067f58193f355dbdd7 ]
    
    The DM365 platform has a strange quirk (only present when using ancient
    u-boot - mainline u-boot v2013.01 and later works fine) where if we
    enable the second half of the timer in periodic mode before we do its
    initialization - the time won't start flowing and we can't boot.
    
    When using more recent u-boot, we can enable the timer, then reinitialize
    it and all works fine.
    
    To work around this issue only enable clockevents once tim34 is
    initialized i.e. move clockevents_config_and_register() below tim34
    initialization.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7fc72092134e93d016ff36a00aef3cd68298c01
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Dec 19 21:32:46 2019 +0000

    clocksource/drivers/bcm2835_timer: Fix memory leak of timer
    
    [ Upstream commit 2052d032c06761330bca4944bb7858b00960e868 ]
    
    Currently when setup_irq fails the error exit path will leak the
    recently allocated timer structure.  Originally the code would
    throw a panic but a later commit changed the behaviour to return
    via the err_iounmap path and hence we now have a memory leak. Fix
    this by adding a err_timer_free error path that kfree's timer.
    
    Addresses-Coverity: ("Resource Leak")
    Fixes: 524a7f08983d ("clocksource/drivers/bcm2835_timer: Convert init function to return error")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191219213246.34437-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be1777babb9447c307d1ac9f1401e0bf1ec3d405
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Dec 19 21:32:46 2019 +0000

    clocksource/drivers/bcm2835_timer: Fix memory leak of timer
    
    [ Upstream commit 2052d032c06761330bca4944bb7858b00960e868 ]
    
    Currently when setup_irq fails the error exit path will leak the
    recently allocated timer structure.  Originally the code would
    throw a panic but a later commit changed the behaviour to return
    via the err_iounmap path and hence we now have a memory leak. Fix
    this by adding a err_timer_free error path that kfree's timer.
    
    Addresses-Coverity: ("Resource Leak")
    Fixes: 524a7f08983d ("clocksource/drivers/bcm2835_timer: Convert init function to return error")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191219213246.34437-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5422413ce56877f35415f6e4b53171e6e13ec4c1
Author: Joel Stanley <joel@jms.id.au>
Date:   Thu Nov 7 20:12:16 2019 +1030

    clocksource/drivers/fttmr010: Set interrupt and shutdown
    
    In preparation for supporting the ast2600, pass the shutdown and
    interrupt functions to the common init callback.
    
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191107094218.13210-3-joel@jms.id.au

commit 84fb64c28acd85ae4d29b9c81926bdfa5f1bf25e
Author: Joel Stanley <joel@jms.id.au>
Date:   Thu Nov 7 20:12:15 2019 +1030

    clocksource/drivers/fttmr010: Parametrise shutdown
    
    In preparation for supporting the ast2600 which uses a different method
    to clear bits in the control register, use a callback for performing the
    shutdown sequence.
    
    Reviewed-by: Cédric Le Goater <clg@kaod.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191107094218.13210-2-joel@jms.id.au

commit 4ec575b78521b4573e85aec451930cb040582455
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Jan 30 20:22:40 2020 +0100

    csky: Cleanup old Kconfig options
    
    CONFIG_CLKSRC_OF is gone since commit bb0eb050a577
    ("clocksource/drivers: Rename CLKSRC_OF to TIMER_OF").  The platform
    already selects TIMER_OF.
    
    CONFIG_HAVE_DMA_API_DEBUG is gone since commit 6e88628d03dd ("dma-debug:
    remove CONFIG_HAVE_DMA_API_DEBUG").
    
    CONFIG_DEFAULT_DEADLINE is gone since commit f382fb0bcef4 ("block:
    remove legacy IO schedulers").
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Guo Ren <guoren@linux.alibaba.com>

commit ae12e08539de6717502c2f9f83bd60df939b5c08
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Feb 7 13:39:02 2020 +0100

    lib/vdso: Allow fixed clock mode
    
    Some architectures have a fixed clocksource which is known at compile time
    and cannot be replaced or disabled at runtime, e.g. timebase on
    PowerPC. For such cases the clock mode check in the VDSO code is pointless.
    
    Move the check for a VDSO capable clocksource into an inline function and
    allow architectures to redefine it via a macro.
    
    [ tglx: Removed the #ifdef mess ]
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lkml.kernel.org/r/20200207124403.748756829@linutronix.de

commit c7a18100bdffdff440c7291db6e80863fab0461e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 7 13:39:00 2020 +0100

    lib/vdso: Avoid highres update if clocksource is not VDSO capable
    
    If the current clocksource is not VDSO capable there is no point in
    updating the high resolution parts of the VDSO data.
    
    Replace the architecture specific check with a check for a VDSO capable
    clocksource and skip the update if there is none.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lkml.kernel.org/r/20200207124403.563379423@linutronix.de

commit 5e3c6a312a0946d2d83e32359612cbb925a8bed0
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 7 13:38:58 2020 +0100

    ARM/arm64: vdso: Use common vdso clock mode storage
    
    Convert ARM/ARM64 to the generic VDSO clock mode storage. This needs to
    happen in one go as they share the clocksource driver.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lkml.kernel.org/r/20200207124403.363235229@linutronix.de

commit 5d51bee725cc1497352d6b0b604e42a90c680540
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 7 13:38:55 2020 +0100

    clocksource: Add common vdso clock mode storage
    
    All architectures which use the generic VDSO code have their own storage
    for the VDSO clock mode. That's pointless and just requires duplicate code.
    
    Provide generic storage for it. The new Kconfig symbol is intermediate and
    will be removed once all architectures are converted over.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lkml.kernel.org/r/20200207124403.028046322@linutronix.de

commit eec399dd862762b9594df3659f15839a4e12f17a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 7 13:38:54 2020 +0100

    x86/vdso: Move VDSO clocksource state tracking to callback
    
    All architectures which use the generic VDSO code have their own storage
    for the VDSO clock mode. That's pointless and just requires duplicate code.
    
    X86 abuses the function which retrieves the architecture specific clock
    mode storage to mark the clocksource as used in the VDSO. That's silly
    because this is invoked on every tick when the VDSO data is updated.
    
    Move this functionality to the clocksource::enable() callback so it gets
    invoked once when the clocksource is installed. This allows to make the
    clock mode storage generic.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>  (Hyper-V parts)
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com> (VDSO parts)
    Acked-by: Juergen Gross <jgross@suse.com> (Xen parts)
    Link: https://lkml.kernel.org/r/20200207124402.934519777@linutronix.de

commit 3bd142a46b561a12408e8db78cc6d62eb1c6b84e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 7 13:38:53 2020 +0100

    clocksource: Cleanup struct clocksource and documentation
    
    Reformat the struct definition, add missing member documentation.
    No functional change.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lkml.kernel.org/r/20200207124402.825471920@linutronix.de

commit 1dff4156d1f63b525c54aea7f097a657cbbbf837
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 7 13:38:50 2020 +0100

    lib/vdso: Allow the high resolution parts to be compiled out
    
    If the architecture knows at compile time that there is no VDSO capable
    clocksource supported it makes sense to optimize the guts of the high
    resolution parts of the VDSO out at build time. Add a helper function to
    check whether the VDSO should be high resolution capable and provide a stub
    which can be overridden by an architecture.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lkml.kernel.org/r/20200207124402.530143168@linutronix.de

commit 78560d41064ad3d377e3d1a1ee87526301f4e946
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 7 13:38:49 2020 +0100

    ARM: vdso: Remove unused function
    
    The function is nowhere used. Aside of that this check should only cover
    the high resolution parts of the VDSO which require a VDSO capable
    clocksource and not the complete functionality as the name suggests. Will
    be replaced with something more useful.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lkml.kernel.org/r/20200207124402.438179009@linutronix.de

commit 50e818715821b89c7abac90a97721f106e893d83
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 7 13:38:48 2020 +0100

    x86/vdso: Mark the TSC clocksource path likely
    
    Jumping out of line for the TSC clcoksource read is creating awful
    code. TSC is likely to be the clocksource at least on bare metal and the PV
    interfaces are sufficiently more work that the jump over the TSC read is
    just in the noise.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lkml.kernel.org/r/20200207124402.328922847@linutronix.de

commit 2106d26897f9341ddb7ad74bfc5867808cec927a
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jan 31 19:08:59 2020 +0300

    clocksource: Prevent double add_timer_on() for watchdog_timer
    
    commit febac332a819f0e764aa4da62757ba21d18c182b upstream.
    
    Kernel crashes inside QEMU/KVM are observed:
    
      kernel BUG at kernel/time/timer.c:1154!
      BUG_ON(timer_pending(timer) || !timer->function) in add_timer_on().
    
    At the same time another cpu got:
    
      general protection fault: 0000 [#1] SMP PTI of poinson pointer 0xdead000000000200 in:
    
      __hlist_del at include/linux/list.h:681
      (inlined by) detach_timer at kernel/time/timer.c:818
      (inlined by) expire_timers at kernel/time/timer.c:1355
      (inlined by) __run_timers at kernel/time/timer.c:1686
      (inlined by) run_timer_softirq at kernel/time/timer.c:1699
    
    Unfortunately kernel logs are badly scrambled, stacktraces are lost.
    
    Printing the timer->function before the BUG_ON() pointed to
    clocksource_watchdog().
    
    The execution of clocksource_watchdog() can race with a sequence of
    clocksource_stop_watchdog() .. clocksource_start_watchdog():
    
    expire_timers()
     detach_timer(timer, true);
      timer->entry.pprev = NULL;
     raw_spin_unlock_irq(&base->lock);
     call_timer_fn
      clocksource_watchdog()
    
                                            clocksource_watchdog_kthread() or
                                            clocksource_unbind()
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_stop_watchdog();
                                             del_timer(&watchdog_timer);
                                             watchdog_running = 0;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_start_watchdog();
                                             add_timer_on(&watchdog_timer, ...);
                                             watchdog_running = 1;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
      spin_lock(&watchdog_lock);
      add_timer_on(&watchdog_timer, ...);
       BUG_ON(timer_pending(timer) || !timer->function);
        timer_pending() -> true
        BUG()
    
    I.e. inside clocksource_watchdog() watchdog_timer could be already armed.
    
    Check timer_pending() before calling add_timer_on(). This is sufficient as
    all operations are synchronized by watchdog_lock.
    
    Fixes: 75c5158f70c0 ("timekeeping: Update clocksource with stop_machine")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/158048693917.4378.13823603769948933793.stgit@buzz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75fc4654a244504683f322ccbeff293f8578a3a3
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jan 31 19:08:59 2020 +0300

    clocksource: Prevent double add_timer_on() for watchdog_timer
    
    commit febac332a819f0e764aa4da62757ba21d18c182b upstream.
    
    Kernel crashes inside QEMU/KVM are observed:
    
      kernel BUG at kernel/time/timer.c:1154!
      BUG_ON(timer_pending(timer) || !timer->function) in add_timer_on().
    
    At the same time another cpu got:
    
      general protection fault: 0000 [#1] SMP PTI of poinson pointer 0xdead000000000200 in:
    
      __hlist_del at include/linux/list.h:681
      (inlined by) detach_timer at kernel/time/timer.c:818
      (inlined by) expire_timers at kernel/time/timer.c:1355
      (inlined by) __run_timers at kernel/time/timer.c:1686
      (inlined by) run_timer_softirq at kernel/time/timer.c:1699
    
    Unfortunately kernel logs are badly scrambled, stacktraces are lost.
    
    Printing the timer->function before the BUG_ON() pointed to
    clocksource_watchdog().
    
    The execution of clocksource_watchdog() can race with a sequence of
    clocksource_stop_watchdog() .. clocksource_start_watchdog():
    
    expire_timers()
     detach_timer(timer, true);
      timer->entry.pprev = NULL;
     raw_spin_unlock_irq(&base->lock);
     call_timer_fn
      clocksource_watchdog()
    
                                            clocksource_watchdog_kthread() or
                                            clocksource_unbind()
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_stop_watchdog();
                                             del_timer(&watchdog_timer);
                                             watchdog_running = 0;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_start_watchdog();
                                             add_timer_on(&watchdog_timer, ...);
                                             watchdog_running = 1;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
      spin_lock(&watchdog_lock);
      add_timer_on(&watchdog_timer, ...);
       BUG_ON(timer_pending(timer) || !timer->function);
        timer_pending() -> true
        BUG()
    
    I.e. inside clocksource_watchdog() watchdog_timer could be already armed.
    
    Check timer_pending() before calling add_timer_on(). This is sufficient as
    all operations are synchronized by watchdog_lock.
    
    Fixes: 75c5158f70c0 ("timekeeping: Update clocksource with stop_machine")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/158048693917.4378.13823603769948933793.stgit@buzz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d663366beefb8fa80e168af11820e1fd73532623
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jan 31 19:08:59 2020 +0300

    clocksource: Prevent double add_timer_on() for watchdog_timer
    
    commit febac332a819f0e764aa4da62757ba21d18c182b upstream.
    
    Kernel crashes inside QEMU/KVM are observed:
    
      kernel BUG at kernel/time/timer.c:1154!
      BUG_ON(timer_pending(timer) || !timer->function) in add_timer_on().
    
    At the same time another cpu got:
    
      general protection fault: 0000 [#1] SMP PTI of poinson pointer 0xdead000000000200 in:
    
      __hlist_del at include/linux/list.h:681
      (inlined by) detach_timer at kernel/time/timer.c:818
      (inlined by) expire_timers at kernel/time/timer.c:1355
      (inlined by) __run_timers at kernel/time/timer.c:1686
      (inlined by) run_timer_softirq at kernel/time/timer.c:1699
    
    Unfortunately kernel logs are badly scrambled, stacktraces are lost.
    
    Printing the timer->function before the BUG_ON() pointed to
    clocksource_watchdog().
    
    The execution of clocksource_watchdog() can race with a sequence of
    clocksource_stop_watchdog() .. clocksource_start_watchdog():
    
    expire_timers()
     detach_timer(timer, true);
      timer->entry.pprev = NULL;
     raw_spin_unlock_irq(&base->lock);
     call_timer_fn
      clocksource_watchdog()
    
                                            clocksource_watchdog_kthread() or
                                            clocksource_unbind()
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_stop_watchdog();
                                             del_timer(&watchdog_timer);
                                             watchdog_running = 0;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_start_watchdog();
                                             add_timer_on(&watchdog_timer, ...);
                                             watchdog_running = 1;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
      spin_lock(&watchdog_lock);
      add_timer_on(&watchdog_timer, ...);
       BUG_ON(timer_pending(timer) || !timer->function);
        timer_pending() -> true
        BUG()
    
    I.e. inside clocksource_watchdog() watchdog_timer could be already armed.
    
    Check timer_pending() before calling add_timer_on(). This is sufficient as
    all operations are synchronized by watchdog_lock.
    
    Fixes: 75c5158f70c0 ("timekeeping: Update clocksource with stop_machine")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/158048693917.4378.13823603769948933793.stgit@buzz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b568627307dfe1e4f6b0bd8c9a95550ac12351cd
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed Feb 12 14:05:37 2020 +0800

    arm64: dts: mt8173: add arm,no-tick-in-suspend in timer
    
    Arch timer stops during system suspend. Add arm,no-tick-in-suspend
    property in timer.
    
    This is a follow up for d8ec7595a013
    ("clocksource/drivers/arm_arch_timer: Don't assume clock runs in
    suspend")
    
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>

commit 5afe1951d0391c71051d74e1030319dc87ce237d
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jan 31 19:08:59 2020 +0300

    clocksource: Prevent double add_timer_on() for watchdog_timer
    
    commit febac332a819f0e764aa4da62757ba21d18c182b upstream.
    
    Kernel crashes inside QEMU/KVM are observed:
    
      kernel BUG at kernel/time/timer.c:1154!
      BUG_ON(timer_pending(timer) || !timer->function) in add_timer_on().
    
    At the same time another cpu got:
    
      general protection fault: 0000 [#1] SMP PTI of poinson pointer 0xdead000000000200 in:
    
      __hlist_del at include/linux/list.h:681
      (inlined by) detach_timer at kernel/time/timer.c:818
      (inlined by) expire_timers at kernel/time/timer.c:1355
      (inlined by) __run_timers at kernel/time/timer.c:1686
      (inlined by) run_timer_softirq at kernel/time/timer.c:1699
    
    Unfortunately kernel logs are badly scrambled, stacktraces are lost.
    
    Printing the timer->function before the BUG_ON() pointed to
    clocksource_watchdog().
    
    The execution of clocksource_watchdog() can race with a sequence of
    clocksource_stop_watchdog() .. clocksource_start_watchdog():
    
    expire_timers()
     detach_timer(timer, true);
      timer->entry.pprev = NULL;
     raw_spin_unlock_irq(&base->lock);
     call_timer_fn
      clocksource_watchdog()
    
                                            clocksource_watchdog_kthread() or
                                            clocksource_unbind()
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_stop_watchdog();
                                             del_timer(&watchdog_timer);
                                             watchdog_running = 0;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_start_watchdog();
                                             add_timer_on(&watchdog_timer, ...);
                                             watchdog_running = 1;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
      spin_lock(&watchdog_lock);
      add_timer_on(&watchdog_timer, ...);
       BUG_ON(timer_pending(timer) || !timer->function);
        timer_pending() -> true
        BUG()
    
    I.e. inside clocksource_watchdog() watchdog_timer could be already armed.
    
    Check timer_pending() before calling add_timer_on(). This is sufficient as
    all operations are synchronized by watchdog_lock.
    
    Fixes: 75c5158f70c0 ("timekeeping: Update clocksource with stop_machine")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/158048693917.4378.13823603769948933793.stgit@buzz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1318034e9e90180ed233b609b249c316205d056
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jan 31 19:08:59 2020 +0300

    clocksource: Prevent double add_timer_on() for watchdog_timer
    
    commit febac332a819f0e764aa4da62757ba21d18c182b upstream.
    
    Kernel crashes inside QEMU/KVM are observed:
    
      kernel BUG at kernel/time/timer.c:1154!
      BUG_ON(timer_pending(timer) || !timer->function) in add_timer_on().
    
    At the same time another cpu got:
    
      general protection fault: 0000 [#1] SMP PTI of poinson pointer 0xdead000000000200 in:
    
      __hlist_del at include/linux/list.h:681
      (inlined by) detach_timer at kernel/time/timer.c:818
      (inlined by) expire_timers at kernel/time/timer.c:1355
      (inlined by) __run_timers at kernel/time/timer.c:1686
      (inlined by) run_timer_softirq at kernel/time/timer.c:1699
    
    Unfortunately kernel logs are badly scrambled, stacktraces are lost.
    
    Printing the timer->function before the BUG_ON() pointed to
    clocksource_watchdog().
    
    The execution of clocksource_watchdog() can race with a sequence of
    clocksource_stop_watchdog() .. clocksource_start_watchdog():
    
    expire_timers()
     detach_timer(timer, true);
      timer->entry.pprev = NULL;
     raw_spin_unlock_irq(&base->lock);
     call_timer_fn
      clocksource_watchdog()
    
                                            clocksource_watchdog_kthread() or
                                            clocksource_unbind()
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_stop_watchdog();
                                             del_timer(&watchdog_timer);
                                             watchdog_running = 0;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_start_watchdog();
                                             add_timer_on(&watchdog_timer, ...);
                                             watchdog_running = 1;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
      spin_lock(&watchdog_lock);
      add_timer_on(&watchdog_timer, ...);
       BUG_ON(timer_pending(timer) || !timer->function);
        timer_pending() -> true
        BUG()
    
    I.e. inside clocksource_watchdog() watchdog_timer could be already armed.
    
    Check timer_pending() before calling add_timer_on(). This is sufficient as
    all operations are synchronized by watchdog_lock.
    
    Fixes: 75c5158f70c0 ("timekeeping: Update clocksource with stop_machine")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/158048693917.4378.13823603769948933793.stgit@buzz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6284d30e96ede11d9d434eebfacbe4b4625b6c87
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jan 31 19:08:59 2020 +0300

    clocksource: Prevent double add_timer_on() for watchdog_timer
    
    commit febac332a819f0e764aa4da62757ba21d18c182b upstream.
    
    Kernel crashes inside QEMU/KVM are observed:
    
      kernel BUG at kernel/time/timer.c:1154!
      BUG_ON(timer_pending(timer) || !timer->function) in add_timer_on().
    
    At the same time another cpu got:
    
      general protection fault: 0000 [#1] SMP PTI of poinson pointer 0xdead000000000200 in:
    
      __hlist_del at include/linux/list.h:681
      (inlined by) detach_timer at kernel/time/timer.c:818
      (inlined by) expire_timers at kernel/time/timer.c:1355
      (inlined by) __run_timers at kernel/time/timer.c:1686
      (inlined by) run_timer_softirq at kernel/time/timer.c:1699
    
    Unfortunately kernel logs are badly scrambled, stacktraces are lost.
    
    Printing the timer->function before the BUG_ON() pointed to
    clocksource_watchdog().
    
    The execution of clocksource_watchdog() can race with a sequence of
    clocksource_stop_watchdog() .. clocksource_start_watchdog():
    
    expire_timers()
     detach_timer(timer, true);
      timer->entry.pprev = NULL;
     raw_spin_unlock_irq(&base->lock);
     call_timer_fn
      clocksource_watchdog()
    
                                            clocksource_watchdog_kthread() or
                                            clocksource_unbind()
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_stop_watchdog();
                                             del_timer(&watchdog_timer);
                                             watchdog_running = 0;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_start_watchdog();
                                             add_timer_on(&watchdog_timer, ...);
                                             watchdog_running = 1;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
      spin_lock(&watchdog_lock);
      add_timer_on(&watchdog_timer, ...);
       BUG_ON(timer_pending(timer) || !timer->function);
        timer_pending() -> true
        BUG()
    
    I.e. inside clocksource_watchdog() watchdog_timer could be already armed.
    
    Check timer_pending() before calling add_timer_on(). This is sufficient as
    all operations are synchronized by watchdog_lock.
    
    Fixes: 75c5158f70c0 ("timekeeping: Update clocksource with stop_machine")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/158048693917.4378.13823603769948933793.stgit@buzz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fbc23c738350f1a47007da7ad92ae2e4ea63951
Merge: f06bed87d7cd febac332a819
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Feb 9 12:00:12 2020 -0800

    Merge tag 'timers-urgent-2020-02-09' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "Two small fixes for the time(r) subsystem:
    
       - Handle a subtle race between the clocksource watchdog and a
         concurrent clocksource watchdog stop/start sequence correctly to
         prevent a timer double add bug.
    
       - Fix the file path for the core time namespace file"
    
    * tag 'timers-urgent-2020-02-09' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: Prevent double add_timer_on() for watchdog_timer
      MAINTAINERS: Correct path to time namespace source file

commit 4ef1a30c6bd2555d4177fc9286df32e9166d58ba
Merge: 5939224ccdcc a832eb203ecd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Feb 8 14:17:27 2020 -0800

    Merge tag 'armsoc-late' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC late updates from Olof Johansson:
     "This is some material that we picked up into our tree late, or that
      had more complex dependencies on more than one topic branch that makes
      sense to keep separately.
    
       - TI support for secure accelerators and hwrng on OMAP4/5
    
       - TI camera changes for dra7 and am437x and SGX improvement due to
         better reset control support on am335x, am437x and dra7
    
       - Davinci moves to proper clocksource on DM365, and regulator/audio
         improvements for DM365 and DM644x eval boards"
    
    * tag 'armsoc-late' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (32 commits)
      ARM: dts: omap4-droid4: Enable hdq for droid4 ds250x 1-wire battery nvmem
      ARM: dts: motorola-cpcap-mapphone: Configure calibration interrupt
      ARM: dts: Configure interconnect target module for am437x sgx
      ARM: dts: Configure sgx for dra7
      ARM: dts: Configure rstctrl reset for am335x SGX
      ARM: dts: dra7: Add ti-sysc node for VPE
      ARM: dts: dra7: add vpe clkctrl node
      ARM: dts: am43x-epos-evm: Add VPFE and OV2659 entries
      ARM: dts: am437x-sk-evm: Add VPFE and OV2659 entries
      ARM: dts: am43xx: add support for clkout1 clock
      arm: dts: dra76-evm: Add CAL and OV5640 nodes
      arm: dtsi: dra76x: Add CAL dtsi node
      arm: dts: dra72-evm-common: Add entries for the CSI2 cameras
      ARM: dts: DRA72: Add CAL dtsi node
      ARM: dts: dra7-l4: Add ti-sysc node for CAM
      ARM: OMAP: DRA7xx: Make CAM clock domain SWSUP only
      ARM: dts: dra7: add cam clkctrl node
      ARM: OMAP2+: Drop legacy platform data for omap4 des
      ARM: OMAP2+: Drop legacy platform data for omap4 sham
      ARM: OMAP2+: Drop legacy platform data for omap4 aes
      ...

commit febac332a819f0e764aa4da62757ba21d18c182b
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Fri Jan 31 19:08:59 2020 +0300

    clocksource: Prevent double add_timer_on() for watchdog_timer
    
    Kernel crashes inside QEMU/KVM are observed:
    
      kernel BUG at kernel/time/timer.c:1154!
      BUG_ON(timer_pending(timer) || !timer->function) in add_timer_on().
    
    At the same time another cpu got:
    
      general protection fault: 0000 [#1] SMP PTI of poinson pointer 0xdead000000000200 in:
    
      __hlist_del at include/linux/list.h:681
      (inlined by) detach_timer at kernel/time/timer.c:818
      (inlined by) expire_timers at kernel/time/timer.c:1355
      (inlined by) __run_timers at kernel/time/timer.c:1686
      (inlined by) run_timer_softirq at kernel/time/timer.c:1699
    
    Unfortunately kernel logs are badly scrambled, stacktraces are lost.
    
    Printing the timer->function before the BUG_ON() pointed to
    clocksource_watchdog().
    
    The execution of clocksource_watchdog() can race with a sequence of
    clocksource_stop_watchdog() .. clocksource_start_watchdog():
    
    expire_timers()
     detach_timer(timer, true);
      timer->entry.pprev = NULL;
     raw_spin_unlock_irq(&base->lock);
     call_timer_fn
      clocksource_watchdog()
    
                                            clocksource_watchdog_kthread() or
                                            clocksource_unbind()
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_stop_watchdog();
                                             del_timer(&watchdog_timer);
                                             watchdog_running = 0;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
                                            spin_lock_irqsave(&watchdog_lock, flags);
                                            clocksource_start_watchdog();
                                             add_timer_on(&watchdog_timer, ...);
                                             watchdog_running = 1;
                                            spin_unlock_irqrestore(&watchdog_lock, flags);
    
      spin_lock(&watchdog_lock);
      add_timer_on(&watchdog_timer, ...);
       BUG_ON(timer_pending(timer) || !timer->function);
        timer_pending() -> true
        BUG()
    
    I.e. inside clocksource_watchdog() watchdog_timer could be already armed.
    
    Check timer_pending() before calling add_timer_on(). This is sufficient as
    all operations are synchronized by watchdog_lock.
    
    Fixes: 75c5158f70c0 ("timekeeping: Update clocksource with stop_machine")
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/158048693917.4378.13823603769948933793.stgit@buzz

commit 064ce3a17203f7c07d688aaad005f59aee96c3a9
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: Call timer_interrupt() with interrupts disabled
    
    [ Upstream commit 1efdd4bd254311498123a15fa0acd565f454da97 ]
    
    Some platforms execute their timer handler with the interrupt priority
    level set below 6. That means the handler could be interrupted by another
    driver and this could lead to re-entry of the timer core.
    
    Avoid this by use of local_irq_save/restore for timer interrupt dispatch.
    This provides mutual exclusion around the timer interrupt flag access
    which is needed later in this series for the clocksource conversion.
    
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/alpine.DEB.2.21.1811131407120.2697@nanos.tec.linutronix.de
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd274151b494c39aef19707a28a828d2bfc9ba18
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Oct 18 11:57:04 2018 +0200

    clocksource/drivers/exynos_mct: Fix error path in timer resources initialization
    
    [ Upstream commit b9307420196009cdf18bad55e762ac49fb9a80f4 ]
    
    While freeing interrupt handlers in error path, don't assume that all
    requested interrupts are per-processor interrupts and properly release
    standard interrupts too.
    
    Reported-by: Krzysztof Kozlowski <krzk@kernel.org>
    Fixes: 56a94f13919c ("clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81bb1613d374cd0e902fce313167880fdfbc1bf6
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Jan 10 14:22:07 2019 +0800

    clocksource/drivers/sun5i: Fail gracefully when clock rate is unavailable
    
    [ Upstream commit e7e7e0d7beafebd11b0c065cd5fbc1e5759c5aab ]
    
    If the clock tree is not fully populated when the timer-sun5i init code
    is called, attempts to get the clock rate for the timer would fail and
    return 0.
    
    Make the init code for both clock events and clocksource check the
    returned clock rate and fail gracefully if the result is 0, instead of
    causing a divide by 0 exception later on.
    
    Fixes: 4a59058f0b09 ("clocksource/drivers/sun5i: Refactor the current code")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb0d764eb0f5663b1d93935a72c29c496ec4f5cc
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: Call timer_interrupt() with interrupts disabled
    
    [ Upstream commit 1efdd4bd254311498123a15fa0acd565f454da97 ]
    
    Some platforms execute their timer handler with the interrupt priority
    level set below 6. That means the handler could be interrupted by another
    driver and this could lead to re-entry of the timer core.
    
    Avoid this by use of local_irq_save/restore for timer interrupt dispatch.
    This provides mutual exclusion around the timer interrupt flag access
    which is needed later in this series for the clocksource conversion.
    
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/alpine.DEB.2.21.1811131407120.2697@nanos.tec.linutronix.de
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40ae643c0790d6e22a10dd7865bc75090b04ff6a
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Jan 10 14:22:07 2019 +0800

    clocksource/drivers/sun5i: Fail gracefully when clock rate is unavailable
    
    [ Upstream commit e7e7e0d7beafebd11b0c065cd5fbc1e5759c5aab ]
    
    If the clock tree is not fully populated when the timer-sun5i init code
    is called, attempts to get the clock rate for the timer would fail and
    return 0.
    
    Make the init code for both clock events and clocksource check the
    returned clock rate and fail gracefully if the result is 0, instead of
    causing a divide by 0 exception later on.
    
    Fixes: 4a59058f0b09 ("clocksource/drivers/sun5i: Refactor the current code")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e279160f491392f1345f6eb4b0eeec5a6a2ecdd7
Merge: 534b0a8b6774 fd928f3e32ba
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 27 16:47:05 2020 -0800

    Merge tag 'timers-core-2020-01-27' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The timekeeping and timers departement provides:
    
       - Time namespace support:
    
         If a container migrates from one host to another then it expects
         that clocks based on MONOTONIC and BOOTTIME are not subject to
         disruption. Due to different boot time and non-suspended runtime
         these clocks can differ significantly on two hosts, in the worst
         case time goes backwards which is a violation of the POSIX
         requirements.
    
         The time namespace addresses this problem. It allows to set offsets
         for clock MONOTONIC and BOOTTIME once after creation and before
         tasks are associated with the namespace. These offsets are taken
         into account by timers and timekeeping including the VDSO.
    
         Offsets for wall clock based clocks (REALTIME/TAI) are not provided
         by this mechanism. While in theory possible, the overhead and code
         complexity would be immense and not justified by the esoteric
         potential use cases which were discussed at Plumbers '18.
    
         The overhead for tasks in the root namespace (ie where host time
         offsets = 0) is in the noise and great effort was made to ensure
         that especially in the VDSO. If time namespace is disabled in the
         kernel configuration the code is compiled out.
    
         Kudos to Andrei Vagin and Dmitry Sofanov who implemented this
         feature and kept on for more than a year addressing review
         comments, finding better solutions. A pleasant experience.
    
       - Overhaul of the alarmtimer device dependency handling to ensure
         that the init/suspend/resume ordering is correct.
    
       - A new clocksource/event driver for Microchip PIT64
    
       - Suspend/resume support for the Hyper-V clocksource
    
       - The usual pile of fixes, updates and improvements mostly in the
         driver code"
    
    * tag 'timers-core-2020-01-27' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (71 commits)
      alarmtimer: Make alarmtimer_get_rtcdev() a stub when CONFIG_RTC_CLASS=n
      alarmtimer: Use wakeup source from alarmtimer platform device
      alarmtimer: Make alarmtimer platform device child of RTC device
      alarmtimer: Update alarmtimer_get_rtcdev() docs to reflect reality
      hrtimer: Add missing sparse annotation for __run_timer()
      lib/vdso: Only read hrtimer_res when needed in __cvdso_clock_getres()
      MIPS: vdso: Define BUILD_VDSO32 when building a 32bit kernel
      clocksource/drivers/hyper-v: Set TSC clocksource as default w/ InvariantTSC
      clocksource/drivers/hyper-v: Untangle stimers and timesync from clocksources
      clocksource/drivers/timer-microchip-pit64b: Fix sparse warning
      clocksource/drivers/exynos_mct: Rename Exynos to lowercase
      clocksource/drivers/timer-ti-dm: Fix uninitialized pointer access
      clocksource/drivers/timer-ti-dm: Switch to platform_get_irq
      clocksource/drivers/timer-ti-dm: Convert to devm_platform_ioremap_resource
      clocksource/drivers/em_sti: Fix variable declaration in em_sti_probe
      clocksource/drivers/em_sti: Convert to devm_platform_ioremap_resource
      clocksource/drivers/bcm2835_timer: Fix memory leak of timer
      clocksource/drivers/cadence-ttc: Use ttc driver as platform driver
      clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support
      clocksource/drivers/hyper-v: Reserve PAGE_SIZE space for tsc page
      ...

commit a56c41e5d766871231828046f477611d6ee7d2db
Merge: b1dba2473114 9f24c540f7f8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 27 16:37:40 2020 -0800

    Merge tag 'timers-urgent-2020-01-27' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "Two fixes for the generic VDSO code which missed 5.5:
    
       - Make the update to the coarse timekeeper unconditional.
    
         This is required because the coarse timekeeper interfaces in the
         VDSO do not depend on a VDSO capable clocksource. If the system
         does not have a VDSO capable clocksource and the update is
         depending on the VDSO capable clocksource, the coarse VDSO
         interfaces would operate on stale data forever.
    
       - Invert the logic of __arch_update_vdso_data() to avoid further head
         scratching.
    
         Tripped over this several times while analyzing the update problem
         above"
    
    * tag 'timers-urgent-2020-01-27' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      lib/vdso: Update coarse timekeeper unconditionally
      lib/vdso: Make __arch_update_vdso_data() logic understandable

commit a832eb203ecd34e486bdde0042cf166e687eb227
Merge: 19d52e94e083 5e06d19694a4
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Jan 27 07:36:40 2020 -0800

    Merge tag 'davinci-for-v5.6/soc' of git://git.kernel.org/pub/scm/linux/kernel/git/nsekhar/linux-davinci into arm/late
    
    DaVinci SoC updates for v5.6 include migrating DM365 SoC to use
    drivers/clocksource based driver for timer. This leads to removal
    of machine specific timer driver.
    
    There are two patches adding missing fixed regulators for audio codecs
    on DM365 and DM644x EVMs.
    
    * tag 'davinci-for-v5.6/soc' of git://git.kernel.org/pub/scm/linux/kernel/git/nsekhar/linux-davinci:
      ARM: davinci: dm644x-evm: Add Fixed regulators needed for tlv320aic33
      ARM: davinci: dm365-evm: Add Fixed regulators needed for tlv320aic3101
      ARM: davinci: remove legacy timer support
      ARM: davinci: dm365: switch to using the clocksource driver
      clocksource: davinci: only enable clockevents once tim34 is initialized
    
    Link: https://lore.kernel.org/r/043eb5b2-a302-4de6-a3e8-8238e49483b1@ti.com/
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit a825e9a7ced544fafc7fdf23cc19ff7216d518ac
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: Call timer_interrupt() with interrupts disabled
    
    [ Upstream commit 1efdd4bd254311498123a15fa0acd565f454da97 ]
    
    Some platforms execute their timer handler with the interrupt priority
    level set below 6. That means the handler could be interrupted by another
    driver and this could lead to re-entry of the timer core.
    
    Avoid this by use of local_irq_save/restore for timer interrupt dispatch.
    This provides mutual exclusion around the timer interrupt flag access
    which is needed later in this series for the clocksource conversion.
    
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/alpine.DEB.2.21.1811131407120.2697@nanos.tec.linutronix.de
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45f525b36eefc53da24c1bfb86165629c7bd6801
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Oct 18 11:57:04 2018 +0200

    clocksource/drivers/exynos_mct: Fix error path in timer resources initialization
    
    [ Upstream commit b9307420196009cdf18bad55e762ac49fb9a80f4 ]
    
    While freeing interrupt handlers in error path, don't assume that all
    requested interrupts are per-processor interrupts and properly release
    standard interrupts too.
    
    Reported-by: Krzysztof Kozlowski <krzk@kernel.org>
    Fixes: 56a94f13919c ("clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bdfc04f016633638c46ae99349a4ecd3c0f51bf
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Jan 10 14:22:07 2019 +0800

    clocksource/drivers/sun5i: Fail gracefully when clock rate is unavailable
    
    [ Upstream commit e7e7e0d7beafebd11b0c065cd5fbc1e5759c5aab ]
    
    If the clock tree is not fully populated when the timer-sun5i init code
    is called, attempts to get the clock rate for the timer would fail and
    return 0.
    
    Make the init code for both clock events and clocksource check the
    returned clock rate and fail gracefully if the result is 0, instead of
    causing a divide by 0 exception later on.
    
    Fixes: 4a59058f0b09 ("clocksource/drivers/sun5i: Refactor the current code")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4127249099b796b1fd5c74562ce94b94cda38553
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: Call timer_interrupt() with interrupts disabled
    
    [ Upstream commit 1efdd4bd254311498123a15fa0acd565f454da97 ]
    
    Some platforms execute their timer handler with the interrupt priority
    level set below 6. That means the handler could be interrupted by another
    driver and this could lead to re-entry of the timer core.
    
    Avoid this by use of local_irq_save/restore for timer interrupt dispatch.
    This provides mutual exclusion around the timer interrupt flag access
    which is needed later in this series for the clocksource conversion.
    
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/alpine.DEB.2.21.1811131407120.2697@nanos.tec.linutronix.de
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba95507ae390062f5af1e8de76c8161fcc69eade
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Oct 18 11:57:04 2018 +0200

    clocksource/drivers/exynos_mct: Fix error path in timer resources initialization
    
    [ Upstream commit b9307420196009cdf18bad55e762ac49fb9a80f4 ]
    
    While freeing interrupt handlers in error path, don't assume that all
    requested interrupts are per-processor interrupts and properly release
    standard interrupts too.
    
    Reported-by: Krzysztof Kozlowski <krzk@kernel.org>
    Fixes: 56a94f13919c ("clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc423232fb93e234e8e43edc0ca1cda830e48e21
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Jan 10 14:22:07 2019 +0800

    clocksource/drivers/sun5i: Fail gracefully when clock rate is unavailable
    
    [ Upstream commit e7e7e0d7beafebd11b0c065cd5fbc1e5759c5aab ]
    
    If the clock tree is not fully populated when the timer-sun5i init code
    is called, attempts to get the clock rate for the timer would fail and
    return 0.
    
    Make the init code for both clock events and clocksource check the
    returned clock rate and fail gracefully if the result is 0, instead of
    causing a divide by 0 exception later on.
    
    Fixes: 4a59058f0b09 ("clocksource/drivers/sun5i: Refactor the current code")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f24c540f7f8eb3a981528da9a9a636a5bdf5987
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 14 19:52:39 2020 +0100

    lib/vdso: Update coarse timekeeper unconditionally
    
    The low resolution parts of the VDSO, i.e.:
    
      clock_gettime(CLOCK_*_COARSE), clock_getres(), time()
    
    can be used even if there is no VDSO capable clocksource.
    
    But if an architecture opts out of the VDSO data update then this
    information becomes stale. This affects ARM when there is no architected
    timer available. The lack of update causes userspace to use stale data
    forever.
    
    Make the update of the low resolution parts unconditional and only skip
    the update of the high resolution parts if the architecture requests it.
    
    Fixes: 44f57d788e7d ("timekeeping: Provide a generic update_vsyscall() implementation")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20200114185946.765577901@linutronix.de

commit a67ca893ae0a228bed889ede27ed65fd46aa469c
Merge: 49a101d7169c 9e0333ae38ee
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jan 16 22:24:54 2020 +0100

    Merge tag 'timers-v5.5-rc6' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/events driver updates from Daniel Lezcano
    
      - Add suspend/resume for Hyper-V clocksource (Dexuan Cui)
    
      - Fix Kconfig indentation (Krzysztof Kozlowski)
    
      - Add SoC specific bindings for RZ/G2N (r8a774b1) (Biju Das)
    
      - Add Microchip PIT64B support (Claudiu Beznea)
    
      - Convert the cadence ttc driver to a platform driver to initialize
        later (Rajan Vaja)
    
      - Fix a memory leak when the initialization fails on bcm2835 (Colin
        Ian King)
    
      - Use the combo devm_platform_ioremap_resource() function for em-sti,
        ti-dm and switch to platform_get_irq (Yangtao Li)
    
      - Fix Exynos naming in the driver (Krzysztof Kozlowski)
    
      - Fix an uninitialized pointer access in ti-dm timer (Tony Lindgren)
    
      - Fix a sparse warning in microchip-pit64b (Claudiu Beznea)
    
      - Code reorg without functional changes for Hyper-V clocksource
        (Andrea Parri)
    
      - Decrease the Hyper-V clocksource rating in order to let the stable
        TSC to be selected instead (Andrea Parri)

commit 9e0333ae38eeb42249e10f95d209244a6e22ac9f
Author: Andrea Parri <parri.andrea@gmail.com>
Date:   Thu Jan 9 17:06:50 2020 +0100

    clocksource/drivers/hyper-v: Set TSC clocksource as default w/ InvariantTSC
    
    Change the Hyper-V clocksource ratings to 250, below the TSC clocksource
    rating of 300.  In configurations where Hyper-V offers an InvariantTSC,
    the TSC is not marked "unstable", so the TSC clocksource is available
    and preferred.  With the higher rating, it will be the default.  On
    older hardware and Hyper-V versions, the TSC is marked "unstable", so no
    TSC clocksource is created and the selected Hyper-V clocksource will be
    the default.
    
    Signed-off-by: Andrea Parri <parri.andrea@gmail.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200109160650.16150-3-parri.andrea@gmail.com

commit 0af3e137c144377fbaf5025ba784ff5ba7ad40c9
Author: Andrea Parri <parri.andrea@gmail.com>
Date:   Thu Jan 9 17:06:49 2020 +0100

    clocksource/drivers/hyper-v: Untangle stimers and timesync from clocksources
    
    hyperv_timer.c exports hyperv_cs, which is used by stimers and the
    timesync mechanism.  However, the clocksource dependency is not
    needed: these mechanisms only depend on the partition reference
    counter (which can be read via a MSR or via the TSC Reference Page).
    
    Introduce the (function) pointer hv_read_reference_counter, as an
    embodiment of the partition reference counter read, and export it
    in place of the hyperv_cs pointer.  The latter can be removed.
    
    This should clarify that there's no relationship between Hyper-V
    stimers & timesync and the Linux clocksource abstractions.  No
    functional or semantic change.
    
    Suggested-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Andrea Parri <parri.andrea@gmail.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200109160650.16150-2-parri.andrea@gmail.com

commit b9c60a741f06eda56d12c7216accb317b74266b4
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Mon Jan 6 11:58:08 2020 +0200

    clocksource/drivers/timer-microchip-pit64b: Fix sparse warning
    
    Fix sparse warning:
    "warning: Using plain integer as NULL pointer"
    
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1578304688-14882-1-git-send-email-claudiu.beznea@microchip.com

commit 4ad35346da9cb99c02a4c5e99633c36f8f344be0
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Sat Jan 4 16:20:58 2020 +0100

    clocksource/drivers/exynos_mct: Rename Exynos to lowercase
    
    Fix up inconsistent usage of upper and lowercase letters in "Exynos"
    name.
    
    "EXYNOS" is not an abbreviation but a regular trademarked name.
    Therefore it should be written with lowercase letters starting with
    capital letter.
    
    The lowercase "Exynos" name is promoted by its manufacturer Samsung
    Electronics Co., Ltd., in advertisement materials and on website.
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200104152107.11407-12-krzk@kernel.org

commit 4341067cfc20582195f47383cf059589b2641465
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Jan 6 12:37:00 2020 -0800

    clocksource/drivers/timer-ti-dm: Fix uninitialized pointer access
    
    Clean-up commit 8c82723414d5 ("clocksource/drivers/timer-ti-dm: Switch to
    platform_get_irq") caused a regression where we now try to access
    uninitialized data for timer:
    
    drivers/clocksource/timer-ti-dm.c: In function 'omap_dm_timer_probe':
    drivers/clocksource/timer-ti-dm.c:798:13: warning: 'timer' may be used
    uninitialized in this function [-Wmaybe-uninitialized]
    
    On boot we now get:
    
    Unable to handle kernel NULL pointer dereference at virtual address
    00000004
    ...
    (omap_dm_timer_probe) from [<c061ac7c>] (platform_drv_probe+0x48/0x98)
    (platform_drv_probe) from [<c0618c04>] (really_probe+0x1dc/0x348)
    (really_probe) from [<c0618ef4>] (driver_probe_device+0x5c/0x160)
    
    Let's fix the issue by moving platform_get_irq to happen after timer has
    been allocated.
    
    Fixes: bc83caddf17b ("clocksource/drivers/timer-ti-dm: Switch to platform_get_irq")
    Cc: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Olof Johansson <olof@lixom.net>
    Acked-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200106203700.21009-1-tony@atomide.com

commit bc83caddf17bd592cc19887e252c4ba416484d79
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sat Dec 21 17:30:27 2019 +0000

    clocksource/drivers/timer-ti-dm: Switch to platform_get_irq
    
    platform_get_resource(pdev, IORESOURCE_IRQ) is not recommended for
    requesting IRQ's resources, as they can be not ready yet. Using
    platform_get_irq() instead is preferred for getting IRQ even if it
    was not retrieved earlier.
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191221173027.30716-5-tiny.windzz@gmail.com

commit cdab83f9d0fb13926f6633f20c3327545fd6f70f
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sat Dec 21 17:30:26 2019 +0000

    clocksource/drivers/timer-ti-dm: Convert to devm_platform_ioremap_resource
    
    Use devm_platform_ioremap_resource() to simplify code, which
    wraps 'platform_get_resource' and 'devm_ioremap_resource' in a
    single helper.
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191221173027.30716-4-tiny.windzz@gmail.com

commit ba25322edd600300e55cd58eb7fbdf9cbdc5a82d
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sat Dec 21 17:30:25 2019 +0000

    clocksource/drivers/em_sti: Fix variable declaration in em_sti_probe
    
    'irq' and 'ret' are variables of the same type and there is no
    need to use two lines.
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191221173027.30716-3-tiny.windzz@gmail.com

commit 9a97b2fb070d497c683aed9fb86b7ec5245cea86
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sat Dec 21 17:30:24 2019 +0000

    clocksource/drivers/em_sti: Convert to devm_platform_ioremap_resource
    
    Use devm_platform_ioremap_resource() to simplify code, which
    wraps 'platform_get_resource' and 'devm_ioremap_resource' in a
    single helper.
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191221173027.30716-2-tiny.windzz@gmail.com

commit 2052d032c06761330bca4944bb7858b00960e868
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Dec 19 21:32:46 2019 +0000

    clocksource/drivers/bcm2835_timer: Fix memory leak of timer
    
    Currently when setup_irq fails the error exit path will leak the
    recently allocated timer structure.  Originally the code would
    throw a panic but a later commit changed the behaviour to return
    via the err_iounmap path and hence we now have a memory leak. Fix
    this by adding a err_timer_free error path that kfree's timer.
    
    Addresses-Coverity: ("Resource Leak")
    Fixes: 524a7f08983d ("clocksource/drivers/bcm2835_timer: Convert init function to return error")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191219213246.34437-1-colin.king@canonical.com

commit f5ac896b6a23eb46681cdbef440c1d991b04e519
Author: Rajan Vaja <rajan.vaja@xilinx.com>
Date:   Thu Nov 7 02:36:28 2019 -0800

    clocksource/drivers/cadence-ttc: Use ttc driver as platform driver
    
    Currently TTC driver is TIMER_OF_DECLARE type driver. Because of
    that, TTC driver may be initialized before other clock drivers. If
    TTC driver is dependent on that clock driver then initialization of
    TTC driver will failed.
    
    So use TTC driver as platform driver instead of using
    TIMER_OF_DECLARE.
    
    Signed-off-by: Rajan Vaja <rajan.vaja@xilinx.com>
    Tested-by: Michal Simek <michal.simek@xilinx.com>
    Acked-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1573122988-18399-1-git-send-email-rajan.vaja@xilinx.com

commit 625022a5f160619ae180d54097ddd65bb3795913
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Fri Dec 13 13:19:21 2019 +0200

    clocksource/drivers/timer-microchip-pit64b: Add Microchip PIT64B support
    
    Add driver for Microchip PIT64B timer. Timer could be used in continuous
    mode or oneshot mode. The hardware has 2x32 bit registers for period
    emulating a 64 bit timer. The LSB_PR and MSB_PR registers are used to
    set the period value (compare value). TLSB and TMSB keeps the current
    value of the counter. After a compare the TLSB and TMSB register resets.
    The driver uses PIT64B timer for clocksource or clockevent. First
    requested timer would be registered as clockevent, second one would be
    registered as clocksource. Individual PIT64B hardware resources were
    used for clocksource and clockevent to be able to support high resolution
    timers with this hardware implementation.
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1576235962-30123-3-git-send-email-claudiu.beznea@microchip.com

commit ddc61bbc45017726a2b450350d476b4dc5ae25ce
Author: Boqun Feng <boqun.feng@gmail.com>
Date:   Tue Nov 26 10:17:20 2019 +0800

    clocksource/drivers/hyper-v: Reserve PAGE_SIZE space for tsc page
    
    Currently, the reserved size for a tsc page is 4K, which is enough for
    communicating with hypervisor. However, in the case where we want to
    export the tsc page to userspace (e.g. for vDSO to read the
    clocksource), the tsc page should be at least PAGE_SIZE, otherwise, when
    PAGE_SIZE is larger than 4K, extra kernel data will be mapped into
    userspace, which means leaking kernel information.
    
    Therefore reserve PAGE_SIZE space for tsc_pg as a preparation for the
    vDSO support of ARM64 in the future. Also, while at it, replace all
    reference to tsc_pg with hv_get_tsc_page() since it should be the only
    interface to access tsc page.
    
    Signed-off-by: Boqun Feng (Microsoft) <boqun.feng@gmail.com>
    Cc: linux-hyperv@vger.kernel.org
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191126021723.4710-1-boqun.feng@gmail.com

commit 062934634dc3ae38baeb9961dcc80c44a00ffcf2
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Nov 27 21:10:22 2019 -0800

    clocksource: Fix Kconfig miscues
    
    Fix lots of typo, spelling, punctuation, and grammar miscues in
    drivers/clocksource/Kconfig.
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/4deb42a9-82f2-72f9-891f-972a9a399f4f@infradead.org

commit 9ca9fe69eedb483c0811a4db7cb94942edfb1404
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Wed Nov 20 21:42:36 2019 +0800

    clocksource: Fix Kconfig indentation
    
    Adjust indentation from spaces to tab (+optional two spaces) as in
    coding style with command like:
            $ sed -e 's/^        /\t/' -i */Kconfig
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191120134236.15959-1-krzk@kernel.org

commit 1349401ff1aa425e7381ed26feb63e0d6b557fc6
Author: Dexuan Cui <decui@microsoft.com>
Date:   Tue Nov 19 23:12:26 2019 -0800

    clocksource/drivers/hyper-v: Suspend/resume Hyper-V clocksource for hibernation
    
    This is needed for hibernation, e.g. when we resume the old kernel, we need
    to disable the "current" kernel's TSC page and then resume the old kernel's.
    
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/1574233946-48377-1-git-send-email-decui@microsoft.com

commit 6b49d4fbcbc2ad98c234da2b344865508eed7bf4
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Jan 10 18:16:43 2020 +0100

    ARM: davinci: remove legacy timer support
    
    All platforms have now been switched to the new clocksource driver.
    Remove the old code and various no longer needed bits and pieces.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit 20eb43540bd05fce8655747bec3af950eccc7eb0
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Jan 10 18:16:42 2020 +0100

    ARM: davinci: dm365: switch to using the clocksource driver
    
    We now have a proper clocksource driver for davinci. Switch the dm365
    platform to using it.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit cea931c25104e6bddc42eb067f58193f355dbdd7
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Jan 10 18:16:41 2020 +0100

    clocksource: davinci: only enable clockevents once tim34 is initialized
    
    The DM365 platform has a strange quirk (only present when using ancient
    u-boot - mainline u-boot v2013.01 and later works fine) where if we
    enable the second half of the timer in periodic mode before we do its
    initialization - the time won't start flowing and we can't boot.
    
    When using more recent u-boot, we can enable the timer, then reinitialize
    it and all works fine.
    
    To work around this issue only enable clockevents once tim34 is
    initialized i.e. move clockevents_config_and_register() below tim34
    initialization.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit b3757ec3d9bf8697508dbd8fae2f5860806611f7
Author: Zong Li <zong.li@sifive.com>
Date:   Mon Dec 23 16:46:14 2019 +0800

    clocksource: riscv: add notrace to riscv_sched_clock
    
    commit 9d05c18e8d7de566ff68f221fcae65e78708dd1d upstream.
    
    When enabling ftrace graph tracer, it gets the tracing clock in
    ftrace_push_return_trace().  Eventually, it invokes riscv_sched_clock()
    to get the clock value.  If riscv_sched_clock() isn't marked with
    'notrace', it will call ftrace_push_return_trace() and cause infinite
    loop.
    
    The result of failure as follow:
    
    command: echo function_graph >current_tracer
    [   46.176787] Unable to handle kernel paging request at virtual address ffffffe04fb38c48
    [   46.177309] Oops [#1]
    [   46.177478] Modules linked in:
    [   46.177770] CPU: 0 PID: 256 Comm: $d Not tainted 5.5.0-rc1 #47
    [   46.177981] epc: ffffffe00035e59a ra : ffffffe00035e57e sp : ffffffe03a7569b0
    [   46.178216]  gp : ffffffe000d29b90 tp : ffffffe03a756180 t0 : ffffffe03a756968
    [   46.178430]  t1 : ffffffe00087f408 t2 : ffffffe03a7569a0 s0 : ffffffe03a7569f0
    [   46.178643]  s1 : ffffffe00087f408 a0 : 0000000ac054cda4 a1 : 000000000087f411
    [   46.178856]  a2 : 0000000ac054cda4 a3 : 0000000000373ca0 a4 : ffffffe04fb38c48
    [   46.179099]  a5 : 00000000153e22a8 a6 : 00000000005522ff a7 : 0000000000000005
    [   46.179338]  s2 : ffffffe03a756a90 s3 : ffffffe00032811c s4 : ffffffe03a756a58
    [   46.179570]  s5 : ffffffe000d29fe0 s6 : 0000000000000001 s7 : 0000000000000003
    [   46.179809]  s8 : 0000000000000003 s9 : 0000000000000002 s10: 0000000000000004
    [   46.180053]  s11: 0000000000000000 t3 : 0000003fc815749c t4 : 00000000000efc90
    [   46.180293]  t5 : ffffffe000d29658 t6 : 0000000000040000
    [   46.180482] status: 0000000000000100 badaddr: ffffffe04fb38c48 cause: 000000000000000f
    
    Signed-off-by: Zong Li <zong.li@sifive.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    [paul.walmsley@sifive.com: cleaned up patch description]
    Fixes: 92e0d143fdef ("clocksource/drivers/riscv_timer: Provide the sched_clock")
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8821e92879a397b7ad318cc7e8ba784f588f872a
Merge: 51e40a0dbe53 c79f46a28239
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Wed Jan 8 11:13:25 2020 +0100

    Merge tag 'v5.5-rc5' into patchwork
    
    Linux 5.5-rc5
    
    * tag 'v5.5-rc5': (1006 commits)
      Linux 5.5-rc5
      Documentation: riscv: add patch acceptance guidelines
      riscv: prefix IRQ_ macro names with an RV_ namespace
      clocksource: riscv: add notrace to riscv_sched_clock
      apparmor: fix aa_xattrs_match() may sleep while holding a RCU lock
      hexagon: define ioremap_uc
      ocfs2: fix the crash due to call ocfs2_get_dlm_debug once less
      ocfs2: call journal flush to mark journal as empty after journal recovery when mount
      mm/hugetlb: defer freeing of huge pages if in non-task context
      mm/gup: fix memory leak in __gup_benchmark_ioctl
      mm/oom: fix pgtables units mismatch in Killed process message
      fs/posix_acl.c: fix kernel-doc warnings
      hexagon: work around compiler crash
      hexagon: parenthesize registers in asm predicates
      fs/namespace.c: make to_mnt_ns() static
      fs/nsfs.c: include headers for missing declarations
      fs/direct-io.c: include fs/internal.h for missing prototype
      mm: move_pages: return valid node id in status if the page is already on the target node
      memcg: account security cred as well to kmemcg
      kcov: fix struct layout for kcov_remote_arg
      ...

commit 768fc661d12559b0dbd99d941b3bf28fe92fd365
Merge: 36487907f341 0e194d9da198
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jan 5 11:15:31 2020 -0800

    Merge tag 'riscv/for-v5.5-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux
    
    Pull RISC-V fixes from Paul Walmsley:
     "Several fixes for RISC-V:
    
       - Fix function graph trace support
    
       - Prefix the CSR IRQ_* macro names with "RV_", to avoid collisions
         with macros elsewhere in the Linux kernel tree named "IRQ_TIMER"
    
       - Use __pa_symbol() when computing the physical address of a kernel
         symbol, rather than __pa()
    
       - Mark the RISC-V port as supporting GCOV
    
      One DT addition:
    
       - Describe the L2 cache controller in the FU540 DT file
    
      One documentation update:
    
       - Add patch acceptance guideline documentation"
    
    * tag 'riscv/for-v5.5-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux:
      Documentation: riscv: add patch acceptance guidelines
      riscv: prefix IRQ_ macro names with an RV_ namespace
      clocksource: riscv: add notrace to riscv_sched_clock
      riscv: ftrace: correct the condition logic in function graph tracer
      riscv: dts: Add DT support for SiFive L2 cache controller
      riscv: gcov: enable gcov for RISC-V
      riscv: mm: use __pa_symbol for kernel symbols

commit 9d05c18e8d7de566ff68f221fcae65e78708dd1d
Author: Zong Li <zong.li@sifive.com>
Date:   Mon Dec 23 16:46:14 2019 +0800

    clocksource: riscv: add notrace to riscv_sched_clock
    
    When enabling ftrace graph tracer, it gets the tracing clock in
    ftrace_push_return_trace().  Eventually, it invokes riscv_sched_clock()
    to get the clock value.  If riscv_sched_clock() isn't marked with
    'notrace', it will call ftrace_push_return_trace() and cause infinite
    loop.
    
    The result of failure as follow:
    
    command: echo function_graph >current_tracer
    [   46.176787] Unable to handle kernel paging request at virtual address ffffffe04fb38c48
    [   46.177309] Oops [#1]
    [   46.177478] Modules linked in:
    [   46.177770] CPU: 0 PID: 256 Comm: $d Not tainted 5.5.0-rc1 #47
    [   46.177981] epc: ffffffe00035e59a ra : ffffffe00035e57e sp : ffffffe03a7569b0
    [   46.178216]  gp : ffffffe000d29b90 tp : ffffffe03a756180 t0 : ffffffe03a756968
    [   46.178430]  t1 : ffffffe00087f408 t2 : ffffffe03a7569a0 s0 : ffffffe03a7569f0
    [   46.178643]  s1 : ffffffe00087f408 a0 : 0000000ac054cda4 a1 : 000000000087f411
    [   46.178856]  a2 : 0000000ac054cda4 a3 : 0000000000373ca0 a4 : ffffffe04fb38c48
    [   46.179099]  a5 : 00000000153e22a8 a6 : 00000000005522ff a7 : 0000000000000005
    [   46.179338]  s2 : ffffffe03a756a90 s3 : ffffffe00032811c s4 : ffffffe03a756a58
    [   46.179570]  s5 : ffffffe000d29fe0 s6 : 0000000000000001 s7 : 0000000000000003
    [   46.179809]  s8 : 0000000000000003 s9 : 0000000000000002 s10: 0000000000000004
    [   46.180053]  s11: 0000000000000000 t3 : 0000003fc815749c t4 : 00000000000efc90
    [   46.180293]  t5 : ffffffe000d29658 t6 : 0000000000040000
    [   46.180482] status: 0000000000000100 badaddr: ffffffe04fb38c48 cause: 000000000000000f
    
    Signed-off-by: Zong Li <zong.li@sifive.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    [paul.walmsley@sifive.com: cleaned up patch description]
    Fixes: 92e0d143fdef ("clocksource/drivers/riscv_timer: Provide the sched_clock")
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>

commit c420ddda506b80ec2686e405698d37fafeea3b7a
Merge: 5613970af3f5 bbcc5672b006
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jan 4 14:16:57 2020 -0800

    Merge tag 'mips_fixes_5.5_1' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux
    
    Pull MIPS fixes from Paul Burton:
     "A collection of MIPS fixes:
    
       - Fill the struct cacheinfo shared_cpu_map field with sensible
         values, notably avoiding issues with perf which was unhappy in the
         absence of these values.
    
       - A boot fix for Loongson 2E & 2F machines which was fallout from
         some refactoring performed this cycle.
    
       - A Kconfig dependency fix for the Loongson CPU HWMon driver.
    
       - A couple of VDSO fixes, ensuring gettimeofday() behaves
         appropriately for kernel configurations that don't include support
         for a clocksource the VDSO can use & fixing the calling convention
         for the n32 & n64 VDSOs which would previously clobber the $gp/$28
         register.
    
       - A build fix for vmlinuz compressed images which were
         inappropriately building with -fsanitize-coverage despite not being
         part of the kernel proper, then failing to link due to the missing
         __sanitizer_cov_trace_pc() function.
    
       - A couple of eBPF JIT fixes, including disabling it for MIPS32 due
         to a large number of issues with the code generated there &
         reflecting ISA dependencies in Kconfig to enforce that systems
         which don't support the JIT must include the interpreter"
    
    * tag 'mips_fixes_5.5_1' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux:
      MIPS: Avoid VDSO ABI breakage due to global register variable
      MIPS: BPF: eBPF JIT: check for MIPS ISA compliance in Kconfig
      MIPS: BPF: Disable MIPS32 eBPF JIT
      MIPS: Prevent link failure with kcov instrumentation
      MIPS: Kconfig: Use correct form for 'depends on'
      mips: Fix gettimeofday() in the vdso library
      MIPS: Fix boot on Fuloong2 systems
      mips: cacheinfo: report shared CPU map

commit 139ca605c35eb3cc3dbee53803b89ea37b01367b
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 16 16:47:45 2019 +0200

    clocksource/drivers/timer-of: Use unique device name instead of timer
    
    [ Upstream commit 4411464d6f8b5e5759637235a6f2b2a85c2be0f1 ]
    
    If a hardware-specific driver does not provide a name, the timer-of core
    falls back to device_node.name.  Due to generic DT node naming policies,
    that name is almost always "timer", and thus doesn't identify the actual
    timer used.
    
    Fix this by using device_node.full_name instead, which includes the unit
    addrees.
    
    Example impact on /proc/timer_list:
    
        -Clock Event Device: timer
        +Clock Event Device: timer@fcfec400
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016144747.29538-3-geert+renesas@glider.be
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9e1fc5b6f0cebeca4f7b19145e8d63187419d51
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Oct 16 20:43:30 2019 +0800

    clocksource/drivers/asm9260: Add a check for of_clk_get
    
    [ Upstream commit 6e001f6a4cc73cd06fc7b8c633bc4906c33dd8ad ]
    
    asm9260_timer_init misses a check for of_clk_get.
    Add a check for it and print errors like other clocksource drivers.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016124330.22211-1-hslester96@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e62b02df5c031ce80a4a8ffae897cb031b78d62
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 16 16:47:45 2019 +0200

    clocksource/drivers/timer-of: Use unique device name instead of timer
    
    [ Upstream commit 4411464d6f8b5e5759637235a6f2b2a85c2be0f1 ]
    
    If a hardware-specific driver does not provide a name, the timer-of core
    falls back to device_node.name.  Due to generic DT node naming policies,
    that name is almost always "timer", and thus doesn't identify the actual
    timer used.
    
    Fix this by using device_node.full_name instead, which includes the unit
    addrees.
    
    Example impact on /proc/timer_list:
    
        -Clock Event Device: timer
        +Clock Event Device: timer@fcfec400
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016144747.29538-3-geert+renesas@glider.be
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55bdcb2ecb006831b76a18d4ef7a3b13860bc1b7
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Oct 16 20:43:30 2019 +0800

    clocksource/drivers/asm9260: Add a check for of_clk_get
    
    [ Upstream commit 6e001f6a4cc73cd06fc7b8c633bc4906c33dd8ad ]
    
    asm9260_timer_init misses a check for of_clk_get.
    Add a check for it and print errors like other clocksource drivers.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016124330.22211-1-hslester96@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6017fdd186e7d11a8990ae3827c69efee4185848
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Oct 16 20:43:30 2019 +0800

    clocksource/drivers/asm9260: Add a check for of_clk_get
    
    [ Upstream commit 6e001f6a4cc73cd06fc7b8c633bc4906c33dd8ad ]
    
    asm9260_timer_init misses a check for of_clk_get.
    Add a check for it and print errors like other clocksource drivers.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016124330.22211-1-hslester96@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f56519e9abe7a219055a1ee1d0523b57746311a2
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Oct 16 20:43:30 2019 +0800

    clocksource/drivers/asm9260: Add a check for of_clk_get
    
    [ Upstream commit 6e001f6a4cc73cd06fc7b8c633bc4906c33dd8ad ]
    
    asm9260_timer_init misses a check for of_clk_get.
    Add a check for it and print errors like other clocksource drivers.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016124330.22211-1-hslester96@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0eba4f1059ca1b99ad2e8eded69d7b3bb0e8116
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Oct 16 20:43:30 2019 +0800

    clocksource/drivers/asm9260: Add a check for of_clk_get
    
    [ Upstream commit 6e001f6a4cc73cd06fc7b8c633bc4906c33dd8ad ]
    
    asm9260_timer_init misses a check for of_clk_get.
    Add a check for it and print errors like other clocksource drivers.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016124330.22211-1-hslester96@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ded0d65fd775966a5115c0468dd02eda4cb855a1
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Oct 16 18:38:16 2019 +0800

    x86/quirks: Disable HPET on Intel Coffe Lake platforms
    
    commit fc5db58539b49351e76f19817ed1102bf7c712d0 upstream.
    
    Some Coffee Lake platforms have a skewed HPET timer once the SoCs entered
    PC10, which in consequence marks TSC as unstable because HPET is used as
    watchdog clocksource for TSC.
    
    Harry Pan tried to work around it in the clocksource watchdog code [1]
    thereby creating a circular dependency between HPET and TSC. This also
    ignores the fact, that HPET is not only unsuitable as watchdog clocksource
    on these systems, it becomes unusable in general.
    
    Disable HPET on affected platforms.
    
    Suggested-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203183
    Link: https://lore.kernel.org/lkml/20190516090651.1396-1-harry.pan@intel.com/ [1]
    Link: https://lkml.kernel.org/r/20191016103816.30650-1-kai.heng.feng@canonical.com
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit befe38cd27eacd0e77c760183fc526f3806f9fde
Author: Tao Ren <taoren@fb.com>
Date:   Wed Oct 3 14:53:50 2018 -0700

    clocksource/drivers/fttmr010: Fix invalid interrupt register access
    
    [ Upstream commit 86fe57fc47b17b3528fa5497fc57e158d846c4ea ]
    
    TIMER_INTR_MASK register (Base Address of Timer + 0x38) is not designed
    for masking interrupts on ast2500 chips, and it's not even listed in
    ast2400 datasheet, so it's not safe to access TIMER_INTR_MASK on aspeed
    chips.
    
    Similarly, TIMER_INTR_STATE register (Base Address of Timer + 0x34) is
    not interrupt status register on ast2400 and ast2500 chips. Although
    there is no side effect to reset the register in fttmr010_common_init(),
    it's just misleading to do so.
    
    Besides, "count_down" is renamed to "is_aspeed" in "fttmr010" structure,
    and more comments are added so the code is more readble.
    
    Signed-off-by: Tao Ren <taoren@fb.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eabcc2ff5060031a931727788f2a4a0772b5e424
Author: Tao Ren <taoren@fb.com>
Date:   Wed Oct 3 14:53:50 2018 -0700

    clocksource/drivers/fttmr010: Fix invalid interrupt register access
    
    [ Upstream commit 86fe57fc47b17b3528fa5497fc57e158d846c4ea ]
    
    TIMER_INTR_MASK register (Base Address of Timer + 0x38) is not designed
    for masking interrupts on ast2500 chips, and it's not even listed in
    ast2400 datasheet, so it's not safe to access TIMER_INTR_MASK on aspeed
    chips.
    
    Similarly, TIMER_INTR_STATE register (Base Address of Timer + 0x34) is
    not interrupt status register on ast2400 and ast2500 chips. Although
    there is no side effect to reset the register in fttmr010_common_init(),
    it's just misleading to do so.
    
    Besides, "count_down" is renamed to "is_aspeed" in "fttmr010" structure,
    and more comments are added so the code is more readble.
    
    Signed-off-by: Tao Ren <taoren@fb.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit daa2c40305100077535e8a7663db6eb4c6cad365
Author: Fabien Parent <fparent@baylibre.com>
Date:   Thu Sep 19 21:13:15 2019 +0200

    clocksource/drivers/mediatek: Fix error handling
    
    [ Upstream commit 41d49e7939de5ec532d86494185b2ca2e99c848a ]
    
    When timer_of_init fails, it cleans up after itself by undoing
    everything it did during the initialization function.
    
    mtk_syst_init and mtk_gpt_init both call timer_of_cleanup if
    timer_of_init fails. timer_of_cleanup try to release the resource
    taken.  Since these resources have already been cleaned up by
    timer_of_init, we end up getting a few warnings printed:
    
    [    0.001935] WARNING: CPU: 0 PID: 0 at __clk_put+0xe8/0x128
    [    0.002650] Modules linked in:
    [    0.003058] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.19.67+ #1
    [    0.003852] Hardware name: MediaTek MT8183 (DT)
    [    0.004446] pstate: 20400085 (nzCv daIf +PAN -UAO)
    [    0.005073] pc : __clk_put+0xe8/0x128
    [    0.005555] lr : clk_put+0xc/0x14
    [    0.005988] sp : ffffff80090b3ea0
    [    0.006422] x29: ffffff80090b3ea0 x28: 0000000040e20018
    [    0.007121] x27: ffffffc07bfff780 x26: 0000000000000001
    [    0.007819] x25: ffffff80090bda80 x24: ffffff8008ec5828
    [    0.008517] x23: ffffff80090bd000 x22: ffffff8008d8b2e8
    [    0.009216] x21: 0000000000000001 x20: fffffffffffffdfb
    [    0.009914] x19: ffffff8009166180 x18: 00000000002bffa8
    [    0.010612] x17: ffffffc012996980 x16: 0000000000000000
    [    0.011311] x15: ffffffbf004a6800 x14: 3536343038393334
    [    0.012009] x13: 2079726576652073 x12: 7eb9c62c5c38f100
    [    0.012707] x11: ffffff80090b3ba0 x10: ffffff80090b3ba0
    [    0.013405] x9 : 0000000000000004 x8 : 0000000000000040
    [    0.014103] x7 : ffffffc079400270 x6 : 0000000000000000
    [    0.014801] x5 : ffffffc079400248 x4 : 0000000000000000
    [    0.015499] x3 : 0000000000000000 x2 : 0000000000000000
    [    0.016197] x1 : ffffff80091661c0 x0 : fffffffffffffdfb
    [    0.016896] Call trace:
    [    0.017218]  __clk_put+0xe8/0x128
    [    0.017654]  clk_put+0xc/0x14
    [    0.018048]  timer_of_cleanup+0x60/0x7c
    [    0.018551]  mtk_syst_init+0x8c/0x9c
    [    0.019020]  timer_probe+0x6c/0xe0
    [    0.019469]  time_init+0x14/0x44
    [    0.019893]  start_kernel+0x2d0/0x46c
    [    0.020378] ---[ end trace 8c1efabea1267649 ]---
    [    0.020982] ------------[ cut here ]------------
    [    0.021586] Trying to vfree() nonexistent vm area ((____ptrval____))
    [    0.022427] WARNING: CPU: 0 PID: 0 at __vunmap+0xd0/0xd8
    [    0.023119] Modules linked in:
    [    0.023524] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G        W         4.19.67+ #1
    [    0.024498] Hardware name: MediaTek MT8183 (DT)
    [    0.025091] pstate: 60400085 (nZCv daIf +PAN -UAO)
    [    0.025718] pc : __vunmap+0xd0/0xd8
    [    0.026176] lr : __vunmap+0xd0/0xd8
    [    0.026632] sp : ffffff80090b3e90
    [    0.027066] x29: ffffff80090b3e90 x28: 0000000040e20018
    [    0.027764] x27: ffffffc07bfff780 x26: 0000000000000001
    [    0.028462] x25: ffffff80090bda80 x24: ffffff8008ec5828
    [    0.029160] x23: ffffff80090bd000 x22: ffffff8008d8b2e8
    [    0.029858] x21: 0000000000000000 x20: 0000000000000000
    [    0.030556] x19: ffffff800800d000 x18: 00000000002bffa8
    [    0.031254] x17: 0000000000000000 x16: 0000000000000000
    [    0.031952] x15: ffffffbf004a6800 x14: 3536343038393334
    [    0.032651] x13: 2079726576652073 x12: 7eb9c62c5c38f100
    [    0.033349] x11: ffffff80090b3b40 x10: ffffff80090b3b40
    [    0.034047] x9 : 0000000000000005 x8 : 5f5f6c6176727470
    [    0.034745] x7 : 5f5f5f5f28282061 x6 : ffffff80091c86ef
    [    0.035443] x5 : ffffff800852b690 x4 : 0000000000000000
    [    0.036141] x3 : 0000000000000002 x2 : 0000000000000002
    [    0.036839] x1 : 7eb9c62c5c38f100 x0 : 7eb9c62c5c38f100
    [    0.037536] Call trace:
    [    0.037859]  __vunmap+0xd0/0xd8
    [    0.038271]  vunmap+0x24/0x30
    [    0.038664]  __iounmap+0x2c/0x34
    [    0.039088]  timer_of_cleanup+0x70/0x7c
    [    0.039591]  mtk_syst_init+0x8c/0x9c
    [    0.040060]  timer_probe+0x6c/0xe0
    [    0.040507]  time_init+0x14/0x44
    [    0.040932]  start_kernel+0x2d0/0x46c
    
    This commit remove the calls to timer_of_cleanup when timer_of_init
    fails since it is unnecessary and actually cause warnings to be printed.
    
    Fixes: a0858f937960 ("mediatek: Convert the driver to timer-of")
    Signed-off-by: Fabien Parent <fparent@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/linux-arm-kernel/20190919191315.25190-1-fparent@baylibre.com/
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5c92066656ef5d05667afc0d54356e335f9f540
Author: Michael Zhivich <mzhivich@akamai.com>
Date:   Thu Oct 24 13:59:45 2019 -0400

    x86/tsc: Respect tsc command line paraemeter for clocksource_tsc_early
    
    [ Upstream commit 63ec58b44fcc05efd1542045abd7faf056ac27d9 ]
    
    The introduction of clocksource_tsc_early broke the functionality of
    "tsc=reliable" and "tsc=nowatchdog" command line parameters, since
    clocksource_tsc_early is unconditionally registered with
    CLOCK_SOURCE_MUST_VERIFY and thus put on the watchdog list.
    
    This can cause the TSC to be declared unstable during boot:
    
      clocksource: timekeeping watchdog on CPU0: Marking clocksource
                   'tsc-early' as unstable because the skew is too large:
      clocksource: 'refined-jiffies' wd_now: fffb7018 wd_last: fffb6e9d
                   mask: ffffffff
      clocksource: 'tsc-early' cs_now: 68a6a7070f6a0 cs_last: 68a69ab6f74d6
                   mask: ffffffffffffffff
      tsc: Marking TSC unstable due to clocksource watchdog
    
    The corresponding elapsed times are cs_nsec=1224152026 and wd_nsec=378942392, so
    the watchdog differs from TSC by 0.84 seconds.
    
    This happens when HPET is not available and jiffies are used as the TSC
    watchdog instead and the jiffies update is not happening due to lost timer
    interrupts in periodic mode, which can happen e.g. with expensive debug
    mechanisms enabled or under massive overload conditions in virtualized
    environments.
    
    Before the introduction of the early TSC clocksource the command line
    parameters "tsc=reliable" and "tsc=nowatchdog" could be used to work around
    this issue.
    
    Restore the behaviour by disabling the watchdog if requested on the kernel
    command line.
    
    [ tglx: Clarify changelog ]
    
    Fixes: aa83c45762a24 ("x86/tsc: Introduce early tsc clocksource")
    Signed-off-by: Michael Zhivich <mzhivich@akamai.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20191024175945.14338-1-mzhivich@akamai.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be41821915c2464e0110eda55d012a9beef28985
Author: Fabien Parent <fparent@baylibre.com>
Date:   Thu Sep 19 21:13:15 2019 +0200

    clocksource/drivers/mediatek: Fix error handling
    
    [ Upstream commit 41d49e7939de5ec532d86494185b2ca2e99c848a ]
    
    When timer_of_init fails, it cleans up after itself by undoing
    everything it did during the initialization function.
    
    mtk_syst_init and mtk_gpt_init both call timer_of_cleanup if
    timer_of_init fails. timer_of_cleanup try to release the resource
    taken.  Since these resources have already been cleaned up by
    timer_of_init, we end up getting a few warnings printed:
    
    [    0.001935] WARNING: CPU: 0 PID: 0 at __clk_put+0xe8/0x128
    [    0.002650] Modules linked in:
    [    0.003058] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.19.67+ #1
    [    0.003852] Hardware name: MediaTek MT8183 (DT)
    [    0.004446] pstate: 20400085 (nzCv daIf +PAN -UAO)
    [    0.005073] pc : __clk_put+0xe8/0x128
    [    0.005555] lr : clk_put+0xc/0x14
    [    0.005988] sp : ffffff80090b3ea0
    [    0.006422] x29: ffffff80090b3ea0 x28: 0000000040e20018
    [    0.007121] x27: ffffffc07bfff780 x26: 0000000000000001
    [    0.007819] x25: ffffff80090bda80 x24: ffffff8008ec5828
    [    0.008517] x23: ffffff80090bd000 x22: ffffff8008d8b2e8
    [    0.009216] x21: 0000000000000001 x20: fffffffffffffdfb
    [    0.009914] x19: ffffff8009166180 x18: 00000000002bffa8
    [    0.010612] x17: ffffffc012996980 x16: 0000000000000000
    [    0.011311] x15: ffffffbf004a6800 x14: 3536343038393334
    [    0.012009] x13: 2079726576652073 x12: 7eb9c62c5c38f100
    [    0.012707] x11: ffffff80090b3ba0 x10: ffffff80090b3ba0
    [    0.013405] x9 : 0000000000000004 x8 : 0000000000000040
    [    0.014103] x7 : ffffffc079400270 x6 : 0000000000000000
    [    0.014801] x5 : ffffffc079400248 x4 : 0000000000000000
    [    0.015499] x3 : 0000000000000000 x2 : 0000000000000000
    [    0.016197] x1 : ffffff80091661c0 x0 : fffffffffffffdfb
    [    0.016896] Call trace:
    [    0.017218]  __clk_put+0xe8/0x128
    [    0.017654]  clk_put+0xc/0x14
    [    0.018048]  timer_of_cleanup+0x60/0x7c
    [    0.018551]  mtk_syst_init+0x8c/0x9c
    [    0.019020]  timer_probe+0x6c/0xe0
    [    0.019469]  time_init+0x14/0x44
    [    0.019893]  start_kernel+0x2d0/0x46c
    [    0.020378] ---[ end trace 8c1efabea1267649 ]---
    [    0.020982] ------------[ cut here ]------------
    [    0.021586] Trying to vfree() nonexistent vm area ((____ptrval____))
    [    0.022427] WARNING: CPU: 0 PID: 0 at __vunmap+0xd0/0xd8
    [    0.023119] Modules linked in:
    [    0.023524] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G        W         4.19.67+ #1
    [    0.024498] Hardware name: MediaTek MT8183 (DT)
    [    0.025091] pstate: 60400085 (nZCv daIf +PAN -UAO)
    [    0.025718] pc : __vunmap+0xd0/0xd8
    [    0.026176] lr : __vunmap+0xd0/0xd8
    [    0.026632] sp : ffffff80090b3e90
    [    0.027066] x29: ffffff80090b3e90 x28: 0000000040e20018
    [    0.027764] x27: ffffffc07bfff780 x26: 0000000000000001
    [    0.028462] x25: ffffff80090bda80 x24: ffffff8008ec5828
    [    0.029160] x23: ffffff80090bd000 x22: ffffff8008d8b2e8
    [    0.029858] x21: 0000000000000000 x20: 0000000000000000
    [    0.030556] x19: ffffff800800d000 x18: 00000000002bffa8
    [    0.031254] x17: 0000000000000000 x16: 0000000000000000
    [    0.031952] x15: ffffffbf004a6800 x14: 3536343038393334
    [    0.032651] x13: 2079726576652073 x12: 7eb9c62c5c38f100
    [    0.033349] x11: ffffff80090b3b40 x10: ffffff80090b3b40
    [    0.034047] x9 : 0000000000000005 x8 : 5f5f6c6176727470
    [    0.034745] x7 : 5f5f5f5f28282061 x6 : ffffff80091c86ef
    [    0.035443] x5 : ffffff800852b690 x4 : 0000000000000000
    [    0.036141] x3 : 0000000000000002 x2 : 0000000000000002
    [    0.036839] x1 : 7eb9c62c5c38f100 x0 : 7eb9c62c5c38f100
    [    0.037536] Call trace:
    [    0.037859]  __vunmap+0xd0/0xd8
    [    0.038271]  vunmap+0x24/0x30
    [    0.038664]  __iounmap+0x2c/0x34
    [    0.039088]  timer_of_cleanup+0x70/0x7c
    [    0.039591]  mtk_syst_init+0x8c/0x9c
    [    0.040060]  timer_probe+0x6c/0xe0
    [    0.040507]  time_init+0x14/0x44
    [    0.040932]  start_kernel+0x2d0/0x46c
    
    This commit remove the calls to timer_of_cleanup when timer_of_init
    fails since it is unnecessary and actually cause warnings to be printed.
    
    Fixes: a0858f937960 ("mediatek: Convert the driver to timer-of")
    Signed-off-by: Fabien Parent <fparent@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/linux-arm-kernel/20190919191315.25190-1-fparent@baylibre.com/
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 043cf46825c102683b1027762c09c7e2b749e5a3
Merge: b22bfea7f16c 83bae01182ea
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 3 12:20:25 2019 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Ingo Molnar:
     "The main changes in the timer code in this cycle were:
    
       - Clockevent updates:
    
          - timer-of framework cleanups. (Geert Uytterhoeven)
    
          - Use timer-of for the renesas-ostm and the device name to prevent
            name collision in case of multiple timers. (Geert Uytterhoeven)
    
          - Check if there is an error after calling of_clk_get in asm9260
            (Chuhong Yuan)
    
       - ABI fix: Zero out high order bits of nanoseconds on compat
         syscalls. This got broken a year ago, with apparently no side
         effects so far.
    
         Since the kernel would use random data otherwise I don't think we'd
         have other options but to fix the bug, even if there was a side
         effect to applications (Dmitry Safonov)
    
       - Optimize ns_to_timespec64() on 32-bit systems: move away from
         div_s64_rem() which can be slow, to div_u64_rem() which is faster
         (Arnd Bergmann)
    
       - Annotate KCSAN-reported false positive data races in
         hrtimer_is_queued() users by moving timer->state handling over to
         the READ_ONCE()/WRITE_ONCE() APIs. This documents these accesses
         (Eric Dumazet)
    
       - Misc cleanups and small fixes"
    
    [ I undid the "ABI fix" and updated the comments instead. The reason
      there were apparently no side effects is that the fix was a no-op.
    
      The updated comment is to say _why_ it was a no-op.    - Linus ]
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      time: Zero the upper 32-bits in __kernel_timespec on 32-bit
      time: Rename tsk->real_start_time to ->start_boottime
      hrtimer: Remove the comment about not used HRTIMER_SOFTIRQ
      time: Fix spelling mistake in comment
      time: Optimize ns_to_timespec64()
      hrtimer: Annotate lockless access to timer->state
      clocksource/drivers/asm9260: Add a check for of_clk_get
      clocksource/drivers/renesas-ostm: Use unique device name instead of ostm
      clocksource/drivers/renesas-ostm: Convert to timer_of
      clocksource/drivers/timer-of: Use unique device name instead of timer
      clocksource/drivers/timer-of: Convert last full_name to %pOF

commit 2f41366258fde1ba0b7822e4b841206ff26d9236
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Mon Sep 10 23:22:16 2018 +0300

    clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines
    
    [ Upstream commit 37e7742c55ba856eaec7e35673ee370f36eb17f3 ]
    
    The driver seems to abuse *unsigned long* not only for the (32-bit)
    register values but also for the 'sh_cmt_channel::total_cycles' which
    needs to always be 64-bit -- as a result, the clocksource's mask is
    needlessly clamped down to 32-bits on the 32-bit machines...
    
    Fixes: 19bdc9d061bc ("clocksource: sh_cmt clocksource support")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2667a032c6207c9d058678d4f5f8422e20603aa
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Sat Sep 8 23:54:05 2018 +0300

    clocksource/drivers/sh_cmt: Fixup for 64-bit machines
    
    [ Upstream commit 22627c6f3ed3d9d0df13eec3c831b08f8186c38e ]
    
    When trying to use CMT for clockevents on R-Car gen3 SoCs, I noticed
    that 'max_delta_ns' for the broadcast timer (CMT) was shown as 1000 in
    /proc/timer_list. It turned out that when calculating it, the driver did
    1 << 32 (causing what I think was undefined behavior) resulting in a zero
    delta, later clamped to 1000 by cev_delta2ns(). The root cause turned out
    to be that the driver abused *unsigned long* for the CMT register values
    (which are 16/32-bit), so that the calculation of 'ch->max_match_value'
    in sh_cmt_setup_channel() used the wrong branch. Using more proper 'u32'
    instead fixed 'max_delta_ns' and even fixed the switching an active
    clocksource to CMT (which caused the system to turn non-interactive
    before).
    
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d97a02b84879e6434c61a74574de3d402dfb3d0a
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Mon Sep 10 23:22:16 2018 +0300

    clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines
    
    [ Upstream commit 37e7742c55ba856eaec7e35673ee370f36eb17f3 ]
    
    The driver seems to abuse *unsigned long* not only for the (32-bit)
    register values but also for the 'sh_cmt_channel::total_cycles' which
    needs to always be 64-bit -- as a result, the clocksource's mask is
    needlessly clamped down to 32-bits on the 32-bit machines...
    
    Fixes: 19bdc9d061bc ("clocksource: sh_cmt clocksource support")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31fb5ea6ed1b1f5dfcc88ec454fb9a6d313125d6
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Sat Sep 8 23:54:05 2018 +0300

    clocksource/drivers/sh_cmt: Fixup for 64-bit machines
    
    [ Upstream commit 22627c6f3ed3d9d0df13eec3c831b08f8186c38e ]
    
    When trying to use CMT for clockevents on R-Car gen3 SoCs, I noticed
    that 'max_delta_ns' for the broadcast timer (CMT) was shown as 1000 in
    /proc/timer_list. It turned out that when calculating it, the driver did
    1 << 32 (causing what I think was undefined behavior) resulting in a zero
    delta, later clamped to 1000 by cev_delta2ns(). The root cause turned out
    to be that the driver abused *unsigned long* for the CMT register values
    (which are 16/32-bit), so that the calculation of 'ch->max_match_value'
    in sh_cmt_setup_channel() used the wrong branch. Using more proper 'u32'
    instead fixed 'max_delta_ns' and even fixed the switching an active
    clocksource to CMT (which caused the system to turn non-interactive
    before).
    
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 001b43f3b4809e67ff32c09fdb6722b1cdb16e4a
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Oct 16 18:38:16 2019 +0800

    x86/quirks: Disable HPET on Intel Coffe Lake platforms
    
    commit fc5db58539b49351e76f19817ed1102bf7c712d0 upstream.
    
    Some Coffee Lake platforms have a skewed HPET timer once the SoCs entered
    PC10, which in consequence marks TSC as unstable because HPET is used as
    watchdog clocksource for TSC.
    
    Harry Pan tried to work around it in the clocksource watchdog code [1]
    thereby creating a circular dependency between HPET and TSC. This also
    ignores the fact, that HPET is not only unsuitable as watchdog clocksource
    on these systems, it becomes unusable in general.
    
    Disable HPET on affected platforms.
    
    Suggested-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203183
    Link: https://lore.kernel.org/lkml/20190516090651.1396-1-harry.pan@intel.com/ [1]
    Link: https://lkml.kernel.org/r/20191016103816.30650-1-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4df4cb9e99f83b70d54bc0e25081ac23cceafcbc
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Wed Nov 13 01:11:49 2019 +0000

    x86/hyperv: Initialize clockevents earlier in CPU onlining
    
    Hyper-V has historically initialized stimer-based clockevents late in the
    process of onlining a CPU because clockevents depend on stimer
    interrupts. In the original Hyper-V design, stimer interrupts generate a
    VMbus message, so the VMbus machinery must be running first, and VMbus
    can't be initialized until relatively late. On x86/64, LAPIC timer based
    clockevents are used during early initialization before VMbus and
    stimer-based clockevents are ready, and again during CPU offlining after
    the stimer clockevents have been shut down.
    
    Unfortunately, this design creates problems when offlining CPUs for
    hibernation or other purposes. stimer-based clockevents are shut down
    relatively early in the offlining process, so clockevents_unbind_device()
    must be used to fallback to the LAPIC-based clockevents for the remainder
    of the offlining process.  Furthermore, the late initialization and early
    shutdown of stimer-based clockevents doesn't work well on ARM64 since there
    is no other timer like the LAPIC to fallback to. So CPU onlining and
    offlining doesn't work properly.
    
    Fix this by recognizing that stimer Direct Mode is the normal path for
    newer versions of Hyper-V on x86/64, and the only path on other
    architectures. With stimer Direct Mode, stimer interrupts don't require any
    VMbus machinery. stimer clockevents can be initialized and shut down
    consistent with how it is done for other clockevent devices. While the old
    VMbus-based stimer interrupts must still be supported for backward
    compatibility on x86, that mode of operation can be treated as legacy.
    
    So add a new Hyper-V stimer entry in the CPU hotplug state list, and use
    that new state when in Direct Mode. Update the Hyper-V clocksource driver
    to allocate and initialize stimer clockevents earlier during boot. Update
    Hyper-V initialization and the VMbus driver to use this new design. As a
    result, the LAPIC timer is no longer used during boot or CPU
    onlining/offlining and clockevents_unbind_device() is not called.  But
    retain the old design as a legacy implementation for older versions of
    Hyper-V that don't support Direct Mode.
    
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Link: https://lkml.kernel.org/r/1573607467-9456-1-git-send-email-mikelley@microsoft.com

commit 86db36a347b4ea030ee3e6c73ce04e35e4732999
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Tue Nov 12 02:11:54 2019 +0200

    net: dsa: sja1105: Implement state machine for TAS with PTP clock source
    
    Tested using the following bash script and the tc from iproute2-next:
    
            #!/bin/bash
    
            set -e -u -o pipefail
    
            NSEC_PER_SEC="1000000000"
    
            gatemask() {
                    local tc_list="$1"
                    local mask=0
    
                    for tc in ${tc_list}; do
                            mask=$((${mask} | (1 << ${tc})))
                    done
    
                    printf "%02x" ${mask}
            }
    
            if ! systemctl is-active --quiet ptp4l; then
                    echo "Please start the ptp4l service"
                    exit
            fi
    
            now=$(phc_ctl /dev/ptp1 get | gawk '/clock time is/ { print $5; }')
            # Phase-align the base time to the start of the next second.
            sec=$(echo "${now}" | gawk -F. '{ print $1; }')
            base_time="$(((${sec} + 1) * ${NSEC_PER_SEC}))"
    
            tc qdisc add dev swp5 parent root handle 100 taprio \
                    num_tc 8 \
                    map 0 1 2 3 5 6 7 \
                    queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 \
                    base-time ${base_time} \
                    sched-entry S $(gatemask 7) 100000 \
                    sched-entry S $(gatemask "0 1 2 3 4 5 6") 400000 \
                    clockid CLOCK_TAI flags 2
    
    The "state machine" is a workqueue invoked after each manipulation
    command on the PTP clock (reset, adjust time, set time, adjust
    frequency) which checks over the state of the time-aware scheduler.
    So it is not monitored periodically, only in reaction to a PTP command
    typically triggered from a userspace daemon (linuxptp). Otherwise there
    is no reason for things to go wrong.
    
    Now that the timecounter/cyclecounter has been replaced with hardware
    operations on the PTP clock, the TAS Kconfig now depends upon PTP and
    the standalone clocksource operating mode has been removed.
    
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4f9bbcefa142862782275a4b29f390ca8d8b9242
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Oct 28 13:10:37 2019 +0100

    riscv: add support for MMIO access to the timer registers
    
    When running in M-mode we can't use the SBI to set the timer, and
    don't have access to the time CSR as that usually is emulated by
    M-mode.  Instead provide code that directly accesses the MMIO for
    the timer.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de> # for drivers/clocksource
    [paul.walmsley@sifive.com: updated to apply; fixed checkpatch
     issue; timex.h now includes asm/mmio.h to resolve header file
     problems]
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>

commit ab3664eabfa765e8fabcc106e23f7382ded518cb
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Oct 24 11:28:29 2019 +0800

    timekeeping/vsyscall: Update VDSO data unconditionally
    
    [ Upstream commit 52338415cf4d4064ae6b8dd972dadbda841da4fa ]
    
    The update of the VDSO data is depending on __arch_use_vsyscall() returning
    True. This is a leftover from the attempt to map the features of various
    architectures 1:1 into generic code.
    
    The usage of __arch_use_vsyscall() in the actual vsyscall implementations
    got dropped and replaced by the requirement for the architecture code to
    return U64_MAX if the global clocksource is not usable in the VDSO.
    
    But the __arch_use_vsyscall() check in the update code stayed which causes
    the VDSO data to be stale or invalid when an architecture actually
    implements that function and returns False when the current clocksource is
    not usable in the VDSO.
    
    As a consequence the VDSO implementations of clock_getres(), time(),
    clock_gettime(CLOCK_.*_COARSE) operate on invalid data and return bogus
    information.
    
    Remove the __arch_use_vsyscall() check from the VDSO update function and
    update the VDSO data unconditionally.
    
    [ tglx: Massaged changelog and removed the now useless implementations in
            asm-generic/ARM64/MIPS ]
    
    Fixes: 44f57d788e7deecb50 ("timekeeping: Provide a generic update_vsyscall() implementation")
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1571887709-11447-1-git-send-email-chenhc@lemote.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc5db58539b49351e76f19817ed1102bf7c712d0
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Oct 16 18:38:16 2019 +0800

    x86/quirks: Disable HPET on Intel Coffe Lake platforms
    
    Some Coffee Lake platforms have a skewed HPET timer once the SoCs entered
    PC10, which in consequence marks TSC as unstable because HPET is used as
    watchdog clocksource for TSC.
    
    Harry Pan tried to work around it in the clocksource watchdog code [1]
    thereby creating a circular dependency between HPET and TSC. This also
    ignores the fact, that HPET is not only unsuitable as watchdog clocksource
    on these systems, it becomes unusable in general.
    
    Disable HPET on affected platforms.
    
    Suggested-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203183
    Link: https://lore.kernel.org/lkml/20190516090651.1396-1-harry.pan@intel.com/ [1]
    Link: https://lkml.kernel.org/r/20191016103816.30650-1-kai.heng.feng@canonical.com

commit 9805a68371ce01eee3d8491ee2d93f1aa4a4da52
Merge: 621084cd3d8c 63ec58b44fcc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 10 12:07:47 2019 -0800

    Merge branch 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 fixes from Thomas Gleixner:
     "A small set of fixes for x86:
    
       - Make the tsc=reliable/nowatchdog command line parameter work again.
         It was broken with the introduction of the early TSC clocksource.
    
       - Prevent the evaluation of exception stacks before they are set up.
         This causes a crash in dumpstack because the stack walk termination
         gets screwed up.
    
       - Prevent a NULL pointer dereference in the rescource control file
         system.
    
       - Avoid bogus warnings about APIC id mismatch related to the LDR
         which can happen when the LDR is not in use and therefore not
         initialized. Only evaluate that when the APIC is in logical
         destination mode"
    
    * 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/tsc: Respect tsc command line paraemeter for clocksource_tsc_early
      x86/dumpstack/64: Don't evaluate exception stacks before setup
      x86/apic/32: Avoid bogus LDR warnings
      x86/resctrl: Prevent NULL pointer dereference when reading mondata

commit 621084cd3d8cb31aa43a3e4cc37e27e3ddaab561
Merge: 81388c2b3fb1 52338415cf4d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 10 12:03:58 2019 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A small set of fixes for timekeepoing and clocksource drivers:
    
       - VDSO data was updated conditional on the availability of a VDSO
         capable clocksource. This causes the VDSO functions which do not
         depend on a VDSO capable clocksource to operate on stale data.
         Always update unconditionally.
    
       - Prevent a double free in the mediatek driver
    
       - Use the proper helper in the sh_mtu2 driver so it won't attempt to
         initialize non-existing interrupts"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      timekeeping/vsyscall: Update VDSO data unconditionally
      clocksource/drivers/sh_mtu2: Do not loop using platform_get_irq_by_name()
      clocksource/drivers/mediatek: Fix error handling

commit 5d14b7753c45b7da6c2a8c1129f1d094f64a9b50
Author: Frederic Weisbecker <frederic@kernel.org>
Date:   Wed Sep 25 23:42:42 2019 +0200

    sched/vtime: Fix guest/system mis-accounting on task switch
    
    [ Upstream commit 68e7a4d66b0ce04bf18ff2ffded5596ab3618585 ]
    
    vtime_account_system() assumes that the target task to account cputime
    to is always the current task. This is most often true indeed except on
    task switch where we call:
    
            vtime_common_task_switch(prev)
                    vtime_account_system(prev)
    
    Here prev is the scheduling-out task where we account the cputime to. It
    doesn't match current that is already the scheduling-in task at this
    stage of the context switch.
    
    So we end up checking the wrong task flags to determine if we are
    accounting guest or system time to the previous task.
    
    As a result the wrong task is used to check if the target is running in
    guest mode. We may then spuriously account or leak either system or
    guest time on task switch.
    
    Fix this assumption and also turn vtime_guest_enter/exit() to use the
    task passed in parameter as well to avoid future similar issues.
    
    Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Wanpeng Li <wanpengli@tencent.com>
    Fixes: 2a42eb9594a1 ("sched/cputime: Accumulate vtime on top of nsec clocksource")
    Link: https://lkml.kernel.org/r/20190925214242.21873-1-frederic@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cd003a820fea172506618160e1584a196601ebc
Author: Frederic Weisbecker <frederic@kernel.org>
Date:   Wed Sep 25 23:42:42 2019 +0200

    sched/vtime: Fix guest/system mis-accounting on task switch
    
    [ Upstream commit 68e7a4d66b0ce04bf18ff2ffded5596ab3618585 ]
    
    vtime_account_system() assumes that the target task to account cputime
    to is always the current task. This is most often true indeed except on
    task switch where we call:
    
            vtime_common_task_switch(prev)
                    vtime_account_system(prev)
    
    Here prev is the scheduling-out task where we account the cputime to. It
    doesn't match current that is already the scheduling-in task at this
    stage of the context switch.
    
    So we end up checking the wrong task flags to determine if we are
    accounting guest or system time to the previous task.
    
    As a result the wrong task is used to check if the target is running in
    guest mode. We may then spuriously account or leak either system or
    guest time on task switch.
    
    Fix this assumption and also turn vtime_guest_enter/exit() to use the
    task passed in parameter as well to avoid future similar issues.
    
    Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Wanpeng Li <wanpengli@tencent.com>
    Fixes: 2a42eb9594a1 ("sched/cputime: Accumulate vtime on top of nsec clocksource")
    Link: https://lkml.kernel.org/r/20190925214242.21873-1-frederic@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6234d485e30c0d8c904d695c97ab74eb56174576
Author: Frederic Weisbecker <frederic@kernel.org>
Date:   Wed Sep 25 23:42:42 2019 +0200

    sched/vtime: Fix guest/system mis-accounting on task switch
    
    [ Upstream commit 68e7a4d66b0ce04bf18ff2ffded5596ab3618585 ]
    
    vtime_account_system() assumes that the target task to account cputime
    to is always the current task. This is most often true indeed except on
    task switch where we call:
    
            vtime_common_task_switch(prev)
                    vtime_account_system(prev)
    
    Here prev is the scheduling-out task where we account the cputime to. It
    doesn't match current that is already the scheduling-in task at this
    stage of the context switch.
    
    So we end up checking the wrong task flags to determine if we are
    accounting guest or system time to the previous task.
    
    As a result the wrong task is used to check if the target is running in
    guest mode. We may then spuriously account or leak either system or
    guest time on task switch.
    
    Fix this assumption and also turn vtime_guest_enter/exit() to use the
    task passed in parameter as well to avoid future similar issues.
    
    Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Wanpeng Li <wanpengli@tencent.com>
    Fixes: 2a42eb9594a1 ("sched/cputime: Accumulate vtime on top of nsec clocksource")
    Link: https://lkml.kernel.org/r/20190925214242.21873-1-frederic@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4c3733d32a72f11dee86d0731d7565aa6ebe22d
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Oct 28 13:10:32 2019 +0100

    riscv: abstract out CSR names for supervisor vs machine mode
    
    Many of the privileged CSRs exist in a supervisor and machine version
    that are used very similarly.  Provide versions of the CSR names and
    fields that map to either the S-mode or M-mode variant depending on
    a new CONFIG_RISCV_M_MODE kconfig symbol.
    
    Contains contributions from Damien Le Moal <Damien.LeMoal@wdc.com>
    and Paul Walmsley <paul.walmsley@sifive.com>.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de> # for drivers/clocksource, drivers/irqchip
    [paul.walmsley@sifive.com: updated to apply]
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>

commit 63ec58b44fcc05efd1542045abd7faf056ac27d9
Author: Michael Zhivich <mzhivich@akamai.com>
Date:   Thu Oct 24 13:59:45 2019 -0400

    x86/tsc: Respect tsc command line paraemeter for clocksource_tsc_early
    
    The introduction of clocksource_tsc_early broke the functionality of
    "tsc=reliable" and "tsc=nowatchdog" command line parameters, since
    clocksource_tsc_early is unconditionally registered with
    CLOCK_SOURCE_MUST_VERIFY and thus put on the watchdog list.
    
    This can cause the TSC to be declared unstable during boot:
    
      clocksource: timekeeping watchdog on CPU0: Marking clocksource
                   'tsc-early' as unstable because the skew is too large:
      clocksource: 'refined-jiffies' wd_now: fffb7018 wd_last: fffb6e9d
                   mask: ffffffff
      clocksource: 'tsc-early' cs_now: 68a6a7070f6a0 cs_last: 68a69ab6f74d6
                   mask: ffffffffffffffff
      tsc: Marking TSC unstable due to clocksource watchdog
    
    The corresponding elapsed times are cs_nsec=1224152026 and wd_nsec=378942392, so
    the watchdog differs from TSC by 0.84 seconds.
    
    This happens when HPET is not available and jiffies are used as the TSC
    watchdog instead and the jiffies update is not happening due to lost timer
    interrupts in periodic mode, which can happen e.g. with expensive debug
    mechanisms enabled or under massive overload conditions in virtualized
    environments.
    
    Before the introduction of the early TSC clocksource the command line
    parameters "tsc=reliable" and "tsc=nowatchdog" could be used to work around
    this issue.
    
    Restore the behaviour by disabling the watchdog if requested on the kernel
    command line.
    
    [ tglx: Clarify changelog ]
    
    Fixes: aa83c45762a24 ("x86/tsc: Introduce early tsc clocksource")
    Signed-off-by: Michael Zhivich <mzhivich@akamai.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20191024175945.14338-1-mzhivich@akamai.com

commit 52338415cf4d4064ae6b8dd972dadbda841da4fa
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Oct 24 11:28:29 2019 +0800

    timekeeping/vsyscall: Update VDSO data unconditionally
    
    The update of the VDSO data is depending on __arch_use_vsyscall() returning
    True. This is a leftover from the attempt to map the features of various
    architectures 1:1 into generic code.
    
    The usage of __arch_use_vsyscall() in the actual vsyscall implementations
    got dropped and replaced by the requirement for the architecture code to
    return U64_MAX if the global clocksource is not usable in the VDSO.
    
    But the __arch_use_vsyscall() check in the update code stayed which causes
    the VDSO data to be stale or invalid when an architecture actually
    implements that function and returns False when the current clocksource is
    not usable in the VDSO.
    
    As a consequence the VDSO implementations of clock_getres(), time(),
    clock_gettime(CLOCK_.*_COARSE) operate on invalid data and return bogus
    information.
    
    Remove the __arch_use_vsyscall() check from the VDSO update function and
    update the VDSO data unconditionally.
    
    [ tglx: Massaged changelog and removed the now useless implementations in
            asm-generic/ARM64/MIPS ]
    
    Fixes: 44f57d788e7deecb50 ("timekeeping: Provide a generic update_vsyscall() implementation")
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1571887709-11447-1-git-send-email-chenhc@lemote.com

commit 6e001f6a4cc73cd06fc7b8c633bc4906c33dd8ad
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Oct 16 20:43:30 2019 +0800

    clocksource/drivers/asm9260: Add a check for of_clk_get
    
    asm9260_timer_init misses a check for of_clk_get.
    Add a check for it and print errors like other clocksource drivers.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016124330.22211-1-hslester96@gmail.com

commit b35a5e5961f814799b75a97a16c9b51e0d477c06
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 16 16:47:47 2019 +0200

    clocksource/drivers/renesas-ostm: Use unique device name instead of ostm
    
    Currently all OSTM devices are called "ostm", also in kernel messages.
    
    As there can be multiple instances in an SoC, this can confuse the user.
    Hence construct a unique name from the DT node name, like is done for
    platform devices.
    
    On RSK+RZA1, the boot log changes like:
    
        -clocksource: ostm: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 57352151442 ns
        +clocksource: timer@fcfec000: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 57352151442 ns
         sched_clock: 32 bits at 33MHz, resolution 30ns, wraps every 64440619504ns
        -ostm: used for clocksource
        -ostm: used for clock events
        +/soc/timer@fcfec000: used for clocksource
        +/soc/timer@fcfec400: used for clock events
         ...
        -clocksource: Switched to clocksource ostm
        +clocksource: Switched to clocksource timer@fcfec000
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016144747.29538-5-geert+renesas@glider.be

commit 227314239a5e87fb531cbf3bd8953b2d1d2694bd
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 16 16:47:46 2019 +0200

    clocksource/drivers/renesas-ostm: Convert to timer_of
    
    Convert the Renesas OSTM driver to use the timer_of framework.
    This reduces the driver object size by 367 bytes (with gcc 7.4.0).
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016144747.29538-4-geert+renesas@glider.be

commit 4411464d6f8b5e5759637235a6f2b2a85c2be0f1
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 16 16:47:45 2019 +0200

    clocksource/drivers/timer-of: Use unique device name instead of timer
    
    If a hardware-specific driver does not provide a name, the timer-of core
    falls back to device_node.name.  Due to generic DT node naming policies,
    that name is almost always "timer", and thus doesn't identify the actual
    timer used.
    
    Fix this by using device_node.full_name instead, which includes the unit
    addrees.
    
    Example impact on /proc/timer_list:
    
        -Clock Event Device: timer
        +Clock Event Device: timer@fcfec400
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016144747.29538-3-geert+renesas@glider.be

commit ccb80012481fd8d16c7557c00bb54c42103eef9d
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 16 16:47:44 2019 +0200

    clocksource/drivers/timer-of: Convert last full_name to %pOF
    
    Commit 469869d18a886e04 ("clocksource: Convert to using %pOF instead of
    full_name") converted all but the one just added before by commit
    32f2fea6e77e64cd ("clocksource/drivers/timer-of: Handle
    of_irq_get_byname() result correctly").
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016144747.29538-2-geert+renesas@glider.be

commit 43fc6b252a1d10be7acbc3d49b97a28765c17ebd
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Fri Oct 18 11:18:28 2019 +0800

    clocksource: samsung_pwm_timer: Use pr_warn instead of pr_warning
    
    As said in commit f2c2cbcc35d4 ("powerpc: Use pr_warn instead of
    pr_warning"), removing pr_warning so all logging messages use a
    consistent <prefix>_warn style. Let's do it.
    
    Link: http://lkml.kernel.org/r/20191018031850.48498-11-wangkefeng.wang@huawei.com
    To: linux-kernel@vger.kernel.org
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    [pmladek@suse.com: Fixed indentation]
    Signed-off-by: Petr Mladek <pmladek@suse.com>

commit 7693de9f7aa4e2993fbd7094863304be6a4bbe16
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 16 16:30:03 2019 +0200

    clocksource/drivers/sh_mtu2: Do not loop using platform_get_irq_by_name()
    
    As platform_get_irq_by_name() now prints an error when the interrupt
    does not exist, looping over possibly non-existing interrupts causes the
    printing of scary messages like:
    
        sh_mtu2 fcff0000.timer: IRQ tgi1a not found
        sh_mtu2 fcff0000.timer: IRQ tgi2a not found
    
    Fix this by using the platform_irq_count() helper, to avoid touching
    non-existent interrupts.  Limit the returned number of interrupts to the
    maximum number of channels currently supported by the driver in a
    future-proof way, i.e. using ARRAY_SIZE() instead of a hardcoded number.
    
    Fixes: 7723f4c5ecdb8d83 ("driver core: platform: Add an error message to platform_get_irq*()")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20191016143003.28561-1-geert+renesas@glider.be

commit 41d49e7939de5ec532d86494185b2ca2e99c848a
Author: Fabien Parent <fparent@baylibre.com>
Date:   Thu Sep 19 21:13:15 2019 +0200

    clocksource/drivers/mediatek: Fix error handling
    
    When timer_of_init fails, it cleans up after itself by undoing
    everything it did during the initialization function.
    
    mtk_syst_init and mtk_gpt_init both call timer_of_cleanup if
    timer_of_init fails. timer_of_cleanup try to release the resource
    taken.  Since these resources have already been cleaned up by
    timer_of_init, we end up getting a few warnings printed:
    
    [    0.001935] WARNING: CPU: 0 PID: 0 at __clk_put+0xe8/0x128
    [    0.002650] Modules linked in:
    [    0.003058] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.19.67+ #1
    [    0.003852] Hardware name: MediaTek MT8183 (DT)
    [    0.004446] pstate: 20400085 (nzCv daIf +PAN -UAO)
    [    0.005073] pc : __clk_put+0xe8/0x128
    [    0.005555] lr : clk_put+0xc/0x14
    [    0.005988] sp : ffffff80090b3ea0
    [    0.006422] x29: ffffff80090b3ea0 x28: 0000000040e20018
    [    0.007121] x27: ffffffc07bfff780 x26: 0000000000000001
    [    0.007819] x25: ffffff80090bda80 x24: ffffff8008ec5828
    [    0.008517] x23: ffffff80090bd000 x22: ffffff8008d8b2e8
    [    0.009216] x21: 0000000000000001 x20: fffffffffffffdfb
    [    0.009914] x19: ffffff8009166180 x18: 00000000002bffa8
    [    0.010612] x17: ffffffc012996980 x16: 0000000000000000
    [    0.011311] x15: ffffffbf004a6800 x14: 3536343038393334
    [    0.012009] x13: 2079726576652073 x12: 7eb9c62c5c38f100
    [    0.012707] x11: ffffff80090b3ba0 x10: ffffff80090b3ba0
    [    0.013405] x9 : 0000000000000004 x8 : 0000000000000040
    [    0.014103] x7 : ffffffc079400270 x6 : 0000000000000000
    [    0.014801] x5 : ffffffc079400248 x4 : 0000000000000000
    [    0.015499] x3 : 0000000000000000 x2 : 0000000000000000
    [    0.016197] x1 : ffffff80091661c0 x0 : fffffffffffffdfb
    [    0.016896] Call trace:
    [    0.017218]  __clk_put+0xe8/0x128
    [    0.017654]  clk_put+0xc/0x14
    [    0.018048]  timer_of_cleanup+0x60/0x7c
    [    0.018551]  mtk_syst_init+0x8c/0x9c
    [    0.019020]  timer_probe+0x6c/0xe0
    [    0.019469]  time_init+0x14/0x44
    [    0.019893]  start_kernel+0x2d0/0x46c
    [    0.020378] ---[ end trace 8c1efabea1267649 ]---
    [    0.020982] ------------[ cut here ]------------
    [    0.021586] Trying to vfree() nonexistent vm area ((____ptrval____))
    [    0.022427] WARNING: CPU: 0 PID: 0 at __vunmap+0xd0/0xd8
    [    0.023119] Modules linked in:
    [    0.023524] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G        W         4.19.67+ #1
    [    0.024498] Hardware name: MediaTek MT8183 (DT)
    [    0.025091] pstate: 60400085 (nZCv daIf +PAN -UAO)
    [    0.025718] pc : __vunmap+0xd0/0xd8
    [    0.026176] lr : __vunmap+0xd0/0xd8
    [    0.026632] sp : ffffff80090b3e90
    [    0.027066] x29: ffffff80090b3e90 x28: 0000000040e20018
    [    0.027764] x27: ffffffc07bfff780 x26: 0000000000000001
    [    0.028462] x25: ffffff80090bda80 x24: ffffff8008ec5828
    [    0.029160] x23: ffffff80090bd000 x22: ffffff8008d8b2e8
    [    0.029858] x21: 0000000000000000 x20: 0000000000000000
    [    0.030556] x19: ffffff800800d000 x18: 00000000002bffa8
    [    0.031254] x17: 0000000000000000 x16: 0000000000000000
    [    0.031952] x15: ffffffbf004a6800 x14: 3536343038393334
    [    0.032651] x13: 2079726576652073 x12: 7eb9c62c5c38f100
    [    0.033349] x11: ffffff80090b3b40 x10: ffffff80090b3b40
    [    0.034047] x9 : 0000000000000005 x8 : 5f5f6c6176727470
    [    0.034745] x7 : 5f5f5f5f28282061 x6 : ffffff80091c86ef
    [    0.035443] x5 : ffffff800852b690 x4 : 0000000000000000
    [    0.036141] x3 : 0000000000000002 x2 : 0000000000000002
    [    0.036839] x1 : 7eb9c62c5c38f100 x0 : 7eb9c62c5c38f100
    [    0.037536] Call trace:
    [    0.037859]  __vunmap+0xd0/0xd8
    [    0.038271]  vunmap+0x24/0x30
    [    0.038664]  __iounmap+0x2c/0x34
    [    0.039088]  timer_of_cleanup+0x70/0x7c
    [    0.039591]  mtk_syst_init+0x8c/0x9c
    [    0.040060]  timer_probe+0x6c/0xe0
    [    0.040507]  time_init+0x14/0x44
    [    0.040932]  start_kernel+0x2d0/0x46c
    
    This commit remove the calls to timer_of_cleanup when timer_of_init
    fails since it is unnecessary and actually cause warnings to be printed.
    
    Fixes: a0858f937960 ("mediatek: Convert the driver to timer-of")
    Signed-off-by: Fabien Parent <fparent@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/linux-arm-kernel/20190919191315.25190-1-fparent@baylibre.com/

commit 0fc21fdf4e1023d0e5f8d42a42cdd372177699e2
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Wed Oct 9 21:48:14 2019 +0200

    ARM: configs: at91: unselect PIT
    
    The PIT is not required anymore to successfully boot and may actually harm
    in case preempt-rt is used because the PIT interrupt is shared.
    Disable it so the TCB clocksource is used.
    
    Link: https://lore.kernel.org/r/20191009194814.15034-1-alexandre.belloni@bootlin.com
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Acked-by: Alexander Dahl <ada@thorsis.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>

commit 68e7a4d66b0ce04bf18ff2ffded5596ab3618585
Author: Frederic Weisbecker <frederic@kernel.org>
Date:   Wed Sep 25 23:42:42 2019 +0200

    sched/vtime: Fix guest/system mis-accounting on task switch
    
    vtime_account_system() assumes that the target task to account cputime
    to is always the current task. This is most often true indeed except on
    task switch where we call:
    
            vtime_common_task_switch(prev)
                    vtime_account_system(prev)
    
    Here prev is the scheduling-out task where we account the cputime to. It
    doesn't match current that is already the scheduling-in task at this
    stage of the context switch.
    
    So we end up checking the wrong task flags to determine if we are
    accounting guest or system time to the previous task.
    
    As a result the wrong task is used to check if the target is running in
    guest mode. We may then spuriously account or leak either system or
    guest time on task switch.
    
    Fix this assumption and also turn vtime_guest_enter/exit() to use the
    task passed in parameter as well to avoid future similar issues.
    
    Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Wanpeng Li <wanpengli@tencent.com>
    Fixes: 2a42eb9594a1 ("sched/cputime: Accumulate vtime on top of nsec clocksource")
    Link: https://lkml.kernel.org/r/20190925214242.21873-1-frederic@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 68d96dec527724f7190ff9107bd0864edcfebae0
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Wed Aug 21 16:02:41 2019 +0100

    clocksource/drivers: Do not warn on probe defer
    
    commit 14e019df1e64c8b19ce8e0b3da25b6f40c8716be upstream.
    
    Deferred probe is an expected return value on many platforms and so
    there's no need to output a warning that may potentially confuse users.
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 580ddb48741ce64e14a60ca27b45c149aeafe245
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Wed Aug 21 16:02:40 2019 +0100

    clocksource/drivers/timer-of: Do not warn on deferred probe
    
    commit 763719771e84b8c8c2f53af668cdc905faa608de upstream.
    
    Deferred probe is an expected return value for clk_get() on many
    platforms. The driver deals with it properly, so there's no need
    to output a warning that may potentially confuse users.
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f2444d38f6bbfa12bc15e2533d8f9daa85ca02b
Merge: c5f12fdb8bd8 77b4b5420422
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Sep 17 12:35:15 2019 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull core timer updates from Thomas Gleixner:
     "Timers and timekeeping updates:
    
       - A large overhaul of the posix CPU timer code which is a preparation
         for moving the CPU timer expiry out into task work so it can be
         properly accounted on the task/process.
    
         An update to the bogus permission checks will come later during the
         merge window as feedback was not complete before heading of for
         travel.
    
       - Switch the timerqueue code to use cached rbtrees and get rid of the
         homebrewn caching of the leftmost node.
    
       - Consolidate hrtimer_init() + hrtimer_init_sleeper() calls into a
         single function
    
       - Implement the separation of hrtimers to be forced to expire in hard
         interrupt context even when PREEMPT_RT is enabled and mark the
         affected timers accordingly.
    
       - Implement a mechanism for hrtimers and the timer wheel to protect
         RT against priority inversion and live lock issues when a (hr)timer
         which should be canceled is currently executing the callback.
         Instead of infinitely spinning, the task which tries to cancel the
         timer blocks on a per cpu base expiry lock which is held and
         released by the (hr)timer expiry code.
    
       - Enable the Hyper-V TSC page based sched_clock for Hyper-V guests
         resulting in faster access to timekeeping functions.
    
       - Updates to various clocksource/clockevent drivers and their device
         tree bindings.
    
       - The usual small improvements all over the place"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (101 commits)
      posix-cpu-timers: Fix permission check regression
      posix-cpu-timers: Always clear head pointer on dequeue
      hrtimer: Add a missing bracket and hide `migration_base' on !SMP
      posix-cpu-timers: Make expiry_active check actually work correctly
      posix-timers: Unbreak CONFIG_POSIX_TIMERS=n build
      tick: Mark sched_timer to expire in hard interrupt context
      hrtimer: Add kernel doc annotation for HRTIMER_MODE_HARD
      x86/hyperv: Hide pv_ops access for CONFIG_PARAVIRT=n
      posix-cpu-timers: Utilize timerqueue for storage
      posix-cpu-timers: Move state tracking to struct posix_cputimers
      posix-cpu-timers: Deduplicate rlimit handling
      posix-cpu-timers: Remove pointless comparisons
      posix-cpu-timers: Get rid of 64bit divisions
      posix-cpu-timers: Consolidate timer expiry further
      posix-cpu-timers: Get rid of zero checks
      rlimit: Rewrite non-sensical RLIMIT_CPU comment
      posix-cpu-timers: Respect INFINITY for hard RTTIME limit
      posix-cpu-timers: Switch thread group sampling to array
      posix-cpu-timers: Restructure expiry array
      posix-cpu-timers: Remove cputime_expires
      ...

commit 2b97c39514a6130f38b14227a36d9cd37e650a9d
Merge: d0a16fe93438 0366977480c4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Sep 16 15:48:14 2019 -0700

    Merge tag 'armsoc-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC platform updates from Arnd Bergmann:
     "The main change this time around is a cleanup of some of the oldest
      platforms based on the XScale and ARM9 CPU cores, which are between 10
      and 20 years old.
    
      The Kendin/Micrel/Microchip KS8695, Winbond/Nuvoton W90x900 and Intel
      IOP33x/IOP13xx platforms are removed after we determined that nobody
      is using them any more.
    
      The TI Davinci and NXP LPC32xx platforms on the other hand are still
      in active use and are converted to the ARCH_MULTIPLATFORM build,
      meaning that we can compile a kernel that works on these along with
      most other ARMv5 platforms. Changes toward that goal are also merged
      for IOP32x, but additional work is needed to complete this. Patches
      for the remaining ARMv5 platforms have started but need more work and
      some testing.
    
      Support for the new ASpeed AST2600 gets added, this is based on the
      Cortex-A7 ARMv7 core, and is a newer version of the existing ARMv5 and
      ARMv6 chips in the same family.
    
      Other changes include a cleanup of the ST-Ericsson ux500 platform and
      the move of the TI Davinci platform to a new clocksource driver"
    
    [ The changes had marked INTEL_IOP_ADMA and USB_LPC32XX as being
      buildable on other platforms through COMPILE_TEST, but that causes new
      warnings that I most definitely do not want to see during the merge
      window as that could hide other issues.
    
      So the COMPILE_TEST option got disabled for them again   - Linus ]
    
    * tag 'armsoc-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (61 commits)
      ARM: multi_v5_defconfig: make DaVinci part of the ARM v5 multiplatform build
      ARM: davinci: support multiplatform build for ARM v5
      arm64: exynos: Enable exynos-chipid driver
      ARM: OMAP2+: Delete an unnecessary kfree() call in omap_hsmmc_pdata_init()
      ARM: OMAP2+: move platform-specific asm-offset.h to arch/arm/mach-omap2
      ARM: davinci: dm646x: Fix a typo in the comment
      ARM: davinci: dm646x: switch to using the clocksource driver
      ARM: davinci: dm644x: switch to using the clocksource driver
      ARM: aspeed: Enable SMP boot
      ARM: aspeed: Add ASPEED AST2600 architecture
      ARM: aspeed: Select timer in each SoC
      dt-bindings: arm: cpus: Add ASPEED SMP
      ARM: imx: stop adjusting ar8031 phy tx delay
      mailmap: map old company name to new one @microchip.com
      MAINTAINERS: at91: remove the TC entry
      MAINTAINERS: at91: Collect all pinctrl/gpio drivers in same entry
      ARM: at91: move platform-specific asm-offset.h to arch/arm/mach-at91
      MAINTAINERS: Extend patterns for Samsung SoC, Security Subsystem and clock drivers
      ARM: s3c64xx: squash samsung_usb_phy.h into setup-usb-phy.c
      ARM: debug-ll: Add support for r7s9210
      ...

commit db539cae12a3456cc710855b345542ccd2946e25
Merge: 67e80b99a554 7c95afa42f07
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Sep 16 21:32:58 2019 +0200

    Merge branch 'tc-taprio-offload-for-SJA1105-DSA'
    
    Vladimir Oltean says:
    
    ====================
    tc-taprio offload for SJA1105 DSA
    
    This is the third attempt to submit the tc-taprio offload model for
    inclusion in the networking tree. The sja1105 switch driver will provide
    the first implementation of the offload. Only the bare minimum is added:
    
    - The offload model and a DSA pass-through
    - The hardware implementation
    - The interaction with the netdev queues in the tagger code
    - Documentation
    
    What has been removed from previous attempts is support for
    PTP-as-clocksource in sja1105, as well as configuring the traffic class
    for management traffic.  These will be added as soon as the offload
    model is settled.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1d60902a5448b2bd55806c5883965a03c7e1e309
Author: Pavel Tatashin <pasha.tatashin@soleen.com>
Date:   Sat Jan 26 12:49:56 2019 -0500

    x86/kvmclock: set offset for kvm unstable clock
    
    [ Upstream commit b5179ec4187251a751832193693d6e474d3445ac ]
    
    VMs may show incorrect uptime and dmesg printk offsets on hypervisors with
    unstable clock. The problem is produced when VM is rebooted without exiting
    from qemu.
    
    The fix is to calculate clock offset not only for stable clock but for
    unstable clock as well, and use kvm_sched_clock_read() which substracts
    the offset for both clocks.
    
    This is safe, because pvclock_clocksource_read() does the right thing and
    makes sure that clock always goes forward, so once offset is calculated
    with unstable clock, we won't get new reads that are smaller than offset,
    and thus won't get negative results.
    
    Thank you Jon DeVree for helping to reproduce this issue.
    
    Fixes: 857baa87b642 ("sched/clock: Enable sched clock early")
    Cc: stable@vger.kernel.org
    Reported-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f2a9a26761a7352335d53cbe00b9b36429492b2
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Mon May 13 13:47:25 2019 +0200

    MIPS: kernel: only use i8253 clocksource with periodic clockevent
    
    [ Upstream commit a07e3324538a989b7cdbf2c679be6a7f9df2544f ]
    
    i8253 clocksource needs a free running timer. This could only
    be used, if i8253 clockevent is set up as periodic.
    
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afbd69c7c6ce24af5a8165da74b41a7fcb00d0ef
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Mon May 13 13:47:25 2019 +0200

    MIPS: kernel: only use i8253 clocksource with periodic clockevent
    
    [ Upstream commit a07e3324538a989b7cdbf2c679be6a7f9df2544f ]
    
    i8253 clocksource needs a free running timer. This could only
    be used, if i8253 clockevent is set up as periodic.
    
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f12dbf190d97dc0f2f8a07269dd0d8060808539
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Aug 21 23:58:36 2019 +0900

    riscv: don't use the rdtime(h) pseudo-instructions
    
    If we just use the CSRs that these map to directly the code is simpler
    and doesn't require extra inline assembly code.  Also fix up the top-level
    comment in timer-riscv.c to not talk about the cycle count or mention
    details of the clocksource interface, of which this file is just a
    consumer.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Atish Patra <atish.patra@wdc.com>
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>

commit cc1770a65e1685e9febdc0ddc4ca97e7effd70ad
Merge: 9e38081e5deb 93eae12c9f3e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Sep 4 15:13:27 2019 +0200

    Merge tag 'davinci-for-v5.4/soc' of git://git.kernel.org/pub/scm/linux/kernel/git/nsekhar/linux-davinci into arm/soc
    
    This converts all DaVinci SoCs except DM365 to use new clocksource
    driver. DM365 conversion is still under debug and will be part of a
    future pull request.
    
    * tag 'davinci-for-v5.4/soc' of git://git.kernel.org/pub/scm/linux/kernel/git/nsekhar/linux-davinci:
      ARM: davinci: dm646x: Fix a typo in the comment
      ARM: davinci: dm646x: switch to using the clocksource driver
      ARM: davinci: dm644x: switch to using the clocksource driver
      ARM: davinci: dm355: switch to using the clocksource driver
      ARM: davinci: move timer definitions to davinci.h
      ARM: davinci: da830: switch to using the clocksource driver
      ARM: davinci: da850: switch to using the clocksource driver
      ARM: davinci: WARN_ON() if clk_get() fails
      ARM: davinci: enable the clocksource driver for DT mode
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 7afa881dd42ae9aa45f54f55517ee9f1c783731d
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Mon May 13 13:47:25 2019 +0200

    MIPS: kernel: only use i8253 clocksource with periodic clockevent
    
    [ Upstream commit a07e3324538a989b7cdbf2c679be6a7f9df2544f ]
    
    i8253 clocksource needs a free running timer. This could only
    be used, if i8253 clockevent is set up as periodic.
    
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 326175aa28fd29faf7b6554f4f370cae14155aae
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Mon May 13 13:47:25 2019 +0200

    MIPS: kernel: only use i8253 clocksource with periodic clockevent
    
    [ Upstream commit a07e3324538a989b7cdbf2c679be6a7f9df2544f ]
    
    i8253 clocksource needs a free running timer. This could only
    be used, if i8253 clockevent is set up as periodic.
    
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15b5ebb148f79ac970d40c0f70cf3bc4fdac6885
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Mon May 13 13:47:25 2019 +0200

    MIPS: kernel: only use i8253 clocksource with periodic clockevent
    
    [ Upstream commit a07e3324538a989b7cdbf2c679be6a7f9df2544f ]
    
    i8253 clocksource needs a free running timer. This could only
    be used, if i8253 clockevent is set up as periodic.
    
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a42e43c3de344bd2fa2e635bf3ffd4d9be73cf82
Merge: 3e2d94535adb 19d608458f4f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Aug 27 00:42:06 2019 +0200

    Merge tag 'timers-v5.4' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/events updates from Daniel Lezcano:
    
     - Remove dev_err() when used with platform_get_irq (Stephen Boyd)
    
     - Add DT binding and new compatible for Allwinner sun4i (Maxime Ripard)
    
     - Register the Atmel tcb clocksource for delays (Alexandre Belloni)
    
     - Add a clock divider for the Freescale imx platforms and new timer node
       in the DT (Anson Huang)
    
     - Use DIV_ROUND_CLOSEST macro for the Renesas OSTM (Geert Uytterhoeven)
    
     - Fix GENMASK and timer operation for the npcm timer (Avi Fishman)
    
     - Fix timer-of showing an error message when EPROBE_DEFER is
       returned (Jon Hunter)
    
     - Add new SoC DT binding and match for Renesas timers (Magnus Damm)

commit 19d608458f4f3bb3a1f89bd7e4814c3fd30dbec7
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Tue Aug 20 21:36:07 2019 +0900

    clocksource/drivers/sh_cmt: Document "cmt-48" as deprecated
    
    Update the CMT driver to mark "renesas,cmt-48" as deprecated.
    
    Instead of documenting a theoretical hardware device based on current software
    support level, define DT bindings top-down based on available data sheet
    information and make use of part numbers in the DT compat string.
    
    In case of the only in-tree users r8a7740 and sh73a0 the compat strings
    "renesas,r8a7740-cmt1" and "renesas,sh73a0-cmt1" may be used instead.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8c1afba285a86b9dbb0637f8c70a34fe2d88569e
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Tue Aug 20 21:35:56 2019 +0900

    clocksource/drivers/sh_cmt: r8a7740 and sh73a0 SoC-specific match
    
    Add SoC-specific matching for CMT1 on r8a7740 and sh73a0.
    
    This allows us to move away from the old DT bindings such as
     - "renesas,cmt-48-sh73a0"
     - "renesas,cmt-48-r8a7740"
     - "renesas,cmt-48"
    in favour for the now commonly used format "renesas,<soc>-<device>"
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 14e019df1e64c8b19ce8e0b3da25b6f40c8716be
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Wed Aug 21 16:02:41 2019 +0100

    clocksource/drivers: Do not warn on probe defer
    
    Deferred probe is an expected return value on many platforms and so
    there's no need to output a warning that may potentially confuse users.
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 763719771e84b8c8c2f53af668cdc905faa608de
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Wed Aug 21 16:02:40 2019 +0100

    clocksource/drivers/timer-of: Do not warn on deferred probe
    
    Deferred probe is an expected return value for clk_get() on many
    platforms. The driver deals with it properly, so there's no need
    to output a warning that may potentially confuse users.
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a2b58537b4a1cc08fd254fb8d1c24191ce286ae1
Author: Avi Fishman <avifishman70@gmail.com>
Date:   Mon Jul 29 20:03:54 2019 +0300

    clocksource/drivers/npcm: Fix GENMASK and timer operation
    
    NPCM7XX_Tx_OPER GENMASK bits are wrong, fix them.
    
    Hopefully the NPCM7XX_REG_TICR0 register reset value of those bits was 0,
    so it did not cause an issue.
    
    The function npcm7xx_timer_oneshot() reads the register
    NPCM7XX_REG_TCSR0, modifies it and then reads it again overwriting the
    previous changes. Remove the extra read which is pointless.
    
    The function npcm7xx_timer_periodic() is correct but the code writes
    to the NPCM7XX_REG_TICR0 register while it is dealing with the
    NPCM7XX_REG_TCSR0 register, that is confusing. Separate the write to
    the registers in the code for the sake of clarity.
    
    Fixes: 1c00289ecd12 ("clocksource/drivers/npcm: Add NPCM7xx timer driver")
    Signed-off-by: Avi Fishman <avifishman70@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8d18f6fc75c86b2efa5865655a0630a083c8a1fd
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Aug 7 10:46:33 2019 +0200

    clocksource/drivers/renesas-ostm: Use DIV_ROUND_CLOSEST() helper
    
    Use the DIV_ROUND_CLOSEST() helper instead of open-coding the same
    operation.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4419e19d8117dda6bccfbc62090e766f469ff20a
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Thu Aug 15 20:38:42 2019 -0400

    clocksource/drivers/imx-sysctr: Add internal clock divider handle
    
    The system counter block guide states that the base clock is
    internally divided by 3 before use, that means the clock input of
    system counter defined in DT should be base clock which is normally
    from OSC, and then internally divided by 3 before use.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 1ce861cec03c79a68bae81a7e039edae46b2c493
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Tue Aug 13 15:30:50 2019 +0200

    clocksource/drivers/tcb_clksrc: Register delay timer
    
    Implement and register delay timer to allow get_cycles() to work properly.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bca4e08426e48d1f59b9bb7a8835b08140525828
Author: Maxime Ripard <maxime.ripard@bootlin.com>
Date:   Mon Jul 22 10:12:21 2019 +0200

    clocksource: sun4i: Add missing compatibles
    
    Newer Allwinner SoCs have different number of interrupts, let's add
    different compatibles for all of them to deal with this properly.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9f475d084c032116cbecd4dc840003dc36465db5
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Tue Jul 30 11:15:04 2019 -0700

    clocksource: Remove dev_err() usage after platform_get_irq()
    
    We don't need dev_err() messages when platform_get_irq() fails now that
    platform_get_irq() prints an error message itself when something goes
    wrong. Let's remove these prints with a simple semantic patch.
    
    // <smpl>
    @@
    expression ret;
    struct platform_device *E;
    @@
    
    ret =
    (
    platform_get_irq(E, ...)
    |
    platform_get_irq_byname(E, ...)
    );
    
    if ( \( ret < 0 \| ret <= 0 \) )
    {
    (
    -if (ret != -EPROBE_DEFER)
    -{ ...
    -dev_err(...);
    -... }
    |
    ...
    -dev_err(...);
    )
    ...
    }
    // </smpl>
    
    While we're here, remove braces on if statements that only have one
    statement (manually).
    
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d7d91d264783f01413606bd05aec46ce5d1a41df
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jul 22 15:17:47 2019 +0200

    ARM: davinci: dm646x: switch to using the clocksource driver
    
    We now have a proper clocksource driver for davinci. Switch the dm646x
    platform to using it.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit 135ce780b7790941efadc146be9e2bd6117125de
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jul 22 15:17:46 2019 +0200

    ARM: davinci: dm644x: switch to using the clocksource driver
    
    We now have a proper clocksource driver for davinci. Switch the dm644x
    platform to using it.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit 9afe2c0a376f56f6bd78c7c5b9dec5e8f5d5a327
Author: Joel Stanley <joel@jms.id.au>
Date:   Wed Aug 21 15:25:26 2019 +0930

    ARM: aspeed: Add ASPEED AST2600 architecture
    
    The AST2600 is a Cortex A7 dual core CPU that uses the ARM GIC for
    interrupts and ARM timer as a clocksource.
    
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Signed-off-by: Joel Stanley <joel@jms.id.au>

commit 361469211f876e67d7ca3d3d29e6d1c3e313d0f1
Merge: 0a022eccf7c4 a9fc4340aee0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Aug 24 11:42:06 2019 -0700

    Merge tag 'hyperv-fixes-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux
    
    Pull Hyper-V fixes from Sasha Levin:
    
     - Fix for panics and network failures on PAE guests by Dexuan Cui.
    
     - Fix of a memory leak (and related cleanups) in the hyper-v keyboard
       driver by Dexuan Cui.
    
     - Code cleanups for hyper-v clocksource driver during the merge window
       by Dexuan Cui.
    
     - Fix for a false positive warning in the userspace hyper-v KVP store
       by Vitaly Kuznetsov.
    
    * tag 'hyperv-fixes-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux:
      Drivers: hv: vmbus: Fix virt_to_hvpfn() for X86_PAE
      Tools: hv: kvp: eliminate 'may be used uninitialized' warning
      Input: hyperv-keyboard: Use in-place iterator API in the channel callback
      Drivers: hv: vmbus: Remove the unused "tsc_page" from struct hv_context

commit 44015a8181a54ce0376513645a5a8d1652677019
Author: Nicolas Ferre <nicolas.ferre@microchip.com>
Date:   Fri Aug 23 10:31:57 2019 +0200

    MAINTAINERS: at91: remove the TC entry
    
    "MICROCHIP TIMER COUNTER (TC) AND CLOCKSOURCE DRIVERS" is better
    removed because one file entry is outdated and basically, the
    maintainer's pool of Alexandre, Ludovic and myself is better suited.
    
    drivers/misc/atmel_tclib.c file is going away in a patch to come and
    drivers/clocksource/tcb_clksrc.c file is actually named timer-atmel-tcb.c.
    This new name matches the AT91 entry regular expression.
    
    Signed-off-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Link: https://lore.kernel.org/r/20190823083158.2649-2-nicolas.ferre@microchip.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>

commit 3e2d94535adb2df15f3907e4b4c7cd8a5a4c2b5a
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Aug 22 10:36:30 2019 +0200

    clocksource/drivers/hyperv: Enable TSC page clocksource on 32bit
    
    There is no particular reason to not enable TSC page clocksource on
    32-bit. mul_u64_u64_shr() is available and despite the increased
    computational complexity (compared to 64bit) TSC page is still a huge win
    compared to MSR-based clocksource.
    
    In-kernel reads:
      MSR based clocksource: 3361 cycles
      TSC page clocksource: 49 cycles
    
    Reads from userspace (utilizing vDSO in case of TSC page):
      MSR based clocksource: 5664 cycles
      TSC page clocksource: 131 cycles
    
    Enabling TSC page on 32bits allows to get rid of CONFIG_HYPERV_TSCPAGE as
    it is now not any different from CONFIG_HYPERV_TIMER.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lkml.kernel.org/r/20190822083630.17059-1-vkuznets@redhat.com

commit bd00cd52d5be655a2f217e2ed74b91a71cb2b14f
Author: Tianyu Lan <Tianyu.Lan@microsoft.com>
Date:   Wed Aug 14 20:32:16 2019 +0800

    clocksource/drivers/hyperv: Add Hyper-V specific sched clock function
    
    Hyper-V guests use the default native_sched_clock() in
    pv_ops.time.sched_clock on x86. But native_sched_clock() directly uses the
    raw TSC value, which can be discontinuous in a Hyper-V VM.
    
    Add the generic hv_setup_sched_clock() to set the sched clock function
    appropriately. On x86, this sets pv_ops.time.sched_clock to read the
    Hyper-V reference TSC value that is scaled and adjusted to be continuous.
    
    Also move the Hyper-V reference TSC initialization much earlier in the boot
    process so no discontinuity is observed when pv_ops.time.sched_clock
    calculates its offset.
    
    [ tglx: Folded build fix ]
    
    Signed-off-by: Tianyu Lan <Tianyu.Lan@microsoft.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lkml.kernel.org/r/20190814123216.32245-3-Tianyu.Lan@microsoft.com

commit adb87ff4f96c9700718e09c97a804124d5cd61ff
Author: Tianyu Lan <Tianyu.Lan@microsoft.com>
Date:   Wed Aug 14 20:32:15 2019 +0800

    clocksource/drivers/hyperv: Allocate Hyper-V TSC page statically
    
    Prepare to add Hyper-V sched clock callback and move Hyper-V Reference TSC
    initialization much earlier in the boot process.  Earlier initialization is
    needed so that it happens while the timestamp value is still 0 and no
    discontinuity in the timestamp will occur when pv_ops.time.sched_clock
    calculates its offset.
    
    The earlier initialization requires that the Hyper-V TSC page be allocated
    statically instead of with vmalloc(), so fixup the references to the TSC
    page and the method of getting its physical address.
    
    Signed-off-by: Tianyu Lan <Tianyu.Lan@microsoft.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lkml.kernel.org/r/20190814123216.32245-2-Tianyu.Lan@microsoft.com

commit b99328a60a482108f5195b4d611f90992ca016ba
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Aug 22 13:00:15 2019 +0200

    timekeeping/vsyscall: Prevent math overflow in BOOTTIME update
    
    The VDSO update for CLOCK_BOOTTIME has a overflow issue as it shifts the
    nanoseconds based boot time offset left by the clocksource shift. That
    overflows once the boot time offset becomes large enough. As a consequence
    CLOCK_BOOTTIME in the VDSO becomes a random number causing applications to
    misbehave.
    
    Fix it by storing a timespec64 representation of the offset when boot time
    is adjusted and add that to the MONOTONIC base time value in the vdso data
    page. Using the timespec64 representation avoids a 64bit division in the
    update code.
    
    Fixes: 44f57d788e7d ("timekeeping: Provide a generic update_vsyscall() implementation")
    Reported-by: Chris Clayton <chris2553@googlemail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Chris Clayton <chris2553@googlemail.com>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lkml.kernel.org/r/alpine.DEB.2.21.1908221257580.1983@nanos.tec.linutronix.de

commit 16c75963723dfd8d7ca719527052f16be7258a23
Author: Dexuan Cui <decui@microsoft.com>
Date:   Tue Aug 20 03:06:40 2019 +0000

    Drivers: hv: vmbus: Remove the unused "tsc_page" from struct hv_context
    
    This field is no longer used after the commit
    63ed4e0c67df ("Drivers: hv: vmbus: Consolidate all Hyper-V specific clocksource code")
    , because it's replaced by the global variable
    "struct ms_hyperv_tsc_page *tsc_pg;" (now, the variable is in
    drivers/clocksource/hyperv_timer.c).
    
    Fixes: 63ed4e0c67df ("Drivers: hv: vmbus: Consolidate all Hyper-V specific clocksource code")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 296d05cb0d3c9f4648e31abb8ce404ac6915d66c
Merge: 6d8f809cb55a b390e0bfd299
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Aug 10 16:31:47 2019 -0700

    Merge tag 'riscv/for-v5.3-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux
    
    Pull RISC-V updates from Paul Walmsley:
     "A few minor RISC-V updates for v5.3-rc4:
    
       - Remove __udivdi3() from the 32-bit Linux port, converting the only
         upstream user to use do_div(), per Linux policy
    
       - Convert the RISC-V standard clocksource away from per-cpu data
         structures, since only one is used by Linux, even on a multi-CPU
         system
    
       - A set of DT binding updates that remove an obsolete text binding in
         favor of a YAML binding, fix a bogus compatible string in the
         schema (thus fixing a "make dtbs_check" warning), and clarifies the
         future values expected in one of the RISC-V CPU properties"
    
    * tag 'riscv/for-v5.3-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/riscv/linux:
      dt-bindings: riscv: fix the schema compatible string for the HiFive Unleashed board
      dt-bindings: riscv: remove obsolete cpus.txt
      RISC-V: Remove udivdi3
      riscv: delay: use do_div() instead of __udivdi3()
      dt-bindings: Update the riscv,isa string description
      RISC-V: Remove per cpu clocksource

commit abc552284f6b1e8e6f153771dac1dff72e9d6d66
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Wed Jul 24 13:16:15 2019 -0400

    MIPS: jz4740: Drop obsolete code
    
    The old clocksource/timer platform code is now obsoleted by the newly
    introduced TCU drivers.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Tested-by: Mathieu Malaterre <malat@debian.org>
    Tested-by: Artur Rojek <contact@artur-rojek.eu>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Lee Jones <lee.jones@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Michael Turquette <mturquette@baylibre.com>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: devicetree@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-doc@vger.kernel.org
    Cc: linux-mips@vger.kernel.org
    Cc: linux-clk@vger.kernel.org
    Cc: od@zcrc.me

commit 967a7100400ab8fa06752f4791934353bae67ced
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Wed Jul 24 13:16:14 2019 -0400

    MIPS: GCW0: Reduce system timer and clocksource to 750 kHz
    
    The default clock (12 MHz) is too fast for the system timer.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Tested-by: Mathieu Malaterre <malat@debian.org>
    Tested-by: Artur Rojek <contact@artur-rojek.eu>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Lee Jones <lee.jones@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Michael Turquette <mturquette@baylibre.com>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: devicetree@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-doc@vger.kernel.org
    Cc: linux-mips@vger.kernel.org
    Cc: linux-clk@vger.kernel.org
    Cc: od@zcrc.me

commit 157c887aff5236b2ee15d4e7d2719537f14dae49
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Wed Jul 24 13:16:13 2019 -0400

    MIPS: CI20: Reduce system timer and clocksource to 3 MHz
    
    The default clock (48 MHz) is too fast for the system timer.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Tested-by: Mathieu Malaterre <malat@debian.org>
    Tested-by: Artur Rojek <contact@artur-rojek.eu>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Lee Jones <lee.jones@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Michael Turquette <mturquette@baylibre.com>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: devicetree@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-doc@vger.kernel.org
    Cc: linux-mips@vger.kernel.org
    Cc: linux-clk@vger.kernel.org
    Cc: od@zcrc.me

commit a68d3b052b57a223a6842883f6a2f71621d2e8cb
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Wed Jul 24 13:16:12 2019 -0400

    MIPS: qi_lb60: Reduce system timer and clocksource to 750 kHz
    
    The default clock (12 MHz) is too fast for the system timer, which fails
    to report time accurately.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Tested-by: Mathieu Malaterre <malat@debian.org>
    Tested-by: Artur Rojek <contact@artur-rojek.eu>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Lee Jones <lee.jones@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Michael Turquette <mturquette@baylibre.com>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: devicetree@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-doc@vger.kernel.org
    Cc: linux-mips@vger.kernel.org
    Cc: linux-clk@vger.kernel.org
    Cc: od@zcrc.me

commit 34e9368301d534a9c5cded879f277791194fdb31
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Wed Jul 24 13:16:09 2019 -0400

    clocksource: Add a new timer-ingenic driver
    
    This driver handles the TCU (Timer Counter Unit) present on the Ingenic
    JZ47xx SoCs, and provides the kernel with a system timer, a clocksource
    and a sched_clock.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Tested-by: Mathieu Malaterre <malat@debian.org>
    Tested-by: Artur Rojek <contact@artur-rojek.eu>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Lee Jones <lee.jones@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Michael Turquette <mturquette@baylibre.com>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: devicetree@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-doc@vger.kernel.org
    Cc: linux-mips@vger.kernel.org
    Cc: linux-clk@vger.kernel.org
    Cc: od@zcrc.me

commit c0512c2ca380cdfb109e44f65ecdf45c8693d533
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jul 22 15:17:44 2019 +0200

    ARM: davinci: dm355: switch to using the clocksource driver
    
    We now have a proper clocksource driver for davinci. Switch the dm355
    platform to using it.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit a248f524ea85f4960ff12267fd70184a8cebd13d
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jul 22 15:17:42 2019 +0200

    ARM: davinci: da830: switch to using the clocksource driver
    
    We now have a proper clocksource driver for davinci. Switch the da830
    platform to using it.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit 76c7473f753dabee2e6ad03f72181b45083a0c7c
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jul 22 15:17:41 2019 +0200

    ARM: davinci: da850: switch to using the clocksource driver
    
    We now have a proper clocksource driver for davinci. Switch the da850
    platform to using it.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit d470df3bc5e1a9cd38995b55c918d9ecdda141e1
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jul 22 15:17:40 2019 +0200

    ARM: davinci: WARN_ON() if clk_get() fails
    
    Currently the timer code checks if the clock pointer passed to it is
    good (!IS_ERR(clk)). The new clocksource driver expects the clock to
    be functional and doesn't perform any checks so emit a warning if
    clk_get() fails. Apply this to all davinci platforms.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit 29e97f56f2ee0dd5dbd0f7a0a698f2cdcaf54c79
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jul 22 15:17:39 2019 +0200

    ARM: davinci: enable the clocksource driver for DT mode
    
    Switch all davinci boards supporting device tree to using the new
    clocksource driver: remove the previous OF_TIMER_DECLARE() from
    mach-davinci and select davinci-timer for ARCH_DAVINCI.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: David Lechner <david@lechnology.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit 713203e303ca9f75be8c729b533bf1559e442f6e
Author: Atish Patra <atish.patra@wdc.com>
Date:   Fri Aug 2 21:27:20 2019 -0700

    RISC-V: Remove per cpu clocksource
    
    There is only one clocksource in RISC-V. The boot cpu initializes
    that clocksource. No need to keep a percpu data structure.
    
    Signed-off-by: Atish Patra <atish.patra@wdc.com>
    Signed-off-by: Paul Walmsley <paul.walmsley@sifive.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 76d7961ff4ee02cc70365600a52fb59ca544dc7c
Merge: f4eb1423e433 74034a09267c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Aug 6 14:01:08 2019 -0700

    Merge tag 'mips_fixes_5.3_1' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux
    
    Pull MIPS fixes from Paul Burton:
     "A few MIPS fixes for 5.3:
    
       - Various switch fall through annotations to fixup warnings & errors
         resulting from -Wimplicit-fallthrough.
    
       - A fix for systems (at least jazz) using an i8253 PIT as clocksource
         when it's not suitably configured.
    
       - Set struct cacheinfo's cpu_map_populated field to true, indicating
         that we filled in cache info detected from cop0 registers &
         avoiding complaints about that info being (intentionally) missing
         in devicetree"
    
    * tag 'mips_fixes_5.3_1' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux:
      MIPS: BCM63XX: Mark expected switch fall-through
      MIPS: OProfile: Mark expected switch fall-throughs
      MIPS: Annotate fall-through in Cavium Octeon code
      MIPS: Annotate fall-through in kvm/emulate.c
      mips: fix cacheinfo
      MIPS: kernel: only use i8253 clocksource with periodic clockevent

commit 244e3a4e40f861454f940d603e48983d56582103
Author: Weiyi Lu <weiyi.lu@mediatek.com>
Date:   Fri Jun 28 15:22:34 2019 +0800

    clk: mediatek: mt8183: Register 13MHz clock earlier for clocksource
    
    commit c93d059a80450af99dd6c0e8c36790579343675a upstream.
    
    The 13MHz clock should be registered before clocksource driver is
    initialized. Use CLK_OF_DECLARE_DRIVER() to guarantee.
    
    Fixes: acddfc2c261b ("clk: mediatek: Add MT8183 clock support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Weiyi Lu <weiyi.lu@mediatek.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df5b05868d66a58d184e2ce8b87abe86918a5fd8
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu May 30 12:50:43 2019 +0200

    clocksource/drivers/exynos_mct: Increase priority over ARM arch timer
    
    [ Upstream commit 6282edb72bed5324352522d732080d4c1b9dfed6 ]
    
    Exynos SoCs based on CA7/CA15 have 2 timer interfaces: custom Exynos MCT
    (Multi Core Timer) and standard ARM Architected Timers.
    
    There are use cases, where both timer interfaces are used simultanously.
    One of such examples is using Exynos MCT for the main system timer and
    ARM Architected Timers for the KVM and virtualized guests (KVM requires
    arch timers).
    
    Exynos Multi-Core Timer driver (exynos_mct) must be however started
    before ARM Architected Timers (arch_timer), because they both share some
    common hardware blocks (global system counter) and turning on MCT is
    needed to get ARM Architected Timer working properly.
    
    To ensure selecting Exynos MCT as the main system timer, increase MCT
    timer rating. To ensure proper starting order of both timers during
    suspend/resume cycle, increase MCT hotplug priority over ARM Archictected
    Timers.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42d21900b39ceebf7be1512d02d915280ba2bba5
Merge: 234172f6bbf8 e1f1ae8002e4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 2 08:47:28 2019 -0700

    Merge tag 'clk-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux
    
    Pull clk fixes from Stephen Boyd:
     "A few fixes for code that came in during the merge window or that
      started getting exercised differently this time around:
    
       - Select regmap MMIO kconfig in spreadtrum driver to avoid compile
         errors
    
       - Complete kerneldoc on devm_clk_bulk_get_optional()
    
       - Register an essential clk earlier on mediatek mt8183 SoCs so the
         clocksource driver can use it
    
       - Fix divisor math in the at91 driver
    
       - Plug a race in Renesas reset control logic"
    
    * tag 'clk-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux:
      clk: renesas: cpg-mssr: Fix reset control race condition
      clk: sprd: Select REGMAP_MMIO to avoid compile errors
      clk: mediatek: mt8183: Register 13MHz clock earlier for clocksource
      clk: Add missing documentation of devm_clk_bulk_get_optional() argument
      clk: at91: generated: Truncate divisor to GENERATED_MAX_DIV + 1

commit 9262b2a437293cccc18609f5f6dfdc7e96700fcf
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu May 30 12:50:43 2019 +0200

    clocksource/drivers/exynos_mct: Increase priority over ARM arch timer
    
    [ Upstream commit 6282edb72bed5324352522d732080d4c1b9dfed6 ]
    
    Exynos SoCs based on CA7/CA15 have 2 timer interfaces: custom Exynos MCT
    (Multi Core Timer) and standard ARM Architected Timers.
    
    There are use cases, where both timer interfaces are used simultanously.
    One of such examples is using Exynos MCT for the main system timer and
    ARM Architected Timers for the KVM and virtualized guests (KVM requires
    arch timers).
    
    Exynos Multi-Core Timer driver (exynos_mct) must be however started
    before ARM Architected Timers (arch_timer), because they both share some
    common hardware blocks (global system counter) and turning on MCT is
    needed to get ARM Architected Timer working properly.
    
    To ensure selecting Exynos MCT as the main system timer, increase MCT
    timer rating. To ensure proper starting order of both timers during
    suspend/resume cycle, increase MCT hotplug priority over ARM Archictected
    Timers.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e69fac59c493107bf25343ad7b387530e2334836
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu May 30 12:50:43 2019 +0200

    clocksource/drivers/exynos_mct: Increase priority over ARM arch timer
    
    [ Upstream commit 6282edb72bed5324352522d732080d4c1b9dfed6 ]
    
    Exynos SoCs based on CA7/CA15 have 2 timer interfaces: custom Exynos MCT
    (Multi Core Timer) and standard ARM Architected Timers.
    
    There are use cases, where both timer interfaces are used simultanously.
    One of such examples is using Exynos MCT for the main system timer and
    ARM Architected Timers for the KVM and virtualized guests (KVM requires
    arch timers).
    
    Exynos Multi-Core Timer driver (exynos_mct) must be however started
    before ARM Architected Timers (arch_timer), because they both share some
    common hardware blocks (global system counter) and turning on MCT is
    needed to get ARM Architected Timer working properly.
    
    To ensure selecting Exynos MCT as the main system timer, increase MCT
    timer rating. To ensure proper starting order of both timers during
    suspend/resume cycle, increase MCT hotplug priority over ARM Archictected
    Timers.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7542baeca92ca2b4127eb525e8d8e1266f9a9ee
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu May 30 12:50:43 2019 +0200

    clocksource/drivers/exynos_mct: Increase priority over ARM arch timer
    
    [ Upstream commit 6282edb72bed5324352522d732080d4c1b9dfed6 ]
    
    Exynos SoCs based on CA7/CA15 have 2 timer interfaces: custom Exynos MCT
    (Multi Core Timer) and standard ARM Architected Timers.
    
    There are use cases, where both timer interfaces are used simultanously.
    One of such examples is using Exynos MCT for the main system timer and
    ARM Architected Timers for the KVM and virtualized guests (KVM requires
    arch timers).
    
    Exynos Multi-Core Timer driver (exynos_mct) must be however started
    before ARM Architected Timers (arch_timer), because they both share some
    common hardware blocks (global system counter) and turning on MCT is
    needed to get ARM Architected Timer working properly.
    
    To ensure selecting Exynos MCT as the main system timer, increase MCT
    timer rating. To ensure proper starting order of both timers during
    suspend/resume cycle, increase MCT hotplug priority over ARM Archictected
    Timers.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34316acedbec50584544d776463cb55ee3af16c9
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Jun 18 17:03:56 2019 +0300

    clocksource/drivers/tegra: Restore base address before cleanup
    
    [ Upstream commit fc9babc2574691d3bbf0428f007b22261fed55c6 ]
    
    We're adjusting the timer's base for each per-CPU timer to point to the
    actual start of the timer since device-tree defines a compound registers
    range that includes all of the timers. In this case the original base
    need to be restore before calling iounmap to unmap the proper address.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e94e997b04a497cca915b4781b664651ef30db2
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:43 2019 +0300

    clocksource/drivers/tegra: Release all IRQ's on request_irq() error
    
    [ Upstream commit 7a3916706e858ad0bc3b5629c68168e1449de26a ]
    
    Release all requested IRQ's on the request error to properly clean up
    allocated resources.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a290609499e84bf2b762cf82d8cea9f4f03e902
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu May 30 12:50:43 2019 +0200

    clocksource/drivers/exynos_mct: Increase priority over ARM arch timer
    
    [ Upstream commit 6282edb72bed5324352522d732080d4c1b9dfed6 ]
    
    Exynos SoCs based on CA7/CA15 have 2 timer interfaces: custom Exynos MCT
    (Multi Core Timer) and standard ARM Architected Timers.
    
    There are use cases, where both timer interfaces are used simultanously.
    One of such examples is using Exynos MCT for the main system timer and
    ARM Architected Timers for the KVM and virtualized guests (KVM requires
    arch timers).
    
    Exynos Multi-Core Timer driver (exynos_mct) must be however started
    before ARM Architected Timers (arch_timer), because they both share some
    common hardware blocks (global system counter) and turning on MCT is
    needed to get ARM Architected Timer working properly.
    
    To ensure selecting Exynos MCT as the main system timer, increase MCT
    timer rating. To ensure proper starting order of both timers during
    suspend/resume cycle, increase MCT hotplug priority over ARM Archictected
    Timers.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c21c81b6207767a4d161dbed698ab88550f08014
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Jun 18 17:03:56 2019 +0300

    clocksource/drivers/tegra: Restore base address before cleanup
    
    [ Upstream commit fc9babc2574691d3bbf0428f007b22261fed55c6 ]
    
    We're adjusting the timer's base for each per-CPU timer to point to the
    actual start of the timer since device-tree defines a compound registers
    range that includes all of the timers. In this case the original base
    need to be restore before calling iounmap to unmap the proper address.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f7bce8f064f3a0822fbafa7c23885e1e544bf0c
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:43 2019 +0300

    clocksource/drivers/tegra: Release all IRQ's on request_irq() error
    
    [ Upstream commit 7a3916706e858ad0bc3b5629c68168e1449de26a ]
    
    Release all requested IRQ's on the request error to properly clean up
    allocated resources.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 643d83f0a3518d6fbcf88f970de0340a5aa6b5a2
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 25 08:28:45 2019 +0200

    x86/hpet: Undo the early counter is counting check
    
    Rui reported that on a Pentium D machine which has HPET forced enabled
    because it is not advertised by ACPI, the early counter is counting check
    leads to a silent boot hang.
    
    The reason is that the ordering of checking the counter first and then
    reconfiguring the HPET fails to work on that machine. As the HPET is not
    advertised and presumably not initialized by the BIOS the early enable and
    the following reconfiguration seems to bring it into a broken state. Adding
    clocksource=jiffies to the command line results in the following
    clocksource watchdog warning:
    
      clocksource: timekeeping watchdog on CPU1:
      Marking clocksource 'tsc-early' as unstable because the skew is too large:
      clocksource:  'hpet' wd_now: 33 wd_last: 33 mask: ffffffff
    
    That clearly shows that the HPET is not counting after it got reconfigured
    and reenabled. If the counter is not working then the HPET timer is not
    expiring either, which explains the boot hang.
    
    Move the counter is counting check after the full configuration again to
    unbreak these systems.
    
    Reported-by: Rui Salvaterra <rsalvaterra@gmail.com>
    Fixes: 3222daf970f3 ("x86/hpet: Separate counter check out of clocksource register code")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Rui Salvaterra <rsalvaterra@gmail.com>
    Link: https://lkml.kernel.org/r/alpine.DEB.2.21.1907250810530.1791@nanos.tec.linutronix.de

commit 7a8689df21f425e77207b4245b0b89d3185866e7
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Jul 15 10:06:35 2019 +0200

    ARM: ux500: Stop populating the PRCMU devices early
    
    The PRCMU devices are getting populated from the MFD
    driver and that is enough for them to come up. We already
    have an early quirk for the things that need to happen
    really early and the PRCMU timer that need to be registered
    really early will find its own node just fine as the
    timer/clocksource subsystem looks through the whole device
    tree for compatible nodes.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit c93d059a80450af99dd6c0e8c36790579343675a
Author: Weiyi Lu <weiyi.lu@mediatek.com>
Date:   Fri Jun 28 15:22:34 2019 +0800

    clk: mediatek: mt8183: Register 13MHz clock earlier for clocksource
    
    The 13MHz clock should be registered before clocksource driver is
    initialized. Use CLK_OF_DECLARE_DRIVER() to guarantee.
    
    Fixes: acddfc2c261b ("clk: mediatek: Add MT8183 clock support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Weiyi Lu <weiyi.lu@mediatek.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

commit a07e3324538a989b7cdbf2c679be6a7f9df2544f
Author: Thomas Bogendoerfer <tbogendoerfer@suse.de>
Date:   Mon May 13 13:47:25 2019 +0200

    MIPS: kernel: only use i8253 clocksource with periodic clockevent
    
    i8253 clocksource needs a free running timer. This could only
    be used, if i8253 clockevent is set up as periodic.
    
    Signed-off-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
    Signed-off-by: Paul Burton <paul.burton@mips.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org

commit d7fe42a64a19a4140fb94bcf996035319cd3e6b9
Merge: 02150fab6ae9 0df1c9868c3a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jul 11 13:52:23 2019 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "Two small fixes from the timer departement:
    
       - Prevent the compiler from converting the nanoseconds adjustment
         loop in the VDSO update function to a division (__udivdi3) by using
         the __iter_div_u64_rem() inline function which exists to prevent
         exactly that problem.
    
       - Fix the wrong argument order of the GENMASK macro in the NPCM timer
         driver"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      timekeeping/vsyscall: Use __iter_div_u64_rem()
      clocksource/drivers/npcm: Fix misuse of GENMASK macro

commit 9bdd7bb3a8447fe841cd37ddd9e0a6974b06a0bb
Author: Joe Perches <joe@perches.com>
Date:   Tue Jul 9 22:04:15 2019 -0700

    clocksource/drivers/npcm: Fix misuse of GENMASK macro
    
    Arguments are supposed to be ordered high then low.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/d6a9d49c9837d38816b71d783f5aed7235e8ca94.1562734889.git.joe@perches.com

commit 8659048945a45cb840333e54851f54ef769c66e0
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Oct 18 11:57:04 2018 +0200

    clocksource/drivers/exynos_mct: Fix error path in timer resources initialization
    
    commit b9307420196009cdf18bad55e762ac49fb9a80f4 upstream.
    
    While freeing interrupt handlers in error path, don't assume that all
    requested interrupts are per-processor interrupts and properly release
    standard interrupts too.
    
    Reported-by: Krzysztof Kozlowski <krzk@kernel.org>
    Fixes: 56a94f13919c ("clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    [bwh: Backported to 3.16: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 2f0f6503e37551eb8d8d5e4d27c78d28a30fed5a
Merge: 13324c42c140 e44252f4fe79
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 8 12:16:40 2019 -0700

    Merge branch 'x86-timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 timer updates from Thomas Gleixner:
     "A rather large series consolidating the HPET code, which was triggered
      by the attempt to bolt HPET NMI watchdog support on to the existing
      maze with the usual duct tape and super glue approach.
    
      This mainly removes two separate partially redundant storage layers
      and consolidates them into a single one which provides a consistent
      view of the different HPET channels and their usage and allows to
      integrate HPET NMI watchdog support (if it turns out to be feasible)
      in a non intrusive way"
    
    * 'x86-timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (29 commits)
      x86/hpet: Use channel for legacy clockevent storage
      x86/hpet: Use common init for legacy clockevent
      x86/hpet: Carve out shareable parts of init_one_hpet_msi_clockevent()
      x86/hpet: Consolidate clockevent functions
      x86/hpet: Wrap legacy clockevent in hpet_channel
      x86/hpet: Use cached info instead of extra flags
      x86/hpet: Move clockevents into channels
      x86/hpet: Rename variables to prepare for switching to channels
      x86/hpet: Add function to select a /dev/hpet channel
      x86/hpet: Add mode information to struct hpet_channel
      x86/hpet: Use cached channel data
      x86/hpet: Introduce struct hpet_base and struct hpet_channel
      x86/hpet: Coding style cleanup
      x86/hpet: Clean up comments
      x86/hpet: Make naming consistent
      x86/hpet: Remove not required includes
      x86/hpet: Decapitalize and rename EVT_TO_HPET_DEV
      x86/hpet: Simplify counter validation
      x86/hpet: Separate counter check out of clocksource register code
      x86/hpet: Shuffle code around for readability sake
      ...

commit 927ba67a63c72ee87d655e30183d1576c3717d3e
Merge: 2a1ccd31420a 9176ab1b8480
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 8 11:06:29 2019 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The timer and timekeeping departement delivers:
    
      Core:
    
       - The consolidation of the VDSO code into a generic library including
         the conversion of x86 and ARM64. Conversion of ARM and MIPS are en
         route through the relevant maintainer trees and should end up in
         5.4.
    
         This gets rid of the unnecessary different copies of the same code
         and brings all architectures on the same level of VDSO
         functionality.
    
       - Make the NTP user space interface more robust by restricting the
         TAI offset to prevent undefined behaviour. Includes a selftest.
    
       - Validate user input in the compat settimeofday() syscall to catch
         invalid values which would be turned into valid values by a
         multiplication overflow
    
       - Consolidate the time accessors
    
       - Small fixes, improvements and cleanups all over the place
    
      Drivers:
    
       - Support for the NXP system counter, TI davinci timer
    
       - Move the Microsoft HyperV clocksource/events code into the
         drivers/clocksource directory so it can be shared between x86 and
         ARM64.
    
       - Overhaul of the Tegra driver
    
       - Delay timer support for IXP4xx
    
       - Small fixes, improvements and cleanups as usual"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (71 commits)
      time: Validate user input in compat_settimeofday()
      timer: Document TIMER_PINNED
      clocksource/drivers: Continue making Hyper-V clocksource ISA agnostic
      clocksource/drivers: Make Hyper-V clocksource ISA agnostic
      MAINTAINERS: Fix Andy's surname and the directory entries of VDSO
      hrtimer: Use a bullet for the returns bullet list
      arm64: vdso: Fix compilation with clang older than 8
      arm64: compat: Fix __arch_get_hw_counter() implementation
      arm64: Fix __arch_get_hw_counter() implementation
      lib/vdso: Make delta calculation work correctly
      MAINTAINERS: Add entry for the generic VDSO library
      arm64: compat: No need for pre-ARMv7 barriers on an ARMv8 system
      arm64: vdso: Remove unnecessary asm-offsets.c definitions
      vdso: Remove superfluous #ifdef __KERNEL__ in vdso/datapage.h
      clocksource/drivers/davinci: Add support for clocksource
      clocksource/drivers/davinci: Add support for clockevents
      clocksource/drivers/tegra: Set up maximum-ticks limit properly
      clocksource/drivers/tegra: Cycles can't be 0
      clocksource/drivers/tegra: Restore base address before cleanup
      clocksource/drivers/tegra: Add verbose definition for 1MHz constant
      ...

commit dd2cb348613b44f9d948b068775e159aad298599
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Mon Jul 1 04:26:06 2019 +0000

    clocksource/drivers: Continue making Hyper-V clocksource ISA agnostic
    
    Continue consolidating Hyper-V clock and timer code into an ISA
    independent Hyper-V clocksource driver.
    
    Move the existing clocksource code under drivers/hv and arch/x86 to the new
    clocksource driver while separating out the ISA dependencies. Update
    Hyper-V initialization to call initialization and cleanup routines since
    the Hyper-V synthetic clock is not independently enumerated in ACPI.
    
    Update Hyper-V clocksource users in KVM and VDSO to get definitions from
    the new include file.
    
    No behavior is changed and no new functionality is added.
    
    Suggested-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: "bp@alien8.de" <bp@alien8.de>
    Cc: "will.deacon@arm.com" <will.deacon@arm.com>
    Cc: "catalin.marinas@arm.com" <catalin.marinas@arm.com>
    Cc: "mark.rutland@arm.com" <mark.rutland@arm.com>
    Cc: "linux-arm-kernel@lists.infradead.org" <linux-arm-kernel@lists.infradead.org>
    Cc: "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>
    Cc: "linux-hyperv@vger.kernel.org" <linux-hyperv@vger.kernel.org>
    Cc: "olaf@aepfle.de" <olaf@aepfle.de>
    Cc: "apw@canonical.com" <apw@canonical.com>
    Cc: "jasowang@redhat.com" <jasowang@redhat.com>
    Cc: "marcelo.cerri@canonical.com" <marcelo.cerri@canonical.com>
    Cc: Sunil Muthuswamy <sunilmut@microsoft.com>
    Cc: KY Srinivasan <kys@microsoft.com>
    Cc: "sashal@kernel.org" <sashal@kernel.org>
    Cc: "vincenzo.frascino@arm.com" <vincenzo.frascino@arm.com>
    Cc: "linux-arch@vger.kernel.org" <linux-arch@vger.kernel.org>
    Cc: "linux-mips@vger.kernel.org" <linux-mips@vger.kernel.org>
    Cc: "linux-kselftest@vger.kernel.org" <linux-kselftest@vger.kernel.org>
    Cc: "arnd@arndb.de" <arnd@arndb.de>
    Cc: "linux@armlinux.org.uk" <linux@armlinux.org.uk>
    Cc: "ralf@linux-mips.org" <ralf@linux-mips.org>
    Cc: "paul.burton@mips.com" <paul.burton@mips.com>
    Cc: "daniel.lezcano@linaro.org" <daniel.lezcano@linaro.org>
    Cc: "salyzyn@android.com" <salyzyn@android.com>
    Cc: "pcc@google.com" <pcc@google.com>
    Cc: "shuah@kernel.org" <shuah@kernel.org>
    Cc: "0x7f454c46@gmail.com" <0x7f454c46@gmail.com>
    Cc: "linux@rasmusvillemoes.dk" <linux@rasmusvillemoes.dk>
    Cc: "huw@codeweavers.com" <huw@codeweavers.com>
    Cc: "sfr@canb.auug.org.au" <sfr@canb.auug.org.au>
    Cc: "pbonzini@redhat.com" <pbonzini@redhat.com>
    Cc: "rkrcmar@redhat.com" <rkrcmar@redhat.com>
    Cc: "kvm@vger.kernel.org" <kvm@vger.kernel.org>
    Link: https://lkml.kernel.org/r/1561955054-1838-3-git-send-email-mikelley@microsoft.com

commit fd1fea6834d0f9f93062ae6685862908a9baed39
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Mon Jul 1 04:25:56 2019 +0000

    clocksource/drivers: Make Hyper-V clocksource ISA agnostic
    
    Hyper-V clock/timer code and data structures are currently mixed
    in with other code in the ISA independent drivers/hv directory as
    well as the ISA dependent Hyper-V code under arch/x86.
    
    Consolidate this code and data structures into a Hyper-V clocksource driver
    to better follow the Linux model. In doing so, separate out the ISA
    dependent portions so the new clocksource driver works for x86 and for the
    in-process Hyper-V on ARM64 code.
    
    To start, move the existing clockevents code to create the new clocksource
    driver. Update the VMbus driver to call initialization and cleanup routines
    since the Hyper-V synthetic timers are not independently enumerated in
    ACPI.
    
    No behavior is changed and no new functionality is added.
    
    Suggested-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: "bp@alien8.de" <bp@alien8.de>
    Cc: "will.deacon@arm.com" <will.deacon@arm.com>
    Cc: "catalin.marinas@arm.com" <catalin.marinas@arm.com>
    Cc: "mark.rutland@arm.com" <mark.rutland@arm.com>
    Cc: "linux-arm-kernel@lists.infradead.org" <linux-arm-kernel@lists.infradead.org>
    Cc: "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>
    Cc: "linux-hyperv@vger.kernel.org" <linux-hyperv@vger.kernel.org>
    Cc: "olaf@aepfle.de" <olaf@aepfle.de>
    Cc: "apw@canonical.com" <apw@canonical.com>
    Cc: "jasowang@redhat.com" <jasowang@redhat.com>
    Cc: "marcelo.cerri@canonical.com" <marcelo.cerri@canonical.com>
    Cc: Sunil Muthuswamy <sunilmut@microsoft.com>
    Cc: KY Srinivasan <kys@microsoft.com>
    Cc: "sashal@kernel.org" <sashal@kernel.org>
    Cc: "vincenzo.frascino@arm.com" <vincenzo.frascino@arm.com>
    Cc: "linux-arch@vger.kernel.org" <linux-arch@vger.kernel.org>
    Cc: "linux-mips@vger.kernel.org" <linux-mips@vger.kernel.org>
    Cc: "linux-kselftest@vger.kernel.org" <linux-kselftest@vger.kernel.org>
    Cc: "arnd@arndb.de" <arnd@arndb.de>
    Cc: "linux@armlinux.org.uk" <linux@armlinux.org.uk>
    Cc: "ralf@linux-mips.org" <ralf@linux-mips.org>
    Cc: "paul.burton@mips.com" <paul.burton@mips.com>
    Cc: "daniel.lezcano@linaro.org" <daniel.lezcano@linaro.org>
    Cc: "salyzyn@android.com" <salyzyn@android.com>
    Cc: "pcc@google.com" <pcc@google.com>
    Cc: "shuah@kernel.org" <shuah@kernel.org>
    Cc: "0x7f454c46@gmail.com" <0x7f454c46@gmail.com>
    Cc: "linux@rasmusvillemoes.dk" <linux@rasmusvillemoes.dk>
    Cc: "huw@codeweavers.com" <huw@codeweavers.com>
    Cc: "sfr@canb.auug.org.au" <sfr@canb.auug.org.au>
    Cc: "pbonzini@redhat.com" <pbonzini@redhat.com>
    Cc: "rkrcmar@redhat.com" <rkrcmar@redhat.com>
    Cc: "kvm@vger.kernel.org" <kvm@vger.kernel.org>
    Link: https://lkml.kernel.org/r/1561955054-1838-2-git-send-email-mikelley@microsoft.com

commit 341924049558e5f7c1a148a2c461a417933d35d9
Merge: 516337048fa4 4a8f81b8c053
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jul 3 10:50:21 2019 +0200

    Merge branch 'timers/vdso' into timers/core
    
    so the hyper-v clocksource update can be applied.

commit fd329f276ecaad7a371d6f91b9bbea031d0c3440
Author: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date:   Thu Jun 27 19:35:37 2019 -0700

    x86/mtrr: Skip cache flushes on CPUs with cache self-snooping
    
    Programming MTRR registers in multi-processor systems is a rather lengthy
    process. Furthermore, all processors must program these registers in lock
    step and with interrupts disabled; the process also involves flushing
    caches and TLBs twice. As a result, the process may take a considerable
    amount of time.
    
    On some platforms, this can lead to a large skew of the refined-jiffies
    clock source. Early when booting, if no other clock is available (e.g.,
    booting with hpet=disabled), the refined-jiffies clock source is used to
    monitor the TSC clock source. If the skew of refined-jiffies is too large,
    Linux wrongly assumes that the TSC is unstable:
    
      clocksource: timekeeping watchdog on CPU1: Marking clocksource
                   'tsc-early' as unstable because the skew is too large:
      clocksource: 'refined-jiffies' wd_now: fffedc10 wd_last:
                   fffedb90 mask: ffffffff
      clocksource: 'tsc-early' cs_now: 5eccfddebc cs_last: 5e7e3303d4
                   mask: ffffffffffffffff
      tsc: Marking TSC unstable due to clocksource watchdog
    
    As per measurements, around 98% of the time needed by the procedure to
    program MTRRs in multi-processor systems is spent flushing caches with
    wbinvd(). As per the Section 11.11.8 of the Intel 64 and IA 32
    Architectures Software Developer's Manual, it is not necessary to flush
    caches if the CPU supports cache self-snooping. Thus, skipping the cache
    flushes can reduce by several tens of milliseconds the time needed to
    complete the programming of the MTRR registers:
    
    Platform                        Before     After
    104-core (208 Threads) Skylake  1437ms      28ms
      2-core (  4 Threads) Haswell   114ms       2ms
    
    Reported-by: Mohammad Etemadi <mohammad.etemadi@intel.com>
    Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Alan Cox <alan.cox@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Andi Kleen <andi.kleen@intel.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jordan Borgner <mail@jordan-borgner.de>
    Cc: "Ravi V. Shankar" <ravi.v.shankar@intel.com>
    Cc: Ricardo Neri <ricardo.neri@intel.com>
    Cc: Andy Shevchenko <andriy.shevchenko@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Peter Feiner <pfeiner@google.com>
    Cc: "Rafael J. Wysocki" <rafael.j.wysocki@intel.com>
    Link: https://lkml.kernel.org/r/1561689337-19390-3-git-send-email-ricardo.neri-calderon@linux.intel.com

commit 3222daf970f30133cc4c639cbecdc29c4ae91b2b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Jun 23 15:23:51 2019 +0200

    x86/hpet: Separate counter check out of clocksource register code
    
    The init code checks whether the HPET counter works late in the init
    function when the clocksource is registered. That should happen right with
    the other sanity checks.
    
    Split it into a separate validation function and move it to the other
    sanity checks.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
    Cc: Ashok Raj <ashok.raj@intel.com>
    Cc: Andi Kleen <andi.kleen@intel.com>
    Cc: Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Ravi Shankar <ravi.v.shankar@intel.com>
    Link: https://lkml.kernel.org/r/20190623132435.058540608@linutronix.de

commit a57e8e1982cc0e4631772c52218548432974de58
Merge: d48e0cd8fcaf a2e1bb44a35d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jun 26 16:45:49 2019 +0200

    Merge tag 'timers-v5.4' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/events updates from Daniel Lezcano:
    
     - Rewrite of the davinci timer resulting to an immutable branch to be
       shared with davinci platform specific tree (Bartosz Golaszewski)
    
     - Cleanup and improvements of the tegra timer (Dmitry Osipenko)
    
     - Add new nxp system counter timer (Bai Ping)
    
     - Increase priority for exynos_mct to take over the initialization
       of the IP the arch ARM timer depends on (Marek Szyprowski)
    
     - Change macro use _BITUL() by BIT() on arc timer (Masahiro Yamada)
    
     - Implement the delay timer on ixp4xx (Linus Walleij)
    
     - Add the SPDX license identifier on the meson timer (Neil Armstrong)

commit 9d90b93bf325e015bbae31b83f16da5e4e17effa
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jun 26 12:02:00 2019 +0200

    lib/vdso: Make delta calculation work correctly
    
    The x86 vdso implementation on which the generic vdso library is based on
    has subtle (unfortunately undocumented) twists:
    
     1) The code assumes that the clocksource mask is U64_MAX which means that
        no bits are masked. Which is true for any valid x86 VDSO clocksource.
        Stupidly it still did the mask operation for no reason and at the wrong
        place right after reading the clocksource.
    
     2) It contains a sanity check to catch the case where slightly
        unsynchronized TSC values can be observed which would cause the delta
        calculation to make a huge jump. It therefore checks whether the
        current TSC value is larger than the value on which the current
        conversion is based on. If it's not larger the base value is used to
        prevent time jumps.
    
    #1 Is not only stupid for the X86 case because it does the masking for no
    reason it is also completely wrong for clocksources with a smaller mask
    which can legitimately wrap around during a conversion period. The core
    timekeeping code does it correct by applying the mask after the delta
    calculation:
    
            (now - base) & mask
    
    #2 is equally broken for clocksources which have smaller masks and can wrap
    around during a conversion period because there the now > base check is
    just wrong and causes stale time stamps and time going backwards issues.
    
    Unbreak it by:
    
      1) Removing the mask operation from the clocksource read which makes the
         fallback detection work for all clocksources
    
      2) Replacing the conditional delta calculation with a overrideable inline
         function.
    
    #2 could reuse clocksource_delta() from the timekeeping code but that
    results in a significant performance hit for the x86 VSDO. The timekeeping
    core code must have the non optimized version as it has to operate
    correctly with clocksources which have smaller masks as well to handle the
    case where TSC is discarded as timekeeper clocksource and replaced by HPET
    or pmtimer. For the VDSO there is no replacement clocksource. If TSC is
    unusable the syscall is enforced which does the right thing.
    
    To accommodate to the needs of various architectures provide an
    override-able inline function which defaults to the regular delta
    calculation with masking:
    
            (now - base) & mask
    
    Override it for x86 with the non-masking and checking version.
    
    This unbreaks the ARM64 syscall fallback operation, allows to use
    clocksources with arbitrary width and preserves the performance
    optimization for x86.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: linux-arch@vger.kernel.org
    Cc: LAK <linux-arm-kernel@lists.infradead.org>
    Cc: linux-mips@vger.kernel.org
    Cc: linux-kselftest@vger.kernel.org
    Cc: catalin.marinas@arm.com
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: linux@armlinux.org.uk
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: paul.burton@mips.com
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: salyzyn@android.com
    Cc: pcc@google.com
    Cc: shuah@kernel.org
    Cc: 0x7f454c46@gmail.com
    Cc: linux@rasmusvillemoes.dk
    Cc: huw@codeweavers.com
    Cc: sthotton@marvell.com
    Cc: andre.przywara@arm.com
    Cc: Andy Lutomirski <luto@kernel.org>
    Link: https://lkml.kernel.org/r/alpine.DEB.2.21.1906261159230.32342@nanos.tec.linutronix.de

commit b0c74b96d177304b6d6f8981e90f37f1cd6afa58
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jun 24 11:50:56 2019 +0200

    clocksource/drivers/davinci: Add support for clocksource
    
    Extend the davinci-timer driver to also register a clock source.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 721154f972aa68772f410401ebfae795b7b4c5f8
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jun 24 11:50:55 2019 +0200

    clocksource/drivers/davinci: Add support for clockevents
    
    Currently the clocksource and clockevent support for davinci platforms
    lives in mach-davinci. It hard-codes many things, uses global variables,
    implements functionalities unused by any platform and has code fragments
    scattered across many (often unrelated) files.
    
    Implement a new, modern and simplified timer driver and put it into
    drivers/clocksource. We still need to support legacy board files so
    export a config structure and a function that allows machine code to
    register the timer.
    
    The timer we're using is 64-bit but can be programmed in dual 32-bit
    mode (both chained and unchained).
    
    On all davinci SoCs except for da830 we're using both halves. Lower half
    for clockevents and upper half for clocksource. On da830 we're using the
    lower half for both with the help of a compare register.
    
    This patch contains the core code and support for clockevent. The
    clocksource code will be included in a subsequent patch.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6fde3894e26ec53989b12162f11616029825a8c8
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Jun 18 17:03:58 2019 +0300

    clocksource/drivers/tegra: Set up maximum-ticks limit properly
    
    Tegra's timer has 29 bits for the counter and for the "load" register
    which sets counter to a load-value. The counter's value is lower than
    the actual value by 1 because it starts to decrement after one tick,
    hence the maximum number of ticks that hardware can handle equals to
    29 bits + 1.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0ef6b01d024c24fad307b277cfa4a2be7d25dc29
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Jun 18 17:03:57 2019 +0300

    clocksource/drivers/tegra: Cycles can't be 0
    
    Tegra's timer uses n+1 scheme for the counter, i.e. timer will fire after
    one tick if 0 is loaded. The minimum and maximum numbers of oneshot ticks
    are defined by clockevents_config_and_register(min, max) invocation and
    the min value is set to 1 tick. Hence "cycles" value can't ever be 0,
    unless it's a bug in clocksource core.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fc9babc2574691d3bbf0428f007b22261fed55c6
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Jun 18 17:03:56 2019 +0300

    clocksource/drivers/tegra: Restore base address before cleanup
    
    We're adjusting the timer's base for each per-CPU timer to point to the
    actual start of the timer since device-tree defines a compound registers
    range that includes all of the timers. In this case the original base
    need to be restore before calling iounmap to unmap the proper address.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2e08a4bb96fd275d42711af10b3484164046bd1d
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Jun 18 17:03:55 2019 +0300

    clocksource/drivers/tegra: Add verbose definition for 1MHz constant
    
    Convert all 1MHz literals to a verbose constant for better readability.
    
    Suggested-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7c708fda79ebdce0e207562b45a8f085b9f2114f
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Jun 18 17:03:54 2019 +0300

    clocksource/drivers/tegra: Drop unneeded typecasting in one place
    
    There is no need to cast void because kernel allows to do that without
    a warning message from a compiler.
    
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 09b2507fbf576ece526563886f5c215fda470924
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Jun 18 17:03:53 2019 +0300

    clocksource/drivers/tegra: Set and use timer's period
    
    The of_clk structure has a period field that is set up initially by
    timer_of_clk_init(), that period value need to be adjusted for a case of
    TIMER1-9 that are running at a fixed rate that doesn't match the clock's
    rate. Note that the period value is currently used only by some of the
    clocksource drivers internally and hence this is just a minor cleanup
    change that doesn't fix anything.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 99311d0e841c4235f784551af224de148feebc9b
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Jun 18 17:03:52 2019 +0300

    clocksource/drivers/tegra: Remove duplicated use of per_cpu_ptr
    
    It was left unnoticed by accident, which means that the code could be
    cleaned up a tad more.
    
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 59d43c9589538e82cd87d51ace69c9e350149d98
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Jun 18 17:03:51 2019 +0300

    clocksource/drivers/tegra: Restore timer rate on Tegra210
    
    The clocksource rate is initialized only for the first per-CPU clocksource
    and then that rate shall be replicated for the rest of clocksource's
    because they are initialized manually in the code.
    
    Fixes: 3be2a85a0b61 ("clocksource/drivers/tegra: Support per-CPU timers on all Tegra's")
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5a354412567d7de81d69b6ac61c3b7fcebbe497e
Author: Andrew Murray <andrew.murray@arm.com>
Date:   Thu Jun 13 13:51:02 2019 +0100

    clocksource/drivers/arm_arch_timer: Extract elf_hwcap use to arch-helper
    
    Different mechanisms are used to test and set elf_hwcaps between ARM
    and ARM64, this results in the use of ifdeferry in this file when
    setting/testing for the EVTSTRM hwcap.
    
    Let's improve readability by extracting this to an arch helper.
    
    Signed-off-by: Andrew Murray <andrew.murray@arm.com>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7117a44bc0eb5d73dc8aa8df92134f736c2099ac
Author: Bai Ping <ping.bai@nxp.com>
Date:   Wed Jun 5 06:40:52 2019 +0000

    clocksource/drivers/sysctr: Add nxp system counter timer driver support
    
    The system counter (sys_ctr) is a programmable system counter
    which provides a shared time base to the Cortex A15, A7, A53 etc cores.
    It is intended for use in applications where the counter is always
    powered on and supports multiple, unrelated clocks. The sys_ctr hardware
    supports:
     - 56-bit counter width (roll-over time greater than 40 years)
     - compare frame(64-bit compare value) contains programmable interrupt
       generation when compare value <= counter value.
    
    [dlezcano] Fixed over 80 chars length warning
    
    Signed-off-by: Bai Ping <ping.bai@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 668f870f98ac935a550e8f9b1fa6ef74831b3b40
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:48 2019 +0300

    clocksource/drivers/tegra: Rename timer-tegra20.c to timer-tegra.c
    
    Rename driver's source file to better reflect that it's not specific to
    older SoC generations.
    
    Suggested-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 87bd4c26a6c8e0aa29bf9c77accd16ab8c660a9a
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:47 2019 +0300

    clocksource/drivers/tegra: Lower clocksource rating for some Tegra's
    
    Arch-timer is more preferable for a range of Tegra SoC generations as
    it has higher precision and is not affect by any kind of problems.
    
    Pointed-out-by: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit acb4bb3f37f1fdec00421c4126bf1e2e276a892b
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:46 2019 +0300

    clocksource/drivers/tegra: Support COMPILE_TEST universally
    
    Remove build dependency on ARM for compile-testing to allow non-arch
    specific build-bots (like Intel's test robot) to compile the driver and
    report about problems.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 49a678b8ca4c4f40bb2775369c82c9faabfc4a59
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:44 2019 +0300

    clocksource/drivers/tegra: Minor code clean up
    
    Correct typo and use proper upper casing for acronyms in the comments,
    use common style for error messages, prepend error messages with
    "tegra-timer:", add error message for cpuhp_setup_state() failure and
    clean up whitespaces in the code to fix checkpatch warnings.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7a3916706e858ad0bc3b5629c68168e1449de26a
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:43 2019 +0300

    clocksource/drivers/tegra: Release all IRQ's on request_irq() error
    
    Release all requested IRQ's on the request error to properly clean up
    allocated resources.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6b349c3624d230f4bd692d57d8203a407f52b646
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:42 2019 +0300

    clocksource/drivers/tegra: Replace readl/writel with relaxed versions
    
    The readl/writel functions are inserting memory barrier to ensure that
    outstanding memory writes are completed, this results in L2 cache syncing
    being done on Tegra20 and Tegra30 which isn't a very cheap operation.
    Replace all readl/writel occurrences in the code with the relaxed versions
    since there is no need for the memory-access syncing.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 77d57d1d8016696daaf5614c070ac01c9652f4ce
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:41 2019 +0300

    clocksource/drivers/tegra: Reset hardware state on init
    
    Reset timer's hardware state to ensure that initially it is in a
    predictable state.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit af8d9129eced348c699cca73b1c52e3855df063e
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:40 2019 +0300

    clocksource/drivers/tegra: Unify timer code
    
    Tegra132 is 64bit platform and it has the tegra20-timer hardware unit.
    Right now the corresponding timer code isn't compiled for ARM64, remove
    ifdef'iness from the code and compile tegra20-timer for both 32 and 64 bit
    platforms. Also note that like the older generations, Tegra210 has the
    microseconds counter, hence the timer_us clocksource is now made available
    for Tegra210 as well.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f6d50ec5f85c98d191d8dda032557ab297c14401
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 3 21:59:39 2019 +0300

    clocksource/drivers/tegra: Support per-CPU timers on all Tegra's
    
    Assign TMR1-4 per-CPU core on 32bit Tegra's in a way it is done for
    Tegra210. In a result each core can handle its own timer events, less
    code is unique to ARM64 and Tegra's clock events driver now has higher
    rating on all Tegra's, replacing the ARM's TWD timer which isn't very
    accurate due to the clock rate jitter caused by CPU frequency scaling.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-By: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6282edb72bed5324352522d732080d4c1b9dfed6
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu May 30 12:50:43 2019 +0200

    clocksource/drivers/exynos_mct: Increase priority over ARM arch timer
    
    Exynos SoCs based on CA7/CA15 have 2 timer interfaces: custom Exynos MCT
    (Multi Core Timer) and standard ARM Architected Timers.
    
    There are use cases, where both timer interfaces are used simultanously.
    One of such examples is using Exynos MCT for the main system timer and
    ARM Architected Timers for the KVM and virtualized guests (KVM requires
    arch timers).
    
    Exynos Multi-Core Timer driver (exynos_mct) must be however started
    before ARM Architected Timers (arch_timer), because they both share some
    common hardware blocks (global system counter) and turning on MCT is
    needed to get ARM Architected Timer working properly.
    
    To ensure selecting Exynos MCT as the main system timer, increase MCT
    timer rating. To ensure proper starting order of both timers during
    suspend/resume cycle, increase MCT hotplug priority over ARM Archictected
    Timers.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 93665ab0626ca213074355f7ddab7856898eb73b
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Fri May 24 14:40:10 2019 +0900

    clocksource/drivers/arc_timer: Use BIT() instead of _BITUL()
    
    This is in-kernel C code, so there is no reason to use _BITUL().
    Replace it with equivalent BIT().
    
    I added #include <linux/bits.h> explicitly although it has been included
    by other headers eventually.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8925ed4b10345915d576ba2fc6b319e6eae3d8b8
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu May 23 20:16:02 2019 +0200

    clocksource/drivers/ixp4xx: Implement delay timer
    
    This adds delay timer functionality to the IXP4xx
    timer driver.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 91d59bdf87cac292afd29e0f5a00988ec95ff73b
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Mon May 20 16:00:07 2019 +0200

    clocksource/drivers/timer-meson6: Update with SPDX Licence identifier
    
    Comply with the licensing rules defined in the documentation.
    
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 969b15b002628ca4bb7fa4ee9c2e07bc545d0477
Merge: b272a0ad7301 7ef6f6f8d237
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Jun 22 16:58:24 2019 -0700

    Merge branch 'net-mediatek-Add-MT7621-TRGMII-mode-support'
    
    René van Dorst says:
    
    ====================
    net: mediatek: Add MT7621 TRGMII mode support
    
    Like many other mediatek SOCs, the MT7621 SOC and the internal MT7530
    switch both supports TRGMII mode. MT7621 TRGMII speed is fix 1200MBit.
    
    v1->v2:
     - Fix breakage on non MT7621 SOC
     - Support 25MHz and 40MHz XTAL as MT7530 clocksource
    ====================
    
    Tested-by: "Frank Wunderlich" <frank-w@public-files.de>
    Acked-by: Sean Wang <sean.wang@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7ef6f6f8d237fa6724108b57d9706cb5069688e4
Author: René van Dorst <opensource@vdorst.com>
Date:   Thu Jun 20 14:21:55 2019 +0200

    net: dsa: mt7530: Add MT7621 TRGMII mode support
    
    This patch add support TRGMII mode for MT7621 internal MT7530 switch.
    MT7621 TRGMII has only one fix speed mode of 1200MBit.
    
    Also adding support for mt7530 25MHz and 40MHz crystal clocksource.
    Values are based on Banana Pi R2 bsp [1].
    
    Don't change MT7623 registers on a MT7621 device.
    
    [1] https://github.com/BPI-SINOVOIP/BPI-R2-bsp/blob/master/linux-mt/drivers/net/ethernet/mediatek/gsw_mt7623.c#L769
    
    Signed-off-by: René van Dorst <opensource@vdorst.com>
    Tested-by: Frank Wunderlich <frank-w@public-files.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4aa215d0230222375c385559d98be8f119626a05
Author: Maciej Żenczykowski <maze@google.com>
Date:   Wed Apr 10 11:11:23 2019 -0700

    uml: fix a boot splat wrt use of cpu_all_mask
    
    [ Upstream commit 689a58605b63173acb0a8cf954af6a8f60440c93 ]
    
    Memory: 509108K/542612K available (3835K kernel code, 919K rwdata, 1028K rodata, 129K init, 211K bss, 33504K reserved, 0K cma-reserved)
    NR_IRQS: 15
    clocksource: timer: mask: 0xffffffffffffffff max_cycles: 0x1cd42e205, max_idle_ns: 881590404426 ns
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 0 at kernel/time/clockevents.c:458 clockevents_register_device+0x72/0x140
    posix-timer cpumask == cpu_all_mask, using cpu_possible_mask instead
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper Not tainted 5.1.0-rc4-00048-ged79cc87302b #4
    Stack:
     604ebda0 603c5370 604ebe20 6046fd17
     00000000 6006fcbb 604ebdb0 603c53b5
     604ebe10 6003bfc4 604ebdd0 9000001ca
    Call Trace:
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] ? clockevents_register_device+0x72/0x140
     [<6001f16e>] show_stack+0x13b/0x155
     [<603c5370>] ? dump_stack_print_info+0xe2/0xeb
     [<6006fcbb>] ? printk+0x0/0x94
     [<603c53b5>] dump_stack+0x2a/0x2c
     [<6003bfc4>] __warn+0x10e/0x13e
     [<60070320>] ? vprintk_func+0xc8/0xcf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6003c08b>] warn_slowpath_fmt+0x97/0x99
     [<600311a1>] ? set_signals+0x0/0x3f
     [<6003bff4>] ? warn_slowpath_fmt+0x0/0x99
     [<600842cb>] ? tick_oneshot_mode_active+0x44/0x4f
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6007d2d5>] ? __clocksource_select+0x20/0x1b1
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] clockevents_register_device+0x72/0x140
     [<60031192>] ? get_signals+0x0/0xf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60002eec>] um_timer_setup+0xc8/0xca
     [<60001b59>] start_kernel+0x47f/0x57e
     [<600035bc>] start_kernel_proc+0x49/0x4d
     [<6006c483>] ? kmsg_dump_register+0x82/0x8a
     [<6001de62>] new_thread_handler+0x81/0xb2
     [<60003571>] ? kmsg_dumper_stdout_init+0x1a/0x1c
     [<60020c75>] uml_finishsetup+0x54/0x59
    
    random: get_random_bytes called from init_oops_id+0x27/0x34 with crng_init=0
    ---[ end trace 00173d0117a88acb ]---
    Calibrating delay loop... 6941.90 BogoMIPS (lpj=34709504)
    
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Cc: Jeff Dike <jdike@addtoit.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Cc: linux-um@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ed7d75b2f09d836e71d597cd5879abb1a44e7a9
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Feb 27 09:48:51 2019 +0100

    x86/percpu: Relax smp_processor_id()
    
    Nadav reported that since this_cpu_read() became asm-volatile, many
    smp_processor_id() users generated worse code due to the extra
    constraints.
    
    However since smp_processor_id() is reading a stable value, we can use
    __this_cpu_read().
    
    While this does reduce text size somewhat, this mostly results in code
    movement to .text.unlikely as a result of more/larger .cold.
    subfunctions. Less text on the hotpath is good for I$.
    
      $ ./compare.sh defconfig-build1 defconfig-build2 vmlinux.o
      setup_APIC_ibs                                             90         98   -12,+20
      force_ibs_eilvt_setup                                     400        413   -57,+70
      pci_serr_error                                            109        104   -54,+49
      pci_serr_error                                            109        104   -54,+49
      unknown_nmi_error                                         125        120   -76,+71
      unknown_nmi_error                                         125        120   -76,+71
      io_check_error                                            125        132   -97,+104
      intel_thermal_interrupt                                   730        822   +92,+0
      intel_init_thermal                                        951        945   -6,+0
      generic_get_mtrr                                          301        294   -7,+0
      generic_get_mtrr                                          301        294   -7,+0
      generic_set_all                                           749        754   -44,+49
      get_fixed_ranges                                          352        360   -41,+49
      x86_acpi_suspend_lowlevel                                 369        363   -6,+0
      check_tsc_sync_source                                     412        412   -71,+71
      irq_migrate_all_off_this_cpu                              662        674   -14,+26
      clocksource_watchdog                                      748        748   -113,+113
      __perf_event_account_interrupt                            204        197   -7,+0
      attempt_merge                                            1748       1741   -7,+0
      intel_guc_send_ct                                        1424       1409   -15,+0
      __fini_doorbell                                           235        231   -4,+0
      bdw_set_cdclk                                             928        923   -5,+0
      gen11_dsi_disable                                        1571       1556   -15,+0
      gmbus_wait                                                493        488   -5,+0
      md_make_request                                           376        369   -7,+0
      __split_and_process_bio                                   543        536   -7,+0
      delay_tsc                                                  96         89   -7,+0
      hsw_disable_pc8                                           696        691   -5,+0
      tsc_verify_tsc_adjust                                     215        228   -22,+35
      cpuidle_driver_unref                                       56         49   -7,+0
      blk_account_io_completion                                 159        148   -11,+0
      mtrr_wrmsr                                                 95         99   -29,+33
      __intel_wait_for_register_fw                              401        419   +18,+0
      cpuidle_driver_ref                                         43         36   -7,+0
      cpuidle_get_driver                                         15          8   -7,+0
      blk_account_io_done                                       535        528   -7,+0
      irq_migrate_all_off_this_cpu                              662        674   -14,+26
      check_tsc_sync_source                                     412        412   -71,+71
      irq_wait_for_poll                                         170        163   -7,+0
      generic_end_io_acct                                       329        322   -7,+0
      x86_acpi_suspend_lowlevel                                 369        363   -6,+0
      nohz_balance_enter_idle                                   198        191   -7,+0
      generic_start_io_acct                                     254        247   -7,+0
      blk_account_io_start                                      341        334   -7,+0
      perf_event_task_tick                                      682        675   -7,+0
      intel_init_thermal                                        951        945   -6,+0
      amd_e400_c1e_apic_setup                                    47         51   -28,+32
      setup_APIC_eilvt                                          350        328   -22,+0
      hsw_enable_pc8                                           1611       1605   -6,+0
                                                   total   12985947   12985892   -994,+939
    
    Reported-by: Nadav Amit <nadav.amit@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit efba92d58fa37d714d665deddb5cc6458b39bb88
Merge: f763cf8e47d3 e3ff9c3678b4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jun 16 07:22:56 2019 -1000

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A set of small fixes:
    
       - Repair the ktime_get_coarse() functions so they actually deliver
         what they are supposed to: tick granular time stamps. The current
         code missed to add the accumulated nanoseconds part of the
         timekeeper so the resulting granularity was 1 second.
    
       - Prevent the tracer from infinitely recursing into time getter
         functions in the arm architectured timer by marking these functions
         notrace
    
       - Fix a trivial compiler warning caused by wrong qualifier ordering"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      timekeeping: Repair ktime_get_coarse*() granularity
      clocksource/drivers/arm_arch_timer: Don't trace count reader functions
      clocksource/drivers/timer-ti-dm: Change to new style declaration

commit c752badd81de32961b9b7b41190a920deb0337b5
Author: Maciej Żenczykowski <maze@google.com>
Date:   Wed Apr 10 11:11:23 2019 -0700

    uml: fix a boot splat wrt use of cpu_all_mask
    
    [ Upstream commit 689a58605b63173acb0a8cf954af6a8f60440c93 ]
    
    Memory: 509108K/542612K available (3835K kernel code, 919K rwdata, 1028K rodata, 129K init, 211K bss, 33504K reserved, 0K cma-reserved)
    NR_IRQS: 15
    clocksource: timer: mask: 0xffffffffffffffff max_cycles: 0x1cd42e205, max_idle_ns: 881590404426 ns
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 0 at kernel/time/clockevents.c:458 clockevents_register_device+0x72/0x140
    posix-timer cpumask == cpu_all_mask, using cpu_possible_mask instead
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper Not tainted 5.1.0-rc4-00048-ged79cc87302b #4
    Stack:
     604ebda0 603c5370 604ebe20 6046fd17
     00000000 6006fcbb 604ebdb0 603c53b5
     604ebe10 6003bfc4 604ebdd0 9000001ca
    Call Trace:
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] ? clockevents_register_device+0x72/0x140
     [<6001f16e>] show_stack+0x13b/0x155
     [<603c5370>] ? dump_stack_print_info+0xe2/0xeb
     [<6006fcbb>] ? printk+0x0/0x94
     [<603c53b5>] dump_stack+0x2a/0x2c
     [<6003bfc4>] __warn+0x10e/0x13e
     [<60070320>] ? vprintk_func+0xc8/0xcf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6003c08b>] warn_slowpath_fmt+0x97/0x99
     [<600311a1>] ? set_signals+0x0/0x3f
     [<6003bff4>] ? warn_slowpath_fmt+0x0/0x99
     [<600842cb>] ? tick_oneshot_mode_active+0x44/0x4f
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6007d2d5>] ? __clocksource_select+0x20/0x1b1
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] clockevents_register_device+0x72/0x140
     [<60031192>] ? get_signals+0x0/0xf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60002eec>] um_timer_setup+0xc8/0xca
     [<60001b59>] start_kernel+0x47f/0x57e
     [<600035bc>] start_kernel_proc+0x49/0x4d
     [<6006c483>] ? kmsg_dump_register+0x82/0x8a
     [<6001de62>] new_thread_handler+0x81/0xb2
     [<60003571>] ? kmsg_dumper_stdout_init+0x1a/0x1c
     [<60020c75>] uml_finishsetup+0x54/0x59
    
    random: get_random_bytes called from init_oops_id+0x27/0x34 with crng_init=0
    ---[ end trace 00173d0117a88acb ]---
    Calibrating delay loop... 6941.90 BogoMIPS (lpj=34709504)
    
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Cc: Jeff Dike <jdike@addtoit.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Cc: linux-um@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4aa028267019df11696077507994510a0d84726
Author: Maciej Żenczykowski <maze@google.com>
Date:   Wed Apr 10 11:11:23 2019 -0700

    uml: fix a boot splat wrt use of cpu_all_mask
    
    [ Upstream commit 689a58605b63173acb0a8cf954af6a8f60440c93 ]
    
    Memory: 509108K/542612K available (3835K kernel code, 919K rwdata, 1028K rodata, 129K init, 211K bss, 33504K reserved, 0K cma-reserved)
    NR_IRQS: 15
    clocksource: timer: mask: 0xffffffffffffffff max_cycles: 0x1cd42e205, max_idle_ns: 881590404426 ns
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 0 at kernel/time/clockevents.c:458 clockevents_register_device+0x72/0x140
    posix-timer cpumask == cpu_all_mask, using cpu_possible_mask instead
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper Not tainted 5.1.0-rc4-00048-ged79cc87302b #4
    Stack:
     604ebda0 603c5370 604ebe20 6046fd17
     00000000 6006fcbb 604ebdb0 603c53b5
     604ebe10 6003bfc4 604ebdd0 9000001ca
    Call Trace:
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] ? clockevents_register_device+0x72/0x140
     [<6001f16e>] show_stack+0x13b/0x155
     [<603c5370>] ? dump_stack_print_info+0xe2/0xeb
     [<6006fcbb>] ? printk+0x0/0x94
     [<603c53b5>] dump_stack+0x2a/0x2c
     [<6003bfc4>] __warn+0x10e/0x13e
     [<60070320>] ? vprintk_func+0xc8/0xcf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6003c08b>] warn_slowpath_fmt+0x97/0x99
     [<600311a1>] ? set_signals+0x0/0x3f
     [<6003bff4>] ? warn_slowpath_fmt+0x0/0x99
     [<600842cb>] ? tick_oneshot_mode_active+0x44/0x4f
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6007d2d5>] ? __clocksource_select+0x20/0x1b1
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] clockevents_register_device+0x72/0x140
     [<60031192>] ? get_signals+0x0/0xf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60002eec>] um_timer_setup+0xc8/0xca
     [<60001b59>] start_kernel+0x47f/0x57e
     [<600035bc>] start_kernel_proc+0x49/0x4d
     [<6006c483>] ? kmsg_dump_register+0x82/0x8a
     [<6001de62>] new_thread_handler+0x81/0xb2
     [<60003571>] ? kmsg_dumper_stdout_init+0x1a/0x1c
     [<60020c75>] uml_finishsetup+0x54/0x59
    
    random: get_random_bytes called from init_oops_id+0x27/0x34 with crng_init=0
    ---[ end trace 00173d0117a88acb ]---
    Calibrating delay loop... 6941.90 BogoMIPS (lpj=34709504)
    
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Cc: Jeff Dike <jdike@addtoit.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Cc: linux-um@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84e5ca83b1ed5f2041c7644d1e508e44ccec77bb
Author: Maciej Żenczykowski <maze@google.com>
Date:   Wed Apr 10 11:11:23 2019 -0700

    uml: fix a boot splat wrt use of cpu_all_mask
    
    [ Upstream commit 689a58605b63173acb0a8cf954af6a8f60440c93 ]
    
    Memory: 509108K/542612K available (3835K kernel code, 919K rwdata, 1028K rodata, 129K init, 211K bss, 33504K reserved, 0K cma-reserved)
    NR_IRQS: 15
    clocksource: timer: mask: 0xffffffffffffffff max_cycles: 0x1cd42e205, max_idle_ns: 881590404426 ns
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 0 at kernel/time/clockevents.c:458 clockevents_register_device+0x72/0x140
    posix-timer cpumask == cpu_all_mask, using cpu_possible_mask instead
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper Not tainted 5.1.0-rc4-00048-ged79cc87302b #4
    Stack:
     604ebda0 603c5370 604ebe20 6046fd17
     00000000 6006fcbb 604ebdb0 603c53b5
     604ebe10 6003bfc4 604ebdd0 9000001ca
    Call Trace:
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] ? clockevents_register_device+0x72/0x140
     [<6001f16e>] show_stack+0x13b/0x155
     [<603c5370>] ? dump_stack_print_info+0xe2/0xeb
     [<6006fcbb>] ? printk+0x0/0x94
     [<603c53b5>] dump_stack+0x2a/0x2c
     [<6003bfc4>] __warn+0x10e/0x13e
     [<60070320>] ? vprintk_func+0xc8/0xcf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6003c08b>] warn_slowpath_fmt+0x97/0x99
     [<600311a1>] ? set_signals+0x0/0x3f
     [<6003bff4>] ? warn_slowpath_fmt+0x0/0x99
     [<600842cb>] ? tick_oneshot_mode_active+0x44/0x4f
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6007d2d5>] ? __clocksource_select+0x20/0x1b1
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] clockevents_register_device+0x72/0x140
     [<60031192>] ? get_signals+0x0/0xf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60002eec>] um_timer_setup+0xc8/0xca
     [<60001b59>] start_kernel+0x47f/0x57e
     [<600035bc>] start_kernel_proc+0x49/0x4d
     [<6006c483>] ? kmsg_dump_register+0x82/0x8a
     [<6001de62>] new_thread_handler+0x81/0xb2
     [<60003571>] ? kmsg_dumper_stdout_init+0x1a/0x1c
     [<60020c75>] uml_finishsetup+0x54/0x59
    
    random: get_random_bytes called from init_oops_id+0x27/0x34 with crng_init=0
    ---[ end trace 00173d0117a88acb ]---
    Calibrating delay loop... 6941.90 BogoMIPS (lpj=34709504)
    
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Cc: Jeff Dike <jdike@addtoit.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Cc: linux-um@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f48b41f597e3b62b649abbf796e1e72901f9df3
Author: Mathieu Malaterre <malat@debian.org>
Date:   Fri May 24 12:33:39 2019 +0200

    clocksource: Move inline keyword to the beginning of function declarations
    
    The inline keyword was not at the beginning of the function declarations.
    Fix the following warnings triggered when using W=1:
    
      kernel/time/clocksource.c:108:1: warning: 'inline' is not at beginning of declaration [-Wold-style-declaration]
      kernel/time/clocksource.c:113:1: warning: 'inline' is not at beginning of declaration [-Wold-style-declaration]
    
    Signed-off-by: Mathieu Malaterre <malat@debian.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: trivial@kernel.org
    Cc: kernel-janitors@vger.kernel.org
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Link: https://lkml.kernel.org/r/20190524103339.28787-1-malat@debian.org

commit 5d6168fc61b7f13baf27ae5567be7ea1fccb463e
Author: Julien Thierry <julien.thierry@arm.com>
Date:   Fri May 24 10:10:25 2019 +0100

    clocksource/drivers/arm_arch_timer: Don't trace count reader functions
    
    With v5.2-rc1, The ftrace functions_graph tracer locks up whenever it is
    enabled on arm64.
    
    Since commit 0ea415390cd3 ("clocksource/arm_arch_timer: Use
    arch_timer_read_counter to access stable counters") a function pointer
    is consistently used to read the counter instead of potentially
    referencing an inlinable function.
    
    The graph tracers relies on accessing the timer counters to compute the
    time spent in functions which causes the lockup when attempting to trace
    these code paths.
    
    Annotate the arm arch timer counter accessors as notrace.
    
    Fixes: 0ea415390cd3 ("clocksource/arm_arch_timer: Use
           arch_timer_read_counter to access stable counters")
    Signed-off-by: Julien Thierry <julien.thierry@arm.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f31e98bfae1c8792701ef03acd47344866cb2e14
Author: Anders Roxell <anders.roxell@linaro.org>
Date:   Mon Jun 3 11:14:02 2019 +0200

    arm64: arch_timer: mark functions as __always_inline
    
    If CONFIG_FUNCTION_GRAPH_TRACER is enabled function
    arch_counter_get_cntvct() is marked as notrace. However, function
    __arch_counter_get_cntvct is marked as inline. If
    CONFIG_OPTIMIZE_INLINING is set that will make the two functions
    tracable which they shouldn't.
    
    Rework so that functions __arch_counter_get_* are marked with
    __always_inline so they will be inlined even if CONFIG_OPTIMIZE_INLINING
    is turned on.
    
    Fixes: 0ea415390cd3 ("clocksource/arm_arch_timer: Use arch_timer_read_counter to access stable counters")
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit 9c5b34c2f7eb01976a5aa29ccdb786a634e3d1e0
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue May 21 11:46:22 2019 -0700

    crypto: jitterentropy - change back to module_init()
    
    "jitterentropy_rng" doesn't have any other implementations, nor is it
    tested by the crypto self-tests.  So it was unnecessary to change it to
    subsys_initcall.  Also it depends on the main clocksource being
    initialized, which may happen after subsys_initcall, causing this error:
    
        jitterentropy: Initialization failed with host not compliant with requirements: 2
    
    Change it back to module_init().
    
    Fixes: c4741b230597 ("crypto: run initcalls for generic implementations earlier")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit a6fda6dab93c2c06ef4b8cb4b9258df6674d2438
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Wed Apr 24 09:34:46 2019 +0200

    rcutorture: Tweak kvm options
    
    In one of my rcutorture tests the TSC clocksource got marked unstable
    due to a large difference in the TSC value. I'm not sure if the guest
    run for a long time with disabled interrupts or if the host was very
    busy and didn't schedule the guest for some time.
    
    I took a look on the qemu/KVM options and decided to update the options:
    
    - Use kvm{32|64} as CPU. We could probably use `host' (like ARM does)
      for maximum available features but since we don't run any userland I'm
      not sure if it makes any difference.
    
    - Drop the "noapic" option. There is no history why the APIC was disabled,
      I see no reason for it.  Once old qemu versions fade away, we can add
      "x2apic=on,tsc-deadline=on,hypervisor=on,tsc_adjust=on".
    
    - Additional config options. It ensures that the kernel knowns that it
      runs as a kvm guest and can use virt devices like the kvm-clock as
      clocksource. The kvm-clock was the main motivation here.
    
    - I didn't add a random HW device. It would make the random device ready
      earlier (not it doesn't complete the initialisation at all) but I
      doubt that there is any need for this.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    [ paulmck: The world is not quite ready for CONFIG_PARAVIRT_SPINLOCKS=y
      and x2apic, so they are omitted for the time being. ]
    Signed-off-by: Paul E. McKenney <paulmck@linux.ibm.com>

commit cda03a9a7be6b94c637cffae5be1d269c538661b
Author: Philippe Mazenauer <philippe.mazenauer@outlook.de>
Date:   Tue May 21 12:26:04 2019 +0000

    clocksource/drivers/timer-ti-dm: Change to new style declaration
    
    Variable 'dmtimer_ops' was declared const static instead of static const.
    
    ../drivers/clocksource/timer-ti-dm.c:899:1: warning: ‘static’ is not at beginning of declaration [-Wold-style-declaration]
     const static struct omap_dm_timer_ops dmtimer_ops = {
     ^~~~~
    
    Signed-off-by: Philippe Mazenauer <philippe.mazenauer@outlook.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 06dcb6695d3c76cc4468a71a140162107b4a2e3c
Author: Will Deacon <will.deacon@arm.com>
Date:   Mon Apr 29 17:26:22 2019 +0100

    arm64: arch_timer: Ensure counter register reads occur with seqlock held
    
    commit 75a19a0202db21638a1c2b424afb867e1f9a2376 upstream.
    
    When executing clock_gettime(), either in the vDSO or via a system call,
    we need to ensure that the read of the counter register occurs within
    the seqlock reader critical section. This ensures that updates to the
    clocksource parameters (e.g. the multiplier) are consistent with the
    counter value and therefore avoids the situation where time appears to
    go backwards across multiple reads.
    
    Extend the vDSO logic so that the seqlock critical section covers the
    read of the counter register as well as accesses to the data page. Since
    reads of the counter system registers are not ordered by memory barrier
    instructions, introduce dependency ordering from the counter read to a
    subsequent memory access so that the seqlock memory barriers apply to
    the counter access in both the vDSO and the system call paths.
    
    Cc: <stable@vger.kernel.org>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lore.kernel.org/linux-arm-kernel/alpine.DEB.2.21.1902081950260.1662@nanos.tec.linutronix.de/
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e57320e0177a27634263aa020b7ede884b7f72b8
Author: Will Deacon <will.deacon@arm.com>
Date:   Mon Apr 29 17:26:22 2019 +0100

    arm64: arch_timer: Ensure counter register reads occur with seqlock held
    
    commit 75a19a0202db21638a1c2b424afb867e1f9a2376 upstream.
    
    When executing clock_gettime(), either in the vDSO or via a system call,
    we need to ensure that the read of the counter register occurs within
    the seqlock reader critical section. This ensures that updates to the
    clocksource parameters (e.g. the multiplier) are consistent with the
    counter value and therefore avoids the situation where time appears to
    go backwards across multiple reads.
    
    Extend the vDSO logic so that the seqlock critical section covers the
    read of the counter register as well as accesses to the data page. Since
    reads of the counter system registers are not ordered by memory barrier
    instructions, introduce dependency ordering from the counter read to a
    subsequent memory access so that the seqlock memory barriers apply to
    the counter access in both the vDSO and the system call paths.
    
    Cc: <stable@vger.kernel.org>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lore.kernel.org/linux-arm-kernel/alpine.DEB.2.21.1902081950260.1662@nanos.tec.linutronix.de/
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d696ceb15a31bedf89b3c572bf62b64fe5d69c4
Author: Will Deacon <will.deacon@arm.com>
Date:   Mon Apr 29 17:26:22 2019 +0100

    arm64: arch_timer: Ensure counter register reads occur with seqlock held
    
    commit 75a19a0202db21638a1c2b424afb867e1f9a2376 upstream.
    
    When executing clock_gettime(), either in the vDSO or via a system call,
    we need to ensure that the read of the counter register occurs within
    the seqlock reader critical section. This ensures that updates to the
    clocksource parameters (e.g. the multiplier) are consistent with the
    counter value and therefore avoids the situation where time appears to
    go backwards across multiple reads.
    
    Extend the vDSO logic so that the seqlock critical section covers the
    read of the counter register as well as accesses to the data page. Since
    reads of the counter system registers are not ordered by memory barrier
    instructions, introduce dependency ordering from the counter read to a
    subsequent memory access so that the seqlock memory barriers apply to
    the counter access in both the vDSO and the system call paths.
    
    Cc: <stable@vger.kernel.org>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lore.kernel.org/linux-arm-kernel/alpine.DEB.2.21.1902081950260.1662@nanos.tec.linutronix.de/
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c1eab2b4355e509f918a6752b41fe34e7f3831d
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Mon Apr 8 17:06:42 2019 +0200

    ARM: dts: at91sam9261ek: remove unused chosen nodes
    
    The chosen clocksource and clockevent bindings have never been accepted and
    parsed, remove them.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>

commit a13f950ef13ff1eaf2ce14f5462ca59c4b60fdd0
Merge: d9351ea14ddc ea7a5f90f103
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun May 19 11:11:20 2019 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull clocksource updates from Ingo Molnar:
     "Misc clocksource/clockevent driver updates that came in a bit late but
      are ready for v5.2"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      misc: atmel_tclib: Do not probe already used TCBs
      clocksource/drivers/timer-atmel-tcb: Convert tc_clksrc_suspend|resume() to static
      clocksource/drivers/tcb_clksrc: Rename the file for consistency
      clocksource/drivers/timer-atmel-pit: Rework Kconfig option
      clocksource/drivers/tcb_clksrc: Move Kconfig option
      ARM: at91: Implement clocksource selection
      clocksource/drivers/tcb_clksrc: Use tcb as sched_clock
      clocksource/drivers/tcb_clksrc: Stop depending on atmel_tclib
      ARM: at91: move SoC specific definitions to SoC folder
      clocksource/drivers/timer-milbeaut: Cleanup common register accesses
      clocksource/drivers/timer-milbeaut: Add shutdown function
      clocksource/drivers/timer-milbeaut: Fix to enable one-shot timer
      clocksource/drivers/tegra: Rework for compensation of suspend time
      clocksource/drivers/sp804: Add COMPILE_TEST to CONFIG_ARM_TIMER_SP804
      clocksource/drivers/sun4i: Add a compatible for suniv
      dt-bindings: timer: Add Allwinner suniv timer

commit dc068b0a2b54af7026f40e56a8dcebbff37fbd9f
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Tue Mar 12 11:32:56 2019 +0100

    clocksource/drivers/oxnas: Fix OX820 compatible
    
    [ Upstream commit fbc87aa0f7c429999dc31f1bac3b2615008cac32 ]
    
    The OX820 compatible is wrong is the driver, fix it.
    
    Fixes: 2ea3401e2a84 ("clocksource/drivers/oxnas: Add OX820 compatible")
    Reported-by: Daniel Golle <daniel@makrotopia.org>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7828986b84ba68ee4dbe0b8bf7cba351c9b7b730
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Tue Mar 12 11:32:56 2019 +0100

    clocksource/drivers/oxnas: Fix OX820 compatible
    
    [ Upstream commit fbc87aa0f7c429999dc31f1bac3b2615008cac32 ]
    
    The OX820 compatible is wrong is the driver, fix it.
    
    Fixes: 2ea3401e2a84 ("clocksource/drivers/oxnas: Add OX820 compatible")
    Reported-by: Daniel Golle <daniel@makrotopia.org>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a414ef36840d77cb36307c25f689bb191b065da
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 5 14:24:48 2019 +0100

    clocksource/drivers/npcm: select TIMER_OF
    
    [ Upstream commit 99834eead2a04e93a120abb112542b87c42ff5e1 ]
    
    When this is disabled, we get a link failure:
    
    drivers/clocksource/timer-npcm7xx.o: In function `npcm7xx_timer_init':
    timer-npcm7xx.c:(.init.text+0xf): undefined reference to `timer_of_init'
    
    Fixes: 1c00289ecd12 ("clocksource/drivers/npcm: Add NPCM7xx timer driver")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1e68de7659a8be67b56b264b7d833704146c1c4
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Tue Mar 12 11:32:56 2019 +0100

    clocksource/drivers/oxnas: Fix OX820 compatible
    
    [ Upstream commit fbc87aa0f7c429999dc31f1bac3b2615008cac32 ]
    
    The OX820 compatible is wrong is the driver, fix it.
    
    Fixes: 2ea3401e2a84 ("clocksource/drivers/oxnas: Add OX820 compatible")
    Reported-by: Daniel Golle <daniel@makrotopia.org>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 641a9b94456d262e039402c0583d19f3ab731b8e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 5 14:24:48 2019 +0100

    clocksource/drivers/npcm: select TIMER_OF
    
    [ Upstream commit 99834eead2a04e93a120abb112542b87c42ff5e1 ]
    
    When this is disabled, we get a link failure:
    
    drivers/clocksource/timer-npcm7xx.o: In function `npcm7xx_timer_init':
    timer-npcm7xx.c:(.init.text+0xf): undefined reference to `timer_of_init'
    
    Fixes: 1c00289ecd12 ("clocksource/drivers/npcm: Add NPCM7xx timer driver")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ffd87c63d36b28109c0d7898a1f44fea7d9dac8
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sun Feb 24 02:10:58 2019 -0500

    of: thermal: Improve print information
    
    Define pr_fmt macro to add a prefix to the message,
    this can make the thermal log better recognized.
    
    Before:
    
    [    0.602672] nfc: nfc_init: NFC Core ver 0.1
    [    0.602828] NET: Registered protocol family 39
    [    0.603435] clocksource: Switched to clocksource mct-frc
    [    0.746216] failed to build thermal zone cpu-thermal: -22
    [    0.746451] NET: Registered protocol family 2
    
    After:
    
    [    0.602804] NET: Registered protocol family 39
    [    0.603463] clocksource: Switched to clocksource mct-frc
    [    0.746309] thermal_sys: failed to build thermal zone cpu-thermal: -22
    [    0.746545] NET: Registered protocol family 2
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Eduardo Valentin <edubezval@gmail.com>

commit b970afcfcabd63cd3832e95db096439c177c3592
Merge: 8ea5b2abd07e 8150a153c013
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 10 05:29:27 2019 -0700

    Merge tag 'powerpc-5.2-1' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/powerpc/linux
    
    Pull powerpc updates from Michael Ellerman:
     "Slightly delayed due to the issue with printk() calling
      probe_kernel_read() interacting with our new user access prevention
      stuff, but all fixed now.
    
      The only out-of-area changes are the addition of a cpuhp_state, small
      additions to Documentation and MAINTAINERS updates.
    
      Highlights:
    
       - Support for Kernel Userspace Access/Execution Prevention (like
         SMAP/SMEP/PAN/PXN) on some 64-bit and 32-bit CPUs. This prevents
         the kernel from accidentally accessing userspace outside
         copy_to/from_user(), or ever executing userspace.
    
       - KASAN support on 32-bit.
    
       - Rework of where we map the kernel, vmalloc, etc. on 64-bit hash to
         use the same address ranges we use with the Radix MMU.
    
       - A rewrite into C of large parts of our idle handling code for
         64-bit Book3S (ie. power8 & power9).
    
       - A fast path entry for syscalls on 32-bit CPUs, for a 12-17% speedup
         in the null_syscall benchmark.
    
       - On 64-bit bare metal we have support for recovering from errors
         with the time base (our clocksource), however if that fails
         currently we hang in __delay() and never crash. We now have support
         for detecting that case and short circuiting __delay() so we at
         least panic() and reboot.
    
       - Add support for optionally enabling the DAWR on Power9, which had
         to be disabled by default due to a hardware erratum. This has the
         effect of enabling hardware breakpoints for GDB, the downside is a
         badly behaved program could crash the machine by pointing the DAWR
         at cache inhibited memory. This is opt-in obviously.
    
       - xmon, our crash handler, gets support for a read only mode where
         operations that could change memory or otherwise disturb the system
         are disabled.
    
      Plus many clean-ups, reworks and minor fixes etc.
    
      Thanks to: Christophe Leroy, Akshay Adiga, Alastair D'Silva, Alexey
      Kardashevskiy, Andrew Donnellan, Aneesh Kumar K.V, Anju T Sudhakar,
      Anton Blanchard, Ben Hutchings, Bo YU, Breno Leitao, Cédric Le Goater,
      Christopher M. Riedl, Christoph Hellwig, Colin Ian King, David Gibson,
      Ganesh Goudar, Gautham R. Shenoy, George Spelvin, Greg Kroah-Hartman,
      Greg Kurz, Horia Geantă, Jagadeesh Pagadala, Joel Stanley, Joe
      Perches, Julia Lawall, Laurentiu Tudor, Laurent Vivier, Lukas Bulwahn,
      Madhavan Srinivasan, Mahesh Salgaonkar, Mathieu Malaterre, Michael
      Neuling, Mukesh Ojha, Nathan Fontenot, Nathan Lynch, Nicholas Piggin,
      Nick Desaulniers, Oliver O'Halloran, Peng Hao, Qian Cai, Ravi
      Bangoria, Rick Lindsley, Russell Currey, Sachin Sant, Stewart Smith,
      Sukadev Bhattiprolu, Thomas Huth, Tobin C. Harding, Tyrel Datwyler,
      Valentin Schneider, Wei Yongjun, Wen Yang, YueHaibing"
    
    * tag 'powerpc-5.2-1' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/powerpc/linux: (205 commits)
      powerpc/64s: Use early_mmu_has_feature() in set_kuap()
      powerpc/book3s/64: check for NULL pointer in pgd_alloc()
      powerpc/mm: Fix hugetlb page initialization
      ocxl: Fix return value check in afu_ioctl()
      powerpc/mm: fix section mismatch for setup_kup()
      powerpc/mm: fix redundant inclusion of pgtable-frag.o in Makefile
      powerpc/mm: Fix makefile for KASAN
      powerpc/kasan: add missing/lost Makefile
      selftests/powerpc: Add a signal fuzzer selftest
      powerpc/booke64: set RI in default MSR
      ocxl: Provide global MMIO accessors for external drivers
      ocxl: move event_fd handling to frontend
      ocxl: afu_irq only deals with IRQ IDs, not offsets
      ocxl: Allow external drivers to use OpenCAPI contexts
      ocxl: Create a clear delineation between ocxl backend & frontend
      ocxl: Don't pass pci_dev around
      ocxl: Split pci.c
      ocxl: Remove some unused exported symbols
      ocxl: Remove superfluous 'extern' from headers
      ocxl: read_pasid never returns an error, so make it void
      ...

commit a44c1d700c848e221d80aab1029d36a60d21a0f4
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Nov 14 19:13:02 2018 +0000

    ARM: riscpc: replace gettimeoffset() with clocksource
    
    Replace the old gettimeoffset() interface (which became buggy in
    several ways) with a clocksource that atomically reads the count
    and status from the timer, and corrects the count as appropriate
    ensuring proper resolution of time without time warping backwards.
    
    We keep the original periodic timer non-clock event implementation
    to provide the kernel with a regular source of interrupts, which
    are required to keep the clocksource properly updated.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>

commit 689a58605b63173acb0a8cf954af6a8f60440c93
Author: Maciej Żenczykowski <maze@google.com>
Date:   Wed Apr 10 11:11:23 2019 -0700

    uml: fix a boot splat wrt use of cpu_all_mask
    
    Memory: 509108K/542612K available (3835K kernel code, 919K rwdata, 1028K rodata, 129K init, 211K bss, 33504K reserved, 0K cma-reserved)
    NR_IRQS: 15
    clocksource: timer: mask: 0xffffffffffffffff max_cycles: 0x1cd42e205, max_idle_ns: 881590404426 ns
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 0 at kernel/time/clockevents.c:458 clockevents_register_device+0x72/0x140
    posix-timer cpumask == cpu_all_mask, using cpu_possible_mask instead
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper Not tainted 5.1.0-rc4-00048-ged79cc87302b #4
    Stack:
     604ebda0 603c5370 604ebe20 6046fd17
     00000000 6006fcbb 604ebdb0 603c53b5
     604ebe10 6003bfc4 604ebdd0 9000001ca
    Call Trace:
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] ? clockevents_register_device+0x72/0x140
     [<6001f16e>] show_stack+0x13b/0x155
     [<603c5370>] ? dump_stack_print_info+0xe2/0xeb
     [<6006fcbb>] ? printk+0x0/0x94
     [<603c53b5>] dump_stack+0x2a/0x2c
     [<6003bfc4>] __warn+0x10e/0x13e
     [<60070320>] ? vprintk_func+0xc8/0xcf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6003c08b>] warn_slowpath_fmt+0x97/0x99
     [<600311a1>] ? set_signals+0x0/0x3f
     [<6003bff4>] ? warn_slowpath_fmt+0x0/0x99
     [<600842cb>] ? tick_oneshot_mode_active+0x44/0x4f
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<6007d2d5>] ? __clocksource_select+0x20/0x1b1
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60083160>] clockevents_register_device+0x72/0x140
     [<60031192>] ? get_signals+0x0/0xf
     [<60030fd6>] ? block_signals+0x0/0x16
     [<6006fcbb>] ? printk+0x0/0x94
     [<60002eec>] um_timer_setup+0xc8/0xca
     [<60001b59>] start_kernel+0x47f/0x57e
     [<600035bc>] start_kernel_proc+0x49/0x4d
     [<6006c483>] ? kmsg_dump_register+0x82/0x8a
     [<6001de62>] new_thread_handler+0x81/0xb2
     [<60003571>] ? kmsg_dumper_stdout_init+0x1a/0x1c
     [<60020c75>] uml_finishsetup+0x54/0x59
    
    random: get_random_bytes called from init_oops_id+0x27/0x34 with crng_init=0
    ---[ end trace 00173d0117a88acb ]---
    Calibrating delay loop... 6941.90 BogoMIPS (lpj=34709504)
    
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Cc: Jeff Dike <jdike@addtoit.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Cc: linux-um@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    
    Signed-off-by: Richard Weinberger <richard@nod.at>

commit c620f7bd0ba5c882b3e7fc199a8d5c2f6c2f5263
Merge: dd4e5d6106b2 b33f908811b7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 6 17:54:22 2019 -0700

    Merge tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux
    
    Pull arm64 updates from Will Deacon:
     "Mostly just incremental improvements here:
    
       - Introduce AT_HWCAP2 for advertising CPU features to userspace
    
       - Expose SVE2 availability to userspace
    
       - Support for "data cache clean to point of deep persistence" (DC PODP)
    
       - Honour "mitigations=off" on the cmdline and advertise status via
         sysfs
    
       - CPU timer erratum workaround (Neoverse-N1 #1188873)
    
       - Introduce perf PMU driver for the SMMUv3 performance counters
    
       - Add config option to disable the kuser helpers page for AArch32 tasks
    
       - Futex modifications to ensure liveness under contention
    
       - Rework debug exception handling to seperate kernel and user
         handlers
    
       - Non-critical fixes and cleanup"
    
    * tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux: (92 commits)
      Documentation: Add ARM64 to kernel-parameters.rst
      arm64/speculation: Support 'mitigations=' cmdline option
      arm64: ssbs: Don't treat CPUs with SSBS as unaffected by SSB
      arm64: enable generic CPU vulnerabilites support
      arm64: add sysfs vulnerability show for speculative store bypass
      arm64: Fix size of __early_cpu_boot_status
      clocksource/arm_arch_timer: Use arch_timer_read_counter to access stable counters
      clocksource/arm_arch_timer: Remove use of workaround static key
      clocksource/arm_arch_timer: Drop use of static key in arch_timer_reg_read_stable
      clocksource/arm_arch_timer: Direcly assign set_next_event workaround
      arm64: Use arch_timer_read_counter instead of arch_counter_get_cntvct
      watchdog/sbsa: Use arch_timer_read_counter instead of arch_counter_get_cntvct
      ARM: vdso: Remove dependency with the arch_timer driver internals
      arm64: Apply ARM64_ERRATUM_1188873 to Neoverse-N1
      arm64: Add part number for Neoverse N1
      arm64: Make ARM64_ERRATUM_1188873 depend on COMPAT
      arm64: Restrict ARM64_ERRATUM_1188873 mitigation to AArch32
      arm64: mm: Remove pte_unmap_nested()
      arm64: Fix compiler warning from pte_unmap() with -Wunused-but-set-variable
      arm64: compat: Reduce address limit for 64K pages
      ...

commit ccbc2e5ed192ccd2663477107379f843d072e649
Merge: fdafe5d1ffe8 fdd20ec8786a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 6 16:39:31 2019 -0700

    Merge tag 'm68k-for-v5.2-tag1' of git://git.kernel.org/pub/scm/linux/kernel/git/geert/linux-m68k
    
    Pull m68k updates from Geert Uytterhoeven:
    
     - drop arch_gettimeoffset and adopt clocksource API
    
     - defconfig updates
    
    * tag 'm68k-for-v5.2-tag1' of git://git.kernel.org/pub/scm/linux/kernel/git/geert/linux-m68k:
      Documentation/features/time: Mark m68k having modern-timekeeping
      m68k: defconfig: Update defconfigs for v5.1-rc1
      m68k: mvme16x: Handle timer counter overflow
      m68k: mvme16x: Convert to clocksource API
      m68k: mvme147: Handle timer counter overflow
      m68k: mvme147: Convert to clocksource API
      m68k: mac: Convert to clocksource API
      m68k: hp300: Handle timer counter overflow
      m68k: hp300: Convert to clocksource API
      m68k: bvme6000: Convert to clocksource API
      m68k: atari: Convert to clocksource API
      m68k: amiga: Convert to clocksource API
      m68k: Drop ARCH_USES_GETTIMEOFFSET
      m68k: apollo, q40, sun3, sun3x: Remove arch_gettimeoffset implementations
      m68k: mac: Fix VIA timer counter accesses
      m68k: Call timer_interrupt() with interrupts disabled

commit db10ad041b318a07985363e243742a07f4b0f44b
Merge: ba3934de557a 81423c37415f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 6 16:31:44 2019 -0700

    Merge branch 'x86-timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 timer updates from Ingo Molnar:
     "Two changes: an LTO improvement, plus the new 'nowatchdog' boot option
      to disable the clocksource watchdog"
    
    * 'x86-timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/timer: Don't inline __const_udelay()
      x86/tsc: Add option to disable tsc clocksource watchdog

commit 268ddb5e9b62221beda22b8e956cf6e732538a90
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Tue Apr 30 09:22:31 2019 +0800

    USB: serial: f81232: add high baud rate support
    
    The F81232 had 4 clocksource 1.846/18.46/14.77/24MHz and baud rates
    can be up to 1.5Mbits with 24MHz.
    
    F81232 Clock registers (106h)
    
    Bit1-0:     Clock source selector
                        00: 1.846MHz.
                        01: 18.46MHz.
                        10: 24MHz.
                        11: 14.77MHz.
    
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>

commit 7ebe68100418bd196cd4d638655e60d17c412d56
Author: kbuild test robot <lkp@intel.com>
Date:   Fri Apr 26 23:47:17 2019 +0200

    clocksource/drivers/timer-atmel-tcb: Convert tc_clksrc_suspend|resume() to static
    
    Statisticize tc_clksrc_suspend and tc_clksrc_resume.
    
    Signed-off-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a7aae768166e1fff342cfe3ab506e657b7ea8044
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Fri Apr 26 23:47:16 2019 +0200

    clocksource/drivers/tcb_clksrc: Rename the file for consistency
    
    For the sake of consistency, let's rename the file to a name similar
    to other file names in this directory.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2f982703bd00245af8455efad491ca45990bc0d8
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Fri Apr 26 23:47:15 2019 +0200

    clocksource/drivers/timer-atmel-pit: Rework Kconfig option
    
    Allow building the PIT driver when COMPILE_TEST is enabled. Also remove its
    default value so it can be disabled.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6275f4947e2f13a13a509d9fec4e1e5b15152680
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Fri Apr 26 23:47:14 2019 +0200

    clocksource/drivers/tcb_clksrc: Move Kconfig option
    
    Move the ATMEL_TCB_CLKSRC option to drivers/clocksource and make it silent
    if COMPILE_TEST is not selected.
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7803dc865bd2963192c623546fb240d01e3e7aa0
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Fri Apr 26 23:47:13 2019 +0200

    ARM: at91: Implement clocksource selection
    
    Allow selecting and unselecting the PIT clocksource driver so it doesn't
    have to be compiled when unused.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f712a1e8e59e8f42b5a9ec3887a4ad079bb18175
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Fri Apr 26 23:47:12 2019 +0200

    clocksource/drivers/tcb_clksrc: Use tcb as sched_clock
    
    Now that the driver is registered early enough, use the TCB as the
    sched_clock which is much more accurate than the jiffies implementation.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 86232bfd28d71db4a50562cf81ff88ef58a6d401
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Fri Apr 26 23:47:11 2019 +0200

    clocksource/drivers/tcb_clksrc: Stop depending on atmel_tclib
    
    atmel_tclib is probed too late in the boot process to be able to use the
    TCB as the boot clocksource. This is an issue for SoCs without the PIT
    (sams70, samv70 and samv71 families) as they simply currently can't boot.
    
    Get rid of the atmel_tclib dependency and probe everything on our own using
    the correct device tree binding.
    
    This also allows getting rid of ATMEL_TCB_CLKSRC_BLOCK and makes the driver
    a bit more flexible as the TCB is not hardcoded in the kernel anymore.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 37dbf65c6a1fb7978ebc818c6fa9a4cf54ded2f9
Author: Sugaya Taichi <sugaya.taichi@socionext.com>
Date:   Fri Apr 12 16:36:51 2019 +0900

    clocksource/drivers/timer-milbeaut: Cleanup common register accesses
    
    Aggregate common register accesses into shared functions for
    maintainability.
    
    Signed-off-by: Sugaya Taichi <sugaya.taichi@socionext.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 95d5dc712634901e6707d3178e6170aa6e0a43ce
Author: Sugaya Taichi <sugaya.taichi@socionext.com>
Date:   Fri Apr 12 16:36:50 2019 +0900

    clocksource/drivers/timer-milbeaut: Add shutdown function
    
    Add a shutdown operation to support shutdown timer.
    
    Signed-off-by: Sugaya Taichi <sugaya.taichi@socionext.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f0b1ca623d8df5dad977f22a1142a81a886b0eb8
Author: Sugaya Taichi <sugaya.taichi@socionext.com>
Date:   Fri Apr 12 16:36:49 2019 +0900

    clocksource/drivers/timer-milbeaut: Fix to enable one-shot timer
    
    Fix mlb_set_oneshot_state() to enable one-shot timer.
    The function should stop and start a timer, but "start" statement was
    dropped. Kick the register to start one-shot timer.
    
    Fixes: b58f28f306db ("clocksource/drivers/timer-milbeaut: Introduce timer for Milbeaut SoCs")
    Signed-off-by: Sugaya Taichi <sugaya.taichi@socionext.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 95170f0708f2f499da2594b29d39ac07ea221d7a
Author: Joseph Lo <josephl@nvidia.com>
Date:   Tue Apr 2 11:02:34 2019 +0800

    clocksource/drivers/tegra: Rework for compensation of suspend time
    
    Since the clocksource framework has the support for suspend time
    compensation. Re-work the driver to use that, so we can reduce the
    duplicate code.
    
    Suggested-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Joseph Lo <josephl@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit dfc82faad72520769ca146f857e65c23632eed5a
Author: David Abdurachmanov <david.abdurachmanov@gmail.com>
Date:   Mon Apr 8 10:07:45 2019 +0200

    clocksource/drivers/sp804: Add COMPILE_TEST to CONFIG_ARM_TIMER_SP804
    
    This is only used on arm and arm64 platforms. Add COMPILE_TEST option.
    
    Tested with 5.1-rc3+ on Fedora/RISCV. CONFIG_ARM_TIMER_SP804 no more shows
    up in riscv config.
    
    Signed-off-by: David Abdurachmanov <david.abdurachmanov@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0113ab803a8aee00bc136507bcc9b16466f3c3aa
Author: Mesih Kilinc <mesihkilinc@gmail.com>
Date:   Mon Feb 11 12:21:08 2019 +0300

    clocksource/drivers/sun4i: Add a compatible for suniv
    
    The suniv (new F-series) chip has a timer with less functionality than
    the A10 timer, e.g. it has only 3 channels.
    
    Add a new compatible for it. As we didn't use the extra channels on A10
    either now, the code needn't to be changed.
    
    The suniv chip is based on ARM926EJ-S CPU, thus it has no architecture timer.
    
    Register sun4i_timer as sched_clock on it.
    
    Signed-off-by: Mesih Kilinc <mesihkilinc@gmail.com>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0ea415390cd345b7d09e8c9ebd4b68adfe873043
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Mon Apr 8 16:49:07 2019 +0100

    clocksource/arm_arch_timer: Use arch_timer_read_counter to access stable counters
    
    Instead of always going via arch_counter_get_cntvct_stable to access the
    counter workaround, let's have arch_timer_read_counter point to the
    right method.
    
    For that, we need to track whether any CPU in the system has a
    workaround for the counter. This is done by having an atomic variable
    tracking this.
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit a862fc2254bdbcee3b5da4f730984e5d8393a2f1
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Mon Apr 8 16:49:06 2019 +0100

    clocksource/arm_arch_timer: Remove use of workaround static key
    
    The use of a static key in a hotplug path has proved to be a real
    nightmare, and makes it impossible to have scream-free lockdep
    kernel.
    
    Let's remove the static key altogether, and focus on something saner.
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit 57f27666f91a85431492b092f5db53ecab1a0739
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Mon Apr 8 16:49:05 2019 +0100

    clocksource/arm_arch_timer: Drop use of static key in arch_timer_reg_read_stable
    
    Let's start with the removal of the arch_timer_read_ool_enabled
    static key in arch_timer_reg_read_stable. It is not a fast path,
    and we can simplify things a bit.
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit 5ef19a161cfa88a59508979e2f39d3d092c1d5c0
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Mon Apr 8 16:49:04 2019 +0100

    clocksource/arm_arch_timer: Direcly assign set_next_event workaround
    
    When a given timer is affected by an erratum and requires an
    alternative implementation of set_next_event, we do a rather
    complicated dance to detect and call the workaround on each
    set_next_event call.
    
    This is clearly idiotic, as we can perfectly detect whether
    this CPU requires a workaround while setting up the clock event
    device.
    
    This only requires the CPU-specific detection to be done a bit
    earlier, and we can then safely override the set_next_event pointer
    if we have a workaround associated to that CPU.
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by; Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit 75a19a0202db21638a1c2b424afb867e1f9a2376
Author: Will Deacon <will.deacon@arm.com>
Date:   Mon Apr 29 17:26:22 2019 +0100

    arm64: arch_timer: Ensure counter register reads occur with seqlock held
    
    When executing clock_gettime(), either in the vDSO or via a system call,
    we need to ensure that the read of the counter register occurs within
    the seqlock reader critical section. This ensures that updates to the
    clocksource parameters (e.g. the multiplier) are consistent with the
    counter value and therefore avoids the situation where time appears to
    go backwards across multiple reads.
    
    Extend the vDSO logic so that the seqlock critical section covers the
    read of the counter register as well as accesses to the data page. Since
    reads of the counter system registers are not ordered by memory barrier
    instructions, introduce dependency ordering from the counter read to a
    subsequent memory access so that the seqlock memory barriers apply to
    the counter access in both the vDSO and the system call paths.
    
    Cc: <stable@vger.kernel.org>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Link: https://lore.kernel.org/linux-arm-kernel/alpine.DEB.2.21.1902081950260.1662@nanos.tec.linutronix.de/
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit 1895ef4ef229ec1873a78ce31fe50b38cfd2b58a
Merge: 6a508f98d95e 1fae0ad1e203
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Apr 28 23:43:07 2019 -0700

    Merge tag 'ixp4xx-for-armsoc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-nomadik into arm/soc
    
    This modernizes the IXP4xx platform and adds initial Device Tree
    Support. We migrate to MULTI_IRQ_HANDLER, bumps the IRQs to
    offset 16, converts to SPARSE_IRQ, then we add proper subsystem
    drivers in each subsystem for irqchip, GPIO and clocksource and
    switch over to using these new drivers.
    
    Next we modernize the NPE and QMGR drivers and push them down
    into drivers/soc.
    
    This has been tested on the IXP4xx NSLU2 and the Gateworks
    GW2358-4.
    
    * tag 'ixp4xx-for-armsoc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-nomadik: (31 commits)
      ARM: dts: Add queue manager and NPE to the IXP4xx DTSI
      soc: ixp4xx: qmgr: Add DT probe code
      soc: ixp4xx: qmgr: Add DT bindings for IXP4xx qmgr
      soc: ixp4xx: npe: Add DT probe code
      soc: ixp4xx: Add DT bindings for IXP4xx NPE
      soc: ixp4xx: qmgr: Pass resources
      soc: ixp4xx: Remove unused functions
      soc: ixp4xx: Uninline several functions
      soc: ixp4xx: npe: Pass addresses as resources
      ARM: ixp4xx: Turn the QMGR into a platform device
      ARM: ixp4xx: Turn the NPE into a platform device
      ARM: ixp4xx: Move IXP4xx QMGR and NPE headers
      ARM: ixp4xx: Move NPE and QMGR to drivers/soc
      ARM: dts: Add some initial IXP4xx device trees
      ARM: ixp4xx: Add device tree boot support
      ARM: ixp4xx: Add DT bindings
      gpio: ixp4xx: Add OF probing support
      gpio: ixp4xx: Add DT bindings
      clocksource/drivers/ixp4xx: Add OF initialization support
      clocksource/drivers/ixp4xx: Add DT bindings
      ...
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit d4c5c46206699d5a34542e96f90cee68f3dcd2b4
Author: Patrick Havelange <patrick.havelange@essensium.com>
Date:   Tue Apr 2 15:30:49 2019 +0900

    drivers/clocksource: timer-fsl-ftm: use common header for FlexTimer #defines
    
    Common #defines have been moved to "linux/fsl/ftm.h". Thus making use of
    this file.
    Also FTM_SC_CLK_SHIFT has been renamed to FTM_SC_CLK_MASK_SHIFT.
    
    Reviewed-by: Esben Haabendal <esben@haabendal.dk>
    Signed-off-by: Patrick Havelange <patrick.havelange@essensium.com>
    Signed-off-by: William Breathitt Gray <vilhelm.gray@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40df14cc5cc0e7c35366eb70dc2c80dd04cc5fbe
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sun Jan 27 14:06:56 2019 +0100

    clocksource/drivers/ixp4xx: Add OF initialization support
    
    This adds support for setting up the IXP4xx timer driver from
    device tree.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 7c23b0e1d4d32f1d1a96730ff1abb8b6cc681cfc
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Feb 1 19:12:58 2019 +0100

    clocksource/drivers/ixp4xx: Add DT bindings
    
    This adds device tree bindings for the Intel IXP4xx
    timers.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: devicetree@vger.kernel.org
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 65af666713ffd275d6db3f086f80e070594c4732
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sat Jan 26 00:51:51 2019 +0100

    ARM: ixp4xx: Switch to use new timer driver
    
    This augments the IXP4xx to select and use the new
    timer driver in drivers/clocksource and removes the old
    code in the machine.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 13e0b4059b984a1c63cae5604e1f665472751ea1
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sat Jan 26 00:49:19 2019 +0100

    clocksource/drivers/ixp4xx: Add driver
    
    This adds a new slightly rewritten timer driver for the
    Intel IXP4xx clocksource, clockevent and delay timer.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit e899cc3b3d9813f795c039c0f3c689861d6836da
Merge: b25c69b9d5e4 3f2552f7e9c5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 20 10:10:49 2019 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Ingo Molnar:
     "Misc clocksource driver fixes, and a sched-clock wrapping fix"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      timers/sched_clock: Prevent generic sched_clock wrap caused by tick_freeze()
      clocksource/drivers/timer-ti-dm: Remove omap_dm_timer_set_load_start
      clocksource/drivers/oxnas: Fix OX820 compatible
      clocksource/drivers/arm_arch_timer: Remove unneeded pr_fmt macro
      clocksource/drivers/npcm: select TIMER_OF

commit 1c09099188501fd9185b58e79f7c46a15301582c
Merge: 07d7e12091f4 4d86c9f73c5a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Apr 16 15:56:46 2019 +0200

    Merge tag 'timers-v5.1-rc6' of https://git.linaro.org/people/daniel.lezcano/linux into timers/urgent
    
    Pull clockevent/clocksource fixes from Daniel Lezcano:
    
     - Fix TIMER_OF missing option dependency for npcm (Arnd Bergmann)
    
     - Remove a pointless macro call for arm_arch_timer (Yangtao Li)
    
     - Fix wrong compatible string for oxnas (Neil Armstrong)
    
     - Fix compilation warning by removing a dead function on omap (Nathan Chancellor)

commit 4d86c9f73c5a9a7c3c0661e922509c2c51801671
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Mar 26 22:01:27 2019 -0700

    clocksource/drivers/timer-ti-dm: Remove omap_dm_timer_set_load_start
    
    Commit 008258d995a6 ("clocksource/drivers/timer-ti-dm: Make
    omap_dm_timer_set_load_start() static") made omap_dm_time_set_load_start
    static because its prototype was not defined in a header. Unfortunately,
    this causes a build warning on multi_v7_defconfig because this function
    is not used anywhere in this translation unit:
    
    drivers/clocksource/timer-ti-dm.c:589:12: error: unused function
    'omap_dm_timer_set_load_start' [-Werror,-Wunused-function]
    
    In fact, omap_dm_timer_set_load_start hasn't been used anywhere since
    commit f190be7f39a5 ("staging: tidspbridge: remove driver") and the
    prototype was removed in commit 592ea6bd1fad ("clocksource: timer-ti-dm:
    Make unexported functions static"), which is probably where this should
    have happened.
    
    Fixes: 592ea6bd1fad ("clocksource: timer-ti-dm: Make unexported functions static")
    Fixes: 008258d995a6 ("clocksource/drivers/timer-ti-dm: Make omap_dm_timer_set_load_start() static")
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fbc87aa0f7c429999dc31f1bac3b2615008cac32
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Tue Mar 12 11:32:56 2019 +0100

    clocksource/drivers/oxnas: Fix OX820 compatible
    
    The OX820 compatible is wrong is the driver, fix it.
    
    Fixes: 2ea3401e2a84 ("clocksource/drivers/oxnas: Add OX820 compatible")
    Reported-by: Daniel Golle <daniel@makrotopia.org>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9155697e20040658438b89e4ceec415ec125f478
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Tue Mar 5 12:08:51 2019 -0500

    clocksource/drivers/arm_arch_timer: Remove unneeded pr_fmt macro
    
    After this commit ded24019b6b6f(clocksource: arm_arch_timer: clean up
    printk usage), the previous macro is redundant, so delete it.
    
    And move the new macro to the previous position.
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 99834eead2a04e93a120abb112542b87c42ff5e1
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 5 14:24:48 2019 +0100

    clocksource/drivers/npcm: select TIMER_OF
    
    When this is disabled, we get a link failure:
    
    drivers/clocksource/timer-npcm7xx.o: In function `npcm7xx_timer_init':
    timer-npcm7xx.c:(.init.text+0xf): undefined reference to `timer_of_init'
    
    Fixes: 1c00289ecd12 ("clocksource/drivers/npcm: Add NPCM7xx timer driver")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 809ecabb6d418d0f711d0cb0d58743c41d4be9f4
Author: Atish Patra <atish.patra@wdc.com>
Date:   Fri Mar 22 14:54:11 2019 -0700

    clocksource/drivers/riscv: Fix clocksource mask
    
    commit 32d0be018f6f5ee2d5d19c4795304613560814cf upstream.
    
    For all riscv architectures (RV32, RV64 and RV128), the clocksource
    is a 64 bit incrementing counter.
    
    Fix the clock source mask accordingly.
    
    Tested on both 64bit and 32 bit virt machine in QEMU.
    
    Fixes: 62b019436814 ("clocksource: new RISC-V SBI timer driver")
    Signed-off-by: Atish Patra <atish.patra@wdc.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-riscv@lists.infradead.org
    Cc: Palmer Dabbelt <palmer@sifive.com>
    Cc: Anup Patel <Anup.Patel@wdc.com>
    Cc: Damien Le Moal <Damien.LeMoal@wdc.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190322215411.19362-1-atish.patra@wdc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80045e14423aaf1d3d51bca0524336f8a624003e
Merge: 5cec2d2e5839 7c22278edd0a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Mar 26 17:17:40 2019 +0900

    Merge tag 'misc-habanalabs-fixes-2019-03-26' of git://people.freedesktop.org/~gabbayo/linux into char-misc-next:
    
    Oded writes:
    
    The following bug fixes are included in this tag:
    
    - Fix host crash upon resume after suspend
    - Fix MMU related bugs which result in user's jobs getting stuck
    - Fix race between user context cleanup and hard-reset which results in
      host crash
    - Fix sparse warning
    
    * tag 'misc-habanalabs-fixes-2019-03-26' of git://people.freedesktop.org/~gabbayo/linux: (265 commits)
      habanalabs: cast to expected type
      habanalabs: prevent host crash during suspend/resume
      habanalabs: perform accounting for active CS
      habanalabs: fix mapping with page size bigger than 4KB
      habanalabs: complete user context cleanup before hard reset
      habanalabs: fix bug when mapping very large memory area
      habanalabs: fix MMU number of pages calculation
      Linux 5.1-rc2
      clocksource/drivers/clps711x: Remove board support
      ext4: prohibit fstrim in norecovery mode
      ext4: cleanup bh release code in ext4_ind_remove_space()
      ext4: brelse all indirect buffer in ext4_ind_remove_space()
      genirq: Mark expected switch case fall-through
      clocksource/drivers/riscv: Fix clocksource mask
      x86/gart: Exclude GART aperture from kcore
      cifs: update internal module version number
      SMB3: Fix SMB3.1.1 guest mounts to Samba
      cifs: Fix slab-out-of-bounds when tracing SMB tcon
      cifs: allow guest mounts to work for smb3.11
      fix incorrect error code mapping for OBJECTID_NOT_FOUND
      ...

commit 3d744eee38f11cafb0fc332c3081ab1cd07a89f7
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: mvme16x: Convert to clocksource API
    
    Add a platform clocksource by adapting the existing arch_gettimeoffset
    implementation.
    
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit fc4c47b3b5b8fe2b5d2940b9bd6203609b571b50
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: mvme147: Convert to clocksource API
    
    Add a platform clocksource by adapting the existing arch_gettimeoffset
    implementation.
    
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit 481fa139b893ff3fdbab6ea1b98271f6dde11135
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: mac: Convert to clocksource API
    
    Add a platform clocksource by adapting the existing arch_gettimeoffset
    implementation.
    
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit 2ed16626f58f88892864ed0cd68f841872ed1ca1
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: hp300: Convert to clocksource API
    
    Add a platform clocksource by adapting the existing arch_gettimeoffset
    implementation.
    
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit 3384df06c131833ef5fbc117cccfe6aac331bdda
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: bvme6000: Convert to clocksource API
    
    Add a platform clocksource by adapting the existing arch_gettimeoffset
    implementation.
    
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit 26ccd2d376d9b7de9a27b9a7ed71e16216101921
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: atari: Convert to clocksource API
    
    Add a platform clocksource by adapting the existing arch_gettimeoffset
    implementation.
    
    Normally the MFP timer C interrupt flag would be used to check for
    timer counter wrap-around. Unfortunately, that flag gets cleared by the
    MFP itself (due to automatic End-of-Interrupt mode). This means that
    mfp_timer_c_handler() and atari_read_clk() must race when accounting
    for counter wrap-around.
    
    That problem is avoided by effectively stopping the clock when it might
    otherwise jump backwards (due to interrupt latency). Note that this may
    affect clock accuracy.
    
    After the timer interrupt is asserted, wait for the counter to be
    reloaded so that atari_read_clk() will not see the intermediate state
    as that would cause the clock to jump backwards.
    
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Tested-by: Michael Schmitz <schmitzmic@gmail.com>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit 5afd3d06e5cb30a312aaa34348f9457b9fb38a52
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: amiga: Convert to clocksource API
    
    Add a platform clocksource by adapting the existing arch_gettimeoffset
    implementation.
    
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Tested-by: Michael Schmitz <schmitzmic@gmail.com>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit 7d6ca23554e34f25a70cb25666194f25b38c319b
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: Drop ARCH_USES_GETTIMEOFFSET
    
    The functions that implement arch_gettimeoffset are re-used by
    new clocksource drivers in subsequent patches.
    
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit 1efdd4bd254311498123a15fa0acd565f454da97
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Dec 1 11:53:10 2018 +1100

    m68k: Call timer_interrupt() with interrupts disabled
    
    Some platforms execute their timer handler with the interrupt priority
    level set below 6. That means the handler could be interrupted by another
    driver and this could lead to re-entry of the timer core.
    
    Avoid this by use of local_irq_save/restore for timer interrupt dispatch.
    This provides mutual exclusion around the timer interrupt flag access
    which is needed later in this series for the clocksource conversion.
    
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/alpine.DEB.2.21.1811131407120.2697@nanos.tec.linutronix.de
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit a75eda7bce5e8ffdebe6ddfe513b31e5ec3527d2
Merge: f6cc519b6aed 2a6a8e2d9004
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Mar 24 11:09:47 2019 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A set of small fixes plus the removal of stale board support code:
    
       - Remove the board support code from the clpx711x clocksource driver.
         This change had fallen through the cracks and I'm sending it now
         rather than dealing with people who want to improve that stale code
         for 3 month.
    
       - Use the proper clocksource mask on RICSV
    
       - Make local scope functions and variables static"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/clps711x: Remove board support
      clocksource/drivers/riscv: Fix clocksource mask
      clocksource/drivers/mips-gic-timer: Make gic_compare_irqaction static
      clocksource/drivers/timer-ti-dm: Make omap_dm_timer_set_load_start() static
      clocksource/drivers/tcb_clksrc: Make tc_clksrc_suspend/resume() static
      clocksource/drivers/clps711x: Make clps711x_clksrc_init() static
      time/jiffies: Make refined_jiffies static

commit 2a6a8e2d9004b5303fcb494588ba3a3b87a256c3
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Thu Dec 20 14:16:26 2018 +0300

    clocksource/drivers/clps711x: Remove board support
    
    Since board support for the CLPS711X platform was removed,
    remove the board support from the clps711x-timer driver.
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lkml.kernel.org/r/20181220111626.17140-1-shc_work@mail.ru

commit 384dada74d3710d74b673ce5f96294b1375d6963
Author: Pavel Tatashin <pasha.tatashin@soleen.com>
Date:   Sat Jan 26 12:49:56 2019 -0500

    x86/kvmclock: set offset for kvm unstable clock
    
    commit b5179ec4187251a751832193693d6e474d3445ac upstream.
    
    VMs may show incorrect uptime and dmesg printk offsets on hypervisors with
    unstable clock. The problem is produced when VM is rebooted without exiting
    from qemu.
    
    The fix is to calculate clock offset not only for stable clock but for
    unstable clock as well, and use kvm_sched_clock_read() which substracts
    the offset for both clocks.
    
    This is safe, because pvclock_clocksource_read() does the right thing and
    makes sure that clock always goes forward, so once offset is calculated
    with unstable clock, we won't get new reads that are smaller than offset,
    and thus won't get negative results.
    
    Thank you Jon DeVree for helping to reproduce this issue.
    
    Fixes: 857baa87b642 ("sched/clock: Enable sched clock early")
    Cc: stable@vger.kernel.org
    Reported-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b280a0bfc6d977148915dfbe27ef3af68ac6597
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat Jan 12 20:17:18 2019 -0600

    clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability
    
    commit c950ca8c35eeb32224a63adc47e12f9e226da241 upstream.
    
    The Allwinner A64 SoC is known[1] to have an unstable architectural
    timer, which manifests itself most obviously in the time jumping forward
    a multiple of 95 years[2][3]. This coincides with 2^56 cycles at a
    timer frequency of 24 MHz, implying that the time went slightly backward
    (and this was interpreted by the kernel as it jumping forward and
    wrapping around past the epoch).
    
    Investigation revealed instability in the low bits of CNTVCT at the
    point a high bit rolls over. This leads to power-of-two cycle forward
    and backward jumps. (Testing shows that forward jumps are about twice as
    likely as backward jumps.) Since the counter value returns to normal
    after an indeterminate read, each "jump" really consists of both a
    forward and backward jump from the software perspective.
    
    Unless the kernel is trapping CNTVCT reads, a userspace program is able
    to read the register in a loop faster than it changes. A test program
    running on all 4 CPU cores that reported jumps larger than 100 ms was
    run for 13.6 hours and reported the following:
    
     Count | Event
    -------+---------------------------
      9940 | jumped backward      699ms
       268 | jumped backward     1398ms
         1 | jumped backward     2097ms
     16020 | jumped forward       175ms
      6443 | jumped forward       699ms
      2976 | jumped forward      1398ms
         9 | jumped forward    356516ms
         9 | jumped forward    357215ms
         4 | jumped forward    714430ms
         1 | jumped forward   3578440ms
    
    This works out to a jump larger than 100 ms about every 5.5 seconds on
    each CPU core.
    
    The largest jump (almost an hour!) was the following sequence of reads:
        0x0000007fffffffff → 0x00000093feffffff → 0x0000008000000000
    
    Note that the middle bits don't necessarily all read as all zeroes or
    all ones during the anomalous behavior; however the low 10 bits checked
    by the function in this patch have never been observed with any other
    value.
    
    Also note that smaller jumps are much more common, with backward jumps
    of 2048 (2^11) cycles observed over 400 times per second on each core.
    (Of course, this is partially explained by lower bits rolling over more
    frequently.) Any one of these could have caused the 95 year time skip.
    
    Similar anomalies were observed while reading CNTPCT (after patching the
    kernel to allow reads from userspace). However, the CNTPCT jumps are
    much less frequent, and only small jumps were observed. The same program
    as before (except now reading CNTPCT) observed after 72 hours:
    
     Count | Event
    -------+---------------------------
        17 | jumped backward      699ms
        52 | jumped forward       175ms
      2831 | jumped forward       699ms
         5 | jumped forward      1398ms
    
    Further investigation showed that the instability in CNTPCT/CNTVCT also
    affected the respective timer's TVAL register. The following values were
    observed immediately after writing CNVT_TVAL to 0x10000000:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL          | CNTV_TVAL Error
    --------------------+------------+--------------------+-----------------
     0x000000d4a2d8bfff | 0x10003fff | 0x000000d4b2d8bfff | +0x00004000
     0x000000d4a2d94000 | 0x0fffffff | 0x000000d4b2d97fff | -0x00004000
     0x000000d4a2d97fff | 0x10003fff | 0x000000d4b2d97fff | +0x00004000
     0x000000d4a2d9c000 | 0x0fffffff | 0x000000d4b2d9ffff | -0x00004000
    
    The pattern of errors in CNTV_TVAL seemed to depend on exactly which
    value was written to it. For example, after writing 0x10101010:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL          | CNTV_TVAL Error
    --------------------+------------+--------------------+-----------------
     0x000001ac3effffff | 0x1110100f | 0x000001ac4f10100f | +0x1000000
     0x000001ac40000000 | 0x1010100f | 0x000001ac5110100f | -0x1000000
     0x000001ac58ffffff | 0x1110100f | 0x000001ac6910100f | +0x1000000
     0x000001ac66000000 | 0x1010100f | 0x000001ac7710100f | -0x1000000
     0x000001ac6affffff | 0x1110100f | 0x000001ac7b10100f | +0x1000000
     0x000001ac6e000000 | 0x1010100f | 0x000001ac7f10100f | -0x1000000
    
    I was also twice able to reproduce the issue covered by Allwinner's
    workaround[4], that writing to TVAL sometimes fails, and both CVAL and
    TVAL are left with entirely bogus values. One was the following values:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL
    --------------------+------------+--------------------------------------
     0x000000d4a2d6014c | 0x8fbd5721 | 0x000000d132935fff (615s in the past)
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    
    ========================================================================
    
    Because the CPU can read the CNTPCT/CNTVCT registers faster than they
    change, performing two reads of the register and comparing the high bits
    (like other workarounds) is not a workable solution. And because the
    timer can jump both forward and backward, no pair of reads can
    distinguish a good value from a bad one. The only way to guarantee a
    good value from consecutive reads would be to read _three_ times, and
    take the middle value only if the three values are 1) each unique and
    2) increasing. This takes at minimum 3 counter cycles (125 ns), or more
    if an anomaly is detected.
    
    However, since there is a distinct pattern to the bad values, we can
    optimize the common case (1022/1024 of the time) to a single read by
    simply ignoring values that match the error pattern. This still takes no
    more than 3 cycles in the worst case, and requires much less code. As an
    additional safety check, we still limit the loop iteration to the number
    of max-frequency (1.2 GHz) CPU cycles in three 24 MHz counter periods.
    
    For the TVAL registers, the simple solution is to not use them. Instead,
    read or write the CVAL and calculate the TVAL value in software.
    
    Although the manufacturer is aware of at least part of the erratum[4],
    there is no official name for it. For now, use the kernel-internal name
    "UNKNOWN1".
    
    [1]: https://github.com/armbian/build/commit/a08cd6fe7ae9
    [2]: https://forum.armbian.com/topic/3458-a64-datetime-clock-issue/
    [3]: https://irclog.whitequark.org/linux-sunxi/2018-01-26
    [4]: https://github.com/Allwinner-Homlet/H6-BSP4.9-linux/blob/master/drivers/clocksource/arm_arch_timer.c#L272
    
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Tested-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 773b445425d67891fb58c47d7e059a32c0e99c76
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:14 2019 +0000

    clocksource/drivers/exynos_mct: Clear timer interrupt when shutdown
    
    commit d2f276c8d3c224d5b493c42b6cf006ae4e64fb1c upstream.
    
    When shutting down the timer, ensure that after we have stopped the
    timer any pending interrupts are cleared. This fixes a problem when
    suspending, as interrupts are disabled before the timer is stopped,
    so the timer interrupt may still be asserted, preventing the system
    entering a low power state when the wfi is executed.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: <stable@vger.kernel.org> # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de90b88a20de2fbb10811c8505aa493a4620a5f4
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:13 2019 +0000

    clocksource/drivers/exynos_mct: Move one-shot check from tick clear to ISR
    
    commit a5719a40aef956ba704f2aa1c7b977224d60fa96 upstream.
    
    When a timer tick occurs and the clock is in one-shot mode, the timer
    needs to be stopped to prevent it triggering subsequent interrupts.
    Currently this code is in exynos4_mct_tick_clear(), but as it is
    only needed when an ISR occurs move it into exynos4_mct_tick_isr(),
    leaving exynos4_mct_tick_clear() just doing what its name suggests it
    should.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: stable@vger.kernel.org # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e19ca3fe6cf230a0e5df70da7acade133f2b670c
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat Jan 12 20:17:18 2019 -0600

    clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability
    
    commit c950ca8c35eeb32224a63adc47e12f9e226da241 upstream.
    
    The Allwinner A64 SoC is known[1] to have an unstable architectural
    timer, which manifests itself most obviously in the time jumping forward
    a multiple of 95 years[2][3]. This coincides with 2^56 cycles at a
    timer frequency of 24 MHz, implying that the time went slightly backward
    (and this was interpreted by the kernel as it jumping forward and
    wrapping around past the epoch).
    
    Investigation revealed instability in the low bits of CNTVCT at the
    point a high bit rolls over. This leads to power-of-two cycle forward
    and backward jumps. (Testing shows that forward jumps are about twice as
    likely as backward jumps.) Since the counter value returns to normal
    after an indeterminate read, each "jump" really consists of both a
    forward and backward jump from the software perspective.
    
    Unless the kernel is trapping CNTVCT reads, a userspace program is able
    to read the register in a loop faster than it changes. A test program
    running on all 4 CPU cores that reported jumps larger than 100 ms was
    run for 13.6 hours and reported the following:
    
     Count | Event
    -------+---------------------------
      9940 | jumped backward      699ms
       268 | jumped backward     1398ms
         1 | jumped backward     2097ms
     16020 | jumped forward       175ms
      6443 | jumped forward       699ms
      2976 | jumped forward      1398ms
         9 | jumped forward    356516ms
         9 | jumped forward    357215ms
         4 | jumped forward    714430ms
         1 | jumped forward   3578440ms
    
    This works out to a jump larger than 100 ms about every 5.5 seconds on
    each CPU core.
    
    The largest jump (almost an hour!) was the following sequence of reads:
        0x0000007fffffffff → 0x00000093feffffff → 0x0000008000000000
    
    Note that the middle bits don't necessarily all read as all zeroes or
    all ones during the anomalous behavior; however the low 10 bits checked
    by the function in this patch have never been observed with any other
    value.
    
    Also note that smaller jumps are much more common, with backward jumps
    of 2048 (2^11) cycles observed over 400 times per second on each core.
    (Of course, this is partially explained by lower bits rolling over more
    frequently.) Any one of these could have caused the 95 year time skip.
    
    Similar anomalies were observed while reading CNTPCT (after patching the
    kernel to allow reads from userspace). However, the CNTPCT jumps are
    much less frequent, and only small jumps were observed. The same program
    as before (except now reading CNTPCT) observed after 72 hours:
    
     Count | Event
    -------+---------------------------
        17 | jumped backward      699ms
        52 | jumped forward       175ms
      2831 | jumped forward       699ms
         5 | jumped forward      1398ms
    
    Further investigation showed that the instability in CNTPCT/CNTVCT also
    affected the respective timer's TVAL register. The following values were
    observed immediately after writing CNVT_TVAL to 0x10000000:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL          | CNTV_TVAL Error
    --------------------+------------+--------------------+-----------------
     0x000000d4a2d8bfff | 0x10003fff | 0x000000d4b2d8bfff | +0x00004000
     0x000000d4a2d94000 | 0x0fffffff | 0x000000d4b2d97fff | -0x00004000
     0x000000d4a2d97fff | 0x10003fff | 0x000000d4b2d97fff | +0x00004000
     0x000000d4a2d9c000 | 0x0fffffff | 0x000000d4b2d9ffff | -0x00004000
    
    The pattern of errors in CNTV_TVAL seemed to depend on exactly which
    value was written to it. For example, after writing 0x10101010:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL          | CNTV_TVAL Error
    --------------------+------------+--------------------+-----------------
     0x000001ac3effffff | 0x1110100f | 0x000001ac4f10100f | +0x1000000
     0x000001ac40000000 | 0x1010100f | 0x000001ac5110100f | -0x1000000
     0x000001ac58ffffff | 0x1110100f | 0x000001ac6910100f | +0x1000000
     0x000001ac66000000 | 0x1010100f | 0x000001ac7710100f | -0x1000000
     0x000001ac6affffff | 0x1110100f | 0x000001ac7b10100f | +0x1000000
     0x000001ac6e000000 | 0x1010100f | 0x000001ac7f10100f | -0x1000000
    
    I was also twice able to reproduce the issue covered by Allwinner's
    workaround[4], that writing to TVAL sometimes fails, and both CVAL and
    TVAL are left with entirely bogus values. One was the following values:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL
    --------------------+------------+--------------------------------------
     0x000000d4a2d6014c | 0x8fbd5721 | 0x000000d132935fff (615s in the past)
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    
    ========================================================================
    
    Because the CPU can read the CNTPCT/CNTVCT registers faster than they
    change, performing two reads of the register and comparing the high bits
    (like other workarounds) is not a workable solution. And because the
    timer can jump both forward and backward, no pair of reads can
    distinguish a good value from a bad one. The only way to guarantee a
    good value from consecutive reads would be to read _three_ times, and
    take the middle value only if the three values are 1) each unique and
    2) increasing. This takes at minimum 3 counter cycles (125 ns), or more
    if an anomaly is detected.
    
    However, since there is a distinct pattern to the bad values, we can
    optimize the common case (1022/1024 of the time) to a single read by
    simply ignoring values that match the error pattern. This still takes no
    more than 3 cycles in the worst case, and requires much less code. As an
    additional safety check, we still limit the loop iteration to the number
    of max-frequency (1.2 GHz) CPU cycles in three 24 MHz counter periods.
    
    For the TVAL registers, the simple solution is to not use them. Instead,
    read or write the CVAL and calculate the TVAL value in software.
    
    Although the manufacturer is aware of at least part of the erratum[4],
    there is no official name for it. For now, use the kernel-internal name
    "UNKNOWN1".
    
    [1]: https://github.com/armbian/build/commit/a08cd6fe7ae9
    [2]: https://forum.armbian.com/topic/3458-a64-datetime-clock-issue/
    [3]: https://irclog.whitequark.org/linux-sunxi/2018-01-26
    [4]: https://github.com/Allwinner-Homlet/H6-BSP4.9-linux/blob/master/drivers/clocksource/arm_arch_timer.c#L272
    
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Tested-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef8062e20614c121495ccd568e1480ecf5cf5e73
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:14 2019 +0000

    clocksource/drivers/exynos_mct: Clear timer interrupt when shutdown
    
    commit d2f276c8d3c224d5b493c42b6cf006ae4e64fb1c upstream.
    
    When shutting down the timer, ensure that after we have stopped the
    timer any pending interrupts are cleared. This fixes a problem when
    suspending, as interrupts are disabled before the timer is stopped,
    so the timer interrupt may still be asserted, preventing the system
    entering a low power state when the wfi is executed.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: <stable@vger.kernel.org> # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1f45c10df2ef8d0cd5e301bd73299a94ecb417f
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:13 2019 +0000

    clocksource/drivers/exynos_mct: Move one-shot check from tick clear to ISR
    
    commit a5719a40aef956ba704f2aa1c7b977224d60fa96 upstream.
    
    When a timer tick occurs and the clock is in one-shot mode, the timer
    needs to be stopped to prevent it triggering subsequent interrupts.
    Currently this code is in exynos4_mct_tick_clear(), but as it is
    only needed when an ISR occurs move it into exynos4_mct_tick_isr(),
    leaving exynos4_mct_tick_clear() just doing what its name suggests it
    should.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: stable@vger.kernel.org # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac696b0176b485933ca73d8cab01946d07efa988
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Jan 22 09:03:08 2019 -0800

    clocksource: timer-ti-dm: Fix pwm dmtimer usage of fck reparenting
    
    [ Upstream commit 983a5a43ec254cd5ddf3254db80ca96e8f8bb2a4 ]
    
    Commit 84badc5ec5fc ("ARM: dts: omap4: Move l4 child devices to probe
    them with ti-sysc") moved some omap4 timers to probe with ti-sysc
    interconnect target module. Turns out this broke pwm-omap-dmtimer
    where we now try to reparent the clock to itself with the following:
    
    omap_dm_timer_of_set_source: failed to set parent
    
    With ti-sysc, we can now configure the clock sources in the dts
    with assigned-clocks and assigned-clock-parents. So we should be able
    to remove omap_dm_timer_of_set_source with clean-up patches later on.
    But for now, let's just fix it first by checking if parent and fck
    are the same and bail out of so.
    
    Fixes: 84badc5ec5fc ("ARM: dts: omap4: Move l4 child devices to probe them with ti-sysc")
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: H. Nikolaus Schaller <hns@goldelico.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Reported-by: H. Nikolaus Schaller <hns@goldelico.com>
    Tested-By: Andreas Kemnade <andreas@kemnade.info>
    Tested-By: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fddab0355a57d193eb82139dc6ae2215cb64ee43
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:14 2019 +0000

    clocksource/drivers/exynos_mct: Clear timer interrupt when shutdown
    
    commit d2f276c8d3c224d5b493c42b6cf006ae4e64fb1c upstream.
    
    When shutting down the timer, ensure that after we have stopped the
    timer any pending interrupts are cleared. This fixes a problem when
    suspending, as interrupts are disabled before the timer is stopped,
    so the timer interrupt may still be asserted, preventing the system
    entering a low power state when the wfi is executed.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: <stable@vger.kernel.org> # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d265666e879c3e10701fe28106ff6d45419f8f3a
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:13 2019 +0000

    clocksource/drivers/exynos_mct: Move one-shot check from tick clear to ISR
    
    commit a5719a40aef956ba704f2aa1c7b977224d60fa96 upstream.
    
    When a timer tick occurs and the clock is in one-shot mode, the timer
    needs to be stopped to prevent it triggering subsequent interrupts.
    Currently this code is in exynos4_mct_tick_clear(), but as it is
    only needed when an ISR occurs move it into exynos4_mct_tick_isr(),
    leaving exynos4_mct_tick_clear() just doing what its name suggests it
    should.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: stable@vger.kernel.org # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7a897a6c1b2d512c705ce29fa004544c5477e8e
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:14 2019 +0000

    clocksource/drivers/exynos_mct: Clear timer interrupt when shutdown
    
    commit d2f276c8d3c224d5b493c42b6cf006ae4e64fb1c upstream.
    
    When shutting down the timer, ensure that after we have stopped the
    timer any pending interrupts are cleared. This fixes a problem when
    suspending, as interrupts are disabled before the timer is stopped,
    so the timer interrupt may still be asserted, preventing the system
    entering a low power state when the wfi is executed.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: <stable@vger.kernel.org> # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c83aa58ceae2d67776c2700f7d8f40320eba106f
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:13 2019 +0000

    clocksource/drivers/exynos_mct: Move one-shot check from tick clear to ISR
    
    commit a5719a40aef956ba704f2aa1c7b977224d60fa96 upstream.
    
    When a timer tick occurs and the clock is in one-shot mode, the timer
    needs to be stopped to prevent it triggering subsequent interrupts.
    Currently this code is in exynos4_mct_tick_clear(), but as it is
    only needed when an ISR occurs move it into exynos4_mct_tick_isr(),
    leaving exynos4_mct_tick_clear() just doing what its name suggests it
    should.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: stable@vger.kernel.org # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32d0be018f6f5ee2d5d19c4795304613560814cf
Author: Atish Patra <atish.patra@wdc.com>
Date:   Fri Mar 22 14:54:11 2019 -0700

    clocksource/drivers/riscv: Fix clocksource mask
    
    For all riscv architectures (RV32, RV64 and RV128), the clocksource
    is a 64 bit incrementing counter.
    
    Fix the clock source mask accordingly.
    
    Tested on both 64bit and 32 bit virt machine in QEMU.
    
    Fixes: 62b019436814 ("clocksource: new RISC-V SBI timer driver")
    Signed-off-by: Atish Patra <atish.patra@wdc.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-riscv@lists.infradead.org
    Cc: Palmer Dabbelt <palmer@sifive.com>
    Cc: Anup Patel <Anup.Patel@wdc.com>
    Cc: Damien Le Moal <Damien.LeMoal@wdc.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190322215411.19362-1-atish.patra@wdc.com

commit 185ca832f7d74c2bbb4001ea22a5ca0819caa991
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:14 2019 +0000

    clocksource/drivers/exynos_mct: Clear timer interrupt when shutdown
    
    commit d2f276c8d3c224d5b493c42b6cf006ae4e64fb1c upstream.
    
    When shutting down the timer, ensure that after we have stopped the
    timer any pending interrupts are cleared. This fixes a problem when
    suspending, as interrupts are disabled before the timer is stopped,
    so the timer interrupt may still be asserted, preventing the system
    entering a low power state when the wfi is executed.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: <stable@vger.kernel.org> # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e08ffef428689e452e169bd23ae7b35affb6f8f
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:13 2019 +0000

    clocksource/drivers/exynos_mct: Move one-shot check from tick clear to ISR
    
    commit a5719a40aef956ba704f2aa1c7b977224d60fa96 upstream.
    
    When a timer tick occurs and the clock is in one-shot mode, the timer
    needs to be stopped to prevent it triggering subsequent interrupts.
    Currently this code is in exynos4_mct_tick_clear(), but as it is
    only needed when an ISR occurs move it into exynos4_mct_tick_isr(),
    leaving exynos4_mct_tick_clear() just doing what its name suggests it
    should.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: stable@vger.kernel.org # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9039de4034775f4420bf01fa879f8c04b3cd6bba
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Mar 22 22:43:59 2019 +0800

    clocksource/drivers/mips-gic-timer: Make gic_compare_irqaction static
    
    Fix sparse warning:
    
    drivers/clocksource/mips-gic-timer.c:70:18: warning:
     symbol 'gic_compare_irqaction' was not declared. Should it be static?
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <daniel.lezcano@linaro.org>
    Link: https://lkml.kernel.org/r/20190322144359.19516-1-yuehaibing@huawei.com

commit 008258d995a637c77c10a5d087d134eed49a6572
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Mar 22 22:43:02 2019 +0800

    clocksource/drivers/timer-ti-dm: Make omap_dm_timer_set_load_start() static
    
    Fix sparse warning:
    
    drivers/clocksource/timer-ti-dm.c:589:5: warning:
     symbol 'omap_dm_timer_set_load_start' was not declared. Should it be static?
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <daniel.lezcano@linaro.org>
    Link: https://lkml.kernel.org/r/20190322144302.6704-1-yuehaibing@huawei.com

commit bddee90af621914f08a03d546419fc293e9140d8
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Mar 22 22:39:40 2019 +0800

    clocksource/drivers/tcb_clksrc: Make tc_clksrc_suspend/resume() static
    
    Fix sparse warnings:
    
    drivers/clocksource/tcb_clksrc.c:74:6: warning:
     symbol 'tc_clksrc_suspend' was not declared. Should it be static?
    drivers/clocksource/tcb_clksrc.c:89:6: warning:
     symbol 'tc_clksrc_resume' was not declared. Should it be static?
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <nicolas.ferre@microchip.com>
    Cc: <daniel.lezcano@linaro.org>
    Cc: <linux-arm-kernel@lists.infradead.org>
    Link: https://lkml.kernel.org/r/20190322143940.12396-1-yuehaibing@huawei.com

commit d18a7408d7be0f34a120d99051ed5187d9727728
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Mar 22 22:37:08 2019 +0800

    clocksource/drivers/clps711x: Make clps711x_clksrc_init() static
    
    Fix sparse warning:
    
    drivers/clocksource/clps711x-timer.c:96:13: warning:
     symbol 'clps711x_clksrc_init' was not declared. Should it be static?
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <daniel.lezcano@linaro.org>
    Cc: <shc_work@mail.ru>
    Cc: <linux-arm-kernel@lists.infradead.org>
    Link: https://lkml.kernel.org/r/20190322143708.12716-1-yuehaibing@huawei.com

commit 0f0b7e1cc7abf8e1a8b301f2868379d611d05ae2
Author: Juri Lelli <juri.lelli@redhat.com>
Date:   Thu Mar 7 13:09:13 2019 +0100

    x86/tsc: Add option to disable tsc clocksource watchdog
    
    Clocksource watchdog has been found responsible for generating latency
    spikes (in the 10-20 us range) when woken up to check for TSC stability.
    
    Add an option to disable it at boot.
    
    Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: bigeasy@linutronix.de
    Cc: linux-rt-users@vger.kernel.org
    Cc: peterz@infradead.org
    Cc: bristot@redhat.com
    Cc: williams@redhat.com
    Link: https://lkml.kernel.org/r/20190307120913.13168-1-juri.lelli@redhat.com

commit 636deed6c0bc137a7c4f4a97ae1fcf0ad75323da
Merge: aa2e3ac64ace 4a605bc08e98
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Mar 15 15:00:28 2019 -0700

    Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm
    
    Pull KVM updates from Paolo Bonzini:
     "ARM:
       - some cleanups
       - direct physical timer assignment
       - cache sanitization for 32-bit guests
    
      s390:
       - interrupt cleanup
       - introduction of the Guest Information Block
       - preparation for processor subfunctions in cpu models
    
      PPC:
       - bug fixes and improvements, especially related to machine checks
         and protection keys
    
      x86:
       - many, many cleanups, including removing a bunch of MMU code for
         unnecessary optimizations
       - AVIC fixes
    
      Generic:
       - memcg accounting"
    
    * tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (147 commits)
      kvm: vmx: fix formatting of a comment
      KVM: doc: Document the life cycle of a VM and its resources
      MAINTAINERS: Add KVM selftests to existing KVM entry
      Revert "KVM/MMU: Flush tlb directly in the kvm_zap_gfn_range()"
      KVM: PPC: Book3S: Add count cache flush parameters to kvmppc_get_cpu_char()
      KVM: PPC: Fix compilation when KVM is not enabled
      KVM: Minor cleanups for kvm_main.c
      KVM: s390: add debug logging for cpu model subfunctions
      KVM: s390: implement subfunction processor calls
      arm64: KVM: Fix architecturally invalid reset value for FPEXC32_EL2
      KVM: arm/arm64: Remove unused timer variable
      KVM: PPC: Book3S: Improve KVM reference counting
      KVM: PPC: Book3S HV: Fix build failure without IOMMU support
      Revert "KVM: Eliminate extra function calls in kvm_get_dirty_log_protect()"
      x86: kvmguest: use TSC clocksource if invariant TSC is exposed
      KVM: Never start grow vCPU halt_poll_ns from value below halt_poll_ns_grow_start
      KVM: Expose the initial start value in grow_halt_poll_ns() as a module parameter
      KVM: grow_halt_poll_ns() should never shrink vCPU halt_poll_ns
      KVM: x86/mmu: Consolidate kvm_mmu_zap_all() and kvm_mmu_zap_mmio_sptes()
      KVM: x86/mmu: WARN if zapping a MMIO spte results in zapping children
      ...

commit 64b1b217f1a20f15dbedf47e49a25a0b5ee3d53b
Merge: fb686ad25be0 c889e2a0b053
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 6 10:15:42 2019 -0800

    Merge tag 'armsoc-newsoc' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM new SoC family support from Arnd Bergmann:
     "Two new SoC families are added this time.
    
      Sugaya Taichi submitted support for the Milbeaut SoC family from
      Socionext and explains:
    
        "SC2000 is a SoC of the Milbeaut series. equipped with a DSP
         optimized for computer vision. It also features advanced
         functionalities such as 360-degree, real-time spherical stitching
         with multi cameras, image stabilization for without mechanical
         gimbals, and rolling shutter correction. More detail is below:
    
           https://www.socionext.com/en/products/assp/milbeaut/SC2000.html"
    
      Interestingly, this one has a history dating back to older chips made
      by Socionext and previously Matsushita/Panasonic based on their own
      mn10300 CPU architecture that was removed from the kernel last year.
    
      Manivannan Sadhasivam adds support for another SoC family, this is the
      Bitmain BM1880 chip used in the Sophon Edge TPU developer board.
    
      The chip is intended for Deep Learning applications, and comes with
      dual-core Arm Cortex-A53 to run Linux as well as a RISC-V
      microcontroller core to control the tensor unit. For the moment, the
      TPU is not accessible in mainline Linux, so we treat it as a generic
      Arm SoC.
    
      More information is available at
    
           https://www.sophon.ai/"
    
    * tag 'armsoc-newsoc' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc:
      ARM: multi_v7_defconfig: add ARCH_MILBEAUT and ARCH_MILBEAUT_M10V
      ARM: configs: Add Milbeaut M10V defconfig
      ARM: dts: milbeaut: Add device tree set for the Milbeaut M10V board
      clocksource/drivers/timer-milbeaut: Introduce timer for Milbeaut SoCs
      dt-bindings: timer: Add Milbeaut M10V timer description
      ARM: milbeaut: Add basic support for Milbeaut m10v SoC
      dt-bindings: Add documentation for Milbeaut SoCs
      dt-bindings: arm: Add SMP enable-method for Milbeaut
      dt-bindings: sram: milbeaut: Add binding for Milbeaut smp-sram
      MAINTAINERS: Add entry for Bitmain SoC platform
      arm64: dts: bitmain: Add Sophon Egde board support
      arm64: dts: bitmain: Add BM1880 SoC support
      arm64: Add ARCH_BITMAIN platform
      dt-bindings: arm: Document Bitmain BM1880 SoC

commit 18483190e7a2a6761b67c6824a31adf5b2b7be51
Merge: d9862cfbe209 8dd2eee2f444
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 5 12:14:43 2019 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer and clockevent updates from Thomas Gleixner:
     "The time(r) core and clockevent updates are mostly boring this time:
    
       - A new driver for the Tegra210 timer
    
       - Small fixes and improvements alll over the place
    
       - Documentation updates and cleanups"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (22 commits)
      soc/tegra: default select TEGRA_TIMER for Tegra210
      clocksource/drivers/tegra: Add Tegra210 timer support
      dt-bindings: timer: add Tegra210 timer
      clocksource/drivers/timer-cs5535: Rename the file for consistency
      clocksource/drivers/timer-pxa: Rename the file for consistency
      clocksource/drivers/tango-xtal: Rename the file for consistency
      dt-bindings: timer: gpt: update binding doc
      clocksource/drivers/exynos_mct: Remove unused header includes
      dt-bindings: timer: mediatek: update bindings for MT7629 SoC
      clocksource/drivers/exynos_mct: Fix error path in timer resources initialization
      clocksource/drivers/exynos_mct: Remove dead code
      clocksource/drivers/riscv: Add required checks during clock source init
      dt-bindings: timer: renesas: tmu: Document r8a774c0 bindings
      dt-bindings: timer: renesas, cmt: Document r8a774c0 CMT support
      clocksource/drivers/exynos_mct: Clear timer interrupt when shutdown
      clocksource/drivers/exynos_mct: Move one-shot check from tick clear to ISR
      clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability
      clocksource/drivers/sun5i: Fail gracefully when clock rate is unavailable
      timers: Mark expected switch fall-throughs
      timekeeping/debug: No need to check return value of debugfs_create functions
      ...

commit c889e2a0b053703be7e7591c9a574975440e5502
Merge: ee036df9bd1d 2781204594c2
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Mar 1 15:21:04 2019 +0100

    Merge branch 'milbeaut/newsoc' into arm/newsoc
    
    Sugaya Taichi <sugaya.taichi@socionext.com> explains:
    
    Here is the series of patches the initial support for SC2000(M10V) of
    Milbeaut SoCs. "M10V" is the internal name of SC2000, so commonly used in
    source code.
    
    SC2000 is a SoC of the Milbeaut series. equipped with a DSP optimized for
    computer vision. It also features advanced functionalities such as 360-degree,
    real-time spherical stitching with multi cameras, image stabilization for
    without mechanical gimbals, and rolling shutter correction. More detail is
    below:
    https://www.socionext.com/en/products/assp/milbeaut/SC2000.html
    
    Specifications for developers are below:
     - Quad-core 32bit Cortex-A7 on ARMv7-A architecture
     - NEON support
     - DSP
     - GPU
     - MAX 3GB DDR3
     - Cortex-M0 for power control
     - NAND Flash Interface
     - SD UHS-I
     - SD UHS-II
     - SDIO
     - USB2.0 HOST / Device
     - USB3.0 HOST / Device
     - PCI express Gen2
     - Ethernet Engine
     - I2C
     - UART
     - SPI
     - PWM
    
    Support is quite minimal for now, since it only includes timer, clock,
    pictrl and serial controller drivers, so we can only boot to userspace
    through initramfs. Support for the other peripherals  will come eventually.
    
    * milbeaut/newsoc:
      ARM: multi_v7_defconfig: add ARCH_MILBEAUT and ARCH_MILBEAUT_M10V
      ARM: configs: Add Milbeaut M10V defconfig
      ARM: dts: milbeaut: Add device tree set for the Milbeaut M10V board
      clocksource/drivers/timer-milbeaut: Introduce timer for Milbeaut SoCs
      dt-bindings: timer: Add Milbeaut M10V timer description
      ARM: milbeaut: Add basic support for Milbeaut m10v SoC
      dt-bindings: Add documentation for Milbeaut SoCs
      dt-bindings: arm: Add SMP enable-method for Milbeaut
      dt-bindings: sram: milbeaut: Add binding for Milbeaut smp-sram
    
    Link: https://lore.kernel.org/linux-arm-kernel/1551243056-10521-1-git-send-email-sugaya.taichi@socionext.com/
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit b58f28f306dbe60e2e711f35618efc518e507e64
Author: Sugaya Taichi <sugaya.taichi@socionext.com>
Date:   Wed Feb 27 13:53:20 2019 +0900

    clocksource/drivers/timer-milbeaut: Introduce timer for Milbeaut SoCs
    
    Add timer driver for Milbeaut SoCs series.
    
    The timer has two 32-bit width down counters, one of which is configured
    as a clockevent device and the other is configured as a clock source.
    
    Signed-off-by: Sugaya Taichi <sugaya.taichi@socionext.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 146558f0d27f299d607973574e33000f3c8aa87d
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Tue Apr 18 16:30:37 2017 -0700

    clocksource: Use GENMASK_ULL in definition of CLOCKSOURCE_MASK
    
    commit 0773cea37470f8e080c510fe720fc356cf35df3a upstream
    
    Besides reusing existing code this removes the special case handling
    for 64-bit masks, which causes clang to raise a shift count overflow
    warning due to https://bugs.llvm.org//show_bug.cgi?id=10030.
    
    Suggested-by: Dmitry Torokhov <dtor@chromium.org>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Cc: Grant Grundler <grundler@chromium.org>
    Cc: Greg Hackmann <ghackmann@google.com>
    Cc: Michael Davidson <md@google.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/20170418233037.70990-1-mka@chromium.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    [nc: cycle_t wasn't eliminated until commit a5a1d1c2914b ("clocksource:
         Use a plain u64 instead of cycle_t") in v4.10]
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4822dc7564f007e7a9b5188b791b7a923e34104
Author: Joseph Lo <josephl@nvidia.com>
Date:   Thu Feb 21 15:21:44 2019 +0800

    clocksource/drivers/tegra: Add Tegra210 timer support
    
    Add support for the Tegra210 timer that runs at oscillator clock
    (TMR10-TMR13). We need these timers to work as clock event device and to
    replace the ARMv8 architected timer due to it can't survive across the
    power cycle of the CPU core or CPUPORESET signal. So it can't be a wake-up
    source when CPU suspends in power down state.
    
    Also convert the original driver to use timer-of API.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Joseph Lo <josephl@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 371eec9b822b25c0fd8523487a78050ad813db7e
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Feb 19 11:06:46 2019 +0100

    clocksource/drivers/timer-cs5535: Rename the file for consistency
    
    For the sake of consistency, let's rename the file to a name similar
    to other file names in this directory.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit eb36f29347fd78ba00485376a9fe11a3d02963c1
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Feb 19 10:40:06 2019 +0100

    clocksource/drivers/timer-pxa: Rename the file for consistency
    
    For the sake of consistency, let's rename the file to a name similar
    to other file names in this directory.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bcc5a050fedd7fa044850da1f100096682812b65
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Feb 19 10:19:33 2019 +0100

    clocksource/drivers/tango-xtal: Rename the file for consistency
    
    For the sake of consistency, let's rename the file to a name similar
    to other file names in this directory.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7d1053212858d0281f14beaf05f62dbdaf32bd5b
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Feb 18 11:09:58 2019 +0100

    clocksource/drivers/exynos_mct: Remove unused header includes
    
    The driver does not use sched.h and platform_device.h.
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b9307420196009cdf18bad55e762ac49fb9a80f4
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Oct 18 11:57:04 2018 +0200

    clocksource/drivers/exynos_mct: Fix error path in timer resources initialization
    
    While freeing interrupt handlers in error path, don't assume that all
    requested interrupts are per-processor interrupts and properly release
    standard interrupts too.
    
    Reported-by: Krzysztof Kozlowski <krzk@kernel.org>
    Fixes: 56a94f13919c ("clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9fd464fe745c9d3ada46ac4eee9439427a85011a
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Oct 18 11:57:03 2018 +0200

    clocksource/drivers/exynos_mct: Remove dead code
    
    Exynos Multi-Core Timer driver is used only on device-tree based
    systems, so remove non-dt related code. In case of !CONFIG_OF
    the code is anyway equal because of_irq_count() has a stub
    returning 0. Device node pointer is always provided when driver
    has been probed from device tree.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 26478b2f6a06ca36816e8f473aebe6f686b0df90
Author: Atish Patra <atish.patra@wdc.com>
Date:   Wed Feb 13 12:18:10 2019 -0800

    clocksource/drivers/riscv: Add required checks during clock source init
    
    Currently, clocksource registration happens for an invalid cpu for
    non-smp kernels. This lead to kernel panic as cpu hotplug registration
    will fail for those cpus. Moreover, riscv_hartid_to_cpuid can return
    errors now.
    
    Do not proceed if hartid or cpuid is invalid. Take this opportunity to
    print appropriate error strings for different failure cases.
    
    Signed-off-by: Atish Patra <atish.patra@wdc.com>
    Reviewed-by: Anup Patel <anup@brainfault.org>
    Reviewed-by: Palmer Dabbelt <palmer@sifive.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d2f276c8d3c224d5b493c42b6cf006ae4e64fb1c
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:14 2019 +0000

    clocksource/drivers/exynos_mct: Clear timer interrupt when shutdown
    
    When shutting down the timer, ensure that after we have stopped the
    timer any pending interrupts are cleared. This fixes a problem when
    suspending, as interrupts are disabled before the timer is stopped,
    so the timer interrupt may still be asserted, preventing the system
    entering a low power state when the wfi is executed.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: <stable@vger.kernel.org> # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a5719a40aef956ba704f2aa1c7b977224d60fa96
Author: Stuart Menefy <stuart.menefy@mathembedded.com>
Date:   Sun Feb 10 22:51:13 2019 +0000

    clocksource/drivers/exynos_mct: Move one-shot check from tick clear to ISR
    
    When a timer tick occurs and the clock is in one-shot mode, the timer
    needs to be stopped to prevent it triggering subsequent interrupts.
    Currently this code is in exynos4_mct_tick_clear(), but as it is
    only needed when an ISR occurs move it into exynos4_mct_tick_isr(),
    leaving exynos4_mct_tick_clear() just doing what its name suggests it
    should.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@mathembedded.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: stable@vger.kernel.org # v4.3+
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c950ca8c35eeb32224a63adc47e12f9e226da241
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat Jan 12 20:17:18 2019 -0600

    clocksource/drivers/arch_timer: Workaround for Allwinner A64 timer instability
    
    The Allwinner A64 SoC is known[1] to have an unstable architectural
    timer, which manifests itself most obviously in the time jumping forward
    a multiple of 95 years[2][3]. This coincides with 2^56 cycles at a
    timer frequency of 24 MHz, implying that the time went slightly backward
    (and this was interpreted by the kernel as it jumping forward and
    wrapping around past the epoch).
    
    Investigation revealed instability in the low bits of CNTVCT at the
    point a high bit rolls over. This leads to power-of-two cycle forward
    and backward jumps. (Testing shows that forward jumps are about twice as
    likely as backward jumps.) Since the counter value returns to normal
    after an indeterminate read, each "jump" really consists of both a
    forward and backward jump from the software perspective.
    
    Unless the kernel is trapping CNTVCT reads, a userspace program is able
    to read the register in a loop faster than it changes. A test program
    running on all 4 CPU cores that reported jumps larger than 100 ms was
    run for 13.6 hours and reported the following:
    
     Count | Event
    -------+---------------------------
      9940 | jumped backward      699ms
       268 | jumped backward     1398ms
         1 | jumped backward     2097ms
     16020 | jumped forward       175ms
      6443 | jumped forward       699ms
      2976 | jumped forward      1398ms
         9 | jumped forward    356516ms
         9 | jumped forward    357215ms
         4 | jumped forward    714430ms
         1 | jumped forward   3578440ms
    
    This works out to a jump larger than 100 ms about every 5.5 seconds on
    each CPU core.
    
    The largest jump (almost an hour!) was the following sequence of reads:
        0x0000007fffffffff → 0x00000093feffffff → 0x0000008000000000
    
    Note that the middle bits don't necessarily all read as all zeroes or
    all ones during the anomalous behavior; however the low 10 bits checked
    by the function in this patch have never been observed with any other
    value.
    
    Also note that smaller jumps are much more common, with backward jumps
    of 2048 (2^11) cycles observed over 400 times per second on each core.
    (Of course, this is partially explained by lower bits rolling over more
    frequently.) Any one of these could have caused the 95 year time skip.
    
    Similar anomalies were observed while reading CNTPCT (after patching the
    kernel to allow reads from userspace). However, the CNTPCT jumps are
    much less frequent, and only small jumps were observed. The same program
    as before (except now reading CNTPCT) observed after 72 hours:
    
     Count | Event
    -------+---------------------------
        17 | jumped backward      699ms
        52 | jumped forward       175ms
      2831 | jumped forward       699ms
         5 | jumped forward      1398ms
    
    Further investigation showed that the instability in CNTPCT/CNTVCT also
    affected the respective timer's TVAL register. The following values were
    observed immediately after writing CNVT_TVAL to 0x10000000:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL          | CNTV_TVAL Error
    --------------------+------------+--------------------+-----------------
     0x000000d4a2d8bfff | 0x10003fff | 0x000000d4b2d8bfff | +0x00004000
     0x000000d4a2d94000 | 0x0fffffff | 0x000000d4b2d97fff | -0x00004000
     0x000000d4a2d97fff | 0x10003fff | 0x000000d4b2d97fff | +0x00004000
     0x000000d4a2d9c000 | 0x0fffffff | 0x000000d4b2d9ffff | -0x00004000
    
    The pattern of errors in CNTV_TVAL seemed to depend on exactly which
    value was written to it. For example, after writing 0x10101010:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL          | CNTV_TVAL Error
    --------------------+------------+--------------------+-----------------
     0x000001ac3effffff | 0x1110100f | 0x000001ac4f10100f | +0x1000000
     0x000001ac40000000 | 0x1010100f | 0x000001ac5110100f | -0x1000000
     0x000001ac58ffffff | 0x1110100f | 0x000001ac6910100f | +0x1000000
     0x000001ac66000000 | 0x1010100f | 0x000001ac7710100f | -0x1000000
     0x000001ac6affffff | 0x1110100f | 0x000001ac7b10100f | +0x1000000
     0x000001ac6e000000 | 0x1010100f | 0x000001ac7f10100f | -0x1000000
    
    I was also twice able to reproduce the issue covered by Allwinner's
    workaround[4], that writing to TVAL sometimes fails, and both CVAL and
    TVAL are left with entirely bogus values. One was the following values:
    
     CNTVCT             | CNTV_TVAL  | CNTV_CVAL
    --------------------+------------+--------------------------------------
     0x000000d4a2d6014c | 0x8fbd5721 | 0x000000d132935fff (615s in the past)
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    
    ========================================================================
    
    Because the CPU can read the CNTPCT/CNTVCT registers faster than they
    change, performing two reads of the register and comparing the high bits
    (like other workarounds) is not a workable solution. And because the
    timer can jump both forward and backward, no pair of reads can
    distinguish a good value from a bad one. The only way to guarantee a
    good value from consecutive reads would be to read _three_ times, and
    take the middle value only if the three values are 1) each unique and
    2) increasing. This takes at minimum 3 counter cycles (125 ns), or more
    if an anomaly is detected.
    
    However, since there is a distinct pattern to the bad values, we can
    optimize the common case (1022/1024 of the time) to a single read by
    simply ignoring values that match the error pattern. This still takes no
    more than 3 cycles in the worst case, and requires much less code. As an
    additional safety check, we still limit the loop iteration to the number
    of max-frequency (1.2 GHz) CPU cycles in three 24 MHz counter periods.
    
    For the TVAL registers, the simple solution is to not use them. Instead,
    read or write the CVAL and calculate the TVAL value in software.
    
    Although the manufacturer is aware of at least part of the erratum[4],
    there is no official name for it. For now, use the kernel-internal name
    "UNKNOWN1".
    
    [1]: https://github.com/armbian/build/commit/a08cd6fe7ae9
    [2]: https://forum.armbian.com/topic/3458-a64-datetime-clock-issue/
    [3]: https://irclog.whitequark.org/linux-sunxi/2018-01-26
    [4]: https://github.com/Allwinner-Homlet/H6-BSP4.9-linux/blob/master/drivers/clocksource/arm_arch_timer.c#L272
    
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Tested-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e7e7e0d7beafebd11b0c065cd5fbc1e5759c5aab
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Jan 10 14:22:07 2019 +0800

    clocksource/drivers/sun5i: Fail gracefully when clock rate is unavailable
    
    If the clock tree is not fully populated when the timer-sun5i init code
    is called, attempts to get the clock rate for the timer would fail and
    return 0.
    
    Make the init code for both clock events and clocksource check the
    returned clock rate and fail gracefully if the result is 0, instead of
    causing a divide by 0 exception later on.
    
    Fixes: 4a59058f0b09 ("clocksource/drivers/sun5i: Refactor the current code")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Acked-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7539b174aef405d9d57db48c58390ba360c91312
Author: Marcelo Tosatti <mtosatti@redhat.com>
Date:   Fri Jan 4 15:54:14 2019 -0200

    x86: kvmguest: use TSC clocksource if invariant TSC is exposed
    
    The invariant TSC bit has the following meaning:
    
    "The time stamp counter in newer processors may support an enhancement,
    referred to as invariant TSC. Processor's support for invariant TSC
    is indicated by CPUID.80000007H:EDX[8]. The invariant TSC will run
    at a constant rate in all ACPI P-, C-. and T-states. This is the
    architectural behavior moving forward. On processors with invariant TSC
    support, the OS may use the TSC for wall clock timer services (instead
    of ACPI or HPET timers). TSC reads are much more efficient and do not
    incur the overhead associated with a ring transition or access to a
    platform resource."
    
    IOW, TSC does not change frequency. In such case, and with
    TSC scaling hardware available to handle migration, it is possible
    to use the TSC clocksource directly, whose system calls are
    faster.
    
    Reduce the rating of kvmclock clocksource to allow TSC clocksource
    to be the default if invariant TSC is exposed.
    
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
    
    v2: Use feature bits and tsc_unstable() check (Sean Christopherson)
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit b5179ec4187251a751832193693d6e474d3445ac
Author: Pavel Tatashin <pasha.tatashin@soleen.com>
Date:   Sat Jan 26 12:49:56 2019 -0500

    x86/kvmclock: set offset for kvm unstable clock
    
    VMs may show incorrect uptime and dmesg printk offsets on hypervisors with
    unstable clock. The problem is produced when VM is rebooted without exiting
    from qemu.
    
    The fix is to calculate clock offset not only for stable clock but for
    unstable clock as well, and use kvm_sched_clock_read() which substracts
    the offset for both clocks.
    
    This is safe, because pvclock_clocksource_read() does the right thing and
    makes sure that clock always goes forward, so once offset is calculated
    with unstable clock, we won't get new reads that are smaller than offset,
    and thus won't get negative results.
    
    Thank you Jon DeVree for helping to reproduce this issue.
    
    Fixes: 857baa87b642 ("sched/clock: Enable sched clock early")
    Cc: stable@vger.kernel.org
    Reported-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit ee7930490a8f84570e96268f5736e99570b58307
Author: Andre Przywara <andre.przywara@arm.com>
Date:   Fri Jul 6 09:11:50 2018 +0100

    clocksource/arm_arch_timer: Store physical timer IRQ number for KVM on VHE
    
    A host running in VHE mode gets the EL2 physical timer as its time
    source (accessed using the EL1 sysreg accessors, which get re-directed
    to the EL2 sysregs by VHE).
    
    The EL1 physical timer remains unused by the host kernel, allowing us to
    pass that on directly to a KVM guest and saves us from emulating this
    timer for the guest on VHE systems.
    
    Store the EL1 Physical Timer's IRQ number in
    struct arch_timer_kvm_info on VHE systems to allow KVM to use it.
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@arm.com>

commit 64c0133eb88a3b0c11c42580a520fe78b71b3932
Merge: 88fe73cb804a 410d7360541c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Feb 16 17:44:12 2019 -0800

    Merge tag 'armsoc-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC fixes from Arnd Bergmann:
     "This week is a much smaller update, containing fixes only for TI OMAP,
      NXP i.MX and Rockchips platforms:
    
      omap:
       - omap4 had problems with lost timer interrupts
       - another IRQ handling issue with OMAP5
       - A workaround for a regression in the pwm-omap-dmtimer driver
    
      NXP i.MX:
       - eMMC was broken on the new imx8mq-evk board
    
      Rockchip:
       - a fix for new dtc graph warnings and a regulator fix for rock64
       - USB support broke on rk3328-rock64"
    
    * tag 'armsoc-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc:
      ARM: OMAP2+: fix lack of timer interrupts on CPU1 after hotplug
      arm64: dts: imx8mq: Fix boot from eMMC
      ARM: OMAP2+: Variable "reg" in function omap4_dsi_mux_pads() could be uninitialized
      ARM: dts: Configure clock parent for pwm vibra
      bus: ti-sysc: Fix timer handling with drop pm_runtime_irq_safe()
      arm64: dts: rockchip: enable usb-host regulators at boot on rk3328-rock64
      arm64: dts: rockchip: fix graph_port warning on rk3399 bob kevin and excavator
      ARM: OMAP5+: Fix inverted nirq pin interrupts with irq_set_type
      clocksource: timer-ti-dm: Fix pwm dmtimer usage of fck reparenting
      ARM: dts: rockchip: remove qos_cif1 from rk3188 power-domain

commit 2ed5c2e3f27b5c934bdc50734f2496e823f22876
Merge: d13937116f1e dc30e7039137
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Feb 15 13:38:20 2019 +0100

    Merge tag 'omap-for-v5.0/fixes-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into fixes
    
    SoC fixes for omaps for v5.0-rc cycle
    
    This series contains two SoC regression fixes and one uninitialized
    variable fix:
    
    - Fix inverted nirq pin handling for omap5 that started producing
      warnings with earlier GIC direction checks and took a while to
      understand and confirm. Basically there are two sys_nirq pins
      that are bypassing peripheral modules and inverted automatically
      by the SoC and need to be handled with a custom irq_set_type()
    
    - Recent ti-sysc changes caused a regression to the pwm-omap-dmtimer
      code where the device tree handling code for timer source clock
      gets confused. It looks like we can remove that code eventually,
      but for now we just drop a bogus pm_runtime_irq_safe() for the
      timers with the related quirks caused by pm_runtime_irq_safe(),
      and have the standard assigned-clocks and assigned-clock-parents
      deal with setting the source clock
    
    - Fix potentially uninitialized value for display init code if
      regmap_read() fails
    
    * tag 'omap-for-v5.0/fixes-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: OMAP2+: Variable "reg" in function omap4_dsi_mux_pads() could be uninitialized
      ARM: dts: Configure clock parent for pwm vibra
      bus: ti-sysc: Fix timer handling with drop pm_runtime_irq_safe()
      ARM: OMAP5+: Fix inverted nirq pin interrupts with irq_set_type
      clocksource: timer-ti-dm: Fix pwm dmtimer usage of fck reparenting

commit d4481b6a470305b6030d38779d6df0c849b4d673
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Jan 11 18:21:18 2019 +0100

    ARM: dts: da850: fix interrupt numbers for clocksource
    
    commit e3966a766865da7ced1dece663697861dd5cf103 upstream.
    
    The timer interrupts specified in commit 3652e2741f42 ("ARM: dts:
    da850: Add clocks") are wrong but since the current timer code
    hard-codes them, the bug was never spotted.
    
    This patch must go into stable since, once we introduce a proper
    clocksource driver, devices with buggy device tree will stop booting.
    
    Fixes: 3652e2741f42 ("ARM: dts: da850: Add clocks")
    Cc: stable@vger.kernel.org
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe3dabb6a4b190e8dcdcfe70c9b6cb79eeae1768
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Jan 11 18:21:18 2019 +0100

    ARM: dts: da850: fix interrupt numbers for clocksource
    
    commit e3966a766865da7ced1dece663697861dd5cf103 upstream.
    
    The timer interrupts specified in commit 3652e2741f42 ("ARM: dts:
    da850: Add clocks") are wrong but since the current timer code
    hard-codes them, the bug was never spotted.
    
    This patch must go into stable since, once we introduce a proper
    clocksource driver, devices with buggy device tree will stop booting.
    
    Fixes: 3652e2741f42 ("ARM: dts: da850: Add clocks")
    Cc: stable@vger.kernel.org
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46c291e277f93737877305f5626a2c5c35522cb1
Merge: 5bb513ed838c d0f9f16788e1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Feb 8 16:23:41 2019 -0800

    Merge tag 'armsoc-fixes-5.0' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC fixes from Arnd Bergmann:
     "This is a bit larger than normal, as we had not managed to send out a
      pull request before traveling for a week without my signing key.
    
      There are multiple code fixes for older bugs, all of which should get
      backported into stable kernels:
    
       - tango: one fix for multiplatform configurations broken on other
         platforms when tango is enabled
    
       - arm_scmi: device unregistration fix
    
       - iop32x: fix kernel oops from extraneous __init annotation
    
       - pxa: remove a double kfree
    
       - fsl qbman: close an interrupt clearing race
    
      The rest is the usual collection of smaller fixes for device tree
      files, on the renesas, allwinner, meson, omap, davinci, qualcomm and
      imx platforms.
    
      Some of these are for compile-time warnings, most are for board
      specific functionality that fails to work because of incorrect
      settings"
    
    * tag 'armsoc-fixes-5.0' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (30 commits)
      ARM: tango: Improve ARCH_MULTIPLATFORM compatibility
      firmware: arm_scmi: provide the mandatory device release callback
      ARM: iop32x/n2100: fix PCI IRQ mapping
      arm64: dts: add msm8996 compatible to gicv3
      ARM: dts: am335x-shc.dts: fix wrong cd pin level
      ARM: dts: n900: fix mmc1 card detect gpio polarity
      ARM: dts: omap3-gta04: Fix graph_port warning
      ARM: pxa: ssp: unneeded to free devm_ allocated data
      ARM: dts: r8a7743: Convert to new LVDS DT bindings
      soc: fsl: qbman: avoid race in clearing QMan interrupt
      arm64: dts: renesas: r8a77965: Enable DMA for SCIF2
      arm64: dts: renesas: r8a7796: Enable DMA for SCIF2
      arm64: dts: renesas: r8a774a1: Enable DMA for SCIF2
      ARM: dts: da850: fix interrupt numbers for clocksource
      dt-bindings: imx8mq: Number clocks consecutively
      arm64: dts: meson: Fix mmc cd-gpios polarity
      ARM: dts: imx6sx: correct backward compatible of gpt
      ARM: dts: imx: replace gpio-key,wakeup with wakeup-source property
      ARM: dts: vf610-bk4: fix incorrect #address-cells for dspi3
      ARM: dts: meson8m2: mxiii-plus: mark the SD card detection GPIO active-low
      ...

commit c155f6499f9797f200aa46eb3ccbf198f4206970
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Mon Feb 4 17:25:52 2019 +0100

    PM-runtime: Switch accounting over to ktime_get_mono_fast_ns()
    
    Similar to what happened whith autosuspend, a deadlock has been
    reported with PM-runtime accounting in the call path:
    
    change_clocksource
        ...
        write_seqcount_begin
        ...
        timekeeping_update
            ...
            sh_cmt_clocksource_enable
                ...
                rpm_resume
                    update_pm_runtime_accounting
                        ktime_get
                            do
                                read_seqcount_begin
                            while read_seqcount_retry
        ....
        write_seqcount_end
    
    Make PM-runtime accounting use ktime_get_mono_fast_ns() to avoid this
    problem.
    
    With ktime_get_mono_fast_ns(), the timestamp is not guaranteed to be
    monotonic across an update of timekeeping and as a result time can go
    backward. Add a test to skip accounting for such situation which should
    stay exceptional.
    
    Fixes: a08c2a5a3194 ("PM-runtime: Replace jiffies-based accounting with ktime-based accounting")
    Reported-by: Biju Das <biju.das@bp.renesas.com>
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    [ rjw: Subject, changelog, comment cleanup ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 4f3498a06330cfddc29a7876738eca7a497c81e7
Author: Joao Martins <joao.m.martins@oracle.com>
Date:   Wed Nov 8 17:19:56 2017 +0000

    x86/xen/time: set pvclock flags on xen_time_init()
    
    commit b888808093113ae7d63d213272d01fea4b8329ed upstream.
    
    Specifically check for PVCLOCK_TSC_STABLE_BIT and if this bit is set,
    then set it too on pvclock flags. This allows Xen clocksource to use it
    and thus speeding up xen_clocksource_read() callers (i.e. sched_clock())
    
    Signed-off-by: Joao Martins <joao.m.martins@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a12f78a86fc17af6f8326ffb991a931c34b82b9
Author: Joao Martins <joao.m.martins@oracle.com>
Date:   Wed Nov 8 17:19:55 2017 +0000

    x86/pvclock: add setter for pvclock_pvti_cpu0_va
    
    commit 9f08890ab906abaf9d4c1bad8111755cbd302260 upstream.
    
    Right now there is only a pvclock_pvti_cpu0_va() which is defined
    on kvmclock since:
    
    commit dac16fba6fc5
    ("x86/vdso: Get pvclock data from the vvar VMA instead of the fixmap")
    
    The only user of this interface so far is kvm. This commit adds a
    setter function for the pvti page and moves pvclock_pvti_cpu0_va
    to pvclock, which is a more generic place to have it; and would
    allow other PV clocksources to use it, such as Xen.
    
    While moving pvclock_pvti_cpu0_va into pvclock, rename also this
    function to pvclock_get_pvti_cpu0_va (including its call sites)
    to be symmetric with the setter (pvclock_set_pvti_cpu0_va).
    
    Signed-off-by: Joao Martins <joao.m.martins@oracle.com>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15efb47dc560849d0c07db96fdad5121f2cf736e
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Wed Jan 30 18:26:02 2019 +0100

    PM-runtime: Fix deadlock with ktime_get()
    
    A deadlock has been seen when swicthing clocksources which use
    PM-runtime.  The call path is:
    
    change_clocksource
        ...
        write_seqcount_begin
        ...
        timekeeping_update
            ...
            sh_cmt_clocksource_enable
                ...
                rpm_resume
                    pm_runtime_mark_last_busy
                        ktime_get
                            do
                                read_seqcount_begin
                            while read_seqcount_retry
        ....
        write_seqcount_end
    
    Although we should be safe because we haven't yet changed the
    clocksource at that time, we can't do that because of seqcount
    protection.
    
    Use ktime_get_mono_fast_ns() instead which is lock safe for such
    cases.
    
    With ktime_get_mono_fast_ns, the timestamp is not guaranteed to be
    monotonic across an update and as a result can goes backward.
    According to update_fast_timekeeper() description: "In the worst
    case, this can result is a slightly wrong timestamp (a few
    nanoseconds)". For PM-runtime autosuspend, this means only that
    the suspend decision may be slightly suboptimal.
    
    Fixes: 8234f6734c5d ("PM-runtime: Switch autosuspend over to using hrtimers")
    Reported-by: Biju Das <biju.das@bp.renesas.com>
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 2b3604e243134e0000340b34cae8233f382ff08c
Merge: 91c577ef1eac e3966a766865
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jan 30 11:22:57 2019 +0100

    Merge tag 'davinci-fixes-for-v5.0-part2' of git://git.kernel.org/pub/scm/linux/kernel/git/nsekhar/linux-davinci into arm/fixes
    
    This fixes a long standing typo in device-tree for DA850 in interrupt
    number for timer. It did not affect us so far because we use non-DT
    timer driver within mach-davinci. This was caught while migrating to
    clocksource driver.
    
    * tag 'davinci-fixes-for-v5.0-part2' of git://git.kernel.org/pub/scm/linux/kernel/git/nsekhar/linux-davinci:
      ARM: dts: da850: fix interrupt numbers for clocksource
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 16df3ffca77a3d954afe15618f2da7a388386004
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sun Nov 25 00:00:49 2018 -0500

    clocksource/drivers/integrator-ap: Add missing of_node_put()
    
    [ Upstream commit 5eb73c831171115d3b4347e1e7124a5a35d8086c ]
    
    The function of_find_node_by_path() acquires a reference to the node
    returned by it and that reference needs to be dropped by its caller.
    
    integrator_ap_timer_init_of() doesn't do that.  The pri_node and the
    sec_node are used as an identifier to compare against the current
    node, so we can directly drop the refcount after getting the node from
    the path as it is not used as pointer.
    
    By dropping the refcount right after getting it, a single variable is
    needed instead of two.
    
    Fix this by use a single variable and drop the refcount right after
    of_find_node_by_path().
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit decca9bc2116a80821aa1fe0213754d9c5b29cea
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sun Nov 25 00:00:49 2018 -0500

    clocksource/drivers/integrator-ap: Add missing of_node_put()
    
    [ Upstream commit 5eb73c831171115d3b4347e1e7124a5a35d8086c ]
    
    The function of_find_node_by_path() acquires a reference to the node
    returned by it and that reference needs to be dropped by its caller.
    
    integrator_ap_timer_init_of() doesn't do that.  The pri_node and the
    sec_node are used as an identifier to compare against the current
    node, so we can directly drop the refcount after getting the node from
    the path as it is not used as pointer.
    
    By dropping the refcount right after getting it, a single variable is
    needed instead of two.
    
    Fix this by use a single variable and drop the refcount right after
    of_find_node_by_path().
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 293849d49e6406f6eac1c1cb0600d83d94e77fd8
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sun Nov 25 00:00:49 2018 -0500

    clocksource/drivers/integrator-ap: Add missing of_node_put()
    
    [ Upstream commit 5eb73c831171115d3b4347e1e7124a5a35d8086c ]
    
    The function of_find_node_by_path() acquires a reference to the node
    returned by it and that reference needs to be dropped by its caller.
    
    integrator_ap_timer_init_of() doesn't do that.  The pri_node and the
    sec_node are used as an identifier to compare against the current
    node, so we can directly drop the refcount after getting the node from
    the path as it is not used as pointer.
    
    By dropping the refcount right after getting it, a single variable is
    needed instead of two.
    
    Fix this by use a single variable and drop the refcount right after
    of_find_node_by_path().
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 983a5a43ec254cd5ddf3254db80ca96e8f8bb2a4
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Jan 22 09:03:08 2019 -0800

    clocksource: timer-ti-dm: Fix pwm dmtimer usage of fck reparenting
    
    Commit 84badc5ec5fc ("ARM: dts: omap4: Move l4 child devices to probe
    them with ti-sysc") moved some omap4 timers to probe with ti-sysc
    interconnect target module. Turns out this broke pwm-omap-dmtimer
    where we now try to reparent the clock to itself with the following:
    
    omap_dm_timer_of_set_source: failed to set parent
    
    With ti-sysc, we can now configure the clock sources in the dts
    with assigned-clocks and assigned-clock-parents. So we should be able
    to remove omap_dm_timer_of_set_source with clean-up patches later on.
    But for now, let's just fix it first by checking if parent and fck
    are the same and bail out of so.
    
    Fixes: 84badc5ec5fc ("ARM: dts: omap4: Move l4 child devices to probe them with ti-sysc")
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: H. Nikolaus Schaller <hns@goldelico.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Cc: Tero Kristo <t-kristo@ti.com>
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Reported-by: H. Nikolaus Schaller <hns@goldelico.com>
    Tested-By: Andreas Kemnade <andreas@kemnade.info>
    Tested-By: H. Nikolaus Schaller <hns@goldelico.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit e3966a766865da7ced1dece663697861dd5cf103
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Fri Jan 11 18:21:18 2019 +0100

    ARM: dts: da850: fix interrupt numbers for clocksource
    
    The timer interrupts specified in commit 3652e2741f42 ("ARM: dts:
    da850: Add clocks") are wrong but since the current timer code
    hard-codes them, the bug was never spotted.
    
    This patch must go into stable since, once we introduce a proper
    clocksource driver, devices with buggy device tree will stop booting.
    
    Fixes: 3652e2741f42 ("ARM: dts: da850: Add clocks")
    Cc: stable@vger.kernel.org
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit b7d25836ab005b02c8ec5edc57ddb71c0e0f3f1c
Author: Alexey Brodkin <alexey.brodkin@synopsys.com>
Date:   Mon Nov 19 14:29:17 2018 +0300

    clocksource/drivers/arc_timer: Utilize generic sched_clock
    
    commit bf287607c80f24387fedb431a346dc67f25be12c upstream.
    
    It turned out we used to use default implementation of sched_clock()
    from kernel/sched/clock.c which was as precise as 1/HZ, i.e.
    by default we had 10 msec granularity of time measurement.
    
    Now given ARC built-in timers are clocked with the same frequency as
    CPU cores we may get much higher precision of time tracking.
    
    Thus we switch to generic sched_clock which really reads ARC hardware
    counters.
    
    This is especially helpful for measuring short events.
    That's what we used to have:
    ------------------------------>8------------------------
    $ perf stat /bin/sh -c /root/lmbench-master/bin/arc/hello > /dev/null
    
     Performance counter stats for '/bin/sh -c /root/lmbench-master/bin/arc/hello':
    
             10.000000      task-clock (msec)         #    2.832 CPUs utilized
                     1      context-switches          #    0.100 K/sec
                     1      cpu-migrations            #    0.100 K/sec
                    63      page-faults               #    0.006 M/sec
               3049480      cycles                    #    0.305 GHz
               1091259      instructions              #    0.36  insn per cycle
                256828      branches                  #   25.683 M/sec
                 27026      branch-misses             #   10.52% of all branches
    
           0.003530687 seconds time elapsed
    
           0.000000000 seconds user
           0.010000000 seconds sys
    ------------------------------>8------------------------
    
    And now we'll see:
    ------------------------------>8------------------------
    $ perf stat /bin/sh -c /root/lmbench-master/bin/arc/hello > /dev/null
    
     Performance counter stats for '/bin/sh -c /root/lmbench-master/bin/arc/hello':
    
              3.004322      task-clock (msec)         #    0.865 CPUs utilized
                     1      context-switches          #    0.333 K/sec
                     1      cpu-migrations            #    0.333 K/sec
                    63      page-faults               #    0.021 M/sec
               2986734      cycles                    #    0.994 GHz
               1087466      instructions              #    0.36  insn per cycle
                255209      branches                  #   84.947 M/sec
                 26002      branch-misses             #   10.19% of all branches
    
           0.003474829 seconds time elapsed
    
           0.003519000 seconds user
           0.000000000 seconds sys
    ------------------------------>8------------------------
    
    Note how much more meaningful is the second output - time spent for
    execution pretty much matches number of cycles spent (we're runnign
    @ 1GHz here).
    
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Vineet Gupta <vgupta@synopsys.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Acked-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf75d9382bc4c57873c4193f90685058b6adf934
Author: Alexey Brodkin <alexey.brodkin@synopsys.com>
Date:   Mon Nov 19 14:29:17 2018 +0300

    clocksource/drivers/arc_timer: Utilize generic sched_clock
    
    commit bf287607c80f24387fedb431a346dc67f25be12c upstream.
    
    It turned out we used to use default implementation of sched_clock()
    from kernel/sched/clock.c which was as precise as 1/HZ, i.e.
    by default we had 10 msec granularity of time measurement.
    
    Now given ARC built-in timers are clocked with the same frequency as
    CPU cores we may get much higher precision of time tracking.
    
    Thus we switch to generic sched_clock which really reads ARC hardware
    counters.
    
    This is especially helpful for measuring short events.
    That's what we used to have:
    ------------------------------>8------------------------
    $ perf stat /bin/sh -c /root/lmbench-master/bin/arc/hello > /dev/null
    
     Performance counter stats for '/bin/sh -c /root/lmbench-master/bin/arc/hello':
    
             10.000000      task-clock (msec)         #    2.832 CPUs utilized
                     1      context-switches          #    0.100 K/sec
                     1      cpu-migrations            #    0.100 K/sec
                    63      page-faults               #    0.006 M/sec
               3049480      cycles                    #    0.305 GHz
               1091259      instructions              #    0.36  insn per cycle
                256828      branches                  #   25.683 M/sec
                 27026      branch-misses             #   10.52% of all branches
    
           0.003530687 seconds time elapsed
    
           0.000000000 seconds user
           0.010000000 seconds sys
    ------------------------------>8------------------------
    
    And now we'll see:
    ------------------------------>8------------------------
    $ perf stat /bin/sh -c /root/lmbench-master/bin/arc/hello > /dev/null
    
     Performance counter stats for '/bin/sh -c /root/lmbench-master/bin/arc/hello':
    
              3.004322      task-clock (msec)         #    0.865 CPUs utilized
                     1      context-switches          #    0.333 K/sec
                     1      cpu-migrations            #    0.333 K/sec
                    63      page-faults               #    0.021 M/sec
               2986734      cycles                    #    0.994 GHz
               1087466      instructions              #    0.36  insn per cycle
                255209      branches                  #   84.947 M/sec
                 26002      branch-misses             #   10.19% of all branches
    
           0.003474829 seconds time elapsed
    
           0.003519000 seconds user
           0.000000000 seconds sys
    ------------------------------>8------------------------
    
    Note how much more meaningful is the second output - time spent for
    execution pretty much matches number of cycles spent (we're runnign
    @ 1GHz here).
    
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Vineet Gupta <vgupta@synopsys.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Acked-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ee3b3f4a5eb523ef27675ac2fcd2269b9d68767
Merge: a65981109f29 f50fd2d8524c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jan 5 09:50:07 2019 -0800

    Merge tag 'csky-for-linus-4.21' of git://github.com/c-sky/csky-linux
    
    Pull arch/csky updates from Guo Ren:
     "Here are three main features (cpu_hotplug, basic ftrace, basic perf)
      and some bugfixes:
    
      Features:
       - Add CPU-hotplug support for SMP
       - Add ftrace with function trace and function graph trace
       - Add Perf support
       - Add EM_CSKY_OLD 39
       - optimize kernel panic print.
       - remove syscall_exit_work
    
      Bugfixes:
       - fix abiv2 mmap(... O_SYNC) failure
       - fix gdb coredump error
       - remove vdsp implement for kernel
       - fix qemu failure to bootup sometimes
       - fix ftrace call-graph panic
       - fix device tree node reference leak
       - remove meaningless header-y
       - fix save hi,lo,dspcr regs in switch_stack
       - remove unused members in processor.h"
    
    * tag 'csky-for-linus-4.21' of git://github.com/c-sky/csky-linux:
      csky: Add perf support for C-SKY
      csky: Add EM_CSKY_OLD 39
      clocksource/drivers/c-sky: fixup ftrace call-graph panic
      csky: ftrace call graph supported.
      csky: basic ftrace supported
      csky: remove unused members in processor.h
      csky: optimize kernel panic print.
      csky: stacktrace supported.
      csky: CPU-hotplug supported for SMP
      clocksource/drivers/c-sky: fixup qemu fail to bootup sometimes.
      csky: fixup save hi,lo,dspcr regs in switch_stack.
      csky: remove syscall_exit_work
      csky: fixup remove vdsp implement for kernel.
      csky: bugfix gdb coredump error.
      csky: fixup abiv2 mmap(... O_SYNC) failed.
      csky: define syscall_get_arch()
      elf-em.h: add EM_CSKY
      csky: remove meaningless header-y
      csky: Don't leak device tree node reference

commit 0c87bb0e872cbbad59a965fc67668364066aa85e
Author: Guo Ren <ren_guo@c-sky.com>
Date:   Mon Dec 31 20:52:41 2018 +0800

    clocksource/drivers/c-sky: fixup ftrace call-graph panic
    
    We must add notrace on sched_clock_read, because it's called
    by ftrace_graph_caller.
    
    Signed-off-by: Guo Ren <ren_guo@c-sky.com>

commit 1d95fe4d3de42e915bc22d5fd6cd4de103c5e517
Author: Guo Ren <ren_guo@c-sky.com>
Date:   Thu Dec 20 15:21:41 2018 +0800

    clocksource/drivers/c-sky: fixup qemu fail to bootup sometimes.
    
    Timer startup must after timer_irq_enable. For qemu, timer tick
    irq hanppens but irq not enable, so it will cause qemu boot failed.
    
    Signed-off-by: Guo Ren <ren_guo@c-sky.com>
    Tested-by: Liu Zhiwei <zhiwei_liu@c-sky.com>

commit 9830afca9273787f32e236ae5d0e4d3a378ae842
Merge: 30807ef2b76e 9b9afe4a0ef1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 26 10:29:47 2018 -0800

    Merge tag 'riscv-for-linus-4.21-mw1' of git://git.kernel.org/pub/scm/linux/kernel/git/palmer/riscv-linux
    
    Pull RISC-V updates from Palmer Dabbelt:
     "We don't have many patches for this merge window, probably because
      everything has been a bit busy with the holidays and conferences. The
      only big user-visible change is to move over to an SBI-based earlycon
      instead of our arch-specific early printk support.
    
      The only outstanding patch set I know of is the audit patch set, which
      I've managed to make a mess of and will attempt to clean up"
    
    * tag 'riscv-for-linus-4.21-mw1' of git://git.kernel.org/pub/scm/linux/kernel/git/palmer/riscv-linux:
      RISC-V: Select GENERIC_SCHED_CLOCK for clocksource drivers
      RISC-V: lib: minor asm cleanup
      RISC-V: Update Kconfig to better handle CMDLINE
      riscv: remove unused variable in ftrace
      RISC-V: add of_node_put()
      RISC-V: Fix of_node_* refcount
      riscv, atomic: Add #define's for the atomic_{cmp,}xchg_*() variants
      RISC-V: Remove EARLY_PRINTK support
      RISC-V: defconfig: Enable RISC-V SBI earlycon support

commit 9f687dddc4e1a3101f1ceb7fbaddbf93f93a7788
Merge: e4b99d415c39 bd2bcaa565a2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 25 15:44:08 2018 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The timer department delivers the following christmas presents:
    
      Core code:
    
       - Use proper seqcount initializer to make lockdep happy
    
       - SPDX annotations and cleanup of license boilerplates
    
       - Use DEFINE_SHOW_ATTRIBUTE() instead of open coding it
    
       - Minor cleanups
    
      Driver code:
    
       - Add the sched_clock for the arc timer (Alexey Brodkin)
    
       - Change the file timer names for riscv, rockchip, tegra20, sun4i and
         meson6 (Daniel Lezcano)
    
       - Add the DT bindings for r8a7796, r8a77470 and r8a774a1 (Biju Das)
    
       - Remove the early platform driver registration for timer-ti-dm
         (Bartosz Golaszewski)
    
       - Provide the sched_clock for the riscv timer (Anup Patel)
    
       - Add support for ARM64 for the imx-gpt and convert the imx-tpm to
         the timer-of API (Anson Huang)
    
       - Remove useless irq protection for the imx-gpt (Clément Péron)
    
       - Remove a duplicate function name for the vt8500 (Dan Carpenter)
    
       - Remove obsolete inclusion of <asm/smp_twd.h> for the tegra20 (Geert
         Uytterhoeven)
    
       - Demote the prcmu and the custom sched_clock for the dbx500 and the
         ux500 (Linus Walleij)
    
       - Add a new timer clock for the RDA8810PL (Manivannan Sadhasivam)
    
       - Rename the macro to stick to the register name and add the delay
         timer (Martin Blumenstingl)
    
       - Switch the bcm2835 to the SPDX identifier (Stefan Wahren)
    
       - Fix the interrupt register access on the fttmr010 (Tao Ren)
    
       - Add missing of_node_put in the initialization path on the
         integrator-ap (Yangtao Li)"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (39 commits)
      dt-bindings: timer: Document RDA8810PL SoC timer
      clocksource/drivers/rda: Add clock driver for RDA8810PL SoC
      clocksource/drivers/meson6: Change name meson6_timer timer-meson6
      clocksource/drivers/sun4i: Change name sun4i_timer to timer-sun4i
      clocksource/drivers/tegra20: Change name tegra20_timer to timer-tegra20
      clocksource/drivers/rockchip: Change name rockchip_timer to timer-rockchip
      clocksource/drivers/riscv: Change name riscv_timer to timer-riscv
      clocksource/drivers/riscv_timer: Provide the sched_clock
      clocksource/drivers/timer-imx-tpm: Specify clock name for timer-of
      clocksource/drivers/fttmr010: Fix invalid interrupt register access
      clocksource/drivers/integrator-ap: Add missing of_node_put()
      clocksource/drivers/bcm2835: Switch to SPDX identifier
      dt-bindings: timer: renesas, cmt: Document r8a774a1 CMT support
      clocksource/drivers/timer-imx-tpm: Convert the driver to timer-of
      clocksource/drivers/arc_timer: Utilize generic sched_clock
      dt-bindings: timer: renesas, cmt: Document r8a77470 CMT support
      dt-bindings: timer: renesas, cmt: Document r8a7796 CMT support
      clocksource/drivers/imx-gpt: Remove unnecessary irq protection
      clocksource/drivers/imx-gpt: Add support for ARM64
      clocksource/drivers/meson6_timer: Implement the ARM delay timer
      ...

commit 9b9afe4a0ef149db2472f13d6fa3c705d2867c9c
Author: Anup Patel <anup@brainfault.org>
Date:   Tue Dec 4 15:59:51 2018 +0530

    RISC-V: Select GENERIC_SCHED_CLOCK for clocksource drivers
    
    The riscv_timer driver can provide sched_clock using "rdtime"
    instruction but to achieve this we require generic sched_clock
    framework hence this patch selects GENERIC_SCHED_CLOCK for RISCV.
    
    Signed-off-by: Anup Patel <anup@brainfault.org>
    Reviewed-by: Palmer Dabbelt <palmer@sifive.com>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

commit 615740fd6b0c44e6ba1beaa87ddbdf7ead57ecf4
Merge: 07daef8b41e0 7f83a1327962
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Dec 18 22:57:38 2018 +0100

    Merge branch 'clockevents/4.21' of http://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/event changes from Daniel Lezcano:
    
     - Add the sched_clock for the arc timer (Alexey Brodkin)
    
     - Change the file timer names for riscv, rockchip, tegra20, sun4i and
       meson6 (Daniel Lezcano)
    
     - Add the DT bindings for r8a7796, r8a77470 and r8a774a1 (Biju Das)
    
     - Remove the early platform driver registration for timer-ti-dm (Bartosz
       Golaszewski)
    
     - Provide the sched_clock for the riscv timer (Anup Patel)
    
     - Add support for ARM64 for the imx-gpt and convert the imx-tpm to the
       timer-of API (Anson Huang)
    
     - Remove useless irq protection for the imx-gpt (Clément Péron)
    
     - Remove a duplicate function name for the vt8500 (Dan Carpenter)
    
     - Remove obsolete inclusion of <asm/smp_twd.h> for the tegra20 (Geert
       Uytterhoeven)
    
     - Demote the prcmu and the custom sched_clock for the dbx500 and the ux500
       (Linus Walleij)
    
     - Add a new timer clock for the RDA8810PL (Manivannan Sadhasivam)
    
     - Rename the macro to stick to the register name and add the delay timer
       (Martin Blumenstingl)
    
     - Switch the bcm2835 to the SPDX identifier (Stefan Wahren)
    
     - Fix the interrupt register access on the fttmr010 (Tao Ren)
    
     - Add missing of_node_put in the initialization path on the
       integrator-ap (Yangtao Li)

commit 7f83a1327962b9b3712866db8cbafbdee239cce4
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Mon Dec 10 23:05:46 2018 +0530

    clocksource/drivers/rda: Add clock driver for RDA8810PL SoC
    
    Add clock driver for RDA Micro RDA8810PL SoC supporting OSTIMER
    and HWTIMER.
    
    RDA8810PL has two independent timers: OSTIMER (56 bit) and HWTIMER
    (64 bit). Each timer provides optional interrupt support. In this
    driver, OSTIMER is used for clockevents and HWTIMER is used for
    clocksource.
    
    Signed-off-by: Andreas Färber <afaerber@suse.de>
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit adab4ec3c2341d0939a3a83b81320a934c64c3e2
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Dec 9 17:40:14 2018 +0100

    clocksource/drivers/meson6: Change name meson6_timer timer-meson6
    
    In order to unify the names in this directory, let's rename the driver to be
    prefixed with timer-*
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 493d09b7a7f5b23f176b00f944ad77e9e0c84672
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Dec 9 17:38:54 2018 +0100

    clocksource/drivers/sun4i: Change name sun4i_timer to timer-sun4i
    
    In order to unify the names in this directory, let's rename the driver to be
    prefixed with timer-*
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f155ae2c35c9ea8ce52f3ac670ced0eb23eded19
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Dec 9 17:37:13 2018 +0100

    clocksource/drivers/tegra20: Change name tegra20_timer to timer-tegra20
    
    In order to unify the names in this directory, let's rename the driver to be
    prefixed with timer-*
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2d3bc644dd161c6c3e92dac74a4112c0411d4698
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Dec 9 17:35:44 2018 +0100

    clocksource/drivers/rockchip: Change name rockchip_timer to timer-rockchip
    
    In order to unify the names in this directory, let's rename the driver to be
    prefixed with timer-*
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 3d42b32b1d6bdee161f6d629fc850fdf0c0fb2a1
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Dec 9 17:34:04 2018 +0100

    clocksource/drivers/riscv: Change name riscv_timer to timer-riscv
    
    In order to unify the names in this directory, let's rename the driver to be
    prefixed with timer-*
    
    Reviewed-by: Palmer Dabbelt <palmer@sifive.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 92e0d143fdef1faa7560c93fb0d6cd6c61da88ee
Author: Anup Patel <anup@brainfault.org>
Date:   Tue Dec 4 15:59:52 2018 +0530

    clocksource/drivers/riscv_timer: Provide the sched_clock
    
    Currently, we don't have a sched_clock registered for RISC-V systems.
    This means Linux time keeping will use jiffies (running at HZ) as the
    default sched_clock.
    
    To avoid this, we explicity provide sched_clock using RISC-V rdtime
    instruction (similar to riscv_timer clocksource).
    
    Signed-off-by: Anup Patel <anup@brainfault.org>
    Reviewed-by: Palmer Dabbelt <palmer@sifive.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4f352d1fc5a8d3220e29766a26172eff34867014
Author: Anson Huang <anson.huang@nxp.com>
Date:   Fri Dec 7 06:05:36 2018 +0000

    clocksource/drivers/timer-imx-tpm: Specify clock name for timer-of
    
    i.MX TPM needs "ipg" clock for register access and "per" clock for
    timer function, the driver gets "ipg" clock by searching the clock
    name, but timer-of initialization will get first clock in device
    tree TPM node since no clock name specified in of_clk, that means
    the "per" clock MUST be the first clock entry in device tree TPM
    node, this patch specifies clock name for of_clk to avoid this
    restriction, it makes TPM driver work properly with different sequence
    of clock entries in device tree TPM node.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 86fe57fc47b17b3528fa5497fc57e158d846c4ea
Author: Tao Ren <taoren@fb.com>
Date:   Wed Oct 3 14:53:50 2018 -0700

    clocksource/drivers/fttmr010: Fix invalid interrupt register access
    
    TIMER_INTR_MASK register (Base Address of Timer + 0x38) is not designed
    for masking interrupts on ast2500 chips, and it's not even listed in
    ast2400 datasheet, so it's not safe to access TIMER_INTR_MASK on aspeed
    chips.
    
    Similarly, TIMER_INTR_STATE register (Base Address of Timer + 0x34) is
    not interrupt status register on ast2400 and ast2500 chips. Although
    there is no side effect to reset the register in fttmr010_common_init(),
    it's just misleading to do so.
    
    Besides, "count_down" is renamed to "is_aspeed" in "fttmr010" structure,
    and more comments are added so the code is more readble.
    
    Signed-off-by: Tao Ren <taoren@fb.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5eb73c831171115d3b4347e1e7124a5a35d8086c
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sun Nov 25 00:00:49 2018 -0500

    clocksource/drivers/integrator-ap: Add missing of_node_put()
    
    The function of_find_node_by_path() acquires a reference to the node
    returned by it and that reference needs to be dropped by its caller.
    
    integrator_ap_timer_init_of() doesn't do that.  The pri_node and the
    sec_node are used as an identifier to compare against the current
    node, so we can directly drop the refcount after getting the node from
    the path as it is not used as pointer.
    
    By dropping the refcount right after getting it, a single variable is
    needed instead of two.
    
    Fix this by use a single variable and drop the refcount right after
    of_find_node_by_path().
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 64db8bb157cb8108ae017f00c2d47f03d4ebe8a6
Author: Stefan Wahren <stefan.wahren@i2se.com>
Date:   Sat Nov 10 16:28:39 2018 +0100

    clocksource/drivers/bcm2835: Switch to SPDX identifier
    
    Adopt the SPDX license identifier headers to ease license compliance
    management. Also drop the FSF address.
    
    Cc: Simon Arlott <simon@arlott.org>
    Signed-off-by: Stefan Wahren <stefan.wahren@i2se.com>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 3825603a8076738d95b430d36896a760d7fc4909
Author: Anson Huang <anson.huang@nxp.com>
Date:   Tue Nov 6 05:15:58 2018 +0000

    clocksource/drivers/timer-imx-tpm: Convert the driver to timer-of
    
    Convert the driver to use the timer_of helpers.  This allows to handle
    timer base, clock and irq using common timer_of driver and it
    simplifies the code.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bf287607c80f24387fedb431a346dc67f25be12c
Author: Alexey Brodkin <alexey.brodkin@synopsys.com>
Date:   Mon Nov 19 14:29:17 2018 +0300

    clocksource/drivers/arc_timer: Utilize generic sched_clock
    
    It turned out we used to use default implementation of sched_clock()
    from kernel/sched/clock.c which was as precise as 1/HZ, i.e.
    by default we had 10 msec granularity of time measurement.
    
    Now given ARC built-in timers are clocked with the same frequency as
    CPU cores we may get much higher precision of time tracking.
    
    Thus we switch to generic sched_clock which really reads ARC hardware
    counters.
    
    This is especially helpful for measuring short events.
    That's what we used to have:
    ------------------------------>8------------------------
    $ perf stat /bin/sh -c /root/lmbench-master/bin/arc/hello > /dev/null
    
     Performance counter stats for '/bin/sh -c /root/lmbench-master/bin/arc/hello':
    
             10.000000      task-clock (msec)         #    2.832 CPUs utilized
                     1      context-switches          #    0.100 K/sec
                     1      cpu-migrations            #    0.100 K/sec
                    63      page-faults               #    0.006 M/sec
               3049480      cycles                    #    0.305 GHz
               1091259      instructions              #    0.36  insn per cycle
                256828      branches                  #   25.683 M/sec
                 27026      branch-misses             #   10.52% of all branches
    
           0.003530687 seconds time elapsed
    
           0.000000000 seconds user
           0.010000000 seconds sys
    ------------------------------>8------------------------
    
    And now we'll see:
    ------------------------------>8------------------------
    $ perf stat /bin/sh -c /root/lmbench-master/bin/arc/hello > /dev/null
    
     Performance counter stats for '/bin/sh -c /root/lmbench-master/bin/arc/hello':
    
              3.004322      task-clock (msec)         #    0.865 CPUs utilized
                     1      context-switches          #    0.333 K/sec
                     1      cpu-migrations            #    0.333 K/sec
                    63      page-faults               #    0.021 M/sec
               2986734      cycles                    #    0.994 GHz
               1087466      instructions              #    0.36  insn per cycle
                255209      branches                  #   84.947 M/sec
                 26002      branch-misses             #   10.19% of all branches
    
           0.003474829 seconds time elapsed
    
           0.003519000 seconds user
           0.000000000 seconds sys
    ------------------------------>8------------------------
    
    Note how much more meaningful is the second output - time spent for
    execution pretty much matches number of cycles spent (we're runnign
    @ 1GHz here).
    
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Vineet Gupta <vgupta@synopsys.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Acked-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ec3372f28f7bf589388780df5eda945d4cdd7c4b
Author: Clément Péron <peron.clem@gmail.com>
Date:   Mon Nov 5 15:15:11 2018 +0100

    clocksource/drivers/imx-gpt: Remove unnecessary irq protection
    
    shutdown and oneshot are already protected against irq interruptions
    
    Signed-off-by: Clément Péron <peron.clem@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit df181e38281602bb404c5c8158a87317274dc653
Author: Anson Huang <anson.huang@nxp.com>
Date:   Mon Nov 5 01:10:27 2018 +0000

    clocksource/drivers/imx-gpt: Add support for ARM64
    
    This patch allows building and compile-testing the i.MX GPT driver
    also for ARM64. The delay_timer is only supported on ARMv7.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fa83c6f45aa560f814adfdf1a0bf523c1157dfe1
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Thu Nov 15 23:46:57 2018 +0100

    clocksource/drivers/meson6_timer: Implement the ARM delay timer
    
    Implement an ARM delay timer to be used for udelay(). This allows us to
    skip the delay loop calibration at boot.
    
    With this patch udelay() is now independent of CPU frequency changes.
    This is a good thing on Meson8, Meson8b and Meson8m2 because changing
    the CPU frequency requires running the CPU clock off the XTAL while
    changing the PLL or it's dividers. After changing the CPU clocks we need
    to wait a few usecs for the clock to become stable. So having an
    udelay() implementation that doesn't depend on the CPU frequency is
    beneficial.
    
    Suggested-by: Jianxin Pan <jianxin.pan@amlogic.com>
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bed8fc137e20df7dabcaff0bf2bfe494766aa556
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Thu Nov 15 23:46:56 2018 +0100

    clocksource/drivers/meson6_timer: Use register names from the datasheet
    
    This makes the driver use the names from S805 datasheet for the
    preprocessor #defines. This makes it easier to spot that the driver
    currently only supports Timer A (as clockevent with interrupt support)
    and Timer E (as clocksource without interrupts). Timer B, C and D (which
    are similar to Timer A) are currently not supported by the driver.
    
    While here, this also removes the internal "CED_ID" and "CSD_ID" defines
    which are used to identify the timer. These IDs are not described in the
    datasheet and thus make it harder to compare the code to what's written
    in the datasheet.
    
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 63136299721b4bfbd51ddd41181ab3a5897958bb
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Wed Nov 14 10:53:12 2018 +0100

    clocksource/drivers/timer-ti-dm: Remove the early platform driver registration
    
    This driver is no longer used as an early platform driver. Remove the
    registration macro.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 85b6fcadcf6626ad520376eacfb2b77090e782ab
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Nov 15 14:32:03 2018 +0100

    clocksource/drivers/ux500: Drop Ux500 custom SCHED_CLOCK
    
    The two drivers used for Ux500 sched_clock use two Kconfig
    symbols to select which of the two gets used as sched_clock.
    
    This isn't right: the workaround is trying to make sure that
    the NONSTOP timer is used for sched_clock in order to keep
    that clock ticking consistently over a suspend/resume
    cycle. (Otherwise sched_clock simply stops during suspend
    and continues after resume).
    
    This will notably affect any timetstamped debug prints,
    so that they show the absolute number of seconds since the
    system was booted and does not loose wall-clock time during
    suspend and resume as if time stood still.
    
    The real way to fix this problem is to make sched_clock
    take advantage of any NONSTOP clock source on the system
    and adjust accordingly, not to try to work around this by
    using a different sched_clock depending on what system
    we are compiling for. This can solve the problem for
    everyone instead of providing a local solution.
    
    Cc: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bc0750e464d41e1234f56471b8f626b8d945b1a8
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Nov 15 14:32:02 2018 +0100

    clocksource/drivers/dbx500: Demote dbx500 PRCMU clocksource
    
    Demote the DBx500 PRCMU clocksource to quality 100 and
    mark it as NONSTOP so it will still be used for
    timekeeping across suspend/resume.
    
    The Nomadik MTU timer which has higher precision will
    be used when the system is up and running, thanks to
    the recent changes properly utilizing the suspend
    clocksources.
    
    This was discussed back in 2011 when the driver was
    written, but the infrastructure was not available
    upstream to use this timer properly. Now the
    infrastructure is there, so let's finalize the work.
    
    Cc: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 30a85eb64347ef16aefba3aa96cb7f2c1615290a
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Oct 13 13:22:22 2018 +0300

    clocksource/drivers/timer-vt8500: Remove duplicate function name
    
    We print the function name twice in a row in the error message so I've
    removed one.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b4b84da36403bf1142d17fe7b06c2d639c9c9b8b
Author: Guo Ren <ren_guo@c-sky.com>
Date:   Tue Nov 6 15:21:14 2018 +0800

    MAINTAINERS: add maintainer for C-SKY drivers
    
    There are two intc drivers and two clocksource drivers, also include
    related dt-bindings' documentations.
    
    Change ren_guo@c-sky.com to guoren@kernel.org
    
    Signed-off-by: Guo Ren <ren_guo@c-sky.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7b141abe4aa137f362d7324de5a49fd3105f570f
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Fri Nov 16 21:42:35 2018 +0100

    ARM: dts: meson: add the clock inputs for the Meson timer
    
    The Meson Timer IP block has two clock inputs:
    - clk81 for using the system clock as timebase
    - xtal for a timebase with 1us, 10us, 100us and 1ms resolution
    
    The clocksource driver does not use these yet, but it's still a good
    idea to add them as this describes how the hardware actually works
    internally.
    
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>

commit 85d90b91807bb0c4a0fcff6a144e73f11cda782a
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Oct 30 23:47:07 2018 -0700

    RISC-V: lib: Fix build error for 64-bit
    
    Fixes the following build error from tinyconfig:
    
    riscv64-unknown-linux-gnu-ld: kernel/sched/fair.o: in function `.L8':
    fair.c:(.text+0x70): undefined reference to `__lshrti3'
    riscv64-unknown-linux-gnu-ld: kernel/time/clocksource.o: in function `.L0 ':
    clocksource.c:(.text+0x334): undefined reference to `__lshrti3'
    
    Fixes: 7f47c73b355f ("RISC-V: Build tishift only on 64-bit")
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

commit 35e7452442687d7bd70f042ddfa92f89311b039c
Merge: 04578e8441c5 bff9a1076adf
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 4 08:15:15 2018 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull more timer updates from Thomas Gleixner:
     "A set of commits for the new C-SKY architecture timers"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      dt-bindings: timer: gx6605s SOC timer
      clocksource/drivers/c-sky: Add gx6605s SOC system timer
      dt-bindings: timer: C-SKY Multi-processor timer
      clocksource/drivers/c-sky: Add C-SKY SMP timer

commit 33745c3cc588d9d5e18d6fd88709002158dddd5e
Author: Guo Ren <ren_guo@c-sky.com>
Date:   Sat Nov 3 00:51:30 2018 +0800

    clocksource/drivers/c-sky: Add gx6605s SOC system timer
    
    The driver is for gx6605s SOC system timer and there are two
    same timers in gx6605s. We use one for clkevt and another one for
    clksrc.
    
    The timer is mmio map to access, so we need give mmio address in dts.
    
    The counter at 0x0  offset is clock event.
    The counter at 0x40 offset is clock source.
    
    Signed-off-by: Guo Ren <ren_guo@c-sky.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a7ad38b0dd3c1ba8d6e5a55241e875e9db8331ab
Author: Guo Ren <ren_guo@c-sky.com>
Date:   Sat Nov 3 00:51:28 2018 +0800

    clocksource/drivers/c-sky: Add C-SKY SMP timer
    
    The driver is for C-SKY SMP timer. It only supports oneshot event
    and 32bit overflow for clocksource. Per cpu core has one timer and
    all timers share one clock-counter-input from the same clocksource.
    
    This use mfcr&mtcr instructions to access the regs.
    
    Signed-off-by: Guo Ren <ren_guo@c-sky.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4dcb9239dad6cee17c538482619a5b659774ee51
Merge: 3acbd2de6bc3 d59e0ba19481
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 25 11:14:36 2018 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timekeeping updates from Thomas Gleixner:
     "The timers and timekeeping departement provides:
    
       - Another large y2038 update with further preparations for providing
         the y2038 safe timespecs closer to the syscalls.
    
       - An overhaul of the SHCMT clocksource driver
    
       - SPDX license identifier updates
    
       - Small cleanups and fixes all over the place"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (31 commits)
      tick/sched : Remove redundant cpu_online() check
      clocksource/drivers/dw_apb: Add reset control
      clocksource: Remove obsolete CLOCKSOURCE_OF_DECLARE
      clocksource/drivers: Unify the names to timer-* format
      clocksource/drivers/sh_cmt: Add R-Car gen3 support
      dt-bindings: timer: renesas: cmt: document R-Car gen3 support
      clocksource/drivers/sh_cmt: Properly line-wrap sh_cmt_of_table[] initializer
      clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines
      clocksource/drivers/sh_cmt: Fixup for 64-bit machines
      clocksource/drivers/sh_tmu: Convert to SPDX identifiers
      clocksource/drivers/sh_mtu2: Convert to SPDX identifiers
      clocksource/drivers/sh_cmt: Convert to SPDX identifiers
      clocksource/drivers/renesas-ostm: Convert to SPDX identifiers
      clocksource: Convert to using %pOFn instead of device_node.name
      tick/broadcast: Remove redundant check
      RISC-V: Request newstat syscalls
      y2038: signal: Change rt_sigtimedwait to use __kernel_timespec
      y2038: socket: Change recvmmsg to use __kernel_timespec
      y2038: sched: Change sched_rr_get_interval to use __kernel_timespec
      y2038: utimes: Rework #ifdef guards for compat syscalls
      ...

commit 034bda1cd5abbe7b170ce76b618768d164030bbd
Merge: d82924c3b8d0 99c19e6a8fe4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Oct 23 19:07:25 2018 +0100

    Merge branch 'x86-vdso-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 vdso updates from Ingo Molnar:
     "Two main changes:
    
       - Cleanups, simplifications and CLOCK_TAI support (Thomas Gleixner)
    
       - Improve code generation (Andy Lutomirski)"
    
    * 'x86-vdso-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/vdso: Rearrange do_hres() to improve code generation
      x86/vdso: Document vgtod_ts better
      x86/vdso: Remove "memory" clobbers in the vDSO syscall fallbacks
      x66/vdso: Add CLOCK_TAI support
      x86/vdso: Move cycle_last handling into the caller
      x86/vdso: Simplify the invalid vclock case
      x86/vdso: Replace the clockid switch case
      x86/vdso: Collapse coarse functions
      x86/vdso: Collapse high resolution functions
      x86/vdso: Introduce and use vgtod_ts
      x86/vdso: Use unsigned int consistently for vsyscall_gtod_data:: Seq
      x86/vdso: Enforce 64bit clocksource
      x86/time: Implement clocksource_arch_init()
      clocksource: Provide clocksource_arch_init()

commit a3cb38ea147c7495644f137434294a39e7c67567
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:11 2018 +0200

    clocksource: Initialize cs->wd_list
    
    commit 5b9e886a4af97574ca3ce1147f35545da0e7afc7 upstream.
    
    A number of places relies on list_empty(&cs->wd_list), however the
    list_head does not get initialized. Do so upon registration, such that
    thereafter it is possible to rely on list_empty() correctly reflecting
    the list membership status.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Diego Viola <diego.viola@gmail.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: rui.zhang@intel.com
    Link: https://lkml.kernel.org/r/20180430100344.472662715@infradead.org
    [bwh: Backported to 3.16: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit be7e497bf0908851c8744d30c513655b47e386bf
Author: Keerthy <j-keerthy@ti.com>
Date:   Wed Aug 8 18:44:59 2018 +0530

    clocksource/drivers/ti-32k: Add CLOCK_SOURCE_SUSPEND_NONSTOP flag for non-am43 SoCs
    
    [ Upstream commit 3b7d96a0dbb6b630878597a1838fc39f808b761b ]
    
    The 32k clocksource is NONSTOP for non-am43 SoCs. Hence
    add the flag for all the other SoCs.
    
    Reported-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c15d1a5f9094bf8c68435fdb31a0cabba8f1deb
Author: Keerthy <j-keerthy@ti.com>
Date:   Wed Aug 8 18:44:59 2018 +0530

    clocksource/drivers/ti-32k: Add CLOCK_SOURCE_SUSPEND_NONSTOP flag for non-am43 SoCs
    
    [ Upstream commit 3b7d96a0dbb6b630878597a1838fc39f808b761b ]
    
    The 32k clocksource is NONSTOP for non-am43 SoCs. Hence
    add the flag for all the other SoCs.
    
    Reported-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f5dbf26a1bdb1a3395b0de9eb20d22b47736656
Author: Tao Ren <taoren@fb.com>
Date:   Wed Sep 19 15:13:31 2018 -0700

    clocksource/drivers/fttmr010: Fix set_next_event handler
    
    [ Upstream commit 4451d3f59f2a6f95e5d205c2d04ea072955d080d ]
    
    Currently, the aspeed MATCH1 register is updated to <current_count -
    cycles> in set_next_event handler, with the assumption that COUNT
    register value is preserved when the timer is disabled and it continues
    decrementing after the timer is enabled. But the assumption is wrong:
    RELOAD register is loaded into COUNT register when the aspeed timer is
    enabled, which means the next event may be delayed because timer
    interrupt won't be generated until <0xFFFFFFFF - current_count +
    cycles>.
    
    The problem can be fixed by updating RELOAD register to <cycles>, and
    COUNT register will be re-loaded when the timer is enabled and interrupt
    is generated when COUNT register overflows.
    
    The test result on Facebook Backpack-CMM BMC hardware (AST2500) shows
    the issue is fixed: without the patch, usleep(100) suspends the process
    for several milliseconds (and sometimes even over 40 milliseconds);
    after applying the fix, usleep(100) takes averagely 240 microseconds to
    return under the same workload level.
    
    Signed-off-by: Tao Ren <taoren@fb.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Tested-by: Lei YU <mine260309@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89450e431a6314514f85d9e7dd11621b1b005754
Author: Keerthy <j-keerthy@ti.com>
Date:   Wed Aug 8 18:44:59 2018 +0530

    clocksource/drivers/ti-32k: Add CLOCK_SOURCE_SUSPEND_NONSTOP flag for non-am43 SoCs
    
    [ Upstream commit 3b7d96a0dbb6b630878597a1838fc39f808b761b ]
    
    The 32k clocksource is NONSTOP for non-am43 SoCs. Hence
    add the flag for all the other SoCs.
    
    Reported-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87e75317fe81e2bc24ea5a2b59bc0237f80dc242
Author: Tao Ren <taoren@fb.com>
Date:   Wed Sep 19 15:13:31 2018 -0700

    clocksource/drivers/fttmr010: Fix set_next_event handler
    
    [ Upstream commit 4451d3f59f2a6f95e5d205c2d04ea072955d080d ]
    
    Currently, the aspeed MATCH1 register is updated to <current_count -
    cycles> in set_next_event handler, with the assumption that COUNT
    register value is preserved when the timer is disabled and it continues
    decrementing after the timer is enabled. But the assumption is wrong:
    RELOAD register is loaded into COUNT register when the aspeed timer is
    enabled, which means the next event may be delayed because timer
    interrupt won't be generated until <0xFFFFFFFF - current_count +
    cycles>.
    
    The problem can be fixed by updating RELOAD register to <cycles>, and
    COUNT register will be re-loaded when the timer is enabled and interrupt
    is generated when COUNT register overflows.
    
    The test result on Facebook Backpack-CMM BMC hardware (AST2500) shows
    the issue is fixed: without the patch, usleep(100) suspends the process
    for several milliseconds (and sometimes even over 40 milliseconds);
    after applying the fix, usleep(100) takes averagely 240 microseconds to
    return under the same workload level.
    
    Signed-off-by: Tao Ren <taoren@fb.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Tested-by: Lei YU <mine260309@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb59249268cf94712686417fac1f253c7878a78c
Author: Keerthy <j-keerthy@ti.com>
Date:   Wed Aug 8 18:44:59 2018 +0530

    clocksource/drivers/ti-32k: Add CLOCK_SOURCE_SUSPEND_NONSTOP flag for non-am43 SoCs
    
    [ Upstream commit 3b7d96a0dbb6b630878597a1838fc39f808b761b ]
    
    The 32k clocksource is NONSTOP for non-am43 SoCs. Hence
    add the flag for all the other SoCs.
    
    Reported-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 771df4eea40241fac5ef5a8332e5353273255ff5
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Wed Apr 25 12:14:39 2018 +0200

    clocksource/drivers/timer-atmel-pit: Properly handle error cases
    
    commit 52bf4a900d9cede3eb14982d0f2c5e6db6d97cc3 upstream.
    
    The smatch utility reports a possible leak:
    
    smatch warnings:
    drivers/clocksource/timer-atmel-pit.c:183 at91sam926x_pit_dt_init() warn: possible memory leak of 'data'
    
    Ensure data is freed before exiting with an error.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 887361696fb9e2c5b99e39c8d0dbacbe46ff92f9
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Wed Apr 25 12:14:39 2018 +0200

    clocksource/drivers/timer-atmel-pit: Properly handle error cases
    
    commit 52bf4a900d9cede3eb14982d0f2c5e6db6d97cc3 upstream.
    
    The smatch utility reports a possible leak:
    
    smatch warnings:
    drivers/clocksource/timer-atmel-pit.c:183 at91sam926x_pit_dt_init() warn: possible memory leak of 'data'
    
    Ensure data is freed before exiting with an error.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4f9554f16d0a14b8ced9b3b91bd4e545fca5d66
Author: Vladimir Zapolskiy <vz@mleia.com>
Date:   Thu Oct 11 15:31:16 2018 +0300

    MAINTAINERS: Assign myself as a maintainer of ARM/LPC18XX architecture
    
    To all appearance Joachim Eastwood abandoned the maintenance of NXP
    LPC18xx/LPC43xx archtecture about two years ago, and for me it would be
    possible to continue the support, fortunately the quality of platform
    drivers written by Joachim is exceptionally high.
    
    The change is based on https://lkml.org/lkml/2018/9/24/1398 discussion.
    
    At the same time two redundant explicit driver file paths are dropped
    from the list, clk-lpc18xx* drivers are covered by "lpc18xx" search
    pattern and timer-lpc32xx driver is covered by "lpc32xx" pattern and it
    goes into ARM/LPC32XX entry, which is also under my wing, in other words
    LPC18xx/LPC43xx clocksource and CCF drivers will remain maintained.
    
    Signed-off-by: Vladimir Zapolskiy <vz@mleia.com>
    Cc: Joachim Eastwood <manabian@gmail.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 2f6affe35c1d79e3524a6475ea2267535a252258
Merge: 9414229c9c53 1f174a1a2cde
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Oct 7 21:56:29 2018 +0200

    Merge branch 'clockevents/4.20' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clockevent updates from Daniel Lezcano:
    
     - Prefix file names with timer-* (Daniel Lezcano)
    
     - Remove old CLOCKSOURCE_OF_DECLARE which was replaced by TIMER_OF_DECLARE
       (Daniel Lezcano)
    
     - Add reset control for dw_apb (Dinh Nguyen)
    
     - Add the SPDX identifiers for the renesas and sh timers (Kuninori
       Morimoto)
    
     - Use %pOFn instead of device_node.name (Rob Herring)
    
     - Fixup 64bits and clocksource width to 32b for sh_cmt (Sergei Shtylyov)
    
     - Add the R-Car gen3 support (Sergei Shtylyov)

commit 1f174a1a2cdebc65138e6ed1448b842e73200bb5
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Mon Sep 17 09:52:14 2018 -0500

    clocksource/drivers/dw_apb: Add reset control
    
    Add code to retrieve the reset property from the dw-apb timers and if
    the property is available, the safe operation is to assert the timer
    into reset, and followed by a deassert of the timer reset (brings the
    timer out of reset).
    
    This patch is needed for systems where the bootloader has left the timer
    not used in reset.
    
     - Trivial conflict with commit a74bd1ad7a:
        "Convert to using %pOFn instead of device_node.name"
    
    Reported-by: Marek Vasut <marex@denx.de>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a51e996d48ac9fa0a1260a3822a14f3d570d3be7
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Sep 17 14:45:36 2018 +0200

    x86/vdso: Enforce 64bit clocksource
    
    All VDSO clock sources are TSC based and use CLOCKSOURCE_MASK(64). There is
    no point in masking with all FF. Get rid of it and enforce the mask in the
    sanity checker.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Matt Rickard <matt@softrans.com.au>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Florian Weimer <fweimer@redhat.com>
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: devel@linuxdriverproject.org
    Cc: virtualization@lists.linux-foundation.org
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Juergen Gross <jgross@suse.com>
    Link: https://lkml.kernel.org/r/20180917130707.151963007@linutronix.de

commit 2a21ad571b62440a4ad66d70b4b5d09c00029af4
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Sep 17 14:45:35 2018 +0200

    x86/time: Implement clocksource_arch_init()
    
    Runtime validate the VCLOCK_MODE in clocksource::archdata and disable
    VCLOCK if invalid, which disables the VDSO but keeps the system running.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Matt Rickard <matt@softrans.com.au>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Florian Weimer <fweimer@redhat.com>
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: devel@linuxdriverproject.org
    Cc: virtualization@lists.linux-foundation.org
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Juergen Gross <jgross@suse.com>
    Link: https://lkml.kernel.org/r/20180917130707.069167446@linutronix.de

commit d67f34c19a679436dd2963b588015e119279e7a8
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Sep 17 14:45:34 2018 +0200

    clocksource: Provide clocksource_arch_init()
    
    Architectures have extra archdata in the clocksource, e.g. for VDSO
    support. There are no sanity checks or general initializations for this
    available. Add support for that.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Matt Rickard <matt@softrans.com.au>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: Florian Weimer <fweimer@redhat.com>
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: devel@linuxdriverproject.org
    Cc: virtualization@lists.linux-foundation.org
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Juergen Gross <jgross@suse.com>
    Link: https://lkml.kernel.org/r/20180917130706.973042587@linutronix.de

commit 9414229c9c53d3604032aa80f3d2e9ba5770cd4a
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Sep 24 06:08:07 2018 +0200

    clocksource: Remove obsolete CLOCKSOURCE_OF_DECLARE
    
    The macro CLOCKSOURCE_OF_DECLARE was renamed more TIMER_OF_DECLARE, and we
    kept an alias CLOCKSOURCE_OF_DECLARE in order to smooth the transition for
    drivers.
    
    This change was done 1.5 year ago, we can reasonably remove this backward
    compatible macro as it is no longer used anywhere.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9d8d47ea6ec6048abc75ccc4486aff1a7db1ff4b
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Sep 24 05:59:23 2018 +0200

    clocksource/drivers: Unify the names to timer-* format
    
    In order to make some housekeeping in the directory, this patch renames
    drivers to the timer-* format in order to unify their names.
    
    There is no functional changes.
    
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Vladimir Zapolskiy <vz@mleia.com>
    Acked-by: Liviu Dudau <liviu.dudau@arm.com>
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ac142a7fd291f4230923f221a594ce0281a96a72
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Wed Sep 12 23:17:37 2018 +0300

    clocksource/drivers/sh_cmt: Add R-Car gen3 support
    
    Add support for the R-Car gen3 CMT types 0/1 -- they seem to be the same
    CMT types 0/1 as in R-Car gen2 SoCs.
    
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit eceb4c49aed0fafbc4967e788231b1eba42b7606
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Wed Sep 12 23:14:14 2018 +0300

    clocksource/drivers/sh_cmt: Properly line-wrap sh_cmt_of_table[] initializer
    
    There's no good reason for the sh_cmt_of_table[] initializer to
    violate the 80-column limit, especially after the commit 8d50e9476bb4
    ("clocksource/drivers/sh_cmt: Mark "renesas,cmt-48-gen2" deprecated")
    partially fixed it -- fix the R-Car gen2 related entries as well.
    
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Reviewed-by: Chris Paterson <chris.paterson2@renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 37e7742c55ba856eaec7e35673ee370f36eb17f3
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Mon Sep 10 23:22:16 2018 +0300

    clocksource/drivers/sh_cmt: Fix clocksource width for 32-bit machines
    
    The driver seems to abuse *unsigned long* not only for the (32-bit)
    register values but also for the 'sh_cmt_channel::total_cycles' which
    needs to always be 64-bit -- as a result, the clocksource's mask is
    needlessly clamped down to 32-bits on the 32-bit machines...
    
    Fixes: 19bdc9d061bc ("clocksource: sh_cmt clocksource support")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 22627c6f3ed3d9d0df13eec3c831b08f8186c38e
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Sat Sep 8 23:54:05 2018 +0300

    clocksource/drivers/sh_cmt: Fixup for 64-bit machines
    
    When trying to use CMT for clockevents on R-Car gen3 SoCs, I noticed
    that 'max_delta_ns' for the broadcast timer (CMT) was shown as 1000 in
    /proc/timer_list. It turned out that when calculating it, the driver did
    1 << 32 (causing what I think was undefined behavior) resulting in a zero
    delta, later clamped to 1000 by cev_delta2ns(). The root cause turned out
    to be that the driver abused *unsigned long* for the CMT register values
    (which are 16/32-bit), so that the calculation of 'ch->max_match_value'
    in sh_cmt_setup_channel() used the wrong branch. Using more proper 'u32'
    instead fixed 'max_delta_ns' and even fixed the switching an active
    clocksource to CMT (which caused the system to turn non-interactive
    before).
    
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0b9294fe8dca4ab500e955cf06445134d228e493
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Wed Aug 22 02:26:20 2018 +0000

    clocksource/drivers/sh_tmu: Convert to SPDX identifiers
    
    This patch updates license to use SPDX-License-Identifier instead of verbose
    license text.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ddb89642a24f37abc00fa363f840708400d365be
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Wed Aug 22 02:26:06 2018 +0000

    clocksource/drivers/sh_mtu2: Convert to SPDX identifiers
    
    This patch updates license to use SPDX-License-Identifier instead of verbose
    license text.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit efad01173717b0d0ad8a7dc91cc447f19d8447f3
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Wed Aug 22 02:25:53 2018 +0000

    clocksource/drivers/sh_cmt: Convert to SPDX identifiers
    
    This patch updates license to use SPDX-License-Identifier instead of verbose
    license text.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 274157a4f7027af432642ca22e84f052875b26b4
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Wed Aug 22 02:25:38 2018 +0000

    clocksource/drivers/renesas-ostm: Convert to SPDX identifiers
    
    This patch updates license to use SPDX-License-Identifier instead of verbose
    license text.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2a4849d2674b965cd9eb7e6c010b7c240fb9d218
Author: Rob Herring <robh@kernel.org>
Date:   Mon Aug 27 20:52:14 2018 -0500

    clocksource: Convert to using %pOFn instead of device_node.name
    
    In preparation to remove the node name pointer from struct device_node,
    convert printf users to use the %pOFn format specifier.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 040f340134751d73bd03ee92fabb992946c55b3d
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Oct 2 23:11:44 2018 +0200

    arm64: arch_timer: avoid unused function warning
    
    arm64_1188873_read_cntvct_el0() is protected by the correct
    CONFIG_ARM64_ERRATUM_1188873 #ifdef, but the only reference to it is
    also inside of an CONFIG_ARM_ARCH_TIMER_OOL_WORKAROUND section,
    and causes a warning if that is disabled:
    
    drivers/clocksource/arm_arch_timer.c:323:20: error: 'arm64_1188873_read_cntvct_el0' defined but not used [-Werror=unused-function]
    
    Since the erratum requires that we always apply the workaround
    in the timer driver, select that symbol as we do for SoC
    specific errata.
    
    Fixes: 95b861a4a6d9 ("arm64: arch_timer: Add workaround for ARM erratum 1188873")
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

commit c0aac682fa6590cb660cb083dbc09f55e799d2d2
Merge: 451bb7c33197 17b57b1883c1
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Oct 1 08:58:57 2018 -0600

    Merge tag 'v4.19-rc6' into for-4.20/block
    
    Merge -rc6 in, for two reasons:
    
    1) Resolve a trivial conflict in the blk-mq-tag.c documentation
    2) A few important regression fixes went into upstream directly, so
       they aren't in the 4.20 branch.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    
    * tag 'v4.19-rc6': (780 commits)
      Linux 4.19-rc6
      MAINTAINERS: fix reference to moved drivers/{misc => auxdisplay}/panel.c
      cpufreq: qcom-kryo: Fix section annotations
      perf/core: Add sanity check to deal with pinned event failure
      xen/blkfront: correct purging of persistent grants
      Revert "xen/blkfront: When purging persistent grants, keep them in the buffer"
      selftests/powerpc: Fix Makefiles for headers_install change
      blk-mq: I/O and timer unplugs are inverted in blktrace
      dax: Fix deadlock in dax_lock_mapping_entry()
      x86/boot: Fix kexec booting failure in the SEV bit detection code
      bcache: add separate workqueue for journal_write to avoid deadlock
      drm/amd/display: Fix Edid emulation for linux
      drm/amd/display: Fix Vega10 lightup on S3 resume
      drm/amdgpu: Fix vce work queue was not cancelled when suspend
      Revert "drm/panel: Add device_link from panel device to DRM device"
      xen/blkfront: When purging persistent grants, keep them in the buffer
      clocksource/drivers/timer-atmel-pit: Properly handle error cases
      block: fix deadline elevator drain for zoned block devices
      ACPI / hotplug / PCI: Don't scan for non-hotplug bridges if slot is not bridge
      drm/syncobj: Don't leak fences when WAIT_FOR_SUBMIT is set
      ...
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit e1ce697db67421cc7e9a1cc1312149f3a4e08c93
Merge: af17b3aa1fea 090bcfd5d1b6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Sep 29 14:32:49 2018 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Thomas writes:
      "Three small fixes for clocksource drivers:
       - Proper error handling in the Atmel PIT driver
       - Add CLOCK_SOURCE_SUSPEND_NONSTOP for TI SoCs so suspend works again
       - Fix the next event function for Facebook Backpack-CMM BMC chips so
         usleep(100) doesnt sleep several milliseconds"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/timer-atmel-pit: Properly handle error cases
      clocksource/drivers/fttmr010: Fix set_next_event handler
      clocksource/drivers/ti-32k: Add CLOCK_SOURCE_SUSPEND_NONSTOP flag for non-am43 SoCs

commit 52bf4a900d9cede3eb14982d0f2c5e6db6d97cc3
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Wed Apr 25 12:14:39 2018 +0200

    clocksource/drivers/timer-atmel-pit: Properly handle error cases
    
    The smatch utility reports a possible leak:
    
    smatch warnings:
    drivers/clocksource/timer-atmel-pit.c:183 at91sam926x_pit_dt_init() warn: possible memory leak of 'data'
    
    Ensure data is freed before exiting with an error.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4451d3f59f2a6f95e5d205c2d04ea072955d080d
Author: Tao Ren <taoren@fb.com>
Date:   Wed Sep 19 15:13:31 2018 -0700

    clocksource/drivers/fttmr010: Fix set_next_event handler
    
    Currently, the aspeed MATCH1 register is updated to <current_count -
    cycles> in set_next_event handler, with the assumption that COUNT
    register value is preserved when the timer is disabled and it continues
    decrementing after the timer is enabled. But the assumption is wrong:
    RELOAD register is loaded into COUNT register when the aspeed timer is
    enabled, which means the next event may be delayed because timer
    interrupt won't be generated until <0xFFFFFFFF - current_count +
    cycles>.
    
    The problem can be fixed by updating RELOAD register to <cycles>, and
    COUNT register will be re-loaded when the timer is enabled and interrupt
    is generated when COUNT register overflows.
    
    The test result on Facebook Backpack-CMM BMC hardware (AST2500) shows
    the issue is fixed: without the patch, usleep(100) suspends the process
    for several milliseconds (and sometimes even over 40 milliseconds);
    after applying the fix, usleep(100) takes averagely 240 microseconds to
    return under the same workload level.
    
    Signed-off-by: Tao Ren <taoren@fb.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Tested-by: Lei YU <mine260309@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 51d34e94c4701f125907c026272870790a37c4a1
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Sep 5 10:41:58 2018 +0200

    clocksource: Revert "Remove kthread"
    
    commit e2c631ba75a7e727e8db0a9d30a06bfd434adb3a upstream.
    
    I turns out that the silly spawn kthread from worker was actually needed.
    
    clocksource_watchdog_kthread() cannot be called directly from
    clocksource_watchdog_work(), because clocksource_select() calls
    timekeeping_notify() which uses stop_machine(). One cannot use
    stop_machine() from a workqueue() due lock inversions wrt CPU hotplug.
    
    Revert the patch but add a comment that explain why we jump through such
    apparently silly hoops.
    
    Fixes: 7197e77abcb6 ("clocksource: Remove kthread")
    Reported-by: Siegfried Metz <frame@mailbox.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Niklas Cassel <niklas.cassel@linaro.org>
    Tested-by: Kevin Shanahan <kevin@shanahan.id.au>
    Tested-by: viktor_jaegerskuepper@freenet.de
    Tested-by: Siegfried Metz <frame@mailbox.org>
    Cc: rafael.j.wysocki@intel.com
    Cc: len.brown@intel.com
    Cc: diego.viola@gmail.com
    Cc: rui.zhang@intel.com
    Cc: bjorn.andersson@linaro.org
    Link: https://lkml.kernel.org/r/20180905084158.GR24124@hirez.programming.kicks-ass.net
    Cc: Siegfried Metz <frame@mailbox.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b7d96a0dbb6b630878597a1838fc39f808b761b
Author: Keerthy <j-keerthy@ti.com>
Date:   Wed Aug 8 18:44:59 2018 +0530

    clocksource/drivers/ti-32k: Add CLOCK_SOURCE_SUSPEND_NONSTOP flag for non-am43 SoCs
    
    The 32k clocksource is NONSTOP for non-am43 SoCs. Hence
    add the flag for all the other SoCs.
    
    Reported-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 3567994a05ba6490f6055650fbb892c926ae7fca
Merge: 225ad3cfec4c e2c631ba75a7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Sep 9 06:55:27 2018 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timekeeping fixes from Thomas Gleixner:
     "Two fixes for timekeeping:
    
       - Revert to the previous kthread based update, which is unfortunately
         required due to lock ordering issues. The removal caused boot
         failures on old Core2 machines. Add a proper comment why the thread
         needs to stay to prevent accidental removal in the future.
    
       - Fix a silly typo in a function declaration"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: Revert "Remove kthread"
      timekeeping: Fix declaration of read_persistent_wall_and_boot_offset()

commit e2c631ba75a7e727e8db0a9d30a06bfd434adb3a
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Sep 5 10:41:58 2018 +0200

    clocksource: Revert "Remove kthread"
    
    I turns out that the silly spawn kthread from worker was actually needed.
    
    clocksource_watchdog_kthread() cannot be called directly from
    clocksource_watchdog_work(), because clocksource_select() calls
    timekeeping_notify() which uses stop_machine(). One cannot use
    stop_machine() from a workqueue() due lock inversions wrt CPU hotplug.
    
    Revert the patch but add a comment that explain why we jump through such
    apparently silly hoops.
    
    Fixes: 7197e77abcb6 ("clocksource: Remove kthread")
    Reported-by: Siegfried Metz <frame@mailbox.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Niklas Cassel <niklas.cassel@linaro.org>
    Tested-by: Kevin Shanahan <kevin@shanahan.id.au>
    Tested-by: viktor_jaegerskuepper@freenet.de
    Tested-by: Siegfried Metz <frame@mailbox.org>
    Cc: rafael.j.wysocki@intel.com
    Cc: len.brown@intel.com
    Cc: diego.viola@gmail.com
    Cc: rui.zhang@intel.com
    Cc: bjorn.andersson@linaro.org
    Link: https://lkml.kernel.org/r/20180905084158.GR24124@hirez.programming.kicks-ass.net

commit 94c8a7cc35f66ca736f015db62989acf6a21d17a
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Sun Jun 10 16:24:15 2018 +0200

    clocksource/drivers/stm32: Fix error return code
    
    [ Upstream commit a26ed66c20f080c510fcf5bd448bce204f2c19d7 ]
    
    Return an error code on failure.
    
    Problem found using Coccinelle.
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: kernel-janitors@vger.kernel.org
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: https://lkml.kernel.org/r1528640655-18948-3-git-send-email-Julia.Lawall@lip6.fr
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1009aa1205c2c5e9101437dcadfa195708d863bf
Merge: 1d0926e99de7 627672cf431b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Aug 19 09:56:38 2018 -0700

    Merge tag 'riscv-for-linus-4.19-mw0' of git://git.kernel.org/pub/scm/linux/kernel/git/palmer/riscv-linux
    
    Pull RISC-V updates from Palmer Dabbelt:
     "This contains some major improvements to the RISC-V port, including
      the necessary interrupt controller and timer support to actually make
      it to userspace. Support for three devices has been added:
    
       - the ISA-mandated timers on RISC-V systems.
    
       - the ISA-mandated first-level interrupt controller on RISC-V
         systems, which is handled as part of our core arch code because
         it's very small and tightly tied to the ISA.
    
       - SiFive's platform-level interrupt controller, which talks to the
         actual devices.
    
      In addition to these new devices, there are a handful of cleanups all
      over the RISC-V tree:
    
       - build fixes for various configurations:
          * A fix to the vDSO build's makefile so it respects CFLAGS.
          * The addition of __lshrti3, a libgcc derived function necessary
            for some 32-bit configurations.
          * !SMP && PERF_EVENTS
    
       - Cleanups to the arch code to remove the remnants of old versions of
         the drivers that were just properly submitted.
          * Some dead code from the timer driver, most of which wasn't ever
            even compiled.
          * Cleanups of some interrupt #defines, which are now local to the
            interrupt handling code.
    
       - Fixes to ptrace(), which while not being sufficient to fully make
         GDB work are at least sufficient to get simple GDB tasks to work.
    
       - Early printk support via RISC-V's architecturally mandated SBI
         console device.
    
       - A fix to our early debug trap handler to ensure it's always
         aligned.
    
      These patches have all been through a fairly extensive review process,
      but as this enables a whole pile of functionality (ie, userspace) I'm
      confident we'll need to submit a few more patches. The only concrete
      issues I know about are the sys_riscv_flush_icache patches, but as I
      managed to screw those up on Friday I figured it'd be best to let them
      bake another week.
    
      This tag boots a Fedora root filesystem on QEMU's master branch for
      me, and before this morning's rebase (from 4.18-rc8 to 4.18) it booted
      on the HiFive Unleashed.
    
      Thanks to Christoph Hellwig and the other guys at WD for getting the
      new drivers in shape!"
    
    * tag 'riscv-for-linus-4.19-mw0' of git://git.kernel.org/pub/scm/linux/kernel/git/palmer/riscv-linux:
      dt-bindings: interrupt-controller: SiFive Plaform Level Interrupt Controller
      dt-bindings: interrupt-controller: RISC-V local interrupt controller
      RISC-V: Fix !CONFIG_SMP compilation error
      irqchip: add a SiFive PLIC driver
      RISC-V: Add the directive for alignment of stvec's value
      clocksource: new RISC-V SBI timer driver
      RISC-V: implement low-level interrupt handling
      RISC-V: add a definition for the SIE SEIE bit
      RISC-V: remove INTERRUPT_CAUSE_* defines from asm/irq.h
      RISC-V: simplify software interrupt / IPI code
      RISC-V: remove timer leftovers
      RISC-V: Add early printk support via the SBI console
      RISC-V: Don't increment sepc after breakpoint.
      RISC-V: implement __lshrti3.
      RISC-V: Use KBUILD_CFLAGS instead of KCFLAGS when building the vDSO

commit 1e45e9a95ec277272f73439629b6e3fe1f047e92
Merge: 8603596a327c fbfa9260085b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 13 13:02:31 2018 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The timers departement more or less proudly presents:
    
       - More Y2038 timekeeping work mostly in the core code. The work is
         slowly, but steadily targeting the actuall syscalls.
    
       - Enhanced timekeeping suspend/resume support by utilizing
         clocksources which do not stop during suspend, but are otherwise
         not the main timekeeping clocksources.
    
       - Make NTP adjustmets more accurate and immediate when the frequency
         is set directly and not incrementally.
    
       - Sanitize the overrung handing of posix timers
    
       - A new timer driver for Mediatek SoCs
    
       - The usual pile of fixes and updates all over the place"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (32 commits)
      clockevents: Warn if cpu_all_mask is used as cpumask
      tick/broadcast-hrtimer: Use cpu_possible_mask for ce_broadcast_hrtimer
      clocksource/drivers/arm_arch_timer: Fix bogus cpu_all_mask usage
      clocksource: ti-32k: Remove CLOCK_SOURCE_SUSPEND_NONSTOP flag
      timers: Clear timer_base::must_forward_clk with timer_base::lock held
      clocksource/drivers/sprd: Register one always-on timer to compensate suspend time
      clocksource/drivers/timer-mediatek: Add support for system timer
      clocksource/drivers/timer-mediatek: Convert the driver to timer-of
      clocksource/drivers/timer-mediatek: Use specific prefix for GPT
      clocksource/drivers/timer-mediatek: Rename mtk_timer to timer-mediatek
      clocksource/drivers/timer-mediatek: Add system timer bindings
      clocksource/drivers: Set clockevent device cpumask to cpu_possible_mask
      time: Introduce one suspend clocksource to compensate the suspend time
      time: Fix extra sleeptime injection when suspend fails
      timekeeping/ntp: Constify some function arguments
      ntp: Use kstrtos64 for s64 variable
      ntp: Remove redundant arguments
      timer: Fix coding style
      ktime: Provide typesafe ktime_to_ns()
      hrtimer: Improve kernel message printing
      ...

commit 62b0194368147def8c5a77ce604a125d620fc582
Author: Palmer Dabbelt <palmer@dabbelt.com>
Date:   Sat Aug 4 10:23:19 2018 +0200

    clocksource: new RISC-V SBI timer driver
    
    The RISC-V ISA defines a per-hart real-time clock and timer, which is
    present on all systems.  The clock is accessed via the 'rdtime'
    pseudo-instruction (which reads a CSR), and the timer is set via an SBI
    call.
    
    Contains various improvements from Atish Patra <atish.patra@wdc.com>.
    
    Signed-off-by: Dmitriy Cherkasov <dmitriy@oss-tech.org>
    Signed-off-by: Palmer Dabbelt <palmer@dabbelt.com>
    [hch: remove dead code, add SPDX tags, used riscv_of_processor_hart(),
     minor cleanups, merged  hotplug cpu support and other improvements
     from Atish]
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Atish Patra <atish.patra@wdc.com>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

commit b9490350f751e5d17a24d0ae5af1f9e7f55c7c31
Author: Christoph Hellwig <hch@lst.de>
Date:   Sat Aug 4 10:23:12 2018 +0200

    RISC-V: remove timer leftovers
    
    This code is currently unused and will be added back later in a different
    place with the real interrupt and clocksource support.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Palmer Dabbelt <palmer@sifive.com>

commit 8a5dd807782bbe6392b3288dd79a4e17e14ecbd2
Author: Mathieu Malaterre <malat@debian.org>
Date:   Wed May 16 21:59:43 2018 +0200

    clocksource: Move inline keyword to the beginning of function declarations
    
    [ Upstream commit db6f9e55c8d80a4a1a329b9b68a1d370bffb6aad ]
    
    The inline keyword was not at the beginning of the function declarations.
    Fix the following warnings triggered when using W=1:
    
      kernel/time/clocksource.c:456:1: warning: ‘inline’ is not at beginning of declaration [-Wold-style-declaration]
      kernel/time/clocksource.c:457:1: warning: ‘inline’ is not at beginning of declaration [-Wold-style-declaration]
    
    Signed-off-by: Mathieu Malaterre <malat@debian.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: https://lkml.kernel.org/r/20180516195943.31924-1-malat@debian.org
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbfa9260085b5b578a049a90135e5c51928c5f7f
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Wed Jul 11 12:24:24 2018 +0100

    clockevents: Warn if cpu_all_mask is used as cpumask
    
    Using cpu_all_mask in clockevents cpumask may result in issues while
    comparing multiple clockevent devices to choose the preferred one.
    
    On one of the platforms with 2 system (i.e. non per-CPU) timers with
    different ratings, having cpu_all_mask for one of the device resulted in a
    boot hang due to a endless loop in clockevents_notify_released() as both
    were clocksources were selected as preferred.
    
    In order to prevent such issues in the future, warn if any clockevent
    driver sets cpu_all_mask as it's cpumask and just override it to use
    cpu_possible_mask. All the existing occurrences of cpu_all_mask are already
    replaced with cpu_possible_mask.
    
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: https://lkml.kernel.org/r/1531308264-24220-3-git-send-email-sudeep.holla@arm.com

commit 6777996d27dd4f0a569ed9593e78db68c6b659cd
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Aug 2 14:53:10 2018 +0200

    clocksource/drivers/arm_arch_timer: Fix bogus cpu_all_mask usage
    
    Using cpu_all_mask as target mask for clockevents is wrong as it never can
    actually target not possible CPUs. Use cpu_possible_mask instead
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Sudeep Holla <sudeep.holla@arm.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c77aee71bbc67c4b0e56f4ce10406b85d4c929c1
Author: Keerthy <j-keerthy@ti.com>
Date:   Thu Aug 2 12:05:16 2018 +0530

    clocksource: ti-32k: Remove CLOCK_SOURCE_SUSPEND_NONSTOP flag
    
    Since commit 39232ed5a179 ("time: Introduce one suspend clocksource to
    compensate the suspend time") suspend/resume fails on AM437x platforms as
    the clocksource actually stops in suspend.
    
    Hence remove the CLOCK_SOURCE_SUSPEND_NONSTOP flag.
    
    Suggested-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <daniel.lezcano@linaro.org>
    Cc: <linux-omap@vger.kernel.org>
    Cc: <baolin.wang@linaro.org>
    Cc: <d-gerlach@ti.com>
    Cc: <tony@atomide.com>
    Cc: <t-kristo@ti.com>
    Link: https://lkml.kernel.org/r/1533191716-20476-1-git-send-email-j-keerthy@ti.com

commit b2ab472dc159b7f89e2bc2d305fbc52fc2241dd6
Merge: e5af5ff34cf0 156955754969
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Jul 30 13:08:54 2018 +0200

    Merge branch 'clockevents/4.19' of git://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clockevent/source changes from Daniel Lezcano:
    
     - Add a less accurate but always-on clocksource for the sprd platform
       (Baoling Wang)
     - Add the system timer for the new mediatek platforms (Stanley Chu)
     - Change the cpumask to cpu_possible_mask (Sudeep Holla)

commit 1569557549697207e52310cc5b7dbc8e64bef504
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Tue Jul 17 15:55:17 2018 +0800

    clocksource/drivers/sprd: Register one always-on timer to compensate suspend time
    
    Since the clocksource framework has introduced one suspend clocksource to
    compensate the suspend time, this patch registers one always-on timer as
    the suspend clocksource.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e3af677607d9daca9825bc98edfb5cedda5718a9
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Fri Jul 6 07:11:28 2018 +0800

    clocksource/drivers/timer-mediatek: Add support for system timer
    
    This patch adds a new "System Timer" on the Mediatek SoCs.
    
    The System Timer is introduced as an always-on timer being
    clockevent device for tick-broadcasting.
    
    For clock, it is driven by 13 MHz system clock.
    The implementation uses the system clock with no clock
    source divider.
    
    For interrupt, the clock event timer can be used by all cores.
    
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a0858f937960d24e05cedf43d5cbcb95cf088434
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Fri Jul 6 07:11:27 2018 +0800

    clocksource/drivers/timer-mediatek: Convert the driver to timer-of
    
    Convert the driver to use the timer_of helpers.
    This allows to remove custom proprietary structure,
    factors out and simplifies the code.
    
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 56d52d3f56192049221105efa6ee76251a949c0e
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Fri Jul 6 07:11:26 2018 +0800

    clocksource/drivers/timer-mediatek: Use specific prefix for GPT
    
    Use specific prefix to specify the name of supported
    timer hardware: "General Purpose Timer (GPT)".
    
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7ec58e5244b7a7aa41f792968208239a43e5ade7
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Fri Jul 6 07:11:25 2018 +0800

    clocksource/drivers/timer-mediatek: Rename mtk_timer to timer-mediatek
    
    Rename mtk_timer to timer-mediatek to apply new naming convention
    in clocksource folder.
    
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 59311b19d7f632397a98e8194de8e871867069db
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Fri Jul 6 07:11:24 2018 +0800

    clocksource/drivers/timer-mediatek: Add system timer bindings
    
    This patch adds bindings of new "System Timer" on Mediatek SoCs.
    
    Remove RTC clock in the same time because it is not used by
    both "General Purpose Timer" and "System Timer" now.
    
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f8f5fe86f7e10ecc784b53537edbe3fcf0c00884
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Wed Jul 11 12:24:22 2018 +0100

    clocksource/drivers: Set clockevent device cpumask to cpu_possible_mask
    
    Currently, quite a few clockevent devices have cpumask set to
    cpu_all_mask which should be fine. However, cpu_possible_mask is more
    accurate and if there are any other clockevent devices in the system
    which have cpumask set to cpu_possible_mask, then having cpu_all_mask
    may result in issues (mostly boot hang with forever loops in
    clockevents_notify_released).
    
    So, lets replace all the clockevent device cpu_all_mask to
    cpu_possible_mask in order to prevent above mentioned possible issue.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Cc: Jonathan Hunter <jonathanh@nvidia.com>
    Cc: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b2d94b3ff0638441460ce1fb23258cbd3374fd8e
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Mon Jul 23 14:10:20 2018 +0800

    arm64: dts: sprd: Add one suspend timer
    
    On Spreadtrum platform, the current clocksource for timekeeping will be
    stopped in suspend state, thus add one always-on timer to calculate the
    suspend time.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 16b3ae12337eb1695de0031fe4e030fb7fd6c2d9
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:11 2018 +0200

    clocksource: Initialize cs->wd_list
    
    commit 5b9e886a4af97574ca3ce1147f35545da0e7afc7 upstream.
    
    A number of places relies on list_empty(&cs->wd_list), however the
    list_head does not get initialized. Do so upon registration, such that
    thereafter it is possible to rely on list_empty() correctly reflecting
    the list membership status.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Diego Viola <diego.viola@gmail.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable@vger.kernel.org
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: rui.zhang@intel.com
    Link: https://lkml.kernel.org/r/20180430100344.472662715@infradead.org
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5af5ff34cf037ac7bb70976161427dc40bf4a96
Merge: 30587589251a 39232ed5a179
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jul 20 06:43:05 2018 +0200

    Merge tag 'fortglx/4.19/time-part2' of https://git.linaro.org/people/john.stultz/linux into timers/core
    
    Pull the second set of timekeeping things for 4.19 from John Stultz
    
      * NTP argument clenaups and constification from Ondrej Mosnacek
      * Fix to avoid RTC injecting sleeptime when suspend fails from
        Mukesh Ojha
      * Broading suspsend-timing to include non-stop clocksources that
        aren't currently used for timekeeping from Baolin Wang

commit 39232ed5a1793f67b11430c43ed8a9ed6e96c6eb
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Tue Jul 17 15:55:16 2018 +0800

    time: Introduce one suspend clocksource to compensate the suspend time
    
    On some hardware with multiple clocksources, we have coarse grained
    clocksources that support the CLOCK_SOURCE_SUSPEND_NONSTOP flag, but
    which are less than ideal for timekeeping whereas other clocksources
    can be better candidates but halt on suspend.
    
    Currently, the timekeeping core only supports timing suspend using
    CLOCK_SOURCE_SUSPEND_NONSTOP clocksources if that clocksource is the
    current clocksource for timekeeping.
    
    As a result, some architectures try to implement read_persistent_clock64()
    using those non-stop clocksources, but isn't really ideal, which will
    introduce more duplicate code. To fix this, provide logic to allow a
    registered SUSPEND_NONSTOP clocksource, which isn't the current
    clocksource, to be used to calculate the suspend time.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    [jstultz: minor tweaks to merge with previous resume changes]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit f473e5f467f6049370575390b08dc42131315d60
Author: Mukesh Ojha <mojha@codeaurora.org>
Date:   Tue Jul 17 12:01:29 2018 +0530

    time: Fix extra sleeptime injection when suspend fails
    
    Currently, there exists a corner case assuming when there is
    only one clocksource e.g RTC, and system failed to go to
    suspend mode. While resume rtc_resume() injects the sleeptime
    as timekeeping_rtc_skipresume() returned 'false' (default value
    of sleeptime_injected) due to which we can see mismatch in
    timestamps.
    
    This issue can also come in a system where more than one
    clocksource are present and very first suspend fails.
    
    Success case:
    ------------
                                            {sleeptime_injected=false}
    rtc_suspend() => timekeeping_suspend() => timekeeping_resume() =>
    
    (sleeptime injected)
     rtc_resume()
    
    Failure case:
    ------------
             {failure in sleep path} {sleeptime_injected=false}
    rtc_suspend()     =>          rtc_resume()
    
    {sleeptime injected again which was not required as the suspend failed}
    
    Fix this by handling the boolean logic properly.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Originally-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 3951dbf232e8500bef27f77437fd5d04b67cc6d1
Merge: aa0a3247c015 5e18e412973d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 13 13:36:36 2018 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Ingo Molnar:
     "A clocksource driver fix and a revert"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: arm_arch_timer: Set arch_mem_timer cpumask to cpu_possible_mask
      Revert "tick: Prefer a lower rating device only if it's CPU local device"

commit cca9bab1b72cd2296097c75f59ef11ef80461279
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jul 11 12:16:12 2018 +0200

    tcp: use monotonic timestamps for PAWS
    
    Using get_seconds() for timestamps is deprecated since it can lead
    to overflows on 32-bit systems. While the interface generally doesn't
    overflow until year 2106, the specific implementation of the TCP PAWS
    algorithm breaks in 2038 when the intermediate signed 32-bit timestamps
    overflow.
    
    A related problem is that the local timestamps in CLOCK_REALTIME form
    lead to unexpected behavior when settimeofday is called to set the system
    clock backwards or forwards by more than 24 days.
    
    While the first problem could be solved by using an overflow-safe method
    of comparing the timestamps, a nicer solution is to use a monotonic
    clocksource with ktime_get_seconds() that simply doesn't overflow (at
    least not until 136 years after boot) and that doesn't change during
    settimeofday().
    
    To make 32-bit and 64-bit architectures behave the same way here, and
    also save a few bytes in the tcp_options_received structure, I'm changing
    the type to a 32-bit integer, which is now safe on all architectures.
    
    Finally, the ts_recent_stamp field also (confusingly) gets used to store
    a jiffies value in tcp_synq_overflow()/tcp_synq_no_recent_overflow().
    This is currently safe, but changing the type to 32-bit requires
    some small changes there to keep it working.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5e18e412973d6bb1804de1d4d30a891c774b006e
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Jul 9 16:45:36 2018 +0100

    clocksource: arm_arch_timer: Set arch_mem_timer cpumask to cpu_possible_mask
    
    Currently, arch_mem_timer cpumask is set to cpu_all_mask which should be
    fine. However, cpu_possible_mask is more accurate and if there are other
    clockevent source in the system which are set to cpu_possible_mask, then
    having cpu_all_mask may result in issue.
    
    E.g. on a platform with arm,sp804 timer with rating 300 and
    cpu_possible_mask and this arch_mem_timer timer with rating 400 and
    cpu_all_mask, tick_check_preferred may choose both preferred as the
    cpumasks are not equal though they must be.
    
    This issue was root caused incorrectly initially and a fix was merged as
    commit 1332a9055801 ("tick: Prefer a lower rating device only if it's CPU
    local device").
    
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Kevin Hilman <khilman@baylibre.com>
    Tested-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Link: https://lkml.kernel.org/r/1531151136-18297-2-git-send-email-sudeep.holla@arm.com

commit f6bd74fa084eb9ad573ffbb236a095454163f66d
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Jun 18 11:56:24 2018 +0200

    powerpc: xmon: use ktime_get_coarse_boottime64
    
    get_monotonic_boottime() is deprecated, and may not be safe to call in
    every context, as it has to read a hardware clocksource.
    
    This changes xmon to print the time using ktime_get_coarse_boottime64()
    instead, which avoids the old timespec type and the HW access.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Balbir Singh <bsingharora@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

commit 61ef4b90793b3c1905ed8cbec228ff63ecb1a5c5
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Jun 18 16:27:45 2018 +0200

    USB: mon: use ktime_get_real_ts64 instead of getnstimeofday64
    
    The two do the same thing, but we want to remove getnstimeofday64()
    to have a more consistent interface.
    
    It would be nice to use a monotonic clocksource here rather than
    'real' time, but that would break the user interface.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6242258b6b472f8fdd8ed9b735cc1190c185d16d
Merge: 78fea6334f72 abcbcb80cd09
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jun 24 19:16:42 2018 +0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A small set of fixes for time(r) related issues:
    
       - Fix a long standing conversion issue in jiffies_to_msecs() for odd
         HZ values like 1024 or 1200 which resulted in returning 0 for small
         jiffies values due to rounding down.
    
       - Use the proper CONFIG symbol in the new Y2038 safe compat code for
         posix-timers. Not yet a visible breakage, but this will immediately
         trigger when the architecture support for the new interfaces is
         merged.
    
       - Return an error code in the STM32 clocksource driver on failure
         instead of success.
    
       - Remove the redundant and stale irq disabled check in the posix cpu
         timer code. The check is at the wrong place anyway and lockdep
         already covers it via the sighand lock locking coverage"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      time: Make sure jiffies_to_msecs() preserves non-zero time periods
      posix-timers: Fix nanosleep_copyout() for CONFIG_COMPAT_32BIT_TIME
      clocksource/drivers/stm32: Fix error return code
      posix-cpu-timers: Remove lockdep_assert_irqs_disabled()

commit 65783949c813d0cad88b6a30f47737e8dfc00c86
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Wed Mar 28 11:22:37 2018 +0800

    clocksource/drivers/imx-tpm: Correct some registers operation flow
    
    [ Upstream commit 506a7be93ff773d5d4cf75a59f342865605b4910 ]
    
    According to i.MX7ULP reference manual, TPM_SC_CPWMS can ONLY be written when
    counter is disabled, TPM_SC_TOF is write-1-clear, TPM_C0SC_CHF is also
    write-1-clear, correct these registers initialization flow;
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7564580d60eef208bf15e324c8289f65a399465
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Wed Mar 28 11:22:37 2018 +0800

    clocksource/drivers/imx-tpm: Correct some registers operation flow
    
    [ Upstream commit 506a7be93ff773d5d4cf75a59f342865605b4910 ]
    
    According to i.MX7ULP reference manual, TPM_SC_CPWMS can ONLY be written when
    counter is disabled, TPM_SC_TOF is write-1-clear, TPM_C0SC_CHF is also
    write-1-clear, correct these registers initialization flow;
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a78945c357f58665d6a5da8a69e085898e831c70
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Jun 14 15:28:52 2018 +0100

    nds32: Fix build error caused by configuration flag rename
    
    Fix build error on nds32 due to the merge of commit e3d5980568f ("lib:
    Rename compiler intrinsic selects to GENERIC_LIB_*") during the 4.18
    merge window which renames Kconfig symbols. This had raced with commit
    aeaa7af744fa ("nds32: lib: To use generic lib instead of libgcc to
    prevent the symbol undefined issue.") merged late in the 4.17 cycle,
    which added selects to nds32 using the original Kconfig symbol names.
    
    When they came together in merge commit 763f96944c95 ("Merge tag
    'mips_4.18' of
    git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux") this resulted
    in the following build errors:
    
    nds32le-linux-ld: kernel/time/timekeeping.o: in function `timekeeping_init':
    timekeeping.c:(.init.text+0x140): undefined reference to `__ashldi3'
    nds32le-linux-ld: timekeeping.c:(.init.text+0x144): undefined reference to `__ashldi3'
    nds32le-linux-ld: timekeeping.c:(.init.text+0x17e): undefined reference to `__lshrdi3'
    nds32le-linux-ld: timekeeping.c:(.init.text+0x182): undefined reference to `__lshrdi3'
    nds32le-linux-ld: drivers/clocksource/mmio.o: in function `clocksource_mmio_init':
    mmio.c:(.init.text+0x54): undefined reference to `__lshrdi3'
    nds32le-linux-ld: mmio.c:(.init.text+0x58): undefined reference to `__lshrdi3'
    
    Rename all 6 selects in nds32 and adjust the ordering accordingly to be
    alphabetical.
    
    Fixes: 763f96944c95 ("Merge tag 'mips_4.18' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    [jhogan@kernel.org: Rename all 6 symbols, sort, update commit message]
    Signed-off-by: James Hogan <jhogan@kernel.org>
    Cc: Greentime Hu <green.hu@gmail.com>
    Cc: Vincent Chen <deanbo422@gmail.com>
    Cc: Matt Redfearn <matt.redfearn@mips.com>
    Cc: Palmer Dabbelt <palmer@sifive.com>
    Acked-by: Greentime Hu <greentime@andestech.com>
    Signed-off-by: Greentime Hu <greentime@andestech.com>

commit b9650d87f973390e517ea4d855ea27062a192321
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Feb 26 11:36:14 2018 +0000

    clocksource/drivers/fsl_ftm_timer: Fix error return checking
    
    commit f287eb9013ccf199cbfa4eabd80c36fedfc15a73 upstream.
    
    The error checks on freq for a negative error return always fails because
    freq is unsigned and can never be negative. Fix this by making freq a
    signed long.
    
    Detected with Coccinelle:
    drivers/clocksource/fsl_ftm_timer.c:287:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    drivers/clocksource/fsl_ftm_timer.c:291:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    
    Fixes: 2529c3a33079 ("clocksource: Add Freescale FlexTimer Module (FTM) timer support")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: kernel-janitors@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180226113614.3092-1-colin.king@canonical.com
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a26ed66c20f080c510fcf5bd448bce204f2c19d7
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Sun Jun 10 16:24:15 2018 +0200

    clocksource/drivers/stm32: Fix error return code
    
    Return an error code on failure.
    
    Problem found using Coccinelle.
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: kernel-janitors@vger.kernel.org
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: https://lkml.kernel.org/r1528640655-18948-3-git-send-email-Julia.Lawall@lip6.fr

commit 155fb5c5fae72d1faa2067d6fa0a5be12279c689
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Mon May 28 18:14:49 2018 +0900

    netfilter: fix null-ptr-deref in nf_nat_decode_session
    
    Add null check for nat_hook in nf_nat_decode_session()
    
    [  195.648098] UBSAN: Undefined behaviour in ./include/linux/netfilter.h:348:14
    [  195.651366] BUG: KASAN: null-ptr-deref in __xfrm_policy_check+0x208/0x1d70
    [  195.653888] member access within null pointer of type 'struct nf_nat_hook'
    [  195.653896] CPU: 3 PID: 0 Comm: swapper/3 Not tainted 4.17.0-rc6+ #5
    [  195.656320] Read of size 8 at addr 0000000000000008 by task ping/2469
    [  195.658715] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [  195.658721] Call Trace:
    [  195.661087]
    [  195.669341]  <IRQ>
    [  195.670574]  dump_stack+0xc6/0x150
    [  195.672156]  ? dump_stack_print_info.cold.0+0x1b/0x1b
    [  195.674121]  ? ubsan_prologue+0x31/0x92
    [  195.676546]  ubsan_epilogue+0x9/0x49
    [  195.678159]  handle_null_ptr_deref+0x11a/0x130
    [  195.679800]  ? sprint_OID+0x1a0/0x1a0
    [  195.681322]  __ubsan_handle_type_mismatch_v1+0xd5/0x11d
    [  195.683146]  ? ubsan_prologue+0x92/0x92
    [  195.684642]  __xfrm_policy_check+0x18ef/0x1d70
    [  195.686294]  ? rt_cache_valid+0x118/0x180
    [  195.687804]  ? __xfrm_route_forward+0x410/0x410
    [  195.689463]  ? fib_multipath_hash+0x700/0x700
    [  195.691109]  ? kvm_sched_clock_read+0x23/0x40
    [  195.692805]  ? pvclock_clocksource_read+0xf6/0x280
    [  195.694409]  ? graph_lock+0xa0/0xa0
    [  195.695824]  ? pvclock_clocksource_read+0xf6/0x280
    [  195.697508]  ? pvclock_read_flags+0x80/0x80
    [  195.698981]  ? kvm_sched_clock_read+0x23/0x40
    [  195.700347]  ? sched_clock+0x5/0x10
    [  195.701525]  ? sched_clock_cpu+0x18/0x1a0
    [  195.702846]  tcp_v4_rcv+0x1d32/0x1de0
    [  195.704115]  ? lock_repin_lock+0x70/0x270
    [  195.707072]  ? pvclock_read_flags+0x80/0x80
    [  195.709302]  ? tcp_v4_early_demux+0x4b0/0x4b0
    [  195.711833]  ? lock_acquire+0x195/0x380
    [  195.714222]  ? ip_local_deliver_finish+0xfc/0x770
    [  195.716967]  ? raw_rcv+0x2b0/0x2b0
    [  195.718856]  ? lock_release+0xa00/0xa00
    [  195.720938]  ip_local_deliver_finish+0x1b9/0x770
    [...]
    
    Fixes: 2c205dd3981f ("netfilter: add struct nf_nat_hook and use it")
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 0bbcce5d1ef3f771a349896f1c7574d20dc6f4bd
Merge: 0ef283d4c780 e45e778f078e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 4 20:27:54 2018 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timers and timekeeping updates from Thomas Gleixner:
    
     - Core infrastucture work for Y2038 to address the COMPAT interfaces:
    
         + Add a new Y2038 safe __kernel_timespec and use it in the core
           code
    
         + Introduce config switches which allow to control the various
           compat mechanisms
    
         + Use the new config switch in the posix timer code to control the
           32bit compat syscall implementation.
    
     - Prevent bogus selection of CPU local clocksources which causes an
       endless reselection loop
    
     - Remove the extra kthread in the clocksource code which has no value
       and just adds another level of indirection
    
     - The usual bunch of trivial updates, cleanups and fixlets all over the
       place
    
     - More SPDX conversions
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (24 commits)
      clocksource/drivers/mxs_timer: Switch to SPDX identifier
      clocksource/drivers/timer-imx-tpm: Switch to SPDX identifier
      clocksource/drivers/timer-imx-gpt: Switch to SPDX identifier
      clocksource/drivers/timer-imx-gpt: Remove outdated file path
      clocksource/drivers/arc_timer: Add comments about locking while read GFRC
      clocksource/drivers/mips-gic-timer: Add pr_fmt and reword pr_* messages
      clocksource/drivers/sprd: Fix Kconfig dependency
      clocksource: Move inline keyword to the beginning of function declarations
      timer_list: Remove unused function pointer typedef
      timers: Adjust a kernel-doc comment
      tick: Prefer a lower rating device only if it's CPU local device
      clocksource: Remove kthread
      time: Change nanosleep to safe __kernel_* types
      time: Change types to new y2038 safe __kernel_* types
      time: Fix get_timespec64() for y2038 safe compat interfaces
      time: Add new y2038 safe __kernel_timespec
      posix-timers: Make compat syscalls depend on CONFIG_COMPAT_32BIT_TIME
      time: Introduce CONFIG_COMPAT_32BIT_TIME
      time: Introduce CONFIG_64BIT_TIME in architectures
      compat: Enable compat_get/put_timespec64 always
      ...

commit 043eaa70ad736380a631e820e32ad9176b020887
Author: David Lechner <david@lechnology.com>
Date:   Fri May 25 13:11:49 2018 -0500

    clk: davinci: psc: allow for dev == NULL
    
    On some davinci SoCs, we need to register the PSC clocks during early
    boot because they are needed for clocksource/clockevent. These changes
    allow for dev == NULL because in this case, we won't have a platform
    device for the clocks.
    
    Signed-off-by: David Lechner <david@lechnology.com>
    Reviewed-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Michael Turquette <mturquette@baylibre.com>
    Link: lkml.kernel.org/r/20180525181150.17873-9-david@lechnology.com

commit 17d8bacf19bb5ea5f258f9c0644d5688f9ba03a9
Author: David Lechner <david@lechnology.com>
Date:   Fri May 25 13:11:48 2018 -0500

    clk: davinci: da850-pll: change PLL0 to CLK_OF_DECLARE
    
    PLL0 on davinci/da850-type device needs to be registered early in boot
    because it is needed for clocksource/clockevent. Change the driver
    to use CLK_OF_DECLARE for this special case.
    
    Reviewed-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: David Lechner <david@lechnology.com>
    Signed-off-by: Michael Turquette <mturquette@baylibre.com>
    Link: lkml.kernel.org/r/20180525181150.17873-8-david@lechnology.com

commit 76c9dd9dbd6459f1faf2b10351eb3d3f90255fa1
Author: David Lechner <david@lechnology.com>
Date:   Fri May 25 13:11:47 2018 -0500

    clk: davinci: pll: allow dev == NULL
    
    This modifies the TI Davinci PLL clock driver to allow for the case
    when dev == NULL. On some (most) SoCs that use this driver, the PLL
    clock needs to be registered during early boot because it is used
    for clocksource/clkevent and there will be no platform device available.
    
    Signed-off-by: David Lechner <david@lechnology.com>
    Reviewed-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Michael Turquette <mturquette@baylibre.com>
    Link: lkml.kernel.org/r/20180525181150.17873-7-david@lechnology.com

commit 50de7f4347cf0dbe7b9c28e273a8cf498067790e
Author: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
Date:   Fri Feb 23 19:41:52 2018 +0300

    ARC: mcip: halt GFRC counter when ARC cores halt
    
    [ Upstream commit 07423d00a2b2a71a97e4287d9262cb83c4c4c89f ]
    
    In SMP systems, GFRC is used for clocksource. However by default the
    counter keeps running even when core is halted (say when debugging via a
    JTAG debugger). This confuses Linux timekeeping and triggers flase RCU stall
    splat such as below:
    
    | [ARCLinux]# while true; do ./shm_open_23-1.run-test ; done
    | Running with 1000 processes for 1000 objects
    | hrtimer: interrupt took 485060 ns
    |
    | create_cnt: 1000
    | Running with 1000 processes for 1000 objects
    | [ARCLinux]# INFO: rcu_preempt self-detected stall on CPU
    |       2-...: (1 GPs behind) idle=a01/1/0 softirq=135770/135773 fqs=0
    | INFO: rcu_preempt detected stalls on CPUs/tasks:
    |       0-...: (1 GPs behind) idle=71e/0/0 softirq=135264/135264 fqs=0
    |       2-...: (1 GPs behind) idle=a01/1/0 softirq=135770/135773 fqs=0
    |       3-...: (1 GPs behind) idle=4e0/0/0 softirq=134304/134304 fqs=0
    |       (detected by 1, t=13648 jiffies, g=31493, c=31492, q=1)
    
    Starting from ARC HS v3.0 it's possible to tie GFRC to state of up-to 4
    ARC cores with help of GFRC's CORE register where we set a mask for
    cores which state we need to rely on.
    
    We update cpu mask every time new cpu came online instead of using
    hardcoded one or using mask generated from "possible_cpus" as we
    want it set correctly even if we run kernel on HW which has fewer cores
    than expected (or we launch kernel via debugger and kick fever cores
    than HW has)
    
    Note that GFRC halts when all cores have halted and thus relies on
    programming of Inter-Core-dEbug register to halt all cores when one
    halts.
    
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Signed-off-by: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    [vgupta: rewrote changelog]
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10c7390ee34009a54c97a23eea7e4d53a096a3f5
Author: Felix Fietkau <nbd@nbd.name>
Date:   Wed Feb 28 10:56:10 2018 +0100

    clocksource/drivers/mips-gic-timer: Use correct shift count to extract data
    
    [ Upstream commit 5753405e27f8fe4c42c1537d3ddbd9e058e54cdc ]
    
    __gic_clocksource_init() extracts the GIC_CONFIG_COUNTBITS field from
    read_gic_config() by right shifting the register value. The shift count is
    determined by the most significant bit (__fls) of the bitmask which is
    wrong as it shifts out the complete bitfield.
    
    Use the least significant bit (__ffs) instead to shift the bitfield down to
    bit 0.
    
    Fixes: e07127a077c7 ("clocksource: mips-gic-timer: Use new GIC accessor functions")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: daniel.lezcano@linaro.org
    Cc: paul.burton@imgtec.com
    Link: https://lkml.kernel.org/r/20180228095610.50341-1-nbd@nbd.name
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 682def914242d13b41c1196e01582d05008ffd43
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Feb 26 11:36:14 2018 +0000

    clocksource/drivers/fsl_ftm_timer: Fix error return checking
    
    [ Upstream commit f287eb9013ccf199cbfa4eabd80c36fedfc15a73 ]
    
    The error checks on freq for a negative error return always fails because
    freq is unsigned and can never be negative. Fix this by making freq a
    signed long.
    
    Detected with Coccinelle:
    drivers/clocksource/fsl_ftm_timer.c:287:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    drivers/clocksource/fsl_ftm_timer.c:291:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    
    Fixes: 2529c3a33079 ("clocksource: Add Freescale FlexTimer Module (FTM) timer support")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: kernel-janitors@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180226113614.3092-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a25a9d63c478b6893cab930ea1fd07c9ec0a261
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Feb 26 11:36:14 2018 +0000

    clocksource/drivers/fsl_ftm_timer: Fix error return checking
    
    [ Upstream commit f287eb9013ccf199cbfa4eabd80c36fedfc15a73 ]
    
    The error checks on freq for a negative error return always fails because
    freq is unsigned and can never be negative. Fix this by making freq a
    signed long.
    
    Detected with Coccinelle:
    drivers/clocksource/fsl_ftm_timer.c:287:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    drivers/clocksource/fsl_ftm_timer.c:291:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    
    Fixes: 2529c3a33079 ("clocksource: Add Freescale FlexTimer Module (FTM) timer support")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: kernel-janitors@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180226113614.3092-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d95c576aa6e9146360874f954c262a57802e074
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Feb 26 11:36:14 2018 +0000

    clocksource/drivers/fsl_ftm_timer: Fix error return checking
    
    [ Upstream commit f287eb9013ccf199cbfa4eabd80c36fedfc15a73 ]
    
    The error checks on freq for a negative error return always fails because
    freq is unsigned and can never be negative. Fix this by making freq a
    signed long.
    
    Detected with Coccinelle:
    drivers/clocksource/fsl_ftm_timer.c:287:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    drivers/clocksource/fsl_ftm_timer.c:291:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    
    Fixes: 2529c3a33079 ("clocksource: Add Freescale FlexTimer Module (FTM) timer support")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: kernel-janitors@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180226113614.3092-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fe836b6554d0867a52bbca33cb536228f49d891
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Feb 26 11:36:14 2018 +0000

    clocksource/drivers/fsl_ftm_timer: Fix error return checking
    
    [ Upstream commit f287eb9013ccf199cbfa4eabd80c36fedfc15a73 ]
    
    The error checks on freq for a negative error return always fails because
    freq is unsigned and can never be negative. Fix this by making freq a
    signed long.
    
    Detected with Coccinelle:
    drivers/clocksource/fsl_ftm_timer.c:287:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    drivers/clocksource/fsl_ftm_timer.c:291:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    
    Fixes: 2529c3a33079 ("clocksource: Add Freescale FlexTimer Module (FTM) timer support")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: kernel-janitors@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180226113614.3092-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd6cc4f2d2700fb0a1b0251a95113f0fb517a9b9
Merge: 320b85794724 759c27bdc775
Author: Olof Johansson <olof@lixom.net>
Date:   Fri May 25 15:23:25 2018 -0700

    Merge tag 'omap-for-v4.18/soc-late-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into next/soc
    
    Late omap soc changes for v4.18 merge window
    
    This series contains two omap1 ams-delta GPIO clean-up patches to get
    started with removal of hard-coded GPIO numbers from drivers. And then
    the removal of board mach includes from drivers. The second patch mostly
    touches the ams-delta audio driver but is included here because of the
    removal of the latch gpios and is acked by Mark Brown.
    
    And there are two more am437x related PM patches to save and restore
    control module and timer registers for RTC only suspend mode. Looks like
    the patch title for the timer changes is a bit misleading, not all the
    timer code is yet living under drivers/clocksource. But I had already
    pushed out the branch before I noticed this.
    
    * tag 'omap-for-v4.18/soc-late-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      OMAP: CLK: CLKSRC: Add suspend resume hooks
      ARM: AM43XX: Add functions to save/restore am43xx control registers
      ASoC: ams_delta: use GPIO lookup table
      ARM: OMAP1: ams-delta: add GPIO lookup tables
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit e45e778f078efaac085e50366fe06d7b83c8b881
Author: Fabio Estevam <fabio.estevam@nxp.com>
Date:   Tue May 22 20:05:06 2018 -0300

    clocksource/drivers/mxs_timer: Switch to SPDX identifier
    
    Adopt the SPDX license identifier headers to ease license compliance
    management.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c8437a6cabda7ceee1d534ea4e19ad0feb9ea713
Author: Fabio Estevam <fabio.estevam@nxp.com>
Date:   Tue May 22 20:05:05 2018 -0300

    clocksource/drivers/timer-imx-tpm: Switch to SPDX identifier
    
    Adopt the SPDX license identifier headers to ease license compliance
    management.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c53bb6058850ea99d9303fb84c90d5a20bbe7c9b
Author: Fabio Estevam <fabio.estevam@nxp.com>
Date:   Tue May 22 20:05:04 2018 -0300

    clocksource/drivers/timer-imx-gpt: Switch to SPDX identifier
    
    Adopt the SPDX license identifier headers to ease license compliance
    management.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 377873c1503d4c44354d67f155a966ade1b47b15
Author: Fabio Estevam <fabio.estevam@nxp.com>
Date:   Tue May 22 20:05:03 2018 -0300

    clocksource/drivers/timer-imx-gpt: Remove outdated file path
    
    imx gpt timer driver has been moved from arch/arm/mach-imx to
    drivers/clocksource/ a long time ago, so remove the reference
    to the old file path.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a25036dbbf56f23d1b3d4624e2e775ffc5fba9b9
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Apr 13 14:56:44 2017 +0200

    x86/tsc: Provide 'tsc=unstable' boot parameter
    
    [ Upstream commit 8309f86cd41e8714526867177facf7a316d9be53 ]
    
    Since the clocksource watchdog will only detect broken TSC after the
    fact, all TSC based clocks will likely have observed non-continuous
    values before/when switching away from TSC.
    
    Therefore only thing to fully avoid random clock movement when your
    BIOS randomly mucks with TSC values from SMI handlers is reporting the
    TSC as unstable at boot.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>

commit 6bd9549d8a7dd06087a06fa7a6df651b02d6f21e
Author: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
Date:   Thu Apr 19 18:53:05 2018 +0300

    clocksource/drivers/arc_timer: Add comments about locking while read GFRC
    
    This came to light in some internal discussions and it is nice to have
    this documented rather than digging up the PRM (Prog Ref Manual) again.
    
    Signed-off-by: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
    Acked-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 3ca5768de841bf204ab0e69f664b227bb2d47826
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Thu Mar 29 10:49:03 2018 +0100

    clocksource/drivers/mips-gic-timer: Add pr_fmt and reword pr_* messages
    
    Several messages from the MIPS GIC driver include the text "GIC", "GIC
    timer", etc, but the format is not standard. Add a pr_fmt of
    "mips-gic-timer: " and reword the messages now that they will be
    prefixed with the driver name.
    
    Signed-off-by: Matt Redfearn <matt.redfearn@mips.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8a1ece26d370e38817da5232195896b727dba3cd
Author: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
Date:   Mon May 7 17:04:47 2018 +0800

    clocksource/drivers/sprd: Fix Kconfig dependency
    
    SPRD arch doesn't select SPRD_TIMER, so this config would not
    appear even if ARCH_SPRD is set but COMPILE_TEST not.
    
    Fix the dependency of this config with SPRD arch, and set a
    default value for it, also leave other choices for EXPERT.
    
    Signed-off-by: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit db6f9e55c8d80a4a1a329b9b68a1d370bffb6aad
Author: Mathieu Malaterre <malat@debian.org>
Date:   Wed May 16 21:59:43 2018 +0200

    clocksource: Move inline keyword to the beginning of function declarations
    
    The inline keyword was not at the beginning of the function declarations.
    Fix the following warnings triggered when using W=1:
    
      kernel/time/clocksource.c:456:1: warning: ‘inline’ is not at beginning of declaration [-Wold-style-declaration]
      kernel/time/clocksource.c:457:1: warning: ‘inline’ is not at beginning of declaration [-Wold-style-declaration]
    
    Signed-off-by: Mathieu Malaterre <malat@debian.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: https://lkml.kernel.org/r/20180516195943.31924-1-malat@debian.org

commit 23a9018d8881f1241f2b600b633aefdf4c47740f
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:13 2018 +0200

    clocksource: Consistent de-rate when marking unstable
    
    commit cd2af07d823e5287cd6c91d54337348c2a873462 upstream.
    
    When a registered clocksource gets marked unstable the watchdog_kthread
    will de-rate and re-select the clocksource. Ensure it also de-rates
    when getting called on an unregistered clocksource.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: diego.viola@gmail.com
    Cc: rui.zhang@intel.com
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180430100344.594904898@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa343b3928933448ff44fad37a8276da03a0319f
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:11 2018 +0200

    clocksource: Initialize cs->wd_list
    
    commit 5b9e886a4af97574ca3ce1147f35545da0e7afc7 upstream.
    
    A number of places relies on list_empty(&cs->wd_list), however the
    list_head does not get initialized. Do so upon registration, such that
    thereafter it is possible to rely on list_empty() correctly reflecting
    the list membership status.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Diego Viola <diego.viola@gmail.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable@vger.kernel.org
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: rui.zhang@intel.com
    Link: https://lkml.kernel.org/r/20180430100344.472662715@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c276594bfbe57846ce777b3c42386c13b898a37e
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 23 17:28:55 2018 +0200

    clocksource: Allow clocksource_mark_unstable() on unregistered clocksources
    
    commit 2aae7bcfa4104b770e6f612356adb8d66c6144d6 upstream.
    
    Because of how the code flips between tsc-early and tsc clocksources
    it might need to mark one or both unstable. The current code in
    mark_tsc_unstable() only worked because previously it registered the
    tsc clocksource once and then never touched it.
    
    Since it now unregisters the tsc-early clocksource, it needs to know
    if a clocksource got unregistered and the current cs->mult test
    doesn't work for that. Instead use list_empty(&cs->list) to test for
    registration.
    
    Furthermore, since clocksource_mark_unstable() needs to place the cs
    on the wd_list, it links the cs->list and cs->wd_list serialization.
    It must not see a clocsource registered (!empty cs->list) but already
    past dequeue_watchdog(). So place {en,de}queue{,_watchdog}() under the
    same lock.
    
    Provided cs->list is initialized to empty, this then allows us to
    unconditionally use clocksource_mark_unstable(), regardless of the
    registration state.
    
    Fixes: aa83c45762a2 ("x86/tsc: Introduce early tsc clocksource")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Diego Viola <diego.viola@gmail.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: diego.viola@gmail.com
    Cc: rui.zhang@intel.com
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180502135312.GS12217@hirez.programming.kicks-ass.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ab4ca7c59d45b2563754053e9b9fb7c40bdf795
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:12 2018 +0200

    x86/tsc: Fix mark_tsc_unstable()
    
    commit e3b4f79025e0a4eb7e2a2c7d24dadfa1e38893b0 upstream.
    
    mark_tsc_unstable() also needs to affect tsc_early, Now that
    clocksource_mark_unstable() can be used on a clocksource irrespective of
    its registration state, use it on both tsc_early and tsc.
    
    This does however require cs->list to be initialized empty, otherwise it
    cannot tell the registation state before registation.
    
    Fixes: aa83c45762a2 ("x86/tsc: Introduce early tsc clocksource")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Diego Viola <diego.viola@gmail.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: rui.zhang@intel.com
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180430100344.533326547@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2908cac1b043a6cb8584185b2ca438908873870
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:09 2018 +0200

    x86/tsc: Always unregister clocksource_tsc_early
    
    commit e9088adda13cd23249d4b0abb97ff8a81bf5573a upstream.
    
    Don't leave the tsc-early clocksource registered if it errors out
    early.
    
    This was reported by Diego, who on his Core2 era machine got TSC
    invalidated while it was running with tsc-early (due to C-states).
    This results in keeping tsc-early with very bad effects.
    
    Reported-and-Tested-by: Diego Viola <diego.viola@gmail.com>
    Fixes: aa83c45762a2 ("x86/tsc: Introduce early tsc clocksource")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: diego.viola@gmail.com
    Cc: rui.zhang@intel.com
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180430100344.350507853@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe282c609d0a5da0607a21ffa9ef49849bd7524d
Merge: 03b5f0c138db 7dba33c6346c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun May 6 05:35:23 2018 -1000

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull clocksource fixes from Thomas Gleixner:
     "The recent addition of the early TSC clocksource breaks on machines
      which have an unstable TSC because in case that TSC is disabled, then
      the clocksource selection logic falls back to the early TSC which is
      obviously bogus.
    
      That also unearthed a few robustness issues in the clocksource
      derating code which are addressed as well"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: Rework stale comment
      clocksource: Consistent de-rate when marking unstable
      x86/tsc: Fix mark_tsc_unstable()
      clocksource: Initialize cs->wd_list
      clocksource: Allow clocksource_mark_unstable() on unregistered clocksources
      x86/tsc: Always unregister clocksource_tsc_early

commit 7197e77abcb65a71d0b21d67beb24f153a96055e
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:15 2018 +0200

    clocksource: Remove kthread
    
    The clocksource watchdog uses a work to spawn a kthread to run the
    watchdog. That is about as silly as it sounds, run the watchdog
    directly from the work.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: diego.viola@gmail.com
    Cc: rui.zhang@intel.com
    Link: https://lkml.kernel.org/r/20180430100344.713862818@infradead.org

commit 7dba33c6346c337aac3f7cd188137d4a6d3d1f3a
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:14 2018 +0200

    clocksource: Rework stale comment
    
    AFAICS the hotplug code no longer uses this function.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: diego.viola@gmail.com
    Cc: rui.zhang@intel.com
    Link: https://lkml.kernel.org/r/20180430100344.656525644@infradead.org

commit cd2af07d823e5287cd6c91d54337348c2a873462
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:13 2018 +0200

    clocksource: Consistent de-rate when marking unstable
    
    When a registered clocksource gets marked unstable the watchdog_kthread
    will de-rate and re-select the clocksource. Ensure it also de-rates
    when getting called on an unregistered clocksource.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: diego.viola@gmail.com
    Cc: rui.zhang@intel.com
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180430100344.594904898@infradead.org

commit e3b4f79025e0a4eb7e2a2c7d24dadfa1e38893b0
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:12 2018 +0200

    x86/tsc: Fix mark_tsc_unstable()
    
    mark_tsc_unstable() also needs to affect tsc_early, Now that
    clocksource_mark_unstable() can be used on a clocksource irrespective of
    its registration state, use it on both tsc_early and tsc.
    
    This does however require cs->list to be initialized empty, otherwise it
    cannot tell the registation state before registation.
    
    Fixes: aa83c45762a2 ("x86/tsc: Introduce early tsc clocksource")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Diego Viola <diego.viola@gmail.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: rui.zhang@intel.com
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180430100344.533326547@infradead.org

commit 5b9e886a4af97574ca3ce1147f35545da0e7afc7
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:11 2018 +0200

    clocksource: Initialize cs->wd_list
    
    A number of places relies on list_empty(&cs->wd_list), however the
    list_head does not get initialized. Do so upon registration, such that
    thereafter it is possible to rely on list_empty() correctly reflecting
    the list membership status.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Diego Viola <diego.viola@gmail.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable@vger.kernel.org
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: rui.zhang@intel.com
    Link: https://lkml.kernel.org/r/20180430100344.472662715@infradead.org

commit 2aae7bcfa4104b770e6f612356adb8d66c6144d6
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 23 17:28:55 2018 +0200

    clocksource: Allow clocksource_mark_unstable() on unregistered clocksources
    
    Because of how the code flips between tsc-early and tsc clocksources
    it might need to mark one or both unstable. The current code in
    mark_tsc_unstable() only worked because previously it registered the
    tsc clocksource once and then never touched it.
    
    Since it now unregisters the tsc-early clocksource, it needs to know
    if a clocksource got unregistered and the current cs->mult test
    doesn't work for that. Instead use list_empty(&cs->list) to test for
    registration.
    
    Furthermore, since clocksource_mark_unstable() needs to place the cs
    on the wd_list, it links the cs->list and cs->wd_list serialization.
    It must not see a clocsource registered (!empty cs->list) but already
    past dequeue_watchdog(). So place {en,de}queue{,_watchdog}() under the
    same lock.
    
    Provided cs->list is initialized to empty, this then allows us to
    unconditionally use clocksource_mark_unstable(), regardless of the
    registration state.
    
    Fixes: aa83c45762a2 ("x86/tsc: Introduce early tsc clocksource")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Diego Viola <diego.viola@gmail.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: diego.viola@gmail.com
    Cc: rui.zhang@intel.com
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180502135312.GS12217@hirez.programming.kicks-ass.net

commit e9088adda13cd23249d4b0abb97ff8a81bf5573a
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Apr 30 12:00:09 2018 +0200

    x86/tsc: Always unregister clocksource_tsc_early
    
    Don't leave the tsc-early clocksource registered if it errors out
    early.
    
    This was reported by Diego, who on his Core2 era machine got TSC
    invalidated while it was running with tsc-early (due to C-states).
    This results in keeping tsc-early with very bad effects.
    
    Reported-and-Tested-by: Diego Viola <diego.viola@gmail.com>
    Fixes: aa83c45762a2 ("x86/tsc: Introduce early tsc clocksource")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: len.brown@intel.com
    Cc: rjw@rjwysocki.net
    Cc: diego.viola@gmail.com
    Cc: rui.zhang@intel.com
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180430100344.350507853@infradead.org

commit c6aaaaa4d62ad885a8ca0a255d4af975f843ee98
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Thu Apr 19 14:04:43 2018 +0800

    clocksource/imx-tpm: Correct -ETIME return condition check
    
    commit 7407188489c62a7b5694bc75a6db2b82af94c9a5 upstream.
    
    The additional brakects added to tpm_set_next_event's return value
    computation causes (int) forced type conversion NOT taking effect, and the
    incorrect value return will cause various system timer issue, like RCU
    stall etc..
    
    Remove the additional brackets to make sure tpm_set_next_event always
    returns correct value.
    
    Fixes: 059ab7b82eec ("clocksource/drivers/imx-tpm: Add imx tpm timer support")
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Dong Aisheng <Aisheng.dong@nxp.com>
    Cc: stable@vger.kernel.org
    Cc: daniel.lezcano@linaro.org
    Cc: Linux-imx@nxp.com
    Link: https://lkml.kernel.org/r/1524117883-2484-1-git-send-email-Anson.Huang@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa8900e6a49fa193690478940e18761d82007aa0
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Thu Apr 19 14:04:43 2018 +0800

    clocksource/imx-tpm: Correct -ETIME return condition check
    
    commit 7407188489c62a7b5694bc75a6db2b82af94c9a5 upstream.
    
    The additional brakects added to tpm_set_next_event's return value
    computation causes (int) forced type conversion NOT taking effect, and the
    incorrect value return will cause various system timer issue, like RCU
    stall etc..
    
    Remove the additional brackets to make sure tpm_set_next_event always
    returns correct value.
    
    Fixes: 059ab7b82eec ("clocksource/drivers/imx-tpm: Add imx tpm timer support")
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Dong Aisheng <Aisheng.dong@nxp.com>
    Cc: stable@vger.kernel.org
    Cc: daniel.lezcano@linaro.org
    Cc: Linux-imx@nxp.com
    Link: https://lkml.kernel.org/r/1524117883-2484-1-git-send-email-Anson.Huang@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1e9dae0a9bf3394818abafaf376a34248c5f638
Merge: 38f0b33e6d5b 7407188489c6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Apr 22 10:49:02 2018 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A small set of timer fixes:
    
       - Evaluate the -ETIME condition correctly in the imx tpm driver
    
       - Fix the evaluation order of a condition in posix cpu timers
    
       - Use pr_cont() in the clockevents code to prevent ugly message
         splitting
    
       - Remove __current_kernel_time() which is now unused to prevent that
         new users show up.
    
       - Remove a stale forward declaration"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/imx-tpm: Correct -ETIME return condition check
      posix-cpu-timers: Ensure set_process_cpu_timer is always evaluated
      timekeeping: Remove __current_kernel_time()
      timers: Remove stale struct tvec_base forward declaration
      clockevents: Fix kernel messages split across multiple lines

commit b951ffb160f765db6b06b9ee065f79faed5fa9e1
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Mon Apr 9 19:03:46 2018 +0900

    perf/core: Fix use-after-free in uprobe_perf_close()
    
    commit 621b6d2ea297d0fb6030452c5bcd221f12165fcf upstream.
    
    A use-after-free bug was caught by KASAN while running usdt related
    code (BCC project. bcc/tests/python/test_usdt2.py):
    
            ==================================================================
            BUG: KASAN: use-after-free in uprobe_perf_close+0x222/0x3b0
            Read of size 4 at addr ffff880384f9b4a4 by task test_usdt2.py/870
    
            CPU: 4 PID: 870 Comm: test_usdt2.py Tainted: G        W         4.16.0-next-20180409 #215
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
            Call Trace:
             dump_stack+0xc7/0x15b
             ? show_regs_print_info+0x5/0x5
             ? printk+0x9c/0xc3
             ? kmsg_dump_rewind_nolock+0x6e/0x6e
             ? uprobe_perf_close+0x222/0x3b0
             print_address_description+0x83/0x3a0
             ? uprobe_perf_close+0x222/0x3b0
             kasan_report+0x1dd/0x460
             ? uprobe_perf_close+0x222/0x3b0
             uprobe_perf_close+0x222/0x3b0
             ? probes_open+0x180/0x180
             ? free_filters_list+0x290/0x290
             trace_uprobe_register+0x1bb/0x500
             ? perf_event_attach_bpf_prog+0x310/0x310
             ? probe_event_disable+0x4e0/0x4e0
             perf_uprobe_destroy+0x63/0xd0
             _free_event+0x2bc/0xbd0
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ring_buffer_attach+0x550/0x550
             ? kvm_sched_clock_read+0x1a/0x30
             ? perf_event_release_kernel+0x3e4/0xc00
             ? __mutex_unlock_slowpath+0x12e/0x540
             ? wait_for_completion+0x430/0x430
             ? lock_downgrade+0x3c0/0x3c0
             ? lock_release+0x980/0x980
             ? do_raw_spin_trylock+0x118/0x150
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             perf_event_release_kernel+0x5d4/0xc00
             ? put_event+0x30/0x30
             ? fsnotify+0xd2d/0xea0
             ? sched_clock_cpu+0x18/0x1a0
             ? __fsnotify_update_child_dentry_flags.part.0+0x1b0/0x1b0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? pvclock_read_flags+0x80/0x80
             ? kvm_sched_clock_read+0x1a/0x30
             ? sched_clock_cpu+0x18/0x1a0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? locks_remove_file+0xec/0x470
             ? pvclock_read_flags+0x80/0x80
             ? fcntl_setlk+0x880/0x880
             ? ima_file_free+0x8d/0x390
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ima_file_check+0x110/0x110
             ? fsnotify+0xea0/0xea0
             ? kvm_sched_clock_read+0x1a/0x30
             ? rcu_note_context_switch+0x600/0x600
             perf_release+0x21/0x40
             __fput+0x264/0x620
             ? fput+0xf0/0xf0
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             ? SyS_fchdir+0x100/0x100
             ? fsnotify+0xea0/0xea0
             task_work_run+0x14b/0x1e0
             ? task_work_cancel+0x1c0/0x1c0
             ? copy_fd_bitmaps+0x150/0x150
             ? vfs_read+0xe5/0x260
             exit_to_usermode_loop+0x17b/0x1b0
             ? trace_event_raw_event_sys_exit+0x1a0/0x1a0
             do_syscall_64+0x3f6/0x490
             ? syscall_return_slowpath+0x2c0/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? syscall_return_slowpath+0x1a3/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? prepare_exit_to_usermode+0x11c/0x1e0
             ? enter_from_user_mode+0x30/0x30
            random: crng init done
             ? __put_user_4+0x1c/0x30
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
            RIP: 0033:0x7f41d95f9340
            RSP: 002b:00007fffe71e4268 EFLAGS: 00000246 ORIG_RAX: 0000000000000003
            RAX: 0000000000000000 RBX: 000000000000000d RCX: 00007f41d95f9340
            RDX: 0000000000000000 RSI: 0000000000002401 RDI: 000000000000000d
            RBP: 0000000000000000 R08: 00007f41ca8ff700 R09: 00007f41d996dd1f
            R10: 00007fffe71e41e0 R11: 0000000000000246 R12: 00007fffe71e4330
            R13: 0000000000000000 R14: fffffffffffffffc R15: 00007fffe71e4290
    
            Allocated by task 870:
             kasan_kmalloc+0xa0/0xd0
             kmem_cache_alloc_node+0x11a/0x430
             copy_process.part.19+0x11a0/0x41c0
             _do_fork+0x1be/0xa20
             do_syscall_64+0x198/0x490
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
            Freed by task 0:
             __kasan_slab_free+0x12e/0x180
             kmem_cache_free+0x102/0x4d0
             free_task+0xfe/0x160
             __put_task_struct+0x189/0x290
             delayed_put_task_struct+0x119/0x250
             rcu_process_callbacks+0xa6c/0x1b60
             __do_softirq+0x238/0x7ae
    
            The buggy address belongs to the object at ffff880384f9b480
             which belongs to the cache task_struct of size 12928
    
    It occurs because task_struct is freed before perf_event which refers
    to the task and task flags are checked while teardown of the event.
    perf_event_alloc() assigns task_struct to hw.target of perf_event,
    but there is no reference counting for it.
    
    As a fix we get_task_struct() in perf_event_alloc() at above mentioned
    assignment and put_task_struct() in _free_event().
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Reviewed-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 63b6da39bb38e8f1a1ef3180d32a39d6 ("perf: Fix perf_event_exit_task() race")
    Link: http://lkml.kernel.org/r/20180409100346.6416-1-bhole_prashant_q7@lab.ntt.co.jp
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7407188489c62a7b5694bc75a6db2b82af94c9a5
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Thu Apr 19 14:04:43 2018 +0800

    clocksource/imx-tpm: Correct -ETIME return condition check
    
    The additional brakects added to tpm_set_next_event's return value
    computation causes (int) forced type conversion NOT taking effect, and the
    incorrect value return will cause various system timer issue, like RCU
    stall etc..
    
    Remove the additional brackets to make sure tpm_set_next_event always
    returns correct value.
    
    Fixes: 059ab7b82eec ("clocksource/drivers/imx-tpm: Add imx tpm timer support")
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Dong Aisheng <Aisheng.dong@nxp.com>
    Cc: stable@vger.kernel.org
    Cc: daniel.lezcano@linaro.org
    Cc: Linux-imx@nxp.com
    Link: https://lkml.kernel.org/r/1524117883-2484-1-git-send-email-Anson.Huang@nxp.com

commit 6f22be4ba787eb76abbf66aad14b4d60ec59e641
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Mon Apr 9 19:03:46 2018 +0900

    perf/core: Fix use-after-free in uprobe_perf_close()
    
    commit 621b6d2ea297d0fb6030452c5bcd221f12165fcf upstream.
    
    A use-after-free bug was caught by KASAN while running usdt related
    code (BCC project. bcc/tests/python/test_usdt2.py):
    
            ==================================================================
            BUG: KASAN: use-after-free in uprobe_perf_close+0x222/0x3b0
            Read of size 4 at addr ffff880384f9b4a4 by task test_usdt2.py/870
    
            CPU: 4 PID: 870 Comm: test_usdt2.py Tainted: G        W         4.16.0-next-20180409 #215
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
            Call Trace:
             dump_stack+0xc7/0x15b
             ? show_regs_print_info+0x5/0x5
             ? printk+0x9c/0xc3
             ? kmsg_dump_rewind_nolock+0x6e/0x6e
             ? uprobe_perf_close+0x222/0x3b0
             print_address_description+0x83/0x3a0
             ? uprobe_perf_close+0x222/0x3b0
             kasan_report+0x1dd/0x460
             ? uprobe_perf_close+0x222/0x3b0
             uprobe_perf_close+0x222/0x3b0
             ? probes_open+0x180/0x180
             ? free_filters_list+0x290/0x290
             trace_uprobe_register+0x1bb/0x500
             ? perf_event_attach_bpf_prog+0x310/0x310
             ? probe_event_disable+0x4e0/0x4e0
             perf_uprobe_destroy+0x63/0xd0
             _free_event+0x2bc/0xbd0
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ring_buffer_attach+0x550/0x550
             ? kvm_sched_clock_read+0x1a/0x30
             ? perf_event_release_kernel+0x3e4/0xc00
             ? __mutex_unlock_slowpath+0x12e/0x540
             ? wait_for_completion+0x430/0x430
             ? lock_downgrade+0x3c0/0x3c0
             ? lock_release+0x980/0x980
             ? do_raw_spin_trylock+0x118/0x150
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             perf_event_release_kernel+0x5d4/0xc00
             ? put_event+0x30/0x30
             ? fsnotify+0xd2d/0xea0
             ? sched_clock_cpu+0x18/0x1a0
             ? __fsnotify_update_child_dentry_flags.part.0+0x1b0/0x1b0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? pvclock_read_flags+0x80/0x80
             ? kvm_sched_clock_read+0x1a/0x30
             ? sched_clock_cpu+0x18/0x1a0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? locks_remove_file+0xec/0x470
             ? pvclock_read_flags+0x80/0x80
             ? fcntl_setlk+0x880/0x880
             ? ima_file_free+0x8d/0x390
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ima_file_check+0x110/0x110
             ? fsnotify+0xea0/0xea0
             ? kvm_sched_clock_read+0x1a/0x30
             ? rcu_note_context_switch+0x600/0x600
             perf_release+0x21/0x40
             __fput+0x264/0x620
             ? fput+0xf0/0xf0
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             ? SyS_fchdir+0x100/0x100
             ? fsnotify+0xea0/0xea0
             task_work_run+0x14b/0x1e0
             ? task_work_cancel+0x1c0/0x1c0
             ? copy_fd_bitmaps+0x150/0x150
             ? vfs_read+0xe5/0x260
             exit_to_usermode_loop+0x17b/0x1b0
             ? trace_event_raw_event_sys_exit+0x1a0/0x1a0
             do_syscall_64+0x3f6/0x490
             ? syscall_return_slowpath+0x2c0/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? syscall_return_slowpath+0x1a3/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? prepare_exit_to_usermode+0x11c/0x1e0
             ? enter_from_user_mode+0x30/0x30
            random: crng init done
             ? __put_user_4+0x1c/0x30
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
            RIP: 0033:0x7f41d95f9340
            RSP: 002b:00007fffe71e4268 EFLAGS: 00000246 ORIG_RAX: 0000000000000003
            RAX: 0000000000000000 RBX: 000000000000000d RCX: 00007f41d95f9340
            RDX: 0000000000000000 RSI: 0000000000002401 RDI: 000000000000000d
            RBP: 0000000000000000 R08: 00007f41ca8ff700 R09: 00007f41d996dd1f
            R10: 00007fffe71e41e0 R11: 0000000000000246 R12: 00007fffe71e4330
            R13: 0000000000000000 R14: fffffffffffffffc R15: 00007fffe71e4290
    
            Allocated by task 870:
             kasan_kmalloc+0xa0/0xd0
             kmem_cache_alloc_node+0x11a/0x430
             copy_process.part.19+0x11a0/0x41c0
             _do_fork+0x1be/0xa20
             do_syscall_64+0x198/0x490
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
            Freed by task 0:
             __kasan_slab_free+0x12e/0x180
             kmem_cache_free+0x102/0x4d0
             free_task+0xfe/0x160
             __put_task_struct+0x189/0x290
             delayed_put_task_struct+0x119/0x250
             rcu_process_callbacks+0xa6c/0x1b60
             __do_softirq+0x238/0x7ae
    
            The buggy address belongs to the object at ffff880384f9b480
             which belongs to the cache task_struct of size 12928
    
    It occurs because task_struct is freed before perf_event which refers
    to the task and task flags are checked while teardown of the event.
    perf_event_alloc() assigns task_struct to hw.target of perf_event,
    but there is no reference counting for it.
    
    As a fix we get_task_struct() in perf_event_alloc() at above mentioned
    assignment and put_task_struct() in _free_event().
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Reviewed-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 63b6da39bb38e8f1a1ef3180d32a39d6 ("perf: Fix perf_event_exit_task() race")
    Link: http://lkml.kernel.org/r/20180409100346.6416-1-bhole_prashant_q7@lab.ntt.co.jp
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab0ed342375f15e4316e7295e661125596b654ae
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Mon Apr 9 19:03:46 2018 +0900

    perf/core: Fix use-after-free in uprobe_perf_close()
    
    commit 621b6d2ea297d0fb6030452c5bcd221f12165fcf upstream.
    
    A use-after-free bug was caught by KASAN while running usdt related
    code (BCC project. bcc/tests/python/test_usdt2.py):
    
            ==================================================================
            BUG: KASAN: use-after-free in uprobe_perf_close+0x222/0x3b0
            Read of size 4 at addr ffff880384f9b4a4 by task test_usdt2.py/870
    
            CPU: 4 PID: 870 Comm: test_usdt2.py Tainted: G        W         4.16.0-next-20180409 #215
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
            Call Trace:
             dump_stack+0xc7/0x15b
             ? show_regs_print_info+0x5/0x5
             ? printk+0x9c/0xc3
             ? kmsg_dump_rewind_nolock+0x6e/0x6e
             ? uprobe_perf_close+0x222/0x3b0
             print_address_description+0x83/0x3a0
             ? uprobe_perf_close+0x222/0x3b0
             kasan_report+0x1dd/0x460
             ? uprobe_perf_close+0x222/0x3b0
             uprobe_perf_close+0x222/0x3b0
             ? probes_open+0x180/0x180
             ? free_filters_list+0x290/0x290
             trace_uprobe_register+0x1bb/0x500
             ? perf_event_attach_bpf_prog+0x310/0x310
             ? probe_event_disable+0x4e0/0x4e0
             perf_uprobe_destroy+0x63/0xd0
             _free_event+0x2bc/0xbd0
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ring_buffer_attach+0x550/0x550
             ? kvm_sched_clock_read+0x1a/0x30
             ? perf_event_release_kernel+0x3e4/0xc00
             ? __mutex_unlock_slowpath+0x12e/0x540
             ? wait_for_completion+0x430/0x430
             ? lock_downgrade+0x3c0/0x3c0
             ? lock_release+0x980/0x980
             ? do_raw_spin_trylock+0x118/0x150
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             perf_event_release_kernel+0x5d4/0xc00
             ? put_event+0x30/0x30
             ? fsnotify+0xd2d/0xea0
             ? sched_clock_cpu+0x18/0x1a0
             ? __fsnotify_update_child_dentry_flags.part.0+0x1b0/0x1b0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? pvclock_read_flags+0x80/0x80
             ? kvm_sched_clock_read+0x1a/0x30
             ? sched_clock_cpu+0x18/0x1a0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? locks_remove_file+0xec/0x470
             ? pvclock_read_flags+0x80/0x80
             ? fcntl_setlk+0x880/0x880
             ? ima_file_free+0x8d/0x390
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ima_file_check+0x110/0x110
             ? fsnotify+0xea0/0xea0
             ? kvm_sched_clock_read+0x1a/0x30
             ? rcu_note_context_switch+0x600/0x600
             perf_release+0x21/0x40
             __fput+0x264/0x620
             ? fput+0xf0/0xf0
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             ? SyS_fchdir+0x100/0x100
             ? fsnotify+0xea0/0xea0
             task_work_run+0x14b/0x1e0
             ? task_work_cancel+0x1c0/0x1c0
             ? copy_fd_bitmaps+0x150/0x150
             ? vfs_read+0xe5/0x260
             exit_to_usermode_loop+0x17b/0x1b0
             ? trace_event_raw_event_sys_exit+0x1a0/0x1a0
             do_syscall_64+0x3f6/0x490
             ? syscall_return_slowpath+0x2c0/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? syscall_return_slowpath+0x1a3/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? prepare_exit_to_usermode+0x11c/0x1e0
             ? enter_from_user_mode+0x30/0x30
            random: crng init done
             ? __put_user_4+0x1c/0x30
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
            RIP: 0033:0x7f41d95f9340
            RSP: 002b:00007fffe71e4268 EFLAGS: 00000246 ORIG_RAX: 0000000000000003
            RAX: 0000000000000000 RBX: 000000000000000d RCX: 00007f41d95f9340
            RDX: 0000000000000000 RSI: 0000000000002401 RDI: 000000000000000d
            RBP: 0000000000000000 R08: 00007f41ca8ff700 R09: 00007f41d996dd1f
            R10: 00007fffe71e41e0 R11: 0000000000000246 R12: 00007fffe71e4330
            R13: 0000000000000000 R14: fffffffffffffffc R15: 00007fffe71e4290
    
            Allocated by task 870:
             kasan_kmalloc+0xa0/0xd0
             kmem_cache_alloc_node+0x11a/0x430
             copy_process.part.19+0x11a0/0x41c0
             _do_fork+0x1be/0xa20
             do_syscall_64+0x198/0x490
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
            Freed by task 0:
             __kasan_slab_free+0x12e/0x180
             kmem_cache_free+0x102/0x4d0
             free_task+0xfe/0x160
             __put_task_struct+0x189/0x290
             delayed_put_task_struct+0x119/0x250
             rcu_process_callbacks+0xa6c/0x1b60
             __do_softirq+0x238/0x7ae
    
            The buggy address belongs to the object at ffff880384f9b480
             which belongs to the cache task_struct of size 12928
    
    It occurs because task_struct is freed before perf_event which refers
    to the task and task flags are checked while teardown of the event.
    perf_event_alloc() assigns task_struct to hw.target of perf_event,
    but there is no reference counting for it.
    
    As a fix we get_task_struct() in perf_event_alloc() at above mentioned
    assignment and put_task_struct() in _free_event().
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Reviewed-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 63b6da39bb38e8f1a1ef3180d32a39d6 ("perf: Fix perf_event_exit_task() race")
    Link: http://lkml.kernel.org/r/20180409100346.6416-1-bhole_prashant_q7@lab.ntt.co.jp
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 122a80f16ee6d8bb3cd4e3b81a9bf32cda2ba61d
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Mon Apr 9 19:03:46 2018 +0900

    perf/core: Fix use-after-free in uprobe_perf_close()
    
    commit 621b6d2ea297d0fb6030452c5bcd221f12165fcf upstream.
    
    A use-after-free bug was caught by KASAN while running usdt related
    code (BCC project. bcc/tests/python/test_usdt2.py):
    
            ==================================================================
            BUG: KASAN: use-after-free in uprobe_perf_close+0x222/0x3b0
            Read of size 4 at addr ffff880384f9b4a4 by task test_usdt2.py/870
    
            CPU: 4 PID: 870 Comm: test_usdt2.py Tainted: G        W         4.16.0-next-20180409 #215
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
            Call Trace:
             dump_stack+0xc7/0x15b
             ? show_regs_print_info+0x5/0x5
             ? printk+0x9c/0xc3
             ? kmsg_dump_rewind_nolock+0x6e/0x6e
             ? uprobe_perf_close+0x222/0x3b0
             print_address_description+0x83/0x3a0
             ? uprobe_perf_close+0x222/0x3b0
             kasan_report+0x1dd/0x460
             ? uprobe_perf_close+0x222/0x3b0
             uprobe_perf_close+0x222/0x3b0
             ? probes_open+0x180/0x180
             ? free_filters_list+0x290/0x290
             trace_uprobe_register+0x1bb/0x500
             ? perf_event_attach_bpf_prog+0x310/0x310
             ? probe_event_disable+0x4e0/0x4e0
             perf_uprobe_destroy+0x63/0xd0
             _free_event+0x2bc/0xbd0
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ring_buffer_attach+0x550/0x550
             ? kvm_sched_clock_read+0x1a/0x30
             ? perf_event_release_kernel+0x3e4/0xc00
             ? __mutex_unlock_slowpath+0x12e/0x540
             ? wait_for_completion+0x430/0x430
             ? lock_downgrade+0x3c0/0x3c0
             ? lock_release+0x980/0x980
             ? do_raw_spin_trylock+0x118/0x150
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             perf_event_release_kernel+0x5d4/0xc00
             ? put_event+0x30/0x30
             ? fsnotify+0xd2d/0xea0
             ? sched_clock_cpu+0x18/0x1a0
             ? __fsnotify_update_child_dentry_flags.part.0+0x1b0/0x1b0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? pvclock_read_flags+0x80/0x80
             ? kvm_sched_clock_read+0x1a/0x30
             ? sched_clock_cpu+0x18/0x1a0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? locks_remove_file+0xec/0x470
             ? pvclock_read_flags+0x80/0x80
             ? fcntl_setlk+0x880/0x880
             ? ima_file_free+0x8d/0x390
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ima_file_check+0x110/0x110
             ? fsnotify+0xea0/0xea0
             ? kvm_sched_clock_read+0x1a/0x30
             ? rcu_note_context_switch+0x600/0x600
             perf_release+0x21/0x40
             __fput+0x264/0x620
             ? fput+0xf0/0xf0
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             ? SyS_fchdir+0x100/0x100
             ? fsnotify+0xea0/0xea0
             task_work_run+0x14b/0x1e0
             ? task_work_cancel+0x1c0/0x1c0
             ? copy_fd_bitmaps+0x150/0x150
             ? vfs_read+0xe5/0x260
             exit_to_usermode_loop+0x17b/0x1b0
             ? trace_event_raw_event_sys_exit+0x1a0/0x1a0
             do_syscall_64+0x3f6/0x490
             ? syscall_return_slowpath+0x2c0/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? syscall_return_slowpath+0x1a3/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? prepare_exit_to_usermode+0x11c/0x1e0
             ? enter_from_user_mode+0x30/0x30
            random: crng init done
             ? __put_user_4+0x1c/0x30
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
            RIP: 0033:0x7f41d95f9340
            RSP: 002b:00007fffe71e4268 EFLAGS: 00000246 ORIG_RAX: 0000000000000003
            RAX: 0000000000000000 RBX: 000000000000000d RCX: 00007f41d95f9340
            RDX: 0000000000000000 RSI: 0000000000002401 RDI: 000000000000000d
            RBP: 0000000000000000 R08: 00007f41ca8ff700 R09: 00007f41d996dd1f
            R10: 00007fffe71e41e0 R11: 0000000000000246 R12: 00007fffe71e4330
            R13: 0000000000000000 R14: fffffffffffffffc R15: 00007fffe71e4290
    
            Allocated by task 870:
             kasan_kmalloc+0xa0/0xd0
             kmem_cache_alloc_node+0x11a/0x430
             copy_process.part.19+0x11a0/0x41c0
             _do_fork+0x1be/0xa20
             do_syscall_64+0x198/0x490
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
            Freed by task 0:
             __kasan_slab_free+0x12e/0x180
             kmem_cache_free+0x102/0x4d0
             free_task+0xfe/0x160
             __put_task_struct+0x189/0x290
             delayed_put_task_struct+0x119/0x250
             rcu_process_callbacks+0xa6c/0x1b60
             __do_softirq+0x238/0x7ae
    
            The buggy address belongs to the object at ffff880384f9b480
             which belongs to the cache task_struct of size 12928
    
    It occurs because task_struct is freed before perf_event which refers
    to the task and task flags are checked while teardown of the event.
    perf_event_alloc() assigns task_struct to hw.target of perf_event,
    but there is no reference counting for it.
    
    As a fix we get_task_struct() in perf_event_alloc() at above mentioned
    assignment and put_task_struct() in _free_event().
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Reviewed-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 63b6da39bb38e8f1a1ef3180d32a39d6 ("perf: Fix perf_event_exit_task() race")
    Link: http://lkml.kernel.org/r/20180409100346.6416-1-bhole_prashant_q7@lab.ntt.co.jp
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d95c8844399885cd511c6f6395621cc1a9fe2e68
Merge: e6d9bfdeb439 90c7c0c24e22
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 16 12:44:03 2018 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull missed timer updates from Thomas Gleixner:
     "This is a branch which got forgotten during the merge window, but it
      contains only fixes and hardware enablement. No fundamental changes.
    
       - Various fixes for the imx-tpm clocksource driver
    
       - A new timer driver for the NCPM7xx SoC family"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/imx-tpm: Add different counter width support
      clocksource/drivers/imx-tpm: Correct some registers operation flow
      clocksource/drivers/imx-tpm: Fix typo of clock name
      dt-bindings: timer: tpm: fix typo of clock name
      clocksource/drivers/npcm: Add NPCM7xx timer driver
      dt-binding: timer: document NPCM7xx timer DT bindings

commit 4b88cb3a385b0d9fa013b6a7dfb85bea56fc1fa8
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Apr 13 14:56:44 2017 +0200

    x86/tsc: Provide 'tsc=unstable' boot parameter
    
    
    [ Upstream commit 8309f86cd41e8714526867177facf7a316d9be53 ]
    
    Since the clocksource watchdog will only detect broken TSC after the
    fact, all TSC based clocks will likely have observed non-continuous
    values before/when switching away from TSC.
    
    Therefore only thing to fully avoid random clock movement when your
    BIOS randomly mucks with TSC values from SMI handlers is reporting the
    TSC as unstable at boot.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6851e22a8b476270099ec4db914e2209ea60e56b
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Apr 13 14:56:44 2017 +0200

    x86/tsc: Provide 'tsc=unstable' boot parameter
    
    
    [ Upstream commit 8309f86cd41e8714526867177facf7a316d9be53 ]
    
    Since the clocksource watchdog will only detect broken TSC after the
    fact, all TSC based clocks will likely have observed non-continuous
    values before/when switching away from TSC.
    
    Therefore only thing to fully avoid random clock movement when your
    BIOS randomly mucks with TSC values from SMI handlers is reporting the
    TSC as unstable at boot.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4f8fbce84e2a0c6df3bfafc7bae7be59846c4b8
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Apr 13 14:56:44 2017 +0200

    x86/tsc: Provide 'tsc=unstable' boot parameter
    
    
    [ Upstream commit 8309f86cd41e8714526867177facf7a316d9be53 ]
    
    Since the clocksource watchdog will only detect broken TSC after the
    fact, all TSC based clocks will likely have observed non-continuous
    values before/when switching away from TSC.
    
    Therefore only thing to fully avoid random clock movement when your
    BIOS randomly mucks with TSC values from SMI handlers is reporting the
    TSC as unstable at boot.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 621b6d2ea297d0fb6030452c5bcd221f12165fcf
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Mon Apr 9 19:03:46 2018 +0900

    perf/core: Fix use-after-free in uprobe_perf_close()
    
    A use-after-free bug was caught by KASAN while running usdt related
    code (BCC project. bcc/tests/python/test_usdt2.py):
    
            ==================================================================
            BUG: KASAN: use-after-free in uprobe_perf_close+0x222/0x3b0
            Read of size 4 at addr ffff880384f9b4a4 by task test_usdt2.py/870
    
            CPU: 4 PID: 870 Comm: test_usdt2.py Tainted: G        W         4.16.0-next-20180409 #215
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
            Call Trace:
             dump_stack+0xc7/0x15b
             ? show_regs_print_info+0x5/0x5
             ? printk+0x9c/0xc3
             ? kmsg_dump_rewind_nolock+0x6e/0x6e
             ? uprobe_perf_close+0x222/0x3b0
             print_address_description+0x83/0x3a0
             ? uprobe_perf_close+0x222/0x3b0
             kasan_report+0x1dd/0x460
             ? uprobe_perf_close+0x222/0x3b0
             uprobe_perf_close+0x222/0x3b0
             ? probes_open+0x180/0x180
             ? free_filters_list+0x290/0x290
             trace_uprobe_register+0x1bb/0x500
             ? perf_event_attach_bpf_prog+0x310/0x310
             ? probe_event_disable+0x4e0/0x4e0
             perf_uprobe_destroy+0x63/0xd0
             _free_event+0x2bc/0xbd0
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ring_buffer_attach+0x550/0x550
             ? kvm_sched_clock_read+0x1a/0x30
             ? perf_event_release_kernel+0x3e4/0xc00
             ? __mutex_unlock_slowpath+0x12e/0x540
             ? wait_for_completion+0x430/0x430
             ? lock_downgrade+0x3c0/0x3c0
             ? lock_release+0x980/0x980
             ? do_raw_spin_trylock+0x118/0x150
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             perf_event_release_kernel+0x5d4/0xc00
             ? put_event+0x30/0x30
             ? fsnotify+0xd2d/0xea0
             ? sched_clock_cpu+0x18/0x1a0
             ? __fsnotify_update_child_dentry_flags.part.0+0x1b0/0x1b0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? pvclock_read_flags+0x80/0x80
             ? kvm_sched_clock_read+0x1a/0x30
             ? sched_clock_cpu+0x18/0x1a0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? locks_remove_file+0xec/0x470
             ? pvclock_read_flags+0x80/0x80
             ? fcntl_setlk+0x880/0x880
             ? ima_file_free+0x8d/0x390
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ima_file_check+0x110/0x110
             ? fsnotify+0xea0/0xea0
             ? kvm_sched_clock_read+0x1a/0x30
             ? rcu_note_context_switch+0x600/0x600
             perf_release+0x21/0x40
             __fput+0x264/0x620
             ? fput+0xf0/0xf0
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             ? SyS_fchdir+0x100/0x100
             ? fsnotify+0xea0/0xea0
             task_work_run+0x14b/0x1e0
             ? task_work_cancel+0x1c0/0x1c0
             ? copy_fd_bitmaps+0x150/0x150
             ? vfs_read+0xe5/0x260
             exit_to_usermode_loop+0x17b/0x1b0
             ? trace_event_raw_event_sys_exit+0x1a0/0x1a0
             do_syscall_64+0x3f6/0x490
             ? syscall_return_slowpath+0x2c0/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? syscall_return_slowpath+0x1a3/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? prepare_exit_to_usermode+0x11c/0x1e0
             ? enter_from_user_mode+0x30/0x30
            random: crng init done
             ? __put_user_4+0x1c/0x30
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
            RIP: 0033:0x7f41d95f9340
            RSP: 002b:00007fffe71e4268 EFLAGS: 00000246 ORIG_RAX: 0000000000000003
            RAX: 0000000000000000 RBX: 000000000000000d RCX: 00007f41d95f9340
            RDX: 0000000000000000 RSI: 0000000000002401 RDI: 000000000000000d
            RBP: 0000000000000000 R08: 00007f41ca8ff700 R09: 00007f41d996dd1f
            R10: 00007fffe71e41e0 R11: 0000000000000246 R12: 00007fffe71e4330
            R13: 0000000000000000 R14: fffffffffffffffc R15: 00007fffe71e4290
    
            Allocated by task 870:
             kasan_kmalloc+0xa0/0xd0
             kmem_cache_alloc_node+0x11a/0x430
             copy_process.part.19+0x11a0/0x41c0
             _do_fork+0x1be/0xa20
             do_syscall_64+0x198/0x490
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
            Freed by task 0:
             __kasan_slab_free+0x12e/0x180
             kmem_cache_free+0x102/0x4d0
             free_task+0xfe/0x160
             __put_task_struct+0x189/0x290
             delayed_put_task_struct+0x119/0x250
             rcu_process_callbacks+0xa6c/0x1b60
             __do_softirq+0x238/0x7ae
    
            The buggy address belongs to the object at ffff880384f9b480
             which belongs to the cache task_struct of size 12928
    
    It occurs because task_struct is freed before perf_event which refers
    to the task and task flags are checked while teardown of the event.
    perf_event_alloc() assigns task_struct to hw.target of perf_event,
    but there is no reference counting for it.
    
    As a fix we get_task_struct() in perf_event_alloc() at above mentioned
    assignment and put_task_struct() in _free_event().
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Reviewed-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 63b6da39bb38e8f1a1ef3180d32a39d6 ("perf: Fix perf_event_exit_task() race")
    Link: http://lkml.kernel.org/r/20180409100346.6416-1-bhole_prashant_q7@lab.ntt.co.jp
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 680014d6d1da84e9c7860831221ec74230721907
Merge: 0c21fd6e6593 bd03143007eb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 4 14:50:29 2018 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull time(r) updates from Thomas Gleixner:
     "A small set of updates for timers and timekeeping:
    
       - The most interesting change is the consolidation of clock MONOTONIC
         and clock BOOTTIME.
    
         Clock MONOTONIC behaves now exactly like clock BOOTTIME and does
         not longer ignore the time spent in suspend. A new clock
         MONOTONIC_ACTIVE is provived which behaves like clock MONOTONIC in
         kernels before this change. This allows applications to
         programmatically check for the clock MONOTONIC behaviour.
    
         As discussed in the review thread, this has the potential of
         breaking user space and we might have to revert this. Knock on wood
         that we can avoid that exercise.
    
       - Updates to the NTP mechanism to improve accuracy
    
       - A new kernel internal data structure to aid the ongoing Y2038 work.
    
       - Cleanups and simplifications of the clocksource code.
    
       - Make the alarmtimer code play nicely with debugobjects"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      alarmtimer: Init nanosleep alarm timer on stack
      y2038: Introduce struct __kernel_old_timeval
      tracing: Unify the "boot" and "mono" tracing clocks
      hrtimer: Unify MONOTONIC and BOOTTIME clock behavior
      posix-timers: Unify MONOTONIC and BOOTTIME clock behavior
      timekeeping: Remove boot time specific code
      Input: Evdev - unify MONOTONIC and BOOTTIME clock behavior
      timekeeping: Make the MONOTONIC clock behave like the BOOTTIME clock
      timekeeping: Add the new CLOCK_MONOTONIC_ACTIVE clock
      timekeeping/ntp: Determine the multiplier directly from NTP tick length
      timekeeping/ntp: Don't align NTP frequency adjustments to ticks
      clocksource: Use ATTRIBUTE_GROUPS
      clocksource: Use DEVICE_ATTR_RW/RO/WO to define device attributes
      clocksource: Don't walk the clocksource list for empty override

commit c9297d284126b80c9cfd72c690e0da531c99fc48
Merge: 17e3cd222af1 6fc61ee69433
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 2 19:41:08 2018 -0700

    Merge tag 'nds32-for-linus-4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/greentime/linux
    
    Pull nds32 architecture support from Greentime Hu:
     "This contains the core nds32 Linux port (including interrupt
      controller driver and timer driver), which has been through seven
      rounds of review on mailing list.
    
      It is able to boot to shell and passes most LTP-2017 testsuites in
      nds32 AE3XX platform:
    
        Total Tests: 1901
        Total Skipped Tests: 618
        Total Failures: 78"
    
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    
    * tag 'nds32-for-linus-4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/greentime/linux: (44 commits)
      nds32: To use the generic dump_stack()
      nds32: fix building failed if using elf toolchain.
      nios2: add ioremap_nocache declaration before include asm-generic/io.h.
      nds32: fix building failed if using older version gcc.
      dt-bindings: timer: Add andestech atcpit100 timer binding doc
      clocksource/drivers/atcpit100: VDSO support
      clocksource/drivers/atcpit100: Add andestech atcpit100 timer
      net: faraday add nds32 support.
      irqchip: Andestech Internal Vector Interrupt Controller driver
      dt-bindings: interrupt-controller: Andestech Internal Vector Interrupt Controller
      dt-bindings: nds32 SoC Bindings
      dt-bindings: nds32 L2 cache controller Bindings
      dt-bindings: nds32 CPU Bindings
      MAINTAINERS: Add nds32
      nds32: Build infrastructure
      nds32: defconfig
      nds32: Miscellaneous header files
      nds32: Device tree support
      nds32: Generic timers support
      nds32: Loadable modules
      ...

commit 0136c741ff40e03323419feec05fcd594f36a463
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Wed Mar 28 11:22:38 2018 +0800

    clocksource/drivers/imx-tpm: Add different counter width support
    
    Different TPM modules have different width counters which is 16-bit or 32-bit,
    the counter width can be read from TPM_PARAM register bit[23:16], this patch
    adds dynamic check for counter width to support both 16-bit and 32-bit TPM
    modules.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 506a7be93ff773d5d4cf75a59f342865605b4910
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Wed Mar 28 11:22:37 2018 +0800

    clocksource/drivers/imx-tpm: Correct some registers operation flow
    
    According to i.MX7ULP reference manual, TPM_SC_CPWMS can ONLY be written when
    counter is disabled, TPM_SC_TOF is write-1-clear, TPM_C0SC_CHF is also
    write-1-clear, correct these registers initialization flow;
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 16328e7bd428937f557a984d8b3378387c17a930
Author: Anson Huang <Anson.Huang@nxp.com>
Date:   Wed Mar 28 11:22:36 2018 +0800

    clocksource/drivers/imx-tpm: Fix typo of clock name
    
    The clock name should be ipg instead of igp.
    
    Signed-off-by: Anson Huang <Anson.Huang@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 1c00289ecd12471ba9733e61aaf1d39883a77b16
Author: Tomer Maimon <tmaimon77@gmail.com>
Date:   Thu Mar 8 17:24:58 2018 +0200

    clocksource/drivers/npcm: Add NPCM7xx timer driver
    
    Add Nuvoton BMC NPCM7xx timer driver.
    
    The clocksource Enable 24-bit TIMER0 and TIMER1 counters,
    while TIMER0 serve as clockevent and TIMER1 serve as clocksource.
    
    Signed-off-by: Tomer Maimon <tmaimon77@gmail.com>
    Reviewed-by: Brendan Higgins <brendanhiggins@xxxxxxxxxx>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a2e164e7f45ab21742b2e32c0195b699ae2ebfc0
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Thu Mar 1 15:15:12 2018 +0100

    x86/kvm/hyper-v: add reenlightenment MSRs support
    
    Nested Hyper-V/Windows guest running on top of KVM will use TSC page
    clocksource in two cases:
    - L0 exposes invariant TSC (CPUID.80000007H:EDX[8]).
    - L0 provides Hyper-V Reenlightenment support (CPUID.40000003H:EAX[13]).
    
    Exposing invariant TSC effectively blocks migration to hosts with different
    TSC frequencies, providing reenlightenment support will be needed when we
    start migrating nested workloads.
    
    Implement rudimentary support for reenlightenment MSRs. For now, these are
    just read/write MSRs with no effect.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Reviewed-by: Roman Kagan <rkagan@virtuozzo.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>

commit 1ad5daa65395740d80aa7b2ac11887791142e018
Merge: ebb3762e8867 bd2746f09e1d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Mar 11 14:55:15 2018 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Thomas Gleixner:
     "Just a single fix which adds a missing Kconfig dependency to avoid
      unmet dependency warnings"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/atmel-st: Add 'depends on HAS_IOMEM' to fix unmet dependency

commit 654c39c7982c5314748eda50352dbc35099a2595
Merge: af40ff687bc9 8dc12538dd14
Author: Will Deacon <will.deacon@arm.com>
Date:   Fri Mar 9 15:28:43 2018 +0000

    Merge tag 'acpi/iort-for-v4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/lpieralisi/linux into aarch64/for-next/core
    
    Three ACPI IORT clean-up patches aimed at v4.17 release cycle:
    
    - Removal of IORT linker script entry re-introduced by mistake by clocksource
      drivers refactoring (J.He)
    - Two ACPICA guards removal of previously introduced guards to prevent
      ACPICA<->kernel patches dependencies (L.Pieralisi)

commit bd2746f09e1d8e37164f53b846f5225f3d36ee2d
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Tue Mar 6 20:20:33 2018 +0900

    clocksource/atmel-st: Add 'depends on HAS_IOMEM' to fix unmet dependency
    
    The ATMEL_ST config selects MFD_SYSCON, but does not depend on HAS_IOMEM.
    
    Compile testing on architecture without HAS_IOMEM causes "unmet direct
    dependencies" in Kconfig phase. Detected by "make ARCH=score allyesconfig".
    
    Add the proper dependency to the ATMEL_ST config.
    
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Link: https://lkml.kernel.org/r/1520335233-11277-1-git-send-email-yamada.masahiro@socionext.com

commit c38d08526bc9cadfc64065afd219090a8df97f48
Author: Jia He <jia.he@hxt-semitech.com>
Date:   Tue Feb 6 20:11:34 2018 -0800

    ACPI/IORT: Remove linker section for IORT entries again
    
    In commit 316ca8804ea8 ("ACPI/IORT: Remove linker section for IORT entries
    probing"), iort entries was removed in vmlinux.lds.h. But in
    commit 2fcc112af37f ("clocksource/drivers: Rename clksrc table to timer"),
    this line was back incorrectly.
    
    It does no harm except for adding some useless symbols, so fix it.
    
    Signed-off-by: Jia He <jia.he@hxt-semitech.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b67aea2bbab780e412b8af3386cc9f78f61a4cac
Merge: 661e50bc8532 8d06c3302635
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Mar 7 22:18:39 2018 +0100

    Merge tag 'metag_remove_2' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/jhogan/metag into asm-generic
    
    Remove metag architecture
    
    These patches remove the metag architecture and tightly dependent
    drivers from the kernel. With the 4.16 kernel the ancient gcc 4.2.4
    based metag toolchain we have been using is hitting compiler bugs, so
    now seems a good time to drop it altogether.
    
    * tag 'metag_remove_2' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/jhogan/metag:
      i2c: img-scb: Drop METAG dependency
      media: img-ir: Drop METAG dependency
      watchdog: imgpdc: Drop METAG dependency
      MAINTAINERS/CREDITS: Drop METAG ARCHITECTURE
      tty: Remove metag DA TTY and console driver
      clocksource: Remove metag generic timer driver
      irqchip: Remove metag irqchip drivers
      Drop a bunch of metag references
      docs: Remove remaining references to metag
      docs: Remove metag docs
      metag: Remove arch/metag/
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 6f566c4f304de8a90d520f7ca1925b4ea7dc3581
Merge: 7b80bd29482e 58a54f03e73d
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Mar 7 16:16:07 2018 +0100

    Merge tag 'omap-for-v4.17/timer-signed' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into next/soc
    
    Pull "Move omap timer to drivers for 4.17" from Tony Lindgren:
    
    This series from Keerthy and Ladislav Michl move omap dmtimer code
    to drivers. As we don't want to export custom timer functions to
    random drivers, we also need to update the related PWM driver to
    pass the timer specific functions in platform data.
    
    Note that this series is based on a merge of omap1 specific timer
    fix and omap2+ platform data clean-up to keep things working and
    make the move a bit simpler.
    
    * tag 'omap-for-v4.17/timer-signed' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      clocksource: timer-ti-dm: Check prescaler value
      clocksource: timer-ti-dm: Consolidate set source
      clocksource: timer-ti-dm: Make unexported functions static
      ARM: OMAP: pdata-quirks: Remove unused timer pdata
      pwm: pwm-omap-dmtimer: Adapt driver to utilize dmtimer pdata ops
      clocksource: timer-ti-dm: Hook device platform data if not already assigned
      clocksource: timer-ti-dm: Populate the timer ops to the pdata
      clocksource: timer-ti-dm: Add timer ops to the platform data structure
      ARM: OMAP: Move dmtimer driver out of plat-omap to drivers under clocksource
      clocksource: timer-ti-dm: Replace architecture
      ARM: OMAP: Move dmtimer.h out of plat-omap
      ARM: OMAP: timer: Wrap the inline functions under OMAP2PLUS define
      ARM: OMAP: dmtimer: Remove all the exports
      ARM: OMAP: Fix dmtimer init for omap1

commit 4c4ce3022dc7352d05de4d8e1602c9a2a14458bf
Merge: ff8d58362114 c52232a49e20
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Mar 4 11:34:49 2018 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A small set of fixes from the timer departement:
    
       - Add a missing timer wheel clock forward when migrating timers off a
         unplugged CPU to prevent operating on a stale clock base and
         missing timer deadlines.
    
       - Use the proper shift count to extract data from a register value to
         prevent evaluating unrelated bits
    
       - Make the error return check in the FSL timer driver work correctly.
         Checking an unsigned variable for less than zero does not really
         work well.
    
       - Clarify the confusing comments in the ARC timer code"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      timers: Forward timer base before migrating timers
      clocksource/drivers/arc_timer: Update some comments
      clocksource/drivers/mips-gic-timer: Use correct shift count to extract data
      clocksource/drivers/fsl_ftm_timer: Fix error return checking

commit 58a54f03e73d67432216931854363e4ba15839b9
Author: Ladislav Michl <ladis@linux-mips.org>
Date:   Fri Feb 23 11:15:01 2018 +0100

    clocksource: timer-ti-dm: Check prescaler value
    
    Invalid value silently disables use of the prescaler.
    Use -1 explicitely for that purpose and error out on
    invalid value.
    
    Signed-off-by: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit ad6e4b6fdc99ebbd520d2faf3c6d48198c74a99b
Author: Ladislav Michl <ladis@linux-mips.org>
Date:   Fri Feb 23 11:14:22 2018 +0100

    clocksource: timer-ti-dm: Consolidate set source
    
    Reorder omap_dm_timer_set_source internals to get
    source verification more straightforward.
    
    Signed-off-by: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 592ea6bd1fad6068fb7d813d36cfd832313f4421
Author: Ladislav Michl <ladis@linux-mips.org>
Date:   Wed Feb 28 08:25:19 2018 +0100

    clocksource: timer-ti-dm: Make unexported functions static
    
    As dmtimer no longer exports functions, make those previously
    exported static (this requires few functions to be moved around
    as their prototypes were deleted).
    
    Signed-off-by: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 07423d00a2b2a71a97e4287d9262cb83c4c4c89f
Author: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
Date:   Fri Feb 23 19:41:52 2018 +0300

    ARC: mcip: halt GFRC counter when ARC cores halt
    
    In SMP systems, GFRC is used for clocksource. However by default the
    counter keeps running even when core is halted (say when debugging via a
    JTAG debugger). This confuses Linux timekeeping and triggers flase RCU stall
    splat such as below:
    
    | [ARCLinux]# while true; do ./shm_open_23-1.run-test ; done
    | Running with 1000 processes for 1000 objects
    | hrtimer: interrupt took 485060 ns
    |
    | create_cnt: 1000
    | Running with 1000 processes for 1000 objects
    | [ARCLinux]# INFO: rcu_preempt self-detected stall on CPU
    |       2-...: (1 GPs behind) idle=a01/1/0 softirq=135770/135773 fqs=0
    | INFO: rcu_preempt detected stalls on CPUs/tasks:
    |       0-...: (1 GPs behind) idle=71e/0/0 softirq=135264/135264 fqs=0
    |       2-...: (1 GPs behind) idle=a01/1/0 softirq=135770/135773 fqs=0
    |       3-...: (1 GPs behind) idle=4e0/0/0 softirq=134304/134304 fqs=0
    |       (detected by 1, t=13648 jiffies, g=31493, c=31492, q=1)
    
    Starting from ARC HS v3.0 it's possible to tie GFRC to state of up-to 4
    ARC cores with help of GFRC's CORE register where we set a mask for
    cores which state we need to rely on.
    
    We update cpu mask every time new cpu came online instead of using
    hardcoded one or using mask generated from "possible_cpus" as we
    want it set correctly even if we run kernel on HW which has fewer cores
    than expected (or we launch kernel via debugger and kick fever cores
    than HW has)
    
    Note that GFRC halts when all cores have halted and thus relies on
    programming of Inter-Core-dEbug register to halt all cores when one
    halts.
    
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Signed-off-by: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    [vgupta: rewrote changelog]

commit 27263e8dc0f6fe27540a843611ec14a000591c41
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Wed Jan 17 14:01:30 2018 +0800

    clocksource: Use ATTRIBUTE_GROUPS
    
    Use ATTRIBUTE_GROUPS instead of manually creating the individual device
    files.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: arnd@arndb.de
    Cc: sboyd@codeaurora.org
    Cc: broonie@kernel.org
    Cc: john.stultz@linaro.org
    Link: https://lkml.kernel.org/r/d80dccb981dc2461781ebb8d71a32ccdc1b0e6f9.1516167691.git.baolin.wang@linaro.org

commit e87821d18cf4db19d634a04061c0a1b7eb9c0e65
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Wed Jan 17 14:01:29 2018 +0800

    clocksource: Use DEVICE_ATTR_RW/RO/WO to define device attributes
    
    Convert DEVICE_ATTR to DEVICE_ATTR_RW/RO/WO which is the preferred and
    simpler way of implementation.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: arnd@arndb.de
    Cc: sboyd@codeaurora.org
    Cc: broonie@kernel.org
    Cc: john.stultz@linaro.org
    Link: https://lkml.kernel.org/r/8f35c77e753e957b61187e8e7b2e4a3d61e4a72b.1516167691.git.baolin.wang@linaro.org

commit 7f852afe448c95691ead6b57bae5f37562d060b5
Author: Baolin Wang <baolin.wang@linaro.org>
Date:   Wed Jan 17 14:01:28 2018 +0800

    clocksource: Don't walk the clocksource list for empty override
    
    If the override clocksource name is empty there is no point in walking the
    clocksource list for a match.
    
    Signed-off-by: Baolin Wang <baolin.wang@linaro.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: arnd@arndb.de
    Cc: sboyd@codeaurora.org
    Cc: broonie@kernel.org
    Cc: john.stultz@linaro.org
    Link: https://lkml.kernel.org/r/069ce2a605546bcad6552968cff755f0a03f9f10.1516167691.git.baolin.wang@linaro.org

commit a4f538573cd72e7961f4ec5eb13c171f5add58ec
Author: Vineet Gupta <Vineet.Gupta1@synopsys.com>
Date:   Wed Feb 21 11:31:31 2018 -0800

    clocksource/drivers/arc_timer: Update some comments
    
    TIMER0 interrupt ACK is different for ARC700 and HS3x cores.
    
    This came to light in some internal discussions and it is nice to have this
    documented rather than digging up the PRM (Programmers Reference Manual).
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Vineet Gupta <Vineet.Gupta1@synopsys.com>
    Cc: linux-snps-arc@lists.infradead.org
    Link: https://lkml.kernel.org/r/1519241491-12570-1-git-send-email-vgupta@synopsys.com

commit 5753405e27f8fe4c42c1537d3ddbd9e058e54cdc
Author: Felix Fietkau <nbd@nbd.name>
Date:   Wed Feb 28 10:56:10 2018 +0100

    clocksource/drivers/mips-gic-timer: Use correct shift count to extract data
    
    __gic_clocksource_init() extracts the GIC_CONFIG_COUNTBITS field from
    read_gic_config() by right shifting the register value. The shift count is
    determined by the most significant bit (__fls) of the bitmask which is
    wrong as it shifts out the complete bitfield.
    
    Use the least significant bit (__ffs) instead to shift the bitfield down to
    bit 0.
    
    Fixes: e07127a077c7 ("clocksource: mips-gic-timer: Use new GIC accessor functions")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: daniel.lezcano@linaro.org
    Cc: paul.burton@imgtec.com
    Link: https://lkml.kernel.org/r/20180228095610.50341-1-nbd@nbd.name

commit f287eb9013ccf199cbfa4eabd80c36fedfc15a73
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Feb 26 11:36:14 2018 +0000

    clocksource/drivers/fsl_ftm_timer: Fix error return checking
    
    The error checks on freq for a negative error return always fails because
    freq is unsigned and can never be negative. Fix this by making freq a
    signed long.
    
    Detected with Coccinelle:
    drivers/clocksource/fsl_ftm_timer.c:287:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    drivers/clocksource/fsl_ftm_timer.c:291:5-9: WARNING: Unsigned expression
    compared with zero: freq <= 0
    
    Fixes: 2529c3a33079 ("clocksource: Add Freescale FlexTimer Module (FTM) timer support")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: kernel-janitors@vger.kernel.org
    Link: https://lkml.kernel.org/r/20180226113614.3092-1-colin.king@canonical.com

commit b79a732504ad2d6552458eaf72b4ed807da88340
Author: James Hogan <jhogan@kernel.org>
Date:   Wed Feb 21 15:42:32 2018 +0000

    clocksource: Remove metag generic timer driver
    
    Now that arch/metag/ has been removed, remove the metag generic
    per-thread timer driver. It is of no value without the architecture
    code.
    
    Signed-off-by: James Hogan <jhogan@kernel.org>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-metag@vger.kernel.org

commit 1a3acad26613fff7c7590ab32ff21f8c2a10fba9
Author: Ladislav Michl <ladis@linux-mips.org>
Date:   Thu Feb 15 11:31:49 2018 +0530

    clocksource: timer-ti-dm: Hook device platform data if not already assigned
    
    In the case of device tree boot the device platform data is usually
    NULL so hook the platform data obtained from the match.
    As part of un-constify the platform_data pointer.
    
    Signed-off-by: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 76234f7c074ca18c0bfe0b5a608973f9b43c7ebd
Author: Keerthy <j-keerthy@ti.com>
Date:   Thu Feb 15 11:31:48 2018 +0530

    clocksource: timer-ti-dm: Populate the timer ops to the pdata
    
    Add the timer ops to the platform data
    
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Tested-by: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit a7f249e33a44432de30d50f3c57868bc00a8f362
Author: Keerthy <j-keerthy@ti.com>
Date:   Thu Feb 15 11:31:47 2018 +0530

    clocksource: timer-ti-dm: Add timer ops to the platform data structure
    
    Add timer ops to the platform data structure
    
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Tested-by: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit af04aa856e932876e11e0c6d21d82281824e1b11
Author: Keerthy <j-keerthy@ti.com>
Date:   Thu Feb 15 11:31:46 2018 +0530

    ARM: OMAP: Move dmtimer driver out of plat-omap to drivers under clocksource
    
    Move the dmtimer driver out of plat-omap to clocksource.
    So that non-omap devices also could use this.
    
    No Code changes done to the driver file only renamed to timer-ti-dm.c.
    Also removed the config dependencies for OMAP_DM_TIMER.
    
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Tested-by: Ladislav Michl <ladis@linux-mips.org>
    [tony@atomide.com: add select omap_dm_timer for omap16xx]
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit f7bda9eec007ee3a200a31bfa6825e2612840f34
Author: Keerthy <j-keerthy@ti.com>
Date:   Thu Feb 15 11:31:45 2018 +0530

    clocksource: timer-ti-dm: Replace architecture
    
    Replace architecture specific guard with clocksource guard.
    
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit ea4625c3860ba002c83b1dffc528e1a4f0a89cf5
Author: Rick Chen <rickchen36@gmail.com>
Date:   Tue Dec 12 13:12:21 2017 +0800

    clocksource/drivers/atcpit100: VDSO support
    
    VDSO needs real-time cycle count to ensure the time accuracy.
    Unlike others, nds32 architecture does not define clock source,
    hence VDSO needs atcpit100 offering real-time cycle count
    to derive the correct time.
    
    Signed-off-by: Vincent Chen <vincentc@andestech.com>
    Signed-off-by: Rick Chen <rickchen36@gmail.com>
    Signed-off-by: Greentime Hu <green.hu@gmail.com>

commit 35dbb74aa752cff90e8dac1a24ed2a452aed0251
Author: Rick Chen <rickchen36@gmail.com>
Date:   Mon Dec 11 15:53:15 2017 +0800

    clocksource/drivers/atcpit100: Add andestech atcpit100 timer
    
    ATCPIT100 is often used on the Andes architecture,
    This timer provide 4 PIT channels. Each PIT channel is a
    multi-function timer, can be configured as 32,16,8 bit timers
    or PWM as well.
    
    For system timer it will set channel 1 32-bit timer0 as clock
    source and count downwards until underflow and restart again.
    
    It also set channel 0 32-bit timer0 as clock event and count
    downwards until condition match. It will generate an interrupt
    for handling periodically.
    
    Signed-off-by: Rick Chen <rickchen36@gmail.com>
    Signed-off-by: Greentime Hu <green.hu@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    
    Add andestech atcpit100 timer

commit 1bb09d05a41cbfcdc5cfe6ba953780e9bc63abcc
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:50 2018 +0100

    clocksource/drivers/stm32: Fix kernel panic with multiple timers
    
    commit e0aeca3d8cbaea514eb98df1149faa918f9ec42d upstream.
    
    The current code hides a couple of bugs:
    
     - The global variable 'clock_event_ddata' is overwritten each time the
       init function is invoked.
    
    This is fixed with a kmemdup() instead of assigning the global variable. That
    prevents a memory corruption when several timers are defined in the DT.
    
     - The clockevent's event_handler is NULL if the time framework does
       not select the clockevent when registering it, this is fine but the init
       code generates in any case an interrupt leading to dereference this
       NULL pointer.
    
    The stm32 timer works with shadow registers, a mechanism to cache the
    registers. When a change is done in one buffered register, we need to
    artificially generate an event to force the timer to copy the content
    of the register to the shadowed register.
    
    The auto-reload register (ARR) is one of the shadowed register as well as
    the prescaler register (PSC), so in order to force the copy, we issue an
    event which in turn leads to an interrupt and the NULL dereference.
    
    This is fixed by inverting two lines where we clear the status register
    before enabling the update event interrupt.
    
    As this kernel crash is resulting from the combination of these two bugs,
    the fixes are grouped into a single patch.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-11-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c87806a8e565e1253cad5072577b759f76f79fdb
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:50 2018 +0100

    clocksource/drivers/stm32: Fix kernel panic with multiple timers
    
    commit e0aeca3d8cbaea514eb98df1149faa918f9ec42d upstream.
    
    The current code hides a couple of bugs:
    
     - The global variable 'clock_event_ddata' is overwritten each time the
       init function is invoked.
    
    This is fixed with a kmemdup() instead of assigning the global variable. That
    prevents a memory corruption when several timers are defined in the DT.
    
     - The clockevent's event_handler is NULL if the time framework does
       not select the clockevent when registering it, this is fine but the init
       code generates in any case an interrupt leading to dereference this
       NULL pointer.
    
    The stm32 timer works with shadow registers, a mechanism to cache the
    registers. When a change is done in one buffered register, we need to
    artificially generate an event to force the timer to copy the content
    of the register to the shadowed register.
    
    The auto-reload register (ARR) is one of the shadowed register as well as
    the prescaler register (PSC), so in order to force the copy, we issue an
    event which in turn leads to an interrupt and the NULL dereference.
    
    This is fixed by inverting two lines where we clear the status register
    before enabling the update event interrupt.
    
    As this kernel crash is resulting from the combination of these two bugs,
    the fixes are grouped into a single patch.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-11-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a8ca66b3b26b6912aafeeb971a7b5645f02e43e
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:50 2018 +0100

    clocksource/drivers/stm32: Fix kernel panic with multiple timers
    
    commit e0aeca3d8cbaea514eb98df1149faa918f9ec42d upstream.
    
    The current code hides a couple of bugs:
    
     - The global variable 'clock_event_ddata' is overwritten each time the
       init function is invoked.
    
    This is fixed with a kmemdup() instead of assigning the global variable. That
    prevents a memory corruption when several timers are defined in the DT.
    
     - The clockevent's event_handler is NULL if the time framework does
       not select the clockevent when registering it, this is fine but the init
       code generates in any case an interrupt leading to dereference this
       NULL pointer.
    
    The stm32 timer works with shadow registers, a mechanism to cache the
    registers. When a change is done in one buffered register, we need to
    artificially generate an event to force the timer to copy the content
    of the register to the shadowed register.
    
    The auto-reload register (ARR) is one of the shadowed register as well as
    the prescaler register (PSC), so in order to force the copy, we issue an
    event which in turn leads to an interrupt and the NULL dereference.
    
    This is fixed by inverting two lines where we clear the status register
    before enabling the update event interrupt.
    
    As this kernel crash is resulting from the combination of these two bugs,
    the fixes are grouped into a single patch.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-11-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f74b0dbbfcf37abf719d2695308abf4946c5dc07
Author: Ingo Molnar <mingo@kernel.org>
Date:   Fri Dec 11 09:01:30 2015 +0100

    x86/platform/uv: Include clocksource.h for clocksource_touch_watchdog()
    
    commit d51953b0873358d13b189996e6976dfa12a9b59d upstream.
    
    This build failure triggers on 64-bit allmodconfig:
    
      arch/x86/platform/uv/uv_nmi.c:493:2: error: implicit declaration of function ‘clocksource_touch_watchdog’ [-Werror=implicit-function-declaration]
    
    which is caused by recent changes exposing a missing clocksource.h include
    in uv_nmi.c:
    
      cc1e24fdb064 x86/vdso: Remove pvclock fixmap machinery
    
    this file got clocksource.h indirectly via fixmap.h - that stealth route
    of header inclusion is now gone.
    
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 1f9d1311a3a98e8f5db509a4ff7bf84f7d6a4ca9
Author: Fabio Estevam <fabio.estevam@nxp.com>
Date:   Tue Jan 9 13:24:43 2018 -0200

    ARM: imx: Remove epit support
    
    Currently there is no user of EPIT, so remove such unused code.
    
    If someone wants to add EPIT support back, then the person needs to
    create a proper support into drivers/clocksource/ and add device
    tree support, proper bindings, etc.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@nxp.com>
    Acked-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

commit 2bed26606b61a7b20fc1cc54df53c48c06cd9aa8
Merge: eea43ed86f38 3a6fbcb2e2e4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Feb 1 10:57:45 2018 -0800

    Merge tag 'devicetree-for-4.16' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull DeviceTree updates from Rob Herring:
    
     - Convert to use memblock_virt_alloc in DT code which supports
       bootmem arches. With this we can remove the arch specific
       early_init_dt_alloc_memory_arch() functions.
    
     - Enable running the DT unittests on UML
    
     - Use SPDX license tags on DT files
    
     - Fix early FDT kconfig ifdef logic
    
     - Clean-up unittest Makefile
    
     - Fix function comment for of_irq_parse_raw
    
     - Add missing documentation for linux,initrd-{start,end} properties
    
     - Clean-up of binding examples using uppercase hex
    
     - Add trivial devices W83773G and Infineon TLV493D-A1B6
    
     - Add missing STM32 SoC bindings
    
     - Various small binding doc fixes
    
    * tag 'devicetree-for-4.16' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (23 commits)
      xtensa: remove arch specific early DT functions
      x86: remove arch specific early_init_dt_alloc_memory_arch
      nios2: remove arch specific early_init_dt_alloc_memory_arch
      mips: remove arch specific early_init_dt_alloc_memory_arch
      metag: remove arch specific early DT functions
      cris: remove arch specific early DT functions
      libfdt: remove unnecessary include directive from <linux/libfdt.h>
      of: unittest: refactor Makefile
      of/fdt: use memblock_virt_alloc for early alloc
      of: Use SPDX license tag for DT files
      of/fdt: Fix #ifdef dependency of early flattree declarations
      dt-bindings: h8300 clocksource: correct spelling of pulse
      dt-bindings: imx6q-pcie: Add required property for i.MX6SX
      mmc: Don't reference Linux-specific OF_GPIO_ACTIVE_LOW flag in DT binding
      dt-bindings: Use lower case hex in unit-addresses
      dt-bindings: display: panel: Fix compatible string for Toshiba LT089AC29000
      dt-bindings: Add Infineon TLV493D-A1B6
      dt-bindings: mailbox: ti,message-manager: Fix interrupt name error
      dt-bindings: chosen: Document linux,initrd-{start,end}
      dt-bindings: arm: document supported STM32 SoC family
      ...

commit b0c39dc68e3b3d22bf9d2984f62f6c86788a49e7
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Jan 24 14:23:36 2018 +0100

    x86/kvm: Pass stable clocksource to guests when running nested on Hyper-V
    
    Currently, KVM is able to work in 'masterclock' mode passing
    PVCLOCK_TSC_STABLE_BIT to guests when the clocksource which is used on the
    host is TSC.
    
    When running nested on Hyper-V the guest normally uses a different one: TSC
    page which is resistant to TSC frequency changes on events like L1
    migration. Add support for it in KVM.
    
    The only non-trivial change is in vgettsc(): when updating the gtod copy
    both the clock readout and tsc value have to be updated now.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: kvm@vger.kernel.org
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: "Michael Kelley (EOSG)" <Michael.H.Kelley@microsoft.com>
    Cc: Roman Kagan <rkagan@virtuozzo.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: devel@linuxdriverproject.org
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: Cathy Avery <cavery@redhat.com>
    Cc: Mohammed Gamal <mmorsy@redhat.com>
    Link: https://lkml.kernel.org/r/20180124132337.30138-7-vkuznets@redhat.com

commit 93286261de1b46339aa27cd4c639b21778f6cade
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Jan 24 14:23:33 2018 +0100

    x86/hyperv: Reenlightenment notifications support
    
    Hyper-V supports Live Migration notification. This is supposed to be used
    in conjunction with TSC emulation: when a VM is migrated to a host with
    different TSC frequency for some short period the host emulates the
    accesses to TSC and sends an interrupt to notify about the event. When the
    guest is done updating everything it can disable TSC emulation and
    everything will start working fast again.
    
    These notifications weren't required until now as Hyper-V guests are not
    supposed to use TSC as a clocksource: in Linux the TSC is even marked as
    unstable on boot. Guests normally use 'tsc page' clocksource and host
    updates its values on migrations automatically.
    
    Things change when with nested virtualization: even when the PV
    clocksources (kvm-clock or tsc page) are passed through to the nested
    guests the TSC frequency and frequency changes need to be know..
    
    Hyper-V Top Level Functional Specification (as of v5.0b) wrongly specifies
    EAX:BIT(12) of CPUID:0x40000009 as the feature identification bit. The
    right one to check is EAX:BIT(13) of CPUID:0x40000003. I was assured that
    the fix in on the way.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: kvm@vger.kernel.org
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: "Michael Kelley (EOSG)" <Michael.H.Kelley@microsoft.com>
    Cc: Roman Kagan <rkagan@virtuozzo.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: devel@linuxdriverproject.org
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: Cathy Avery <cavery@redhat.com>
    Cc: Mohammed Gamal <mmorsy@redhat.com>
    Link: https://lkml.kernel.org/r/20180124132337.30138-4-vkuznets@redhat.com

commit 36c289e72a63c3a4fbb14f84e220a2a75a5bf656
Merge: 669c0f762ed1 fe6daab1ee9d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 29 18:54:56 2018 -0800

    Merge branch 'x86-timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 timer updates from Thomas Gleixner:
     "A small set of updates for x86 specific timers:
    
       - Mark TSC invariant on a subset of Centaur CPUs
    
       - Allow TSC calibration without PIT on mobile platforms which lack
         legacy devices"
    
    * 'x86-timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/centaur: Mark TSC invariant
      x86/tsc: Introduce early tsc clocksource
      x86/time: Unconditionally register legacy timer interrupt
      x86/tsc: Allow TSC calibration without PIT

commit a46d3f9b1c9888a244ed1ce8da0eca98c3f378e2
Merge: 7bcd34259466 303c146df1c4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 29 16:50:58 2018 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The timer departement presents:
    
       - A rather large rework of the hrtimer infrastructure which
         introduces softirq based hrtimers to replace the spread of
         hrtimer/tasklet combos which force the actual callback execution
         into softirq context. The approach is completely different from the
         initial implementation which you cursed at 10 years ago rightfully.
    
         The softirq based timers have their own queues and there is no
         nasty indirection and list reshuffling in the hard interrupt
         anymore. This comes with conversion of some of the hrtimer/tasklet
         users, the rest and the final removal of that horrible interface
         will come towards the end of the merge window or go through the
         relevant maintainer trees.
    
         Note: The top commit merged the last minute bugfix for the 10 years
         old CPU hotplug bug as I wanted to make sure that I fatfinger the
         merge conflict resolution myself.
    
       - The overhaul of the STM32 clocksource/clockevents driver
    
       - A new driver for the Spreadtrum SC9860 timer
    
       - A new driver dor the Actions Semi S700 timer
    
       - The usual set of fixes and updates all over the place"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (53 commits)
      usb/gadget/NCM: Replace tasklet with softirq hrtimer
      ALSA/dummy: Replace tasklet with softirq hrtimer
      hrtimer: Implement SOFT/HARD clock base selection
      hrtimer: Implement support for softirq based hrtimers
      hrtimer: Prepare handling of hard and softirq based hrtimers
      hrtimer: Add clock bases and hrtimer mode for softirq context
      hrtimer: Use irqsave/irqrestore around __run_hrtimer()
      hrtimer: Factor out __hrtimer_next_event_base()
      hrtimer: Factor out __hrtimer_start_range_ns()
      hrtimer: Remove the 'base' parameter from hrtimer_reprogram()
      hrtimer: Make remote enqueue decision less restrictive
      hrtimer: Unify remote enqueue handling
      hrtimer: Unify hrtimer removal handling
      hrtimer: Make hrtimer_force_reprogramm() unconditionally available
      hrtimer: Make hrtimer_reprogramm() unconditional
      hrtimer: Make hrtimer_cpu_base.next_timer handling unconditional
      hrtimer: Make the remote enqueue check unconditional
      hrtimer: Use accesor functions instead of direct access
      hrtimer: Make the hrtimer_cpu_base::hres_active field unconditional, to simplify the code
      hrtimer: Make room in 'struct hrtimer_cpu_base'
      ...

commit 99d01e0ec3415424210fcd345ebb0c516e4b7fa9
Author: Joel Stanley <joel@jms.id.au>
Date:   Fri Dec 22 13:15:19 2017 +1030

    clk: aspeed: Register core clocks
    
    This registers the core clocks; those which are required to calculate
    the rate of the timer peripheral so the system can load a clocksource
    driver.
    
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Reviewed-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit 6909e29fdefbb7aa643021279daef6ed10c81528
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Oct 12 16:06:11 2017 +0200

    kdb: use __ktime_get_real_seconds instead of __current_kernel_time
    
    kdb is the only user of the __current_kernel_time() interface, which is
    not y2038 safe and should be removed at some point.
    
    The kdb code also goes to great lengths to print the time in a
    human-readable format from 'struct timespec', again using a non-y2038-safe
    re-implementation of the generic time_to_tm() code.
    
    Using __current_kernel_time() here is necessary since the regular
    accessors that require a sequence lock might hang when called during the
    xtime update. However, this is safe in the particular case since kdb is
    only interested in the tv_sec field that is updated atomically.
    
    In order to make this y2038-safe, I'm converting the code to the generic
    time64_to_tm helper, but that introduces the problem that we have no
    interface like __current_kernel_time() that provides a 64-bit timestamp
    in a lockless, safe and architecture-independent way. I have multiple
    ideas for how to solve that:
    
    - __ktime_get_real_seconds() is lockless, but can return
      incorrect results on 32-bit architectures in the special case that
      we are in the process of changing the time across the epoch, either
      during the timer tick that overflows the seconds in 2038, or while
      calling settimeofday.
    
    - ktime_get_real_fast_ns() would work in this context, but does
      require a call into the clocksource driver to return a high-resolution
      timestamp. This may have undesired side-effects in the debugger,
      since we want to limit the interactions with the rest of the kernel.
    
    - Adding a ktime_get_real_fast_seconds() based on tk_fast_mono
      plus tkr->base_real without the tk_clock_read() delta. Not sure about
      the value of adding yet another interface here.
    
    - Changing the existing ktime_get_real_seconds() to use
      tk_fast_mono on 32-bit architectures rather than xtime_sec.  I think
      this could work, but am not entirely sure if this is an improvement.
    
    I picked the first of those for simplicity here. It's technically
    not correct but probably good enough as the time is only used for the
    debugging output and the race will likely never be hit in practice.
    Another downside is having to move the declaration into a public header
    file.
    
    Let me know if anyone has a different preference.
    
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://patchwork.kernel.org/patch/9775309/
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Jason Wessel <jason.wessel@windriver.com>

commit 11f19ec025dd421c54978c69e42d86758fa310de
Author: Jan Kiszka <jan.kiszka@siemens.com>
Date:   Fri Jan 19 11:06:17 2018 +0100

    x86/jailhouse: Set X86_FEATURE_TSC_KNOWN_FREQ
    
    Otherwise, Linux will not recognize precalibrated_tsc_khz and disable
    the tsc as clocksource.
    
    Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jailhouse <jailhouse-dev@googlegroups.com>
    Link: https://lkml.kernel.org/r/975fbfc9-2a64-cc56-40d5-164992ec3916@siemens.com

commit 9be5f3e92ed5a4176bb4d99b498dc87aaafa622b
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Tue Jan 16 16:48:01 2018 +0100

    MIPS: ingenic: Initial JZ4770 support
    
    Provide just enough bits (clocks, clocksource, uart) to allow a kernel
    to boot on the JZ4770 SoC to a initramfs userspace.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Reviewed-by: PrasannaKumar Muralidharan <prasannatsmkumar@gmail.com>
    Reviewed-by: James Hogan <jhogan@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Maarten ter Huurne <maarten@treewalker.org>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/18487/
    Signed-off-by: James Hogan <jhogan@kernel.org>

commit aa83c45762a242acce9b35020363225a7b59d7c9
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Fri Dec 22 10:20:13 2017 +0100

    x86/tsc: Introduce early tsc clocksource
    
    Without TSC_KNOWN_FREQ the TSC clocksource is registered so late that the
    kernel first switches to the HPET. Using HPET on large CPU count machines is
    undesirable.
    
    Therefore register a tsc-early clocksource using the preliminary tsc_khz
    from quick calibration. Then when the final TSC calibration is done, it
    can switch to the tuned frequency.
    
    The only notably problem is that the real tsc clocksource must be marked
    with CLOCK_SOURCE_VALID_FOR_HRES, otherwise it will not be selected when
    unregistering tsc-early. tsc-early cannot be left registered, because then
    the clocksource code would fall back to it when we tsc clocksource is
    marked unstable later.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: len.brown@intel.com
    Cc: rui.zhang@intel.com
    Cc: Len Brown <lenb@kernel.org>
    Link: https://lkml.kernel.org/r/20171222092243.431585460@infradead.org

commit d1c48227d7c45fbb35c81f846a62ec92a74f4701
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Thu Jan 11 14:47:20 2018 +0800

    USB: serial: f81534: fix tx error on some baud rate
    
    The F81532/534 had 4 clocksource 1.846/18.46/14.77/24MHz and baud rates
    can be up to 1.5Mbits with 24MHz. But on some baud rate (384~500kps), the
    TX side will send the data frame too close to treat frame error on RX
    side. This patch will force all TX data frame with delay 1bit gap.
    
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>

commit 3aacac02f38543f7a0936fa1e844cd9564b04aaf
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Thu Jan 11 14:47:15 2018 +0800

    USB: serial: f81534: add high baud rate support
    
    The F81532/534 had 4 clocksource 1.846/18.46/14.77/24MHz and baud rates
    can be up to 1.5Mbits with 24MHz.
    
    This device may generate data overrun when baud rate setting to 921600bps
    or higher with old UART trigger level setting (8x14=112) with full
    loading. We'll change trigger level from 8x14=112 to 8x8=64 to avoid data
    overrun.
    
    Also the read/write of EP0 will be affected by this patch. The worst case
    of responding time is 20s when all serial port are full loading and trying
    to access EP0, so we change EP0 timeout from 10 to 20s.
    
    F81532/534 Clock register (offset +08h)
    
    Bit0:   UART Enable (always on)
    Bit2-1: Clock source selector
                            00: 1.846MHz.
                            01: 18.46MHz.
                            10: 24MHz.
                            11: 14.77MHz.
    
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    [ johan: only use GENMASK() for masks ]
    Signed-off-by: Johan Hovold <johan@kernel.org>

commit 103bb56a2831bfc7f2d442da9e47f89f37d34952
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:59 2018 +0100

    clocksource/drivers/stm32: Start the timer's counter sooner
    
    As we have a lot of timers on this platform, we can have potentially all the
    timers enabled in the DT, so we don't want to start the timer for every probe
    otherwise they will be running for nothing as only one will be used.
    
    Start the timer only when setting the mode or when the clocksource is
    enabled.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-20-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 81abdbbffd69fecdac37fe1d2b44a21227ee23d4
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:58 2018 +0100

    clocksource/drivers/stm32: Add the timer delay callback
    
    Add the timer delay callback, that saves us ~90ms of boot time.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-19-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit f5ef02bd0e8cf53472cc358a542121366add0c9a
Author: Benjamin Gaignard <benjamin.gaignard@st.com>
Date:   Mon Jan 8 14:28:57 2018 +0100

    clocksource/drivers/stm32: Add clocksource functionality
    
    The scene is set for the clocksource functionality, let's add it for this driver.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-18-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 3c84e75b1e5d8406e12b533d44f54ad84d6e3bd6
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:56 2018 +0100

    clocksource/drivers/stm32: Factor out more of the clockevent code
    
    In order to prepare the clocksource code, let's factor out the clockevent
    code, split the prescaler and timer width code into separate functions.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-17-git-send-email-daniel.lezcano@linaro.org
    [ Small edits. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 8e82df381b676ae5f6c93ab4a75f56d8f61babc4
Author: Benjamin Gaignard <benjamin.gaignard@st.com>
Date:   Mon Jan 8 14:28:55 2018 +0100

    clocksource/drivers/stm32: Add oneshot mode
    
    The stm32 timer block is able to have a counter and a comparator.
    
    Instead of using the auto-reload register for periodic events, we switch
    to oneshot mode by using the comparator register.
    
    The timer is able to generate an interrupt when the counter overflows but
    we don't want that as this counter will be use as a clocksource in the next
    patches. So it is disabled by the UDIS bit of the control register.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-16-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 4744daa10dcd3a1470fbeba4945fbf44dcb1b0d1
Author: Benjamin Gaignard <benjamin.gaignard@st.com>
Date:   Mon Jan 8 14:28:54 2018 +0100

    clocksource/drivers/stm32: Compute a prescaler value with a targeted rate
    
    The prescaler value is arbitrarily set to 1024 without any regard to the
    timer frequency. For 32-bit timers, there is no need to set a prescaler
    value as they wrap in an acceptable interval and give the opportunity to
    have precise timers on this platform. However, for 16-bit timers a prescaler
    value is needed if we don't want to wrap too often per second which is
    inefficient and adds more and more error margin. With a targeted clock
    of 10MHz, the 16 bits are precise enough whatever the timer frequency is
    as we will compute the prescaler.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-15-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 70c62cf910aeba7cb79f4ebc7e6c8edbb37a77f6
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:53 2018 +0100

    clocksource/drivers/stm32: Factor out the timer width sorting code
    
    In order to clarify and encapsulate the code for upcoming changes, move the
    timer width check into a function and add some documentation.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-14-git-send-email-daniel.lezcano@linaro.org
    [ Spelling fixes. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit f2ed8ef1cea41c7e7e5d52199db9c822951ab101
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:52 2018 +0100

    clocksource/drivers/stm32: Use the node name as timer name
    
    As there are different timers on the stm32, use the node name for the timer
    name in order to give the indication of which timer the kernel is using.
    
    /proc/timer_list gives all the information with the right name, otherwise
    we end up digging in the kernel log and /proc/interrupt to do the connection
    between the used timer.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-13-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit d04af4908a7283bc6ae0dd9475ccf807d094f8ba
Author: Benjamin Gaignard <benjamin.gaignard@st.com>
Date:   Mon Jan 8 14:28:51 2018 +0100

    clocksource/drivers/stm32: Convert the driver to timer_of primitives
    
    Convert the driver to use the timer_of() helpers. This allows the removal of
    a custom private structure, factors out and simplifies the code.
    
    [Daniel Lezcano]: Respin against the critical fix patch and massaged the changelog.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-12-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit e0aeca3d8cbaea514eb98df1149faa918f9ec42d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:50 2018 +0100

    clocksource/drivers/stm32: Fix kernel panic with multiple timers
    
    The current code hides a couple of bugs:
    
     - The global variable 'clock_event_ddata' is overwritten each time the
       init function is invoked.
    
    This is fixed with a kmemdup() instead of assigning the global variable. That
    prevents a memory corruption when several timers are defined in the DT.
    
     - The clockevent's event_handler is NULL if the time framework does
       not select the clockevent when registering it, this is fine but the init
       code generates in any case an interrupt leading to dereference this
       NULL pointer.
    
    The stm32 timer works with shadow registers, a mechanism to cache the
    registers. When a change is done in one buffered register, we need to
    artificially generate an event to force the timer to copy the content
    of the register to the shadowed register.
    
    The auto-reload register (ARR) is one of the shadowed register as well as
    the prescaler register (PSC), so in order to force the copy, we issue an
    event which in turn leads to an interrupt and the NULL dereference.
    
    This is fixed by inverting two lines where we clear the status register
    before enabling the update event interrupt.
    
    As this kernel crash is resulting from the combination of these two bugs,
    the fixes are grouped into a single patch.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/1515418139-23276-11-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 9aea417afa6bf52f15a5b194944b6a646d61af04
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:49 2018 +0100

    clocksource/drivers/timer-of: Don't request the resource by name
    
    When the driver does not specify a name for the resource, don't use
    of_io_request_and_map() but of_iomap(). That prevents resource name allocation
    conflicts on some platforms which have the same name as the node.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-10-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 1c63c1c089a48e1b1821a73dc36a3997ced2f82d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:48 2018 +0100

    clocksource/drivers/timer-of: Store the device node pointer in 'struct timer_of'
    
    Under certain circumstances, some specific operations must be done with the
    device node pointer, which forces the timer code to propagate the pointer to
    the functions which need it.
    
    In order to consolidate the function signatures in the different drivers
    by using the timer-of structure, let's store it in the timer-of structure
    as a handy pointer when it is needed.
    
    Tested-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-9-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 067bc9144766495650e621b79bd2bc199cee0769
Author: Baolin Wang <baolin.wang@spreadtrum.com>
Date:   Mon Jan 8 14:28:47 2018 +0100

    clocksource/drivers/spreadtrum: Add timer driver for the Spreadtrum SC9860 platform
    
    The Spreadtrum SC9860 platform will use the architected timers as local
    clock events, but we also need a broadcast timer device to wake up the
    CPUs when the CPUs are in sleep mode.
    
    The Spreadtrum timer can support 32-bit or 64-bit counters, as well as
    supporting period mode or one-shot mode.
    
    Signed-off-by: Baolin Wang <baolin.wang@spreadtrum.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Philippe Ombredanne <pombredanne@nexb.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-8-git-send-email-daniel.lezcano@linaro.org
    [ Minor readability edits. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 286f30db8b713b17e048bb86df1e257fd8695498
Author: Baolin Wang <baolin.wang@spreadtrum.com>
Date:   Mon Jan 8 14:28:46 2018 +0100

    dt-bindings/clocksource: Add Spreadtrum SC9860 timer documentation
    
    This patch adds documentation of device tree bindings for the timers
    found on the Spreadtrum SC9860 platform.
    
    Signed-off-by: Baolin Wang <baolin.wang@spreadtrum.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: devicetree@vger.kernel.org
    Link: http://lkml.kernel.org/r/1515418139-23276-7-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit cf7f46b9b12269d204b6acd0925704543adb6e05
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:45 2018 +0100

    clocksource/drivers/timer-of: Add kernel documentation
    
    The current code has no comments, neither any function descriptions. Fix this by
    adding function descriptions in kernel doc format.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-6-git-send-email-daniel.lezcano@linaro.org
    [ Spelling and style fixes. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 5bbf4ad945a9bb353e77ef71c753ca9bb1e3d978
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jan 8 14:28:44 2018 +0100

    clocksource/drivers/timer-of: Fix function names
    
    All the functions are not prefixed with 'timer_of_', fix the naming in order
    to have the code consistent.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-5-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 542f824607a6968ea443208ccfef3b7daf503559
Author: Romain Izard <romain.izard.pro@gmail.com>
Date:   Mon Jan 8 14:28:43 2018 +0100

    clocksource/drivers/tcb_clksrc: Fix clock speed message
    
    The clock speed displayed at boot in an information message was 500 kHz
    too high compared to its real value. As the value is not used anywhere,
    there is no functional impact.
    
    Fix the rounding formula to display the correct value.
    
    Signed-off-by: Romain Izard <romain.izard.pro@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-4-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 0ec5477c3e0e86b3b2750d82355af422a468dc46
Author: Andreas Färber <afaerber@suse.de>
Date:   Mon Jan 8 14:28:42 2018 +0100

    clocksource/drivers/owl: Add the S700 timer
    
    Actions S700 has two 2Hz timers like S500, and four TIMx timers like S900.
    
    Signed-off-by: Andreas Färber <afaerber@suse.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-3-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit f58639ac29d9fea7c54afca3c8c03596eafbec20
Author: Andreas Färber <afaerber@suse.de>
Date:   Mon Jan 8 14:28:41 2018 +0100

    clocksource/drivers/owl: Adopt TIMER_OF_DECLARE()
    
    The following commit:
    
      1727339590fd ("clocksource/drivers: Rename CLOCKSOURCE_OF_DECLARE to TIMER_OF_DECLARE")
    
    deprecated CLOCKSOURCE_OF_DECLARE(), so adopt the new TIMER_OF_DECLARE() macro instead.
    
    Reported-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Andreas Färber <afaerber@suse.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1515418139-23276-2-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit f3074a2825d45868e77c5926913986141394d8dd
Author: Andreas Färber <afaerber@suse.de>
Date:   Mon Jan 8 14:28:40 2018 +0100

    dt-bindings/clocksource: Add Actions Semi S700 timer
    
    Define a compatible string for the Actions Semi S700 SoC timer.
    
    Signed-off-by: Andreas Färber <afaerber@suse.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: devicetree@vger.kernel.org
    Link: http://lkml.kernel.org/r/1515418139-23276-1-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 33314a1387009361e6cfcfaa772abe3b90d11321
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Tue Jan 2 10:56:32 2018 +0100

    dt-bindings: h8300 clocksource: correct spelling of pulse
    
    Correct what appears to be a typo in the spelling of pulse.
    
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Rob Herring <robh@kernel.org>

commit 63a4be93937c1a6459f9d67b7afeb4e81fa64d2b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Jan 4 16:53:49 2018 +0100

    fbdev: radeon: use ktime_get() for HZ calibration
    
    do_gettimeofday() is deprecated and a bit clumsy. This changes
    radeon_probe_pll_params() over to using ktime_get() with monotonic
    times. There is no need to check for negative values any more
    since the monotonic clocksource cannot go backwards, but I'm
    adding a check for zero-division in case of a bad clocksource.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>

commit ac45e6293f3074dc6ccf984e210c8793796eaf28
Author: WEN Pingbo <pingbo.wen@linaro.org>
Date:   Mon Jan 1 21:29:18 2018 -0800

    Input: hil_mlc - convert timeval to time64_t
    
    Since mlc->lcv_t is only interested in seconds, directly using time64_t
    here.
    
    This gets rid of the deprecated do_gettimeofday() and avoids problems
    with time going backwards since we now use the monotonic clocksource.
    
    Signed-off-by: WEN Pingbo <pingbo.wen@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Patchwork-Id: 10076611
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

commit b8d4c28b66eba0a3b59b95d1856cf49638dd8f48
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Wed Jun 8 01:40:44 2016 +0200

    ARM: dts: at91: sama5d2: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit 0c57798c653dfbc091cdb8af5dc3379efec0d412
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Thu May 5 17:52:44 2016 +0200

    ARM: dts: at91: sama5d4: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit a4799758f4033fd5f02b81d35f6891c90b3a0874
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Tue Jun 7 16:15:17 2016 +0200

    ARM: dts: at91: sama5d3: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit f25f2b11cb365d1f1a1d3820277f2d69539328fa
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Wed Jun 8 17:06:13 2016 +0200

    ARM: dts: at91: at91sam9x5: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit 3ed4771255ceb5c846fbc01048c488fabdad2139
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Wed Jun 8 17:06:13 2016 +0200

    ARM: dts: at91: at91sam9n12: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit c33b1437c0d84dd9742180e16e75c7975348ea0b
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Wed Jun 8 17:06:13 2016 +0200

    ARM: dts: at91: at91sam9rl: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit b0492361e9d449f9b712f396188bcbee045fd460
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Wed Jun 8 17:06:13 2016 +0200

    ARM: dts: at91: at91sam9g45: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit d89b16f3f3ce73e882d1340c6576053744a5ed15
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Wed Jun 8 17:06:13 2016 +0200

    ARM: dts: at91: at91sam9263: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit 194ce525fbebe176a1d0bd187df4fd6851d9f80a
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Wed Jun 8 17:06:13 2016 +0200

    ARM: dts: at91: at91sam9261: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit 0178890e0b4cee4669f584f7f28846c70dfd95bd
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Tue Jun 7 22:42:09 2016 +0200

    ARM: dts: at91: at91sam9260: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit d26e82974d39211c7d43d98de432bb46c01ba05f
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Tue Jun 7 22:42:09 2016 +0200

    ARM: dts: at91: at91rm9200: TC blocks are also simple-mfd and syscon devices
    
    Add simple-mfd and syscon to the TC blocks to allow to register one of the
    channels as clocksource properly at boot time and free up the remaining
    channels for other use.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit 2c2529176236c870693290d314c06652f5f3fe47
Merge: 74f256a5cc0a 7f32eddb81ec
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Dec 21 16:19:42 2017 +0100

    Merge tag 'renesas-dt-for-v4.16' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/horms/renesas into next/dt
    
    Pull "Renesas ARM Based SoC DT Updates for v4.16" from Simon Horman:
    
    * Convert to named i2c-gpio bindings
    
      Geert Uytterhoeven says "Commits 7d29f509d2cfd807 ("dt-bindings: i2c:
      i2c-gpio: Add support for named gpios") and 05c74778858d7d99 ("i2c: gpio:
      Add support for named gpios in DT") introduced named i2c-gpio DT
      bindings, and deprecated the more error-prone unnamed variant.
    
      This patch series switches all Renesas boards to the new bindings, and
      adds the missing GPIO_OPEN_DRAIN I/O flags, which were implicitly
      assumed before..."
    
      ...  Note that after this series is applied, the i2c-gpio buses are no
      longer detected when booting new DTBs on old (v4.14 and older) kernels,
      which should not be an issue.  Booting old DTBs on new kernels is not
      affected."
    
    * Update DTS for CMT DT binding rework
    
      Geert Uytterhoeven says "This patch series updates the CMT device nodes
      in the various Renesas DTS files sh_cmt clocksource driver for the recent
      DT binding rework that was merged in v4.14-rc1 and v4.15-rc1..."
    
    * Add SMP support to r8a7794 (R-Car E2) SoC
    
      Sergei Shtylyov says "Add the device tree node for the Advanced Power
      Management Unit (APMU).  Use the "enable-method" prop to  point out that
      the APMU should be used for the SMP support."
    
    * Correct primary compatible value for eeprom
      on r7s72100 (RZ/A1H) genmai and r8a7791 (R-Car M2-W) koelsh boards
    
      Geert Uytterhoeven says "The Renesas part numbers of the two-wire serial
      interface EEPROMs do not follow the 24Cxx pattern, but the R1EX24xxx
      pattern.
    
      Hence change the primary compatible values to the appropriate variant of
      "renesas,r1ex24xxx", like is already done on Gose.""
    
    * Move cec_clock to root node on r8a7791 (R-Car M2-W) koelsh board
      r8a7791 (R-Car M2-W) koelsh board
    
    * Use R-Car SDHI and Ether Gen1 and 2 fallback compat strings
    
      Use recently posted R-Car SDHI and Ether Gen 1 and 2 fallback
      compat strings in the DT of Renesas ARM based SoCs.
    
    * Add IIC cores to dtsi of r8a7745 (RZ/G1E) SoC
    
    * Rework DT architecture for r8a7745 (RZ/G1E) iW-RainboW-G22D development
      platform and add serial support.
    
      Fabrizio Castro says "... define a new DT architecture for the
      iW-RainboW-G22D SODIMM Development Platform to include the configuration
      with the HDMI daughter board and to define the serial interfaces."
    
    * Add USB function support to
      r8a7745 (RZ/G1E) iW-RainboW-G22D development platform
    
    * Add PCIEC and ttySC3 support to r8a7743 (RZ/G1M) iW-RainboW-G20M-Qseven SoM
    
    * Add VIN support to r8a7743 (RZ/G1M) and r8a7745 (RZ/G1E) SoCs
    
    * Add CAN and HDMI support to r8a7743 (RZ/G1M) iW-RainboW-G20D-Qseven and
      r8a7745 (RZ/G1E) iW-RainboW-G22D development platforms
    
    * tag 'renesas-dt-for-v4.16' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/horms/renesas: (61 commits)
      ARM: dts: alt: Convert to named i2c-gpio bindings
      ARM: dts: koelsch: Convert to named i2c-gpio bindings
      ARM: dts: lager: Convert to named i2c-gpio bindings
      ARM: dts: armadillo800eva: Convert to named i2c-gpio bindings
      ARM: dts: sh73a0: Remove CMT renesas,channels-mask
      ARM: dts: r8a7794: Remove CMT renesas,channels-mask
      ARM: dts: r8a7793: Remove CMT renesas,channels-mask
      ARM: dts: r8a7791: Remove CMT renesas,channels-mask
      ARM: dts: r8a7790: Remove CMT renesas,channels-mask
      ARM: dts: r8a7740: Remove CMT renesas,channels-mask
      ARM: dts: r8a73a4: Remove CMT renesas,channels-mask
      ARM: dts: r8a7794: Update CMT compat strings
      ARM: dts: r8a7793: Update CMT compat strings
      ARM: dts: r8a7791: Update CMT compat strings
      ARM: dts: r8a7790: Update CMT compat strings
      ARM: dts: r8a73a4: Update CMT compat string
      ARM: dts: r8a7794: Add SMP support
      ARM: dts: genmai: Correct primary compatible value for eeprom
      ARM: dts: koelsch: Correct primary compatible value for eeprom
      ARM: dts: r8a7745: add VIN dt support
      ...

commit bb8155ada490ea04d78abc9183ddc8702e6f8ba3
Author: Joel Stanley <joel@jms.id.au>
Date:   Tue Nov 28 22:39:25 2017 +1030

    ARM: dts: aspeed: Add proper clock references
    
    This device tree will break existing kernels that do not have the clk
    patches applied (no clocksource, as we don't know the speed of the APB
    clock.  You can boot if you pass a lpj value on the command line, but
    won't have a uart).
    
    Older device trees running with the newer kernel will function as well
    as pre-4.16 kernels. That is, that some IP blocks (i2c, pwm/tach, adc)
    will not work as the kernel lacks reset controller and clock enabling.
    
    This is being changed as existing device trees use fixed-clocks in order
    to boot without a clk driver. The newly added clk driver provides proper
    clock support, including gating, so we move the device trees over to
    properly request clocks.
    
    The SCU compatible string is updated as the g4-scu string made it into
    the tree before we decided on aspeed,astX000-<ip> as the format for the
    strings. The old string will be removed from the bindings in a future
    patch.
    
    Signed-off-by: Joel Stanley <joel@jms.id.au>

commit ebbd9c27dcf71d2947e30d743cfc2c15e7d8f723
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Mon Oct 16 16:28:38 2017 +0100

    clocksource/drivers/arm_arch_timer: Validate CNTFRQ after enabling frame
    
    
    [ Upstream commit 21492e1333a0d07af6968667f128e19088cf5ead ]
    
    The ACPI GTDT code validates the CNTFRQ field of each MMIO timer
    frame against the CNTFRQ system register of the current CPU, to
    ensure that they are equal, which is mandated by the architecture.
    
    However, reading the CNTFRQ field of a frame is not possible until
    the RFRQ bit in the frame's CNTACRn register is set, and doing so
    before that willl produce the following error:
    
      arch_timer: [Firmware Bug]: CNTFRQ mismatch: frame @ 0x00000000e0be0000: (0x00000000), CPU: (0x0ee6b280)
      arch_timer: Disabling MMIO timers due to CNTFRQ mismatch
      arch_timer: Failed to initialize memory-mapped timer.
    
    The reason is that the CNTFRQ field is RES0 if access is not enabled.
    
    So move the validation of CNTFRQ into the loop that iterates over the
    timers to find the best frame, but defer it until after we have selected
    the best frame, which should also have enabled the RFRQ bit.
    
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 844056fd74ebdd826bd23a7d989597e15f478acb
Merge: ca122fe376fc 54b8a2306b92
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Nov 25 08:37:16 2017 -1000

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
    
     - The final conversion of timer wheel timers to timer_setup().
    
       A few manual conversions and a large coccinelle assisted sweep and
       the removal of the old initialization mechanisms and the related
       code.
    
     - Remove the now unused VSYSCALL update code
    
     - Fix permissions of /proc/timer_list. I still need to get rid of that
       file completely
    
     - Rename a misnomed clocksource function and remove a stale declaration
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (27 commits)
      m68k/macboing: Fix missed timer callback assignment
      treewide: Remove TIMER_FUNC_TYPE and TIMER_DATA_TYPE casts
      timer: Remove redundant __setup_timer*() macros
      timer: Pass function down to initialization routines
      timer: Remove unused data arguments from macros
      timer: Switch callback prototype to take struct timer_list * argument
      timer: Pass timer_list pointer to callbacks unconditionally
      Coccinelle: Remove setup_timer.cocci
      timer: Remove setup_*timer() interface
      timer: Remove init_timer() interface
      treewide: setup_timer() -> timer_setup() (2 field)
      treewide: setup_timer() -> timer_setup()
      treewide: init_timer() -> setup_timer()
      treewide: Switch DEFINE_TIMER callbacks to struct timer_list *
      s390: cmm: Convert timers to use timer_setup()
      lightnvm: Convert timers to use timer_setup()
      drivers/net: cris: Convert timers to use timer_setup()
      drm/vc4: Convert timers to use timer_setup()
      block/laptop_mode: Convert timers to use timer_setup()
      net/atm/mpc: Avoid open-coded assignment of timer callback function
      ...

commit 9a08862a5d2e266ecea1865547463da2745fc687
Author: Nagarathnam Muthusamy <nagarathnam.muthusamy@oracle.com>
Date:   Thu Sep 21 11:05:31 2017 -0400

    vDSO for sparc
    
    Following patch is based on work done by Nick Alcock on 64-bit vDSO for sparc
    in Oracle linux. I have extended it to include support for 32-bit vDSO for sparc
    on 64-bit kernel.
    
    vDSO for sparc is based on the X86 implementation. This patch
    provides vDSO support for both 64-bit and 32-bit programs on 64-bit kernel.
    vDSO will be disabled on 32-bit linux kernel on sparc.
    
    *) vclock_gettime.c contains all the vdso functions. Since data page is mapped
       before the vdso code page, the pointer to data page is got by subracting offset
       from an address in the vdso code page. The return address stored in
       %i7 is used for this purpose.
    *) During compilation, both 32-bit and 64-bit vdso images are compiled and are
       converted into raw bytes by vdso2c program to be ready for mapping into the
       process. 32-bit images are compiled only if CONFIG_COMPAT is enabled. vdso2c
       generates two files vdso-image-64.c and vdso-image-32.c which contains the
       respective vDSO image in C structure.
    *) During vdso initialization, required number of vdso pages are allocated and
       raw bytes are copied into the pages.
    *) During every exec, these pages are mapped into the process through
       arch_setup_additional_pages and the location of mapping is passed on to the
       process through aux vector AT_SYSINFO_EHDR which is used by glibc.
    *) A new update_vsyscall routine for sparc is added to keep the data page in
       vdso updated.
    *) As vDSO cannot contain dynamically relocatable references, a new version of
       cpu_relax is added for the use of vDSO.
    
    This change also requires a putback to glibc to use vDSO. For testing,
    programs planning to try vDSO can be compiled against the generated
    vdso(64/32).so in the source.
    
    Testing:
    
    ========
    [root@localhost ~]# cat vdso_test.c
    int main() {
            struct timespec tv_start, tv_end;
            struct timeval tv_tmp;
            int i;
            int count = 1 * 1000 * 10000;
            long long diff;
    
            clock_gettime(0, &tv_start);
            for (i = 0; i < count; i++)
                  gettimeofday(&tv_tmp, NULL);
            clock_gettime(0, &tv_end);
            diff = (long long)(tv_end.tv_sec -
                    tv_start.tv_sec)*(1*1000*1000*1000);
            diff += (tv_end.tv_nsec - tv_start.tv_nsec);
            printf("Start sec: %d\n", tv_start.tv_sec);
            printf("End sec  : %d\n", tv_end.tv_sec);
            printf("%d cycles in %lld ns = %f ns/cycle\n", count, diff,
                    (double)diff / (double)count);
            return 0;
    }
    
    [root@localhost ~]# cc vdso_test.c -o t32_without_fix -m32 -lrt
    [root@localhost ~]# ./t32_without_fix
    Start sec: 1502396130
    End sec  : 1502396140
    10000000 cycles in 9565148528 ns = 956.514853 ns/cycle
    [root@localhost ~]# cc vdso_test.c -o t32_with_fix -m32 ./vdso32.so.dbg
    [root@localhost ~]# ./t32_with_fix
    Start sec: 1502396168
    End sec  : 1502396169
    10000000 cycles in 798141262 ns = 79.814126 ns/cycle
    [root@localhost ~]# cc vdso_test.c -o t64_without_fix -m64 -lrt
    [root@localhost ~]# ./t64_without_fix
    Start sec: 1502396208
    End sec  : 1502396218
    10000000 cycles in 9846091800 ns = 984.609180 ns/cycle
    [root@localhost ~]# cc vdso_test.c -o t64_with_fix -m64 ./vdso64.so.dbg
    [root@localhost ~]# ./t64_with_fix
    Start sec: 1502396257
    End sec  : 1502396257
    10000000 cycles in 380984048 ns = 38.098405 ns/cycle
    
    V1 to V2 Changes:
    =================
            Added hot patching code to switch the read stick instruction to read
    tick instruction based on the hardware.
    
    V2 to V3 Changes:
    =================
            Merged latest changes from sparc-next and moved the initialization
    of clocksource_tick.archdata.vclock_mode to time_init_early. Disabled
    queued spinlock and rwlock configuration when simulating 32-bit config
    to compile 32-bit VDSO.
    
    V3 to V4 Changes:
    =================
            Hardcoded the page size as 8192 in linker script for both 64-bit and
    32-bit binaries. Removed unused variables in vdso2c.h. Added -mv8plus flag to
    Makefile to prevent the generation of relocation entries for __lshrdi3 in 32-bit
    vdso binary.
    
    Signed-off-by: Nick Alcock <nick.alcock@oracle.com>
    Signed-off-by: Nagarathnam Muthusamy <nagarathnam.muthusamy@oracle.com>
    Reviewed-by: Shannon Nelson <shannon.nelson@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 558de28249508dc3ec0ec8981d1315eb8b63f0d9
Author: Benjamin Gaignard <benjamin.gaignard@linaro.org>
Date:   Tue Nov 14 09:52:38 2017 +0100

    clocksource/timer_of: Rename timer_of_exit to timer_of_cleanup
    
    Change the function name to something more explicit since it is only used
    in init error cases.
    
    Add __init annotation and description about the function usage.
    
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: mark.rutland@arm.com
    Cc: devicetree@vger.kernel.org
    Cc: alexandre.torgue@st.com
    Cc: arnd@arndb.de
    Cc: julien.thierry@arm.com
    Cc: daniel.lezcano@linaro.org
    Cc: linux@armlinux.org.uk
    Cc: robh+dt@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: mcoquelin.stm32@gmail.com
    Cc: sudeep.holla@arm.com
    Cc: ludovic.barre@st.com
    Link: https://lkml.kernel.org/r/1510649563-22975-2-git-send-email-benjamin.gaignard@linaro.org

commit 2bcc673101268dc50e52b83226c5bbf38391e16d
Merge: 670310dfbae0 b24591e2fcf8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Nov 13 17:56:58 2017 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Yet another big pile of changes:
    
       - More year 2038 work from Arnd slowly reaching the point where we
         need to think about the syscalls themself.
    
       - A new timer function which allows to conditionally (re)arm a timer
         only when it's either not running or the new expiry time is sooner
         than the armed expiry time. This allows to use a single timer for
         multiple timeout requirements w/o caring about the first expiry
         time at the call site.
    
       - A new NMI safe accessor to clock real time for the printk timestamp
         work. Can be used by tracing, perf as well if required.
    
       - A large number of timer setup conversions from Kees which got
         collected here because either maintainers requested so or they
         simply got ignored. As Kees pointed out already there are a few
         trivial merge conflicts and some redundant commits which was
         unavoidable due to the size of this conversion effort.
    
       - Avoid a redundant iteration in the timer wheel softirq processing.
    
       - Provide a mechanism to treat RTC implementations depending on their
         hardware properties, i.e. don't inflict the write at the 0.5
         seconds boundary which originates from the PC CMOS RTC to all RTCs.
         No functional change as drivers need to be updated separately.
    
       - The usual small updates to core code clocksource drivers. Nothing
         really exciting"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (111 commits)
      timers: Add a function to start/reduce a timer
      pstore: Use ktime_get_real_fast_ns() instead of __getnstimeofday()
      timer: Prepare to change all DEFINE_TIMER() callbacks
      netfilter: ipvs: Convert timers to use timer_setup()
      scsi: qla2xxx: Convert timers to use timer_setup()
      block/aoe: discover_timer: Convert timers to use timer_setup()
      ide: Convert timers to use timer_setup()
      drbd: Convert timers to use timer_setup()
      mailbox: Convert timers to use timer_setup()
      crypto: Convert timers to use timer_setup()
      drivers/pcmcia: omap1: Fix error in automated timer conversion
      ARM: footbridge: Fix typo in timer conversion
      drivers/sgi-xp: Convert timers to use timer_setup()
      drivers/pcmcia: Convert timers to use timer_setup()
      drivers/memstick: Convert timers to use timer_setup()
      drivers/macintosh: Convert timers to use timer_setup()
      hwrng/xgene-rng: Convert timers to use timer_setup()
      auxdisplay: Convert timers to use timer_setup()
      sparc/led: Convert timers to use timer_setup()
      mips: ip22/32: Convert timers to use timer_setup()
      ...

commit df27067e6040b51188184876253d93da002433aa
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Nov 10 16:25:04 2017 +0100

    pstore: Use ktime_get_real_fast_ns() instead of __getnstimeofday()
    
    __getnstimeofday() is a rather odd interface, with a number of quirks:
    
    - The caller may come from NMI context, but the implementation is not NMI safe,
      one way to get there from NMI is
    
          NMI handler:
            something bad
              panic()
                kmsg_dump()
                  pstore_dump()
                     pstore_record_init()
                       __getnstimeofday()
    
    - The calling conventions are different from any other timekeeping functions,
      to deal with returning an error code during suspended timekeeping.
    
    Address the above issues by using a completely different method to get the
    time: ktime_get_real_fast_ns() is NMI safe and has a reasonable behavior
    when timekeeping is suspended: it returns the time at which it got
    suspended. As Thomas Gleixner explained, this is safe, as
    ktime_get_real_fast_ns() does not call into the clocksource driver that
    might be suspended.
    
    The result can easily be transformed into a timespec structure. Since
    ktime_get_real_fast_ns() was not exported to modules, add the export.
    
    The pstore behavior for the suspended case changes slightly, as it now
    stores the timestamp at which timekeeping was suspended instead of storing
    a zero timestamp.
    
    This change is not addressing y2038-safety, that's subject to a more
    complex follow up patch.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Anton Vorontsov <anton@enomsg.org>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Colin Cross <ccross@android.com>
    Link: https://lkml.kernel.org/r/20171110152530.1926955-1-arnd@arndb.de

commit b888808093113ae7d63d213272d01fea4b8329ed
Author: Joao Martins <joao.m.martins@oracle.com>
Date:   Wed Nov 8 17:19:56 2017 +0000

    x86/xen/time: set pvclock flags on xen_time_init()
    
    Specifically check for PVCLOCK_TSC_STABLE_BIT and if this bit is set,
    then set it too on pvclock flags. This allows Xen clocksource to use it
    and thus speeding up xen_clocksource_read() callers (i.e. sched_clock())
    
    Signed-off-by: Joao Martins <joao.m.martins@oracle.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>

commit 9f08890ab906abaf9d4c1bad8111755cbd302260
Author: Joao Martins <joao.m.martins@oracle.com>
Date:   Wed Nov 8 17:19:55 2017 +0000

    x86/pvclock: add setter for pvclock_pvti_cpu0_va
    
    Right now there is only a pvclock_pvti_cpu0_va() which is defined
    on kvmclock since:
    
    commit dac16fba6fc5
    ("x86/vdso: Get pvclock data from the vvar VMA instead of the fixmap")
    
    The only user of this interface so far is kvm. This commit adds a
    setter function for the pvti page and moves pvclock_pvti_cpu0_va
    to pvclock, which is a more generic place to have it; and would
    allow other PV clocksources to use it, such as Xen.
    
    While moving pvclock_pvti_cpu0_va into pvclock, rename also this
    function to pvclock_get_pvti_cpu0_va (including its call sites)
    to be symmetric with the setter (pvclock_set_pvti_cpu0_va).
    
    Signed-off-by: Joao Martins <joao.m.martins@oracle.com>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Acked-by: Paolo Bonzini <pbonzini@redhat.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>

commit 07a708f0a16f040b319db647452bcb8884cd04be
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Wed Nov 8 11:05:46 2017 +0800

    serial: 8250_fintek: Fix crash with baud rate B0
    
    The 8250_fintek.c is support the Fintek F81866/F81216 with dynamic clock.
    But It'll generate "division by zero" exception and crash in
    fintek_8250_set_termios() with baud rate 0 on baudrate_table[i] % baud.
    
    It can be tested with following C code:
    
            ...
            struct termios options;
    
            tcgetattr(fd, &options);
            ...
            options.c_cflag = CS8 | CREAD; /* baud rate 0 */
            tcsetattr(fd, TCSANOW, &options);
            tcflush(fd, TCIOFLUSH);
    
    Fixes: 195638b6d44f ("serial: 8250_fintek: UART dynamic clocksource on Fintek F81866")
    Reported-by: Lukas Redlinger <rel+kernel@agilox.net>
    Cc: Lukas Redlinger <rel+kernel@agilox.net>
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 227afd93a6ad921a89171422b60b91b9aa1d9af1
Author: Ding Tianhong <dingtianhong@huawei.com>
Date:   Sat Oct 7 22:36:51 2017 +0000

    clocksource/drivers/arm_arch_timer: Add dt binding for hisilicon-161010101 erratum
    
    
    [ Upstream commit 729e55225b1f6225ee7a2a358d5141a3264627c4 ]
    
    This erratum describes a bug in logic outside the core, so MIDR can't be
    used to identify its presence, and reading an SoC-specific revision
    register from common arch timer code would be awkward.  So, describe it
    in the device tree.
    
    Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4553474d977d1ee8a81067cfbc588f1df84ce3e9
Author: Stafford Horne <shorne@gmail.com>
Date:   Fri Jul 7 06:06:30 2017 +0900

    openrisc: add tick timer multi-core sync logic
    
    In case timers are not in sync when cpus start (i.e. hot plug / offset
    resets) we need to synchronize the secondary cpus internal timer with
    the main cpu.  This is needed as in OpenRISC SMP there is only one
    clocksource registered which reads from the same ttcr register on each
    cpu.
    
    This synchronization routine heavily borrows from mips implementation that
    does something similar.
    
    Signed-off-by: Stafford Horne <shorne@gmail.com>

commit f48729a999ee57b9e831245779e68200dd2bde09
Author: Benjamin Gaignard <benjamin.gaignard@linaro.org>
Date:   Mon Oct 23 11:58:37 2017 +0200

    clocksource/drivers/timer-of: Add timer_of_exit function
    
    The timer-of API does not provide a function to undo what has been done by
    the timer_of_init() function.
    
    Add a timer_of_exit() function.
    
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d29babf5c2320f1e42fc4d343b3f369788696f23
Author: Helge Deller <deller@gmx.de>
Date:   Wed Oct 18 22:25:00 2017 +0200

    parisc: Fix detection of nonsynchronous cr16 cycle counters
    
    commit 8642b31ba9eef8a01845146a26682d4869e62513 upstream.
    
    For CPUs which have an unknown or invalid CPU location (physical location)
    assume that their cycle counters aren't syncronized across CPUs.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Fixes: c8c3735997a3 ("parisc: Enhance detection of synchronous cr16 clocksources")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f16ff2bdb135e2eb35488264006b575c476ea597
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Thu Oct 19 12:55:35 2017 +0100

    clocksource/drivers/mips-gic-timer: Add fastpath for local timer updates
    
    Always accessing the compare register via the CM redirect region is
    (relatively) slow. If the timer being updated is the current CPUs
    then this can be shortcutted by writing to the CM VP local region.
    
    Signed-off-by: Matt Redfearn <matt.redfearn@mips.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7957b07b559175500b2a03e8a39738c1b4a832fe
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Thu Oct 19 12:55:34 2017 +0100

    clocksource/drivers/mips-gic-timer: Remove pointless irq_save,restore
    
    The function gic_next_event is always called with interrupts disabled, so
    the local_irq_save / local_irq_restore are pointless - remove them.
    
    [Daniel Lezcano: Fixed warning by removing unused variable 'flags']
    
    Signed-off-by: Matt Redfearn <matt.redfearn@mips.com>
    Suggested-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a7fb4577bbe307dd3dd971c7ea8f35a68fc031ca
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Oct 16 16:28:39 2017 +0100

    clocksource/drivers/arm_arch_timer: Fix DEFINE_PER_CPU expansion
    
    Our ctags mangling script can't handle newlines inside of a
    DEFINE_PER_CPU(), leading to an annoying message whenever tags are
    built:
    
      ctags: Warning: drivers/clocksource/arm_arch_timer.c:302: null expansion of name pattern "\1"
    
    This was dealt with elsewhere in commit:
    
      25528213fe9f75f4 ("tags: Fix DEFINE_PER_CPU expansions")
    
    ... by ensuring each DEFINE_PER_CPU() was contained on a single line,
    even where this would violate the usual code style (checkpatch warnings
    and all).
    
    Let's do the same for the arch timer driver, and get rid of the
    distraction.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 21492e1333a0d07af6968667f128e19088cf5ead
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Mon Oct 16 16:28:38 2017 +0100

    clocksource/drivers/arm_arch_timer: Validate CNTFRQ after enabling frame
    
    The ACPI GTDT code validates the CNTFRQ field of each MMIO timer
    frame against the CNTFRQ system register of the current CPU, to
    ensure that they are equal, which is mandated by the architecture.
    
    However, reading the CNTFRQ field of a frame is not possible until
    the RFRQ bit in the frame's CNTACRn register is set, and doing so
    before that willl produce the following error:
    
      arch_timer: [Firmware Bug]: CNTFRQ mismatch: frame @ 0x00000000e0be0000: (0x00000000), CPU: (0x0ee6b280)
      arch_timer: Disabling MMIO timers due to CNTFRQ mismatch
      arch_timer: Failed to initialize memory-mapped timer.
    
    The reason is that the CNTFRQ field is RES0 if access is not enabled.
    
    So move the validation of CNTFRQ into the loop that iterates over the
    timers to find the best frame, but defer it until after we have selected
    the best frame, which should also have enabled the RFRQ bit.
    
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2d764649e4b18409a65befb2bdf1483dd56b992b
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Sep 19 07:54:40 2017 +0200

    MAINTAINERS: Fix path and add bindings to timers
    
    As spotted by Andreas Färber, the clocksource directory path does not follow
    the rule where a maintained directory must end with a '/' character.
    
    Also, the timers devicetree bindings documentation is not mentioned in the
    entry, so every submission touching the devicetree documentation misses to
    Cc the maintainers of the timers.
    
    Reported-by: Andreas Färber <afaerber@suse.de>
    Reviewed-by: Andreas Färber <afaerber@suse.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2f8a26c166eba01382765bc2fa575387e41079ac
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Sep 5 17:04:56 2017 +0200

    clocksource: Improve GENERIC_CLOCKEVENTS dependency
    
    We regularly run into build errors when a clocksource driver selects
    CONFIG_TIMER_OF while CONFIG_GENERIC_CLOCKEVENTS is disabled:
    
    In file included from drivers/clocksource/timer-of.c:25:0:
    drivers/clocksource/timer-of.h:35:28: error: field 'clkevt' has incomplete type
    
    At the moment, three drivers can show this behavior: ARMV7M_SYSTICK,
    CLKSRC_ST_LPC and CLKSRC_NPS. We could add further dependencies as we did
    many times, but I have looked a little bit more at what architectures
    are left that don't use GENERIC_CLOCKEVENTS, and this shows that there
    is a better solution.
    
    On arch/frv and arch/ia64, we never select CONFIG_GENERIC_CLOCKEVENTS
    and we also don't use ARCH_USES_GETTIMEOFFSET, which would
    block the clocksource Kconfig menu. On m68k, some platforms use
    CONFIG_GENERIC_CLOCKEVENTS, some use ARCH_USES_GETTIMEOFFSET, and some
    use neither of them. The good news is that there is no configuration that
    does not set CONFIG_GENERIC_CLOCKEVENTS but that wants to enable any of
    the Kconfig symbols in the menu, so we can simply replace the dependency
    with the stricter one. While in theory one could have a clocksource
    driver without the clockevent infrastructure, this seems unlikely
    to be relevant in the future any more.
    
    We can probably drop some of the other dependencies as well now,
    e.g. there should generally be no reason to depend on CONFIG_ARM
    unless the driver uses architecture specific assembly.
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2554828b17ad16892cdd1becb43230782f0c0cfd
Author: Arvind Yadav <arvind.yadav.cs@gmail.com>
Date:   Mon Sep 25 13:46:41 2017 +0530

    clocksource/drivers/rockchip: pr_err() strings should end with newlines
    
    pr_err() messages should end with a new-line to avoid other messages being
    concatenated.
    
    Signed-off-by: Arvind Yadav <arvind.yadav.cs@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 3c044a15ff2e4ba97eb14d772510eba974c6db58
Author: Arvind Yadav <arvind.yadav.cs@gmail.com>
Date:   Mon Sep 25 13:46:40 2017 +0530

    clocksource/drivers/owl: pr_err() strings should end with newlines
    
    pr_err() messages should end with a new-line to avoid other messages being
    concatenated.
    
    Signed-off-by: Arvind Yadav <arvind.yadav.cs@gmail.com>
    Reviewed-by: Andreas Färber <afaerber@suse.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 1893428bd8d14e88facdf745479be0130753f6e9
Author: Arvind Yadav <arvind.yadav.cs@gmail.com>
Date:   Mon Sep 25 13:46:39 2017 +0530

    clocksource/drivers/fttmr010: pr_err() strings should end with newlines
    
    pr_err() messages should end with a new-line to avoid other messages being
    concatenated.
    
    Signed-off-by: Arvind Yadav <arvind.yadav.cs@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2d1d5172bf843fb44fcc7d3ff61501e9a6601e74
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Sep 18 15:46:47 2017 +0200

    clocksource/drivers/sh_cmt: Use of_device_get_match_data() helper
    
    Use the existing of_device_get_match_data() helper instead of
    open-coding its functionality.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d1d285972e24b63eeee8118359dcd4c451b295c5
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Sep 18 15:46:46 2017 +0200

    clocksource/drivers/sh_cmt: Remove unused "renesas, channels-mask" handling
    
    The in-driver channel configuration in sh_cmt_info.channels_mask is now
    always set for all CMT devices instantiated from DT.
    
    Hence the "renesas,channels-mask" property is no longer checked, and its
    handling can be removed, cfr. commit 4e18111ff38f0664 ("devicetree:
    bindings: Remove deprecated properties").
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8d50e9476bb4aea53fca12637e71d950deafdf37
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Sep 18 15:46:45 2017 +0200

    clocksource/drivers/sh_cmt: Mark "renesas,cmt-48-gen2" deprecated
    
    Document in the driver that "renesas,cmt-48-gen2" is deprecated, but
    still supported for backward compatibility with old DTBs, cfr. commit
    4e18111ff38f0664 ("devicetree: bindings: Remove deprecated
    properties").
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f11fb6df3c1924e3623d1afd1db23ea16c68fbb5
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Sep 18 15:46:44 2017 +0200

    clocksource/drivers/sh_cmt: Remove support for "renesas,cmt-32*"
    
    Remove driver matching support for the unused "renesas,cmt-32" and
    "renesas,cmt-32-fast" compatible values, cfr. commit 203bb3479958c48a
    ("devicetree: bindings: Remove unused 32-bit CMT bindings").
    
    As this removes the last user of SH_CMT_32BIT_FAST, all support for this
    variant is removed from the driver.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 83c79a6d8d7f4821ba0712da57f2f51326f0c447
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Mon Sep 18 15:46:43 2017 +0200

    clocksource/drivers/sh_cmt: Support separate R-Car Gen2 CMT0/1
    
    Add support for the new R-Car Gen2 CMT0 and CMT1 bindings. Support
    for the old DT binding is still kept around, however devices using
    such binding will be treated as a low-feature CMT0 device. If users
    want to make use of CMT1-specific features then they need to update
    their DTBs. No special CMT1-specific features are however implemented
    by his patch, only DT bindings are redone as groundwork for future
    feature patches.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 464eed841f54b56df35132434497235f06b154f6
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Mon Sep 18 15:46:42 2017 +0200

    clocksource/drivers/sh_cmt: Use 0x3f mask for SH_CMT_48BIT case
    
    Always use 0x3f as channel mask for the SH_CMT_48BIT type of devices.
    Once this patch is applied the "renesas,channels-mask" property will
    be ignored by the driver for older devices matching SH_CMT_48BIT. In
    the future when all CMT types store channel mask in the driver then
    we will be able to deprecate and remove "renesas,channels-mask" from DTS.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8642b31ba9eef8a01845146a26682d4869e62513
Author: Helge Deller <deller@gmx.de>
Date:   Wed Oct 18 22:25:00 2017 +0200

    parisc: Fix detection of nonsynchronous cr16 cycle counters
    
    For CPUs which have an unknown or invalid CPU location (physical location)
    assume that their cycle counters aren't syncronized across CPUs.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Fixes: c8c3735997a3 ("parisc: Enhance detection of synchronous cr16 clocksources")
    Cc: stable@vger.kernel.org # 4.13+
    Signed-off-by: Helge Deller <deller@gmx.de>

commit 1126e108a3ad8ae92a0532259e3da4b14072355f
Author: Jacopo Mondi <jacopo+renesas@jmondi.org>
Date:   Mon Oct 9 10:48:35 2017 +0200

    ARM: dts: gr-peach: Enable ostm0 and ostm1 timers
    
    Enable ostm0 and ostm1 timers to be used as clock source and clockevent
    source. The timers provides greater accuracy than the already enabled
    mtu2 one.
    
    With these enabled:
    
    clocksource: ostm: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 57352151442 ns
    sched_clock: 32 bits at 33MHz, resolution 30ns, wraps every 64440619504ns
    ostm: used for clocksource
    ostm: used for clock events
    
    Signed-off-by: Jacopo Mondi <jacopo+renesas@jmondi.org>
    Suggested-by: Chris Brandt <chris.brandt@renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 58178914ae5bad449d8e53e38c7171ec85ad2c9a
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Tue Oct 3 11:08:34 2017 +0800

    serial: 8250_fintek: UART dynamic clocksource on Fintek F81216H
    
    The F81216H had 4 clocksource 1.8432/18.432/14.769/24MHzand  baud rates can
    be up to 1.5Mbits with 24MHz. The register value and mask is the same with
    F81866. But F81866 register address is F2h, F81216H is F0h.
    
    We'll implements the dynamic clocksource in fintek_8250_set_termios().
    
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 195638b6d44f22c5fcbd428ebfe4b7c012c576f2
Author: Ji-Ze Hong (Peter Hong) <hpeter@gmail.com>
Date:   Tue Oct 3 11:08:33 2017 +0800

    serial: 8250_fintek: UART dynamic clocksource on Fintek F81866
    
    The F81866 had 4 clocksource 1.8432/18.432/14.769/24MHz and baud rates can
    be up to 1.5Mbits with 24MHz. We'll implements the dynamic clocksource in
    fintek_8250_set_termios().
    
    Signed-off-by: Ji-Ze Hong (Peter Hong) <hpeter+linux_kernel@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c3711d7fb4763c63b2654f2d07cbe21ca5aadd4
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Aug 31 17:12:48 2017 +0200

    timekeeping: Provide NMI safe access to clock realtime
    
    The configurable printk timestamping wants access to clock realtime. Right
    now there is no ktime_get_real_fast_ns() accessor because reading the
    monotonic base and the realtime offset cannot be done atomically. Contrary
    to boot time this offset can change during runtime and cause half updated
    readouts.
    
    struct tk_read_base was fully packed when the fast timekeeper access was
    implemented. commit ceea5e3771ed ("time: Fix clock->read(clock) race around
    clocksource changes") removed the 'read' function pointer from the
    structure, but of course left the comment stale.
    
    So now the structure can fit a new 64bit member w/o violating the cache
    line constraints.
    
    Add real_base to tk_read_base and update it in the fast timekeeper update
    sequence.
    
    Implement an accessor which follows the same scheme as the accessor to
    clock monotonic, but uses the new real_base to access clock real time.
    
    The runtime overhead for updating real_base is minimal as it just adds two
    cache hot values and stores them into an already dirtied cache line along
    with the other fast timekeeper updates.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead,org>
    Link: https://lkml.kernel.org/r/1505757060-2004-3-git-send-email-prarit@redhat.com

commit 16528a3fed5de9228de0dd7a9a4de3f3eb4c982a
Merge: 43d368a18f04 8fce3dc5c5d6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Sep 24 12:28:55 2017 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Ingo Molnar:
     "A clocksource driver section mismatch fix"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/integrator: Fix section mismatch warning

commit 8fce3dc5c5d6f6301f67311fa79f333902b58cea
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Sep 15 21:42:59 2017 +0200

    clocksource/integrator: Fix section mismatch warning
    
    gcc-4.6 and older fail to inline integrator_clocksource_init, so they
    end up showing a harmless warning:
    
    WARNING: vmlinux.o(.text+0x4aa94c): Section mismatch in reference from the function integrator_clocksource_init() to the function .init.text:clocksource_mmio_init()
    The function integrator_clocksource_init() references
    the function __init clocksource_mmio_init().
    This is often because integrator_clocksource_init lacks a __init
    annotation or the annotation of clocksource_mmio_init is wrong.
    
    Add the missing __init annotation that makes it build cleanly with all
    compilers.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Thierry Reding <treding@nvidia.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/20170915194310.1170514-1-arnd@arndb.de

commit 3fd45a136ff61bb54deab70fb2d534a85e40481f
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Sep 1 10:37:45 2017 +0200

    ARM: shmobile: rcar-gen2: Make sure CNTVOFF is initialized on CA7/15
    
    On Cortex-A7, the arch timer CNTVOFF register is uninitialized.
    Ideally it should be initialized by the boot loader, but it isn't.
    
    For the boot CPU, CNTVOFF is initialized by Linux since commit
    9ce3fa6816c2fb59 ("ARM: shmobile: rcar-gen2: Add CA7 arch_timer
    initialization for r8a7794").
    For secondary CPU cores, no such initialization is done.
    
    Hence when enabling SMP on r8a7794, the kernel log is spammed with:
    
        WARNING: Underflow in clocksource 'arch_sys_counter' observed, time update ignored.
                 Please report this, consider using a different clocksource, if possible.
                 Your kernel is probably still fine.
    
    As Marc Zyngier pointed out that Cortex-A15 and Cortex-A7 are similar with
    respect to CNTVOFF, we have been very lucky this just worked on R-Car
    Gen2 SoCs with Cortex-A15 cores.
    
    To fix this:
      - Move the existing inline asm code to initialize CNTVOFF to an
        assembler source file (adding comments and replacing hardcoded
        constants by definitions in the process), so it can be reused,
      - Perform the initialization of CNTVOFF on the boot CPU (Cortex-A15 or
        Cortex-A7) on all R-Car Gen2 and RZ/G1 parts,
      - Wrap the standard secondary_startup() routine inside a routine which
        initializes CNTVOFF.
    
    Based on patches by Hisashi Nakamura in the BSP.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Fabrizio Castro <fabrizio.castro@bp.renesas.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit dd90cccffc20a15d8e4c3ac8813f4b6a6cd4766f
Merge: b1b6f83ac938 51218298a25e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Sep 4 13:06:34 2017 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A rather small update for the time(r) subsystem:
    
       - A new clocksource driver IMX-TPM
    
       - Minor fixes to the alarmtimer facility
    
       - Device tree cleanups for Renesas drivers
    
       - A new kselftest and fixes for the timer related tests
    
       - Conversion of the clocksource drivers to use %pOF
    
       - Use the proper helpers to access rlimits in the posix-cpu-timer
         code"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      alarmtimer: Ensure RTC module is not unloaded
      clocksource: Convert to using %pOF instead of full_name
      clocksource/drivers/bcm2835: Remove message for a memory allocation failure
      devicetree: bindings: Remove deprecated properties
      devicetree: bindings: Remove unused 32-bit CMT bindings
      devicetree: bindings: Deprecate property, update example
      devicetree: bindings: r8a73a4 and R-Car Gen2 CMT bindings
      devicetree: bindings: R-Car Gen2 CMT0 and CMT1 bindings
      devicetree: bindings: Remove sh7372 CMT binding
      clocksource/drivers/imx-tpm: Add imx tpm timer support
      dt-bindings: timer: Add nxp tpm timer binding doc
      posix-cpu-timers: Use dedicated helper to access rlimit values
      alarmtimer: Fix unavailable wake-up source in sysfs
      timekeeping: Use proper timekeeper for debug code
      kselftests: timers: set-timer-lat: Add one-shot timer test cases
      kselftests: timers: set-timer-lat: Tweak reporting when timer fires early
      kselftests: timers: freq-step: Fix build warning
      kselftests: timers: freq-step: Define ADJ_SETOFFSET if device has older kernel headers

commit 095a7e388b5fbf8958686a90a04fe9387f6aa50b
Author: Paul Burton <paul.burton@mips.com>
Date:   Sat Aug 12 21:36:12 2017 -0700

    irqchip: mips-gic: Remove counter access functions
    
    The MIPS GIC clocksource driver is no longer using the accessor
    functions provided by the irqchip driver, so remove them.
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/17022/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit bc30658eff39c5bb562174fcf93618ab6a7afe88
Merge: 4e2a809703e2 469869d18a88
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Aug 31 16:03:47 2017 +0200

    Merge branch 'clockevents/4.14' of http://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clockevent updates from Daniel Lezcano:
    
     - Add the new imx-tpm driver (Dong Aisheng)
     - Remove DT deprecated binding for Renesas (Magnus Damm)
     - Remove error message on memory allocation (Markus Elfring)
     - Convert clocksource drivers to use %pOF

commit 469869d18a886e046161ca65516bd3ffcd2f804b
Author: Rob Herring <robh@kernel.org>
Date:   Tue Jul 18 16:42:53 2017 -0500

    clocksource: Convert to using %pOF instead of full_name
    
    Now that we have a custom printf format specifier, convert users of
    full_name to use %pOF instead. This is preparation to remove storing
    of the full path string for each node.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Gonzalez <marc_gonzalez@sigmadesigns.com>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Acked-by: Marc Gonzalez <marc_gonzalez@sigmadesigns.com>
    Acked-by: Alexandre TORGUE <alexandre.torgue@st.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e07127a077c781797f3dc7a873c3815e2a0e6e89
Author: Paul Burton <paul.burton@mips.com>
Date:   Sat Aug 12 21:36:11 2017 -0700

    clocksource: mips-gic-timer: Use new GIC accessor functions
    
    Switch from calling functions exported by the GIC interrupt controller
    to using new accessors provided by asm/mips-gic.h. This will allow the
    counter-handling functionality to be removed from the interrupt
    controller driver, where it doesn't really belong, and also allow for
    inlining of the accesses to the GIC.
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/17021/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit ebbe266509d8a5453f51f77277da65d870125b72
Author: Markus Elfring <elfring@users.sourceforge.net>
Date:   Sun Aug 27 21:38:13 2017 +0200

    clocksource/drivers/bcm2835: Remove message for a memory allocation failure
    
    The bcm2835_timer_init() function emits an error message in case of a memory
    allocation failure. This is pointless as the mm core does that already.
    
    Remove this message.
    
    This issue was detected by using the Coccinelle software.
    
    Signed-off-by: Markus Elfring <elfring@users.sourceforge.net>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 059ab7b82eecfc23bc58c491d72ee6b424163578
Author: Dong Aisheng <aisheng.dong@nxp.com>
Date:   Tue Aug 1 16:40:17 2017 +0800

    clocksource/drivers/imx-tpm: Add imx tpm timer support
    
    IMX Timer/PWM Module (TPM) supports both timer and pwm function while
    this patch only adds the timer support. PWM would be added later.
    
    The TPM counter, compare and capture registers are clocked by an
    asynchronous clock that can remain enabled in low power modes.
    
    NOTE: We observed in a very small probability, the bus fabric
    contention between GPU and A7 may results a few cycles delay
    of writing CNT registers which may cause the min_delta event got
    missed, so we need add a ETIME check here in case it happened.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Anson Huang <Anson.Huang@nxp.com>
    Cc: Bai Ping <ping.bai@nxp.com>
    Signed-off-by: Dong Aisheng <aisheng.dong@nxp.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8f14e26b63b1b6c7c681409e9db1bbf054e00b32
Author: Benjamin Gaignard <benjamin.gaignard@linaro.org>
Date:   Wed Aug 23 18:07:05 2017 +0200

    selftests/timers: make loop consistent with array size
    
    clocksource_list array is defined as char [10][30] so
    to initialise it we only have to iterate 10 times.
    
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

commit 2615a38f142ffda863dece40120d7fe69af46490
Merge: e46db8d2ef58 b60bf53abc03
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Aug 20 09:34:24 2017 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A few small fixes for timer drivers:
    
       - Prevent infinite recursion in the arm architected timer driver with
         ftrace
    
       - Propagate error codes to the caller in case of failure in EM STI
         driver
    
       - Adjust a bogus loop iteration in the arm architected timer driver
    
       - Add a missing Kconfig dependency to the pistachio clocksource to
         prevent build failures
    
       - Correctly check for IS_ERR() instead of NULL in the shared timer-of
         code"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/arm_arch_timer: Avoid infinite recursion when ftrace is enabled
      clocksource/drivers/Kconfig: Fix CLKSRC_PISTACHIO dependencies
      clocksource/drivers/timer-of: Checking for IS_ERR() instead of NULL
      clocksource/drivers/em_sti: Fix error return codes in em_sti_probe()
      clocksource/drivers/arm_arch_timer: Fix mem frame loop initialization

commit adb4f11e0a8f4e29900adb2b7af28b6bbd5c1fa4
Author: Ding Tianhong <dingtianhong@huawei.com>
Date:   Thu Aug 10 10:52:45 2017 +0800

    clocksource/drivers/arm_arch_timer: Avoid infinite recursion when ftrace is enabled
    
    On platforms with an arch timer erratum workaround, it's possible for
    arch_timer_reg_read_stable() to recurse into itself when certain
    tracing options are enabled, leading to stack overflows and related
    problems.
    
    For example, when PREEMPT_TRACER and FUNCTION_GRAPH_TRACER are
    selected, it's possible to trigger this with:
    
    $ mount -t debugfs nodev /sys/kernel/debug/
    $ echo function_graph > /sys/kernel/debug/tracing/current_tracer
    
    The problem is that in such cases, preempt_disable() instrumentation
    attempts to acquire a timestamp via trace_clock(), resulting in a call
    back to arch_timer_reg_read_stable(), and hence recursion.
    
    This patch changes arch_timer_reg_read_stable() to use
    preempt_{disable,enable}_notrace(), which avoids this.
    
    This problem is similar to the fixed by upstream commit 96b3d28bf4
    ("sched/clock: Prevent tracing recursion in sched_clock_cpu()").
    
    Fixes: 6acc71ccac71 ("arm64: arch_timer: Allows a CPU-specific erratum to only affect a subset of CPUs")
    Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 599dc457c79bde8bd4fe8bbb2ba1f30ef3d7a5c8
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Tue Jul 18 09:25:39 2017 +0100

    clocksource/drivers/Kconfig: Fix CLKSRC_PISTACHIO dependencies
    
    In v4.13, CLKSRC_PISTACHIO can select TIMER_OF on architectures without
    GENERIC_CLOCKEVENTS, resulting in a struct clock_event_device missing
    some required features and build breakage compiling timer_of.c. One of
    the symbols selecting TIMER_OF is CLKSRC_PISTACHIO, so add the
    dependency on GENERIC_CLOCKEVENTS.
    
    Thanks to kbuild test robot for finding this error
    (https://lkml.org/lkml/2017/7/16/249)
    
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Suggested-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9e80dbd87286d3252ac2f78c6465c16e2ec8d476
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jul 10 10:22:25 2017 +0300

    clocksource/drivers/timer-of: Checking for IS_ERR() instead of NULL
    
    The current code checks the return value of the of_io_request_and_map()
    function as it was returning a NULL pointer in case of error.
    
    However, it returns an error code encoded in the pointer return value, not a
    NULL value. Fix this by checking the returned pointer against IS_ERR() and
    return the error with PTR_ERR().
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5c23a558a65406cac472df07fd26a2688a42cad2
Author: Gustavo A. R. Silva <garsilva@embeddedor.com>
Date:   Fri Jun 30 01:14:45 2017 -0500

    clocksource/drivers/em_sti: Fix error return codes in em_sti_probe()
    
    Propagate the return values of platform_get_irq and devm_request_irq on
    failure.
    
    Cc: Frans Klaver <fransklaver@gmail.com>
    Signed-off-by: Gustavo A. R. Silva <garsilva@embeddedor.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d197f7988721221fac64f899efd7657c15281810
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Mon Jul 31 11:37:28 2017 -0700

    clocksource/drivers/arm_arch_timer: Fix mem frame loop initialization
    
    The loop to find the best memory frame in arch_timer_mem_acpi_init()
    initializes the loop counter with itself ('i = i'), which is suspicious
    in the first place and pointed out by clang. The loop condition is
    'i < timer_count' and a prior for loop exits when 'i' reaches
    'timer_count', therefore the second loop is never executed.
    
    Initialize the loop counter with 0 to iterate over all timers, which
    supposedly was the intention before the typo monster attacked.
    
    Fixes: c2743a36765d3 ("clocksource: arm_arch_timer: add GTDT support for memory-mapped timer")
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Reported-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 450f9689f294c331c56ec37d68302ccc19c7caa2
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Tue Aug 1 09:02:57 2017 +0100

    clocksource/arm_arch_timer: Use static_branch_enable_cpuslocked()
    
    Use the new static_branch_enable_cpuslocked() function to switch
    the workaround static key on the CPU hotplug path.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/20170801080257.5056-5-marc.zyngier@arm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit ca0a05a98f3090a77b678eaa778a30febc5795b8
Author: Marcin Wojtas <mw@semihalf.com>
Date:   Tue Aug 1 18:36:22 2017 +0200

    ARM: mvebu: enable ARM_GLOBAL_TIMER compilation Armada 38x platforms
    
    Armada 38x SoCs along with legacy timer (time-armada-370-xp.c),
    comprise generic Cortex-A9 global timer (arm_global_timer.c).
    Enable its compilation. The system clocksource subsystem
    will pick one of above two available ones in case the global
    timer node is present in the device tree.
    
    Signed-off-by: Marcin Wojtas <mw@semihalf.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>

commit faa04f63d82de2db5757469c6f07a1c4892d2bd4
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Jun 8 16:44:20 2017 -0700

    time: Fix clock->read(clock) race around clocksource changes
    
    [ Upstream commit ceea5e3771ed2378668455fa21861bead7504df5 ]
    
    In tests, which excercise switching of clocksources, a NULL
    pointer dereference can be observed on AMR64 platforms in the
    clocksource read() function:
    
    u64 clocksource_mmio_readl_down(struct clocksource *c)
    {
            return ~(u64)readl_relaxed(to_mmio_clksrc(c)->reg) & c->mask;
    }
    
    This is called from the core timekeeping code via:
    
            cycle_now = tkr->read(tkr->clock);
    
    tkr->read is the cached tkr->clock->read() function pointer.
    When the clocksource is changed then tkr->clock and tkr->read
    are updated sequentially. The code above results in a sequential
    load operation of tkr->read and tkr->clock as well.
    
    If the store to tkr->clock hits between the loads of tkr->read
    and tkr->clock, then the old read() function is called with the
    new clock pointer. As a consequence the read() function
    dereferences a different data structure and the resulting 'reg'
    pointer can point anywhere including NULL.
    
    This problem was introduced when the timekeeping code was
    switched over to use struct tk_read_base. Before that, it was
    theoretically possible as well when the compiler decided to
    reload clock in the code sequence:
    
         now = tk->clock->read(tk->clock);
    
    Add a helper function which avoids the issue by reading
    tk_read_base->clock once into a local variable clk and then issue
    the read function via clk->read(clk). This guarantees that the
    read() function always gets the proper clocksource pointer handed
    in.
    
    Since there is now no use for the tkr.read pointer, this patch
    also removes it, and to address stopping the fast timekeeper
    during suspend/resume, it introduces a dummy clocksource to use
    rather then just a dummy read function.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: stable <stable@vger.kernel.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Cc: Daniel Mentz <danielmentz@google.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 8e44a3517763a89e1135024eab12ef3b24819dc0
Author: Wanpeng Li <wanpeng.li@hotmail.com>
Date:   Thu Jun 29 19:15:11 2017 +0200

    sched/cputime: Accumulate vtime on top of nsec clocksource
    
    commit 2a42eb9594a1480b4ead9e036e06ee1290e5fa6d upstream.
    
    Currently the cputime source used by vtime is jiffies. When we cross
    a context boundary and jiffies have changed since the last snapshot, the
    pending cputime is accounted to the switching out context.
    
    This system works ok if the ticks are not aligned across CPUs. If they
    instead are aligned (ie: all fire at the same time) and the CPUs run in
    userspace, the jiffies change is only observed on tick exit and therefore
    the user cputime is accounted as system cputime. This is because the
    CPU that maintains timekeeping fires its tick at the same time as the
    others. It updates jiffies in the middle of the tick and the other CPUs
    see that update on IRQ exit:
    
        CPU 0 (timekeeper)                  CPU 1
        -------------------              -------------
                          jiffies = N
        ...                              run in userspace for a jiffy
        tick entry                       tick entry (sees jiffies = N)
        set jiffies = N + 1
        tick exit                        tick exit (sees jiffies = N + 1)
                                                    account 1 jiffy as stime
    
    Fix this with using a nanosec clock source instead of jiffies. The
    cputime is then accumulated and flushed everytime the pending delta
    reaches a jiffy in order to mitigate the accounting overhead.
    
    [ fweisbec: changelog, rebase on struct vtime, field renames, add delta
      on cputime readers, keep idle vtime as-is (low overhead accounting),
      harmonize clock sources. ]
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Reported-by: Luiz Capitulino <lcapitulino@redhat.com>
    Tested-by: Luiz Capitulino <lcapitulino@redhat.com>
    Signed-off-by: Wanpeng Li <wanpeng.li@hotmail.com>
    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Rik van Riel <riel@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Wanpeng Li <kernellwp@gmail.com>
    Link: http://lkml.kernel.org/r/1498756511-11714-6-git-send-email-fweisbec@gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e234b4a807202990a0aec4e74aa552fe76b5b6d2
Merge: 5a77f0254b35 32f2fea6e77e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 21 11:18:09 2017 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Ingo Molnar:
     "A timer_irq_init() clocksource API robustness fix"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/timer-of: Handle of_irq_get_byname() result correctly

commit 32f2fea6e77e64cd4045ec2d5deb879aada3b476
Author: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
Date:   Mon Jul 17 21:00:44 2017 +0300

    clocksource/drivers/timer-of: Handle of_irq_get_byname() result correctly
    
    of_irq_get_byname() may return a negative error number as well as 0 on
    failure, while timer_irq_init() only checks for 0, blithely continuing with
    the call to request_[percpu_]irq() -- those functions expect *unsigned int*,
    so would probably fail anyway when a large IRQ number resulting from a
    conversion of a negative error number is passed to them... This, however,
    is incorrect behavior -- error number is not IRQ number.
    
    Filter out the negative error numbers, complain, and return them to the
    timer_irq_init()'s callers...
    
    Fixes: dc11bae78529 ("clocksource/drivers: Add timer-of common init routine")
    Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/20170717180114.678825147@cogentembedded.com

commit 4fde846ac0f019b7c877da35e1c1517d79e17ffc
Merge: c3931a87db9e 242fc35290bd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jul 9 10:52:16 2017 -0700

    Merge branch 'sched-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull scheduler fixes from Thomas Gleixner:
     "This scheduler update provides:
    
       - The (hopefully) final fix for the vtime accounting issues which
         were around for quite some time
    
       - Use types known to user space in UAPI headers to unbreak user space
         builds
    
       - Make load balancing respect the current scheduling domain again
         instead of evaluating unrelated CPUs"
    
    * 'sched-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      sched/headers/uapi: Fix linux/sched/types.h userspace compilation errors
      sched/fair: Fix load_balance() affinity redo path
      sched/cputime: Accumulate vtime on top of nsec clocksource
      sched/cputime: Move the vtime task fields to their own struct
      sched/cputime: Rename vtime fields
      sched/cputime: Always set tsk->vtime_snap_whence after accounting vtime
      vtime, sched/cputime: Remove vtime_account_user()
      Revert "sched/cputime: Refactor the cputime_adjust() code"

commit 875cfdbe15cc75390f06d0f38cf6b1b03b4a3cd3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jun 23 10:50:38 2017 +0200

    x86/mshyperv: Remove excess #includes from mshyperv.h
    
    commit 26fcd952d5c977a94ac64bb44ed409e37607b2c9 upstream.
    
    A recent commit included linux/slab.h in linux/irq.h. This breaks the build
    of vdso32 on a 64-bit kernel.
    
    The reason is that linux/irq.h gets included into the vdso code via
    linux/interrupt.h which is included from asm/mshyperv.h. That makes the
    32-bit vdso compile fail, because slab.h includes the pgtable headers for
    64-bit on a 64-bit build.
    
    Neither linux/clocksource.h nor linux/interrupt.h are needed in the
    mshyperv.h header file itself - it has a dependency on <linux/atomic.h>.
    
    Remove the includes and unbreak the build.
    
    Reported-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: K. Y. Srinivasan <kys@microsoft.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: devel@linuxdriverproject.org
    Fixes: dee863b571b0 ("hv: export current Hyper-V clocksource")
    Link: http://lkml.kernel.org/r/alpine.DEB.2.20.1706231038460.2647@nanos
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a42eb9594a1480b4ead9e036e06ee1290e5fa6d
Author: Wanpeng Li <wanpeng.li@hotmail.com>
Date:   Thu Jun 29 19:15:11 2017 +0200

    sched/cputime: Accumulate vtime on top of nsec clocksource
    
    Currently the cputime source used by vtime is jiffies. When we cross
    a context boundary and jiffies have changed since the last snapshot, the
    pending cputime is accounted to the switching out context.
    
    This system works ok if the ticks are not aligned across CPUs. If they
    instead are aligned (ie: all fire at the same time) and the CPUs run in
    userspace, the jiffies change is only observed on tick exit and therefore
    the user cputime is accounted as system cputime. This is because the
    CPU that maintains timekeeping fires its tick at the same time as the
    others. It updates jiffies in the middle of the tick and the other CPUs
    see that update on IRQ exit:
    
        CPU 0 (timekeeper)                  CPU 1
        -------------------              -------------
                          jiffies = N
        ...                              run in userspace for a jiffy
        tick entry                       tick entry (sees jiffies = N)
        set jiffies = N + 1
        tick exit                        tick exit (sees jiffies = N + 1)
                                                    account 1 jiffy as stime
    
    Fix this with using a nanosec clock source instead of jiffies. The
    cputime is then accumulated and flushed everytime the pending delta
    reaches a jiffy in order to mitigate the accounting overhead.
    
    [ fweisbec: changelog, rebase on struct vtime, field renames, add delta
      on cputime readers, keep idle vtime as-is (low overhead accounting),
      harmonize clock sources. ]
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Reported-by: Luiz Capitulino <lcapitulino@redhat.com>
    Tested-by: Luiz Capitulino <lcapitulino@redhat.com>
    Signed-off-by: Wanpeng Li <wanpeng.li@hotmail.com>
    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Rik van Riel <riel@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Wanpeng Li <kernellwp@gmail.com>
    Link: http://lkml.kernel.org/r/1498756511-11714-6-git-send-email-fweisbec@gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit e8547112910540afb71589ee807ae6a4259f9755
Merge: 9ce32ac8f837 ffe3744a591f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 4 14:47:47 2017 -0700

    Merge tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC driver updates from Arnd Bergmann:
     "New SoC specific drivers:
    
       - NVIDIA Tegra PM Domain support for newer SoCs (Tegra186 and later)
         based on the "BPMP" firmware
    
       - Clocksource and system controller drivers for the newly added
         Action Semi platforms (both arm and arm64).
    
      Reset subsystem, merged through arm-soc by tradition:
    
       - New drivers for Altera Stratix10, TI Keystone and Cortina Gemini
         SoCs
    
       - Various subsystem-wide cleanups
    
      Updates for existing SoC-specific drivers
    
       - TI GPMC (General Purpose Memory Controller)
    
       - Mediatek "scpsys" system controller support for MT6797
    
       - Broadcom "brcmstb_gisb" bus arbitrer
    
       - ARM SCPI firmware
    
       - Renesas "SYSC" system controller
    
      One more driver update was submitted for the Freescale/NXP DPAA data
      path acceleration that has previously been used on PowerPC chips. I
      ended up postponing the merge until some API questions for its unusual
      MMIO access are resolved"
    
    * tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (35 commits)
      clocksource: owl: Add S900 support
      clocksource: Add Owl timer
      soc: renesas: rcar-sysc: Use GENPD_FLAG_ALWAYS_ON
      firmware: tegra: Fix locking bugs in BPMP
      soc/tegra: flowctrl: Fix error handling
      soc/tegra: bpmp: Implement generic PM domains
      soc/tegra: bpmp: Update ABI header
      PM / Domains: Allow overriding the ->xlate() callback
      soc: brcmstb: enable drivers for ARM64 and BMIPS
      soc: renesas: Rework Kconfig and Makefile logic
      reset: Add the TI SCI reset driver
      dt-bindings: reset: Add TI SCI reset binding
      reset: use kref for reference counting
      soc: qcom: smsm: Improve error handling, quiesce probe deferral
      cpufreq: scpi: use new scpi_ops functions to remove duplicate code
      firmware: arm_scpi: add support to populate OPPs and get transition latency
      dt-bindings: reset: Add reset manager offsets for Stratix10
      memory: omap-gpmc: add error message if bank-width property is absent
      memory: omap-gpmc: make dts snippet include semicolon
      reset: Add a Gemini reset controller
      ...

commit 1b044f1cfc65a7d90b209dfabd57e16d98b58c5b
Merge: e0f3e8f14da8 2287d8664fe7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 3 16:14:51 2017 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "A rather large update for timers/timekeeping:
    
       - compat syscall consolidation (Al Viro)
    
       - Posix timer consolidation (Christoph Helwig / Thomas Gleixner)
    
       - Cleanup of the device tree based initialization for clockevents and
         clocksources (Daniel Lezcano)
    
       - Consolidation of the FTTMR010 clocksource/event driver (Linus
         Walleij)
    
       - The usual set of small fixes and updates all over the place"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (93 commits)
      timers: Make the cpu base lock raw
      clocksource/drivers/mips-gic-timer: Fix an error code in 'gic_clocksource_of_init()'
      clocksource/drivers/fsl_ftm_timer: Unmap region obtained by of_iomap
      clocksource/drivers/tcb_clksrc: Make IO endian agnostic
      clocksource/drivers/sun4i: Switch to the timer-of common init
      clocksource/drivers/timer-of: Fix invalid iomap check
      Revert "ktime: Simplify ktime_compare implementation"
      clocksource/drivers: Fix uninitialized variable use in timer_of_init
      kselftests: timers: Add test for frequency step
      kselftests: timers: Fix inconsistency-check to not ignore first timestamp
      time: Add warning about imminent deprecation of CONFIG_GENERIC_TIME_VSYSCALL_OLD
      time: Clean up CLOCK_MONOTONIC_RAW time handling
      posix-cpu-timers: Make timespec to nsec conversion safe
      itimer: Make timeval to nsec conversion range limited
      timers: Fix parameter description of try_to_del_timer_sync()
      ktime: Simplify ktime_compare implementation
      clocksource/drivers/fttmr010: Factor out clock read code
      clocksource/drivers/fttmr010: Implement delay timer
      clocksource/drivers: Add timer-of common init routine
      clocksource/drivers/tcb_clksrc: Save timer context on suspend/resume
      ...

commit e5859eb84576ce7a0d95be6224d2e269c8daa741
Merge: 058e88d37f87 33f9e02495d1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 3 15:27:58 2017 -0700

    Merge branch 'parisc-4.13-1' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux
    
    Pull parisc updates from Helge Deller:
     "Main changes are:
    
       - Added support to the parisc dma functions to return DMA_ERROR_CODE
         if DMA isn't possible. This fixes a long standing kernel crash if
         parport_pc is enabled (by Thomas Bogendoerfer, marked for stable
         series).
    
       - Use the compat_sys_keyctl() in compat mode (by Eric Biggers, marked
         for stable series).
    
       - Initial support for the Page Deallocation Table (PDT) which is
         maintained by firmware and holds the list of memory addresses which
         had physical errors. By checking that list we can prevent Linux to
         use those broken memory areas.
    
       - Ensure IRQs are off in switch_mm().
    
       - Report SIGSEGV instead of SIGBUS when running out of stack.
    
       - Mark the cr16 clocksource stable on single-socket and single-core
         machines"
    
    * 'parisc-4.13-1' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux:
      parisc: DMA API: return error instead of BUG_ON for dma ops on non dma devs
      parisc: Report SIGSEGV instead of SIGBUS when running out of stack
      parisc: use compat_sys_keyctl()
      parisc: Don't hardcode PSW values in hpmc code
      parisc: Don't hardcode PSW values in gsc_*() functions
      parisc: Avoid zeroing gr[0] in fixup_exception()
      parisc/mm: Ensure IRQs are off in switch_mm()
      parisc: Add Page Deallocation Table (PDT) support
      parisc: Enhance detection of synchronous cr16 clocksources
      parisc: Drop per_cpu uaccess related exception_data struct
      parisc: Inline trivial exception code in lusercopy.S

commit ffe3744a591fdce695da6b891378261e2caedc69
Merge: 4312fc34f6d0 d97d0f1b4630
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Jun 29 17:34:57 2017 +0200

    Merge tag 'actions-drivers-for-4.13' of git://git.kernel.org/pub/scm/linux/kernel/git/afaerber/linux-actions into next/drivers
    
    Pull "Actions Semi SoC drivers for 4.13" from Andreas Färber:
    
    This adds clock source and power domain drivers for S500/S900.
    
    * tag 'actions-drivers-for-4.13' of git://git.kernel.org/pub/scm/linux/kernel/git/afaerber/linux-actions:
      soc: actions: owl-sps: Factor out owl_sps_set_pg() for power-gating
      soc: actions: Add Owl SPS
      dt-bindings: power: Add Owl SPS power domains
      clocksource: owl: Add S900 support
      clocksource: Add Owl timer

commit fa79bdd4c3e513d68bd13b40e7dc81b32376dc22
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Jun 8 16:44:20 2017 -0700

    time: Fix clock->read(clock) race around clocksource changes
    
    commit ceea5e3771ed2378668455fa21861bead7504df5 upstream.
    
    In tests, which excercise switching of clocksources, a NULL
    pointer dereference can be observed on AMR64 platforms in the
    clocksource read() function:
    
    u64 clocksource_mmio_readl_down(struct clocksource *c)
    {
            return ~(u64)readl_relaxed(to_mmio_clksrc(c)->reg) & c->mask;
    }
    
    This is called from the core timekeeping code via:
    
            cycle_now = tkr->read(tkr->clock);
    
    tkr->read is the cached tkr->clock->read() function pointer.
    When the clocksource is changed then tkr->clock and tkr->read
    are updated sequentially. The code above results in a sequential
    load operation of tkr->read and tkr->clock as well.
    
    If the store to tkr->clock hits between the loads of tkr->read
    and tkr->clock, then the old read() function is called with the
    new clock pointer. As a consequence the read() function
    dereferences a different data structure and the resulting 'reg'
    pointer can point anywhere including NULL.
    
    This problem was introduced when the timekeeping code was
    switched over to use struct tk_read_base. Before that, it was
    theoretically possible as well when the compiler decided to
    reload clock in the code sequence:
    
         now = tk->clock->read(tk->clock);
    
    Add a helper function which avoids the issue by reading
    tk_read_base->clock once into a local variable clk and then issue
    the read function via clk->read(clk). This guarantees that the
    read() function always gets the proper clocksource pointer handed
    in.
    
    Since there is now no use for the tkr.read pointer, this patch
    also removes it, and to address stopping the fast timekeeper
    during suspend/resume, it introduces a dummy clocksource to use
    rather then just a dummy read function.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Cc: Daniel Mentz <danielmentz@google.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02a37ccd6347897b9227c8ff7f11526321ec2048
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Jun 8 16:44:20 2017 -0700

    time: Fix clock->read(clock) race around clocksource changes
    
    commit ceea5e3771ed2378668455fa21861bead7504df5 upstream.
    
    In tests, which excercise switching of clocksources, a NULL
    pointer dereference can be observed on AMR64 platforms in the
    clocksource read() function:
    
    u64 clocksource_mmio_readl_down(struct clocksource *c)
    {
            return ~(u64)readl_relaxed(to_mmio_clksrc(c)->reg) & c->mask;
    }
    
    This is called from the core timekeeping code via:
    
            cycle_now = tkr->read(tkr->clock);
    
    tkr->read is the cached tkr->clock->read() function pointer.
    When the clocksource is changed then tkr->clock and tkr->read
    are updated sequentially. The code above results in a sequential
    load operation of tkr->read and tkr->clock as well.
    
    If the store to tkr->clock hits between the loads of tkr->read
    and tkr->clock, then the old read() function is called with the
    new clock pointer. As a consequence the read() function
    dereferences a different data structure and the resulting 'reg'
    pointer can point anywhere including NULL.
    
    This problem was introduced when the timekeeping code was
    switched over to use struct tk_read_base. Before that, it was
    theoretically possible as well when the compiler decided to
    reload clock in the code sequence:
    
         now = tk->clock->read(tk->clock);
    
    Add a helper function which avoids the issue by reading
    tk_read_base->clock once into a local variable clk and then issue
    the read function via clk->read(clk). This guarantees that the
    read() function always gets the proper clocksource pointer handed
    in.
    
    Since there is now no use for the tkr.read pointer, this patch
    also removes it, and to address stopping the fast timekeeper
    during suspend/resume, it introduces a dummy clocksource to use
    rather then just a dummy read function.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Cc: Daniel Mentz <danielmentz@google.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fecf3977defb3161ba194e5ddbdeca9be638377
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Jun 8 16:44:20 2017 -0700

    time: Fix clock->read(clock) race around clocksource changes
    
    commit ceea5e3771ed2378668455fa21861bead7504df5 upstream.
    
    In tests, which excercise switching of clocksources, a NULL
    pointer dereference can be observed on AMR64 platforms in the
    clocksource read() function:
    
    u64 clocksource_mmio_readl_down(struct clocksource *c)
    {
            return ~(u64)readl_relaxed(to_mmio_clksrc(c)->reg) & c->mask;
    }
    
    This is called from the core timekeeping code via:
    
            cycle_now = tkr->read(tkr->clock);
    
    tkr->read is the cached tkr->clock->read() function pointer.
    When the clocksource is changed then tkr->clock and tkr->read
    are updated sequentially. The code above results in a sequential
    load operation of tkr->read and tkr->clock as well.
    
    If the store to tkr->clock hits between the loads of tkr->read
    and tkr->clock, then the old read() function is called with the
    new clock pointer. As a consequence the read() function
    dereferences a different data structure and the resulting 'reg'
    pointer can point anywhere including NULL.
    
    This problem was introduced when the timekeeping code was
    switched over to use struct tk_read_base. Before that, it was
    theoretically possible as well when the compiler decided to
    reload clock in the code sequence:
    
         now = tk->clock->read(tk->clock);
    
    Add a helper function which avoids the issue by reading
    tk_read_base->clock once into a local variable clk and then issue
    the read function via clk->read(clk). This guarantees that the
    read() function always gets the proper clocksource pointer handed
    in.
    
    Since there is now no use for the tkr.read pointer, this patch
    also removes it, and to address stopping the fast timekeeper
    during suspend/resume, it introduces a dummy clocksource to use
    rather then just a dummy read function.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Cc: Daniel Mentz <danielmentz@google.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efe4a1acdc2c70da9025cf405112667e5580a572
Author: Paul Burton <paul.burton@mips.com>
Date:   Fri Jun 2 12:29:58 2017 -0700

    MIPS: SEAD-3: Remove GIC timer from DT
    
    The SEAD-3 board doesn't & never has configured the GIC frequency.
    Remove the timer node from the DT in order to avoid attempting to probe
    the GIC clocksource/clockevent driver which will produce error messages
    such as these during boot:
    
    [    0.000000] GIC frequency not specified.
    [    0.000000] Failed to initialize '/interrupt-controller@1b1c0000/timer': -22
    [    0.000000] clocksource_probe: no matching clocksources found
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/16188/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 8c3ecd60e2ee6268e1735952e5b544f05b4dbb5a
Author: Christophe Jaillet <christophe.jaillet@wanadoo.fr>
Date:   Fri Jun 23 21:55:10 2017 +0200

    clocksource/drivers/mips-gic-timer: Fix an error code in 'gic_clocksource_of_init()'
    
    'clk' is a valid pointer at this point. So calling PTR_ERR on it is
    pointess.
    
    Return the error code from 'clk_prepare_enable()' if it fails instead.
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b70957f656cc070eaaac60b00dca5b40967cb8d6
Author: Arvind Yadav <arvind.yadav.cs@gmail.com>
Date:   Tue Jun 20 16:33:30 2017 +0530

    clocksource/drivers/fsl_ftm_timer: Unmap region obtained by of_iomap
    
    In case of error at init time, rollback iomapping.
    
    Signed-off-by: Arvind Yadav <arvind.yadav.cs@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6ec8be251fb445dcc43086a485fec1b2708c09da
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Fri Jun 23 17:03:31 2017 +0200

    clocksource/drivers/tcb_clksrc: Make IO endian agnostic
    
    Now that AVR32 is gone, we can use the proper IO accessors that are
    correctly handling endianness.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 239751edad27d4fae964fb1f4ca1fedd742c8365
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 6 23:07:51 2017 +0200

    clocksource/drivers/sun4i: Switch to the timer-of common init
    
    Previously a framework to factor out the drivers init function has been
    merged.
    
    Use this common framework in this driver, we get:
    
    Before:
    
    text    data     bss     dec   hex filename
    1787     384      12    2183   887 drivers/clocksource/sun4i_timer.o
    
    After:
    
    text    data     bss     dec   hex filename
    1407     512       0    1919   77f drivers/clocksource/sun4i_timer.o
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Tested-by: Chen-Yu Tsai <wens@csie.org>

commit 22ece4e3df6335e691207de1198a609e761b8640
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 20 07:51:11 2017 +0200

    clocksource/drivers/timer-of: Fix invalid iomap check
    
    A typo in the code checks the return value of iomap against !NULL
    and, thus, fails everytime the mapping succeed.
    
    Fix this by inverting the condition in the check.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5f4b37d8784da4217ede8f8bcd301686853dcf8c
Merge: 35d8d5d47c0e 8e6cec1c7c5a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jun 25 11:59:19 2017 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A few fixes for timekeeping and timers:
    
       - Plug a subtle race due to a missing READ_ONCE() in the timekeeping
         code where reloading of a pointer results in an inconsistent
         callback argument being supplied to the clocksource->read function.
    
       - Correct the CLOCK_MONOTONIC_RAW sub-nanosecond accounting in the
         time keeping core code, to prevent a possible discontuity.
    
       - Apply a similar fix to the arm64 vdso clock_gettime()
         implementation
    
       - Add missing includes to clocksource drivers, which relied on
         indirect includes which fails in certain configs.
    
       - Use the proper iomem pointer for read/iounmap in a probe function"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      arm64/vdso: Fix nsec handling for CLOCK_MONOTONIC_RAW
      time: Fix CLOCK_MONOTONIC_RAW sub-nanosecond accounting
      time: Fix clock->read(clock) race around clocksource changes
      clocksource: Explicitly include linux/clocksource.h when needed
      clocksource/drivers/arm_arch_timer: Fix read and iounmap of incorrect variable

commit 26fcd952d5c977a94ac64bb44ed409e37607b2c9
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jun 23 10:50:38 2017 +0200

    x86/mshyperv: Remove excess #includes from mshyperv.h
    
    A recent commit included linux/slab.h in linux/irq.h. This breaks the build
    of vdso32 on a 64-bit kernel.
    
    The reason is that linux/irq.h gets included into the vdso code via
    linux/interrupt.h which is included from asm/mshyperv.h. That makes the
    32-bit vdso compile fail, because slab.h includes the pgtable headers for
    64-bit on a 64-bit build.
    
    Neither linux/clocksource.h nor linux/interrupt.h are needed in the
    mshyperv.h header file itself - it has a dependency on <linux/atomic.h>.
    
    Remove the includes and unbreak the build.
    
    Reported-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: K. Y. Srinivasan <kys@microsoft.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: devel@linuxdriverproject.org
    Fixes: dee863b571b0 ("hv: export current Hyper-V clocksource")
    Link: http://lkml.kernel.org/r/alpine.DEB.2.20.1706231038460.2647@nanos
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit a1272dd5531b259bf7313ac7597a67362698038c
Author: Zhenzhong Duan <zhenzhong.duan@oracle.com>
Date:   Wed Jun 21 01:23:37 2017 -0700

    x86/tsc: Call check_system_tsc_reliable() before unsynchronized_tsc()
    
    tsc_clocksource_reliable is initialized in check_system_tsc_reliable(), but
    it is checked in unsynchronized_tsc() which is called before the
    initialization.
    
    In practice that's not an issue because systems which mark the TSC
    reliable have X86_FEATURE_CONSTANT_TSC set as well, which is evaluated
    in unsynchronized_tsc() before tsc_clocksource_reliable.
    
    Reorder the calls so initialization happens before usage.
    
    [ tglx: Massaged changelog ]
    
    Signed-off-by: Zhenzhong Duan <zhenzhong.duan@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/b1532ef7-cd9f-45f7-9f49-48dd2a5c2495@default

commit b7dcc4eacc45263ac5d3a0bd78c64e9ff7c94c13
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Jun 21 23:49:54 2017 +0200

    clocksource/drivers: Fix uninitialized variable use in timer_of_init
    
    If none of the flags are set, 'ret' is uninitialized as pointed out
    by gcc:
    
    drivers/clocksource/timer-of.c: In function 'timer_of_init':
    drivers/clocksource/timer-of.c:160:9: error: 'ret' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    
    Since calling the function without any of the flags is an error,
    set the return value to -EINVAL for that case.
    
    [ tglx: Get rid of the silly backwards goto while at it ]
    
    Fixes: dc11bae78529 ("clocksource/drivers: Add timer-of common init routine")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/20170621215005.3870011-1-arnd@arndb.de

commit 6b847d795cf4ab3e574f4fcf7193fe245908a195
Author: Santosh Sivaraj <santosh@fossix.org>
Date:   Tue Jun 20 13:14:47 2017 +0530

    powerpc/time: Fix tracing in time.c
    
    Since trace_clock is in a different file and already marked with notrace,
    enable tracing in time.c by removing it from the disabled list in Makefile.
    Also annotate clocksource read functions and sched_clock with notrace.
    
    Testing: Timer and ftrace selftests run with different trace clocks.
    
    Acked-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Santosh Sivaraj <santosh@fossix.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

commit e707eb762cf38b63402c1a124192f648a0629168
Merge: 938e7cf2d569 c477990295a7
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 20 12:35:36 2017 +0200

    Merge branch 'clockevents/4.13' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clockevent changes from Daniel Lezcano:
    
     - Factored out moxart, aspeed, cortina drivers into a generic timer fttrm010.
       Take the opportunity to add the delay timer (Linus Walleij)
    
     - Saved / restored tcb atmel context at suspend/resume (Alexandre Belloni)
    
     - Added ast2500 compatible string and fixed aspeed2500 initialization (Daniel
       Lezcano)
    
     - Added clock names property for aspeed (Andrew Jeffery)
    
     - Renamed clocksource_of to timer_of (Daniel Lezcano)
    
     - Added a common timer init routine (Daniel Lezcano)

commit ceea5e3771ed2378668455fa21861bead7504df5
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Jun 8 16:44:20 2017 -0700

    time: Fix clock->read(clock) race around clocksource changes
    
    In tests, which excercise switching of clocksources, a NULL
    pointer dereference can be observed on AMR64 platforms in the
    clocksource read() function:
    
    u64 clocksource_mmio_readl_down(struct clocksource *c)
    {
            return ~(u64)readl_relaxed(to_mmio_clksrc(c)->reg) & c->mask;
    }
    
    This is called from the core timekeeping code via:
    
            cycle_now = tkr->read(tkr->clock);
    
    tkr->read is the cached tkr->clock->read() function pointer.
    When the clocksource is changed then tkr->clock and tkr->read
    are updated sequentially. The code above results in a sequential
    load operation of tkr->read and tkr->clock as well.
    
    If the store to tkr->clock hits between the loads of tkr->read
    and tkr->clock, then the old read() function is called with the
    new clock pointer. As a consequence the read() function
    dereferences a different data structure and the resulting 'reg'
    pointer can point anywhere including NULL.
    
    This problem was introduced when the timekeeping code was
    switched over to use struct tk_read_base. Before that, it was
    theoretically possible as well when the compiler decided to
    reload clock in the code sequence:
    
         now = tk->clock->read(tk->clock);
    
    Add a helper function which avoids the issue by reading
    tk_read_base->clock once into a local variable clk and then issue
    the read function via clk->read(clk). This guarantees that the
    read() function always gets the proper clocksource pointer handed
    in.
    
    Since there is now no use for the tkr.read pointer, this patch
    also removes it, and to address stopping the fast timekeeper
    during suspend/resume, it introduces a dummy clocksource to use
    rather then just a dummy read function.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <stephen.boyd@linaro.org>
    Cc: stable <stable@vger.kernel.org>
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Cc: Daniel Mentz <danielmentz@google.com>
    Link: http://lkml.kernel.org/r/1496965462-20003-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit a925810f6ebb89ef94977c4f499264c8fd199dff
Author: Leo Yan <leo.yan@linaro.org>
Date:   Mon May 22 12:52:27 2017 +0800

    clk: Hi3660: register fixed_rate_clks with CLK_OF_DECLARE_DRIVER
    
    The timer will register into system at very early phase at kernel boot;
    if timer needs to use clock, the clock should be get ready in function
    of_clk_init() so later the timer driver probe can retrieve clock
    successfully. This is finished in below flow on arm64:
    
      start_kernel()
        `-> time_init()
              `-> of_clk_init(NULL)    => register timer's clock
              `-> clocksource_probe()  => register timer
    
    On Hi3660 the sp804 timer uses clock "osc32k", this clock is registered
    as platform driver rather than CLK_OF_DECLARE_DRIVER method. As result,
    sp804 timer probe returns failure due if cannot bind clock properly.
    
    To fix the failure, this patch is to split crgctrl clocks into two
    subsets. One part is for fixed_rate_clks which includes pre-defined
    fixed rate clocks, and "osc32k" clock is in this category; So we change
    their registration to CLK_OF_DECLARE_DRIVER method, as result the clocks
    can be registered ahead with function of_clk_init() and timer driver can
    bind timer clock successfully; the rest of the crgctrl clocks are still
    registered by the probe of the platform driver.
    
    This patch also adds checking for all crgctrl clocks registration and
    print out log if any clock has failure.
    
    Signed-off-by: Leo Yan <leo.yan@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit f35b0936151ed5711fb63e8c866f0202883600e1
Author: Andreas Färber <afaerber@suse.de>
Date:   Mon Feb 27 21:22:51 2017 +0100

    clocksource: owl: Add S900 support
    
    The Actions Semi S900 SoC provides four 32-bit timers, TIMER0/1/2/3,
    but no 2Hz timers.
    
    An S900 datasheet can be found in 96Boards documentation:
    https://github.com/96boards/documentation/blob/master/ConsumerEdition/Bubblegum-96/HardwareDocs/SoC_bubblegum96.pdf
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Andreas Färber <afaerber@suse.de>

commit 4be78a86c5063a50782dd2f16bd76df6a1771d77
Author: Andreas Färber <afaerber@suse.de>
Date:   Thu Feb 23 19:27:12 2017 +0100

    clocksource: Add Owl timer
    
    The Actions Semi S500 SoC provides four timers, 2Hz0/1 and 32-bit TIMER0/1.
    
    Use TIMER0 as clocksource and TIMER1 as clockevents.
    
    Based on LeMaker linux-actions tree.
    
    An S500 datasheet can be found on the LeMaker Guitar pages:
    http://www.lemaker.org/product-guitar-download-29.html
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Andreas Färber <afaerber@suse.de>

commit c477990295a78f1248283322bd1ad964c22151bc
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Jun 13 23:48:13 2017 +0200

    clocksource/drivers/fttmr010: Factor out clock read code
    
    The sched_clock() and delay timer callbacks can just call
    each other and we can save an #ifdef.
    
    Suggested-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Andrew Jeffery <andrew@aj.id.au>
    Cc: Joel Stanley <joel@jms.id.au>
    Cc: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 385c98fcc1fb58c3e10157be2203eb37595dac7b
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sun Jun 11 23:26:17 2017 +0200

    clocksource/drivers/fttmr010: Implement delay timer
    
    This timer is often used on the ARM architecture, so as with so
    many siblings, we can implement delay timers, removing the need
    for the system to calibrate jiffys at boot, and potentially
    handling CPU frequency scaling on targets.
    
    We cannot just protect the Kconfig with a "depends on ARM" because
    it is already known that different architectures are using Faraday
    IP blocks, so it is better to make things open-ended and use
    
    Result on boot dmesg:
    
    Switching to timer-based delay loop, resolution 40n
    Calibrating delay loop (skipped), value calculated using
      timer frequency.. 50.00 BogoMIPS (lpj=250000)
    
    This is accurately the timer frequency, 250MHz on the APB
    bus.
    
    Cc: Andrew Jeffery <andrew@aj.id.au>
    Cc: Joel Stanley <joel@jms.id.au>
    Cc: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Tested-by: Jonas Jensen <jonas.jensen@gmail.com>
    Tested-by: Andrew Jeffery <andrew@aj.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit dc11bae78529526605c5c45c369c9512fd012093
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 5 00:18:43 2017 +0200

    clocksource/drivers: Add timer-of common init routine
    
    The different drivers are all using the same pattern when initializing.
    
     1. Get the base address
     2. Get the irq number
     3. Get the clock
     4. Prepare and enable the clock
     5. Get the rate
     6. Request an interrupt
    
    Instead of repeating again and again these steps in all the drivers, let's
    provide a common init routine to give the opportunity to factor all of them
    out.
    
    We can expect a significant kernel size improvement when the common routine
    will be used in all the drivers.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2a515e5d7c52d5cf1e9153cb03efa133e3459c88
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Fri May 12 20:22:51 2017 +0200

    clocksource/drivers/tcb_clksrc: Save timer context on suspend/resume
    
    On sama5d2, power to the core may be cut while entering suspend mode. It is
    necessary to save and restore the TCB registers.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 740e237add571a125f1c2a110ba6aa77db7d2c69
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sun Jun 11 23:26:16 2017 +0200

    clocksource/drivers/fttmr010: Optimize sched_clock()
    
    The sched_clock() call should be really fast so we want to
    avoid an extra if() clause on the read path if possible.
    
    Implement two sched_clock_read() functions, one if the timer
    counts up and one if it counts down. Incidentally this also
    mirrors how clocksource_mmio_init() works and make things
    simple and easy to understand.
    
    Suggested-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Andrew Jeffery <andrew@aj.id.au>
    Cc: Joel Stanley <joel@jms.id.au>
    Cc: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8b7a3b568814a8e36d2910dd74465b0215aa0a31
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue May 30 08:35:40 2017 +0200

    clocksource/drivers: Add an alias macro CLOCKSOURCE_OF_DECLARE
    
    The macro CLOCKSOURCE_OF_DECLARE has been rename to TIMER_OF_DECLARE.
    
    In order to prevent conflicts for the next merge window, a temporary
    alias has been added which will be removed later.
    
    Cc: Arnd Bergman <arnd@arndb.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fa1bffab268723d40ae06e855898f7e8361487e9
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri May 26 19:40:24 2017 +0200

    clocksource/drivers: Rename CLKSRC_ACPI to TIMER_ACPI
    
    The config option name is now renamed to 'TIMER_ACPI' for consistency with
    the CLOCKSOURCE_OF_DECLARE => TIMER_OF_DECLARE change.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>

commit bb0eb050a577a866cb47c2dc37596f1207f4c2d9
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri May 26 19:34:11 2017 +0200

    clocksource/drivers: Rename CLKSRC_OF to TIMER_OF
    
    The config option name is now renamed to 'TIMER_OF' for consistency with
    the CLOCKSOURCE_OF_DECLARE => TIMER_OF_DECLARE change.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>

commit 2fcc112af37fa88f8da077d6dd3bb8e38e75adb1
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri May 26 18:33:27 2017 +0200

    clocksource/drivers: Rename clksrc table to timer
    
    The table name is now renamed to 'timer' for consistency with
    the CLOCKSOURCE_OF_DECLARE => TIMER_OF_DECLARE change.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>

commit 77d62f532282010d5859a99819d6a0c233bfcfff
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri May 26 17:42:25 2017 +0200

    clocksource/drivers: Rename CLOCKSOURCE_ACPI_DECLARE to TIMER_ACPI_DECLARE
    
    The macro name is now renamed to 'TIMER_ACPI_DECLARE' for consistency
    with the CLOCKSOURCE_OF_DECLARE => TIMER_OF_DECLARE change.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>

commit ba5d08c0ea785d5710c5a1e7dc3182b7124d63c0
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri May 26 17:40:46 2017 +0200

    clocksource/drivers: Rename clocksource_probe to timer_probe
    
    The function name is now renamed to 'timer_probe' for consistency with
    the CLOCKSOURCE_OF_DECLARE => TIMER_OF_DECLARE change.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Heiko Stuebner <heiko@sntech.de>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>

commit 1727339590fdb5a1ded881b540cd32121278d414
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri May 26 16:56:11 2017 +0200

    clocksource/drivers: Rename CLOCKSOURCE_OF_DECLARE to TIMER_OF_DECLARE
    
    The CLOCKSOURCE_OF_DECLARE macro is used widely for the timers to declare the
    clocksource at early stage. However, this macro is also used to initialize
    the clockevent if any, or the clockevent only.
    
    It was originally suggested to declare another macro to initialize a
    clockevent, so in order to separate the two entities even they belong to the
    same IP. This was not accepted because of the impact on the DT where splitting
    a clocksource/clockevent definition does not make sense as it is a Linux
    concept not a hardware description.
    
    On the other side, the clocksource has not interrupt declared while the
    clockevent has, so it is easy from the driver to know if the description is
    for a clockevent or a clocksource, IOW it could be implemented at the driver
    level.
    
    So instead of dealing with a named clocksource macro, let's use a more generic
    one: TIMER_OF_DECLARE.
    
    The patch has not functional changes.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Heiko Stuebner <heiko@sntech.de>
    Acked-by: Neil Armstrong <narmstrong@baylibre.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Matthias Brugger <matthias.bgg@gmail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>

commit 459fa246d8fa4a543ed9a3331f15c8fe1caf9937
Author: Stephen Rothwell <sfr@canb.auug.org.au>
Date:   Sun Jun 11 15:22:10 2017 +1000

    clocksource: Explicitly include linux/clocksource.h when needed
    
    The kbuild test robot reported errors in these files when doing an ia64
    allmodconfig build.
    
    drivers/clocksource/timer-sun5i.c:52:21: error: field 'clksrc' has incomplete type
       struct clocksource clksrc;
                          ^~~~~~
    drivers/clocksource/cadence_ttc_timer.c:92:21: error: field 'cs' has incomplete type
       struct clocksource cs;
                          ^~
    
    (and many more errors for these files)
    
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: "Sören Brinkmann" <soren.brinkmann@xilinx.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Maxime Ripard <maxime.ripard@free-electrons.com>
    Cc: Chen-Yu Tsai <wens@csie.org>
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Acked-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 187887b3dbae03517c5ae8fe7631607682c4cac0
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Jan 12 17:07:43 2017 +0100

    rtc: tegra: Implement clock handling
    
    [ Upstream commit 5fa4086987506b2ab8c92f8f99f2295db9918856 ]
    
    Accessing the registers of the RTC block on Tegra requires the module
    clock to be enabled. This only works because the RTC module clock will
    be enabled by default during early boot. However, because the clock is
    unused, the CCF will disable it at late_init time. This causes the RTC
    to become unusable afterwards. This can easily be reproduced by trying
    to use the RTC:
    
            $ hwclock --rtc /dev/rtc1
    
    This will hang the system. I ran into this by following up on a report
    by Martin Michlmayr that reboot wasn't working on Tegra210 systems. It
    turns out that the rtc-tegra driver's ->shutdown() implementation will
    hang the CPU, because of the disabled clock, before the system can be
    rebooted.
    
    What confused me for a while is that the same driver is used on prior
    Tegra generations where the hang can not be observed. However, as Peter
    De Schrijver pointed out, this is because on 32-bit Tegra chips the RTC
    clock is enabled by the tegra20_timer.c clocksource driver, which uses
    the RTC to provide a persistent clock. This code is never enabled on
    64-bit Tegra because the persistent clock infrastructure does not exist
    on 64-bit ARM.
    
    The proper fix for this is to add proper clock handling to the RTC
    driver in order to ensure that the clock is enabled when the driver
    requires it. All device trees contain the clock already, therefore
    no additional changes are required.
    
    Reported-by: Martin Michlmayr <tbm@cyrius.com>
    Acked-By Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 3db1200ca21f3c63c9044185dc5762ef996848cb
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Fri Jun 9 17:26:32 2017 -0700

    clocksource/drivers/arm_arch_timer: Fix read and iounmap of incorrect variable
    
    Fix boot warning 'Trying to vfree() nonexistent vm area'
    from arch_timer_mem_of_init().
    
    Refactored code attempts to read and iounmap using address frame
    instead of address ioremap(frame->cntbase).
    
    Fixes: c389d701dfb70 ("clocksource: arm_arch_timer: split MMIO timer probing.")
    
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>
    Reviewed-by: Fu Wei <fu.wei@linaro.org>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ef89718ab685e40887bb76d4e7664a931306a2a4
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri May 26 10:38:07 2017 +0200

    clocksource/drivers/fttmr010: Fix aspeed-2500 initialization
    
    The recent changes made the fttmr010 to be more generic and support different
    timers with a very few differences like moxart or aspeed.
    
    The aspeed timer uses a countdown and there is a test against the aspeed2400
    compatible string to set a flag.
    
    With the previous patch, we added the aspeed2500 compatible string but without
    taking care of setting the countdown flag.
    
    Fix this by specifiying a init function and pass the aspeed flag to a common
    init function.
    
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Tested-by: Andrew Jeffery <andrew@aj.id.au>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Acked-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a6fbb9c4cc80bbbe5a088c3b64d1e41eee16b090
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu May 25 22:19:29 2017 +0200

    clocksource/drivers/fttmr010: Add AST2500 compatible string
    
    Also clean up space-before-tab issues in the documentation.
    
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Acked-by: Joel Stanley <joel@jms.id.au>
    Acked-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ec14ba1ec537d530208c3ba3b3738349d386850f
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu May 18 22:17:04 2017 +0200

    clocksource/drivers/fttmr010: Merge Moxa into FTTMR010
    
    This merges the Moxa Art timer driver into the Faraday FTTMR010
    driver and replaces all Kconfig symbols to use the Faraday
    driver instead. We are now so similar that the drivers can
    be merged by just adding a few lines to the Faraday timer.
    
    Differences:
    
    - The Faraday driver explicitly sets the counter to count
      upwards for the clocksource, removing the need for the
      clocksource core to invert the value.
    
    - The Faraday driver also handles sched_clock()
    
    On the Aspeed, the counter can only count downwards, so support
    the timers in downward-counting mode as well, and flag the
    Aspeed to use this mode. This mode was tested on the Gemini so
    I have high hopes that it'll work fine on the Aspeed as well.
    
    After this we have one driver for all three SoCs and a generic
    Faraday FTTMR010 timer driver, which is nice.
    
    Cc: Joel Stanley <joel@jms.id.au>
    Cc: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Tested-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b589da8b26f4b5cc3c3a84183dee33a73871522b
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu May 18 22:17:03 2017 +0200

    clocksource/drivers/fttmr010: Switch to use TIMER2 src
    
    This switches the clocksource to TIMER2 like the Moxart driver
    does. Mainly to make it more similar to the Moxart/Aspeed driver
    but also because it seems more neat to use the timers in order:
    use timer 1, then timer 2.
    
    Cc: Joel Stanley <joel@jms.id.au>
    Tested-by: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d0d76d575960b0bf0e1481cb3f578add9b26988c
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu May 18 22:17:02 2017 +0200

    clocksource/drivers/fttmr010: Switch to use bitops
    
    This switches the drivers to use the bitops BIT() macro
    to define bits.
    
    Cc: Joel Stanley <joel@jms.id.au>
    Tested-by: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e7bad212ca0e6b1dcca1e0316ca8658c738c1206
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu May 18 22:17:01 2017 +0200

    clocksource/drivers/fttmr010: Use state container
    
    This converts the Faraday FTTMR010 to use the state container
    design pattern. Take some care to handle the state container
    and free:ing of resources as has been done in the Moxa driver.
    
    Cc: Joel Stanley <joel@jms.id.au>
    Tested-by: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit dd98442e17a66318b021d4342abf53069cc8bed1
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu May 18 22:17:00 2017 +0200

    clocksource/drivers/fttmr010: Drop Gemini specifics
    
    The Gemini now has a proper clock driver and a proper PCLK
    assigned in its device tree. Drop the Gemini-specific hacks
    to look up the system speed and rely on the clock framework
    like everyone else.
    
    Cc: Joel Stanley <joel@jms.id.au>
    Tested-by: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 454a65f43a33d48ea04ffaf635ef35abc3d27990
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu May 18 22:16:59 2017 +0200

    clocksource/drivers/fttmr010: Merge FTTMR010 DT bindings
    
    This merges the Moxa and FTTMR010 device tree bindings into the
    Faraday binding document to avoid confusion.
    
    The FTTMR010 is the IP block used by these SoCs, in vanilla
    or modified variant.
    
    The Aspeed variant is modified such that it is no longer fully
    register-compatible with FTTMR010 so for this reason it is not
    listed with two compatible strings, instead just one.
    
    Cc: Joel Stanley <joel@jms.id.au>
    Tested-by: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2a55e98f9f76825d78a4e6ef315c35fccabf5212
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu May 18 22:16:58 2017 +0200

    clocksource/drivers/fttmr010: Fix the clock handling
    
    We need to also prepare and enable the clock we are using to get
    the right reference count and avoid it being shut off.
    
    Tested-by: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 164a1a90a4ae54911f02a1b4fc6ea7148edf07cb
Author: Andrew Jeffery <andrew@aj.id.au>
Date:   Mon Jun 5 17:18:46 2017 +0930

    arm: aspeed: Add clock-names property to timer node
    
    The merging of a number of clocksource drivers into fttmr010 means we
    require clock-names to be specified in the Aspeed timer node, else the
    clocksource fails to probe and boot hangs.
    
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e546d778d6bb3e1a80697a6556d870c707e6df82
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Thu May 18 10:46:02 2017 -0700

    Drivers: hv: vmbus: Get the current time from the current clocksource
    
    The current code uses the MSR based mechanism to get the current tick.
    Use the current clock source as that might be more optimal.
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12b28ba6d6164d3aa54b7e32032bcbd9b7c2a320
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Tue Mar 28 20:57:55 2017 -0500

    ARM: OMAP2+: timer: Add suspend-resume callbacks for clkevent device
    
    OMAP timer code registers two timers - one as clocksource
    and one as clockevent. Since AM33XX has only one usable timer
    in the WKUP domain one of the timers needs suspend-resume
    support to restore the configuration to pre-suspend state.
    
    commit adc78e6b9946 ("timekeeping: Add suspend and resume
    of clock event devices") introduced .suspend and .resume
    callbacks for clock event devices. Leverage these
    callbacks to have AM33XX clockevent timer behave properly
    across system suspend. Extend the use of the .suspend and
    .resume callbacks used by am335x clockevent to am437x as well.
    
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit b421b22b00b0011f6a2ce3561176c4e79e640c49
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Fri Apr 21 12:14:13 2017 +0200

    x86/tsc, sched/clock, clocksource: Use clocksource watchdog to provide stable sync points
    
    Currently we keep sched_clock_tick() active for stable TSC in order to
    keep the per-CPU state semi up-to-date. The (obvious) problem is that
    by the time we detect TSC is borked, our per-CPU state is also borked.
    
    So hook into the clocksource watchdog and call a method after we've
    found it to still be stable.
    
    There's the obvious race where the TSC goes wonky between finding it
    stable and us running the callback, but closing that is too much work
    and not really worth it, since we're already detecting TSC wobbles
    after the fact, so we cannot, per definition, fully avoid funny clock
    values.
    
    And since the watchdog runs less often than the tick, this is also an
    optimization.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 8309f86cd41e8714526867177facf7a316d9be53
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Apr 13 14:56:44 2017 +0200

    x86/tsc: Provide 'tsc=unstable' boot parameter
    
    Since the clocksource watchdog will only detect broken TSC after the
    fact, all TSC based clocks will likely have observed non-continuous
    values before/when switching away from TSC.
    
    Therefore only thing to fully avoid random clock movement when your
    BIOS randomly mucks with TSC values from SMI handlers is reporting the
    TSC as unstable at boot.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit dfcb7b2379ff90afb9231da040046f4b9eb1c895
Merge: 1b84fc1503f2 f63d947c1673
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 12 10:43:25 2017 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Ingo Molnar:
     "A single ARM Juno clocksource driver fix"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/arm_arch_timer: Fix arch_timer_mem_find_best_frame()

commit c8c3735997a3aa184fa81742bb6c4062a26af2f3
Author: Helge Deller <deller@gmx.de>
Date:   Sun Jan 8 11:01:11 2017 +0100

    parisc: Enhance detection of synchronous cr16 clocksources
    
    The cr16 clocks of the physical PARISC CPUs are usually nonsynchronous.
    Nevertheless, it seems that each CPU socket (which holds two cores) of
    PA8800 and PA8900 CPUs (e.g. in a C8000 workstation) is fed by the same
    clock source, which makes the cr16 clocks of each CPU socket syncronous.
    Let's try to detect such situations and mark the cr16 clocksource stable
    on single-socket and single-core machines.
    
    Signed-off-by: Helge Deller <deller@gmx.de>

commit f63d947c1673930bfc5f2f9bd1073a02c179a890
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon May 8 13:32:27 2017 +0100

    clocksource/arm_arch_timer: Fix arch_timer_mem_find_best_frame()
    
    arch_timer_mem_find_best_frame() looks through ARCH_TIMER_MEM_MAX_FRAMES
    frames even after finding matches to ensure the best frame is chosen,
    which means the variable frame will point to the last valid frame but
    not necessarily the best frame.
    
    On Juno, we get the following error as the wrong frame is returned as the
    best frame from arch_timer_mem_find_best_frame():
    
      arch_timer: Unable to map frame @ 0x0000000000000000
      arch_timer: Frame missing phys irq.
      Failed to initialize '/timer@2a810000': -22
    
    Fix the issue by correctly returning the best frame from
    arch_timer_mem_find_best_frame().
    
    Fixes: c389d701dfb7 ("clocksource: arm_arch_timer: split MMIO timer probing.")
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1494246747-17267-1-git-send-email-sudeep.holla@arm.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit c2e097b6cb4ee13dc84eefcbdc39dc9fae0dcfa8
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Thu Dec 4 01:17:01 2014 +0000

    arm64: Provide a namespace to NCAPS
    
    commit 06f9eb884be81431d54d7d37390043e3b5b7f14a upstream.
    
    Building arm64.allmodconfig leads to the following warning:
    
    usb/gadget/function/f_ncm.c:203:0: warning: "NCAPS" redefined
     #define NCAPS (USB_CDC_NCM_NCAP_ETH_FILTER | USB_CDC_NCM_NCAP_CRC_MODE)
     ^
    In file included from /home/build/work/batch/arch/arm64/include/asm/io.h:32:0,
                     from /home/build/work/batch/include/linux/clocksource.h:19,
                     from /home/build/work/batch/include/clocksource/arm_arch_timer.h:19,
                     from /home/build/work/batch/arch/arm64/include/asm/arch_timer.h:27,
                     from /home/build/work/batch/arch/arm64/include/asm/timex.h:19,
                     from /home/build/work/batch/include/linux/timex.h:65,
                     from /home/build/work/batch/include/linux/sched.h:19,
                     from /home/build/work/batch/arch/arm64/include/asm/compat.h:25,
                     from /home/build/work/batch/arch/arm64/include/asm/stat.h:23,
                     from /home/build/work/batch/include/linux/stat.h:5,
                     from /home/build/work/batch/include/linux/module.h:10,
                     from /home/build/work/batch/drivers/usb/gadget/function/f_ncm.c:19:
    arch/arm64/include/asm/cpufeature.h:27:0: note: this is the location of the previous definition
     #define NCAPS     2
    
    So add a ARM64 prefix to avoid such problem.
    
    Reported-by: Olof's autobuilder <build@lixom.net>
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 531be60fc5804318989061178fe8a34eff561e03
Author: Tero Kristo <t-kristo@ti.com>
Date:   Thu Jun 16 15:25:18 2016 +0300

    ARM: OMAP2+: timer: add probe for clocksources
    
    commit 970f9091d25df14e9540ec7ff48a2f709e284cd1 upstream.
    
    A few platforms are currently missing clocksource_probe() completely
    in their time_init functionality. On OMAP3430 for example, this is
    causing cpuidle to be pretty much dead, as the counter32k is not
    going to be registered and instead a gptimer is used as a clocksource.
    This will tick in periodic mode, preventing any deeper idle states.
    
    While here, also drop one unnecessary check for populated DT before
    existing clocksource_probe() call.
    
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Cc: Julia Lawall <julia.lawall@lip6.fr>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 174ddfd5dfbfc2d91a45332f809977050ac3fdc5
Merge: 3cb6653552dd b94bf594cf8e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 1 16:15:18 2017 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The timer departement delivers:
    
       - more year 2038 rework
    
       - a massive rework of the arm achitected timer
    
       - preparatory patches to allow NTP correction of clock event devices
         to avoid early expiry
    
       - the usual pile of fixes and enhancements all over the place"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (91 commits)
      timer/sysclt: Restrict timer migration sysctl values to 0 and 1
      arm64/arch_timer: Mark errata handlers as __maybe_unused
      Clocksource/mips-gic: Remove redundant non devicetree init
      MIPS/Malta: Probe gic-timer via devicetree
      clocksource: Use GENMASK_ULL in definition of CLOCKSOURCE_MASK
      acpi/arm64: Add SBSA Generic Watchdog support in GTDT driver
      clocksource: arm_arch_timer: add GTDT support for memory-mapped timer
      acpi/arm64: Add memory-mapped timer support in GTDT driver
      clocksource: arm_arch_timer: simplify ACPI support code.
      acpi/arm64: Add GTDT table parse driver
      clocksource: arm_arch_timer: split MMIO timer probing.
      clocksource: arm_arch_timer: add structs to describe MMIO timer
      clocksource: arm_arch_timer: move arch_timer_needs_of_probing into DT init call
      clocksource: arm_arch_timer: refactor arch_timer_needs_probing
      clocksource: arm_arch_timer: split dt-only rate handling
      x86/uv/time: Set ->min_delta_ticks and ->max_delta_ticks
      unicore32/time: Set ->min_delta_ticks and ->max_delta_ticks
      um/time: Set ->min_delta_ticks and ->max_delta_ticks
      tile/time: Set ->min_delta_ticks and ->max_delta_ticks
      score/time: Set ->min_delta_ticks and ->max_delta_ticks
      ...

commit fc7935ac7a6f3bcd5aa945e74005accf0939e6c5
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Jan 12 17:07:43 2017 +0100

    rtc: tegra: Implement clock handling
    
    commit 5fa4086987506b2ab8c92f8f99f2295db9918856 upstream.
    
    Accessing the registers of the RTC block on Tegra requires the module
    clock to be enabled. This only works because the RTC module clock will
    be enabled by default during early boot. However, because the clock is
    unused, the CCF will disable it at late_init time. This causes the RTC
    to become unusable afterwards. This can easily be reproduced by trying
    to use the RTC:
    
            $ hwclock --rtc /dev/rtc1
    
    This will hang the system. I ran into this by following up on a report
    by Martin Michlmayr that reboot wasn't working on Tegra210 systems. It
    turns out that the rtc-tegra driver's ->shutdown() implementation will
    hang the CPU, because of the disabled clock, before the system can be
    rebooted.
    
    What confused me for a while is that the same driver is used on prior
    Tegra generations where the hang can not be observed. However, as Peter
    De Schrijver pointed out, this is because on 32-bit Tegra chips the RTC
    clock is enabled by the tegra20_timer.c clocksource driver, which uses
    the RTC to provide a persistent clock. This code is never enabled on
    64-bit Tegra because the persistent clock infrastructure does not exist
    on 64-bit ARM.
    
    The proper fix for this is to add proper clock handling to the RTC
    driver in order to ensure that the clock is enabled when the driver
    requires it. All device trees contain the clock already, therefore
    no additional changes are required.
    
    Reported-by: Martin Michlmayr <tbm@cyrius.com>
    Acked-By Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    [bwh: Backported to 4.9: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c4d8f20cc2913d0ab738a491c3d26e09871e701
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Jan 12 17:07:43 2017 +0100

    rtc: tegra: Implement clock handling
    
    commit 5fa4086987506b2ab8c92f8f99f2295db9918856 upstream.
    
    Accessing the registers of the RTC block on Tegra requires the module
    clock to be enabled. This only works because the RTC module clock will
    be enabled by default during early boot. However, because the clock is
    unused, the CCF will disable it at late_init time. This causes the RTC
    to become unusable afterwards. This can easily be reproduced by trying
    to use the RTC:
    
            $ hwclock --rtc /dev/rtc1
    
    This will hang the system. I ran into this by following up on a report
    by Martin Michlmayr that reboot wasn't working on Tegra210 systems. It
    turns out that the rtc-tegra driver's ->shutdown() implementation will
    hang the CPU, because of the disabled clock, before the system can be
    rebooted.
    
    What confused me for a while is that the same driver is used on prior
    Tegra generations where the hang can not be observed. However, as Peter
    De Schrijver pointed out, this is because on 32-bit Tegra chips the RTC
    clock is enabled by the tegra20_timer.c clocksource driver, which uses
    the RTC to provide a persistent clock. This code is never enabled on
    64-bit Tegra because the persistent clock infrastructure does not exist
    on 64-bit ARM.
    
    The proper fix for this is to add proper clock handling to the RTC
    driver in order to ensure that the clock is enabled when the driver
    requires it. All device trees contain the clock already, therefore
    no additional changes are required.
    
    Reported-by: Martin Michlmayr <tbm@cyrius.com>
    Acked-By Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    [bwh: Backported to 4.9: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef793e6e113473f7cb08edf1ca4a8737c57ce51c
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Jan 12 17:07:43 2017 +0100

    rtc: tegra: Implement clock handling
    
    commit 5fa4086987506b2ab8c92f8f99f2295db9918856 upstream.
    
    Accessing the registers of the RTC block on Tegra requires the module
    clock to be enabled. This only works because the RTC module clock will
    be enabled by default during early boot. However, because the clock is
    unused, the CCF will disable it at late_init time. This causes the RTC
    to become unusable afterwards. This can easily be reproduced by trying
    to use the RTC:
    
            $ hwclock --rtc /dev/rtc1
    
    This will hang the system. I ran into this by following up on a report
    by Martin Michlmayr that reboot wasn't working on Tegra210 systems. It
    turns out that the rtc-tegra driver's ->shutdown() implementation will
    hang the CPU, because of the disabled clock, before the system can be
    rebooted.
    
    What confused me for a while is that the same driver is used on prior
    Tegra generations where the hang can not be observed. However, as Peter
    De Schrijver pointed out, this is because on 32-bit Tegra chips the RTC
    clock is enabled by the tegra20_timer.c clocksource driver, which uses
    the RTC to provide a persistent clock. This code is never enabled on
    64-bit Tegra because the persistent clock infrastructure does not exist
    on 64-bit ARM.
    
    The proper fix for this is to add proper clock handling to the RTC
    driver in order to ensure that the clock is enabled when the driver
    requires it. All device trees contain the clock already, therefore
    no additional changes are required.
    
    Reported-by: Martin Michlmayr <tbm@cyrius.com>
    Acked-By Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    [bwh: Backported to 4.9: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba02781392fa1b934e41785a5301ca21ad44708b
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Jan 12 17:07:43 2017 +0100

    rtc: tegra: Implement clock handling
    
    commit 5fa4086987506b2ab8c92f8f99f2295db9918856 upstream.
    
    Accessing the registers of the RTC block on Tegra requires the module
    clock to be enabled. This only works because the RTC module clock will
    be enabled by default during early boot. However, because the clock is
    unused, the CCF will disable it at late_init time. This causes the RTC
    to become unusable afterwards. This can easily be reproduced by trying
    to use the RTC:
    
            $ hwclock --rtc /dev/rtc1
    
    This will hang the system. I ran into this by following up on a report
    by Martin Michlmayr that reboot wasn't working on Tegra210 systems. It
    turns out that the rtc-tegra driver's ->shutdown() implementation will
    hang the CPU, because of the disabled clock, before the system can be
    rebooted.
    
    What confused me for a while is that the same driver is used on prior
    Tegra generations where the hang can not be observed. However, as Peter
    De Schrijver pointed out, this is because on 32-bit Tegra chips the RTC
    clock is enabled by the tegra20_timer.c clocksource driver, which uses
    the RTC to provide a persistent clock. This code is never enabled on
    64-bit Tegra because the persistent clock infrastructure does not exist
    on 64-bit ARM.
    
    The proper fix for this is to add proper clock handling to the RTC
    driver in order to ensure that the clock is enabled when the driver
    requires it. All device trees contain the clock already, therefore
    no additional changes are required.
    
    Reported-by: Martin Michlmayr <tbm@cyrius.com>
    Acked-By Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    [bwh: Backported to 4.9: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb64522100a1d4adc89bce11b935a30c4401e234
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 19 19:37:09 2017 +0200

    arm64/arch_timer: Mark errata handlers as __maybe_unused
    
    In some rare randconfig builds, we end up with two functions being entirely
    unused:
    
    drivers/clocksource/arm_arch_timer.c:342:12: error: 'erratum_set_next_event_tval_phys' defined but not used [-Werror=unused-function]
     static int erratum_set_next_event_tval_phys(unsigned long evt,
    drivers/clocksource/arm_arch_timer.c:335:12: error: 'erratum_set_next_event_tval_virt' defined but not used [-Werror=unused-function]
     static int erratum_set_next_event_tval_virt(unsigned long evt,
    
    We could add an #ifdef around them, but we would already have to check for
    several symbols there and there is a chance this would get more complicated
    over time, so marking them as __maybe_unused is the simplest way to avoid the
    harmless warnings.
    
    Fixes: 01d3e3ff2608 ("arm64: arch_timer: Rework the set_next_event workarounds")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Christoffer Dall <christoffer.dall@linaro.org>
    Link: http://lkml.kernel.org/r/20170419173737.3846098-1-arnd@arndb.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 58bb100a9de10329ca0d63484e76f27c257e9a2e
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Wed Apr 19 13:26:46 2017 +0100

    Clocksource/mips-gic: Remove redundant non devicetree init
    
    Malta was the only platform probing this driver from platform code
    without using device tree. With that code removed, gic_clocksource_init
    is redundant so remove it.
    
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Link: http://lkml.kernel.org/r/1492604806-23420-2-git-send-email-matt.redfearn@imgtec.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 4287adec7212d48fb878a45400fd7e11a198462c
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Wed Apr 19 13:26:45 2017 +0100

    MIPS/Malta: Probe gic-timer via devicetree
    
    The Malta platform is the only platform remaining to probe the GIC
    clocksource via gic_clocksource_init. This route hardcodes an expected
    virq number based on MIPS_GIC_IRQ_BASE, which can be fragile to the
    eventual virq layout. Instread, probe the driver using the preferred and
    more modern devicetree method.
    
    Before the driver is probed, set the "clock-frequency" property of the
    devicetree node to the value detected by Malta platform code.
    
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Link: http://lkml.kernel.org/r/1492604806-23420-1-git-send-email-matt.redfearn@imgtec.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 0773cea37470f8e080c510fe720fc356cf35df3a
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Tue Apr 18 16:30:37 2017 -0700

    clocksource: Use GENMASK_ULL in definition of CLOCKSOURCE_MASK
    
    Besides reusing existing code this removes the special case handling
    for 64-bit masks, which causes clang to raise a shift count overflow
    warning due to https://bugs.llvm.org//show_bug.cgi?id=10030.
    
    Suggested-by: Dmitry Torokhov <dtor@chromium.org>
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Cc: Grant Grundler <grundler@chromium.org>
    Cc: Greg Hackmann <ghackmann@google.com>
    Cc: Michael Davidson <md@google.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/20170418233037.70990-1-mka@chromium.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit cc9c617557cd0442294138188ac8611659768a10
Author: David Howells <dhowells@redhat.com>
Date:   Tue Apr 4 16:54:22 2017 +0100

    Annotate hardware config module parameters in drivers/clocksource/
    
    When the kernel is running in secure boot mode, we lock down the kernel to
    prevent userspace from modifying the running kernel image.  Whilst this
    includes prohibiting access to things like /dev/mem, it must also prevent
    access by means of configuring driver modules in such a way as to cause a
    device to access or modify the kernel image.
    
    To this end, annotate module_param* statements that refer to hardware
    configuration and indicate for future reference what type of parameter they
    specify.  The parameter parser in the core sees this information and can
    skip such parameters with an error message if the kernel is locked down.
    The module initialisation then runs as normal, but just sees whatever the
    default values for those parameters is.
    
    Note that we do still need to do the module initialisation because some
    drivers have viable defaults set in case parameters aren't specified and
    some drivers support automatic configuration (e.g. PNP or PCI) in addition
    to manually coded parameters.
    
    This patch annotates drivers in drivers/clocksource/.
    
    [Note: With regard to cs5535-clockevt.c, Thomas Gleixner asked whether the
     timer_irq parameter is required for the driver to work on anything other than
     arbitrary hardware which has it mapped to 0.  Jens Rottmann replied that the
     parameter defaults to 0, which means:
    
            1. autodetect (=keep IRQ BIOS has set up)
            2. if that fails use CONFIG_CS5535_MFGPT_DEFAULT_IRQ
               (see drivers/misc/cs5535-mfgpt.c: cs5535_mfgpt_set_irq())
    
     Jens further noted that there may not be any systems that have CS5535/36
     devices that support EFI and secure boot.]
    
    Suggested-by: Alan Cox <gnomes@lxorguk.ukuu.org.uk>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    cc: Thomas Gleixner <tglx@linutronix.de>
    cc: Jens Rottmann <Jens.Rottmann@ADLINKtech.com>
    cc: linux-kernel@vger.kernel.org

commit c2743a36765d337fad589b5c30b47c297a207194
Author: Fu Wei <fu.wei@linaro.org>
Date:   Sat Apr 1 01:51:04 2017 +0800

    clocksource: arm_arch_timer: add GTDT support for memory-mapped timer
    
    The patch add memory-mapped timer register support by using the
    information provided by the new GTDT driver of ACPI.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    [Mark: verify CNTFRQ, only register the first frame]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit a712c3ed9b8a4565a200f3e8e09c42079b1666b3
Author: Fu Wei <fu.wei@linaro.org>
Date:   Sat Apr 1 01:51:03 2017 +0800

    acpi/arm64: Add memory-mapped timer support in GTDT driver
    
    On platforms booting with ACPI, architected memory-mapped timers'
    configuration data is provided by firmware through the ACPI GTDT
    static table.
    
    The clocksource architected timer kernel driver requires a firmware
    interface to collect timer configuration and configure its driver.
    this infrastructure is present for device tree systems, but it is
    missing on systems booting with ACPI.
    
    Implement the kernel infrastructure required to parse the static
    ACPI GTDT table so that the architected timer clocksource driver can
    make use of it on systems booting with ACPI, therefore enabling
    the corresponding timers configuration.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Signed-off-by: Hanjun Guo <hanjun.guo@linaro.org>
    Acked-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    [Mark: restructure error handling]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit f79d209405fada700047245ed1a152bab8d6535e
Author: Fu Wei <fu.wei@linaro.org>
Date:   Sat Apr 1 01:51:02 2017 +0800

    clocksource: arm_arch_timer: simplify ACPI support code.
    
    The patch update arm_arch_timer driver to use the function
    provided by the new GTDT driver of ACPI.
    By this way, arm_arch_timer.c can be simplified, and separate
    all the ACPI GTDT knowledge from this timer driver.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Signed-off-by: Hanjun Guo <hanjun.guo@linaro.org>
    Tested-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    Tested-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit c389d701dfb70154edf896f0f9c40d2857ca2d90
Author: Fu Wei <fu.wei@linaro.org>
Date:   Sat Apr 1 01:51:00 2017 +0800

    clocksource: arm_arch_timer: split MMIO timer probing.
    
    Currently the code to probe MMIO architected timers mixes DT parsing with
    actual poking of hardware. This makes the code harder than necessary to
    understand, and makes it difficult to add support for probing via ACPI.
    
    This patch splits the DT parsing from HW probing. The DT parsing now
    lives in arch_timer_mem_of_init(), which fills in an arch_timer_mem
    structure that it hands to probing functions that can be reused for ACPI
    support.
    
    Since the rate detection logic will be slight different when using ACPI,
    the probing is performed as a number of steps. This results in more code
    for the moment, and some arguably redundant work, but simplifies matters
    considerably when ACPI support is added.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    [Mark: refactor the probing split]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit b3251b8fd12337bf04bce46d4af35988742eef95
Author: Fu Wei <fu.wei@linaro.org>
Date:   Sat Apr 1 01:50:59 2017 +0800

    clocksource: arm_arch_timer: add structs to describe MMIO timer
    
    In preparation for ACPI GTDT support, this patch adds structs to
    describe the MMIO timers indepedent of the firmware interface.
    
    Subsequent patches will use these to split the FW/HW probing logic, so
    that the HW probing logic can be shared by ACPI and DT.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit ca0e1b5214eee56a7fc4c7a5399323ab0bad73ef
Author: Fu Wei <fu.wei@linaro.org>
Date:   Wed Mar 22 00:31:15 2017 +0800

    clocksource: arm_arch_timer: move arch_timer_needs_of_probing into DT init call
    
    To cleanly split code paths specific to ACPI or DT at a higher level,
    this patch removes arch_timer_init(), folding the relevant
    parts of its logic into existing callers.
    
    This pathes the way for further rework, and saves a few lines.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    [Mark: reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit 13bf6992fe5496d56101b5d57fbdae2ee91184f2
Author: Fu Wei <fu.wei@linaro.org>
Date:   Wed Mar 22 00:31:14 2017 +0800

    clocksource: arm_arch_timer: refactor arch_timer_needs_probing
    
    When booting with DT, it's possible for timer nodes to be probed in any
    order. Some common initialisation needs to occur after all nodes have
    been probed, and arch_timer_common_init() has code to detect when this
    has happened.
    
    This logic is DT-specific, and it would be best to factor it out of the
    common code that will be shared with ACPI.
    
    This patch folds this into the existing arch_timer_needs_probing(),
    which is renamed to arch_timer_needs_of_probing(), and no longer takes
    any arguments. This is only called when using DT, and not when using
    ACPI, which will have a deterministic probe order.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    [Mark: reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit 5d3dfa96c7a202f3a70ebeb6f8bb5005c1547250
Author: Fu Wei <fu.wei@linaro.org>
Date:   Wed Mar 22 00:31:13 2017 +0800

    clocksource: arm_arch_timer: split dt-only rate handling
    
    For historical reasons, rate detection when probing via DT is somewhat
    convoluted. We tried to package this up in arch_timer_detect_rate(), but
    with the addition of ACPI worse, and gets in the way of stringent rate
    checking when ACPI is used.
    
    This patch makes arch_timer_detect_rate() specific to DT, ripping out
    ACPI logic. In preparation for rework of the MMIO timer probing, the
    reading of the relevant CNTFRQ register is factored out to callers. The
    function is then renamed to arch_timer_of_configure_rate(), which better
    represents its new place in the world.
    
    Comments are added in the DT and ACPI probe paths to explain this.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    [Mark: reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit 821596a50aba6873ff4ea8fdf2b1515638c3c8a3
Merge: 2886a734081e 6f9c89000c3f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Apr 17 10:55:14 2017 +0200

    Merge branch 'clockevents/4.12' of https://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clockevents updates from Daniel Lezcano
    
    - Provide a framework to handle errata gracefuly for arm_arch_timer (Mark
       Zyngier)
    
     - Clarify the DT properties for the rockchip timer and add the clocksource as
       an alternative to the bogus architected timer (Alexander Kochetkov)
    
     - Rename the Gemini timer to Faraday timer fttmr010 and provide a specific
       initialization for Gemini (Linus Walleij)
    
     - Add missing newlines in the error message in the timers (Rafał Miłecki)
    
     - Read the clock once and implement the delay timer on Orion (Russell King)

commit 6fc46497a9fb283c4f8e8d04ae4f0bf3c0041f7e
Author: Nicolai Stange <nicstange@gmail.com>
Date:   Thu Mar 30 22:04:58 2017 +0200

    x86/uv/time: Set ->min_delta_ticks and ->max_delta_ticks
    
    In preparation for making the clockevents core NTP correction aware,
    all clockevent device drivers must set ->min_delta_ticks and
    ->max_delta_ticks rather than ->min_delta_ns and ->max_delta_ns: a
    clockevent device's rate is going to change dynamically and thus, the
    ratio of ns to ticks ceases to stay invariant.
    
    Currently, the x86's uv rtc clockevent device is initialized as follows:
    
      clock_event_device_uv.min_delta_ns = NSEC_PER_SEC /
                                     sn_rtc_cycles_per_second;
      clock_event_device_uv.max_delta_ns = clocksource_uv.mask *
                                     (NSEC_PER_SEC / sn_rtc_cycles_per_second);
    
    This translates to a ->min_delta_ticks value of 1 and a ->max_delta_ticks
    value of clocksource_uv.mask.
    
    Initialize ->min_delta_ticks and ->max_delta_ticks with these values
    respectively.
    
    This patch alone doesn't introduce any change in functionality as the
    clockevents core still looks exclusively at the (untouched) ->min_delta_ns
    and ->max_delta_ns. As soon as this has changed, a followup patch will
    purge the initialization of ->min_delta_ns and ->max_delta_ns from this
    driver.
    
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: x86@kernel.org
    Cc: Mike Travis <travis@sgi.com>
    Cc: Dimitri Sivanich <sivanich@sgi.com>
    Signed-off-by: Nicolai Stange <nicstange@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 26cbe162df3d0282e5108711663b8dcdafb1ad33
Author: Brian Norris <briannorris@chromium.org>
Date:   Tue Apr 4 19:32:05 2017 +0000

    clocksource/drivers/arm_arch_timer: Don't assume clock runs in suspend
    
    [ Upstream commit d8ec7595a013237f82d965dcf981571aeb41855b ]
    
    The ARM specifies that the system counter "must be implemented in an
    always-on power domain," and so we try to use the counter as a source of
    timekeeping across suspend/resume. Unfortunately, some SoCs (e.g.,
    Rockchip's RK3399) do not keep the counter ticking properly when
    switched from their high-power clock to the lower-power clock used in
    system suspend. Support this quirk by adding a new device tree property.
    
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4502b6bb720d7a519c4cea76cf68a2425b481a45
Author: Fu Wei <fu.wei@linaro.org>
Date:   Wed Jan 18 21:25:30 2017 +0800

    clocksource: arm_arch_timer: rework PPI selection
    
    Currently, the arch timer driver uses ARCH_TIMER_PHYS_SECURE_PPI to mean
    the driver will use the secure PPI *and* potentially also use the
    non-secure PPI. This is somewhat confusing.
    
    For arm64 it never makes sense to use the secure PPI, but we do anyway,
    inheriting this behaviour from 32-bit arm. For ACPI, we may not even
    have a valid secure PPI, so we need to be able to only request the
    non-secure PPI.
    
    To that end, this patch reworks the timer driver so that we can request
    the non-secure PPI alone. The PPI selection is split out into a new
    function, arch_timer_select_ppi(), and verification of the selected PPI
    is shifted out to callers (as DT may select the PPI by other means and
    must handle this anyway).
    
    We now consistently use arch_timer_has_nonsecure_ppi() to determine
    whether we must manage a non-secure PPI *in addition* to a secure PPI.
    When we only have a non-secure PPI, this returns false.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Tested-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    [Mark: reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit 097cd143dd871bfceacf4ed252b177cf515a1888
Author: Fu Wei <fu.wei@linaro.org>
Date:   Wed Jan 18 21:25:29 2017 +0800

    clocksource: arm_arch_timer: add a new enum for spi type
    
    This patch add a new enum "arch_timer_spi_nr" and use it in the driver.
    Just for code's readability, no functional change.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit 831610c08e63b69b141c446c78eb9e9315660a5d
Author: Fu Wei <fu.wei@linaro.org>
Date:   Wed Jan 18 21:25:28 2017 +0800

    clocksource: arm_arch_timer: move enums and defines to header file
    
    To support the arm_arch_timer via ACPI we need to share defines and enums
    between the driver and the ACPI parser code.
    So we split out the relevant defines and enums into arm_arch_timer.h.
    
    No functional change.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit ee34f1e63d3d2b8df8607847eafbc859ec6818dc
Author: Fu Wei <fu.wei@linaro.org>
Date:   Wed Jan 18 21:25:27 2017 +0800

    clocksource: arm_arch_timer: rename the PPI enum
    
    In preparation for moving the PPI enum out into a header, rename the
    enum and its constituent values these so they are namespaced w.r.t. the
    arch timer. This will aid consistency and avoid potential name clashes
    when this move occurs.
    
    No functional change.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Tested-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    [Mark: reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit 8a5c21dc05ea44d0e7255c88f8f56af0971bbc68
Author: Fu Wei <fu.wei@linaro.org>
Date:   Wed Jan 18 21:25:26 2017 +0800

    clocksource: arm_arch_timer: rename type macros
    
    In preparation for moving the type macros out into a header, rename
    these so they are namespaced w.r.t. the arch timer. We'll apply the same
    prefix to other definitions in subsequent patches. This will aid
    consistency and avoid potential name clahses when this move occurs.
    
    No functional change.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Tested-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    [Mark: reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit ded24019b6b6f18ed079bbabc89832cd68959748
Author: Fu Wei <fu.wei@linaro.org>
Date:   Wed Jan 18 21:25:25 2017 +0800

    clocksource: arm_arch_timer: clean up printk usage
    
    Almost all string in the arm_arch_timer driver duplicate an common
    prefix (though a few do not). For consistency, it would be better to use
    pr_fmt(), and always use this prefix. At the same time, we may as well
    clean up some whitespace issues in arch_timer_banner and
    arch_timer_init.
    
    No functional change.
    
    Signed-off-by: Fu Wei <fu.wei@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    [Mark: reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>

commit 28e71e2fe8fe6cdbd1bdc61601ea50d6423d3cf0
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Mar 24 22:32:35 2017 +0100

    clocksource/drivers/fttmr010: Refactor to handle clock
    
    The plain Faraday FTTMR010 timer needs a clock to figure out its
    tick rate, and the gemini reads it directly from the system
    controller set-up. Split the init function and add two paths for
    the two compatible-strings. We only support clocking using PCLK
    because of lack of documentation on how EXTCLK works.
    
    The Gemini still works like before, but we can also support a
    generic, clock-based version.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f5bf0ee4ebf779e256bb710f638b4452d94e97fb
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Mar 24 22:32:34 2017 +0100

    clocksource/drivers/gemini: Rename Gemini timer to Faraday
    
    After some research it turns out that the "Gemini" timer is
    actually a generic IP block from Faraday Technology named
    FTTMR010, so as to not make things too confusing we need to
    rename the driver and its symbols to make sense.
    
    The implementation remains the same in this patch but we fix
    the copy-paste error in the timer name "nomadik_mtu" as we're
    at it.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bb0c6bb3b71cec4b00c3fb1c055f92ad05b905db
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Mar 24 22:32:33 2017 +0100

    clocksource: Augment bindings for Faraday timer
    
    It turns out that the Cortina Gemini timer block is just a
    standard IP block from Faraday Technology named FTTMR010.
    
    In order to make things clear and understandable, we rename the
    bindings with a Faraday compatible as primary and the Cortina
    gemini as a more specific case.
    
    For the plain Faraday timer we require two clock references,
    while the Gemini can keep it's syscon lookup pattern.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>

commit 500d0aa918a2ea6bb918fee8adcf27dc2912bcd1
Author: Alexander Kochetkov <al.kochet@gmail.com>
Date:   Tue Jan 31 15:43:16 2017 +0300

    ARM: dts: rockchip: disable arm-global-timer for rk3188
    
    The clocksource and the sched_clock provided by the arm_global_timer
    are quite unstable because their rates depend on the cpu frequency.
    
    On the other side, the arm_global_timer has a higher rating than the
    rockchip_timer, it will be selected by default by the time framework
    while we want to use the stable rockchip clocksource.
    
    Let's disable the arm_global_timer in order to have the rockchip
    clocksource selected by default.
    
    Signed-off-by: Alexander Kochetkov <al.kochet@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>

commit 627988a66aee3c845aa2f1f874a3ddba8adb89d9
Author: Alexander Kochetkov <al.kochet@gmail.com>
Date:   Tue Jan 31 15:43:15 2017 +0300

    ARM: dts: rockchip: Add timer entries to rk3188 SoC
    
    The patch add two timers to all rk3188 based boards.
    
    The first timer is from alive subsystem and it act as a backup
    for the local timers at sleep time. It act the same as other
    SoC rockchip timers already present in kernel.
    
    The second timer is from CPU subsystem and act as replacement
    for the arm-global-timer clocksource and sched clock. It run
    at stable frequency 24MHz.
    
    Signed-off-by: Alexander Kochetkov <al.kochet@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>

commit 5e0a39d0f727b35c8b7ef56ba0724c8ceb006297
Author: Alexander Kochetkov <al.kochet@gmail.com>
Date:   Tue Jan 31 15:43:14 2017 +0300

    clocksource/drivers/rockchip_timer: Implement clocksource timer
    
    The clock supplying the arm-global-timer on the rk3188 is coming from the
    the cpu clock itself and thus changes its rate everytime cpufreq adjusts
    the cpu frequency making this timer unsuitable as a stable clocksource
    and sched clock.
    
    The rk3188, rk3288 and following socs share a separate timer block already
    handled by the rockchip-timer driver. Therefore adapt this driver to also
    be able to act as clocksource and sched clock on rk3188.
    
    In order to test clocksource you can run following commands and check
    how much time it take in real. On rk3188 it take about ~45 seconds.
    
        cpufreq-set -f 1.6GHZ
        date; sleep 60; date
    
    In order to use the patch you need to declare two timers in the dts
    file. The first timer will be initialized as clockevent provider
    and the second one as clocksource. The clockevent must be from
    alive subsystem as it used as backup for the local timers at sleep
    time.
    
    The patch does not break compatibility with older device tree files.
    The older device tree files contain only one timer. The timer
    will be initialized as clockevent, as expected.
    
    rk3288 (and probably anything newer) is irrelevant to this patch,
    as it has the arch timer interface. This patch may be useful
    for Cortex-A9/A5 based parts.
    
    Signed-off-by: Alexander Kochetkov <al.kochet@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ac9ce6d1a0cc29767932d9f2fcb8ebc97c5106c8
Author: Rafał Miłecki <rafal@milecki.pl>
Date:   Thu Mar 9 10:47:10 2017 +0100

    clocksource: Add missing line break to error messages
    
    Printing with pr_* functions requires adding line break manually.
    
    Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9a4914ce0dff47b53df9ffbf9f48120b86ccb4a3
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Sat Mar 11 17:42:34 2017 +0000

    clocksource/drivers/orion: Add delay_timer implementation
    
    Add an implementation for the ARM delay timer, which is used for
    udelay().  This provides less CPU dependent and more accurate delays -
    the CPU loop on Marvell Dove appears to calibrate to around 6% too
    short.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0d9298ea37b5f590f3d10ccc2d8d34d26af3fa84
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Sat Mar 11 17:42:29 2017 +0000

    clocksource/drivers/orion: Read clock rate once
    
    Rather than reading the clock rate three times, read it once - we are
    about to add a fourth usage.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 992dd16f6528bd3f378dbcda43688d374be02943
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Wed Feb 1 11:53:46 2017 +0000

    arm64: arch_timer: Move clocksource_counter and co around
    
    In order to access clocksource_counter from the errata handling code,
    move it (together with the related structures and functions) towards
    the top of the file.
    
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

commit b32de9dd38fcf9063e993dcdd64cc64ad344d3ac
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Thu Feb 16 11:31:06 2017 +0100

    ARM: at91: move SoC detection to its own driver
    
    To simplify machine init and as the soc_device struct is not used as the
    parent for on-chip devices anymore, move SoC detection to its own driver.
    
    Change in dmesg:
     - before:
    DMA: preallocated 256 KiB pool for atomic coherent allocations
    AT91: Detected SoC family: sama5d2
    AT91: Detected SoC: sama5d27, revision 0
    No ATAGs?
    clocksource: tcb_clksrc: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 184217874325 ns
    at_xdmac f0010000.dma-controller: 16 channels, mapped at 0xe085b000
    SCSI subsystem initialized
    
     - after:
    DMA: preallocated 256 KiB pool for atomic coherent allocations
    No ATAGs?
    clocksource: tcb_clksrc: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 184217874325 ns
    at_xdmac f0010000.dma-controller: 16 channels, mapped at 0xe0859000
    AT91: Detected SoC family: sama5d2
    AT91: Detected SoC: sama5d27, revision 0
    SCSI subsystem initialized
    
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit 42969893b45a7a1864192f5634a8d2626e546a7b
Author: Matt Redfearn <matt.redfearn@mips.com>
Date:   Fri Mar 31 12:05:32 2017 +0100

    irqchip/mips-gic: Fix Local compare interrupt
    
    Commit 4cfffcfa5106 ("irqchip/mips-gic: Fix local interrupts") added
    mapping of several local interrupts during initialisation of the gic
    driver. This associates virq numbers with these interrupts.
    Unfortunately, as not all of the interrupts are mapped in hardware
    order, when drivers subsequently request these interrupts they conflict
    with the mappings that have already been set up. For example, this
    manifests itself in the gic clocksource driver, which fails to probe
    with the message:
    
    clocksource: GIC: mask: 0xffffffffffffffff max_cycles: 0x7350c9738,
    max_idle_ns: 440795203769 ns
    GIC timer IRQ 25 setup failed: -22
    
    This is because virq 25 (the correct IRQ number specified via device
    tree) was allocated to the PERFCTR interrupt (and 24 to the timer, 26 to
    the FDC). To fix this, map all of these local interrupts in the hardware
    order so as to associate their virq numbers with the correct hw
    interrupts.
    
    Fixes: 4cfffcfa5106 ("irqchip/mips-gic: Fix local interrupts")
    Acked-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Matt Redfearn <matt.redfearn@imgtec.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

commit f4474d50c7d483dd4432d5b0891b0bb9ad0eefc9
Author: James Hogan <jhogan@kernel.org>
Date:   Tue Mar 14 10:15:39 2017 +0000

    KVM: MIPS/VZ: Support hardware guest timer
    
    Transfer timer state to the VZ guest context (CP0_GTOffset & guest
    CP0_Count) when entering guest mode, enabling direct guest access to it,
    and transfer back to soft timer when saving guest register state.
    
    This usually allows guest code to directly read CP0_Count (via MFC0 and
    RDHWR) and read/write CP0_Compare, without trapping to the hypervisor
    for it to emulate the guest timer. Writing to CP0_Count or CP0_Cause.DC
    is much less common and still triggers a hypervisor GPSI exception, in
    which case the timer state is transferred back to an hrtimer before
    emulating the write.
    
    We are careful to prevent small amounts of drift from building up due to
    undeterministic time intervals between reading of the ktime and reading
    of CP0_Count. Some drift is expected however, since the system
    clocksource may use a different timer to the local CP0_Count timer used
    by VZ. This is permitted to prevent guest CP0_Count from appearing to go
    backwards.
    
    Signed-off-by: James Hogan <james.hogan@imgtec.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: "Radim Krčmář" <rkrcmar@redhat.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: kvm@vger.kernel.org

commit a17e0178fa2898bd8c4ccaaefa83c729759a361c
Author: Nicolai Stange <nicstange@gmail.com>
Date:   Mon Feb 6 22:12:03 2017 +0100

    clocksource: h8300_timer8: Don't reset rate in ->set_state_oneshot()
    
    With the upcoming NTP correction related rate adjustments to be implemented
    in the clockevents core, the latter needs to get informed about every rate
    change of a clockevent device made after its registration.
    
    Currently, h8300_timer8 violates this requirement in that it registers its
    clockevent device with the correct rate, but resets its ->mult and ->rate
    values in timer8_clock_event_start(), called from its ->set_state_oneshot()
    function.
    
    It seems like
      commit 4633f4cac85a ("clocksource/drivers/h8300: Cleanup startup and
                            remove module code."),
    which introduced the rate initialization at registration, missed to remove
    the manual setting of ->mult and ->shift from timer8_clock_event_start().
    
    Purge the setting of ->mult, ->shift, ->min_delta_ns and ->max_delta_ns
    from timer8_clock_event_start().
    
    Signed-off-by: Nicolai Stange <nicstange@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 4e53aa2fde4124878fc6b2183d6e8ec46e12ceb0
Author: Nicolai Stange <nicstange@gmail.com>
Date:   Mon Feb 6 22:12:02 2017 +0100

    clocksource: em_sti: Compute rate before registration
    
    With the upcoming NTP correction related rate adjustments to be implemented
    in the clockevents core, the latter needs to get informed about every rate
    change of a clockevent device made after its registration.
    
    Currently, em_sti violates this requirement in that it registers its
    clockevent device with a dummy rate and sets its final rate through
    clockevents_config() called from its ->set_state_oneshot().
    
    This patch moves the setting of the clockevent device's rate to its
    registration.
    
    I checked all current em_sti users in arch/arm/mach-shmobile and right now,
    none of them changes any rate in any clock tree relevant to em_sti after
    their respective time_init(). Since all em_sti instances are created after
    time_init(), none of them should ever observe any clock rate changes.
    
    - Determine the ->rate value in em_sti_probe() at device probing rather
      than at first usage.
    - Set the clockevent device's rate at its registration.
    - Although not strictly necessary for the upcoming clockevent core changes,
      set the clocksource's rate at its registration for consistency.
    
    Signed-off-by: Nicolai Stange <nicstange@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 3814ae092d36da04d5fbaf777c1564dc4ee68559
Author: Nicolai Stange <nicstange@gmail.com>
Date:   Mon Feb 6 22:12:01 2017 +0100

    clocksource: em_sti: Split clock prepare and enable steps
    
    Currently, the em_sti driver prepares and enables the needed clock in
    em_sti_enable(), potentially called through its clockevent device's
    ->set_state_oneshot().
    
    However, the clk_prepare() step may sleep whereas tick_program_event() and
    thus, ->set_state_oneshot(), can be called in atomic context.
    
    Split the clk_prepare_enable() in em_sti_enable() into two steps:
    - prepare the clock at device probing via clk_prepare()
    - and enable it in em_sti_enable() via clk_enable().
    Slightly reorder resource initialization in em_sti_probe() in order to
    facilitate error handling in later patches.
    
    Signed-off-by: Nicolai Stange <nicstange@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit c3c0a20df9fc55e2243a31f91a943b3e8ba61289
Author: Nicolai Stange <nicstange@gmail.com>
Date:   Mon Feb 6 22:12:00 2017 +0100

    clocksource: sh_tmu: Compute rate before registration again
    
    With the upcoming NTP correction related rate adjustments to be implemented
    in the clockevents core, the latter needs to get informed about every rate
    change of a clockevent device made after its registration.
    
    Currently, sh_tmu violates this requirement in that it registers its
    clockevent device with a dummy rate and sets its final rate through
    clockevents_config() called from its ->set_state_oneshot() and
    ->set_state_periodic() functions respectively.
    
    This patch moves the setting of the clockevent device's rate to its
    registration.
    
    Note that there has been some back and forth regarding this question with
    respect to the clocksource also provided by this driver:
      commit 66f49121ffa4 ("clocksource: sh_tmu: compute mult and shift before
                            registration")
    moves the rate determination from the clocksource's ->enable() function to
    before its registration. OTOH, the later
      commit 0aeac458d9eb ("clocksource: sh_tmu: __clocksource_updatefreq_hz()
                            update")
    basically reverts this, saying
      "Without this patch the old code uses clocksource_register() together
       with a hack that assumes a never changing clock rate."
    
    However, I checked all current sh_tmu users in arch/sh as well as in
    arch/arm/mach-shmobile carefully and right now, none of them changes any
    rate in any clock tree relevant to sh_tmu after their respective
    time_init(). Since all sh_tmu instances are created after time_init(), none
    of them should ever observe any clock rate changes.
    
    What's more, both, a clocksource as well as a clockevent device, can
    immediately get selected for use at their registration and thus, enabled
    at this point already. So it's probably safer to assume a "never changing
    clock rate" here.
    
    - Move the struct sh_tmu_channel's ->rate member to struct sh_tmu_device:
      it's a property of the underlying clock which is in turn specific to
      the sh_tmu_device.
    - Determine the ->rate value in sh_tmu_setup() at device probing rather
      than at first usage.
    - Set the clockevent device's rate at its registration.
    - Although not strictly necessary for the upcoming clockevent core changes,
      set the clocksource's rate at its registration for consistency.
    
    Signed-off-by: Nicolai Stange <nicstange@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 890f423b266623e1cfb3a97b864f3e5039bdfbb9
Author: Nicolai Stange <nicstange@gmail.com>
Date:   Mon Feb 6 22:11:59 2017 +0100

    clocksource: sh_cmt: Compute rate before registration again
    
    With the upcoming NTP correction related rate adjustments to be implemented
    in the clockevents core, the latter needs to get informed about every rate
    change of a clockevent device made after its registration.
    
    Currently, sh_cmt violates this requirement in that it registers its
    clockevent device with a dummy rate and sets its final ->mult and ->shift
    values from its ->set_state_oneshot() and ->set_state_periodic() functions
    respectively.
    
    This patch moves the setting of the clockevent device's ->mult and ->shift
    values to before its registration.
    
    Note that there has been some back and forth regarding this question with
    respect to the clocksource also provided by this driver:
      commit f4d7c3565c16 ("clocksource: sh_cmt: compute mult and shift before
                            registration")
    moves the rate determination from the clocksource's ->enable() function to
    before its registration. OTOH, the later
      commit 3593f5fe40a1 ("clocksource: sh_cmt: __clocksource_updatefreq_hz()
                            update")
    basically reverts this, saying
      "Without this patch the old code uses clocksource_register() together
       with a hack that assumes a never changing clock rate."
    
    However, I checked all current sh_cmt users in arch/sh as well as in
    arch/arm/mach-shmobile carefully and right now, none of them changes any
    rate in any clock tree relevant to sh_cmt after their respective
    time_init(). Since all sh_cmt instances are created after time_init(), none
    of them should ever observe any clock rate changes.
    
    What's more, both, a clocksource as well as a clockevent device, can
    immediately get selected for use at their registration and thus, enabled
    at this point already. So it's probably safer to assume a "never changing
    clock rate" here.
    
    - Move the struct sh_cmt_channel's ->rate member to struct sh_cmt_device:
      it's a property of the underlying clock which is in turn specific to
      the sh_cmt_device.
    - Determine the ->rate value in sh_cmt_setup() at device probing rather
      than at first usage.
    - Set the clockevent device's ->mult and ->shift values right before its
      registration.
    - Although not strictly necessary for the upcoming clockevent core changes,
      set the clocksource's rate at its registration for consistency.
    
    Signed-off-by: Nicolai Stange <nicstange@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit bd5ee529d0be7df2ec2756e2c808b5e2c440c070
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Mar 13 15:57:12 2017 +0100

    x86/tsc: Fix ART for TSC_KNOWN_FREQ
    
    commit 44fee88cea43d3c2cac962e0439cb10a3cabff6d upstream.
    
    Subhransu reported that convert_art_to_tsc() isn't working for him.
    
    The ART to TSC relation is only set up for systems which use the refined
    TSC calibration. Systems with known TSC frequency (available via CPUID 15)
    are not using the refined calibration and therefor the ART to TSC relation
    is never established.
    
    Add the setup to the known frequency init path which skips ART
    calibration. The init code needs to be duplicated as for systems which use
    refined calibration the ART setup must be delayed until calibration has
    been done.
    
    The problem has been there since the ART support was introdduced, but only
    detected now because Subhransu tested the first time on hardware which has
    TSC frequency enumerated via CPUID 15.
    
    Note for stable: The conditional has changed from TSC_RELIABLE to
                     TSC_KNOWN_FREQUENCY.
    
    [ tglx: Rewrote changelog and identified the proper 'Fixes' commit ]
    
    Fixes: f9677e0f8308 ("x86/tsc: Always Running Timer (ART) correlated clocksource")
    Reported-by: "Prusty, Subhransu S" <subhransu.s.prusty@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: christopher.s.hall@intel.com
    Cc: kevin.b.stanton@intel.com
    Cc: john.stultz@linaro.org
    Cc: akataria@vmware.com
    Link: http://lkml.kernel.org/r/20170313145712.GI3312@twins.programming.kicks-ass.net
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ec98e6ffdce5eb5dbe3593df2aa824d04d70842
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Mar 13 15:57:12 2017 +0100

    x86/tsc: Fix ART for TSC_KNOWN_FREQ
    
    commit 44fee88cea43d3c2cac962e0439cb10a3cabff6d upstream.
    
    Subhransu reported that convert_art_to_tsc() isn't working for him.
    
    The ART to TSC relation is only set up for systems which use the refined
    TSC calibration. Systems with known TSC frequency (available via CPUID 15)
    are not using the refined calibration and therefor the ART to TSC relation
    is never established.
    
    Add the setup to the known frequency init path which skips ART
    calibration. The init code needs to be duplicated as for systems which use
    refined calibration the ART setup must be delayed until calibration has
    been done.
    
    The problem has been there since the ART support was introdduced, but only
    detected now because Subhransu tested the first time on hardware which has
    TSC frequency enumerated via CPUID 15.
    
    Note for stable: The conditional has changed from TSC_RELIABLE to
                     TSC_KNOWN_FREQUENCY.
    
    [ tglx: Rewrote changelog and identified the proper 'Fixes' commit ]
    
    Fixes: f9677e0f8308 ("x86/tsc: Always Running Timer (ART) correlated clocksource")
    Reported-by: "Prusty, Subhransu S" <subhransu.s.prusty@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Cc: christopher.s.hall@intel.com
    Cc: kevin.b.stanton@intel.com
    Cc: john.stultz@linaro.org
    Cc: akataria@vmware.com
    Link: http://lkml.kernel.org/r/20170313145712.GI3312@twins.programming.kicks-ass.net
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18f48c9f3c88ec9fbf50c8a193f81969847ebb21
Merge: 57fd0b77d659 33d8c15559df
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Mar 17 13:13:35 2017 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Thomas Gleixner:
     "Just a simple revert of a new sched_clock implementation which turned
      out to be buggy"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      Revert "clocksource/drivers/tcb_clksrc: Use 32 bit tcb as sched_clock"

commit abab3f49890dceea76a99ae064cf74ef3d2bfec0
Author: Joonyoung Shim <jy0922.shim@samsung.com>
Date:   Tue Jan 17 13:54:36 2017 +0900

    clocksource/exynos_mct: Clear interrupt when cpu is shut down
    
    commit bc7c36eedb0c7004aa06c2afc3c5385adada8fa3 upstream.
    
    When a CPU goes offline a potentially pending timer interrupt is not
    cleared. When the CPU comes online again then the pending interrupt is
    delivered before the per cpu clockevent device is initialized. As a
    consequence the tick interrupt handler dereferences a NULL pointer.
    
    [   51.251378] Unable to handle kernel NULL pointer dereference at virtual address 00000040
    [   51.289348] task: ee942d00 task.stack: ee960000
    [   51.293861] PC is at tick_periodic+0x38/0xb0
    [   51.298102] LR is at tick_handle_periodic+0x1c/0x90
    
    Clear the pending interrupt in the cpu dying path.
    
    Fixes: 56a94f13919c ("clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier")
    Reported-by: Seung-Woo Kim <sw0312.kim@samsung.com>
    Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com>
    Cc: linux-samsung-soc@vger.kernel.org
    Cc: cw00.choi@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: javier@osg.samsung.com
    Cc: kgene@kernel.org
    Cc: krzk@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1484628876-22065-1-git-send-email-jy0922.shim@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    [bwh: Backported to 3.16: add definition of the 'mevt' variable, added earlier
     upstream]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 44fee88cea43d3c2cac962e0439cb10a3cabff6d
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Mar 13 15:57:12 2017 +0100

    x86/tsc: Fix ART for TSC_KNOWN_FREQ
    
    Subhransu reported that convert_art_to_tsc() isn't working for him.
    
    The ART to TSC relation is only set up for systems which use the refined
    TSC calibration. Systems with known TSC frequency (available via CPUID 15)
    are not using the refined calibration and therefor the ART to TSC relation
    is never established.
    
    Add the setup to the known frequency init path which skips ART
    calibration. The init code needs to be duplicated as for systems which use
    refined calibration the ART setup must be delayed until calibration has
    been done.
    
    The problem has been there since the ART support was introdduced, but only
    detected now because Subhransu tested the first time on hardware which has
    TSC frequency enumerated via CPUID 15.
    
    Note for stable: The conditional has changed from TSC_RELIABLE to
                     TSC_KNOWN_FREQUENCY.
    
    [ tglx: Rewrote changelog and identified the proper 'Fixes' commit ]
    
    Fixes: f9677e0f8308 ("x86/tsc: Always Running Timer (ART) correlated clocksource")
    Reported-by: "Prusty, Subhransu S" <subhransu.s.prusty@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Cc: christopher.s.hall@intel.com
    Cc: kevin.b.stanton@intel.com
    Cc: john.stultz@linaro.org
    Cc: akataria@vmware.com
    Link: http://lkml.kernel.org/r/20170313145712.GI3312@twins.programming.kicks-ass.net
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 41d9830cd09f652936be95431cecfbac39ed09f7
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sat Jan 21 12:59:05 2017 +0100

    ARM: gemini: DT for the Cortina Gemini SoC platforms
    
    This adds initial and compulsory device tree support to the
    Gemini ARMv4 platform.
    
    We are selecting a bunch of "absolute minimals" for getting a working
    system up with just device tree:
    
    - We select USE_OF for natural reasons or nothing works.
    
    - We select CLKSRC_OF and GEMINI_TIMER so we get timekeeping from
      the clocksource.
    
    - We select GPIO_GEMINI because these are used as irqchips, and
      for a generic driver it is not reasonable for those to have to
      select every possible irqchip in the world to work, the platform
      should simply provide the available irqchips.
    
    - We select a UART that can be exprected to work with
      SERIAL_OF_PLATFORM which is the name for an 8250 OF-probed
      serial port.
    
    - We select the syscon-based reset controller: it's not fun when
      "reboot" doesn't work because of Kconfig, so we just select
      POWER_RESET and POWER_RESET_SYSCON.
    
    - We perhaps a bit controversiallt select ARM_APPENDED_DTB, because
      this platform is using the ancient RedBoot, and can *NOT* be
      expected to upgrade its bootloaders. Appended device tree is
      simply how these devices have to work with device tree.
    
    Cc: Janos Laube <janos.dev@gmail.com>
    Cc: Paulius Zaleckas <paulius.zaleckas@gmail.com>
    Cc: Hans Ulli Kroll <ulli.kroll@googlemail.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 33d8c15559df4f0bce25d7e16ebb5879e249f2e7
Author: Romain Izard <romain.izard.pro@gmail.com>
Date:   Thu Mar 9 17:58:38 2017 +0100

    Revert "clocksource/drivers/tcb_clksrc: Use 32 bit tcb as sched_clock"
    
    This reverts commit 7b9f1d16e6d1 ("clocksource/drivers/tcb_clksrc: Use
    32 bit tcb as sched_clock"). In the current state, the kernel warns
    against a late registration of the new sched_clock, the printk clock
    resets after only a few minutes, and it seems that scheduling can be
    affected as well.
    
    Signed-off-by: Romain Izard <romain.izard.pro@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 90b20432aeb850ef84086a72893cd9411479d896
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Fri Mar 3 14:21:42 2017 +0100

    x86/vdso: Add VCLOCK_HVCLOCK vDSO clock read method
    
    Hyper-V TSC page clocksource is suitable for vDSO, however, the protocol
    defined by the hypervisor is different from VCLOCK_PVCLOCK. Implement the
    required support by adding hvclock_page VVAR.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: Dexuan Cui <decui@microsoft.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: devel@linuxdriverproject.org
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: virtualization@lists.linux-foundation.org
    Link: http://lkml.kernel.org/r/20170303132142.25595-4-vkuznets@redhat.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit bd2a9adaadb8defcaf6c284bca7ff41634105f51
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Fri Mar 3 14:21:40 2017 +0100

    x86/hyperv: Implement hv_get_tsc_page()
    
    To use Hyper-V TSC page clocksource from vDSO we need to make tsc_pg
    available. Implement hv_get_tsc_page() and add CONFIG_HYPERV_TSCPAGE to
    make #ifdef-s simple.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: Dexuan Cui <decui@microsoft.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: devel@linuxdriverproject.org
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: virtualization@lists.linux-foundation.org
    Link: http://lkml.kernel.org/r/20170303132142.25595-2-vkuznets@redhat.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit f94c8d116997597fc00f0812b0ab9256e7b0c58f
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Mar 1 15:53:38 2017 +0100

    sched/clock, x86/tsc: Rework the x86 'unstable' sched_clock() interface
    
    Wanpeng Li reported that since the following commit:
    
      acb04058de49 ("sched/clock: Fix hotplug crash")
    
    ... KVM always runs with unstable sched-clock even though KVM's
    kvm_clock _is_ stable.
    
    The problem is that we've tied clear_sched_clock_stable() to the TSC
    state, and overlooked that sched_clock() is a paravirt function.
    
    Solve this by doing two things:
    
     - tie the sched_clock() stable state more clearly to the TSC stable
       state for the normal (!paravirt) case.
    
     - only call clear_sched_clock_stable() when we mark TSC unstable
       when we use native_sched_clock().
    
    The first means we can actually run with stable sched_clock in more
    situations then before, which is good. And since commit:
    
      12907fbb1a69 ("sched/clock, clocksource: Add optional cs::mark_unstable() method")
    
    ... this should be reliable. Since any detection of TSC fail now results
    in marking the TSC unstable.
    
    Reported-by: Wanpeng Li <kernellwp@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Fixes: acb04058de49 ("sched/clock: Fix hotplug crash")
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 73667e31a153a66da97feb1584726222504924f8
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Feb 14 22:17:17 2017 +0100

    x86/hyperv: Hide unused label
    
    This new 32-bit warning just showed up:
    
    arch/x86/hyperv/hv_init.c: In function 'hyperv_init':
    arch/x86/hyperv/hv_init.c:167:1: error: label 'register_msr_cs' defined but not used [-Werror=unused-label]
    
    The easiest solution is to move the label up into the existing #ifdef that
    has the goto.
    
    Fixes: dee863b571b0 ("hv: export current Hyper-V clocksource")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: devel@linuxdriverproject.org
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Link: http://lkml.kernel.org/r/20170214211736.2641241-1-arnd@arndb.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit b3a20f6bf9237e5223a47fd9eb1f54b4aa00ab9f
Author: Chris Metcalf <cmetcalf@mellanox.com>
Date:   Wed Nov 16 11:18:05 2016 -0500

    tile: avoid using clocksource_cyc2ns with absolute cycle count
    
    commit e658a6f14d7c0243205f035979d0ecf6c12a036f upstream.
    
    For large values of "mult" and long uptimes, the intermediate
    result of "cycles * mult" can overflow 64 bits.  For example,
    the tile platform calls clocksource_cyc2ns with a 1.2 GHz clock;
    we have mult = 853, and after 208.5 days, we overflow 64 bits.
    
    Since clocksource_cyc2ns() is intended to be used for relative
    cycle counts, not absolute cycle counts, performance is more
    importance than accepting a wider range of cycle values.  So,
    just use mult_frac() directly in tile's sched_clock().
    
    Commit 4cecf6d401a0 ("sched, x86: Avoid unnecessary overflow
    in sched_clock") by Salman Qazi results in essentially the same
    generated code for x86 as this change does for tile.  In fact,
    a follow-on change by Salman introduced mult_frac() and switched
    to using it, so the C code was largely identical at that point too.
    
    Peter Zijlstra then added mul_u64_u32_shr() and switched x86
    to use it.  This is, in principle, better; by optimizing the
    64x64->64 multiplies to be 32x32->64 multiplies we can potentially
    save some time.  However, the compiler piplines the 64x64->64
    multiplies pretty well, and the conditional branch in the generic
    mul_u64_u32_shr() causes some bubbles in execution, with the
    result that it's pretty much a wash.  If tilegx provided its own
    implementation of mul_u64_u32_shr() without the conditional branch,
    we could potentially save 3 cycles, but that seems like small gain
    for a fair amount of additional build scaffolding; no other platform
    currently provides a mul_u64_u32_shr() override, and tile doesn't
    currently have an <asm/div64.h> header to put the override in.
    
    Additionally, gcc currently has an optimization bug that prevents
    it from recognizing the opportunity to use a 32x32->64 multiply,
    and so the result would be no better than the existing mult_frac()
    until such time as the compiler is fixed.
    
    For now, just using mult_frac() seems like the right answer.
    
    Signed-off-by: Chris Metcalf <cmetcalf@mellanox.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 20dcfe1b7df4072a3c13bdb7506f7138125d0099
Merge: c9b9f207b904 336a9cde10d6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Feb 20 10:06:32 2017 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Nothing exciting, just the usual pile of fixes, updates and cleanups:
    
       - A bunch of clocksource driver updates
    
       - Removal of CONFIG_TIMER_STATS and the related /proc file
    
       - More posix timer slim down work
    
       - A scalability enhancement in the tick broadcast code
    
       - Math cleanups"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (23 commits)
      hrtimer: Catch invalid clockids again
      math64, tile: Fix build failure
      clocksource/drivers/arm_arch_timer:: Mark cyclecounter __ro_after_init
      timerfd: Protect the might cancel mechanism proper
      timer_list: Remove useless cast when printing
      time: Remove CONFIG_TIMER_STATS
      clocksource/drivers/arm_arch_timer: Work around Hisilicon erratum 161010101
      clocksource/drivers/arm_arch_timer: Introduce generic errata handling infrastructure
      clocksource/drivers/arm_arch_timer: Remove fsl-a008585 parameter
      clocksource/drivers/arm_arch_timer: Add dt binding for hisilicon-161010101 erratum
      clocksource/drivers/ostm: Add renesas-ostm timer driver
      clocksource/drivers/ostm: Document renesas-ostm timer DT bindings
      clocksource/drivers/tcb_clksrc: Use 32 bit tcb as sched_clock
      clocksource/drivers/gemini: Add driver for the Cortina Gemini
      clocksource: add DT bindings for Cortina Gemini
      clockevents: Add a clkevt-of mechanism like clksrc-of
      tick/broadcast: Reduce lock cacheline contention
      timers: Omit POSIX timer stuff from task_struct when disabled
      x86/timer: Make delay() work during early bootup
      delay: Add explanation of udelay() inaccuracy
      ...

commit 3d837bc01c2153565333b2ce71d613b6e7cc761c
Author: Bhumika Goyal <bhumirks@gmail.com>
Date:   Sun Feb 12 00:50:18 2017 +0530

    clocksource/drivers/arm_arch_timer:: Mark cyclecounter __ro_after_init
    
    The object cyclecounter of type cyclecounter is only modified during
    initialization in arch_counter_register. So it can be marked
    __ro_after_init.
    
    Signed-off-by: Bhumika Goyal <bhumirks@gmail.com>
    Cc: mark.rutland@arm.com
    Cc: keescook@chromium.org
    Cc: marc.zyngier@arm.com
    Cc: daniel.lezcano@linaro.org
    Cc: julia.lawall@lip6.fr
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1486840818-22214-1-git-send-email-bhumirks@gmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit dee863b571b0a76e9c549ee99e8782bb4bc6502b
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Sat Feb 4 09:57:13 2017 -0700

    hv: export current Hyper-V clocksource
    
    As a preparation to implementing Hyper-V PTP device supporting
    .getcrosststamp we need to export a reference to the current Hyper-V
    clocksource in use (MSR or TSC page).
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04be31f5be113de38b80e307e3c6f8468f3ff25e
Author: Chris Metcalf <cmetcalf@mellanox.com>
Date:   Wed Nov 16 11:18:05 2016 -0500

    tile: avoid using clocksource_cyc2ns with absolute cycle count
    
    commit e658a6f14d7c0243205f035979d0ecf6c12a036f upstream.
    
    For large values of "mult" and long uptimes, the intermediate
    result of "cycles * mult" can overflow 64 bits.  For example,
    the tile platform calls clocksource_cyc2ns with a 1.2 GHz clock;
    we have mult = 853, and after 208.5 days, we overflow 64 bits.
    
    Since clocksource_cyc2ns() is intended to be used for relative
    cycle counts, not absolute cycle counts, performance is more
    importance than accepting a wider range of cycle values.  So,
    just use mult_frac() directly in tile's sched_clock().
    
    Commit 4cecf6d401a0 ("sched, x86: Avoid unnecessary overflow
    in sched_clock") by Salman Qazi results in essentially the same
    generated code for x86 as this change does for tile.  In fact,
    a follow-on change by Salman introduced mult_frac() and switched
    to using it, so the C code was largely identical at that point too.
    
    Peter Zijlstra then added mul_u64_u32_shr() and switched x86
    to use it.  This is, in principle, better; by optimizing the
    64x64->64 multiplies to be 32x32->64 multiplies we can potentially
    save some time.  However, the compiler piplines the 64x64->64
    multiplies pretty well, and the conditional branch in the generic
    mul_u64_u32_shr() causes some bubbles in execution, with the
    result that it's pretty much a wash.  If tilegx provided its own
    implementation of mul_u64_u32_shr() without the conditional branch,
    we could potentially save 3 cycles, but that seems like small gain
    for a fair amount of additional build scaffolding; no other platform
    currently provides a mul_u64_u32_shr() override, and tile doesn't
    currently have an <asm/div64.h> header to put the override in.
    
    Additionally, gcc currently has an optimization bug that prevents
    it from recognizing the opportunity to use a 32x32->64 multiply,
    and so the result would be no better than the existing mult_frac()
    until such time as the compiler is fixed.
    
    For now, just using mult_frac() seems like the right answer.
    
    Signed-off-by: Chris Metcalf <cmetcalf@mellanox.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f4066c2bc4d0de4e5dcbff21dae41e89fe8f38c0
Author: Marcelo Tosatti <mtosatti@redhat.com>
Date:   Tue Jan 24 15:09:41 2017 -0200

    kvmclock: export kvmclock clocksource and data pointers
    
    To be used by KVM PTP driver.
    
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit 4cfffcfa5106492f5785924ce2e9af49f075999b
Author: Marcin Nowakowski <marcin.nowakowski@mips.com>
Date:   Wed Jan 25 15:08:25 2017 +0100

    irqchip/mips-gic: Fix local interrupts
    
    Some local interrupts are not initialised properly at the moment and
    cannot be used since the domain's alloc method is never called for them.
    
    This has been observed earlier and partially fixed in commit
    e875bd66dfb ("irqchip/mips-gic: Fix local interrupts"), but that change
    still relied on the interrupt to be requested by an external driver (eg.
    drivers/clocksource/mips-gic-timer.c).
    
    This does however not solve the issue for interrupts that are not
    referenced by any driver through the device tree and results in
    request_irq() calls returning -ENOSYS. It can be observed when attempting
    to use perf tool to access hardware performance counters.
    
    Fix this by explicitly calling irq_create_fwspec_mapping() for local
    interrupts.
    
    Fixes: e875bd66dfb ("irqchip/mips-gic: Fix local interrupts")
    Signed-off-by: Marcin Nowakowski <marcin.nowakowski@imgtec.com>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: linux-mips@linux-mips.org
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

commit bb42ca47401010fc02901b5e8f79e40a26f208cb
Author: Ding Tianhong <dingtianhong@huawei.com>
Date:   Mon Feb 6 16:47:42 2017 +0000

    clocksource/drivers/arm_arch_timer: Work around Hisilicon erratum 161010101
    
    Erratum Hisilicon-161010101 says that the ARM generic timer counter "has
    the potential to contain an erroneous value when the timer value
    changes". Accesses to TVAL (both read and write) are also affected due
    to the implicit counter read. Accesses to CVAL are not affected.
    
    The workaround is to reread the system count registers until the value
    of the second read is larger than the first one by less than 32, the
    system counter can be guaranteed not to return wrong value twice by
    back-to-back read and the error value is always larger than the correct
    one by 32. Writes to TVAL are replaced with an equivalent write to CVAL.
    
    Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
    [Mark: split patch, fix Kconfig, reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 16d10ef29f25aba923779234bb93a451b14d20e6
Author: Ding Tianhong <dingtianhong@huawei.com>
Date:   Mon Feb 6 16:47:41 2017 +0000

    clocksource/drivers/arm_arch_timer: Introduce generic errata handling infrastructure
    
    Currently we have code inline in the arch timer probe path to cater for
    Freescale erratum A-008585, complete with ifdeffery. This is a little
    ugly, and will get worse as we try to add more errata handling.
    
    This patch refactors the handling of Freescale erratum A-008585. Now the
    erratum is described in a generic arch_timer_erratum_workaround
    structure, and the probe path can iterate over these to detect errata
    and enable workarounds.
    
    This will simplify the addition and maintenance of code handling
    Hisilicon erratum 161010101.
    
    Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
    [Mark: split patch, correct Kconfig, reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5444ea6a7f46276876e94ecf8d44615af1ef22f7
Author: Ding Tianhong <dingtianhong@huawei.com>
Date:   Mon Feb 6 16:47:40 2017 +0000

    clocksource/drivers/arm_arch_timer: Remove fsl-a008585 parameter
    
    Having a command line option to flip the errata handling for a
    particular erratum is a little bit unusual, and it's vastly superior to
    pass this in the DT. By common consensus, it's best to kill off the
    command line parameter.
    
    Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
    [Mark: split patch, reword commit message]
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 729e55225b1f6225ee7a2a358d5141a3264627c4
Author: Ding Tianhong <dingtianhong@huawei.com>
Date:   Mon Feb 6 16:47:39 2017 +0000

    clocksource/drivers/arm_arch_timer: Add dt binding for hisilicon-161010101 erratum
    
    This erratum describes a bug in logic outside the core, so MIDR can't be
    used to identify its presence, and reading an SoC-specific revision
    register from common arch timer code would be awkward.  So, describe it
    in the device tree.
    
    Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fb6002a8268c493435d0e6d0d6ad17873919a7f6
Author: Chris Brandt <chris.brandt@renesas.com>
Date:   Fri Jan 27 15:02:15 2017 -0500

    clocksource/drivers/ostm: Add renesas-ostm timer driver
    
    This patch adds a OSTM driver for the Renesas architecture.
    The OS Timer (OSTM) has independent channels that can be
    used as a freerun or interval times.
    This driver uses the first probed device as a clocksource
    and then any additional devices as clock events.
    
    Signed-off-by: Chris Brandt <chris.brandt@renesas.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a1966cd29d5fee2fada47b82dcb73126eb65dfd4
Author: Chris Brandt <chris.brandt@renesas.com>
Date:   Fri Jan 27 15:02:14 2017 -0500

    clocksource/drivers/ostm: Document renesas-ostm timer DT bindings
    
    Signed-off-by: Chris Brandt <chris.brandt@renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7b9f1d16e6d1268ed45d98b36c77f8920e7a209e
Author: David Engraf <david.engraf@sysgo.com>
Date:   Wed Jan 11 14:50:59 2017 +0100

    clocksource/drivers/tcb_clksrc: Use 32 bit tcb as sched_clock
    
    On newer boards the TC can be read as single 32 bit value without locking.
    Thus the clock can be used as reference for sched_clock which is much more
    accurate than the jiffies implementation.
    
    Tested on a Atmel SAMA5D2 board.
    
    Signed-off-by: David Engraf <david.engraf@sysgo.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4750535bc94b86fde06b0e698d6bac738b020be4
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sun Jan 22 13:17:17 2017 +0100

    clocksource/drivers/gemini: Add driver for the Cortina Gemini
    
    This is a rewrite of the Gemini timer
    driver in arch/arm/mach-gemini/timer.c trying to do everything
    the device tree way:
    
    - Make every IO-access relative to a base address and dynamic
      so we can do a dynamic ioremap and get going.
    - Do not poke around directly in the global syscon registers,
      access them using the syscon regmap style design pattern for
      the one register we need to check.
    - Find register range and interrupt from the device tree.
    
    Cc: Janos Laube <janos.dev@gmail.com>
    Cc: Paulius Zaleckas <paulius.zaleckas@gmail.com>
    Cc: Hans Ulli Kroll <ulli.kroll@googlemail.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9744b181ee3f0832e5a9a51055c8fd2c6ca6827a
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sun Jan 22 13:17:07 2017 +0100

    clocksource: add DT bindings for Cortina Gemini
    
    This adds device tree bindings for the Cortina Systems Gemini
    timer block used in these SoCs.
    
    Cc: Janos Laube <janos.dev@gmail.com>
    Cc: Paulius Zaleckas <paulius.zaleckas@gmail.com>
    Cc: Hans Ulli Kroll <ulli.kroll@googlemail.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 376bc27150f180d9f5eddec6a14117780177589d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Apr 19 08:56:27 2016 +0200

    clockevents: Add a clkevt-of mechanism like clksrc-of
    
    The current code uses the CLOCKSOURCE_OF_DECLARE macro to fill the clksrc
    table with a t-uple (name, init_function).
    
    Unfortunately it ends up to the clockevent and the clocksource being
    both initialized with this macro. It is not a problem by itself but there
    is not a clear distinction between a clockevent and a clocksource in the
    code initialization path. Somebody can argue there are the same IP block
    and the same DT node. But conceptually from the software side, there are
    two distincts entities and as is they should be initialized separetely.
    Some drivers which do not have a clocksource end up by using the
    CLOCKSOURCE_OF_DECLARE macro to declare a clockevent.
    
    Another result is the fuzzy organization in the clocksource directory,
    where the clockevents are implemented in the same file than the
    clocksources or file labelled timer-something implementing a clocksource.
    
    This patch provides another macro to specifically declare a clockevent in
    the same way than the clocksource and gives the opportunity to write two
    separate drivers, one for the clocksource and another for the clockevents.
    
    Hopefully, that can help to do some housework in the directory, perhaps
    split the drivers in to entities, for example:
            - clksrc-rockchip.c
            - clkevt-rockchip.c
    
    Also, it gives the possibility to declare clocksources separately in the
    DT and then use a clocksource from IP block while while clockevents are
    used from another IP block.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5647dbf8f0807a35421bd0232247b02413ef2cab
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Sat Jan 28 12:37:15 2017 -0700

    Drivers: hv: restore TSC page cleanup before kexec
    
    We need to cleanup the TSC page before doing kexec/kdump or the new kernel
    may crash if it tries to use it.
    
    Fixes: 63ed4e0c67df ("Drivers: hv: vmbus: Consolidate all Hyper-V specific clocksource code")
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d340098985b2c0f72f12c12106b83fd1079a60f
Author: Joonyoung Shim <jy0922.shim@samsung.com>
Date:   Tue Jan 17 13:54:36 2017 +0900

    clocksource/exynos_mct: Clear interrupt when cpu is shut down
    
    commit bc7c36eedb0c7004aa06c2afc3c5385adada8fa3 upstream.
    
    When a CPU goes offline a potentially pending timer interrupt is not
    cleared. When the CPU comes online again then the pending interrupt is
    delivered before the per cpu clockevent device is initialized. As a
    consequence the tick interrupt handler dereferences a NULL pointer.
    
    [   51.251378] Unable to handle kernel NULL pointer dereference at virtual address 00000040
    [   51.289348] task: ee942d00 task.stack: ee960000
    [   51.293861] PC is at tick_periodic+0x38/0xb0
    [   51.298102] LR is at tick_handle_periodic+0x1c/0x90
    
    Clear the pending interrupt in the cpu dying path.
    
    Fixes: 56a94f13919c ("clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier")
    Reported-by: Seung-Woo Kim <sw0312.kim@samsung.com>
    Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com>
    Cc: linux-samsung-soc@vger.kernel.org
    Cc: cw00.choi@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: javier@osg.samsung.com
    Cc: kgene@kernel.org
    Cc: krzk@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1484628876-22065-1-git-send-email-jy0922.shim@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit c49b31b585a17fd59227a23bd98b7c834947e851
Author: Joonyoung Shim <jy0922.shim@samsung.com>
Date:   Tue Jan 17 13:54:36 2017 +0900

    clocksource/exynos_mct: Clear interrupt when cpu is shut down
    
    commit bc7c36eedb0c7004aa06c2afc3c5385adada8fa3 upstream.
    
    When a CPU goes offline a potentially pending timer interrupt is not
    cleared. When the CPU comes online again then the pending interrupt is
    delivered before the per cpu clockevent device is initialized. As a
    consequence the tick interrupt handler dereferences a NULL pointer.
    
    [   51.251378] Unable to handle kernel NULL pointer dereference at virtual address 00000040
    [   51.289348] task: ee942d00 task.stack: ee960000
    [   51.293861] PC is at tick_periodic+0x38/0xb0
    [   51.298102] LR is at tick_handle_periodic+0x1c/0x90
    
    Clear the pending interrupt in the cpu dying path.
    
    Fixes: 56a94f13919c ("clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier")
    Reported-by: Seung-Woo Kim <sw0312.kim@samsung.com>
    Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com>
    Cc: linux-samsung-soc@vger.kernel.org
    Cc: cw00.choi@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: javier@osg.samsung.com
    Cc: kgene@kernel.org
    Cc: krzk@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1484628876-22065-1-git-send-email-jy0922.shim@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 098b62b757a4303f576a6d2bb8f11d0ad93797d1
Author: Joonyoung Shim <jy0922.shim@samsung.com>
Date:   Tue Jan 17 13:54:36 2017 +0900

    clocksource/exynos_mct: Clear interrupt when cpu is shut down
    
    commit bc7c36eedb0c7004aa06c2afc3c5385adada8fa3 upstream.
    
    When a CPU goes offline a potentially pending timer interrupt is not
    cleared. When the CPU comes online again then the pending interrupt is
    delivered before the per cpu clockevent device is initialized. As a
    consequence the tick interrupt handler dereferences a NULL pointer.
    
    [   51.251378] Unable to handle kernel NULL pointer dereference at virtual address 00000040
    [   51.289348] task: ee942d00 task.stack: ee960000
    [   51.293861] PC is at tick_periodic+0x38/0xb0
    [   51.298102] LR is at tick_handle_periodic+0x1c/0x90
    
    Clear the pending interrupt in the cpu dying path.
    
    Fixes: 56a94f13919c ("clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier")
    Reported-by: Seung-Woo Kim <sw0312.kim@samsung.com>
    Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com>
    Cc: linux-samsung-soc@vger.kernel.org
    Cc: cw00.choi@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: javier@osg.samsung.com
    Cc: kgene@kernel.org
    Cc: krzk@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1484628876-22065-1-git-send-email-jy0922.shim@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fa4086987506b2ab8c92f8f99f2295db9918856
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Jan 12 17:07:43 2017 +0100

    rtc: tegra: Implement clock handling
    
    Accessing the registers of the RTC block on Tegra requires the module
    clock to be enabled. This only works because the RTC module clock will
    be enabled by default during early boot. However, because the clock is
    unused, the CCF will disable it at late_init time. This causes the RTC
    to become unusable afterwards. This can easily be reproduced by trying
    to use the RTC:
    
            $ hwclock --rtc /dev/rtc1
    
    This will hang the system. I ran into this by following up on a report
    by Martin Michlmayr that reboot wasn't working on Tegra210 systems. It
    turns out that the rtc-tegra driver's ->shutdown() implementation will
    hang the CPU, because of the disabled clock, before the system can be
    rebooted.
    
    What confused me for a while is that the same driver is used on prior
    Tegra generations where the hang can not be observed. However, as Peter
    De Schrijver pointed out, this is because on 32-bit Tegra chips the RTC
    clock is enabled by the tegra20_timer.c clocksource driver, which uses
    the RTC to provide a persistent clock. This code is never enabled on
    64-bit Tegra because the persistent clock infrastructure does not exist
    on 64-bit ARM.
    
    The proper fix for this is to add proper clock handling to the RTC
    driver in order to ensure that the clock is enabled when the driver
    requires it. All device trees contain the clock already, therefore
    no additional changes are required.
    
    Reported-by: Martin Michlmayr <tbm@cyrius.com>
    Acked-By Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit 63ed4e0c67df332681ebfef6eca6852da28d6300
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Thu Jan 19 11:51:46 2017 -0700

    Drivers: hv: vmbus: Consolidate all Hyper-V specific clocksource code
    
    As part of the effort to separate out architecture specific code,
    consolidate all Hyper-V specific clocksource code to an architecture
    specific code.
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b75f821ec8be459dd4dec77be39595d989d77ac
Merge: 49b550fee80b bc7c36eedb0c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jan 18 11:12:13 2017 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Ingo Molnar:
     "Fix a crash in the ARM-Exynos clocksource driver, triggered by CPU
      hotplug operations"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/exynos_mct: Clear interrupt when cpu is shut down

commit bc7c36eedb0c7004aa06c2afc3c5385adada8fa3
Author: Joonyoung Shim <jy0922.shim@samsung.com>
Date:   Tue Jan 17 13:54:36 2017 +0900

    clocksource/exynos_mct: Clear interrupt when cpu is shut down
    
    When a CPU goes offline a potentially pending timer interrupt is not
    cleared. When the CPU comes online again then the pending interrupt is
    delivered before the per cpu clockevent device is initialized. As a
    consequence the tick interrupt handler dereferences a NULL pointer.
    
    [   51.251378] Unable to handle kernel NULL pointer dereference at virtual address 00000040
    [   51.289348] task: ee942d00 task.stack: ee960000
    [   51.293861] PC is at tick_periodic+0x38/0xb0
    [   51.298102] LR is at tick_handle_periodic+0x1c/0x90
    
    Clear the pending interrupt in the cpu dying path.
    
    Fixes: 56a94f13919c ("clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier")
    Reported-by: Seung-Woo Kim <sw0312.kim@samsung.com>
    Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com>
    Cc: linux-samsung-soc@vger.kernel.org
    Cc: cw00.choi@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: stable@vger.kernel.org
    Cc: javier@osg.samsung.com
    Cc: kgene@kernel.org
    Cc: krzk@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1484628876-22065-1-git-send-email-jy0922.shim@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 05b7bdf1c3d8fe9c1bd92887a863a02c4cdcd207
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Mon Dec 5 09:27:44 2016 +0530

    ARM: omap2+: am437x: rollback to use omap3_gptimer_timer_init()
    
    commit f86a2c875fd146d9b82c8fdd86d31084507bcf4c upstream.
    
    The commit 55ee7017ee31 ("arm: omap2: board-generic: use
    omap4_local_timer_init for AM437x") unintentionally changes the
    clocksource devices for AM437x from OMAP GP Timer to SyncTimer32K.
    
    Unfortunately, the SyncTimer32K is starving from frequency deviation
    as mentioned in commit 5b5c01359152 ("ARM: OMAP2+: AM43x: Use gptimer
    as clocksource") and, as reported by Franklin [1], even its monotonic
    nature is under question (most probably there is a HW issue, but it's
    still under investigation).
    
    Taking into account above facts It's reasonable to rollback to the use
    of omap3_gptimer_timer_init().
    
    [1] http://www.spinics.net/lists/linux-omap/msg127425.html
    
    Fixes: 55ee7017ee31 ("arm: omap2: board-generic: use
    omap4_local_timer_init for AM437x")
    Reported-by: Cooper Jr., Franklin <fcooper@ti.com>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5680d8094ffa9e5cfc81afdd865027ee6417c263
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Dec 15 13:36:17 2016 +0100

    sched/clock: Provide better clock continuity
    
    When switching between the unstable and stable variants it is
    currently possible that clock discontinuities occur.
    
    And while these will mostly be 'small', attempt to do better.
    
    As observed on my IVB-EP, the sched_clock() is ~1.5s ahead of the
    ktime_get_ns() based timeline at the point of switchover
    (sched_clock_init_late()) after SMP bringup.
    
    Equally, when the TSC is later found to be unstable -- typically
    because SMM tries to hide its SMI latencies by mucking with the TSC --
    we want to avoid large jumps.
    
    Since the clocksource watchdog reports the issue after the fact we
    cannot exactly fix up time, but since SMI latencies are typically
    small (~10ns range), the discontinuity is mainly due to drift between
    sched_clock() and ktime_get_ns() (which on my desktop is ~79s over
    24days).
    
    I dislike this patch because it adds overhead to the good case in
    favour of dealing with badness. But given the widespread failure of
    TSC stability this is worth it.
    
    Note that in case the TSC makes drastic jumps after SMP bringup we're
    still hosed. There's just not much we can do in that case without
    stupid overhead.
    
    If we were to somehow expose tsc_clocksource_reliable (which is hard
    because this code is also used on ia64 and parisc) we could avoid some
    of the newly introduced overhead.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 12907fbb1a691807bb0420a27126e15934cb7954
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 15 11:44:28 2016 +0100

    sched/clock, clocksource: Add optional cs::mark_unstable() method
    
    PeterZ reported that we'd fail to mark the TSC unstable when the
    clocksource watchdog finds it unsuitable.
    
    Allow a clocksource to run a custom action when its being marked
    unstable and hook up the TSC unstable code.
    
    Reported-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 29955c9a00d52120ddbe249e658c2133c88d7645
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 8 20:49:32 2016 +0000

    timekeeping_Force_unsigned_clocksource_to_nanoseconds_conversion
    
    [ Upstream commit 9c1645727b8fa90d07256fdfcc45bf831242a3ab ]
    
    The clocksource delta to nanoseconds conversion is using signed math, but
    the delta is unsigned. This makes the conversion space smaller than
    necessary and in case of a multiplication overflow the conversion can
    become negative. The conversion is done with scaled math:
    
        s64 nsec_delta = ((s64)clkdelta * clk->mult) >> clk->shift;
    
    Shifting a signed integer right obvioulsy preserves the sign, which has
    interesting consequences:
    
     - Time jumps backwards
    
     - __iter_div_u64_rem() which is used in one of the calling code pathes
       will take forever to piecewise calculate the seconds/nanoseconds part.
    
    This has been reported by several people with different scenarios:
    
    David observed that when stopping a VM with a debugger:
    
     "It was essentially the stopped by debugger case.  I forget exactly why,
      but the guest was being explicitly stopped from outside, it wasn't just
      scheduling lag.  I think it was something in the vicinity of 10 minutes
      stopped."
    
     When lifting the stop the machine went dead.
    
    The stopped by debugger case is not really interesting, but nevertheless it
    would be a good thing not to die completely.
    
    But this was also observed on a live system by Liav:
    
     "When the OS is too overloaded, delta will get a high enough value for the
      msb of the sum delta * tkr->mult + tkr->xtime_nsec to be set, and so
      after the shift the nsec variable will gain a value similar to
      0xffffffffff000000."
    
    Unfortunately this has been reintroduced recently with commit 6bd58f09e1d8
    ("time: Add cycles to nanoseconds translation"). It had been fixed a year
    ago already in commit 35a4933a8959 ("time: Avoid signed overflow in
    timekeeping_get_ns()").
    
    Though it's not surprising that the issue has been reintroduced because the
    function itself and the whole call chain uses s64 for the result and the
    propagation of it. The change in this recent commit is subtle:
    
       s64 nsec;
    
    -  nsec = (d * m + n) >> s:
    +  nsec = d * m + n;
    +  nsec >>= s;
    
    d being type of cycle_t adds another level of obfuscation.
    
    This wouldn't have happened if the previous change to unsigned computation
    would have made the 'nsec' variable u64 right away and a follow up patch
    had cleaned up the whole call chain.
    
    There have been patches submitted which basically did a revert of the above
    patch leaving everything else unchanged as signed. Back to square one. This
    spawned a admittedly pointless discussion about potential users which rely
    on the unsigned behaviour until someone pointed out that it had been fixed
    before. The changelogs of said patches added further confusion as they made
    finally false claims about the consequences for eventual users which expect
    signed results.
    
    Despite delta being cycle_t, aka. u64, it's very well possible to hand in
    a signed negative value and the signed computation will happily return the
    correct result. But nobody actually sat down and analyzed the code which
    was added as user after the propably unintended signed conversion.
    
    Though in sensitive code like this it's better to analyze it proper and
    make sure that nothing relies on this than hunting the subtle wreckage half
    a year later. After analyzing all call chains it stands that no caller can
    hand in a negative value (which actually would work due to the s64 cast)
    and rely on the signed math to do the right thing.
    
    Change the conversion function to unsigned math. The conversion of all call
    chains is done in a follow up patch.
    
    This solves the starvation issue, which was caused by the negative result,
    but it does not solve the underlying problem. It merily procrastinates
    it. When the timekeeper update is deferred long enough that the unsigned
    multiplication overflows, then time going backwards is observable again.
    
    It does neither solve the issue of clocksources with a small counter width
    which will wrap around possibly several times and cause random time stamps
    to be generated. But those are usually not found on systems used for
    virtualization, so this is likely a non issue.
    
    I took the liberty to claim authorship for this simply because
    analyzing all callsites and writing the changelog took substantially
    more time than just making the simple s/s64/u64/ change and ignore the
    rest.
    
    Fixes: 6bd58f09e1d8 ("time: Add cycles to nanoseconds translation")
    Reported-by: David Gibson <david@gibson.dropbear.id.au>
    Reported-by: Liav Rehana <liavr@mellanox.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Parit Bhargava <prarit@redhat.com>
    Cc: Laurent Vivier <lvivier@redhat.com>
    Cc: "Christopher S. Hall" <christopher.s.hall@intel.com>
    Cc: Chris Metcalf <cmetcalf@mellanox.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20161208204228.688545601@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 34db201f0de7138d3646946f5d33e178c93efca6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 15 12:01:05 2016 +0100

    clocksource/dummy_timer: Move hotplug callback after the real timers
    
    commit 9bf11ecce5a2758e5a097c2f3a13d08552d0d6f9 upstream.
    
    When the dummy timer callback is invoked before the real timer callbacks,
    then it tries to install that timer for the starting CPU. If the platform
    does not have a broadcast timer installed the installation fails with a
    kernel crash. The crash happens due to a unconditional deference of the non
    available broadcast device. This needs to be fixed in the timer core code.
    
    But even when this is fixed in the core code then installing the dummy
    timer before the real timers is a pointless exercise.
    
    Move it to the end of the callback list.
    
    Fixes: 00c1d17aab51 ("clocksource/dummy_timer: Convert to hotplug state machine")
    Reported-and-tested-by: Mason <slash.tmp@free.fr>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Cc: Richard Cochran <rcochran@linutronix.de>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead.org>,
    Cc: Sebastian Frias <sf84@laposte.net>
    Cc: Thibaud Cornic <thibaud_cornic@sigmadesigns.com>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Link: http://lkml.kernel.org/r/1147ef90-7877-e4d2-bb2b-5c4fa8d3144b@free.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c8033357b1d8fc4bba43cf1f87d2f61f3dd3fd2
Author: Helge Deller <deller@gmx.de>
Date:   Mon Dec 26 12:46:01 2016 +0100

    parisc: Mark cr16 clocksource unstable on SMP systems
    
    commit 41744213602a206f24adcb4a2b7551db3c700e72 upstream.
    
    The cr16 interval timer of each CPU is not syncronized to other cr16
    timers in other CPUs in a SMP system. So, delay the registration of the
    cr16 clocksource until all CPUs have been detected and then - if we are
    on a SMP machine - mark the cr16 clocksource as unstable and lower it's
    rating before registering it at the clocksource framework.
    
    This patch fixes the stalled CPU warnings which we have seen since
    introduction of the cr16 clocksource.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca22975afa144d5bb648dcff22f598d623493e9f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 8 20:49:32 2016 +0000

    timekeeping_Force_unsigned_clocksource_to_nanoseconds_conversion
    
    commit 9c1645727b8fa90d07256fdfcc45bf831242a3ab upstream.
    
    The clocksource delta to nanoseconds conversion is using signed math, but
    the delta is unsigned. This makes the conversion space smaller than
    necessary and in case of a multiplication overflow the conversion can
    become negative. The conversion is done with scaled math:
    
        s64 nsec_delta = ((s64)clkdelta * clk->mult) >> clk->shift;
    
    Shifting a signed integer right obvioulsy preserves the sign, which has
    interesting consequences:
    
     - Time jumps backwards
    
     - __iter_div_u64_rem() which is used in one of the calling code pathes
       will take forever to piecewise calculate the seconds/nanoseconds part.
    
    This has been reported by several people with different scenarios:
    
    David observed that when stopping a VM with a debugger:
    
     "It was essentially the stopped by debugger case.  I forget exactly why,
      but the guest was being explicitly stopped from outside, it wasn't just
      scheduling lag.  I think it was something in the vicinity of 10 minutes
      stopped."
    
     When lifting the stop the machine went dead.
    
    The stopped by debugger case is not really interesting, but nevertheless it
    would be a good thing not to die completely.
    
    But this was also observed on a live system by Liav:
    
     "When the OS is too overloaded, delta will get a high enough value for the
      msb of the sum delta * tkr->mult + tkr->xtime_nsec to be set, and so
      after the shift the nsec variable will gain a value similar to
      0xffffffffff000000."
    
    Unfortunately this has been reintroduced recently with commit 6bd58f09e1d8
    ("time: Add cycles to nanoseconds translation"). It had been fixed a year
    ago already in commit 35a4933a8959 ("time: Avoid signed overflow in
    timekeeping_get_ns()").
    
    Though it's not surprising that the issue has been reintroduced because the
    function itself and the whole call chain uses s64 for the result and the
    propagation of it. The change in this recent commit is subtle:
    
       s64 nsec;
    
    -  nsec = (d * m + n) >> s:
    +  nsec = d * m + n;
    +  nsec >>= s;
    
    d being type of cycle_t adds another level of obfuscation.
    
    This wouldn't have happened if the previous change to unsigned computation
    would have made the 'nsec' variable u64 right away and a follow up patch
    had cleaned up the whole call chain.
    
    There have been patches submitted which basically did a revert of the above
    patch leaving everything else unchanged as signed. Back to square one. This
    spawned a admittedly pointless discussion about potential users which rely
    on the unsigned behaviour until someone pointed out that it had been fixed
    before. The changelogs of said patches added further confusion as they made
    finally false claims about the consequences for eventual users which expect
    signed results.
    
    Despite delta being cycle_t, aka. u64, it's very well possible to hand in
    a signed negative value and the signed computation will happily return the
    correct result. But nobody actually sat down and analyzed the code which
    was added as user after the propably unintended signed conversion.
    
    Though in sensitive code like this it's better to analyze it proper and
    make sure that nothing relies on this than hunting the subtle wreckage half
    a year later. After analyzing all call chains it stands that no caller can
    hand in a negative value (which actually would work due to the s64 cast)
    and rely on the signed math to do the right thing.
    
    Change the conversion function to unsigned math. The conversion of all call
    chains is done in a follow up patch.
    
    This solves the starvation issue, which was caused by the negative result,
    but it does not solve the underlying problem. It merily procrastinates
    it. When the timekeeper update is deferred long enough that the unsigned
    multiplication overflows, then time going backwards is observable again.
    
    It does neither solve the issue of clocksources with a small counter width
    which will wrap around possibly several times and cause random time stamps
    to be generated. But those are usually not found on systems used for
    virtualization, so this is likely a non issue.
    
    I took the liberty to claim authorship for this simply because
    analyzing all callsites and writing the changelog took substantially
    more time than just making the simple s/s64/u64/ change and ignore the
    rest.
    
    Fixes: 6bd58f09e1d8 ("time: Add cycles to nanoseconds translation")
    Reported-by: David Gibson <david@gibson.dropbear.id.au>
    Reported-by: Liav Rehana <liavr@mellanox.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Parit Bhargava <prarit@redhat.com>
    Cc: Laurent Vivier <lvivier@redhat.com>
    Cc: "Christopher S. Hall" <christopher.s.hall@intel.com>
    Cc: Chris Metcalf <cmetcalf@mellanox.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/20161208204228.688545601@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61d0b7139cf97fedfd9176a3ae7d7ed560121c65
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 8 20:49:32 2016 +0000

    timekeeping_Force_unsigned_clocksource_to_nanoseconds_conversion
    
    commit 9c1645727b8fa90d07256fdfcc45bf831242a3ab upstream.
    
    The clocksource delta to nanoseconds conversion is using signed math, but
    the delta is unsigned. This makes the conversion space smaller than
    necessary and in case of a multiplication overflow the conversion can
    become negative. The conversion is done with scaled math:
    
        s64 nsec_delta = ((s64)clkdelta * clk->mult) >> clk->shift;
    
    Shifting a signed integer right obvioulsy preserves the sign, which has
    interesting consequences:
    
     - Time jumps backwards
    
     - __iter_div_u64_rem() which is used in one of the calling code pathes
       will take forever to piecewise calculate the seconds/nanoseconds part.
    
    This has been reported by several people with different scenarios:
    
    David observed that when stopping a VM with a debugger:
    
     "It was essentially the stopped by debugger case.  I forget exactly why,
      but the guest was being explicitly stopped from outside, it wasn't just
      scheduling lag.  I think it was something in the vicinity of 10 minutes
      stopped."
    
     When lifting the stop the machine went dead.
    
    The stopped by debugger case is not really interesting, but nevertheless it
    would be a good thing not to die completely.
    
    But this was also observed on a live system by Liav:
    
     "When the OS is too overloaded, delta will get a high enough value for the
      msb of the sum delta * tkr->mult + tkr->xtime_nsec to be set, and so
      after the shift the nsec variable will gain a value similar to
      0xffffffffff000000."
    
    Unfortunately this has been reintroduced recently with commit 6bd58f09e1d8
    ("time: Add cycles to nanoseconds translation"). It had been fixed a year
    ago already in commit 35a4933a8959 ("time: Avoid signed overflow in
    timekeeping_get_ns()").
    
    Though it's not surprising that the issue has been reintroduced because the
    function itself and the whole call chain uses s64 for the result and the
    propagation of it. The change in this recent commit is subtle:
    
       s64 nsec;
    
    -  nsec = (d * m + n) >> s:
    +  nsec = d * m + n;
    +  nsec >>= s;
    
    d being type of cycle_t adds another level of obfuscation.
    
    This wouldn't have happened if the previous change to unsigned computation
    would have made the 'nsec' variable u64 right away and a follow up patch
    had cleaned up the whole call chain.
    
    There have been patches submitted which basically did a revert of the above
    patch leaving everything else unchanged as signed. Back to square one. This
    spawned a admittedly pointless discussion about potential users which rely
    on the unsigned behaviour until someone pointed out that it had been fixed
    before. The changelogs of said patches added further confusion as they made
    finally false claims about the consequences for eventual users which expect
    signed results.
    
    Despite delta being cycle_t, aka. u64, it's very well possible to hand in
    a signed negative value and the signed computation will happily return the
    correct result. But nobody actually sat down and analyzed the code which
    was added as user after the propably unintended signed conversion.
    
    Though in sensitive code like this it's better to analyze it proper and
    make sure that nothing relies on this than hunting the subtle wreckage half
    a year later. After analyzing all call chains it stands that no caller can
    hand in a negative value (which actually would work due to the s64 cast)
    and rely on the signed math to do the right thing.
    
    Change the conversion function to unsigned math. The conversion of all call
    chains is done in a follow up patch.
    
    This solves the starvation issue, which was caused by the negative result,
    but it does not solve the underlying problem. It merily procrastinates
    it. When the timekeeper update is deferred long enough that the unsigned
    multiplication overflows, then time going backwards is observable again.
    
    It does neither solve the issue of clocksources with a small counter width
    which will wrap around possibly several times and cause random time stamps
    to be generated. But those are usually not found on systems used for
    virtualization, so this is likely a non issue.
    
    I took the liberty to claim authorship for this simply because
    analyzing all callsites and writing the changelog took substantially
    more time than just making the simple s/s64/u64/ change and ignore the
    rest.
    
    Fixes: 6bd58f09e1d8 ("time: Add cycles to nanoseconds translation")
    Reported-by: David Gibson <david@gibson.dropbear.id.au>
    Reported-by: Liav Rehana <liavr@mellanox.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Parit Bhargava <prarit@redhat.com>
    Cc: Laurent Vivier <lvivier@redhat.com>
    Cc: "Christopher S. Hall" <christopher.s.hall@intel.com>
    Cc: Chris Metcalf <cmetcalf@mellanox.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/20161208204228.688545601@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e01b04be3eb00456d65278cfa56cfd8103872bfb
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 8 20:49:32 2016 +0000

    timekeeping_Force_unsigned_clocksource_to_nanoseconds_conversion
    
    commit 9c1645727b8fa90d07256fdfcc45bf831242a3ab upstream.
    
    The clocksource delta to nanoseconds conversion is using signed math, but
    the delta is unsigned. This makes the conversion space smaller than
    necessary and in case of a multiplication overflow the conversion can
    become negative. The conversion is done with scaled math:
    
        s64 nsec_delta = ((s64)clkdelta * clk->mult) >> clk->shift;
    
    Shifting a signed integer right obvioulsy preserves the sign, which has
    interesting consequences:
    
     - Time jumps backwards
    
     - __iter_div_u64_rem() which is used in one of the calling code pathes
       will take forever to piecewise calculate the seconds/nanoseconds part.
    
    This has been reported by several people with different scenarios:
    
    David observed that when stopping a VM with a debugger:
    
     "It was essentially the stopped by debugger case.  I forget exactly why,
      but the guest was being explicitly stopped from outside, it wasn't just
      scheduling lag.  I think it was something in the vicinity of 10 minutes
      stopped."
    
     When lifting the stop the machine went dead.
    
    The stopped by debugger case is not really interesting, but nevertheless it
    would be a good thing not to die completely.
    
    But this was also observed on a live system by Liav:
    
     "When the OS is too overloaded, delta will get a high enough value for the
      msb of the sum delta * tkr->mult + tkr->xtime_nsec to be set, and so
      after the shift the nsec variable will gain a value similar to
      0xffffffffff000000."
    
    Unfortunately this has been reintroduced recently with commit 6bd58f09e1d8
    ("time: Add cycles to nanoseconds translation"). It had been fixed a year
    ago already in commit 35a4933a8959 ("time: Avoid signed overflow in
    timekeeping_get_ns()").
    
    Though it's not surprising that the issue has been reintroduced because the
    function itself and the whole call chain uses s64 for the result and the
    propagation of it. The change in this recent commit is subtle:
    
       s64 nsec;
    
    -  nsec = (d * m + n) >> s:
    +  nsec = d * m + n;
    +  nsec >>= s;
    
    d being type of cycle_t adds another level of obfuscation.
    
    This wouldn't have happened if the previous change to unsigned computation
    would have made the 'nsec' variable u64 right away and a follow up patch
    had cleaned up the whole call chain.
    
    There have been patches submitted which basically did a revert of the above
    patch leaving everything else unchanged as signed. Back to square one. This
    spawned a admittedly pointless discussion about potential users which rely
    on the unsigned behaviour until someone pointed out that it had been fixed
    before. The changelogs of said patches added further confusion as they made
    finally false claims about the consequences for eventual users which expect
    signed results.
    
    Despite delta being cycle_t, aka. u64, it's very well possible to hand in
    a signed negative value and the signed computation will happily return the
    correct result. But nobody actually sat down and analyzed the code which
    was added as user after the propably unintended signed conversion.
    
    Though in sensitive code like this it's better to analyze it proper and
    make sure that nothing relies on this than hunting the subtle wreckage half
    a year later. After analyzing all call chains it stands that no caller can
    hand in a negative value (which actually would work due to the s64 cast)
    and rely on the signed math to do the right thing.
    
    Change the conversion function to unsigned math. The conversion of all call
    chains is done in a follow up patch.
    
    This solves the starvation issue, which was caused by the negative result,
    but it does not solve the underlying problem. It merily procrastinates
    it. When the timekeeper update is deferred long enough that the unsigned
    multiplication overflows, then time going backwards is observable again.
    
    It does neither solve the issue of clocksources with a small counter width
    which will wrap around possibly several times and cause random time stamps
    to be generated. But those are usually not found on systems used for
    virtualization, so this is likely a non issue.
    
    I took the liberty to claim authorship for this simply because
    analyzing all callsites and writing the changelog took substantially
    more time than just making the simple s/s64/u64/ change and ignore the
    rest.
    
    Fixes: 6bd58f09e1d8 ("time: Add cycles to nanoseconds translation")
    Reported-by: David Gibson <david@gibson.dropbear.id.au>
    Reported-by: Liav Rehana <liavr@mellanox.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Parit Bhargava <prarit@redhat.com>
    Cc: Laurent Vivier <lvivier@redhat.com>
    Cc: "Christopher S. Hall" <christopher.s.hall@intel.com>
    Cc: Chris Metcalf <cmetcalf@mellanox.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/20161208204228.688545601@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f64df30124018de92c7f22a044b975da8dd52cc
Merge: c8b4ec8351d2 b4a9eb4cd596
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jan 3 10:50:05 2017 -0800

    Merge branch 'parisc-4.10-2' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux
    
    Pull parisc updates from Helge Deller:
    
     - limit usage of processor-internal cr16 clocksource to UP systems only
    
     - segfault info lines in syslog were too long, split those up
    
     - drop own TIF_RESTORE_SIGMASK flag and switch to generic code
    
    * 'parisc-4.10-2' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux:
      parisc: Add line-break when printing segfault info
      parisc: Drop TIF_RESTORE_SIGMASK and switch to generic code
      parisc: Mark cr16 clocksource unstable on SMP systems

commit 41744213602a206f24adcb4a2b7551db3c700e72
Author: Helge Deller <deller@gmx.de>
Date:   Mon Dec 26 12:46:01 2016 +0100

    parisc: Mark cr16 clocksource unstable on SMP systems
    
    The cr16 interval timer of each CPU is not syncronized to other cr16
    timers in other CPUs in a SMP system. So, delay the registration of the
    cr16 clocksource until all CPUs have been detected and then - if we are
    on a SMP machine - mark the cr16 clocksource as unstable and lower it's
    rating before registering it at the clocksource framework.
    
    This patch fixes the stalled CPU warnings which we have seen since
    introduction of the cr16 clocksource.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v4.8+

commit f86a2c875fd146d9b82c8fdd86d31084507bcf4c
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Mon Dec 5 09:27:44 2016 +0530

    ARM: omap2+: am437x: rollback to use omap3_gptimer_timer_init()
    
    The commit 55ee7017ee31 ("arm: omap2: board-generic: use
    omap4_local_timer_init for AM437x") unintentionally changes the
    clocksource devices for AM437x from OMAP GP Timer to SyncTimer32K.
    
    Unfortunately, the SyncTimer32K is starving from frequency deviation
    as mentioned in commit 5b5c01359152 ("ARM: OMAP2+: AM43x: Use gptimer
    as clocksource") and, as reported by Franklin [1], even its monotonic
    nature is under question (most probably there is a HW issue, but it's
    still under investigation).
    
    Taking into account above facts It's reasonable to rollback to the use
    of omap3_gptimer_timer_init().
    
    [1] http://www.spinics.net/lists/linux-omap/msg127425.html
    
    Fixes: 55ee7017ee31 ("arm: omap2: board-generic: use
    omap4_local_timer_init for AM437x")
    Reported-by: Cooper Jr., Franklin <fcooper@ti.com>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit bd361f5de2b338218c276d17a510701a16075deb
Merge: c739c0a7c3c2 7ce7d89f4883
Author: Mauro Carvalho Chehab <mchehab@kernel.org>
Date:   Mon Dec 26 14:11:35 2016 -0200

    Merge tag 'v4.10-rc1' into patchwork
    
    Linux 4.10-rc1
    
    * tag 'v4.10-rc1': (11427 commits)
      Linux 4.10-rc1
      powerpc: Fix build warning on 32-bit PPC
      avoid spurious "may be used uninitialized" warning
      mm: add PageWaiters indicating tasks are waiting for a page bit
      mm: Use owner_priv bit for PageSwapCache, valid when PageSwapBacked
      ktime: Get rid of ktime_equal()
      ktime: Cleanup ktime_set() usage
      ktime: Get rid of the union
      clocksource: Use a plain u64 instead of cycle_t
      irqchip/armada-xp: Consolidate hotplug state space
      irqchip/gic: Consolidate hotplug state space
      coresight/etm3/4x: Consolidate hotplug state space
      cpu/hotplug: Cleanup state names
      cpu/hotplug: Remove obsolete cpu hotplug register/unregister functions
      staging/lustre/libcfs: Convert to hotplug state machine
      scsi/bnx2i: Convert to hotplug state machine
      scsi/bnx2fc: Convert to hotplug state machine
      cpu/hotplug: Prevent overwriting of callbacks
      x86/msr: Remove bogus cleanup from the error path
      bus: arm-ccn: Prevent hotplug callback leak
      ...

commit 3ddc76dfc786cc6f87852693227fb0b1f124f807
Merge: b272f732f888 1f3a8e49d8f2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Dec 25 14:30:04 2016 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer type cleanups from Thomas Gleixner:
     "This series does a tree wide cleanup of types related to
      timers/timekeeping.
    
       - Get rid of cycles_t and use a plain u64. The type is not really
         helpful and caused more confusion than clarity
    
       - Get rid of the ktime union. The union has become useless as we use
         the scalar nanoseconds storage unconditionally now. The 32bit
         timespec alike storage got removed due to the Y2038 limitations
         some time ago.
    
         That leaves the odd union access around for no reason. Clean it up.
    
      Both changes have been done with coccinelle and a small amount of
      manual mopping up"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      ktime: Get rid of ktime_equal()
      ktime: Cleanup ktime_set() usage
      ktime: Get rid of the union
      clocksource: Use a plain u64 instead of cycle_t

commit a5a1d1c2914b5316924c7893eb683a5420ebd3be
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Dec 21 20:32:01 2016 +0100

    clocksource: Use a plain u64 instead of cycle_t
    
    There is no point in having an extra type for extra confusion. u64 is
    unambiguous.
    
    Conversion was done with the following coccinelle script:
    
    @rem@
    @@
    -typedef u64 cycle_t;
    
    @fix@
    typedef cycle_t;
    @@
    -cycle_t
    +u64
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: John Stultz <john.stultz@linaro.org>

commit eb3e8d9de28a5385f75e5c42eba5fb5b0c7625be
Merge: 00198dab3b82 c9435f35ae64
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Dec 23 16:51:16 2016 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Ingo Molnar:
     "ARM/MOXA SoC clocksource driver fixes"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/moxart: Plug memory and mapping leaks

commit c9435f35ae64ee162555a82b6a3586b160093957
Author: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
Date:   Sun Dec 18 22:26:36 2016 +0000

    clocksource/drivers/moxart: Plug memory and mapping leaks
    
    If of_iomap() or any other subsequent function fails moxart_timer_init()
    exits without freeing memory and unmapping the timer base.
    
    Add proper cleanup points.
    
    Signed-off-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Link: http://lkml.kernel.org/r/1482099996-1524-1-git-send-email-sudipm.mukherjee@gmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 98da295b35cf23222b52a3dc1d768b7997c95a32
Merge: eb3a3c074624 512f09801b35
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Dec 18 11:06:05 2016 -0800

    Merge branch 'smp-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull SMP hotplug fixes from Thomas Gleixner:
     "Two fixlets for cpu hotplug:
    
       - Fix a subtle ordering problem with the dummy timer. This happened
         to work before the conversion by chance due to initcall ordering.
    
       - Fix the function comment for __cpuhp_setup_state()"
    
    * 'smp-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      cpu/hotplug: Clarify description of __cpuhp_setup_state() return value
      clocksource/dummy_timer: Move hotplug callback after the real timers

commit d25b6af91ec600faaff3a7e863f19d3e16593e52
Merge: 179a7ba68068 7badf6fefca8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 15 14:15:17 2016 -0800

    Merge tag 'arc-4.10-rc1-part1' of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc
    
    Pull ARC updates from Vineet Gupta:
     "These are mostly timer/clocksource driver updates which were
      Reviewed/Acked by Daniel but had to be merged via ARC tree due to
      dependencies.
    
      I will follow up with another pull request with actual ARC changes
      early next week !
    
      Summary:
    
       - Moving ARC timer driver into drivers/clocksource
    
       - EZChip timer driver updates [Noam]
    
       - ARC AXS103 and HAPS platform updates [Alexey]"
    
    * tag 'arc-4.10-rc1-part1' of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc:
      ARC: axs10x: really enable ARC PGU
      ARC: rename Zebu platform support to HAPS
      clocksource: nps: avoid maybe-uninitialized warning
      clocksource: Add clockevent support to NPS400 driver
      clocksource: update "fn" at CLOCKSOURCE_OF_DECLARE() of nps400 timer
      soc: Support for NPS HW scheduling
      clocksource: import ARC timer driver
      ARC: breakout timer include code into separate header ...
      ARC: move mcip.h into include/soc and adjust the includes
      ARC: breakout aux handling into a separate header
      ARC: time: move time_init() out of the driver
      ARC: timer: gfrc, rtc: build under same option (64-bit timers)
      ARC: timer: gfrc, rtc: Read BCR to detect whether hardware exists ...
      ARC: timer: gfrc, rtc: deuglify big endian code

commit 9bf11ecce5a2758e5a097c2f3a13d08552d0d6f9
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 15 12:01:05 2016 +0100

    clocksource/dummy_timer: Move hotplug callback after the real timers
    
    When the dummy timer callback is invoked before the real timer callbacks,
    then it tries to install that timer for the starting CPU. If the platform
    does not have a broadcast timer installed the installation fails with a
    kernel crash. The crash happens due to a unconditional deference of the non
    available broadcast device. This needs to be fixed in the timer core code.
    
    But even when this is fixed in the core code then installing the dummy
    timer before the real timers is a pointless exercise.
    
    Move it to the end of the callback list.
    
    Fixes: 00c1d17aab51 ("clocksource/dummy_timer: Convert to hotplug state machine")
    Reported-and-tested-by: Mason <slash.tmp@free.fr>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Cc: Richard Cochran <rcochran@linutronix.de>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead.org>,
    Cc: Sebastian Frias <sf84@laposte.net>
    Cc: Thibaud Cornic <thibaud_cornic@sigmadesigns.com>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Link: http://lkml.kernel.org/r/1147ef90-7877-e4d2-bb2b-5c4fa8d3144b@free.fr

commit 9465d9cc31fa732089cd8bec9f1bdfcdc174a5ce
Merge: e71c3978d6f9 c029a2bec66e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 12 19:56:15 2016 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The time/timekeeping/timer folks deliver with this update:
    
       - Fix a reintroduced signed/unsigned issue and cleanup the whole
         signed/unsigned mess in the timekeeping core so this wont happen
         accidentaly again.
    
       - Add a new trace clock based on boot time
    
       - Prevent injection of random sleep times when PM tracing abuses the
         RTC for storage
    
       - Make posix timers configurable for real tiny systems
    
       - Add tracepoints for the alarm timer subsystem so timer based
         suspend wakeups can be instrumented
    
       - The usual pile of fixes and updates to core and drivers"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (23 commits)
      timekeeping: Use mul_u64_u32_shr() instead of open coding it
      timekeeping: Get rid of pointless typecasts
      timekeeping: Make the conversion call chain consistently unsigned
      timekeeping_Force_unsigned_clocksource_to_nanoseconds_conversion
      alarmtimer: Add tracepoints for alarm timers
      trace: Update documentation for mono, mono_raw and boot clock
      trace: Add an option for boot clock as trace clock
      timekeeping: Add a fast and NMI safe boot clock
      timekeeping/clocksource_cyc2ns: Document intended range limitation
      timekeeping: Ignore the bogus sleep time if pm_trace is enabled
      selftests/timers: Fix spelling mistake "Asyncrhonous" -> "Asynchronous"
      clocksource/drivers/bcm2835_timer: Unmap region obtained by of_iomap
      clocksource/drivers/arm_arch_timer: Map frame with of_io_request_and_map()
      arm64: dts: rockchip: Arch counter doesn't tick in system suspend
      clocksource/drivers/arm_arch_timer: Don't assume clock runs in suspend
      posix-timers: Make them configurable
      posix_cpu_timers: Move the add_device_randomness() call to a proper place
      timer: Move sys_alarm from timer.c to itimer.c
      ptp_clock: Allow for it to be optional
      Kconfig: Regenerate *.c_shipped files after previous changes
      ...

commit 2323e1a9edc8304ed4fc9c3039dfbaf25dbb2f6b
Author: Chris Metcalf <cmetcalf@mellanox.com>
Date:   Wed Nov 16 11:18:05 2016 -0500

    tile: avoid using clocksource_cyc2ns with absolute cycle count
    
    commit e658a6f14d7c0243205f035979d0ecf6c12a036f upstream.
    
    For large values of "mult" and long uptimes, the intermediate
    result of "cycles * mult" can overflow 64 bits.  For example,
    the tile platform calls clocksource_cyc2ns with a 1.2 GHz clock;
    we have mult = 853, and after 208.5 days, we overflow 64 bits.
    
    Since clocksource_cyc2ns() is intended to be used for relative
    cycle counts, not absolute cycle counts, performance is more
    importance than accepting a wider range of cycle values.  So,
    just use mult_frac() directly in tile's sched_clock().
    
    Commit 4cecf6d401a0 ("sched, x86: Avoid unnecessary overflow
    in sched_clock") by Salman Qazi results in essentially the same
    generated code for x86 as this change does for tile.  In fact,
    a follow-on change by Salman introduced mult_frac() and switched
    to using it, so the C code was largely identical at that point too.
    
    Peter Zijlstra then added mul_u64_u32_shr() and switched x86
    to use it.  This is, in principle, better; by optimizing the
    64x64->64 multiplies to be 32x32->64 multiplies we can potentially
    save some time.  However, the compiler piplines the 64x64->64
    multiplies pretty well, and the conditional branch in the generic
    mul_u64_u32_shr() causes some bubbles in execution, with the
    result that it's pretty much a wash.  If tilegx provided its own
    implementation of mul_u64_u32_shr() without the conditional branch,
    we could potentially save 3 cycles, but that seems like small gain
    for a fair amount of additional build scaffolding; no other platform
    currently provides a mul_u64_u32_shr() override, and tile doesn't
    currently have an <asm/div64.h> header to put the override in.
    
    Additionally, gcc currently has an optimization bug that prevents
    it from recognizing the opportunity to use a 32x32->64 multiply,
    and so the result would be no better than the existing mult_frac()
    until such time as the compiler is fixed.
    
    For now, just using mult_frac() seems like the right answer.
    
    Signed-off-by: Chris Metcalf <cmetcalf@mellanox.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit c029a2bec66e42e57538cb65e28618baf6a4b311
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 8 20:49:38 2016 +0000

    timekeeping: Use mul_u64_u32_shr() instead of open coding it
    
    The resume code must deal with a clocksource delta which is potentially big
    enough to overflow the 64bit mult.
    
    Replace the open coded handling with the proper function.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Parit Bhargava <prarit@redhat.com>
    Cc: Laurent Vivier <lvivier@redhat.com>
    Cc: "Christopher S. Hall" <christopher.s.hall@intel.com>
    Cc: Chris Metcalf <cmetcalf@mellanox.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Liav Rehana <liavr@mellanox.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/20161208204228.921674404@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 9c1645727b8fa90d07256fdfcc45bf831242a3ab
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 8 20:49:32 2016 +0000

    timekeeping_Force_unsigned_clocksource_to_nanoseconds_conversion
    
    The clocksource delta to nanoseconds conversion is using signed math, but
    the delta is unsigned. This makes the conversion space smaller than
    necessary and in case of a multiplication overflow the conversion can
    become negative. The conversion is done with scaled math:
    
        s64 nsec_delta = ((s64)clkdelta * clk->mult) >> clk->shift;
    
    Shifting a signed integer right obvioulsy preserves the sign, which has
    interesting consequences:
    
     - Time jumps backwards
    
     - __iter_div_u64_rem() which is used in one of the calling code pathes
       will take forever to piecewise calculate the seconds/nanoseconds part.
    
    This has been reported by several people with different scenarios:
    
    David observed that when stopping a VM with a debugger:
    
     "It was essentially the stopped by debugger case.  I forget exactly why,
      but the guest was being explicitly stopped from outside, it wasn't just
      scheduling lag.  I think it was something in the vicinity of 10 minutes
      stopped."
    
     When lifting the stop the machine went dead.
    
    The stopped by debugger case is not really interesting, but nevertheless it
    would be a good thing not to die completely.
    
    But this was also observed on a live system by Liav:
    
     "When the OS is too overloaded, delta will get a high enough value for the
      msb of the sum delta * tkr->mult + tkr->xtime_nsec to be set, and so
      after the shift the nsec variable will gain a value similar to
      0xffffffffff000000."
    
    Unfortunately this has been reintroduced recently with commit 6bd58f09e1d8
    ("time: Add cycles to nanoseconds translation"). It had been fixed a year
    ago already in commit 35a4933a8959 ("time: Avoid signed overflow in
    timekeeping_get_ns()").
    
    Though it's not surprising that the issue has been reintroduced because the
    function itself and the whole call chain uses s64 for the result and the
    propagation of it. The change in this recent commit is subtle:
    
       s64 nsec;
    
    -  nsec = (d * m + n) >> s:
    +  nsec = d * m + n;
    +  nsec >>= s;
    
    d being type of cycle_t adds another level of obfuscation.
    
    This wouldn't have happened if the previous change to unsigned computation
    would have made the 'nsec' variable u64 right away and a follow up patch
    had cleaned up the whole call chain.
    
    There have been patches submitted which basically did a revert of the above
    patch leaving everything else unchanged as signed. Back to square one. This
    spawned a admittedly pointless discussion about potential users which rely
    on the unsigned behaviour until someone pointed out that it had been fixed
    before. The changelogs of said patches added further confusion as they made
    finally false claims about the consequences for eventual users which expect
    signed results.
    
    Despite delta being cycle_t, aka. u64, it's very well possible to hand in
    a signed negative value and the signed computation will happily return the
    correct result. But nobody actually sat down and analyzed the code which
    was added as user after the propably unintended signed conversion.
    
    Though in sensitive code like this it's better to analyze it proper and
    make sure that nothing relies on this than hunting the subtle wreckage half
    a year later. After analyzing all call chains it stands that no caller can
    hand in a negative value (which actually would work due to the s64 cast)
    and rely on the signed math to do the right thing.
    
    Change the conversion function to unsigned math. The conversion of all call
    chains is done in a follow up patch.
    
    This solves the starvation issue, which was caused by the negative result,
    but it does not solve the underlying problem. It merily procrastinates
    it. When the timekeeper update is deferred long enough that the unsigned
    multiplication overflows, then time going backwards is observable again.
    
    It does neither solve the issue of clocksources with a small counter width
    which will wrap around possibly several times and cause random time stamps
    to be generated. But those are usually not found on systems used for
    virtualization, so this is likely a non issue.
    
    I took the liberty to claim authorship for this simply because
    analyzing all callsites and writing the changelog took substantially
    more time than just making the simple s/s64/u64/ change and ignore the
    rest.
    
    Fixes: 6bd58f09e1d8 ("time: Add cycles to nanoseconds translation")
    Reported-by: David Gibson <david@gibson.dropbear.id.au>
    Reported-by: Liav Rehana <liavr@mellanox.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Parit Bhargava <prarit@redhat.com>
    Cc: Laurent Vivier <lvivier@redhat.com>
    Cc: "Christopher S. Hall" <christopher.s.hall@intel.com>
    Cc: Chris Metcalf <cmetcalf@mellanox.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20161208204228.688545601@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 64e8de58c56a60702c9cfd934f7084271271a9fc
Merge: d3243aef98d2 20138cf9efc1
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Dec 7 11:13:49 2016 -0500

    Merge branch 'ti-cpts-update-and-fixes'
    
    Grygorii Strashko says:
    
    ====================
    net: ethernet: ti: cpts: update and fixes
    
    It is preparation series intended to clean up and optimize TI CPTS driver to
    facilitate further integration with other TI's SoCs like Keystone 2.
    
    Changes in v5:
    - fixed copy paste error in cpts_release
    - reworked cc.mult/shift and cc_mult initialization
    
    Changes in v4:
    - fixed build error in patch
      "net: ethernet: ti: cpts: clean up event list if event pool is empty"
    - rebased on top of net-next
    
    Changes in v3:
    - patches reordered: fixes and small updates moved first
    - added comments in code about cpts->cc_mult
    - conversation range (maxsec) limited to 10sec
    
    Changes in v2:
    - patch "net: ethernet: ti: cpts: rework initialization/deinitialization"
      was split on 4 patches
    - applied comments from Richard Cochran
    - dropped patch
      "net: ethernet: ti: cpts: add return value to tx and rx timestamp funcitons"
    - new patches added:
      "net: ethernet: ti: cpts: drop excessive writes to CTRL and INT_EN regs"
      and "clocksource: export the clocks_calc_mult_shift to use by timestamp code"
    
    Links on prev versions:
    v4: https://lkml.org/lkml/2016/12/6/496
    v3: https://www.spinics.net/lists/devicetree/msg153474.html
    v2: http://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1282034.html
    v1: http://www.spinics.net/lists/linux-omap/msg131925.html
    ====================
    
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 88f0f0b0bebfbe086dda853f591ae3a014b19e40
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Tue Dec 6 18:00:44 2016 -0600

    net: ethernet: ti: cpts: calc mult and shift from refclk freq
    
    The cyclecounter mult and shift values can be calculated based on the
    CPTS rfclk frequency and timekeepnig framework provides required algos
    and API's.
    
    Hence, calc mult and shift basing on CPTS rfclk frequency if both
    cpts_clock_shift and cpts_clock_mult properties are not provided in DT (the
    basis of calculation algorithm is borrowed from
    __clocksource_update_freq_scale() commit 7d2f944a2b83 ("clocksource:
    Provide a generic mult/shift factor calculation")). After this change
    cpts_clock_shift and cpts_clock_mult DT properties will become optional.
    
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5304121adae9fc59f4b640f82200868112edd0bd
Author: Murali Karicheri <m-karicheri2@ti.com>
Date:   Tue Dec 6 18:00:43 2016 -0600

    clocksource: export the clocks_calc_mult_shift to use by timestamp code
    
    The CPSW CPTS driver is capable of doing timestamping on tx/rx packets and
    requires to know mult and shift factors for timestamp conversion from raw
    value to nanoseconds (ptp clock). Now these mult and shift factors are
    calculated manually and provided through DT, which makes very hard to
    support of a lot number of platforms, especially if CPTS refclk is not the
    same for some kind of boards and depends on efuse settings (Keystone 2
    platforms). Hence, export clocks_calc_mult_shift() to allow drivers like
    CPSW CPTS (and other ptp drivesr) to benefit from automaitc calculation of
    mult and shift factors.
    
    Cc: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f204d21ee0b7ecedcb50c33c4f2ff52b6e5b1455
Author: Chris Metcalf <cmetcalf@mellanox.com>
Date:   Wed Nov 16 11:18:05 2016 -0500

    tile: avoid using clocksource_cyc2ns with absolute cycle count
    
    commit e658a6f14d7c0243205f035979d0ecf6c12a036f upstream.
    
    For large values of "mult" and long uptimes, the intermediate
    result of "cycles * mult" can overflow 64 bits.  For example,
    the tile platform calls clocksource_cyc2ns with a 1.2 GHz clock;
    we have mult = 853, and after 208.5 days, we overflow 64 bits.
    
    Since clocksource_cyc2ns() is intended to be used for relative
    cycle counts, not absolute cycle counts, performance is more
    importance than accepting a wider range of cycle values.  So,
    just use mult_frac() directly in tile's sched_clock().
    
    Commit 4cecf6d401a0 ("sched, x86: Avoid unnecessary overflow
    in sched_clock") by Salman Qazi results in essentially the same
    generated code for x86 as this change does for tile.  In fact,
    a follow-on change by Salman introduced mult_frac() and switched
    to using it, so the C code was largely identical at that point too.
    
    Peter Zijlstra then added mul_u64_u32_shr() and switched x86
    to use it.  This is, in principle, better; by optimizing the
    64x64->64 multiplies to be 32x32->64 multiplies we can potentially
    save some time.  However, the compiler piplines the 64x64->64
    multiplies pretty well, and the conditional branch in the generic
    mul_u64_u32_shr() causes some bubbles in execution, with the
    result that it's pretty much a wash.  If tilegx provided its own
    implementation of mul_u64_u32_shr() without the conditional branch,
    we could potentially save 3 cycles, but that seems like small gain
    for a fair amount of additional build scaffolding; no other platform
    currently provides a mul_u64_u32_shr() override, and tile doesn't
    currently have an <asm/div64.h> header to put the override in.
    
    Additionally, gcc currently has an optimization bug that prevents
    it from recognizing the opportunity to use a 32x32->64 multiply,
    and so the result would be no better than the existing mult_frac()
    until such time as the compiler is fixed.
    
    For now, just using mult_frac() seems like the right answer.
    
    Signed-off-by: Chris Metcalf <cmetcalf@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4df31626fc0804822cc967807fb8105d09e8ab38
Author: Chris Metcalf <cmetcalf@mellanox.com>
Date:   Wed Nov 16 11:18:05 2016 -0500

    tile: avoid using clocksource_cyc2ns with absolute cycle count
    
    commit e658a6f14d7c0243205f035979d0ecf6c12a036f upstream.
    
    For large values of "mult" and long uptimes, the intermediate
    result of "cycles * mult" can overflow 64 bits.  For example,
    the tile platform calls clocksource_cyc2ns with a 1.2 GHz clock;
    we have mult = 853, and after 208.5 days, we overflow 64 bits.
    
    Since clocksource_cyc2ns() is intended to be used for relative
    cycle counts, not absolute cycle counts, performance is more
    importance than accepting a wider range of cycle values.  So,
    just use mult_frac() directly in tile's sched_clock().
    
    Commit 4cecf6d401a0 ("sched, x86: Avoid unnecessary overflow
    in sched_clock") by Salman Qazi results in essentially the same
    generated code for x86 as this change does for tile.  In fact,
    a follow-on change by Salman introduced mult_frac() and switched
    to using it, so the C code was largely identical at that point too.
    
    Peter Zijlstra then added mul_u64_u32_shr() and switched x86
    to use it.  This is, in principle, better; by optimizing the
    64x64->64 multiplies to be 32x32->64 multiplies we can potentially
    save some time.  However, the compiler piplines the 64x64->64
    multiplies pretty well, and the conditional branch in the generic
    mul_u64_u32_shr() causes some bubbles in execution, with the
    result that it's pretty much a wash.  If tilegx provided its own
    implementation of mul_u64_u32_shr() without the conditional branch,
    we could potentially save 3 cycles, but that seems like small gain
    for a fair amount of additional build scaffolding; no other platform
    currently provides a mul_u64_u32_shr() override, and tile doesn't
    currently have an <asm/div64.h> header to put the override in.
    
    Additionally, gcc currently has an optimization bug that prevents
    it from recognizing the opportunity to use a 32x32->64 multiply,
    and so the result would be no better than the existing mult_frac()
    until such time as the compiler is fixed.
    
    For now, just using mult_frac() seems like the right answer.
    
    Signed-off-by: Chris Metcalf <cmetcalf@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a26b0d4962c7daf91d942a917c71c20e164b687a
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Nov 22 15:33:44 2016 +0100

    clocksource: nps: avoid maybe-uninitialized warning
    
    We get a harmless false-positive warning with the newly added nps
    clocksource driver:
    
    drivers/clocksource/timer-nps.c: In function 'nps_setup_clocksource':
    drivers/clocksource/timer-nps.c:102:6: error: 'nps_timer1_freq' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    
    Gcc here fails to identify that IS_ERR() is only true if PTR_ERR()
    has a nonzero value. Using PTR_ERR_OR_ZERO() to convert the result
    first makes this obvious and shuts up the warning.
    
    Fixes: 0ee4d9922df5 ("clocksource: Add clockevent support to NPS400 driver")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit 60263dcd821b9558ea08b112d9d31ffbe3ac643f
Author: Noam Camus <noamca@mellanox.com>
Date:   Thu Nov 17 09:12:43 2016 +0200

    clocksource: Add clockevent support to NPS400 driver
    
    Till now we used clockevent from generic ARC driver.
    This was enough as long as we worked with simple multicore SoC.
    When we are working with multithread SoC each HW thread can be
    scheduled to receive timer interrupt using timer mask register.
    This patch will provide a way to control clock events per HW thread.
    
    The design idea is that for each core there is dedicated register
    (TSI) serving all 16 HW threads.
    The register is a bitmask with one bit for each HW thread.
    When HW thread wants that next expiration of timer interrupt will
    hit it then the proper bit should be set in this dedicated register.
    When timer expires all HW threads within this core which their bit
    is set at the TSI register will be interrupted.
    
    Driver can be used from device tree by:
    compatible = "ezchip,nps400-timer0" <-- for clocksource
    compatible = "ezchip,nps400-timer1" <-- for clockevent
    
    Note that name convention for timer0/timer1 was taken from legacy
    ARC design. This design is our base before adding HW threads.
    For backward compatibility we keep "ezchip,nps400-timer" for clocksource
    
    Signed-off-by: Noam Camus <noamca@mellanox.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>

commit 0465fb495f9c9698de08ff103905008e5f38e8f1
Author: Noam Camus <noamca@mellanox.com>
Date:   Wed Nov 16 08:31:12 2016 +0200

    clocksource: update "fn" at CLOCKSOURCE_OF_DECLARE() of nps400 timer
    
    nps_setup_clocksource() should take node as only argument as defined by
    typedef int (*of_init_fn_1_ret)(struct device_node *)
    
    Therefore need to replace:
    int __init nps_setup_clocksource(struct device_node *node, struct clk *clk)
    with
    int __init nps_setup_clocksource(struct device_node *node)
    
    This patch also serve as preparation for next patch which add support
    for clockevents to nps400.
    Specifically we add new function nps_get_timer_clk() to serve clocksource
    and later clockevent registration.
    
    Signed-off-by: Noam Camus <noamca@mellanox.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 09dcd1958be42ea473fef24a2c02d975f520ea71
Author: Noam Camus <noamca@mellanox.com>
Date:   Wed Nov 16 08:31:11 2016 +0200

    soc: Support for NPS HW scheduling
    
    This new header file is for NPS400 SoC (part of ARC architecture).
    The header file includes macros for save/restore of HW scheduling.
    The control of HW scheduling is achieved by writing core registers.
    This code was moved from arc/plat-eznps so it can be used
    from drivers/clocksource/, available only for CONFIG_EZNPS_MTM_EXT.
    
    Signed-off-by: Noam Camus <noamca@mellanox.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c4c9a040ecb7297e011e579f5a9cc280e42d725f
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Mon Oct 31 13:46:38 2016 -0700

    clocksource: import ARC timer driver
    
    This adds support for
    
     - CONFIG_ARC_TIMERS : legacy 32-bit TIMER0 and TIMER1 which count UP
       from @CNT to @LIMIT, before optionally triggering an interrupt.
       These are programmed using ARC auxiliary register interface.
       These are present in all ARC cores (ARC700 and ARC HS38)
       TIMER0 serves as clockevent for all ARC linux builds.
       TIMER1 is used for clocksource in arc700 builds.
    
     - CONFIG_ARC_TIMERS_64BIT: 64-bit counters, RTC and GFRC found in
       ARC HS38 cores. These are independnet IP blocks with different
       programming model respectively.
    
    Link: http://lkml.kernel.org/r/20161111231132.GA4186@mai
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit b26c2e3823bae6ba43a2b263d9bb75a3efd39b6a
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Mon Oct 31 13:06:19 2016 -0700

    ARC: breakout timer include code into separate header ...
    
    ... which allows for use in drivers/clocksource later
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit c33a605dd6f36618f9f658e71c09fcdcb44fc500
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Mon Oct 31 11:09:34 2016 -0700

    ARC: breakout aux handling into a separate header
    
    ARC timers use aux registers for programming and this paves way for
    moving ARC timer drivers into drivers/clocksource
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit 92b03314033c0d36ef3a5e68ccdc65ad2a4d17c5
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Mon Oct 31 13:26:25 2016 -0700

    ARC: time: move time_init() out of the driver
    
    to allow future git mv of the driver into drivers/clocksource
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit 044214200b0b7aa4633d2e93529e55b5ca50a5a5
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Mon Oct 31 14:26:41 2016 -0700

    ARC: timer: gfrc, rtc: build under same option (64-bit timers)
    
    The original distinction was done as they were developed at different
    times and primarily because they are specific to UP (RTC) and SMP (GFRC).
    
    But given that driver handles that at runtime, (i.e. not allowing
    RTC as clocksource in SMP), we can simplify things a bit.
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit ec7cb87bf998448471d1ff735abf156211da0874
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Mon Oct 31 13:02:31 2016 -0700

    ARC: timer: gfrc, rtc: Read BCR to detect whether hardware exists ...
    
    ... don't rely on cpuinfo populated in arc boot code. This paves way for
    moving this code in drivers/clocksource/
    
    And while at it, convert the WARN() to pr_warn() as sugested by Daniel
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit cc4db26899dcd0e6ff0448c77abd8eb61b1a1333
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Nov 19 13:47:43 2016 +0000

    x86/tsc: Try to adjust TSC if sync test fails
    
    If the first CPU of a package comes online, it is necessary to test whether
    the TSC is in sync with a CPU on some other package. When a deviation is
    observed (time going backwards between the two CPUs) the TSC is marked
    unstable, which is a problem on large machines as they have to fall back to
    the HPET clocksource, which is insanely slow.
    
    It has been attempted to compensate the TSC by adding the offset to the TSC
    and writing it back some time ago, but this never was merged because it did
    not turn out to be stable, especially not on older systems.
    
    Modern systems have become more stable in that regard and the TSC_ADJUST
    MSR allows us to compensate for the time deviation in a sane way. If it's
    available allow up to three synchronization runs and if a time warp is
    detected the starting CPU can compensate the time warp via the TSC_ADJUST
    MSR and retry. If the third run still shows a deviation or when random time
    warps are detected the test terminally fails.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Yinghai Lu <yinghai@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Link: http://lkml.kernel.org/r/20161119134018.048237517@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 1d0095feea591bbd94f35d8a98aed746319783e1
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Nov 19 13:47:37 2016 +0000

    x86/tsc: Verify TSC_ADJUST from idle
    
    When entering idle, it's a good oportunity to verify that the TSC_ADJUST
    MSR has not been tampered with (BIOS hiding SMM cycles). If tampering is
    detected, emit a warning and restore it to the previous value.
    
    This is especially important for machines, which mark the TSC reliable
    because there is no watchdog clocksource available (SoCs).
    
    This is not sufficient for HPC (NOHZ_FULL) situations where a CPU never
    goes idle, but adding a timer to do the check periodically is not an option
    either. On a machine, which has this issue, the check triggeres right
    during boot, so there is a decent chance that the sysadmin will notice.
    
    Rate limit the check to once per second and warn only once per cpu.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Yinghai Lu <yinghai@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Link: http://lkml.kernel.org/r/20161119134017.732180441@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 8b223bc7abe0e30e8d297a24ee6c6c07ef8d0bb9
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Nov 19 13:47:36 2016 +0000

    x86/tsc: Store and check TSC ADJUST MSR
    
    The TSC_ADJUST MSR shows whether the TSC has been modified. This is helpful
    in a two aspects:
    
    1) It allows to detect BIOS wreckage, where SMM code tries to 'hide' the
       cycles spent by storing the TSC value at SMM entry and restoring it at
       SMM exit. On affected machines the TSCs run slowly out of sync up to the
       point where the clocksource watchdog (if available) detects it.
    
       The TSC_ADJUST MSR allows to detect the TSC modification before that and
       eventually restore it. This is also important for SoCs which have no
       watchdog clocksource and therefore TSC wreckage cannot be detected and
       acted upon.
    
    2) All threads in a package are required to have the same TSC_ADJUST
       value. Broken BIOSes break that and as a result the TSC synchronization
       check fails.
    
       The TSC_ADJUST MSR allows to detect the deviation when a CPU comes
       online. If detected set it to the value of an already online CPU in the
       same package. This also allows to reduce the number of sync tests
       because with that in place the test is only required for the first CPU
       in a package.
    
       In principle all CPUs in a system should have the same TSC_ADJUST value
       even across packages, but with physical CPU hotplug this assumption is
       not true because the TSC starts with power on, so physical hotplug has
       to do some trickery to bring the TSC into sync with already running
       packages, which requires to use an TSC_ADJUST value different from CPUs
       which got powered earlier.
    
       A final enhancement is the opportunity to compensate for unsynced TSCs
       accross nodes at boot time and make the TSC usable that way. It won't
       help for TSCs which run apart due to frequency skew between packages,
       but this gets detected by the clocksource watchdog later.
    
    The first step toward this is to store the TSC_ADJUST value of a starting
    CPU and compare it with the value of an already online CPU in the same
    package. If they differ, emit a warning and adjust it to the reference
    value. The !SMP version just stores the boot value for later verification.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Yinghai Lu <yinghai@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Link: http://lkml.kernel.org/r/20161119134017.655323776@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit ec4101e8903e318b9fd4e3bbf72b1eaba53c64e1
Author: Chris Metcalf <cmetcalf@mellanox.com>
Date:   Mon Nov 28 14:35:20 2016 -0800

    timekeeping/clocksource_cyc2ns: Document intended range limitation
    
    The "cycles" argument should not be an absolute clocksource cycle
    value, as the implementation's arithmetic will overflow relatively
    easily with wide (64 bit) clocksource counters.
    
    For performance, the implementation is simple and fast, since the
    function is intended for only relatively small delta values of
    clocksource cycles.
    
    [jstultz: Fixed up to merge against HEAD & commit message tweaks,
     also included rewording suggestion by Ingo]
    Signed-off-by: Chris Metcalf <cmetcalf@mellanox.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Link: http://lkml.kernel.org/r/1480372524-15181-4-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 34ceea275f626ae624b55f2b388a07f806988a55
Author: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
Date:   Mon Nov 21 10:01:34 2016 +0000

    ACPI/IORT: Introduce linker section for IORT entries probing
    
    Since commit e647b532275b ("ACPI: Add early device probing
    infrastructure") the kernel has gained the infrastructure that allows
    adding linker script section entries to execute ACPI driver callbacks
    (ie probe routines) for all subsystems that register a table entry
    in the respective kernel section (eg clocksource, irqchip).
    
    Since ARM IOMMU devices data is described through IORT tables when
    booting with ACPI, the ARM IOMMU drivers must be made able to hook ACPI
    callback routines that are called to probe IORT entries and initialize
    the respective IOMMU devices.
    
    To avoid adding driver specific hooks into IORT table initialization
    code (breaking therefore code modularity - ie ACPI IORT code must be made
    aware of ARM SMMU drivers ACPI init callbacks), this patch adds code
    that allows ARM SMMU drivers to take advantage of the ACPI early probing
    infrastructure, so that they can add linker script section entries
    containing drivers callback to be executed on IORT tables detection.
    
    Since IORT nodes are differentiated by a type, the callback routines
    can easily parse the IORT table entries, check the IORT nodes and
    carry out some actions whenever the IORT node type associated with
    the driver specific callback is matched.
    
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    Reviewed-by: Tomasz Nowicki <tn@semihalf.com>
    Tested-by: Hanjun Guo <hanjun.guo@linaro.org>
    Tested-by: Tomasz Nowicki <tn@semihalf.com>
    Cc: Tomasz Nowicki <tn@semihalf.com>
    Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit 3ad0e83cf86bcaeb6ca3c37060a3ce866b25fb42
Merge: 86b01b5419fd 5035b230e7b6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 25 16:47:15 2016 -0800

    Merge branch 'parisc-4.9-4' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux
    
    Pull parisc fixes from Helge Deller:
     "On parisc we were still seeing occasional random segmentation faults
      and memory corruption on SMP machines. Dave Anglin then looked again
      at the TLB related code and found two issues in the PCI DMA and
      generic TLB flush functions.
    
      Then, in our startup code we had some timing of the cache and TLB
      functions to calculate a threshold when to use a complete TLB/cache
      flush or just to flush a specific range. This code produced a race
      with newly started CPUs and thus lead to occasional kernel crashes
      (due to stale TLB/cache entries). The patch by Dave fixes this issue
      by flushing the local caches before starting secondary CPUs and by
      removing the race.
    
      The last problem fixed by this series is that we quite often suffered
      from hung tasks and self-detected stalls on the CPUs. It was somehow
      clear that this was related to the (in v4.7) newly introduced cr16
      clocksource and the own implementation of sched_clock(). I replaced
      the open-coded sched_clock() function and switched to the generic
      sched_clock() implementation which seems to have fixed this isse as
      well.
    
      All patches have been sucessfully tested on a variety of machines,
      including our debian buildd servers.
    
      All patches (beside the small pr_cont fix) are tagged for stable
      releases"
    
    * 'parisc-4.9-4' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux:
      parisc: Also flush data TLB in flush_icache_page_asm
      parisc: Fix race in pci-dma.c
      parisc: Switch to generic sched_clock implementation
      parisc: Fix races in parisc_setup_cache_timing()
      parisc: Fix printk continuations in system detection

commit 4d92c8d036a7f1c9671eb672e7623925f5274737
Merge: ded9b5dd205e e658a6f14d7c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 23 13:15:15 2016 -0800

    Merge branch 'stable' of git://git.kernel.org/pub/scm/linux/kernel/git/cmetcalf/linux-tile
    
    Pull arch/tile bugfix from Chris Metcalf:
     "This fixes a bug that causes reboots after 208 days of uptime :-)"
    
    * 'stable' of git://git.kernel.org/pub/scm/linux/kernel/git/cmetcalf/linux-tile:
      tile: avoid using clocksource_cyc2ns with absolute cycle count

commit e658a6f14d7c0243205f035979d0ecf6c12a036f
Author: Chris Metcalf <cmetcalf@mellanox.com>
Date:   Wed Nov 16 11:18:05 2016 -0500

    tile: avoid using clocksource_cyc2ns with absolute cycle count
    
    For large values of "mult" and long uptimes, the intermediate
    result of "cycles * mult" can overflow 64 bits.  For example,
    the tile platform calls clocksource_cyc2ns with a 1.2 GHz clock;
    we have mult = 853, and after 208.5 days, we overflow 64 bits.
    
    Since clocksource_cyc2ns() is intended to be used for relative
    cycle counts, not absolute cycle counts, performance is more
    importance than accepting a wider range of cycle values.  So,
    just use mult_frac() directly in tile's sched_clock().
    
    Commit 4cecf6d401a0 ("sched, x86: Avoid unnecessary overflow
    in sched_clock") by Salman Qazi results in essentially the same
    generated code for x86 as this change does for tile.  In fact,
    a follow-on change by Salman introduced mult_frac() and switched
    to using it, so the C code was largely identical at that point too.
    
    Peter Zijlstra then added mul_u64_u32_shr() and switched x86
    to use it.  This is, in principle, better; by optimizing the
    64x64->64 multiplies to be 32x32->64 multiplies we can potentially
    save some time.  However, the compiler piplines the 64x64->64
    multiplies pretty well, and the conditional branch in the generic
    mul_u64_u32_shr() causes some bubbles in execution, with the
    result that it's pretty much a wash.  If tilegx provided its own
    implementation of mul_u64_u32_shr() without the conditional branch,
    we could potentially save 3 cycles, but that seems like small gain
    for a fair amount of additional build scaffolding; no other platform
    currently provides a mul_u64_u32_shr() override, and tile doesn't
    currently have an <asm/div64.h> header to put the override in.
    
    Additionally, gcc currently has an optimization bug that prevents
    it from recognizing the opportunity to use a 32x32->64 multiply,
    and so the result would be no better than the existing mult_frac()
    until such time as the compiler is fixed.
    
    For now, just using mult_frac() seems like the right answer.
    
    Cc: stable@kernel.org [v3.4+]
    Signed-off-by: Chris Metcalf <cmetcalf@mellanox.com>

commit 84c39b8b7d46883f7a7514c7d55909831aa846fd
Author: Arvind Yadav <arvind.yadav.cs@gmail.com>
Date:   Wed Sep 21 23:03:57 2016 +0530

    clocksource/drivers/bcm2835_timer: Unmap region obtained by of_iomap
    
    Free memory mapping, if bcm2835_timer_init is not successful.
    
    Signed-off-by: Arvind Yadav <arvind.yadav.cs@gmail.com>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f947ee147e0895d5c0ef18e81ca7a4e4219739e3
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Oct 26 00:35:50 2016 -0700

    clocksource/drivers/arm_arch_timer: Map frame with of_io_request_and_map()
    
    Let's use the of_io_request_and_map() API so that the frame
    region is protected and shows up in /proc/iomem.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>

commit d8ec7595a013237f82d965dcf981571aeb41855b
Author: Brian Norris <briannorris@chromium.org>
Date:   Tue Oct 4 11:12:09 2016 -0700

    clocksource/drivers/arm_arch_timer: Don't assume clock runs in suspend
    
    The ARM specifies that the system counter "must be implemented in an
    always-on power domain," and so we try to use the counter as a source of
    timekeeping across suspend/resume. Unfortunately, some SoCs (e.g.,
    Rockchip's RK3399) do not keep the counter ticking properly when
    switched from their high-power clock to the lower-power clock used in
    system suspend. Support this quirk by adding a new device tree property.
    
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 77079b133f242d3e3710c9b89ed54458307e54ff
Merge: d117b9acaead 9883ed4433b3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Nov 19 18:40:47 2016 -0800

    Merge tag 'armsoc-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC fixes from Olof Johansson:
     "Again a set of smaller fixes across several platforms (OMAP, Marvell,
      Allwinner, i.MX, etc).
    
      A handful of typo fixes and smaller missing contents from device
      trees, with some tweaks to OMAP mach files to deal with CPU feature
      print misformatting, potential NULL ptr dereference and one setup
      issue with UARTs"
    
    * tag 'armsoc-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc:
      ipmi/bt-bmc: change compatible node to 'aspeed, ast2400-ibt-bmc'
      ARM: dts: STiH410-b2260: Fix typo in spi0 chipselect definition
      ARM: dts: omap5: board-common: fix wrong SMPS6 (VDD-DDR3) voltage
      ARM: omap3: Add missing memory node in SOM-LV
      arm64: dts: marvell: add unique identifiers for Armada A8k SPI controllers
      arm64: dts: marvell: fix clocksource for CP110 slave SPI0
      arm64: dts: marvell: Fix typo in label name on Armada 37xx
      ASoC: omap-abe-twl6040: fix typo in bindings documentation
      dts: omap5: board-common: enable twl6040 headset jack detection
      dts: omap5: board-common: add phandle to reference Palmas gpadc
      ARM: OMAP2+: avoid NULL pointer dereference
      ARM: OMAP2+: PRM: initialize en_uart4_mask and grpsel_uart4_mask
      ARM: dts: omap3: Fix memory node in Torpedo board
      ARM: AM43XX: Select OMAP_INTERCONNECT in Kconfig
      ARM: OMAP3: Fix formatting of features printed
      ARM: dts: imx53-qsb: Fix regulator constraints
      ARM: dts: sun8i: fix the pinmux for UART1

commit 4e12317c7bfecb5810f30ad888720330a7f1b6cf
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Aug 25 14:26:59 2016 +0800

    clocksource/drivers/sun4i: Clear interrupts after stopping timer in probe function
    
    commit b53e7d000d9e6e9fd2c6eb6b82d2783c67fd599e upstream.
    
    The bootloader (U-boot) sometimes uses this timer for various delays.
    It uses it as a ongoing counter, and does comparisons on the current
    counter value. The timer counter is never stopped.
    
    In some cases when the user interacts with the bootloader, or lets
    it idle for some time before loading Linux, the timer may expire,
    and an interrupt will be pending. This results in an unexpected
    interrupt when the timer interrupt is enabled by the kernel, at
    which point the event_handler isn't set yet. This results in a NULL
    pointer dereference exception, panic, and no way to reboot.
    
    Clear any pending interrupts after we stop the timer in the probe
    function to avoid this.
    
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 984fecebda3b9c8e3d75f8492593da71c58972b3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Nov 18 10:38:09 2016 +0100

    x86/tsc: Finalize the split of the TSC_RELIABLE flag
    
    All places which used the TSC_RELIABLE to skip the delayed calibration
    have been converted to use the TSC_KNOWN_FREQ flag.
    
    Make the immeditate clocksource registration, which skips the long term
    calibration, solely depend on TSC_KNOWN_FREQ.
    
    The TSC_RELIABLE now merily removes the requirement for a watchdog
    clocksource.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Bin Gao <bin.gao@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>

commit f3a02ecebed7df7d5d68898628dea7a3bfcf03e3
Author: Bin Gao <bin.gao@linux.intel.com>
Date:   Tue Nov 15 12:27:24 2016 -0800

    x86/tsc: Set TSC_KNOWN_FREQ and TSC_RELIABLE flags on Intel Atom SoCs
    
    TSC on Intel Atom SoCs capable of determining TSC frequency by MSR is
    reliable and the frequency is known (provided by HW).
    
    On these platforms PIT/HPET is generally not available so calibration won't
    work at all and there is no other clocksource to act as a watchdog for the
    TSC, so we have no other choice than to trust it.
    
    Set both X86_FEATURE_TSC_KNOWN_FREQ and X86_FEATURE_TSC_RELIABLE flags to
    make sure the calibration is skipped and no watchdog is required.
    
    Signed-off-by: Bin Gao <bin.gao@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/1479241644-234277-5-git-send-email-bin.gao@linux.intel.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 4635fdc696a8e89eead3ea1712ae6ada38538d40
Author: Bin Gao <bin.gao@linux.intel.com>
Date:   Tue Nov 15 12:27:23 2016 -0800

    x86/tsc: Mark Intel ATOM_GOLDMONT TSC reliable
    
    On Intel GOLDMONT Atom SoC TSC is the only available clocksource, so there
    is no way to do software calibration or have a watchdog clocksource for it.
    Software calibration is already disabled via the TSC_KNOWN_FREQ flag, but
    the watchdog requirement still persists, so such systems cannot switch to
    high resolution/nohz mode.
    
    Mark it reliable, so it becomes usable. Hardware teams confirmed that this
    is safe on that SoC.
    
    Signed-off-by: Bin Gao <bin.gao@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/1479241644-234277-4-git-send-email-bin.gao@linux.intel.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit f5eadc27a60c14653ccd8017d303aefc773be2f6
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Tue Oct 18 13:49:18 2016 +0800

    Revert "clocksource/drivers/timer_sun5i: Replace code by clocksource_mmio_init"
    
    commit 593876838826914a7e4e05fbbcb728be6fbc4d89 upstream.
    
    struct clocksource is also used by the clk notifier callback, to
    unregister and re-register the clocksource with a different clock rate.
    clocksource_mmio_init does not pass back a pointer to the struct used,
    and the clk notifier callback assumes that the struct clocksource in
    struct sun5i_timer_clksrc is valid. This results in a kernel NULL
    pointer dereference when the hstimer clock is changed:
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000004
    [<c03a4678>] (clocksource_unbind) from [<c03a46d4>] (clocksource_unregister+0x2c/0x44)
    [<c03a46d4>] (clocksource_unregister) from [<c0a6f350>] (sun5i_rate_cb_clksrc+0x34/0x3c)
    [<c0a6f350>] (sun5i_rate_cb_clksrc) from [<c035ea50>] (notifier_call_chain+0x44/0x84)
    [<c035ea50>] (notifier_call_chain) from [<c035edc0>] (__srcu_notifier_call_chain+0x44/0x60)
    [<c035edc0>] (__srcu_notifier_call_chain) from [<c035edf4>] (srcu_notifier_call_chain+0x18/0x20)
    [<c035edf4>] (srcu_notifier_call_chain) from [<c0670174>] (__clk_notify+0x70/0x7c)
    [<c0670174>] (__clk_notify) from [<c06702c0>] (clk_propagate_rate_change+0xa4/0xc4)
    [<c06702c0>] (clk_propagate_rate_change) from [<c0670288>] (clk_propagate_rate_change+0x6c/0xc4)
    
    Revert the commit for now. clocksource_mmio_init can be made to pass back
    a pointer, but the code churn and usage of an inner struct might not be
    worth it.
    
    Fixes: 157dfadef832 ("clocksource/drivers/timer_sun5i: Replace code by clocksource_mmio_init")
    Reported-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Cc: linux-sunxi@googlegroups.com
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/20161018054918.26855-1-wens@csie.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbcdf6877eacc0dc6b69b5aac5b43fb6b182aee4
Merge: 1c8018f7a7a6 8d897006fe92
Author: Olof Johansson <olof@lixom.net>
Date:   Thu Nov 17 16:33:39 2016 -0800

    Merge tag 'mvebu-fixes-4.9-1' of git://git.infradead.org/linux-mvebu into fixes
    
    mvebu fixes for 4.9 (part 1)
    
    All of them are fixes for arm64 device tree
    
    - 2 for the SPI node on the Armada 7K/8K
    - 1 for the clock node on the Armada 37xx
    
    * tag 'mvebu-fixes-4.9-1' of git://git.infradead.org/linux-mvebu:
      arm64: dts: marvell: add unique identifiers for Armada A8k SPI controllers
      arm64: dts: marvell: fix clocksource for CP110 slave SPI0
      arm64: dts: marvell: Fix typo in label name on Armada 37xx
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 191ce9d1fde84190f18cd3faf0ef8594f442b313
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed Nov 16 16:36:26 2016 +0100

    s390/time: fix clocksource steering for negative clock offsets
    
    The TOD clock offset injected by an STP sync check can be negative.
    If the resulting total tod_steering_delta gets negative the kernel
    will panic.
    
    Change the type of tod_steering_delta to a signed type.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 75c7b6f3f6ba ("s390/time: steer clocksource on STP sync events")
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 63b7c83ebea06d23dfd1548391515614b5765ad8
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Tue Nov 15 11:53:54 2016 +0100

    microblaze: Fix return value from xilinx_timer_init
    
    The patch
    "clocksource/drivers/microblaze: Convert init function to return error"
    (sha1: 0586421746ef2bc33898d2d7f3dbb0eec6b234c3)
    introduced return value and this one was forgetten to convert.
    
    This patch also remove compilation warning:
    arch/microblaze/kernel/timer.c: In function 'xilinx_timer_init':
    arch/microblaze/kernel/timer.c:262:3: warning: 'return' with no value,
     in function returning non-void [-Wreturn-type]
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e6251f009bc27ea2c774aefde5dca6b5d2142df4
Merge: e3d183c035f6 0a0a047def15
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 11 16:51:50 2016 -0800

    Merge tag 'arc-4.9-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc
    
    Pull ARC fixes from Vineet Gupta:
    
     - mmap handler for dma ops as generic handler no longer works for us
       [Alexey]
    
     - Fixes for EZChip platform [Noam]
    
     - Fix RTC clocksource driver build issue
    
     - ARC IRQ handling fixes [Yuriy]
    
     - Revert a recent makefile change which doesn't go well with oldish
       tools out in the wild
    
    * tag 'arc-4.9-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc:
      ARCv2: MCIP: Use IDU_M_DISTRI_DEST mode if there is only 1 destination core
      ARC: IRQ: Do not use hwirq as virq and vice versa
      ARC: [plat-eznps] set default baud for early console
      ARC: [plat-eznps] remove IPI clear from SMP operations
      Revert "ARC: build: retire old toggles"
      ARC: timer: rtc: implement read loop in "C" vs. inline asm
      ARC: change return value of userspace cmpxchg assist syscall
      arc: Implement arch-specific dma_map_ops.mmap
      ARC: [SMP] avoid overriding present cpumask
      ARC: Enable PERF_EVENTS in nSIM driven platforms

commit 52a1e76f16e2ed83033d09c58170bfc41bb1d480
Author: Marcin Wojtas <mw@semihalf.com>
Date:   Tue Sep 6 19:41:11 2016 +0200

    arm64: dts: marvell: fix clocksource for CP110 master SPI0
    
    commit 51227bf52008bd4c4c50da4b749bbc6e7bbbca52 upstream.
    
    I2C and SPI interfaces share common clock trees within the CP110 HW block.
    It occurred that SPI0 interface has wrong clock assignment in the device
    tree, which is fixed in this commit to a proper value.
    
    Fixes: 728dacc7f4dd ("arm64: dts: marvell: initial DT description of ...")
    Signed-off-by: Marcin Wojtas <mw@semihalf.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ec27be33898effa47fcb2cd45abb552a97fac89
Author: Marcin Wojtas <mw@semihalf.com>
Date:   Tue Sep 6 19:41:12 2016 +0200

    arm64: dts: marvell: fix clocksource for CP110 slave SPI0
    
    I2C and SPI interfaces share common clock trees within the CP110 HW block.
    It occurred that SPI0 interface has wrong clock assignment in the device
    tree, which is fixed in this commit to a proper value.
    
    Fixes: c749b8d9de32 ("arm64: dts: marvell: add description for the ...")
    Signed-off-by: Marcin Wojtas <mw@semihalf.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>

commit eae339264fd46f6e8adf5c6ed2f454b0a115e90d
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Jun 1 15:21:14 2016 +0200

    ARM: shmobile: r8a7779: Stop passing mode pins state to clock driver
    
    Now the R-Car H1 CPG clock driver obtains the state of the mode pins
    from the R-Car RST driver, there's no longer a need to pass this state
    explicitly. Hence we can just remove the .init_time() callback, the
    generic ARM code will take care of calling of_clk_init() and
    clocksource_probe().
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Dirk Behme <dirk.behme@de.bosch.com>

commit 2674235fd4293e0cc367dde8fcf658d17cadea5c
Merge: 2a290036a1e4 b70e8beb09d3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Oct 29 12:07:29 2016 -0700

    Merge tag 'armsoc-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC fixes from Olof Johansson:
     "We haven't seen a whole lot of fixes for the first two weeks since the
      merge window, but here is the batch that we have at the moment.
    
      Nothing sticks out as particularly bad or scary, it's mostly a handful
      of smaller fixes to several platforms. The Uniphier reset controller
      changes could probably have been delayed to 4.10, but they're not
      scary and just plumbing up driver changes that went in during the
      merge window.
    
      We're also adding another maintainer to Marvell Berlin platforms, to
      help out when Sebastian is too busy. Yay teamwork!"
    
    * tag 'armsoc-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc:
      ARM: imx: mach-imx6q: Fix the PHY ID mask for AR8031
      ARM: dts: vf610: fix IRQ flag of global timer
      ARM: imx: gpc: Fix the imx_gpc_genpd_init() error path
      ARM: imx: gpc: Initialize all power domains
      arm64: dts: Updated NAND DT properties for NS2 SVK
      arm64: dts: uniphier: change MIO node to SD control node
      ARM: dts: uniphier: change MIO node to SD control node
      reset: uniphier: rename MIO reset to SD reset for Pro5, PXs2, LD20 SoCs
      arm64: uniphier: select ARCH_HAS_RESET_CONTROLLER
      ARM: uniphier: select ARCH_HAS_RESET_CONTROLLER
      arm64: dts: Add timer erratum property for LS2080A and LS1043A
      arm64: dts: rockchip: remove the abuse of keep-power-in-suspend
      ARM: multi_v7_defconfig: Enable Intel e1000e driver
      MAINTAINERS: add myself as Marvell berlin SoC maintainer
      bus: qcom-ebi2: depend on ARCH_QCOM or COMPILE_TEST
      ARM: dts: fix the SD card on the Snowball
      arm64: dts: rockchip: remove always-on and boot-on from vcc_sd
      arm64: dts: marvell: fix clocksource for CP110 master SPI0
      ARM: mvebu: Select corediv clk for all mvebu v7 SoC

commit 75c7b6f3f6bab0432353caf634598dbdba0d6e74
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Tue Oct 11 12:49:50 2016 +0200

    s390/time: steer clocksource on STP sync events
    
    On STP sync events the TOD clock will jump in time, either forward or
    backward. The TOD clocksource claims to be continuous but in case of
    an STP sync with a negative offset it is not.
    
    Subtract the offset injected by the STP sync check from the result of
    the TOD clocksource to make it continuous again. Add code to drift the
    offset towards zero with a fixed rate, steering 1 second in ~9 hours.
    
    Suggested-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 486eeb6d6755a573829e6c5438eb7aae18891bb1
Author: Christopher S. Hall <christopher.s.hall@intel.com>
Date:   Mon Feb 22 03:15:19 2016 -0800

    time: Add cycles to nanoseconds translation
    
    [ Upstream commit 6bd58f09e1d8cc6c50a824c00bf0d617919986a1 ]
    
    The timekeeping code does not currently provide a way to translate
    externally provided clocksource cycles to system time. The cycle count
    is always provided by the result clocksource read() method internal to
    the timekeeping code. The added function timekeeping_cycles_to_ns()
    calculated a nanosecond value from a cycle count that can be added to
    tk_read_base.base value yielding the current system time. This allows
    clocksource cycle values external to the timekeeping code to provide a
    cycle count that can be transformed to system time.
    
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: kevin.b.stanton@intel.com
    Cc: kevin.j.clarke@intel.com
    Cc: hpa@zytor.com
    Cc: jeffrey.t.kirsher@intel.com
    Cc: netdev@vger.kernel.org
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Christopher S. Hall <christopher.s.hall@intel.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 0c2b6dc4fd4fa13796b319aae969a009f03222c6
Merge: 3e9679a365d3 593876838826
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Oct 22 10:23:15 2016 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "This updates contains:
    
       - A revert which addresses a boot failure on ARM Sun5i platforms
    
       - A new clocksource driver, which has been delayed beyond rc1 due to
         an interrupt driver issue which was unearthed by this driver. The
         debugging of that issue and the discussion about the proper
         solution made this driver miss the merge window. There is no point
         in delaying it for a full cycle as it completes the basic mainline
         support for the new JCore platform and does not create any risk
         outside of that platform"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      Revert "clocksource/drivers/timer_sun5i: Replace code by clocksource_mmio_init"
      clocksource: Add J-Core timer/clocksource driver
      of: Add J-Core timer bindings

commit 593876838826914a7e4e05fbbcb728be6fbc4d89
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Tue Oct 18 13:49:18 2016 +0800

    Revert "clocksource/drivers/timer_sun5i: Replace code by clocksource_mmio_init"
    
    struct clocksource is also used by the clk notifier callback, to
    unregister and re-register the clocksource with a different clock rate.
    clocksource_mmio_init does not pass back a pointer to the struct used,
    and the clk notifier callback assumes that the struct clocksource in
    struct sun5i_timer_clksrc is valid. This results in a kernel NULL
    pointer dereference when the hstimer clock is changed:
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000004
    [<c03a4678>] (clocksource_unbind) from [<c03a46d4>] (clocksource_unregister+0x2c/0x44)
    [<c03a46d4>] (clocksource_unregister) from [<c0a6f350>] (sun5i_rate_cb_clksrc+0x34/0x3c)
    [<c0a6f350>] (sun5i_rate_cb_clksrc) from [<c035ea50>] (notifier_call_chain+0x44/0x84)
    [<c035ea50>] (notifier_call_chain) from [<c035edc0>] (__srcu_notifier_call_chain+0x44/0x60)
    [<c035edc0>] (__srcu_notifier_call_chain) from [<c035edf4>] (srcu_notifier_call_chain+0x18/0x20)
    [<c035edf4>] (srcu_notifier_call_chain) from [<c0670174>] (__clk_notify+0x70/0x7c)
    [<c0670174>] (__clk_notify) from [<c06702c0>] (clk_propagate_rate_change+0xa4/0xc4)
    [<c06702c0>] (clk_propagate_rate_change) from [<c0670288>] (clk_propagate_rate_change+0x6c/0xc4)
    
    Revert the commit for now. clocksource_mmio_init can be made to pass back
    a pointer, but the code churn and usage of an inner struct might not be
    worth it.
    
    Fixes: 157dfadef832 ("clocksource/drivers/timer_sun5i: Replace code by clocksource_mmio_init")
    Reported-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Cc: linux-sunxi@googlegroups.com
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/20161018054918.26855-1-wens@csie.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 9995f4f184613fb02ee73092b03545520a72b104
Author: Rich Felker <dalias@libc.org>
Date:   Thu Oct 13 21:51:06 2016 +0000

    clocksource: Add J-Core timer/clocksource driver
    
    At the hardware level, the J-Core PIT is integrated with the interrupt
    controller, but it is represented as its own device and has an
    independent programming interface. It provides a 12-bit countdown
    timer, which is not presently used, and a periodic timer. The interval
    length for the latter is programmable via a 32-bit throttle register
    whose units are determined by a bus-period register. The periodic
    timer is used to implement both periodic and oneshot clock event
    modes; in oneshot mode the interrupt handler simply disables the timer
    as soon as it fires.
    
    Despite its device tree node representing an interrupt for the PIT,
    the actual irq generated is programmable, not hard-wired. The driver
    is responsible for programming the PIT to generate the hardware irq
    number that the DT assigns to it.
    
    On SMP configurations, J-Core provides cpu-local instances of the PIT;
    no broadcast timer is needed. This driver supports the creation of the
    necessary per-cpu clock_event_device instances.
    
    A nanosecond-resolution clocksource is provided using the J-Core "RTC"
    registers, which give a 64-bit seconds count and 32-bit nanoseconds
    that wrap every second. The driver converts these to a full-range
    32-bit nanoseconds count.
    
    Signed-off-by: Rich Felker <dalias@libc.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: devicetree@vger.kernel.org
    Cc: linux-sh@vger.kernel.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Rob Herring <robh+dt@kernel.org>
    Link: http://lkml.kernel.org/r/b591ff12cc5ebf63d1edc98da26046f95a233814.1476393790.git.dalias@libc.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 3602ffdee9afa727320d33bda57a6957d72b1df2
Author: Rich Felker <dalias@libc.org>
Date:   Wed Oct 19 17:53:52 2016 +0000

    irqchip/jcore: Don't show Kconfig menu item for driver
    
    Core drivers for J-Core SoCs will be selected implicitly via
    CONFIG_SH_JCORE_SOC instead. Based on a corresponding change to the
    clocksource/timer driver requested by Daniel Lezcano.
    
    Signed-off-by: Rich Felker <dalias@libc.org>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: linux-sh@vger.kernel.org
    Link: http://lkml.kernel.org/r/883a3d17084003e3cf21bab73ec12828fe4ff6c6.1476899495.git.dalias@libc.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 5c85b8722c839b214857ea0627401b82aa2bcf72
Merge: 1001354ca341 51227bf52008
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Oct 17 13:44:03 2016 -0700

    Merge tag 'mvebu-fixes-4.8-3' of git://git.infradead.org/linux-mvebu into fixes
    
    mvebu fixes for 4.8 (part 3)
    
    - Select corediv clk for all mvebu v7 SoC
    - Fix clocksource for CP110 master SPI0 for Armada 7K/8K
    
    * tag 'mvebu-fixes-4.8-3' of git://git.infradead.org/linux-mvebu:
      arm64: dts: marvell: fix clocksource for CP110 master SPI0
      ARM: mvebu: Select corediv clk for all mvebu v7 SoC
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 9b57d91c03054030f30be75c6e19c65b5f108ef3
Author: Christopher S. Hall <christopher.s.hall@intel.com>
Date:   Mon Feb 22 03:15:19 2016 -0800

    time: Add cycles to nanoseconds translation
    
    commit 6bd58f09e1d8cc6c50a824c00bf0d617919986a1 upstream.
    
    The timekeeping code does not currently provide a way to translate
    externally provided clocksource cycles to system time. The cycle count
    is always provided by the result clocksource read() method internal to
    the timekeeping code. The added function timekeeping_cycles_to_ns()
    calculated a nanosecond value from a cycle count that can be added to
    tk_read_base.base value yielding the current system time. This allows
    clocksource cycle values external to the timekeeping code to provide a
    cycle count that can be transformed to system time.
    
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: kevin.b.stanton@intel.com
    Cc: kevin.j.clarke@intel.com
    Cc: hpa@zytor.com
    Cc: jeffrey.t.kirsher@intel.com
    Cc: netdev@vger.kernel.org
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Christopher S. Hall <christopher.s.hall@intel.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6afd563d4bbc1924b7de9e053324c007e0d36476
Merge: b4f33f6ddd0c d6db68b2deaa
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 7 21:23:40 2016 -0700

    Merge tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC driver updates from Arnd Bergmann:
     "Driver updates for ARM SoCs, including a couple of newly added
      drivers:
    
       - The Qualcomm external bus interface 2 (EBI2), used in some of their
         mobile phone chips for connecting flash memory, LCD displays or
         other peripherals
    
       - Secure monitor firmware for Amlogic SoCs, and an NVMEM driver for
         the EFUSE based on that firmware interface.
    
       - Perf support for the AppliedMicro X-Gene performance monitor unit
    
       - Reset driver for STMicroelectronics STM32
    
       - Reset driver for SocioNext UniPhier SoCs
    
      Aside from these, there are minor updates to SoC-specific bus,
      clocksource, firmware, pinctrl, reset, rtc and pmic drivers"
    
    * tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (50 commits)
      bus: qcom-ebi2: depend on HAS_IOMEM
      pinctrl: mvebu: orion5x: Generalise mv88f5181l support for 88f5181
      clk: mvebu: Add clk support for the orion5x SoC mv88f5181
      dt-bindings: EXYNOS: Add Exynos5433 PMU compatible
      clocksource: exynos_mct: Add the support for ARM64
      perf: xgene: Add APM X-Gene SoC Performance Monitoring Unit driver
      Documentation: Add documentation for APM X-Gene SoC PMU DTS binding
      MAINTAINERS: Add entry for APM X-Gene SoC PMU driver
      bus: qcom: add EBI2 driver
      bus: qcom: add EBI2 device tree bindings
      rtc: rtc-pm8xxx: Add support for pm8018 rtc
      nvmem: amlogic: Add Amlogic Meson EFUSE driver
      firmware: Amlogic: Add secure monitor driver
      soc: qcom: smd: Reset rx tail rather than tx
      memory: atmel-sdramc: fix a possible NULL dereference
      reset: hi6220: allow to compile test driver on other architectures
      reset: zynq: add driver Kconfig option
      reset: sunxi: add driver Kconfig option
      reset: stm32: add driver Kconfig option
      reset: socfpga: add driver Kconfig option
      ...

commit 5e1b834b27fb2c27cde33a0752425f11d10c0b2d
Merge: 49deffe0b0e4 b536fd587044
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 3 18:09:13 2016 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "A rather smalish set of updates for timers and timekeeping:
    
       - Two core fixes to prevent potential undefinded behaviour about
         which gcc is complaining rightfully.
    
       - A fix to prevent stopping the tick on an (soon) offline CPU so it
         can complete the shutdown procedure.
    
       - Wait for clocks to stabilize before making decisions, so a not yet
         validated clock is not rejected.
    
       - The usual pile of fixes to the various clocksource drivers.
    
       - Core code typo and include fixlets"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      timekeeping: Include the correct header for errno definitions
      clocksource/drivers/ti-32k: Prevent ftrace recursion
      clocksource/mips-gic-timer: Stop checking cpu_has_counter
      clocksource/mips-gic-timer: Print an error if IRQ setup fails
      tick/nohz: Prevent stopping the tick on an offline CPU
      clocksource/drivers/oxnas: Add OX820 compatible
      clocksource/drivers/timer-atmel-pit: Simplify IRQ handler
      clocksource/drivers/timer-atmel-pit: Remove uselesss WARN_ON_ONCE
      clocksource/drivers/timer-atmel-pit: Drop at91sam926x_pit_common_init
      clocksource/drivers/moxart: Replace panic by pr_err
      clocksource/drivers/moxart: Replace setup_irq by request_irq
      clocksource/drivers/moxart: Add Aspeed support
      clocksource/drivers/moxart: Use struct to hold state
      clocksource/drivers/moxart: Refactor enable/disable
      time: Avoid undefined behaviour in ktime_add_safe()
      time: Avoid undefined behaviour in timespec64_add_safe()
      timekeeping: Prints the amounts of time spent during suspend
      clocksource: Defer override invalidation unless clock is unstable
      hrtimer: Spelling fixes

commit 7af8a0f8088831428051976cb06cc1e450f8bab5
Merge: c8d2bc9bc39e db68f3e7594a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 3 08:58:35 2016 -0700

    Merge tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux
    
    Pull arm64 updates from Will Deacon:
     "It's a bit all over the place this time with no "killer feature" to
      speak of.  Support for mismatched cache line sizes should help people
      seeing whacky JIT failures on some SoCs, and the big.LITTLE perf
      updates have been a long time coming, but a lot of the changes here
      are cleanups.
    
      We stray outside arch/arm64 in a few areas: the arch/arm/ arch_timer
      workaround is acked by Russell, the DT/OF bits are acked by Rob, the
      arch_timer clocksource changes acked by Marc, CPU hotplug by tglx and
      jump_label by Peter (all CC'd).
    
      Summary:
    
       - Support for execute-only page permissions
       - Support for hibernate and DEBUG_PAGEALLOC
       - Support for heterogeneous systems with mismatches cache line sizes
       - Errata workarounds (A53 843419 update and QorIQ A-008585 timer bug)
       - arm64 PMU perf updates, including cpumasks for heterogeneous systems
       - Set UTS_MACHINE for building rpm packages
       - Yet another head.S tidy-up
       - Some cleanups and refactoring, particularly in the NUMA code
       - Lots of random, non-critical fixes across the board"
    
    * tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux: (100 commits)
      arm64: tlbflush.h: add __tlbi() macro
      arm64: Kconfig: remove SMP dependence for NUMA
      arm64: Kconfig: select OF/ACPI_NUMA under NUMA config
      arm64: fix dump_backtrace/unwind_frame with NULL tsk
      arm/arm64: arch_timer: Use archdata to indicate vdso suitability
      arm64: arch_timer: Work around QorIQ Erratum A-008585
      arm64: arch_timer: Add device tree binding for A-008585 erratum
      arm64: Correctly bounds check virt_addr_valid
      arm64: migrate exception table users off module.h and onto extable.h
      arm64: pmu: Hoist pmu platform device name
      arm64: pmu: Probe default hw/cache counters
      arm64: pmu: add fallback probe table
      MAINTAINERS: Update ARM PMU PROFILING AND DEBUGGING entry
      arm64: Improve kprobes test for atomic sequence
      arm64/kvm: use alternative auto-nop
      arm64: use alternative auto-nop
      arm64: alternative: add auto-nop infrastructure
      arm64: lse: convert lse alternatives NOP padding to use __nops
      arm64: barriers: introduce nops and __nops macros for NOP sequences
      arm64: sysreg: replace open-coded mrs_s/msr_s with {read,write}_sysreg_s
      ...

commit f8fea9dc6c61cef7c1754e0b5a9f34c040152089
Author: Paul Burton <paul.burton@mips.com>
Date:   Tue Sep 13 17:53:35 2016 +0100

    irqchip/mips-gic: Fix local interrupts
    
    commit e875bd66dfb68f4e898e9a43ef42858c504a7f23 upstream.
    
    Since the device hierarchy domain was added by commit c98c1822ee13
    ("irqchip/mips-gic: Add device hierarchy domain"), GIC local interrupts
    have been broken.
    
    Users attempting to setup a per-cpu local IRQ, for example the GIC timer
    clock events code in drivers/clocksource/mips-gic-timer.c, the
    setup_percpu_irq function would refuse with -EINVAL because the GIC
    irqchip driver never called irq_set_percpu_devid so the
    IRQ_PER_CPU_DEVID flag was never set for the IRQ. This happens because
    irq_set_percpu_devid was being called from the gic_irq_domain_map
    function which is no longer called.
    
    Doing only that runs into further problems because gic_dev_domain_alloc
    set the struct irq_chip for all interrupts, local or shared, to
    gic_level_irq_controller despite that only being suitable for shared
    interrupts. The typical outcome of this is that gic_level_irq_controller
    callback functions are called for local interrupts, and then hwirq
    number calculations overflow & the driver ends up attempting to access
    some invalid register with an address calculated from an invalid hwirq
    number. Best case scenario is that this then leads to a bus error. This
    is fixed by abstracting the setup of the hwirq & chip to a new function
    gic_setup_dev_chip which is used by both the root GIC IRQ domain & the
    device domain.
    
    Finally, decoding local interrupts failed because gic_dev_domain_alloc
    only called irq_domain_alloc_irqs_parent for shared interrupts. Local
    ones were therefore never associated with hwirqs in the root GIC IRQ
    domain and the virq in gic_handle_local_int would always be 0. This is
    fixed by calling irq_domain_alloc_irqs_parent unconditionally & having
    gic_irq_domain_alloc handle both local & shared interrupts, which is
    easy due to the aforementioned abstraction of chip setup into
    gic_setup_dev_chip.
    
    This fixes use of the MIPS GIC timer for clock events, which has been
    broken since c98c1822ee13 ("irqchip/mips-gic: Add device hierarchy
    domain") but hadn't been noticed due to a silent fallback to the MIPS
    coprocessor 0 count/compare clock events device.
    
    Fixes: c98c1822ee13 ("irqchip/mips-gic: Add device hierarchy domain")
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Qais Yousef <qsyousef@gmail.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Link: http://lkml.kernel.org/r/20160913165335.31389-1-paul.burton@imgtec.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 68151411d795b08418cbaf52bb984fac94b914f6
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Aug 25 14:26:59 2016 +0800

    clocksource/drivers/sun4i: Clear interrupts after stopping timer in probe function
    
    commit b53e7d000d9e6e9fd2c6eb6b82d2783c67fd599e upstream.
    
    The bootloader (U-boot) sometimes uses this timer for various delays.
    It uses it as a ongoing counter, and does comparisons on the current
    counter value. The timer counter is never stopped.
    
    In some cases when the user interacts with the bootloader, or lets
    it idle for some time before loading Linux, the timer may expire,
    and an interrupt will be pending. This results in an unexpected
    interrupt when the timer interrupt is enabled by the kernel, at
    which point the event_handler isn't set yet. This results in a NULL
    pointer dereference exception, panic, and no way to reboot.
    
    Clear any pending interrupts after we stop the timer in the probe
    function to avoid this.
    
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 28375171dbccdfbe8e76f2890e1acb81cb00d4d7
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Aug 25 14:26:59 2016 +0800

    clocksource/drivers/sun4i: Clear interrupts after stopping timer in probe function
    
    commit b53e7d000d9e6e9fd2c6eb6b82d2783c67fd599e upstream.
    
    The bootloader (U-boot) sometimes uses this timer for various delays.
    It uses it as a ongoing counter, and does comparisons on the current
    counter value. The timer counter is never stopped.
    
    In some cases when the user interacts with the bootloader, or lets
    it idle for some time before loading Linux, the timer may expire,
    and an interrupt will be pending. This results in an unexpected
    interrupt when the timer interrupt is enabled by the kernel, at
    which point the event_handler isn't set yet. This results in a NULL
    pointer dereference exception, panic, and no way to reboot.
    
    Clear any pending interrupts after we stop the timer in the probe
    function to avoid this.
    
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fa42205ab60c43c021983e6e27301dde103e3c3
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Aug 25 14:26:59 2016 +0800

    clocksource/drivers/sun4i: Clear interrupts after stopping timer in probe function
    
    commit b53e7d000d9e6e9fd2c6eb6b82d2783c67fd599e upstream.
    
    The bootloader (U-boot) sometimes uses this timer for various delays.
    It uses it as a ongoing counter, and does comparisons on the current
    counter value. The timer counter is never stopped.
    
    In some cases when the user interacts with the bootloader, or lets
    it idle for some time before loading Linux, the timer may expire,
    and an interrupt will be pending. This results in an unexpected
    interrupt when the timer interrupt is enabled by the kernel, at
    which point the event_handler isn't set yet. This results in a NULL
    pointer dereference exception, panic, and no way to reboot.
    
    Clear any pending interrupts after we stop the timer in the probe
    function to avoid this.
    
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6dc1576cd517440313c9551b6ffa3d7e389c7c7
Author: Scott Wood <oss@buserror.net>
Date:   Thu Sep 22 03:35:17 2016 -0500

    arm64: arch_timer: Work around QorIQ Erratum A-008585
    
    Erratum A-008585 says that the ARM generic timer counter "has the
    potential to contain an erroneous value for a small number of core
    clock cycles every time the timer value changes".  Accesses to TVAL
    (both read and write) are also affected due to the implicit counter
    read.  Accesses to CVAL are not affected.
    
    The workaround is to reread TVAL and count registers until successive
    reads return the same value.  Writes to TVAL are replaced with an
    equivalent write to CVAL.
    
    The workaround is to reread TVAL and count registers until successive reads
    return the same value, and when writing TVAL to retry until counter
    reads before and after the write return the same value.
    
    The workaround is enabled if the fsl,erratum-a008585 property is found in
    the timer node in the device tree.  This can be overridden with the
    clocksource.arm_arch_timer.fsl-a008585 boot parameter, which allows KVM
    users to enable the workaround until a mechanism is implemented to
    automatically communicate this information.
    
    This erratum can be found on LS1043A and LS2080A.
    
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Scott Wood <oss@buserror.net>
    [will: renamed read macro to reflect that it's not usually unstable]
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit 3aa601492babdf3acdec89e5aa9c44e1a357a4d8
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Thu Sep 22 15:56:21 2016 +0800

    clocksource/drivers/ti-32k: Prevent ftrace recursion
    
    Currently ti-32k can be used as a scheduler clock. We properly marked
    omap_32k_read_sched_clock() as notrace but we then call another
    function ti_32k_read_cycles() that _wasn't_ notrace.
    
    Having a traceable function in the sched_clock() path leads to a
    recursion within ftrace and a kernel crash.
    
    Fix this by adding notrace attribute to the ti_32k_read_cycles()
    function.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Cc: daniel.lezcano@linaro.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Link: http://lkml.kernel.org/r/20160922075621.3725-1-jszhang@marvell.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 6982530eab096939f9c5b607a5ce8078df19737e
Author: Paul Burton <paul.burton@mips.com>
Date:   Tue Sep 13 17:56:44 2016 +0100

    clocksource/mips-gic-timer: Stop checking cpu_has_counter
    
    The cpu_has_counter macro indicates whether the current CPU has a
    working coprocessor 0 count & compare registers, and has no bearing on
    the GIC. Stop checking it.
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/20160913165644.627-2-paul.burton@imgtec.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 2fd0c93cd219779eef4b1301f9613e43adc86e39
Author: Paul Burton <paul.burton@mips.com>
Date:   Tue Sep 13 17:56:43 2016 +0100

    clocksource/mips-gic-timer: Print an error if IRQ setup fails
    
    We've checked for errors from setup_irq_percpu since commit f95ac8558b88
    ("CLOCKSOURCE: mips-gic: Add missing error returns checks") but didn't
    print an error message in the failure case. This makes it very easy to
    overlook the GIC timer clock event driver not being registered, since
    we'll generally just use a different clock event driver if that happens.
    
    Print an error if IRQ setup fails in order to make such problems harder
    to miss (ie. not completely silent).
    
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/20160913165644.627-1-paul.burton@imgtec.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit e875bd66dfb68f4e898e9a43ef42858c504a7f23
Author: Paul Burton <paul.burton@mips.com>
Date:   Tue Sep 13 17:53:35 2016 +0100

    irqchip/mips-gic: Fix local interrupts
    
    Since the device hierarchy domain was added by commit c98c1822ee13
    ("irqchip/mips-gic: Add device hierarchy domain"), GIC local interrupts
    have been broken.
    
    Users attempting to setup a per-cpu local IRQ, for example the GIC timer
    clock events code in drivers/clocksource/mips-gic-timer.c, the
    setup_percpu_irq function would refuse with -EINVAL because the GIC
    irqchip driver never called irq_set_percpu_devid so the
    IRQ_PER_CPU_DEVID flag was never set for the IRQ. This happens because
    irq_set_percpu_devid was being called from the gic_irq_domain_map
    function which is no longer called.
    
    Doing only that runs into further problems because gic_dev_domain_alloc
    set the struct irq_chip for all interrupts, local or shared, to
    gic_level_irq_controller despite that only being suitable for shared
    interrupts. The typical outcome of this is that gic_level_irq_controller
    callback functions are called for local interrupts, and then hwirq
    number calculations overflow & the driver ends up attempting to access
    some invalid register with an address calculated from an invalid hwirq
    number. Best case scenario is that this then leads to a bus error. This
    is fixed by abstracting the setup of the hwirq & chip to a new function
    gic_setup_dev_chip which is used by both the root GIC IRQ domain & the
    device domain.
    
    Finally, decoding local interrupts failed because gic_dev_domain_alloc
    only called irq_domain_alloc_irqs_parent for shared interrupts. Local
    ones were therefore never associated with hwirqs in the root GIC IRQ
    domain and the virq in gic_handle_local_int would always be 0. This is
    fixed by calling irq_domain_alloc_irqs_parent unconditionally & having
    gic_irq_domain_alloc handle both local & shared interrupts, which is
    easy due to the aforementioned abstraction of chip setup into
    gic_setup_dev_chip.
    
    This fixes use of the MIPS GIC timer for clock events, which has been
    broken since c98c1822ee13 ("irqchip/mips-gic: Add device hierarchy
    domain") but hadn't been noticed due to a silent fallback to the MIPS
    coprocessor 0 count/compare clock events device.
    
    Fixes: c98c1822ee13 ("irqchip/mips-gic: Add device hierarchy domain")
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Qais Yousef <qsyousef@gmail.com>
    Cc: stable@vger.kernel.org
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Link: http://lkml.kernel.org/r/20160913165335.31389-1-paul.burton@imgtec.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 51227bf52008bd4c4c50da4b749bbc6e7bbbca52
Author: Marcin Wojtas <mw@semihalf.com>
Date:   Tue Sep 6 19:41:11 2016 +0200

    arm64: dts: marvell: fix clocksource for CP110 master SPI0
    
    I2C and SPI interfaces share common clock trees within the CP110 HW block.
    It occurred that SPI0 interface has wrong clock assignment in the device
    tree, which is fixed in this commit to a proper value.
    
    Fixes: 728dacc7f4dd ("arm64: dts: marvell: initial DT description of ...")
    Signed-off-by: Marcin Wojtas <mw@semihalf.com>
    CC: <stable@vger.kernel.org> v4.7+
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>

commit 7a4c66d0c10ccde344d723e40e0a6b3542ed5bc2
Merge: 70e058835562 8bc6bf178b67
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Sep 19 16:58:46 2016 +0200

    Merge tag 'samsung-drivers-4.9-2' of git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux into next/drivers
    
    Pull "Samsung drivers/soc update for v4.9" from Krzysztof Kozlowski:
    
    1. Allow compile testing of exynos-mct clocksource driver on ARM64.
    2. Document Exynos5433 PMU compatible (already used by clkout driver and more
       will be coming soon).
    
    * tag 'samsung-drivers-4.9-2' of git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux:
      dt-bindings: EXYNOS: Add Exynos5433 PMU compatible
      clocksource: exynos_mct: Add the support for ARM64

commit f1a4c1f33319e9d826df0ec040665501c6e8dca8
Author: Chanwoo Choi <cw00.choi@samsung.com>
Date:   Wed Aug 24 22:49:05 2016 +0900

    clocksource: exynos_mct: Add the support for ARM64
    
    This patch allows building and compile-testing the driver also for
    ARM64.  The delay_timer is only supported on ARMv7.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kukjin Kim <kgene@kernel.org>
    Cc: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    [k.kozlowski: Adjusted commit msg]
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>

commit a2350f3d827a4669cf41b976b8cd083e6269c0fa
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Fri Jun 3 20:38:35 2016 -0600

    clocksource: Allow unregistering the watchdog
    
    [ Upstream commit bbf66d897adf2bb0c310db96c97e8db6369f39e1 ]
    
    Hyper-V vmbus module registers TSC page clocksource when loaded. This is
    the clocksource with the highest rating and thus it becomes the watchdog
    making unloading of the vmbus module impossible.
    Separate clocksource_select_watchdog() from clocksource_enqueue_watchdog()
    and use it on clocksource register/rating change/unregister.
    
    After all, lobotomized monkeys may need some love too.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Dexuan Cui <decui@microsoft.com>
    Cc: K. Y. Srinivasan <kys@microsoft.com>
    Link: http://lkml.kernel.org/r/1453483913-25672-1-git-send-email-vkuznets@redhat.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bee629f1b07375d467a679797acbf8d8ab3db61f
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Jan 27 22:29:36 2016 -0800

    Drivers: hv: vmbus: don't manipulate with clocksources on crash
    
    [ Upstream commit 3ccb4fd8f492f99aece21acc1bd6142275f26236 ]
    
    clocksource_change_rating() involves mutex usage and can't be called
    in interrupt context. It also makes sense to avoid doing redundant work
    on crash.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 817ed5748e40bbc5b5f2aa0c3094c4a7adfb8881
Author: Robert Jarzmik <robert.jarzmik@free.fr>
Date:   Thu Sep 1 08:31:08 2016 +0200

    pcmcia: lubbock: fix sockets configuration
    
    On lubbock board, the probe of the driver crashes by dereferencing very
    early a platform_data structure which is not set, in
    pxa2xx_configure_sockets().
    
    The stack fixed is :
    [    0.244353] SA1111 Microprocessor Companion Chip: silicon revision 1, metal revision 1
    [    0.256321] sa1111 sa1111: Providing IRQ336-390
    [    0.340899] clocksource: Switched to clocksource oscr0
    [    0.472263] Unable to handle kernel NULL pointer dereference at virtual address 00000004
    [    0.480469] pgd = c0004000
    [    0.483432] [00000004] *pgd=00000000
    [    0.487105] Internal error: Oops: f5 [#1] ARM
    [    0.491497] Modules linked in:
    [    0.494650] CPU: 0 PID: 1 Comm: swapper Not tainted 4.8.0-rc3-00080-g1aaa68426f0c-dirty #2068
    [    0.503229] Hardware name: Intel DBPXA250 Development Platform (aka Lubbock)
    [    0.510344] task: c3e42000 task.stack: c3e44000
    [    0.514984] PC is at pxa2xx_configure_sockets+0x4/0x24 (drivers/pcmcia/pxa2xx_base.c:227)
    [    0.520193] LR is at pcmcia_lubbock_init+0x1c/0x38
    [    0.525079] pc : [<c0247c30>]    lr : [<c02479b0>]    psr: a0000053
    [    0.525079] sp : c3e45e70  ip : 100019ff  fp : 00000000
    [    0.536651] r10: c0828900  r9 : c0434838  r8 : 00000000
    [    0.541953] r7 : c0820700  r6 : c0857b30  r5 : c3ec1400  r4 : c0820758
    [    0.548549] r3 : 00000000  r2 : 0000000c  r1 : c3c09c40  r0 : c3ec1400
    [    0.555154] Flags: NzCv  IRQs on  FIQs off  Mode SVC_32  ISA ARM  Segment none
    [    0.562450] Control: 0000397f  Table: a0004000  DAC: 00000053
    [    0.568257] Process swapper (pid: 1, stack limit = 0xc3e44190)
    [    0.574154] Stack: (0xc3e45e70 to 0xc3e46000)
    [    0.578610] 5e60:                                     c4849800 00000000 c3ec1400 c024769c
    [    0.586928] 5e80: 00000000 c3ec140c c3c0ee0c c3ec1400 c3ec1434 c020c410 c3ec1400 c3ec1434
    [    0.595244] 5ea0: c0820700 c080b408 c0828900 c020c5f8 00000000 c0820700 c020c578 c020ac5c
    [    0.603560] 5ec0: c3e687cc c3e71e10 c0820700 00000000 c3c02de0 c020bae4 c03c62f7 c03c62f7
    [    0.611872] 5ee0: c3e68780 c0820700 c042e034 00000000 c043c440 c020cdec c080b408 00000005
    [    0.620188] 5f00: c042e034 c00096c0 c0034440 c01c730c 20000053 ffffffff 00000000 00000000
    [    0.628502] 5f20: 00000000 c3ffcb87 c3ffcb90 c00346ac c3e66ba0 c03f7914 00000092 00000005
    [    0.636811] 5f40: 00000005 c03f847c 00000091 c03f847c 00000000 00000005 c0434828 00000005
    [    0.645125] 5f60: c043482c 00000092 c043c440 c0828900 c0434838 c0418d2c 00000005 00000005
    [    0.653430] 5f80: 00000000 c041858c 00000000 c032e9f0 00000000 00000000 00000000 00000000
    [    0.661729] 5fa0: 00000000 c032e9f8 00000000 c000f0f0 00000000 00000000 00000000 00000000
    [    0.670020] 5fc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    [    0.678311] 5fe0: 00000000 00000000 00000000 00000000 00000013 00000000 00000000 00000000
    [    0.686673] (pxa2xx_configure_sockets) from pcmcia_lubbock_init (/drivers/pcmcia/sa1111_lubbock.c:161)
    [    0.696026] (pcmcia_lubbock_init) from pcmcia_probe (/drivers/pcmcia/sa1111_generic.c:213)
    [    0.704358] (pcmcia_probe) from driver_probe_device (/drivers/base/dd.c:378 /drivers/base/dd.c:499)
    [    0.712848] (driver_probe_device) from __driver_attach (/./include/linux/device.h:983 /drivers/base/dd.c:733)
    [    0.721414] (__driver_attach) from bus_for_each_dev (/drivers/base/bus.c:313)
    [    0.729723] (bus_for_each_dev) from bus_add_driver (/drivers/base/bus.c:708)
    [    0.738036] (bus_add_driver) from driver_register (/drivers/base/driver.c:169)
    [    0.746185] (driver_register) from do_one_initcall (/init/main.c:778)
    [    0.754561] (do_one_initcall) from kernel_init_freeable (/init/main.c:843 /init/main.c:851 /init/main.c:869 /init/main.c:1016)
    [    0.763409] (kernel_init_freeable) from kernel_init (/init/main.c:944)
    [    0.771660] (kernel_init) from ret_from_fork (/arch/arm/kernel/entry-common.S:119)
    [ 0.779347] Code: c03c6305 c03c631e c03c632e e5903048 (e993000c)
    All code
    ========
       0:   c03c6305        eorsgt  r6, ip, r5, lsl #6
       4:   c03c631e        eorsgt  r6, ip, lr, lsl r3
       8:   c03c632e        eorsgt  r6, ip, lr, lsr #6
       c:   e5903048        ldr     r3, [r0, #72]   ; 0x48
      10:*  e993000c        ldmib   r3, {r2, r3}            <-- trapping instruction
    
    Signed-off-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>

commit 2ea3401e2a84eed3f5f55b2075706f88df160d85
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Fri Sep 9 15:26:08 2016 +0200

    clocksource/drivers/oxnas: Add OX820 compatible
    
    In order to support the Oxford Semiconductor OX820 SoC, add new
    compatible string to rps timer driver.
    Also add new string in the dt-bindings.
    
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2783e5d63a9a38b5246c75b29f0dce4cf995a1b3
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Fri Sep 9 13:13:50 2016 +0200

    clocksource/drivers/timer-atmel-pit: Simplify IRQ handler
    
    Because the PIT is also a proper clocksource, the timekeeping code  is
    already able to handle lost ticks.
    
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0d41ec8dbf6766ae2f2b9622cc125be118638ccc
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Fri Sep 9 13:13:49 2016 +0200

    clocksource/drivers/timer-atmel-pit: Remove uselesss WARN_ON_ONCE
    
    IRQ handlers are running with IRQ disabled for a while, remove wrong
    comment and useless test.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a17686c462441a01973c18c4c47986a320a5ebe3
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Fri Sep 9 13:13:48 2016 +0200

    clocksource/drivers/timer-atmel-pit: Drop at91sam926x_pit_common_init
    
    Merge at91sam926x_pit_common_init in at91sam926x_pit_dt_init as this is the
    only initialization method now.
    
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e2a2d38501cb759333342d97442b3742830752ca
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Sep 8 14:25:40 2016 +0200

    clocksource/drivers/moxart: Replace panic by pr_err
    
    The clksrc-of code is supposed to catch the return code and fail gracefully.
    
    Don't panic on error, but print the error and exit with a relevant error
    code.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Joel Stanley <joel@jms.id.au>

commit cf1e929c8a389bc0be63f86100f962217ea99455
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Sep 8 14:17:00 2016 +0200

    clocksource/drivers/moxart: Replace setup_irq by request_irq
    
    Save memory space and line of code by replacing setup_irq by request_irq.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Joel Stanley <joel@jms.id.au>

commit f99fd22e4d4bc84880a8a3117311bbf0e3a6a9dc
Author: Waiman Long <Waiman.Long@hpe.com>
Date:   Tue Sep 6 13:22:10 2016 -0400

    x86/hpet: Reduce HPET counter read contention
    
    On a large system with many CPUs, using HPET as the clock source can
    have a significant impact on the overall system performance because
    of the following reasons:
     1) There is a single HPET counter shared by all the CPUs.
     2) HPET counter reading is a very slow operation.
    
    Using HPET as the default clock source may happen when, for example,
    the TSC clock calibration exceeds the allowable tolerance. Something
    the performance slowdown can be so severe that the system may crash
    because of a NMI watchdog soft lockup, for example.
    
    During the TSC clock calibration process, the default clock source
    will be set temporarily to HPET. For systems with many CPUs, it is
    possible that NMI watchdog soft lockup may occur occasionally during
    that short time period where HPET clocking is active as is shown in
    the kernel log below:
    
    [   71.646504] hpet0: 8 comparators, 64-bit 14.318180 MHz counter
    [   71.655313] Switching to clocksource hpet
    [   95.679135] BUG: soft lockup - CPU#144 stuck for 23s! [swapper/144:0]
    [   95.693363] BUG: soft lockup - CPU#145 stuck for 23s! [swapper/145:0]
    [   95.695580] BUG: soft lockup - CPU#582 stuck for 23s! [swapper/582:0]
    [   95.698128] BUG: soft lockup - CPU#357 stuck for 23s! [swapper/357:0]
    
    This patch addresses the above issues by reducing HPET read contention
    using the fact that if more than one CPUs are trying to access HPET at
    the same time, it will be more efficient when only one CPU in the group
    reads the HPET counter and shares it with the rest of the group instead
    of each group member trying to read the HPET counter individually.
    
    This is done by using a combination quadword that contains a 32-bit
    stored HPET value and a 32-bit spinlock.  The CPU that gets the lock
    will be responsible for reading the HPET counter and storing it in
    the quadword. The others will monitor the change in HPET value and
    lock status and grab the latest stored HPET value accordingly. This
    change is only enabled on 64-bit SMP configuration.
    
    On a 4-socket Haswell-EX box with 144 threads (HT on), running the
    AIM7 compute workload (1500 users) on a 4.8-rc1 kernel (HZ=1000)
    with and without the patch has the following performance numbers
    (with HPET or TSC as clock source):
    
    TSC             = 1042431 jobs/min
    HPET w/o patch  =  798068 jobs/min
    HPET with patch = 1029445 jobs/min
    
    The perf profile showed a reduction of the %CPU time consumed by
    read_hpet from 11.19% without patch to 1.24% with patch.
    
    [ tglx: It's really sad that we need to have such hacks just to deal with
            the fact that cpu vendors have not managed to fix the TSC wreckage
            within 15+ years. Were They Forgetting? ]
    
    Signed-off-by: Waiman Long <Waiman.Long@hpe.com>
    Tested-by: Prarit Bhargava <prarit@redhat.com>
    Cc: Scott J Norton <scott.norton@hpe.com>
    Cc: Douglas Hatch <doug.hatch@hpe.com>
    Cc: Randy Wright <rwright@hpe.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@suse.de>
    Link: http://lkml.kernel.org/r/1473182530-29175-1-git-send-email-Waiman.Long@hpe.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit ba36d53db536d31c49c139484e82581eeb377278
Author: Joel Stanley <joel@jms.id.au>
Date:   Thu Jul 21 23:13:53 2016 +0930

    clocksource/drivers/moxart: Add Aspeed support
    
    The Aspeed SoC has timer IP with a very similar register layout to the
    moxart timer. This patch adds support for the fourth and fifth gen
    aspeed SoCs, and has been tested on the ast2400 and ast2500.
    
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 82fdd070873f7ac9b3e37b3d4523b4ae27d02e50
Author: Joel Stanley <joel@jms.id.au>
Date:   Thu Jul 21 23:13:52 2016 +0930

    clocksource/drivers/moxart: Use struct to hold state
    
    Add a struct moxart_timer to hold the driver state, including the
    irqaction and struct clock_event_device.
    
    Most importantly this holds values for enabling and disabling the timer,
    so future support can be added for devices that use different bits for
    enable/disable.
    
    In preparation for future hardware support we add a MOXART prefix to the
    existing values.
    
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 70164742783c371516199271d923731afc40e25e
Author: Joel Stanley <joel@jms.id.au>
Date:   Thu Jul 21 23:13:51 2016 +0930

    clocksource/drivers/moxart: Refactor enable/disable
    
    This patch abstracts the enable and disable register writes into their
    own functions in preparation for future changes to use SoC specific
    values for the writes.
    
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 04790a5d92b5827082b8159e8a0202354c147a3d
Author: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
Date:   Tue Aug 16 16:59:53 2016 +0100

    ACPI / drivers: replace acpi_probe_lock spinlock with mutex
    
    commit 5331d9cab32ef640b4cd38a43b0858874fbb7168 upstream.
    
    Commit e647b532275b ("ACPI: Add early device probing infrastructure")
    introduced code that allows inserting driver specific
    struct acpi_probe_entry probe entries into ACPI linker sections
    (one per-subsystem, eg irqchip, clocksource) that are then walked
    to retrieve the data and function hooks required to probe the
    respective kernel components.
    
    Probing for all entries in a section is triggered through
    the __acpi_probe_device_table() function, that in turn, according
    to the table ID a given probe entry reports parses the table
    with the function retrieved from the respective section structures
    (ie struct acpi_probe_entry). Owing to the current ACPI table
    parsing implementation, the __acpi_probe_device_table() function
    has to share global variables with the acpi_match_madt() function, so
    in order to guarantee mutual exclusion locking is required
    between the two functions.
    
    Current kernel code implements the locking through the acpi_probe_lock
    spinlock; this has the side effect of requiring all code called
    within the lock (ie struct acpi_probe_entry.probe_{table/subtbl} hooks)
    not to sleep.
    
    However, kernel subsystems that make use of the early probing
    infrastructure are relying on kernel APIs that may sleep (eg
    irq_domain_alloc_fwnode(), among others) in the function calls
    pointed at by struct acpi_probe_entry.{probe_table/subtbl} entries
    (eg gic_v2_acpi_init()), which is a bug.
    
    Since __acpi_probe_device_table() is called from context
    that is allowed to sleep the acpi_probe_lock spinlock can be replaced
    with a mutex; this fixes the issue whilst still guaranteeing
    mutual exclusion.
    
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Fixes: e647b532275b (ACPI: Add early device probing infrastructure)
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8294e0c541511f85d74e15ad1ce99627cd339ef
Author: Helge Deller <deller@gmx.de>
Date:   Fri Aug 19 22:39:02 2016 +0200

    parisc: Fix automatic selection of cr16 clocksource
    
    commit ae141830b118c3fb5b7eab6fa7c8ab7b7224b0a4 upstream.
    
    Commit 54b66800907 (parisc: Add native high-resolution sched_clock()
    implementation) added support to use the CPU-internal cr16 counters as reliable
    clocksource with the help of HAVE_UNSTABLE_SCHED_CLOCK.
    
    Sadly the commit missed to remove the hack which prevented cr16 to become the
    default clocksource even on SMP systems.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0917f5dae67620aaab79e98cdb53a5620570e58
Author: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
Date:   Tue Aug 16 16:59:53 2016 +0100

    ACPI / drivers: replace acpi_probe_lock spinlock with mutex
    
    commit 5331d9cab32ef640b4cd38a43b0858874fbb7168 upstream.
    
    Commit e647b532275b ("ACPI: Add early device probing infrastructure")
    introduced code that allows inserting driver specific
    struct acpi_probe_entry probe entries into ACPI linker sections
    (one per-subsystem, eg irqchip, clocksource) that are then walked
    to retrieve the data and function hooks required to probe the
    respective kernel components.
    
    Probing for all entries in a section is triggered through
    the __acpi_probe_device_table() function, that in turn, according
    to the table ID a given probe entry reports parses the table
    with the function retrieved from the respective section structures
    (ie struct acpi_probe_entry). Owing to the current ACPI table
    parsing implementation, the __acpi_probe_device_table() function
    has to share global variables with the acpi_match_madt() function, so
    in order to guarantee mutual exclusion locking is required
    between the two functions.
    
    Current kernel code implements the locking through the acpi_probe_lock
    spinlock; this has the side effect of requiring all code called
    within the lock (ie struct acpi_probe_entry.probe_{table/subtbl} hooks)
    not to sleep.
    
    However, kernel subsystems that make use of the early probing
    infrastructure are relying on kernel APIs that may sleep (eg
    irq_domain_alloc_fwnode(), among others) in the function calls
    pointed at by struct acpi_probe_entry.{probe_table/subtbl} entries
    (eg gic_v2_acpi_init()), which is a bug.
    
    Since __acpi_probe_device_table() is called from context
    that is allowed to sleep the acpi_probe_lock spinlock can be replaced
    with a mutex; this fixes the issue whilst still guaranteeing
    mutual exclusion.
    
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Fixes: e647b532275b (ACPI: Add early device probing infrastructure)
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c3333600b0ebca94edffb3bb431c78687dc3d36
Merge: 28e68154c5e2 08d072599234
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Sep 4 08:43:45 2016 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "Two fixlet from the timers departement:
    
       - A fix for scheduler stalls in the tick idle code affecting
         NOHZ_FULL kernels
    
       - A trivial compile fix"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      tick/nohz: Fix softlockup on scheduler stalls in kvm guest
      clocksource/drivers/atmel-pit: Fix compilation error

commit 5331d9cab32ef640b4cd38a43b0858874fbb7168
Author: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
Date:   Tue Aug 16 16:59:53 2016 +0100

    ACPI / drivers: replace acpi_probe_lock spinlock with mutex
    
    Commit e647b532275b ("ACPI: Add early device probing infrastructure")
    introduced code that allows inserting driver specific
    struct acpi_probe_entry probe entries into ACPI linker sections
    (one per-subsystem, eg irqchip, clocksource) that are then walked
    to retrieve the data and function hooks required to probe the
    respective kernel components.
    
    Probing for all entries in a section is triggered through
    the __acpi_probe_device_table() function, that in turn, according
    to the table ID a given probe entry reports parses the table
    with the function retrieved from the respective section structures
    (ie struct acpi_probe_entry). Owing to the current ACPI table
    parsing implementation, the __acpi_probe_device_table() function
    has to share global variables with the acpi_match_madt() function, so
    in order to guarantee mutual exclusion locking is required
    between the two functions.
    
    Current kernel code implements the locking through the acpi_probe_lock
    spinlock; this has the side effect of requiring all code called
    within the lock (ie struct acpi_probe_entry.probe_{table/subtbl} hooks)
    not to sleep.
    
    However, kernel subsystems that make use of the early probing
    infrastructure are relying on kernel APIs that may sleep (eg
    irq_domain_alloc_fwnode(), among others) in the function calls
    pointed at by struct acpi_probe_entry.{probe_table/subtbl} entries
    (eg gic_v2_acpi_init()), which is a bug.
    
    Since __acpi_probe_device_table() is called from context
    that is allowed to sleep the acpi_probe_lock spinlock can be replaced
    with a mutex; this fixes the issue whilst still guaranteeing
    mutual exclusion.
    
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Fixes: e647b532275b (ACPI: Add early device probing infrastructure)
    Cc: 4.4+ <stable@vger.kernel.org> # 4.4+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit c8ca488fa42069e07e2fce5789dcbddc4fb2f143
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Aug 25 14:26:59 2016 +0800

    clocksource/drivers/sun4i: Clear interrupts after stopping timer in probe function
    
    [ Upstream commit b53e7d000d9e6e9fd2c6eb6b82d2783c67fd599e ]
    
    The bootloader (U-boot) sometimes uses this timer for various delays.
    It uses it as a ongoing counter, and does comparisons on the current
    counter value. The timer counter is never stopped.
    
    In some cases when the user interacts with the bootloader, or lets
    it idle for some time before loading Linux, the timer may expire,
    and an interrupt will be pending. This results in an unexpected
    interrupt when the timer interrupt is enabled by the kernel, at
    which point the event_handler isn't set yet. This results in a NULL
    pointer dereference exception, panic, and no way to reboot.
    
    Clear any pending interrupts after we stop the timer in the probe
    function to avoid this.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 942d5c08badb801dc6cddea30053840af05a6b43
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Aug 25 14:26:59 2016 +0800

    clocksource/drivers/sun4i: Clear interrupts after stopping timer in probe function
    
    [ Upstream commit b53e7d000d9e6e9fd2c6eb6b82d2783c67fd599e ]
    
    The bootloader (U-boot) sometimes uses this timer for various delays.
    It uses it as a ongoing counter, and does comparisons on the current
    counter value. The timer counter is never stopped.
    
    In some cases when the user interacts with the bootloader, or lets
    it idle for some time before loading Linux, the timer may expire,
    and an interrupt will be pending. This results in an unexpected
    interrupt when the timer interrupt is enabled by the kernel, at
    which point the event_handler isn't set yet. This results in a NULL
    pointer dereference exception, panic, and no way to reboot.
    
    Clear any pending interrupts after we stop the timer in the probe
    function to avoid this.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 36374583f9084cdab4b5dcf5521a3ce55bebb9fa
Author: Kyle Walker <kwalker@redhat.com>
Date:   Sat Aug 6 12:07:30 2016 -0400

    clocksource: Defer override invalidation unless clock is unstable
    
    Clocksources don't get the VALID_FOR_HRES flag until they have been
    checked by a watchdog. However, when using an override, the
    clocksource_select logic will clear the override value if the
    clocksource is not marked VALID_FOR_HRES during that inititial check.
    When using the boot arguments clocksource=<foo>, this selection can
    run before the watchdog, and can cause the override to be incorrectly
    cleared.
    
    To address this condition, the override_name is only invalidated for
    unstable clocksources. Otherwise, the override is left intact until after
    the watchdog has validated the clocksource as stable/unstable.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Kyle Walker <kwalker@redhat.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 98744b408c757901df57fa50cbd5826245dc3a1f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Aug 29 08:44:03 2016 +0200

    clocksource/drivers/atmel-pit: Fix compilation error
    
    The previous fix introduced a check against the ret variable which
    is not defined, hence producing a compilation error:
    
    linux/drivers/clocksource/timer-atmel-pit.c: In function ‘at91sam926x_pit_dt_init’:
    linux/drivers/clocksource/timer-atmel-pit.c:264:2: error: ‘ret’ undeclared (first use in this function)
      ret = clk_prepare_enable(data->mck);
      ^
    linux/drivers/clocksource/timer-atmel-pit.c:264:2: note: each undeclared identifier is reported only once for each function it appears in
    
    Add the missing the variable 'ret'.
    
    Fixes: 504f34c9e45c "clocksource/drivers/atmel-pit: Convert init function to return error"
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: alexandre.belloni@free-electrons.com
    Cc: motobud@gmail.com
    Cc: realbright@lgcns.com
    Link: http://lkml.kernel.org/r/1472453043-24287-1-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 037d2405d0ca0d276c481e40b98fb40e5d0360b8
Merge: af56ff27eba5 b53e7d000d9e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Aug 28 09:03:05 2016 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A few updates for timers & co:
    
       - prevent a livelock in the timekeeping code when debugging is
         enabled
    
       - prevent out of bounds access in the timekeeping debug code
    
       - various fixes in clocksource drivers
    
       - a new maintainers entry"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/sun4i: Clear interrupts after stopping timer in probe function
      drivers/clocksource/pistachio: Fix memory corruption in init
      clocksource/drivers/timer-atmel-pit: Enable mck clock
      clocksource/drivers/pxa: Fix include files for compilation
      MAINTAINERS: Add ARM ARCHITECTED TIMER entry
      timekeeping: Cap array access in timekeeping_debug
      timekeeping: Avoid taking lock in NMI path with CONFIG_DEBUG_TIMEKEEPING

commit b53e7d000d9e6e9fd2c6eb6b82d2783c67fd599e
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Thu Aug 25 14:26:59 2016 +0800

    clocksource/drivers/sun4i: Clear interrupts after stopping timer in probe function
    
    The bootloader (U-boot) sometimes uses this timer for various delays.
    It uses it as a ongoing counter, and does comparisons on the current
    counter value. The timer counter is never stopped.
    
    In some cases when the user interacts with the bootloader, or lets
    it idle for some time before loading Linux, the timer may expire,
    and an interrupt will be pending. This results in an unexpected
    interrupt when the timer interrupt is enabled by the kernel, at
    which point the event_handler isn't set yet. This results in a NULL
    pointer dereference exception, panic, and no way to reboot.
    
    Clear any pending interrupts after we stop the timer in the probe
    function to avoid this.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>

commit 4d0e701659aa869a445823149e172e23faa6edac
Author: Marcin Nowakowski <marcin.nowakowski@mips.com>
Date:   Wed Aug 17 12:22:33 2016 +0200

    drivers/clocksource/pistachio: Fix memory corruption in init
    
    Driver init code incorrectly uses the block base address and as a result
    clears clocksource structure's fields instead of the hardware registers.
    
    Commit 09a998201649 ("timekeeping: Lift clocksource cacheline
    restriction") has changed the offsets within pistachio_clocksource
    structure and what has previously gone unnoticed now leads to a kernel
    panic during boot.
    
    Signed-off-by: Marcin Nowakowski <marcin.nowakowski@imgtec.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 699e36e5b8e9f77b2be4c23f0b309e53be4b2880
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Tue Aug 23 10:44:02 2016 +0200

    clocksource/drivers/timer-atmel-pit: Enable mck clock
    
    mck is needed to get the PIT working. Explicitly prepare_enable it instead
    of assuming it is enabled.
    
    This solves an issue where the system is freezing when the ETM/ETB drivers
    are enabled.
    
    Reported-by: Olivier Schonken <olivier.schonken@gmail.com>
    Reviewed-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit aa8c0f1ad7e862147f4efb32bbb71ff66eb38caa
Author: Baoyou Xie <baoyou.xie@linaro.org>
Date:   Tue Aug 23 23:19:29 2016 +0800

    clocksource/drivers/pxa: Fix include files for compilation
    
    We get 1 warning about global functions without a declaration in the
     clocksource/drivers/pxa driver when building with W=1:
    
    drivers/clocksource/pxa_timer.c:221:13: warning: no previous prototype for 'pxa_timer_nodt_init' [-Wmissing-prototypes]
     void __init pxa_timer_nodt_init(int irq, void __iomem *base,
    
    In fact, this function is declared in pxa.h, so this patch
    add missing header dependencies.
    
    Signed-off-by: Baoyou Xie <baoyou.xie@linaro.org>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Cc: daniel.lezcano@linaro.org
    Cc: xie.baoyou@zte.com.cn
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1471965569-4104-1-git-send-email-baoyou.xie@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 588deb614a0d3caa596dd8eba8c4d31eaaeb89b9
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Tue Aug 9 11:03:56 2016 +0100

    MAINTAINERS: Add ARM ARCHITECTED TIMER entry
    
    The ARM architected timer driver falls under the drivers/clocksource/
    catch-all in MAINTAINERS, and get_maintainers.pl doesn't suggest a
    number of people who should be Cc'd.
    
    The ARM architected timer is a core component of ARMv7+VE and ARMv8, and
    is critical to the correct operation of both architecture ports (and
    their respective KVM code), and patches to it should have review by
    knowledgeable interested parties.
    
    This patch adds a MAINTAINERS entry for the driver and its low-level
    arch components, such that get_maintainer.pl will always include
    relevant interested parties for modifications to the driver. For the
    timebeing, this means myself and Marc Zyngier.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1470737036-2082-1-git-send-email-mark.rutland@arm.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 46097f27180c7dd371c2b0391d40bb1fa36007af
Merge: 4ec656bdf43a 3eb53b20d7bd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Aug 21 14:28:24 2016 -0700

    Merge branch 'parisc-4.8-2' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux
    
    Pull two parisc fixes from Helge Deller:
     "The first patch ensures that the high-res cr16 clocksource (which was
      added in kernel 4.7) gets choosen as default clocksource for parisc.
    
      The second patch moves the #define of EREFUSED down inside errno.h and
      thus unbreaks building the gccgo compiler"
    
    * 'parisc-4.8-2' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux:
      parisc: Fix order of EREFUSED define in errno.h
      parisc: Fix automatic selection of cr16 clocksource

commit 2f8e3e96a62390a5ddf65fef907ee60d5144c2a6
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Jul 21 14:27:51 2016 +0800

    MIPS: hpet: Increase HPET_MIN_PROG_DELTA and decrease HPET_MIN_CYCLES
    
    commit 3ef06653987d4c4536b408321edf0e5caa2a317f upstream.
    
    At first, we prefer to use mips clockevent device, so we decrease the
    rating of hpet clockevent device.
    
    For hpet, if HPET_MIN_PROG_DELTA (minimum delta of hpet programming) is
    too small and HPET_MIN_CYCLES (threshold of -ETIME checking) is too
    large, then hpet_next_event() can easily return -ETIME. After commit
    c6eb3f70d44828 ("hrtimer: Get rid of hrtimer softirq") this will cause
    a RCU stall.
    
    So, HPET_MIN_PROG_DELTA must be sufficient that we don't re-trip the
    -ETIME check -- if we do, we will return -ETIME, forward the next event
    time, try to set it, return -ETIME again, and basically lock the system
    up. Meanwhile, HPET_MIN_CYCLES doesn't need to be too large, 16 cycles
    is enough.
    
    This solution is similar to commit f9eccf24615672 ("clocksource/drivers
    /vt8500: Increase the minimum delta").
    
    By the way, this patch ensures hpet count/compare to be 32-bit long.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Steven J . Hill <Steven.Hill@imgtec.com>
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/13819/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23e0fce7b2e31a9672137e0887d521068f467b04
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Jul 21 14:27:51 2016 +0800

    MIPS: hpet: Increase HPET_MIN_PROG_DELTA and decrease HPET_MIN_CYCLES
    
    commit 3ef06653987d4c4536b408321edf0e5caa2a317f upstream.
    
    At first, we prefer to use mips clockevent device, so we decrease the
    rating of hpet clockevent device.
    
    For hpet, if HPET_MIN_PROG_DELTA (minimum delta of hpet programming) is
    too small and HPET_MIN_CYCLES (threshold of -ETIME checking) is too
    large, then hpet_next_event() can easily return -ETIME. After commit
    c6eb3f70d44828 ("hrtimer: Get rid of hrtimer softirq") this will cause
    a RCU stall.
    
    So, HPET_MIN_PROG_DELTA must be sufficient that we don't re-trip the
    -ETIME check -- if we do, we will return -ETIME, forward the next event
    time, try to set it, return -ETIME again, and basically lock the system
    up. Meanwhile, HPET_MIN_CYCLES doesn't need to be too large, 16 cycles
    is enough.
    
    This solution is similar to commit f9eccf24615672 ("clocksource/drivers
    /vt8500: Increase the minimum delta").
    
    By the way, this patch ensures hpet count/compare to be 32-bit long.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Steven J . Hill <Steven.Hill@imgtec.com>
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/13819/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae141830b118c3fb5b7eab6fa7c8ab7b7224b0a4
Author: Helge Deller <deller@gmx.de>
Date:   Fri Aug 19 22:39:02 2016 +0200

    parisc: Fix automatic selection of cr16 clocksource
    
    Commit 54b66800907 (parisc: Add native high-resolution sched_clock()
    implementation) added support to use the CPU-internal cr16 counters as reliable
    clocksource with the help of HAVE_UNSTABLE_SCHED_CLOCK.
    
    Sadly the commit missed to remove the hack which prevented cr16 to become the
    default clocksource even on SMP systems.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: stable@vger.kernel.org # 4.7+

commit b061b4f36d2fce94a866e41c68bea782a5673461
Merge: ac78bc714bea be5769e2061a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 18 15:08:31 2016 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Ingo Molnar:
     "Three clocksource driver fixes"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/mips-gic-timer: Make gic_clocksource_of_init() return int
      clocksource/drivers/kona: Fix get_counter() error handling
      clocksource/drivers/time-armada-370-xp: Fix the clock reference

commit be5769e2061ac40b32daa83e28e1c4aac7133511
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Aug 17 12:21:35 2016 +0200

    clocksource/drivers/mips-gic-timer: Make gic_clocksource_of_init() return int
    
    In commit:
    
      d8152bf85d2c0 ("clocksource/drivers/mips-gic-timer: Convert init function to return error")
    
    several return values were added to a void function resulting in the following warnings:
    
     clocksource/mips-gic-timer.c: In function 'gic_clocksource_of_init':
     clocksource/mips-gic-timer.c:175:3: warning: 'return' with a value, in function returning void [enabled by default]
     clocksource/mips-gic-timer.c:183:4: warning: 'return' with a value, in function returning void [enabled by default]
     clocksource/mips-gic-timer.c:190:3: warning: 'return' with a value, in function returning void [enabled by default]
     clocksource/mips-gic-timer.c:195:3: warning: 'return' with a value, in function returning void [enabled by default]
     clocksource/mips-gic-timer.c:200:3: warning: 'return' with a value, in function returning void [enabled by default]
     clocksource/mips-gic-timer.c:211:2: warning: 'return' with a value, in function returning void [enabled by default]
     clocksource/mips-gic-timer.c: At top level:
     clocksource/mips-gic-timer.c:213:1: warning: comparison of distinct pointer types lacks a cast [enabled by default]
     clocksource/mips-gic-timer.c: In function 'gic_clocksource_of_init':
     clocksource/mips-gic-timer.c:183:18: warning: ignoring return value of 'PTR_ERR', declared with attribute warn_unused_result [-Wunused-result]
    
    Given that the addition of the return values was intentional, it seems
    that the conversion of the containing function from void to int was
    simply overlooked.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-mips@linux-mips.org
    Fixes: d8152bf85d2c ("clocksource/drivers/mips-gic-timer: Convert init function to return error")
    Link: http://lkml.kernel.org/r/1471429296-9053-3-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 16c8eba0fe01e03317f48868105103a8f5938e85
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Aug 17 12:21:34 2016 +0200

    clocksource/drivers/kona: Fix get_counter() error handling
    
    I could not figure out why, but GCC cannot prove that the
    kona_timer_init() function always initializes its two outputs,
    and we get a warning for the use of the 'lsw' variable later,
    which is obviously correct.
    
      drivers/clocksource/bcm_kona_timer.c: In function 'kona_timer_init':
      drivers/clocksource/bcm_kona_timer.c:119:13: error: 'lsw' may be used uninitialized in this function [-Werror=maybe-uninitialized]
    
    Slightly reordering the loop makes the warning disappear, after
    it becomes more obvious to the compiler that the loop is
    always entered on the first iteration.
    
    As pointed out by Ray Jui, there is a related problem in the
    way we deal with the loop running into the limit, as we just
    keep going there with an invalid counter data, so instead we
    now propagate a -ETIMEDOUT result to the caller.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Ray Jui <ray.jui@broadcom.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: bcm-kernel-feedback-list@broadcom.com
    Link: http://lkml.kernel.org/r/1471429296-9053-2-git-send-email-daniel.lezcano@linaro.org
    Link: https://patchwork.kernel.org/patch/9174261/
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 0e62fd836e4c2908cc1e32c68806529b4f859955
Author: Gregory CLEMENT <gregory.clement@bootlin.com>
Date:   Wed Aug 17 12:21:33 2016 +0200

    clocksource/drivers/time-armada-370-xp: Fix the clock reference
    
    While converting the init function to return an error, the wrong clock
    was get. This leads to the wrong clock rate and slows down the kernel.
    For example, it affects typical boot time:
    
     - without fix: over 1 minute
     - with    fix: 15 seconds
    
    Tested-by: Stefan Roese <sr@denx.de>
    Tested-by: Ralph Sennhauser <ralph.sennhauser@gmail.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 12549e27c63c ("clocksource/drivers/time-armada-370-xp: Convert init function to return error")
    Link: http://lkml.kernel.org/r/1471429296-9053-1-git-send-email-daniel.lezcano@linaro.org
    [ Refined the changelog. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit cabdc5c59ab46a1ec5ea98c5ac4022111fbfd63a
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Tue Aug 16 15:03:02 2016 +0100

    KVM: arm/arm64: timer: Workaround misconfigured timer interrupt
    
    Similarily to f005bd7e3b84 ("clocksource/arm_arch_timer: Force
    per-CPU interrupt to be level-triggered"), make sure we can
    survive an interrupt that has been misconfigured as edge-triggered
    by forcing it to be level-triggered (active low is assumed, but
    the GIC doesn't really care whether this is high or low).
    
    Hopefully, the amount of shouting in the kernel log will convince
    the user to do something about their firmware.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>

commit 3bc6d8c155fbbbe789b6caa44b9e658a5b2995d3
Merge: e6e7214fbbda 22cc1ca3c546
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 12 13:55:06 2016 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Ingo Molnar:
     "Misc fixes: a /dev/rtc regression fix, two APIC timer period
      calibration fixes, an ARM clocksource driver fix and a NOHZ
      power use regression fix"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/hpet: Fix /dev/rtc breakage caused by RTC cleanup
      x86/timers/apic: Inform TSC deadline clockevent device about recalibration
      x86/timers/apic: Fix imprecise timer interrupts by eliminating TSC clockevents frequency roundoff error
      timers: Fix get_next_timer_interrupt() computation
      clocksource/arm_arch_timer: Force per-CPU interrupt to be level-triggered

commit 6731b0d611a1274f9e785fa0189ac2aeeabd0591
Author: Nicolai Stange <nicstange@gmail.com>
Date:   Thu Jul 14 17:22:55 2016 +0200

    x86/timers/apic: Inform TSC deadline clockevent device about recalibration
    
    This patch eliminates a source of imprecise APIC timer interrupts,
    which imprecision may result in double interrupts or even late
    interrupts.
    
    The TSC deadline clockevent devices' configuration and registration
    happens before the TSC frequency calibration is refined in
    tsc_refine_calibration_work().
    
    This results in the TSC clocksource and the TSC deadline clockevent
    devices being configured with slightly different frequencies: the former
    gets the refined one and the latter are configured with the inaccurate
    frequency detected earlier by means of the "Fast TSC calibration using PIT".
    
    Within the APIC code, introduce the notifier function
    lapic_update_tsc_freq() which reconfigures all per-CPU TSC deadline
    clockevent devices with the current tsc_khz.
    
    Call it from the TSC code after TSC calibration refinement has happened.
    
    Signed-off-by: Nicolai Stange <nicstange@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Christopher S. Hall <christopher.s.hall@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Hidehiro Kawai <hidehiro.kawai.ez@hitachi.com>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Viresh Kumar <viresh.kumar@linaro.org>
    Link: http://lkml.kernel.org/r/20160714152255.18295-3-nicstange@gmail.com
    [ Pushed #ifdef CONFIG_X86_LOCAL_APIC into header, improved changelog. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit e46f48ad86f4483dfaa5947a7b7dbd4a63b0398a
Author: Olivier Schonken <olivier.schonken@gmail.com>
Date:   Tue Jul 5 10:05:50 2016 +0200

    ARM: dts: at91: sama5d2: add ETM and ETB nodes
    
    Add node to support SAMA5D2 Embedded Trace Macrocell and Embedded
    Trace Buffer.
    
    This patch depends on coresight-etm3x: Add ARM ETM-A5 peripheral ID
    for proper coresight functionality.
    It also depends on clocksource: timer-atmel-pit: enable mck to not
    stall SAMA5D2 on bootup.
    
    Signed-off-by: Olivier Schonken <olivier.schonken@gmail.com>
    Acked-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Acked-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

commit 1630e843e104528ddf0208dfc692c70c9bd05a89
Merge: 194d6ad32e1e e61c10e468a4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Aug 6 09:00:05 2016 -0400

    Merge tag 'sh-for-4.8' of git://git.libc.org/linux-sh
    
    Pull arch/sh updates from Rich Felker:
     "These changes improve device tree support (including builtin DTB), add
      support for the J-Core J2 processor, an open source synthesizable
      reimplementation of the SH-2 ISA, resolve a longstanding sigcontext
      ABI mismatch issue, and fix various bugs including nommu-specific
      issues and minor regressions introduced in 4.6.
    
      The J-Core arch support is included here but to be usable it needs
      drivers that are waiting on approval/inclusion from their subsystem
      maintainers"
    
    * tag 'sh-for-4.8' of git://git.libc.org/linux-sh: (23 commits)
      sh: add device tree source for J2 FPGA on Mimas v2 board
      sh: add defconfig for J-Core J2
      sh: use common clock framework with device tree boards
      sh: system call wire up
      sh: Delete unnecessary checks before the function call "mempool_destroy"
      sh: do not perform IPI-based cache flush except on boards that need it
      sh: add SMP support for J2
      sh: SMP support for SH2 entry.S
      sh: add working futex atomic ops on userspace addresses for smp
      sh: add J2 atomics using the cas.l instruction
      sh: add AT_HWCAP flag for J-Core cas.l instruction
      sh: add support for J-Core J2 processor
      sh: fix build regression with CONFIG_OF && !CONFIG_OF_FLATTREE
      sh: allow clocksource drivers to register sched_clock backends
      sh: make heartbeat driver explicitly non-modular
      sh: make board-secureedge5410 explicitly non-modular
      sh: make mm/asids-debugfs explicitly non-modular
      sh: make time.c explicitly non-modular
      sh: fix futex/robust_list on nommu models
      sh: disable aliased page logic on NOMMU models
      ...

commit 77a87824ed676ca8ff8482e4157d3adb284fd381
Author: Stephen Rothwell <sfr@canb.auug.org.au>
Date:   Thu Jul 7 13:59:06 2016 +1000

    clocksource/drivers/clps_711x: fixup for "ARM: clps711x:
    
     Switch to MULTIPLATFORM"
    
    Missed conflict between commit c86f51737f8d ("ARM: clps711x: Switch to
    MULTIPLATFORM") from the arm-soc tree and commit 250e46aa3bb3
    ("clocksource/drivers/clps_711x: Add the COMPILE_TEST option") from the
    clockevents tree.
    
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 43a0a98aa8da71583f84b84fd72e265c24d4c5f8
Merge: 6911a5281430 f8c6d88b2c87
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 1 18:36:01 2016 -0400

    Merge tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC driver updates from Olof Johansson:
     "Driver updates for ARM SoCs.
    
      A slew of changes this release cycle.  The reset driver tree, that we
      merge through arm-soc for historical reasons, is also sizable this
      time around.
    
      Among the changes:
    
       - clps711x: Treewide changes to compatible strings, merged here for simplicity.
       - Qualcomm: SCM firmware driver cleanups, move to platform driver
       - ux500: Major cleanups, removal of old mach-specific infrastructure.
       - Atmel external bus memory driver
       - Move of brcmstb platform to the rest of bcm
       - PMC driver updates for tegra, various fixes and improvements
       - Samsung platform driver updates to support 64-bit Exynos platforms
       - Reset controller cleanups moving to devm_reset_controller_register() APIs
       - Reset controller driver for Amlogic Meson
       - Reset controller driver for Hisilicon hi6220
       - ARM SCPI power domain support"
    
    * tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (100 commits)
      ARM: ux500: consolidate base platform files
      ARM: ux500: move soc_id driver to drivers/soc
      ARM: ux500: call ux500_setup_id later
      ARM: ux500: consolidate soc_device code in id.c
      ARM: ux500: remove cpu_is_u* helpers
      ARM: ux500: use CLK_OF_DECLARE()
      ARM: ux500: move l2x0 init to .init_irq
      mfd: db8500 stop passing around platform data
      ASoC: ab8500-codec: remove platform data based probe
      ARM: ux500: move ab8500_regulator_plat_data into driver
      ARM: ux500: remove unused regulator data
      soc: raspberrypi-power: add CONFIG_OF dependency
      firmware: scpi: add CONFIG_OF dependency
      video: clps711x-fb: Changing the compatibility string to match with the smallest supported chip
      input: clps711x-keypad: Changing the compatibility string to match with the smallest supported chip
      pwm: clps711x: Changing the compatibility string to match with the smallest supported chip
      serial: clps711x: Changing the compatibility string to match with the smallest supported chip
      irqchip: clps711x: Changing the compatibility string to match with the smallest supported chip
      clocksource: clps711x: Changing the compatibility string to match with the smallest supported chip
      clk: clps711x: Changing the compatibility string to match with the smallest supported chip
      ...

commit f005bd7e3b84a353475a2895e2c7686a66297d87
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Mon Aug 1 10:54:15 2016 +0100

    clocksource/arm_arch_timer: Force per-CPU interrupt to be level-triggered
    
    The ARM architected timer produces level-triggered interrupts (this
    is mandated by the architecture). Unfortunately, a number of
    device-trees get this wrong, and expose an edge-triggered interrupt.
    
    Until now, this wasn't too much an issue, as the programming of the
    trigger would fail (the corresponding PPI cannot be reconfigured),
    and the kernel would be happy with this. But we're about to change
    this, and trust DT a lot if the driver doesn't provide its own
    trigger information. In that context, the timer breaks badly.
    
    While we do need to fix the DTs, there is also some userspace out
    there (kvmtool) that generates the same kind of broken DT on the
    fly, and that will completely break with newer kernels.
    
    As a safety measure, and to keep buggy software alive as well as
    buying us some time to fix DTs all over the place, let's check
    what trigger configuration has been given us by the firmware.
    If this is not a level configuration, then we know that the
    DT/ACPI configuration is bust, and we pick some defaults which
    won't be worse than the existing setup.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Andrew Lunn <andrew@lunn.ch>
    Cc: Liu Gang <Gang.Liu@nxp.com>
    Cc: Mark Rutland <marc.rutland@arm.com>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: Wenbin Song <Wenbin.Song@freescale.com>
    Cc: Mingkai Hu <Mingkai.Hu@freescale.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: Kevin Hilman <khilman@baylibre.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Jon Hunter <jonathanh@nvidia.com>
    Cc: arm@kernel.org
    Cc: bcm-kernel-feedback-list@broadcom.com
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Ray Jui <rjui@broadcom.com>
    Cc: "Hou Zhiqiang" <B48286@freescale.com>
    Cc: Tirumalesh Chalamarla <tchalamarla@cavium.com>
    Cc: linux-samsung-soc@vger.kernel.org
    Cc: Yuan Yao <yao.yuan@nxp.com>
    Cc: Jan Glauber <jglauber@cavium.com>
    Cc: Gregory Clement <gregory.clement@free-electrons.com>
    Cc: linux-amlogic@lists.infradead.org
    Cc: soren.brinkmann@xilinx.com
    Cc: Rajesh Bhagat <rajesh.bhagat@freescale.com>
    Cc: Scott Branden <sbranden@broadcom.com>
    Cc: Duc Dang <dhdang@apm.com>
    Cc: Kukjin Kim <kgene@kernel.org>
    Cc: Carlo Caione <carlo@caione.org>
    Cc: Dinh Nguyen <dinguyen@opensource.altera.com>
    Link: http://lkml.kernel.org/r/1470045256-9032-2-git-send-email-marc.zyngier@arm.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit b46ed37042fa21ce3e888310462902044df98321
Author: Rich Felker <dalias@libc.org>
Date:   Thu May 26 22:18:52 2016 +0000

    sh: allow clocksource drivers to register sched_clock backends
    
    There is no arch-specific sched_clock implementation for sh, resulting
    in use of the old default jiffies-based implementation. Instead, use
    the modern generic sched_clock framework so that drivers can register
    better backends.
    
    Signed-off-by: Rich Felker <dalias@libc.org>

commit a6408f6cb63ac0958fee7dbce7861ffb540d8a49
Merge: 1a81a8f2a591 4fae16dffb81
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 29 13:55:30 2016 -0700

    Merge branch 'smp-hotplug-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull smp hotplug updates from Thomas Gleixner:
     "This is the next part of the hotplug rework.
    
       - Convert all notifiers with a priority assigned
    
       - Convert all CPU_STARTING/DYING notifiers
    
         The final removal of the STARTING/DYING infrastructure will happen
         when the merge window closes.
    
      Another 700 hundred line of unpenetrable maze gone :)"
    
    * 'smp-hotplug-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (70 commits)
      timers/core: Correct callback order during CPU hot plug
      leds/trigger/cpu: Move from CPU_STARTING to ONLINE level
      powerpc/numa: Convert to hotplug state machine
      arm/perf: Fix hotplug state machine conversion
      irqchip/armada: Avoid unused function warnings
      ARC/time: Convert to hotplug state machine
      clocksource/atlas7: Convert to hotplug state machine
      clocksource/armada-370-xp: Convert to hotplug state machine
      clocksource/exynos_mct: Convert to hotplug state machine
      clocksource/arm_global_timer: Convert to hotplug state machine
      rcu: Convert rcutree to hotplug state machine
      KVM/arm/arm64/vgic-new: Convert to hotplug state machine
      smp/cfd: Convert core to hotplug state machine
      x86/x2apic: Convert to CPU hotplug state machine
      profile: Convert to hotplug state machine
      timers/core: Convert to hotplug state machine
      hrtimer: Convert to hotplug state machine
      x86/tboot: Convert to hotplug state machine
      arm64/armv8 deprecated: Convert to hotplug state machine
      hwtracing/coresight-etm4x: Convert to hotplug state machine
      ...

commit 55392c4c06204c8149dc333309cf474691f1cc3c
Merge: c410614c9025 1f3b0f8243cb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 25 20:43:12 2016 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "This update provides the following changes:
    
       - The rework of the timer wheel which addresses the shortcomings of
         the current wheel (cascading, slow search for next expiring timer,
         etc).  That's the first major change of the wheel in almost 20
         years since Finn implemted it.
    
       - A large overhaul of the clocksource drivers init functions to
         consolidate the Device Tree initialization
    
       - Some more Y2038 updates
    
       - A capability fix for timerfd
    
       - Yet another clock chip driver
    
       - The usual pile of updates, comment improvements all over the place"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (130 commits)
      tick/nohz: Optimize nohz idle enter
      clockevents: Make clockevents_subsys static
      clocksource/drivers/time-armada-370-xp: Fix return value check
      timers: Implement optimization for same expiry time in mod_timer()
      timers: Split out index calculation
      timers: Only wake softirq if necessary
      timers: Forward the wheel clock whenever possible
      timers/nohz: Remove pointless tick_nohz_kick_tick() function
      timers: Optimize collect_expired_timers() for NOHZ
      timers: Move __run_timers() function
      timers: Remove set_timer_slack() leftovers
      timers: Switch to a non-cascading wheel
      timers: Reduce the CPU index space to 256k
      timers: Give a few structs and members proper names
      hlist: Add hlist_is_singular_node() helper
      signals: Use hrtimer for sigtimedwait()
      timers: Remove the deprecated mod_timer_pinned() API
      timers, net/ipv4/inet: Initialize connection request timers as pinned
      timers, drivers/tty/mips_ejtag: Initialize the poll timer as pinned
      timers, drivers/tty/metag_da: Initialize the poll timer as pinned
      ...

commit 3ef06653987d4c4536b408321edf0e5caa2a317f
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Jul 21 14:27:51 2016 +0800

    MIPS: hpet: Increase HPET_MIN_PROG_DELTA and decrease HPET_MIN_CYCLES
    
    At first, we prefer to use mips clockevent device, so we decrease the
    rating of hpet clockevent device.
    
    For hpet, if HPET_MIN_PROG_DELTA (minimum delta of hpet programming) is
    too small and HPET_MIN_CYCLES (threshold of -ETIME checking) is too
    large, then hpet_next_event() can easily return -ETIME. After commit
    c6eb3f70d44828 ("hrtimer: Get rid of hrtimer softirq") this will cause
    a RCU stall.
    
    So, HPET_MIN_PROG_DELTA must be sufficient that we don't re-trip the
    -ETIME check -- if we do, we will return -ETIME, forward the next event
    time, try to set it, return -ETIME again, and basically lock the system
    up. Meanwhile, HPET_MIN_CYCLES doesn't need to be too large, 16 cycles
    is enough.
    
    This solution is similar to commit f9eccf24615672 ("clocksource/drivers
    /vt8500: Increase the minimum delta").
    
    By the way, this patch ensures hpet count/compare to be 32-bit long.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Steven J . Hill <Steven.Hill@imgtec.com>
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Cc: linux-mips@linux-mips.org
    Cc: stable@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/13819/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit eb0a9d8c672dc01db41352afa646405d035ee7a4
Author: Richard Cochran <rcochran@linutronix.de>
Date:   Wed Jul 13 17:17:07 2016 +0000

    clocksource/atlas7: Convert to hotplug state machine
    
    Install the callbacks via the state machine and let the core invoke
    the callbacks on the already online CPUs.
    
    Signed-off-by: Richard Cochran <rcochran@linutronix.de>
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Barry Song <baohua@kernel.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: rt@linutronix.de
    Link: http://lkml.kernel.org/r/20160713153338.310333816@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 2c48fef74ca42d05c3efd4345b8a068ebf479a5f
Author: Richard Cochran <rcochran@linutronix.de>
Date:   Wed Jul 13 17:17:06 2016 +0000

    clocksource/armada-370-xp: Convert to hotplug state machine
    
    Install the callbacks via the state machine and let the core invoke
    the callbacks on the already online CPUs.
    
    Signed-off-by: Richard Cochran <rcochran@linutronix.de>
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: rt@linutronix.de
    Link: http://lkml.kernel.org/r/20160713153338.229913786@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit d11b3a60fcc8c6e44dd370f1cf2738eb5bec7353
Author: Richard Cochran <rcochran@linutronix.de>
Date:   Wed Jul 13 17:17:05 2016 +0000

    clocksource/exynos_mct: Convert to hotplug state machine
    
    Install the callbacks via the state machine and let the core invoke
    the callbacks on the already online CPUs.
    
    Signed-off-by: Richard Cochran <rcochran@linutronix.de>
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Cc: Kukjin Kim <kgene@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-samsung-soc@vger.kernel.org
    Cc: rt@linutronix.de
    Link: http://lkml.kernel.org/r/20160713153338.147940411@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit b8a12296ac812f829bd9392346b01b1872d8118b
Author: Richard Cochran <rcochran@linutronix.de>
Date:   Wed Jul 13 17:17:04 2016 +0000

    clocksource/arm_global_timer: Convert to hotplug state machine
    
    Install the callbacks via the state machine and let the core invoke
    the callbacks on the already online CPUs.
    
    Signed-off-by: Richard Cochran <rcochran@linutronix.de>
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maxime Coquelin <maxime.coquelin@st.com>
    Cc: Patrice Chotard <patrice.chotard@st.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Srinivas Kandagatla <srinivas.kandagatla@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: kernel@stlinux.com
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: rt@linutronix.de
    Link: http://lkml.kernel.org/r/20160713153338.062741642@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 2dab90932fd08f101a45acc0495ccd77b869da5d
Author: Richard Cochran <rcochran@linutronix.de>
Date:   Wed Jul 13 17:16:44 2016 +0000

    clocksource/mips-gic: Convert to hotplug state machine
    
    Install the callbacks via the state machine and let the core invoke
    the callbacks on the already online CPUs.
    
    Signed-off-by: Richard Cochran <rcochran@linutronix.de>
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: rt@linutronix.de
    Link: http://lkml.kernel.org/r/20160713153336.380737946@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit b04041655d0cf84b77802cb0b4517e672df04f01
Author: Richard Cochran <rcochran@linutronix.de>
Date:   Wed Jul 13 17:16:43 2016 +0000

    clocksource/qcom-timer: Convert to hotplug state machine
    
    Install the callbacks via the state machine and let the core invoke
    the callbacks on the already online CPUs.
    
    Signed-off-by: Richard Cochran <rcochran@linutronix.de>
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: rt@linutronix.de
    Link: http://lkml.kernel.org/r/20160713153336.295486558@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 31e8e5db8849e4c7084dd5bce7b7d96d2fb14b8b
Author: Richard Cochran <rcochran@linutronix.de>
Date:   Wed Jul 13 17:16:42 2016 +0000

    clocksource/metag: Convert to hotplug state machine
    
    Install the callbacks via the state machine and let the core invoke
    the callbacks on the already online CPUs.
    
    Signed-off-by: Richard Cochran <rcochran@linutronix.de>
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-metag@vger.kernel.org
    Cc: rt@linutronix.de
    Link: http://lkml.kernel.org/r/20160713153336.215137642@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 00c1d17aab513d3b8117fb84644eba39434b33e4
Author: Richard Cochran <rcochran@linutronix.de>
Date:   Wed Jul 13 17:16:41 2016 +0000

    clocksource/dummy_timer: Convert to hotplug state machine
    
    Install the callbacks via the state machine and let the core invoke
    the callbacks on the already online CPUs.
    
    Signed-off-by: Richard Cochran <rcochran@linutronix.de>
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: rt@linutronix.de
    Link: http://lkml.kernel.org/r/20160713153336.130385842@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 7e86e8bd8dd67649d176e08d8dfb90039f0a1e98
Author: Richard Cochran <rcochran@linutronix.de>
Date:   Wed Jul 13 17:16:39 2016 +0000

    clocksource/arm_arch_timer: Convert to hotplug state machine
    
    Install the callbacks via the state machine and let the core invoke
    the callbacks on the already online CPUs.
    
    Signed-off-by: Richard Cochran <rcochran@linutronix.de>
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: rt@linutronix.de
    Link: http://lkml.kernel.org/r/20160713153336.048259040@linutronix.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 1d661bf5327a2c059ec967f850e89362e637f4e6
Author: Anna-Maria Gleixner <anna-maria@linutronix.de>
Date:   Tue Jul 12 16:40:09 2016 +0200

    clocksource/drivers/time-armada-370-xp: Fix return value check
    
    The failure check of armada_370_xp_timer_setup() in
    armada_370_xp_timer_common_init() is negated. This leads to an error message
    and exit in case of a successful initialization.  Remove the stray '!'.
    
    Fixes: 12549e27c63c ("clocksource/drivers/time-armada-370-xp: Convert init function to return error")
    Signed-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/alpine.DEB.2.11.1607121731020.1344@hypnos.tec.linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 49eea433b326a0ac5c7c941a011b2c65990bd19b
Author: Kevin Brodsky <kevin.brodsky@arm.com>
Date:   Tue Jul 12 11:24:00 2016 +0100

    arm64: Add support for CLOCK_MONOTONIC_RAW in clock_gettime() vDSO
    
    So far the arm64 clock_gettime() vDSO implementation only supported
    the following clocks, falling back to the syscall for the others:
    - CLOCK_REALTIME{,_COARSE}
    - CLOCK_MONOTONIC{,_COARSE}
    
    This patch adds support for the CLOCK_MONOTONIC_RAW clock, taking
    advantage of the recent refactoring of the vDSO time functions. Like
    the non-_COARSE clocks, this only works when the "arch_sys_counter"
    clocksource is in use (allowing us to read the current time from the
    virtual counter register), otherwise we also have to fall back to the
    syscall.
    
    Most of the data is shared with CLOCK_MONOTONIC, and the algorithm is
    similar. The reference implementation in kernel/time/timekeeping.c
    shows that:
    - CLOCK_MONOTONIC = tk->wall_to_monotonic + tk->xtime_sec +
      timekeeping_get_ns(&tk->tkr_mono)
    - CLOCK_MONOTONIC_RAW = tk->raw_time + timekeeping_get_ns(&tk->tkr_raw)
    - tkr_mono and tkr_raw are identical (in particular, same
      clocksource), except these members:
      * mult (only mono's multiplier is NTP-adjusted)
      * xtime_nsec (always 0 for raw)
    
    Therefore, tk->raw_time and tkr_raw->mult are now also stored in the
    vDSO data page.
    
    Cc: Ali Saidi <ali.saidi@arm.com>
    Signed-off-by: Kevin Brodsky <kevin.brodsky@arm.com>
    Reviewed-by: Dave Martin <dave.martin@arm.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

commit 3d93f42d449ace8e2dd8e2ec9790fdce31a14c9c
Merge: 4b4b20852d10 34c720a91585
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 7 15:41:13 2016 +0200

    Merge branch 'clockevents/4.8' of http://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull the clockevents/clocksource tree from Daniel Lezcano:
    
      - Convert the clocksource-probe init functions to return a value in order to
        prepare the consolidation of the drivers using the DT. It is a big patchset
        but went through 01.org (kbuild bot), linux next and kernel-ci (continuous
        integration) (Daniel Lezcano)
    
      - Fix a bad error handling by returning the right value for cadence_ttc
        (Christophe Jaillet)
    
      - Fix typo in the Kconfig for the Samsung pwm (Alexandre Belloni)
    
      - Change functions to static for armada-370-xp and digicolor (Ben Dooks)
    
      - Add support for the rk3399 SoC timer by adding bindings and a slight
        change in the base address. Take the opportunity to add the DYNIRQ flag
        (Huang Tao)
    
      - Fix endian accessors for the Samsung pwm timer (Matthew Leach)
    
      - Add Oxford Semiconductor RPS Dual Timer driver (Neil Armstrong)
    
      - Add a kernel parameter to swich on/off the event stream feature of the arch
        arm timer (Will Deacon)

commit 34c720a915857f168b98ab03f97b33784286e4ad
Author: Christophe Jaillet <christophe.jaillet@wanadoo.fr>
Date:   Wed Jul 6 07:35:23 2016 +0200

    clocksource/drivers/cadence_ttc: fix a return value in case of error
    
    IS_ERR and PTR_ERR should use the same variable, clk_ce in this case.
    
    Fixes: 4de1eb07c47f (Convert init function to return error)
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Sören Brinkmann <soren.brinkmann@xilinx.com>

commit d64c01058cf769824f71787058aa5211afa81e0d
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Sat Jun 4 10:09:55 2016 +0300

    clocksource: clps711x: Changing the compatibility string to match with the smallest supported chip
    
    This patch changes the compatibility string to match with the smallest
    supported chip (EP7209). Since the DT-support for this CPU is not yet
    announced, this change is safe.
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 46fd5c6b3059462131caa4d52691c9c5666c3223
Author: Will Deacon <will.deacon@arm.com>
Date:   Mon Jun 27 17:30:13 2016 +0100

    clocksource/drivers/arm_arch_timer: Control the evtstrm via the cmdline
    
    Disabling the eventstream can be useful for both remotely debugging a
    deployed production system and development of code using WFE-based
    polling loops. Whilst this can currently be controlled via a Kconfig
    option (CONFIG_ARM_ARCH_TIMER_EVTSTREAM), it's often desirable to toggle
    the feature on the command line, so this patch adds a new command-line
    option ("clocksource.arm_arch_timer.evtstrm") to do just that. The
    default behaviour is determined based on CONFIG_ARM_ARCH_TIMER_EVTSTREAM.
    
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5cc87a4df5009c1cbe9e087ad16c0bacdae06809
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 7 11:05:01 2016 +0200

    clocksource/drivers/versatile: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach,
    allowing the user to compile the driver on different platforms.
    
    The current option let the user to select the clocksource or not.
    
    The Kconfig option policy is to let the platform to select the
    timer automatically.
    
    Add the COMPILE_TEST option, so the prompt to select the driver will
    be showed only when COMPILE_TEST is set and will let this driver
    to compile on different platform, thus increasing the compilation
    test coverage.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b988d3f085f07deca70ba8b90f77a84af8a334a3
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 19:08:39 2016 +0200

    clocksource/drivers/timer-atmel-st: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach,
    allowing the user to compile the driver on different platforms.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 67a87a43b9117029446bea6397675bc6f7725a5a
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 14:34:28 2016 +0200

    clocksource/drivers/arm_global_timer: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach,
    allowing the user to compile the driver on different platforms.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 568c0342e494fa4c05377c6c83c653afa350985a
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 15:11:21 2016 +0200

    clocksource/drivers/integrator-ap: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_INTEGRATOR_AP_TIMER and is selected
    by the platform. Then the clocksource's Kconfig is changed to make this
    option selectable by the user if the COMPILE_TEST option is set. Otherwise,
    it is up to the platform's Kconfig to select the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c12547a00dfd3aaacfd5ce362ee4b9585c320054
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 15:05:05 2016 +0200

    clocksource/drivers/keystone: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_KEYSTONE_TIMER and is selected by the
    platform. Then the clocksource's Kconfig is changed to make this option
    selectable by the user if the COMPILE_TEST option is set. Otherwise, it is
    up to the platform's Kconfig to select the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d683b9dcc8a8d743f7b660ff3b77ccfbe652e4b9
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 15:03:21 2016 +0200

    clocksource/drivers/nspire: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_NSPIRE_TIMER and is selected by the
    platform. Then the clocksource's Kconfig is changed to make this option
    selectable by the user if the COMPILE_TEST option is set. Otherwise, it is
    up to the platform's Kconfig to select the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 85f98db4adbbd3ec6b41537d31241b59bf47c66f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 14:31:16 2016 +0200

    clocksource/drivers/u300: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_U300_TIMER and is selected by the
    platform. Then the clocksource's Kconfig is changed to make this option
    selectable by the user if the COMPILE_TEST option is set. Otherwise, it is
    up to the platform's Kconfig to select the timer.
    
    Due on the delay specific code, this driver will compile only on the ARM
    architecture.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f3550d499576c423db0d902930cf8d848fe09744
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 14:28:38 2016 +0200

    clocksource/drivers/prima2: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_PRIMA2_TIMER and is selected by the
    platform. Then the clocksource's Kconfig is changed to make this option
    selectable by the user if the COMPILE_TEST option is set. Otherwise, it is
    up to the platform's Kconfig to select the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4929409b202ac3dbfb657b0e3edeffaab2856c2b
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 13:43:58 2016 +0200

    clocksource/drivers/prima2: Remove useless header <asm/mach/time.h>
    
    The driver includes the <asm/mach/time.h> header but it is pointless.
    
    Remove it.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d81c50a0360f8a186150b9bb572d5e0514c25ce9
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 13:36:18 2016 +0200

    clocksource/drivers/mxs: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_MXS_TIMER and is selected by the
    platform. Then the clocksource's Kconfig is changed to make this option
    selectable by the user if the COMPILE_TEST option is set. Otherwise, it is
    up to the platform's Kconfig to select the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6e525044c716aedf92f41893f00417d557a872d2
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 13:35:33 2016 +0200

    clocksource/drivers/mxs: Remove useless header <asm/mach/time.h>
    
    The driver includes the <asm/mach/time.h> header but it is pointless.
    
    Remove it.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 419be9e36cf2349f15d0b7280ba46be6f9da7a61
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 13:29:03 2016 +0200

    clocksource/drivers/moxart: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_MOXART_TIMER and is selected by the
    platform. Then the clocksource's Kconfig is changed to make this option
    selectable by the user if the COMPILE_TEST option is set. Otherwise, it is
    up to the platform's Kconfig to select the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b56d5d218499404b2abfd6f33a6d480312bf8a92
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 13:11:39 2016 +0200

    clocksource/drivers/atlas7: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_ATLAS7_TIMER and is selected by the
    platform. Then the clocksource's Kconfig is changed to make this option
    selectable by the user if the COMPILE_TEST option is set. Otherwise, it is
    up to the platform's Kconfig to select the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ecf0efdc98cd46886fa119492f052ab3eaba9ddf
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 20:06:54 2016 +0200

    clocksource/drivers/clps_711x: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_CLPS711X_TIMER and is selected by the
    platform. Then the clocksource's Kconfig is changed to make this option
    selectable by the user if the COMPILE_TEST option is set. Otherwise, it is
    up to the platform's Kconfig to select the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 1cad71e35f88bd41b954e9984c7d2a8ce3924db0
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 19:20:36 2016 +0200

    clocksource/drivers/bcm_kona: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_BCM_KONA_TIMER and is selected by the
    platform. Then the clocksource's Kconfig is changed to make this option
    selectable by the user if the COMPILE_TEST option is set. Otherwise, it is
    up to the platform's Kconfig to select the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e2146d8650764638784205cf51378f01bbd098b6
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 18:41:52 2016 +0200

    clocksource/drivers/armv7m_systick: Add the COMPILE_TEST option
    
    In order to increase the compilation test coverage, add the COMPILE_TEST
    so the driver can be compiled even if it does not belong to the platform
    or the architecture.
    
    The io.h header inclusion is also added as it the driver does not compile
    on UM platform.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2ea879a7cf544e05c7cd0bfd569857ec2a8a75a9
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 18:35:38 2016 +0200

    clocksource/drivers/bcm2835: Add the COMPILE_TEST option
    
    Change the Kconfig option logic to fullfil with the current approach.
    
    A new Kconfig option is added, CONFIG_BCM2835_TIMER and is selected by the
    platform. Then the clocksource's Kconfig is changed to make this option
    selectable by the user if the COMPILE_TEST option is set. Otherwise, it
    is up to the platform's Kconfig to select the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 40e878aaa5d4afd0d2f018b1034b46322c420330
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 22:59:34 2016 +0200

    clocksource/drivers/bcm_kona: Remove useless header <asm/mach/time.h>
    
    The driver includes the <asm/mach/time.h> header but it is pointless.
    
    Remove it.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 177cf6e52b0a1a382b9892d3cc9aafd6e7c5943f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 7 00:27:44 2016 +0200

    clocksources: Switch back to the clksrc table
    
    All the clocksource drivers's init function are now converted to return
    an error code. CLOCKSOURCE_OF_DECLARE is no longer used as well as the
    clksrc-of table.
    
    Let's convert back the names:
     - CLOCKSOURCE_OF_DECLARE_RET => CLOCKSOURCE_OF_DECLARE
     - clksrc-of-ret              => clksrc-of
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    
    For exynos_mct and samsung_pwm_timer:
    Acked-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    
    For arch/arc:
    Acked-by: Vineet Gupta <vgupta@synopsys.com>
    
    For mediatek driver:
    Acked-by: Matthias Brugger <matthias.bgg@gmail.com>
    
    For the Rockchip-part
    Acked-by: Heiko Stuebner <heiko@sntech.de>
    
    For STi :
    Acked-by: Patrice Chotard <patrice.chotard@st.com>
    
    For the mps2-timer.c and versatile.c changes:
    Acked-by: Liviu Dudau <Liviu.Dudau@arm.com>
    
    For the OXNAS part :
    Acked-by: Neil Armstrong <narmstrong@baylibre.com>
    
    For LPC32xx driver:
    Acked-by: Sylvain Lemieux <slemieux.tyco@gmail.com>
    
    For Broadcom Kona timer change:
    Acked-by: Ray Jui <ray.jui@broadcom.com>
    
    For Sun4i and Sun5i:
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    
    For Meson6:
    Acked-by: Carlo Caione <carlo@caione.org>
    
    For Keystone:
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    
    For NPS:
    Acked-by: Noam Camus <noamca@mellanox.com>
    
    For bcm2835:
    Acked-by: Eric Anholt <eric@anholt.net>

commit 8595b1ba14f763da8c406c8a243510fa13097214
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 16 18:10:58 2016 +0200

    clocksource/drivers/oxnas-rps: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Neil Armstrong <narmstrong@baylibre.com>

commit 43d7560494a264a34e8bb5257ef43b0be6134dac
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Wed Jun 15 14:50:12 2016 +0200

    clocksource/drivers/arc: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2d9b65061652dcde5200998f3cebe5e736e5d9b3
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Wed Jun 15 14:16:11 2016 +0200

    clocksource/drivers/nps: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit dcbc0eddcbbf441fdcf0eb4c2e9c1716ac235972
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 7 00:03:11 2016 +0200

    clocksource/drivers/smp_twd: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit dd1364a7439be4d20f87637a72eb7bd4553827f0
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 7 00:04:02 2016 +0200

    clocksource/drivers/nios2: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2712616fed84ddf60c788269d39bb26eb6779945
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 7 00:03:49 2016 +0200

    clocksource/drivers/ralink: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0586421746ef2bc33898d2d7f3dbb0eec6b234c3
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 7 00:03:34 2016 +0200

    clocksource/drivers/microblaze: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 42452508bd7a6527221fff84f3da2b0197b726ae
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:30:17 2016 +0200

    clocksource/drivers/zevio: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 979d7f28ff9914cb02d12c40a2e0fb9b0718e52b
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:30:04 2016 +0200

    clocksource/drivers/vt8500: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b71306e62d6a42a00bf8ebb6b77bbd42dec75e6e
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:29:49 2016 +0200

    clocksource/drivers/vf_pit_timer: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 86de9628230956aa976fe50f407a25bd268d8a68
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:29:30 2016 +0200

    clocksource/drivers/versatile: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Liviu Dudau <Liviu.Dudau@arm.com>

commit 1ee078facfd4f26f516becd4c73a7e6a2e520965
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:29:18 2016 +0200

    clocksource/drivers/u300: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>

commit 0a8e7d49d59ce3910dd341d0d3df419f8defc9fe
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:29:03 2016 +0200

    clocksource/drivers/ti-32k: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e4d9f2ee4ef53d4637308921602e5406d5540e0d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:28:36 2016 +0200

    clocksource/drivers/sun5i: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 38d94c5ae2dc60d6b54127695df9447e86a7d402
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:28:17 2016 +0200

    clocksource/drivers/stm32: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Coquelin <mcoquelin.stm32@gmail.com>

commit 2ef2538bc613af45baf9f2a032c9a8259c4c6672
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:28:01 2016 +0200

    clocksource/drivers/sp804: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 53186505802c8845d5af4ed40ddb84e221acb92f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:27:44 2016 +0200

    clocksource/drivers/keystone: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>

commit 76804d052316d3562c58934200c932243f312c07
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:27:24 2016 +0200

    clocksource/drivers/integrator-ap: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c11cd416aea9e4f71b58def49e860ba8609a1892
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:27:05 2016 +0200

    clocksource/drivers/imx-gpt: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit de23484dd50829fb2f2fffbe2a97cfe5d50aa8b7
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 23:02:59 2016 +0200

    clocksource/drivers/prima2: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit adbaf5254152f322b873d0a9cd0f150dd30c64aa
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 19:11:12 2016 +0200

    clocksource/drivers/atmel-st: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 504f34c9e45cf81731734ea1c80429a5116b23ca
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 19:10:55 2016 +0200

    clocksource/drivers/atmel-pit: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c41c96ddac8eec158f488be2e122dcfc40fd1823
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 18:01:09 2016 +0200

    clocksource/drivers/atlas7: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 41505a208f5d48671fcc9efe67a71cc8e28df653
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 18:00:51 2016 +0200

    clocksource/drivers/pistachio: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fbe4b3566ddcde4b0708330651cbd982e555f4eb
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 18:00:38 2016 +0200

    clocksource/drivers/orion: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4e2afeb9e653d4201039f06c02a37312bc38c3b8
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 18:00:27 2016 +0200

    clocksource/drivers/time-lpc32xx: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Sylvain Lemieux <slemieux.tyco@gmail.com>

commit dc5011131b8c78d1f5040bf0f79b7c38b4211fe6
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 18:00:14 2016 +0200

    clocksource/drivers/time-efm32: Convert init function to return error
    
    The init functions do not return any error and let the caller unaware of
    the state of the system.
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>

commit 12549e27c63c61d76bb059bfafce0a4ee05c7e90
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 18:00:01 2016 +0200

    clocksource/drivers/time-armada-370-xp: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 53978bba61853a85dfddc1980178d488e2efe2eb
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:59:43 2016 +0200

    clocksource/drivers/tegra20: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
        make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0683d5035ca92c5646aaea00b493c946bff656d2
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:59:24 2016 +0200

    clocksource/drivers/tango_xtal: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and leave the caller unaware of the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just returns an error code from the init function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Marc Gonzalez <marc_gonzalez@sigmadesigns.com>

commit ce5dc743f6669467c162f480e3c7bf61ec5aaf61
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:59:09 2016 +0200

    clocksource/drivers/sun4i: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0993f57b020cd6936aa51e675a2eb59e7c063a84
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:58:56 2016 +0200

    clocksource/drivers/samsung_pwm: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ab51189ca48520debe92ed7738a49c185b0f57d5
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:58:43 2016 +0200

    clocksource/drivers/qcom: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit be3aff842d646f64c1c82e3ee8a0ba14c0319a30
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:58:27 2016 +0200

    clocksource/drivers/pxa: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e46105aff5e53b27844541ebe0de5089268c6692
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:58:15 2016 +0200

    clocksource/drivers/nomadik-mtu: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e1d2b9f024c519788c044ee6a5f694d69973791e
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:58:03 2016 +0200

    clocksource/drivers/mxs: Convert init function to return error
    
    The init function does not return any error, it prints a message, returns and
    lets the caller unaware if the state of the system.
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0cc7afc6e0ccd593f4ce86feb83ac45cd6bd9440
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:57:50 2016 +0200

    clocksource/drivers/mps2-timer: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Liviu Dudau <Liviu.Dudau@arm.com>

commit b7357e656ca45dd57ef02f2a1be513af2b80579c
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:57:38 2016 +0200

    clocksource/drivers/moxart: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d8152bf85d2c057fc39c3e20a4d623f524d9f09c
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:57:25 2016 +0200

    clocksource/drivers/mips-gic-timer: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ca46acb981072f084d63d2a94430a5c3190aa32a
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:57:07 2016 +0200

    clocksource/drivers/meson6_timer.c: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f2f9900caa1fbfe55484375818427093d1406c1e
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:56:52 2016 +0200

    clocksource/drivers/h8300_tpu: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 691f8f878290f7a94b94fe238e28263982eb52ca
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:56:37 2016 +0200

    clocksource/drivers/h8300_timer8: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit eacf209168f7f16cd6adbbe1524b8c2bec85ae46
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:56:21 2016 +0200

    clocksource/drivers/h8300_timer16: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5a54c1873f29411c769f8ebb044980ba0397eb1d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:56:04 2016 +0200

    clocksource/drivers/arm_global_timer: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Coquelin <maxime.coquelin@st.com>

commit 3c0731db1540ef3cd08fc76c66f6e9d9865b96d2
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Jun 6 17:55:40 2016 +0200

    clocksource/drivers/arm_arch_timer: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 17c8669d8084bdb69ee56566956c59447763364e
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jun 3 15:45:27 2016 +0200

    clocksource/drivers/fsl_ftm_timer: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 108a4ed965b601986d054c0f0cf6f964959e0017
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 19:44:34 2016 +0200

    clocksource/drivers/clksrc-dbx500: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>

commit 595197743ee63e4ea0e20cccaf455bf5fd3fd1c9
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 19:44:04 2016 +0200

    clocksource/drivers/bcm_kona: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Ray Jui <ray.jui@broadcom.com>

commit 524a7f08983daa756ad355a302fb67bd90713dd0
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 18:46:11 2016 +0200

    clocksource/drivers/bcm2835_timer: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
     - panic, thus leading to a kernel crash while another timer may work and
       make the system boot up correctly
    
     or
    
     - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Eric Anholt <eric@anholt.net>

commit 802fa498dbd27d5dea57e624606c8f8ec47d1915
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 18:43:42 2016 +0200

    clocksource/drivers/armv7m_systick: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
     - panic, thus leading to a kernel crash while another timer may work and
       make the system boot up correctly
    
     or
    
     - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Coquelin <maxime.coquelin@st.com>

commit c77b9d44aceed7b85c9951a12df7c2ad865fba02
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 20:20:01 2016 +0200

    clocksource/drivers/digicolor: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Baruch Siach <baruch@tkos.co.il>

commit 04410efbb6bc0d0e4de634b02155d1070b102adf
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Jun 2 20:07:35 2016 +0200

    clocksource/drivers/clps711x: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
      - panic, thus leading to a kernel crash while another timer may work and
           make the system boot up correctly
    
      or
    
      - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2e1773f8caef47037486814989e689ff9eacc155
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Wed Jun 1 08:55:46 2016 +0200

    clocksource/drivers/dw_apb_timer: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
     - panic, thus leading to a kernel crash while another timer may work and
       make the system boot up correctly
    
     or
    
     - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 84309e0abdd76517b7b0d72e2f8373194fcffeb2
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Wed Jun 1 00:34:25 2016 +0200

    clocksource/drivers/st_lpc: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
     - panic, thus leading to a kernel crash while another timer may work and
       make the system boot up correctly
    
     or
    
     - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Patrice Chotard <patrice.chotard@st.com>
    Acked-by: Maxime Coquelin <maxime.coquelin@st.com>

commit 70504f311d4bd5b6a6d494f50c5ab0bd30fdf75c
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue May 31 19:52:09 2016 +0200

    clocksource/drivers/cadence_ttc: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
     - panic, thus leading to a kernel crash while another timer may work and
       make the system boot up correctly
    
     or
    
     - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Sören Brinkmann <soren.brinkmann@xilinx.com>

commit be5eb33d5d1bd076d98564ba2fea7a4ed36ca24f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue May 31 19:38:30 2016 +0200

    clocksource/drivers/asm9260: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
     - panic, thus leading to a kernel crash while another timer may work and
       make the system boot up correctly
    
     or
    
     - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5e558ebd3d88d3492e0fd3b021d071fad7e2e3d2
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue May 31 19:26:55 2016 +0200

    clocksource/drivers/exynos_mct: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
     - panic, thus leading to a kernel crash while another timer may work and
       make the system boot up correctly
    
     or
    
     - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>

commit d64e24ce5fdddd7efc31486f187159be986f6c29
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue May 31 17:43:47 2016 +0200

    clocksource/drivers/mtk_timer: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
     - panic, thus leading to a kernel crash while another timer may work and
       make the system boot up correctly
    
     or
    
     - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Matthias Brugger <matthias.bgg@gmail.com>

commit 8bdd5a2e7c479dcdb632c614b0d9bb1ac6ed5be7
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue May 31 17:28:55 2016 +0200

    clocksource/drivers/rockchip_timer: Convert init function to return error
    
    The init functions do not return any error. They behave as the following:
    
     - panic, thus leading to a kernel crash while another timer may work and
       make the system boot up correctly
    
     or
    
     - print an error and let the caller unaware if the state of the system
    
    Change that by converting the init functions to return an error conforming
    to the CLOCKSOURCE_OF_RET prototype.
    
    Proper error handling (rollback, errno value) will be changed later case
    by case, thus this change just return back an error or success in the init
    function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    
    on a rk3399-evb
    Tested-by: Heiko Stuebner <heiko@sntech.de>

commit b7c4db861683af5fc50ac3cb3751cf847d765211
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue May 31 16:25:59 2016 +0200

    clocksource/drivers/clksrc-probe: Introduce init functions with return code
    
    Currently, the clksrc-probe is not able to handle any error from the init
    functions. There are different issues with the current code:
     - the code is duplicated in the init functions by writing error
     - every driver tends to panic in its own init function
     - counting the number of clocksources is not reliable
    
    This patch adds another table to store the functions returning an error.
    The table is temporary while we convert all the drivers to return an error
    and will disappear.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c35d9292fee0474a1a037f75b0b85af32200c76f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Apr 18 23:06:48 2016 +0200

    of: Add a new macro to declare_of for one parameter function returning a value
    
    The macro OF_DECLARE_1 expect a void (*func)(struct device_node *) while the
    OF_DECLARE_2 expect a int (*func)(struct device_node *, struct device_node *).
    
    The second one allows to pass an init function returning a value, which make
    possible to call the functions in the table and check the return value in order
    to catch at a higher level the errors and handle them from there instead of
    doing a panic in each driver (well at least this is the case for the clkevt).
    
    Unfortunately the OF_DECLARE_1 does not allow that and that lead to some code
    duplication and crappyness in the drivers.
    
    The OF_DECLARE_1 is used by all the clk drivers and the clocksource/clockevent
    drivers. It is not possible to do the change in one shot as we have to change
    all the init functions.
    
    The OF_DECLARE_2 specifies an init function prototype with two parameters with
    the node and its parent. The latter won't be used, ever, in the timer drivers.
    
    Introduce a OF_DECLARE_1_RET macro to be used, and hopefully we can smoothly
    and iteratively change the users of OF_DECLARE_1 to use the new macro instead.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>

commit 43e88c8a73f5896b964183d503d9bf892a551e25
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Wed Jun 15 12:13:27 2016 +0200

    dt-bindings: clocksource: Add Oxford Semiconductor RPS Timer bindings
    
    Add DT bindings for the Oxford Semiconductor RPS dual Timer.
    
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>

commit 89355274e1f7f218186bb15a9f0c4b4a026a84d3
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Wed Jun 15 12:13:26 2016 +0200

    clocksource/drivers/oxnas-rps: Add Oxford Semiconductor RPS Dual Timer
    
    Add clocksource and clockevent driver from dual RPS timer.
    The HW provides a dual one-shot or periodic 24bit timers,
    the drivers set the first one as tick event source and the
    second as a continuous scheduler clock source.
    The timer can use 1, 16 or 256 as pre-dividers, thus the
    clocksource uses 16 by default.
    
    CC: Ma Haijun <mahaijuns@gmail.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit be6af450bb1b74177f14afc6228458f16f92a6c5
Author: Huang, Tao <huangtao@rock-chips.com>
Date:   Thu Jun 16 16:00:08 2016 +0200

    clocksource/drivers/rockchip: Add support for the rk3399 SoC
    
    The only difference between the rk3399 SoC and the other ones is the control
    register offset which is different.
    
    Add a new field to store the control register address depending on the SoC
    and use it instead of the <base> + <control offset>.
    
    Signed-off-by: Huang Tao <huangtao@rock-chips.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Jianqun Xu <jay.xu@rock-chips.com>
    Signed-off-by: Caesar Wang <wxt@rock-chips.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 716897d90f2bb1b732c45ddcc1f2f4651a06a9f6
Author: Huang, Tao <huangtao@rock-chips.com>
Date:   Thu Jun 16 15:57:53 2016 +0200

    clocksource/drivers/rockchip: Add the dynamic irq flag to the timer
    
    The rockchip timer is a broadcast timer. Add the CLOCK_EVT_FEAT_DYNIRQ flag
    and set the cpumask to all possible cpus to save power by avoiding
    unnecessary wakeups and IPIs.
    
    Signed-off-by: Huang Tao <huangtao@rock-chips.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Jianqun Xu <jay.xu@rock-chips.com>
    Signed-off-by: Caesar Wang <wxt@rock-chips.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit de37b0b569cf89ac7e27141c9305509007cba2d6
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Thu Jun 16 15:53:18 2016 +0200

    clocksource/drivers/samsung_pwm: Fix typo in Kconfig
    
    Correct the typo in "driver" word in the option description.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7cc061797be91ca02a95f4d01f0275831c588671
Author: Matthew Leach <matthew@mattleach.net>
Date:   Thu Jun 16 15:51:29 2016 +0200

    clocksource/drivers/samsung_pwm_timer: Fix endian accessors
    
    Fix the Samsung pwm timer access code to deal with kernels built for big
    endian operation.
    
    Signed-off-by: Matthew Leach <matthew@mattleach.net>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>

commit 48419b1bf04d185bd4e8950f938d89be552876d0
Author: Ben Dooks <ben.dooks@codethink.co.uk>
Date:   Thu Jun 16 15:49:23 2016 +0200

    clocksource/drivers/digicolor: Fix warning of non-static function
    
    Change the dc_timer function to be static as it is not used outside
    this driver. This fixes the following warning:
    
    drivers/clocksource/timer-digicolor.c:66:24: warning: symbol 'dc_timer' was not declared. Should it be static?
    
    Signed-off-by: Ben Dooks <ben.dooks@codethink.co.uk>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Baruch Siach <baruch@tkos.co.il>

commit 2c436e46fabd9f34d0127f7ff3e3678ef826b55e
Author: Ben Dooks <ben.dooks@codethink.co.uk>
Date:   Thu Jun 16 15:47:49 2016 +0200

    clocksource/drivers/armada-370-xp: Make syscore_ops static
    
    The driver does not export armada_370_xp_timer_syscore_ops so
    make it static to fix the following warning:
    
    drivers/clocksource/time-armada-370-xp.c:249:20: warning: symbol 'armada_370_xp_timer_syscore_ops' was not declared. Should it be static?
    
    Signed-off-by: Ben Dooks <ben.dooks@codethink.co.uk>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>

commit c7d6b5a22c00a19b513353469d89062264a7235f
Merge: 86721ab63b61 7c71feb0a676
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 21 08:22:51 2016 +0200

    Merge branch 'fortglx/4.8/time' of https://git.linaro.org/people/john.stultz/linux into timers/core
    
    Pull time(keeping) updates from John Stultz:
    
     - Handle the 1ns issue with the old refusing to die vsyscall machinery
     - More y2038 updates
     - Documentation fixes
     - Simplify clocksource handling

commit 0fb71d340d355156818bb53eb36ae79a3f88bda9
Author: Minfei Huang <mnghuan@gmail.com>
Date:   Mon Apr 25 17:20:28 2016 +0800

    clocksource: Make clocksource insert entry more efficient
    
    In clocksource_enqueue(), it is unnecessary to continue looping
    the list, if we find there is an entry that the value of rating
    is smaller than the new one. It is safe to be out the loop,
    because all of entry are inserted in descending order.
    
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Minfei Huang <mnghuan@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 049a40c0a2d4b458583161ec1b9ce109408cb1aa
Merge: c141afd1a287 8fd0976702f0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jun 18 20:36:17 2016 -1000

    Merge tag 'armsoc-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC fixes from Olof Johansson:
     "Another batch of fixes for ARM SoC platforms.  Most are smaller fixes.
    
      Two areas that are worth pointing out are:
    
       - OMAP had a handful of changes to voltage specs that caused a bit of
         churn, most of volume of change in this branch is due to this.
    
       - There are a couple of _rcuidle fixes from Paul that touch common
         code and came in through the OMAP tree since they were the ones who
         saw the problems.
    
     The rest is smaller changes across a handful of platforms"
    
    * tag 'armsoc-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (36 commits)
      ARM: dts: STi: stih407-family: Disable reserved-memory co-processor nodes
      ARM: dts: am437x-sk-evm: Reduce i2c0 bus speed for tps65218
      ARM: OMAP2+: timer: add probe for clocksources
      ARM: OMAP1: fix ams-delta FIQ handler to work with sparse IRQ
      memory: omap-gpmc: Fix omap gpmc EXTRADELAY timing
      arm: Use _rcuidle for smp_cross_call() tracepoints
      MAINTAINERS: Add myself as reviewer of ARM FSL/NXP
      ARM: OMAP: DRA7: powerdomain data: Remove unused pwrsts_mem_ret
      ARM: OMAP: DRA7: powerdomain data: Remove unused pwrsts_logic_ret
      ARM: OMAP: DRA7: powerdomain data: Set L3init and L4per to ON
      ARM: imx6ul: Fix Micrel PHY mask
      ARM: OMAP2+: Select OMAP_INTERCONNECT for SOC_AM43XX
      ARM: dts: DRA74x: fix DSS PLL2 addresses
      ARM: OMAP2: Enable Errata 430973 for OMAP3
      ARM: dts: socfpga: Add missing PHY phandle
      ARM: dts: exynos: Fix port nodes names for Exynos5420 Peach Pit board
      ARM: dts: exynos: Fix port nodes names for Exynos5250 Snow board
      ARM: dts: sun6i: yones-toptech-bs1078-v2: Drop constraints on dc1sw regulator
      ARM: dts: sun6i: primo81: Drop constraints on dc1sw regulator
      ARM: dts: sunxi: Add OLinuXino Lime2 eMMC to the Makefile
      ...

commit 9503427e916aea7ec2cc429504f82d7200ab4bcd
Merge: 0e289e534af1 d279f7a7e95a
Author: Olof Johansson <olof@lixom.net>
Date:   Sat Jun 18 22:21:52 2016 -0700

    Merge tag 'fixes-rcu-fiq-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into fixes
    
    Fixes for omaps for v4.7-rc cycle:
    
    - Two boot warning fixes from the RCU tree that should have gotten
      merged several weeks ago already but did not because of issues
      with who merges them. Paul has now split the RCU warning fixes into
      sets for various maintainers.
    
    - Fix ams-delta FIQ regression caused by omap1 sparse IRQ changes
    
    - Fix PM for omap3 boards using timer12 and gptimer, like the
      original beagleboard
    
    - Fix hangs on am437x-sk-evm by lowering the I2C bus speed
    
    * tag 'fixes-rcu-fiq-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: dts: am437x-sk-evm: Reduce i2c0 bus speed for tps65218
      ARM: OMAP2+: timer: add probe for clocksources
      ARM: OMAP1: fix ams-delta FIQ handler to work with sparse IRQ
      arm: Use _rcuidle for smp_cross_call() tracepoints
      arm: Use _rcuidle tracepoint to allow use from idle
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 970f9091d25df14e9540ec7ff48a2f709e284cd1
Author: Tero Kristo <t-kristo@ti.com>
Date:   Thu Jun 16 15:25:18 2016 +0300

    ARM: OMAP2+: timer: add probe for clocksources
    
    A few platforms are currently missing clocksource_probe() completely
    in their time_init functionality. On OMAP3430 for example, this is
    causing cpuidle to be pretty much dead, as the counter32k is not
    going to be registered and instead a gptimer is used as a clocksource.
    This will tick in periodic mode, preventing any deeper idle states.
    
    While here, also drop one unnecessary check for populated DT before
    existing clocksource_probe() call.
    
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit d13e4362dec91304143875d9b8e1348bdfe69e63
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Jun 13 17:39:43 2016 +0200

    ASoC: fix ABE_TWL6040 dependency
    
    The TWL6040 ASoC support has recently started turning on CLK_TWL6040,
    but that fails to build when CONFIG_COMMON_CLK is disabled:
    
    warning: (SND_OMAP_SOC_OMAP_ABE_TWL6040) selects CLK_TWL6040 which has unmet direct dependencies (COMMON_CLK && TWL6040_CORE)
    0xF18E38F6 Thu Jun 9 18:57:32 CEST 2016 failed
    In file included from ../include/linux/clocksource.h:18:0,
                     from ../drivers/clocksource/timer-nps.c:34:
    ../include/linux/of.h:1005:20: error: comparison of distinct pointer types lacks a cast [-Werror]
            .data = (fn == (fn_type)NULL) ? fn : fn  }
                        ^
    
    This adds a dependency to avoid the invalid configuration.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Fixes: 443500a3927a ("ASoC: omap: Kconfig: SND_OMAP_SOC_OMAP_ABE_TWL6040 to select CLK_TWL6040")
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 0efacbbaee1e94e9942da0912f5b46ffd45a74bd
Merge: f4f27d0028aa 776d7f1694a7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 19 09:46:18 2016 -0700

    Merge tag 'arc-4.7-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc
    
    Pull ARC updates from Vineet Gupta:
     "We have a relatively big changeset for ARC for 4.7.
    
      The highlight is support for EZChip (now Mellanox) NPS-400 network
      processor, a 400-Gb throughput C-programmable packet processor based
      on ARC700 cores from Synopsys. See
    
            http://www.mellanox.com/related-docs/prod_npu/PB_NPS-400.pdf
    
      Also present are irqchip and clocksource drivers for NPS as agreed
      with respective maintainers to go via ARC tree due to an soc header
      dependency.  I have the needed ACKs from Jason, Marc, Daniel.  You
      might run into a trivial merge conflict in drivers/irqchip/*
    
      This EZChip platform support required some deep changes in ARC
      architecture code and also opportunity to cleanup past sins (legacy
      irq domains, missing irq domain lookup, hard coded timer irqs...)
    
      Summary:
    
       - Support for EZChip (now Mellanox) NPS-400 Network processor based
         on ARC700
    
       - NPS interrupt controller and clocksource drivers
    
       - ARC timers probed off DT
    
       - ARC iqrchips switching to linear domain (upgrade from legacy
         domains)"
    
    * tag 'arc-4.7-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc: (37 commits)
      arc: axs103_smp: Fix CPU frequency to 100MHz for dual-core
      arc: axs10x: Add DT bindings for I2S PLL Clock
      ARC: pae: STRICT_MM_TYPECHECKS was broken
      ARC: Add eznps platform to Kconfig and Makefile
      ARC: [plat-eznps] Use dedicated COMMAND_LINE_SIZE
      ARC: [plat-eznps] Use dedicated cpu_relax()
      ARC: [plat-eznps] Use dedicated identity auxiliary register.
      ARC: [plat-eznps] Use dedicated SMP barriers
      ARC: [plat-eznps] Use dedicated atomic/bitops/cmpxchg
      ARC: [plat-eznps] Use dedicated user stack top
      ARC: [plat-eznps] Add eznps platform
      ARC: [plat-eznps] Add eznps board defconfig and dts
      ARC: Mark secondary cpu online only after all HW setup is done
      ARC: rwlock: disable interrupts in !LLSC variant
      ARC: Make vmalloc size configurable
      ARC: clean out UAPI byteorder.h clean off Kconfig symbol
      irqchip: add nps Internal and external irqchips
      clocksource: Add NPS400 timers driver
      soc: Support for EZchip SoC
      Documentation: Add EZchip vendor to binding list
      ...

commit 91e8d0cbc94f81f110e508c3105dd93fb146d6b5
Merge: 2fe2edf85ffe 9999c5fc014a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 17 09:49:28 2016 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "A rather small set of patches from the timer departement:
    
       - Some more y2038 work
       - Yet another new clocksource driver
       - The usual set of small fixes, cleanups and enhancements"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/tegra: Remove unused suspend/resume code
      clockevents/driversi/mps2: add MPS2 Timer driver
      dt-bindings: document the MPS2 timer bindings
      clocksource/drivers/mtk_timer: Add __init attribute
      clockevents/drivers/dw_apb_timer: Implement ->set_state_oneshot_stopped()
      time: Introduce do_sys_settimeofday64()
      security: Introduce security_settime64()
      clocksource: Add missing include of of.h.

commit 42ff5fc8661040f37a67a4a95c231f6765d6f59c
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Apr 19 15:43:02 2016 +0200

    clocksource/drivers/tango-xtal: Fix boot hang due to incorrect test
    
    commit 16eeed7e5558a3dcf30f75526a896b2632f299f9 upstream.
    
    Commit 0881841f7e78 introduced a regression by inverting a test check
    after calling clocksource_mmio_init(). That results on the system to
    hang at boot time.
    
    Fix it by inverting the test again.
    
    Fixes: 0881841f7e78 ("Replace code by clocksource_mmio_init")
    Reported-by: Marc Gonzalez <marc_gonzalez@sigmadesigns.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a53224577e317d010f61aa1b1b8b18f2b168a137
Author: Noam Camus <noamc@ezchip.com>
Date:   Sat Oct 17 22:37:30 2015 +0300

    clocksource: Add NPS400 timers driver
    
    Add internal tick generator which is shared by all cores.
    Each cluster of cores view it through dedicated address.
    This is used for SMP system where all CPUs synced by same
    clock source.
    
    Signed-off-by: Noam Camus <noamc@ezchip.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Acked-by: Vineet Gupta <vgupta@synopsys.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e608b53ea863a92eb458cb1ec7c2fcf3ca2b043a
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 1 18:05:48 2016 +0530

    ARC: clocksource: DT based probe
    
    - Remove explicit clocksource setup and let it be done by OF framework
      by defining CLOCKSOURCE_OF_DECLARE() for various timers
    
    - This allows multiple clocksources to be potentially registered
      simultaneouly: previously we could only do one - as all of them had
      same arc_counter_setup() routine for registration
    
    - Setup routines also ensure that the underlying timer actually exists.
    
    - Remove some of the panic() calls if underlying timer is NOT detected as
      fallback clocksource might still be available
      1. If GRFC doesn't exist, jiffies clocksource gets registered anyways
      2. if RTC doesn't exist, TIMER1 can take over (as it is always
         present)
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit 77c8d0d6b3f4ea0989b9ca42fb368cc2aac02495
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 1 17:58:45 2016 +0530

    ARC: clockevent: DT based probe
    
     - timer frequency is derived from DT (no longer rely on top level
       DT "clock-frequency" probed early and exported by asm/clk.h)
    
     - TIMER0_IRQ need not be exported across arch code, confined to intc as
       it is property of same
    
     - Any failures in clockevent setup are considered pedantic and system
       panic()'s as there is no generic fallback (unlike clocksource where
       a jiffies based soft clocksource always exists)
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit 69fbd09874ded099d445271d05681529dac4d00a
Author: Noam Camus <noamc@ezchip.com>
Date:   Thu Jan 14 12:20:08 2016 +0530

    ARC: clockevent: Prepare for DT based probe
    
     - call clocksource_probe()
     - This in turns needs of_clk_init() to be called earlier
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Noam Camus <noamc@ezchip.com>
    [vgupta: broken off from a bigger patch]
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit c8b266e2fa59586a085caf9f50217e2e6e4b2659
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Tue Mar 8 12:24:35 2016 +0530

    ARM: dts: AM43x-epos: Fix clk parent for synctimer
    
    commit cfe1580a6415bc37fd62d79eb8102a618f7650b2 upstream.
    
    commit 55ee7017ee31 ("arm: omap2: board-generic: use omap4_local_timer_init
    for AM437x") makes synctimer32k as the clocksource on AM43xx. By default
    the synctimer32k is clocked by 32K RTC OSC on AM43xx. But this 32K RTC OSC
    is not available on epos boards which makes it fail to boot.
    
    Synctimer32k can also be clocked by a peripheral PLL, so making this as
    clock parent for synctimer3k on epos boards.
    
    Fixes: 55ee7017ee31 ("arm: omap2: board-generic: use omap4_local_timer_init for AM437x")
    Reported-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bb48b5f95a9e40451e259e295d03cd301740440
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Tue Mar 8 12:24:35 2016 +0530

    ARM: dts: AM43x-epos: Fix clk parent for synctimer
    
    commit cfe1580a6415bc37fd62d79eb8102a618f7650b2 upstream.
    
    commit 55ee7017ee31 ("arm: omap2: board-generic: use omap4_local_timer_init
    for AM437x") makes synctimer32k as the clocksource on AM43xx. By default
    the synctimer32k is clocked by 32K RTC OSC on AM43xx. But this 32K RTC OSC
    is not available on epos boards which makes it fail to boot.
    
    Synctimer32k can also be clocked by a peripheral PLL, so making this as
    clock parent for synctimer3k on epos boards.
    
    Fixes: 55ee7017ee31 ("arm: omap2: board-generic: use omap4_local_timer_init for AM437x")
    Reported-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a53d892dfb6f14f77c508e1027f5e1bdb400fd23
Author: Julien Grall <julien.grall@arm.com>
Date:   Mon Apr 11 16:33:00 2016 +0100

    clocksource: arm_arch_timer: Remove arch_timer_get_timecounter
    
    The only call of arch_timer_get_timecounter (in KVM) has been removed.
    
    Signed-off-by: Julien Grall <julien.grall@arm.com>
    Acked-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>

commit d9b5e41591ca6bc6678e287b5ffe7fac2e07436e
Author: Julien Grall <julien.grall@arm.com>
Date:   Mon Apr 11 16:32:52 2016 +0100

    clocksource: arm_arch_timer: Extend arch_timer_kvm_info to get the virtual IRQ
    
    Currently, the firmware table is parsed by the virtual timer code in
    order to retrieve the virtual timer interrupt. However, this is already
    done by the arch timer driver.
    
    To avoid code duplication, extend arch_timer_kvm_info to get the virtual
    IRQ.
    
    Note that the KVM code will be modified in a subsequent patch.
    
    Signed-off-by: Julien Grall <julien.grall@arm.com>
    Acked-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>

commit b4d6ce9776e0fb773418efe8bc81d8c5ccca3493
Author: Julien Grall <julien.grall@arm.com>
Date:   Mon Apr 11 16:32:51 2016 +0100

    clocksource: arm_arch_timer: Gather KVM specific information in a structure
    
    Introduce a structure which are filled up by the arch timer driver and
    used by the virtual timer in KVM.
    
    The first member of this structure will be the timecounter. More members
    will be added later.
    
    A stub for the new helper isn't introduced because KVM requires the arch
    timer for both ARM64 and ARM32.
    
    The function arch_timer_get_timecounter is kept for the time being and
    will be dropped in a subsequent patch.
    
    Signed-off-by: Julien Grall <julien.grall@arm.com>
    Acked-by: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>

commit b48e5aa6bc2eacf1f1b54bb6845963c8731f450f
Merge: 6945248f34b9 3d90bc051361
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Apr 28 15:41:28 2016 +0200

    Merge tag 'sti-dt-for-v4.7b-1' of git://git.kernel.org/pub/scm/linux/kernel/git/mcoquelin/sti into next/dt
    
    Merge "STi DT updates for v4.7 #1" from Maxime Coquelin:
    
    Highlights:
    -----------
     - Add CPUFreq support to STiH407 family
     - Add Mailbox nodes to STiH407 family
     - Add RemoteProc nodes to STiH407 family
     - Use 'reserved-memory' for DMA memory on STiH407
     - Use the LPC timer as a clocksource
    
    * tag 'sti-dt-for-v4.7b-1' of git://git.kernel.org/pub/scm/linux/kernel/git/mcoquelin/sti:
      ARM: dts: STi: STih407: Switch LPC mode from RTC to Clocksource
      ARM: dts: STiH407: Move over to using the 'reserved-memory' API for obtaining DMA memory
      ARM: dts: STiH407: Add nodes for RemoteProc
      ARM: dts: STi: stih407-family: Add nodes for Mailbox
      ARM: dts: STi: STiH407: Provide CPU with a means to look-up Major number
      ARM: dts: STi: STiH407: Link CPU with its voltage supply
      ARM: dts: STi: STiH407: Provide CPU with clocking information
      ARM: dts: STi: STiH407: Provide generic (safe) DVFS configuration

commit 9999c5fc014adcc4278adddb73888c301be7b9f7
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Apr 28 14:45:28 2016 +0200

    clocksource/drivers/tegra: Remove unused suspend/resume code
    
    The tegra_timer_suspend() and tegra_timer_resume() functions are never
    used, so they can be removed.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0302637f1860400cfe0895e4355a5fecb89e0347
Author: Vladimir Murzin <vladimir.murzin@arm.com>
Date:   Mon Apr 25 09:45:44 2016 +0100

    clockevents/driversi/mps2: add MPS2 Timer driver
    
    MPS2 platform has simple 32 bits general purpose countdown timers.
    
    The driver uses the first detected timer as a clocksource and the rest
    of the timers as a clockevent
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Vladimir Murzin <vladimir.murzin@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d98eddf849df7ad71b375464fd02f81f1ae4de20
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Mon Apr 18 16:55:36 2016 +0200

    clocksource/drivers/mtk_timer: Add __init attribute
    
    Add __init attribute on a function that is only called from other __init
    functions and that is not inlined, at least with gcc version 4.8.4 on an
    x86 machine with allyesconfig.  Currently, the function is put in the
    .text.unlikely segment.  Declaring it as __init will cause it to be put in
    the .init.text and to disappear after initialization.
    
    The result of objdump -x on the function before the change is as follows:
    
    0000000000000000 l     F .text.unlikely 000000000000006f mtk_timer_setup.isra.4
    
    And after the change it is as follows:
    
    0000000000000000 l     F .init.text     000000000000006a mtk_timer_setup.isra.4
    
    Done with the help of Coccinelle.  The semantic patch checks for local
    static non-init functions that are called from an __init function and are
    not called from any other function.
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Matthias Brugger <matthias.bgg@gmail.com>

commit b81cc21d0356a38838502ae2fae709382a324b75
Author: John Stultz <john.stultz@linaro.org>
Date:   Mon Sep 14 18:05:20 2015 -0700

    clocksource: Fix abs() usage w/ 64bit values
    
    commit 67dfae0cd72fec5cd158b6e5fb1647b7dbe0834c upstream.
    
    This patch fixes one cases where abs() was being used with 64-bit
    nanosecond values, where the result may be capped at 32-bits.
    
    This potentially could cause watchdog false negatives on 32-bit
    systems, so this patch addresses the issue by using abs64().
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Link: http://lkml.kernel.org/r/1442279124-7309-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    [lizf: Backported to 3.4: adjust context]
    Signed-off-by: Zefan Li <lizefan@huawei.com>

commit 82b23cb94b8cee25781c209d9b1df3b144c8bb5f
Merge: 0e11d256512c a19cad6d6682 3b9d6da67e11 16eeed7e5558
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 23 11:45:52 2016 -0700

    Merge branches 'perf-urgent-for-linus', 'smp-urgent-for-linus' and 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull perf, cpu hotplug and timer fixes from Ingo Molnar:
     "perf:
       - A single tooling fix for a user-triggerable segfault.
    
      CPU hotplug:
       - Fix a CPU hotplug corner case regression, introduced by the recent
         hotplug rework
    
      timers:
       - Fix a boot hang in the ARM based Tango SoC clocksource driver"
    
    * 'perf-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      perf intel-pt: Fix segfault tracing transactions
    
    * 'smp-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      cpu/hotplug: Fix rollback during error-out in __cpu_disable()
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/tango-xtal: Fix boot hang due to incorrect test

commit 02fad5e9b433da3829d39f0afb3c51b4b6409ed5
Author: David Lechner <david@lechnology.com>
Date:   Wed Mar 9 18:16:54 2016 -0600

    clocksource: Add missing include of of.h.
    
    This header uses OF_DELCARE_1 which is defined in linux/of.h.
    
    This fixes getting unhelpful compiler error messages about missing ')'
    before a string constant.
    
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: David Lechner <david@lechnology.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 16eeed7e5558a3dcf30f75526a896b2632f299f9
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Apr 19 15:43:02 2016 +0200

    clocksource/drivers/tango-xtal: Fix boot hang due to incorrect test
    
    Commit 0881841f7e78 introduced a regression by inverting a test check
    after calling clocksource_mmio_init(). That results on the system to
    hang at boot time.
    
    Fix it by inverting the test again.
    
    Fixes: 0881841f7e78 ("Replace code by clocksource_mmio_init")
    Reported-by: Marc Gonzalez <marc_gonzalez@sigmadesigns.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d5630b7a557aff4d107e5af2e73fb91ed707f442
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Thu Dec 10 19:03:45 2015 +0200

    clk: ti: dra7: fix kernel boot with arg 'clocksource=gp_timer'
    
    The OMAP Platform code provides possibility to select GP Timer as
    default clocksource instead of counter_32K by using bootcmd parameter
    'clocksource', but the system will crash during early boot when this
    option is used on dra7 or omap5 platforms, because it will hit BUG()
    statement:
    
     omap2_gptimer_clocksource_init
      ->BUG_ON(res);
    
    This happens because clk_dev alias "sys_clkin_ck" is not registered.
    Hence, fix it by adding missing "sys_clkin_ck" clk_dev aliases
    definitions for omap5 and dra7.
    
    Acked-by: Tero Kristo <t-kristo@ti.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit 9dbaab56ac09f07a73fe83bf69bec3e31060080a
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Mar 14 09:01:57 2016 +0000

    drm/i915: Exit cherryview_irq_handler() after one pass
    
    This effectively reverts
    
    commit 8e5fd599eb219f1054e39b40d18b217af669eea9
    Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Date:   Wed Apr 9 13:28:50 2014 +0300
    
        drm/i915/chv: Make CHV irq handler loop until all interrupts are consumed
    
    as under continuous execlists load we can saturate the IRQ handler,
    destablising the tsc clock and triggering the NMI watchdog to declare a hung
    CPU.
    
    [  552.756051] clocksource: timekeeping watchdog on CPU0: Marking clocksource 'tsc' as unstable because the skew is too large:
    [  552.756080] clocksource:                       'refined-jiffies' wd_now: 10003b480 wd_last: 10003b28c mask: ffffffff
    [  552.756091] clocksource:                       'tsc' cs_now: d55d31aa50 cs_last: d17446166c mask: ffffffffffffffff
    [  552.756210] clocksource: Switched to clocksource refined-jiffies
    [  575.217870] NMI watchdog: Watchdog detected hard LOCKUP on cpu 1
    [  575.217893] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.5.0-rc7+ #18
    [  575.217905] Hardware name:                  /NUC5CPYB, BIOS PYBSWCEL.86A.0027.2015.0507.1758 05/07/2015
    [  575.217915]  0000000000000000 ffff88027fd05bc0 ffffffff81288c6d 0000000000000000
    [  575.217935]  0000000000000001 ffff88027fd05be0 ffffffff810e72d1 0000000000000000
    [  575.217951]  ffff88027fd05c80 ffff88027fd05c20 ffffffff81114b60 0000000181015f1e
    [  575.217967] Call Trace:
    [  575.217973]  <NMI>  [<ffffffff81288c6d>] dump_stack+0x4f/0x72
    [  575.217994]  [<ffffffff810e72d1>] watchdog_overflow_callback+0x151/0x160
    [  575.218003]  [<ffffffff81114b60>] __perf_event_overflow+0xa0/0x1e0
    [  575.218016]  [<ffffffff811154c4>] perf_event_overflow+0x14/0x20
    [  575.218028]  [<ffffffff8101d2ca>] intel_pmu_handle_irq+0x1da/0x460
    [  575.218042]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218052]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218064]  [<ffffffff81014ae8>] perf_event_nmi_handler+0x28/0x50
    [  575.218075]  [<ffffffff81007540>] nmi_handle+0x60/0x130
    [  575.218086]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218096]  [<ffffffff810079c0>] do_nmi+0x140/0x470
    [  575.218108]  [<ffffffff81559ec7>] end_repeat_nmi+0x1a/0x1e
    [  575.218119]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218129]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218139]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218148]  <<EOE>>  [<ffffffff814a8353>] cpuidle_enter_state+0xf3/0x2f0
    [  575.218164]  [<ffffffff814a8587>] cpuidle_enter+0x17/0x20
    [  575.218175]  [<ffffffff810aaa3a>] call_cpuidle+0x2a/0x40
    [  575.218185]  [<ffffffff810aade3>] cpu_startup_entry+0x273/0x330
    [  575.218196]  [<ffffffff81033a1e>] start_secondary+0x10e/0x130
    
    However, not servicing all available IIR within the handler does hurt the
    throughput of pathological nop execbuf by about 20%, with a similar effect
    upon the dispatch latency of a series of execbuf.
    
    v2: use do {} while(0) for a smaller patch, and easier to revert again
    
    I have reasonable confidence that we do not miss GT interrupts (as
    execlists provides a stress case with a failure mechanism easily
    detected by igt), however I have less confidence about all the other
    sources of interrupts and worry that may lose a display hotplug
    interrupt, for example.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=93467
    Testcase: igt/gem_exec_nop/basic # requires NMI watchdog
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Antti Koskipää <antti.koskipaa@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1457946117-6714-1-git-send-email-chris@chris-wilson.co.uk
    (cherry picked from commit 579de73b048a0a4c66c25a033ac76a2836e0cf73)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit cfe1580a6415bc37fd62d79eb8102a618f7650b2
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Tue Mar 8 12:24:35 2016 +0530

    ARM: dts: AM43x-epos: Fix clk parent for synctimer
    
    commit 55ee7017ee31 ("arm: omap2: board-generic: use omap4_local_timer_init
    for AM437x") makes synctimer32k as the clocksource on AM43xx. By default
    the synctimer32k is clocked by 32K RTC OSC on AM43xx. But this 32K RTC OSC
    is not available on epos boards which makes it fail to boot.
    
    Synctimer32k can also be clocked by a peripheral PLL, so making this as
    clock parent for synctimer3k on epos boards.
    
    Fixes: 55ee7017ee31 ("arm: omap2: board-generic: use omap4_local_timer_init for AM437x")
    Cc: stable@vger.kernel.org # v4.4+
    Reported-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 579de73b048a0a4c66c25a033ac76a2836e0cf73
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Mar 14 09:01:57 2016 +0000

    drm/i915: Exit cherryview_irq_handler() after one pass
    
    This effectively reverts
    
    commit 8e5fd599eb219f1054e39b40d18b217af669eea9
    Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Date:   Wed Apr 9 13:28:50 2014 +0300
    
        drm/i915/chv: Make CHV irq handler loop until all interrupts are consumed
    
    as under continuous execlists load we can saturate the IRQ handler,
    destablising the tsc clock and triggering the NMI watchdog to declare a hung
    CPU.
    
    [  552.756051] clocksource: timekeeping watchdog on CPU0: Marking clocksource 'tsc' as unstable because the skew is too large:
    [  552.756080] clocksource:                       'refined-jiffies' wd_now: 10003b480 wd_last: 10003b28c mask: ffffffff
    [  552.756091] clocksource:                       'tsc' cs_now: d55d31aa50 cs_last: d17446166c mask: ffffffffffffffff
    [  552.756210] clocksource: Switched to clocksource refined-jiffies
    [  575.217870] NMI watchdog: Watchdog detected hard LOCKUP on cpu 1
    [  575.217893] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.5.0-rc7+ #18
    [  575.217905] Hardware name:                  /NUC5CPYB, BIOS PYBSWCEL.86A.0027.2015.0507.1758 05/07/2015
    [  575.217915]  0000000000000000 ffff88027fd05bc0 ffffffff81288c6d 0000000000000000
    [  575.217935]  0000000000000001 ffff88027fd05be0 ffffffff810e72d1 0000000000000000
    [  575.217951]  ffff88027fd05c80 ffff88027fd05c20 ffffffff81114b60 0000000181015f1e
    [  575.217967] Call Trace:
    [  575.217973]  <NMI>  [<ffffffff81288c6d>] dump_stack+0x4f/0x72
    [  575.217994]  [<ffffffff810e72d1>] watchdog_overflow_callback+0x151/0x160
    [  575.218003]  [<ffffffff81114b60>] __perf_event_overflow+0xa0/0x1e0
    [  575.218016]  [<ffffffff811154c4>] perf_event_overflow+0x14/0x20
    [  575.218028]  [<ffffffff8101d2ca>] intel_pmu_handle_irq+0x1da/0x460
    [  575.218042]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218052]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218064]  [<ffffffff81014ae8>] perf_event_nmi_handler+0x28/0x50
    [  575.218075]  [<ffffffff81007540>] nmi_handle+0x60/0x130
    [  575.218086]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218096]  [<ffffffff810079c0>] do_nmi+0x140/0x470
    [  575.218108]  [<ffffffff81559ec7>] end_repeat_nmi+0x1a/0x1e
    [  575.218119]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218129]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218139]  [<ffffffff814a8aae>] ? poll_idle+0x3e/0x70
    [  575.218148]  <<EOE>>  [<ffffffff814a8353>] cpuidle_enter_state+0xf3/0x2f0
    [  575.218164]  [<ffffffff814a8587>] cpuidle_enter+0x17/0x20
    [  575.218175]  [<ffffffff810aaa3a>] call_cpuidle+0x2a/0x40
    [  575.218185]  [<ffffffff810aade3>] cpu_startup_entry+0x273/0x330
    [  575.218196]  [<ffffffff81033a1e>] start_secondary+0x10e/0x130
    
    However, not servicing all available IIR within the handler does hurt the
    throughput of pathological nop execbuf by about 20%, with a similar effect
    upon the dispatch latency of a series of execbuf.
    
    v2: use do {} while(0) for a smaller patch, and easier to revert again
    
    I have reasonable confidence that we do not miss GT interrupts (as
    execlists provides a stress case with a failure mechanism easily
    detected by igt), however I have less confidence about all the other
    sources of interrupts and worry that may lose a display hotplug
    interrupt, for example.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=93467
    Testcase: igt/gem_exec_nop/basic # requires NMI watchdog
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Antti Koskipää <antti.koskipaa@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1457946117-6714-1-git-send-email-chris@chris-wilson.co.uk

commit 44d1b6dd3aa1651e1a9467a055a72c81eb96b8e3
Merge: 0f0fbec9c3ce b7c8b4aac6ea
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 24 10:32:42 2016 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Thomas Gleixner:
     "A single fix to the pistachio clocksource driver using the proper
      signedness in the error print format"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/pistachio: Correct output format of PTR_ERR()

commit b7c8b4aac6ea6746b1c49fda0a0563a07203dd26
Author: Vladimir Zapolskiy <vz@mleia.com>
Date:   Tue Mar 22 01:42:07 2016 +0200

    clocksource/drivers/pistachio: Correct output format of PTR_ERR()
    
    Use signed integer output in the pr_err() string format, here PTR_ERR() value
    is negative and it should be reported in human readable way.
    
    Signed-off-by: Vladimir Zapolskiy <vz@mleia.com>
    Cc: Jisheng Zhang <jszhang@marvell.com>
    Cc: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1458603727-4446-1-git-send-email-vz@mleia.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 8a284c062ec923c924c79e3b1b5199b8d72904fc
Merge: 208de2147767 6436257b491c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 15 12:13:56 2016 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The timer department delivers this time:
    
       - Support for cross clock domain timestamps in the core code plus a
         first user.  That allows more precise timestamping for PTP and
         later for audio and other peripherals.
    
         The ptp/e1000e patches have been acked by the relevant maintainers
         and are carried in the timer tree to avoid merge ordering issues.
    
       - Support for unregistering the current clocksource watchdog.  That
         lifts a limitation for switching clocksources which has been there
         from day 1
    
       - The usual pile of fixes and updates to the core and the drivers.
         Nothing outstanding and exciting"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (26 commits)
      time/timekeeping: Work around false positive GCC warning
      e1000e: Adds hardware supported cross timestamp on e1000e nic
      ptp: Add PTP_SYS_OFFSET_PRECISE for driver crosstimestamping
      x86/tsc: Always Running Timer (ART) correlated clocksource
      hrtimer: Revert CLOCK_MONOTONIC_RAW support
      time: Add history to cross timestamp interface supporting slower devices
      time: Add driver cross timestamp interface for higher precision time synchronization
      time: Remove duplicated code in ktime_get_raw_and_real()
      time: Add timekeeping snapshot code capturing system time and counter
      time: Add cycles to nanoseconds translation
      jiffies: Use CLOCKSOURCE_MASK instead of constant
      clocksource: Introduce clocksource_freq2mult()
      clockevents/drivers/exynos_mct: Implement ->set_state_oneshot_stopped()
      clockevents/drivers/arm_global_timer: Implement ->set_state_oneshot_stopped()
      clockevents/drivers/arm_arch_timer: Implement ->set_state_oneshot_stopped()
      clocksource/drivers/arm_global_timer: Register delay timer
      clocksource/drivers/lpc32xx: Support timer-based ARM delay
      clocksource/drivers/lpc32xx: Support periodic mode
      clocksource/drivers/lpc32xx: Don't use the prescaler counter for clockevents
      clocksource/drivers/rockchip: Add err handle for rk_timer_init
      ...

commit 327cdd509651bf0b901ae51c55f6dac562417371
Author: Eugenia Emantayev <eugenia@mellanox.com>
Date:   Wed Feb 17 17:24:23 2016 +0200

    net/mlx4_en: Choose time-stamping shift value according to HW frequency
    
    commit 31c128b66e5b28f468076e4f3ca3025c35342041 upstream.
    
    Previously, the shift value used for time-stamping was constant and didn't
    depend on the HW chip frequency. Change that to take the frequency into account
    and calculate the maximal value in cycles per wraparound of ten seconds. This
    time slot was chosen since it gives a good accuracy in time synchronization.
    
    Algorithm for shift value calculation:
     * Round up the maximal value in cycles to nearest power of two
    
     * Calculate maximal multiplier by division of all 64 bits set
       to above result
    
     * Then, invert the function clocksource_khz2mult() to get the shift from
       maximal mult value
    
    Fixes: ec693d47010e ('net/mlx4_en: Add HW timestamping (TS) support')
    Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
    Reviewed-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 5c72a2dd6fedf29368fa67b15c7c076dd93cf3dd
Author: Eugenia Emantayev <eugenia@mellanox.com>
Date:   Wed Feb 17 17:24:23 2016 +0200

    net/mlx4_en: Choose time-stamping shift value according to HW frequency
    
    [ Upstream commit 31c128b66e5b28f468076e4f3ca3025c35342041 ]
    
    Previously, the shift value used for time-stamping was constant and didn't
    depend on the HW chip frequency. Change that to take the frequency into account
    and calculate the maximal value in cycles per wraparound of ten seconds. This
    time slot was chosen since it gives a good accuracy in time synchronization.
    
    Algorithm for shift value calculation:
     * Round up the maximal value in cycles to nearest power of two
    
     * Calculate maximal multiplier by division of all 64 bits set
       to above result
    
     * Then, invert the function clocksource_khz2mult() to get the shift from
       maximal mult value
    
    Fixes: ec693d47010e ('net/mlx4_en: Add HW timestamping (TS) support')
    Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
    Reviewed-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 972e9e3c7f447bb2becfdcde9931790e78dd43fa
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Nov 30 12:30:30 2015 +1100

    time: Avoid signed overflow in timekeeping_get_ns()
    
    commit 35a4933a895927990772ae96fdcfd2f806929ee2 upstream.
    
    1e75fa8 "time: Condense timekeeper.xtime into xtime_sec" replaced a call to
    clocksource_cyc2ns() from timekeeping_get_ns() with an open-coded version
    of the same logic to avoid keeping a semi-redundant struct timespec
    in struct timekeeper.
    
    However, the commit also introduced a subtle semantic change - where
    clocksource_cyc2ns() uses purely unsigned math, the new version introduces
    a signed temporary, meaning that if (delta * tk->mult) has a 63-bit
    overflow the following shift will still give a negative result.  The
    choice of 'maxsec' in __clocksource_updatefreq_scale() means this will
    generally happen if there's a ~10 minute pause in examining the
    clocksource.
    
    This can be triggered on a powerpc KVM guest by stopping it from qemu for
    a bit over 10 minutes.  After resuming time has jumped backwards several
    minutes causing numerous problems (jiffies does not advance, msleep()s can
    be extended by minutes..).  It doesn't happen on x86 KVM guests, because
    the guest TSC is effectively frozen while the guest is stopped, which is
    not the case for the powerpc timebase.
    
    Obviously an unsigned (64 bit) overflow will only take twice as long as a
    signed, 63-bit overflow.  I don't know the time code well enough to know
    if that will still cause incorrect calculations, or if a 64-bit overflow
    is avoided elsewhere.
    
    Still, an incorrect forwards clock adjustment will cause less trouble than
    time going backwards.  So, this patch removes the potential for
    intermediate signed overflow.
    
    Suggested-by: Laurent Vivier <lvivier@redhat.com>
    Tested-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 142ad71dd6de7368cc8cc5c52288b628062f391d
Author: Roman Volkov <rvolkov@v1ros.org>
Date:   Fri Jan 1 16:24:41 2016 +0300

    clocksource/drivers/vt8500: Increase the minimum delta
    
    commit f9eccf24615672896dc13251410c3f2f33a14f95 upstream.
    
    The vt8500 clocksource driver declares itself as capable to handle the
    minimum delay of 4 cycles by passing the value into
    clockevents_config_and_register(). The vt8500_timer_set_next_event()
    requires the passed cycles value to be at least 16. The impact is that
    userspace hangs in nanosleep() calls with small delay intervals.
    
    This problem is reproducible in Linux 4.2 starting from:
    c6eb3f70d448 ('hrtimer: Get rid of hrtimer softirq')
    
    From Russell King, more detailed explanation:
    
    "It's a speciality of the StrongARM/PXA hardware. It takes a certain
    number of OSCR cycles for the value written to hit the compare registers.
    So, if a very small delta is written (eg, the compare register is written
    with a value of OSCR + 1), the OSCR will have incremented past this value
    before it hits the underlying hardware. The result is, that you end up
    waiting a very long time for the OSCR to wrap before the event fires.
    
    So, we introduce a check in set_next_event() to detect this and return
    -ETIME if the calculated delta is too small, which causes the generic
    clockevents code to retry after adding the min_delta specified in
    clockevents_config_and_register() to the current time value.
    
    min_delta must be sufficient that we don't re-trip the -ETIME check - if
    we do, we will return -ETIME, forward the next event time, try to set it,
    return -ETIME again, and basically lock the system up. So, min_delta
    must be larger than the check inside set_next_event(). A factor of two
    was chosen to ensure that this situation would never occur.
    
    The PXA code worked on PXA systems for years, and I'd suggest no one
    changes this mechanism without access to a wide range of PXA systems,
    otherwise they're risking breakage."
    
    Cc: Russell King <linux@arm.linux.org.uk>
    Acked-by: Alexey Charkov <alchark@gmail.com>
    Signed-off-by: Roman Volkov <rvolkov@v1ros.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7675c3c6bdf9f59ad994334ce05c839ca27dd6a8
Author: Eugenia Emantayev <eugenia@mellanox.com>
Date:   Wed Feb 17 17:24:23 2016 +0200

    net/mlx4_en: Choose time-stamping shift value according to HW frequency
    
    [ Upstream commit 31c128b66e5b28f468076e4f3ca3025c35342041 ]
    
    Previously, the shift value used for time-stamping was constant and didn't
    depend on the HW chip frequency. Change that to take the frequency into account
    and calculate the maximal value in cycles per wraparound of ten seconds. This
    time slot was chosen since it gives a good accuracy in time synchronization.
    
    Algorithm for shift value calculation:
     * Round up the maximal value in cycles to nearest power of two
    
     * Calculate maximal multiplier by division of all 64 bits set
       to above result
    
     * Then, invert the function clocksource_khz2mult() to get the shift from
       maximal mult value
    
    Fixes: ec693d47010e ('net/mlx4_en: Add HW timestamping (TS) support')
    Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
    Reviewed-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 194770bb72f1c59c7f0872635a30dde361c9dfc7
Author: Roman Volkov <rvolkov@v1ros.org>
Date:   Fri Jan 1 16:24:41 2016 +0300

    clocksource/drivers/vt8500: Increase the minimum delta
    
    commit f9eccf24615672896dc13251410c3f2f33a14f95 upstream.
    
    The vt8500 clocksource driver declares itself as capable to handle the
    minimum delay of 4 cycles by passing the value into
    clockevents_config_and_register(). The vt8500_timer_set_next_event()
    requires the passed cycles value to be at least 16. The impact is that
    userspace hangs in nanosleep() calls with small delay intervals.
    
    This problem is reproducible in Linux 4.2 starting from:
    c6eb3f70d448 ('hrtimer: Get rid of hrtimer softirq')
    
    From Russell King, more detailed explanation:
    
    "It's a speciality of the StrongARM/PXA hardware. It takes a certain
    number of OSCR cycles for the value written to hit the compare registers.
    So, if a very small delta is written (eg, the compare register is written
    with a value of OSCR + 1), the OSCR will have incremented past this value
    before it hits the underlying hardware. The result is, that you end up
    waiting a very long time for the OSCR to wrap before the event fires.
    
    So, we introduce a check in set_next_event() to detect this and return
    -ETIME if the calculated delta is too small, which causes the generic
    clockevents code to retry after adding the min_delta specified in
    clockevents_config_and_register() to the current time value.
    
    min_delta must be sufficient that we don't re-trip the -ETIME check - if
    we do, we will return -ETIME, forward the next event time, try to set it,
    return -ETIME again, and basically lock the system up. So, min_delta
    must be larger than the check inside set_next_event(). A factor of two
    was chosen to ensure that this situation would never occur.
    
    The PXA code worked on PXA systems for years, and I'd suggest no one
    changes this mechanism without access to a wide range of PXA systems,
    otherwise they're risking breakage."
    
    Cc: Russell King <linux@arm.linux.org.uk>
    Acked-by: Alexey Charkov <alchark@gmail.com>
    Signed-off-by: Roman Volkov <rvolkov@v1ros.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1644fe6cc1567ecde034ea8acd5f4d6146e395b5
Author: Roman Volkov <rvolkov@v1ros.org>
Date:   Fri Jan 1 16:24:41 2016 +0300

    clocksource/drivers/vt8500: Increase the minimum delta
    
    commit f9eccf24615672896dc13251410c3f2f33a14f95 upstream.
    
    The vt8500 clocksource driver declares itself as capable to handle the
    minimum delay of 4 cycles by passing the value into
    clockevents_config_and_register(). The vt8500_timer_set_next_event()
    requires the passed cycles value to be at least 16. The impact is that
    userspace hangs in nanosleep() calls with small delay intervals.
    
    This problem is reproducible in Linux 4.2 starting from:
    c6eb3f70d448 ('hrtimer: Get rid of hrtimer softirq')
    
    From Russell King, more detailed explanation:
    
    "It's a speciality of the StrongARM/PXA hardware. It takes a certain
    number of OSCR cycles for the value written to hit the compare registers.
    So, if a very small delta is written (eg, the compare register is written
    with a value of OSCR + 1), the OSCR will have incremented past this value
    before it hits the underlying hardware. The result is, that you end up
    waiting a very long time for the OSCR to wrap before the event fires.
    
    So, we introduce a check in set_next_event() to detect this and return
    -ETIME if the calculated delta is too small, which causes the generic
    clockevents code to retry after adding the min_delta specified in
    clockevents_config_and_register() to the current time value.
    
    min_delta must be sufficient that we don't re-trip the -ETIME check - if
    we do, we will return -ETIME, forward the next event time, try to set it,
    return -ETIME again, and basically lock the system up. So, min_delta
    must be larger than the check inside set_next_event(). A factor of two
    was chosen to ensure that this situation would never occur.
    
    The PXA code worked on PXA systems for years, and I'd suggest no one
    changes this mechanism without access to a wide range of PXA systems,
    otherwise they're risking breakage."
    
    Cc: Russell King <linux@arm.linux.org.uk>
    Acked-by: Alexey Charkov <alchark@gmail.com>
    Signed-off-by: Roman Volkov <rvolkov@v1ros.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9677e0f83080bb4186865868c359e72e1fac1ea
Author: Christopher S. Hall <christopher.s.hall@intel.com>
Date:   Mon Feb 29 06:33:47 2016 -0800

    x86/tsc: Always Running Timer (ART) correlated clocksource
    
    On modern Intel systems TSC is derived from the new Always Running Timer
    (ART). ART can be captured simultaneous to the capture of
    audio and network device clocks, allowing a correlation between timebases
    to be constructed. Upon capture, the driver converts the captured ART
    value to the appropriate system clock using the correlated clocksource
    mechanism.
    
    On systems that support ART a new CPUID leaf (0x15) returns parameters
    “m” and “n” such that:
    
    TSC_value = (ART_value * m) / n + k [n >= 1]
    
    [k is an offset that can adjusted by a privileged agent. The
    IA32_TSC_ADJUST MSR is an example of an interface to adjust k.
    See 17.14.4 of the Intel SDM for more details]
    
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: kevin.b.stanton@intel.com
    Cc: kevin.j.clarke@intel.com
    Cc: hpa@zytor.com
    Cc: jeffrey.t.kirsher@intel.com
    Cc: netdev@vger.kernel.org
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Christopher S. Hall <christopher.s.hall@intel.com>
    [jstultz: Tweaked to fix build issue, also reworked math for
    64bit division on 32bit systems, as well as !CONFIG_CPU_FREQ build
    fixes]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 0ea3c0a5ae0b286ccb86212350258caae8a7f0eb
Author: Roman Volkov <rvolkov@v1ros.org>
Date:   Fri Jan 1 16:24:41 2016 +0300

    clocksource/drivers/vt8500: Increase the minimum delta
    
    commit f9eccf24615672896dc13251410c3f2f33a14f95 upstream.
    
    The vt8500 clocksource driver declares itself as capable to handle the
    minimum delay of 4 cycles by passing the value into
    clockevents_config_and_register(). The vt8500_timer_set_next_event()
    requires the passed cycles value to be at least 16. The impact is that
    userspace hangs in nanosleep() calls with small delay intervals.
    
    This problem is reproducible in Linux 4.2 starting from:
    c6eb3f70d448 ('hrtimer: Get rid of hrtimer softirq')
    
    From Russell King, more detailed explanation:
    
    "It's a speciality of the StrongARM/PXA hardware. It takes a certain
    number of OSCR cycles for the value written to hit the compare registers.
    So, if a very small delta is written (eg, the compare register is written
    with a value of OSCR + 1), the OSCR will have incremented past this value
    before it hits the underlying hardware. The result is, that you end up
    waiting a very long time for the OSCR to wrap before the event fires.
    
    So, we introduce a check in set_next_event() to detect this and return
    -ETIME if the calculated delta is too small, which causes the generic
    clockevents code to retry after adding the min_delta specified in
    clockevents_config_and_register() to the current time value.
    
    min_delta must be sufficient that we don't re-trip the -ETIME check - if
    we do, we will return -ETIME, forward the next event time, try to set it,
    return -ETIME again, and basically lock the system up. So, min_delta
    must be larger than the check inside set_next_event(). A factor of two
    was chosen to ensure that this situation would never occur.
    
    The PXA code worked on PXA systems for years, and I'd suggest no one
    changes this mechanism without access to a wide range of PXA systems,
    otherwise they're risking breakage."
    
    Cc: Russell King <linux@arm.linux.org.uk>
    Acked-by: Alexey Charkov <alchark@gmail.com>
    Signed-off-by: Roman Volkov <rvolkov@v1ros.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 2c756feb18d9ec258dbb3a3d11c47e28820690d7
Author: Christopher S. Hall <christopher.s.hall@intel.com>
Date:   Mon Feb 22 03:15:23 2016 -0800

    time: Add history to cross timestamp interface supporting slower devices
    
    Another representative use case of time sync and the correlated
    clocksource (in addition to PTP noted above) is PTP synchronized
    audio.
    
    In a streaming application, as an example, samples will be sent and/or
    received by multiple devices with a presentation time that is in terms
    of the PTP master clock. Synchronizing the audio output on these
    devices requires correlating the audio clock with the PTP master
    clock. The more precise this correlation is, the better the audio
    quality (i.e. out of sync audio sounds bad).
    
    From an application standpoint, to correlate the PTP master clock with
    the audio device clock, the system clock is used as a intermediate
    timebase. The transforms such an application would perform are:
    
        System Clock <-> Audio clock
        System Clock <-> Network Device Clock [<-> PTP Master Clock]
    
    Modern Intel platforms can perform a more accurate cross timestamp in
    hardware (ART,audio device clock).  The audio driver requires
    ART->system time transforms -- the same as required for the network
    driver. These platforms offload audio processing (including
    cross-timestamps) to a DSP which to ensure uninterrupted audio
    processing, communicates and response to the host only once every
    millsecond. As a result is takes up to a millisecond for the DSP to
    receive a request, the request is processed by the DSP, the audio
    output hardware is polled for completion, the result is copied into
    shared memory, and the host is notified. All of these operation occur
    on a millisecond cadence.  This transaction requires about 2 ms, but
    under heavier workloads it may take up to 4 ms.
    
    Adding a history allows these slow devices the option of providing an
    ART value outside of the current interval. In this case, the callback
    provided is an accessor function for the previously obtained counter
    value. If get_system_device_crosststamp() receives a counter value
    previous to cycle_last, it consults the history provided as an
    argument in history_ref and interpolates the realtime and monotonic
    raw system time using the provided counter value. If there are any
    clock discontinuities, e.g. from calling settimeofday(), the monotonic
    raw time is interpolated in the usual way, but the realtime clock time
    is adjusted by scaling the monotonic raw adjustment.
    
    When an accessor function is used a history argument *must* be
    provided. The history is initialized using ktime_get_snapshot() and
    must be called before the counter values are read.
    
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: kevin.b.stanton@intel.com
    Cc: kevin.j.clarke@intel.com
    Cc: hpa@zytor.com
    Cc: jeffrey.t.kirsher@intel.com
    Cc: netdev@vger.kernel.org
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Christopher S. Hall <christopher.s.hall@intel.com>
    [jstultz: Fixed up cycles_t/cycle_t type confusion]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 6bd58f09e1d8cc6c50a824c00bf0d617919986a1
Author: Christopher S. Hall <christopher.s.hall@intel.com>
Date:   Mon Feb 22 03:15:19 2016 -0800

    time: Add cycles to nanoseconds translation
    
    The timekeeping code does not currently provide a way to translate
    externally provided clocksource cycles to system time. The cycle count
    is always provided by the result clocksource read() method internal to
    the timekeeping code. The added function timekeeping_cycles_to_ns()
    calculated a nanosecond value from a cycle count that can be added to
    tk_read_base.base value yielding the current system time. This allows
    clocksource cycle values external to the timekeeping code to provide a
    cycle count that can be transformed to system time.
    
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: kevin.b.stanton@intel.com
    Cc: kevin.j.clarke@intel.com
    Cc: hpa@zytor.com
    Cc: jeffrey.t.kirsher@intel.com
    Cc: netdev@vger.kernel.org
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Christopher S. Hall <christopher.s.hall@intel.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 63b7b33c7c4ae9dc71c2eef673611039aadbe87a
Author: Eugenia Emantayev <eugenia@mellanox.com>
Date:   Wed Feb 17 17:24:23 2016 +0200

    net/mlx4_en: Choose time-stamping shift value according to HW frequency
    
    [ Upstream commit 31c128b66e5b28f468076e4f3ca3025c35342041 ]
    
    Previously, the shift value used for time-stamping was constant and didn't
    depend on the HW chip frequency. Change that to take the frequency into account
    and calculate the maximal value in cycles per wraparound of ten seconds. This
    time slot was chosen since it gives a good accuracy in time synchronization.
    
    Algorithm for shift value calculation:
     * Round up the maximal value in cycles to nearest power of two
    
     * Calculate maximal multiplier by division of all 64 bits set
       to above result
    
     * Then, invert the function clocksource_khz2mult() to get the shift from
       maximal mult value
    
    Fixes: ec693d47010e ('net/mlx4_en: Add HW timestamping (TS) support')
    Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
    Reviewed-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 7aca0c07207385cca76025cc85231519935722b9
Author: Alexander Kuleshov <kuleshovmail@gmail.com>
Date:   Fri Feb 26 19:14:13 2016 -0800

    clocksource: Introduce clocksource_freq2mult()
    
    The clocksource_khz2mult() and clocksource_hz2mult() share similar
    code wihch calculates a mult from the given frequency. Both implementations
    in differ only in value of a frequency. This patch introduces the
    clocksource_freq2mult() helper with generic implementation of
    mult calculation to prevent code duplication.
    
    Signed-off-by: Alexander Kuleshov <kuleshovmail@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Link: http://lkml.kernel.org/r/1456542854-22104-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit bbaa06702719818913ed686612d0db477b2b53b0
Author: Rabin Vincent <rabin.vincent@axis.com>
Date:   Wed Aug 19 15:43:38 2015 +0200

    clocksource/drivers/arm_global_timer: Register delay timer
    
    Provide a delay timer using the lower 32-bits of the global timer so
    that we can use that instead of having to calibrating delays.
    
    Signed-off-by: Rabin Vincent <rabin.vincent@axis.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 1b18fd2023acf7679a79d94ee85d488664ef0553
Author: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
Date:   Tue Feb 9 22:54:27 2016 -0300

    clocksource/drivers/lpc32xx: Support timer-based ARM delay
    
    This commit implements the ARM timer-based delay timer for the
    LPC32xx, LPC18xx, LPC43xx family of SoCs.
    
    Also, add a dependency to restrict compiling this driver for
    the ARM architecture.
    
    Signed-off-by: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Joachim Eastwood <manabian@gmail.com>
    Tested-by: Joachim Eastwood <manabian@gmail.com>

commit 32f32d982f655dd191858406b11e50219a0ee01e
Author: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
Date:   Tue Feb 9 22:54:26 2016 -0300

    clocksource/drivers/lpc32xx: Support periodic mode
    
    This commit adds the support for periodic mode. This is done by not
    setting the MR0S (Stop on TnMR0) bit on MCR, thus allowing
    interrupts to be periodically generated on MR0 matches.
    
    In order to do this, move the initial configuration that is specific to
    the one-shot mode to set_state_oneshot().
    
    Signed-off-by: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Joachim Eastwood <manabian@gmail.com>
    Tested-by: Joachim Eastwood <manabian@gmail.com>

commit 751db1a6eaec3d266ccfe3f0d11323b7c82486bf
Author: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
Date:   Tue Feb 9 22:54:25 2016 -0300

    clocksource/drivers/lpc32xx: Don't use the prescaler counter for clockevents
    
    This commit switches the clockevents one-shot current implementation
    to avoid using the prescaler counter. The clockevents timer currently
    uses MR0=1, PR=ticks; and after this commit is uses MR0=ticks, PR=0.
    
    While using the prescaler with PR=1 works fine in one-shot mode,
    it seems it doesn't work as expected in periodic mode.
    
    By using the only match channel register (MR0) for the timer we make
    the periodic mode introduction easier, and consistent with one-shot mode.
    
    Signed-off-by: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Joachim Eastwood <manabian@gmail.com>
    Tested-by: Joachim Eastwood <manabian@gmail.com>

commit 522ed95c26cd03b768018e441bbc0ff656e30fe4
Author: Shawn Lin <shawn.lin@rock-chips.com>
Date:   Mon Feb 15 09:02:09 2016 +0800

    clocksource/drivers/rockchip: Add err handle for rk_timer_init
    
    Currently rockchip_timer doesn't do some basic cleanup work when
    failing to init the timer. Let's add err handle routine to deal
    with all the err cases.
    
    Signed-off-by: Shawn Lin <shawn.lin@rock-chips.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e392d603f61767cb2de4d82bb55a035918f8342c
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Mon Feb 1 12:00:48 2016 +0000

    clocksource/drivers/arm_arch_timer: Enable and verify MMIO access
    
    So far, we have been blindly assuming that having access to a
    memory-mapped timer frame implies that the individual elements of that
    frame frame are already enabled. Whilst it's the firmware's job to give
    us non-secure access to frames in the first place, we should not rely
    on implementations always being generous enough to also configure CNTACR
    for those non-secure frames (e.g. [1]).
    
    Explicitly enable feature-level access per-frame, and verify that the
    access we want is really implemented before trying to make use of it.
    
    [1]:https://github.com/ARM-software/tf-issues/issues/170
    
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>
    Tested-by: Stephen Boyd <sboyd@codeaurora.org>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 31c128b66e5b28f468076e4f3ca3025c35342041
Author: Eugenia Emantayev <eugenia@mellanox.com>
Date:   Wed Feb 17 17:24:23 2016 +0200

    net/mlx4_en: Choose time-stamping shift value according to HW frequency
    
    Previously, the shift value used for time-stamping was constant and didn't
    depend on the HW chip frequency. Change that to take the frequency into account
    and calculate the maximal value in cycles per wraparound of ten seconds. This
    time slot was chosen since it gives a good accuracy in time synchronization.
    
    Algorithm for shift value calculation:
     * Round up the maximal value in cycles to nearest power of two
    
     * Calculate maximal multiplier by division of all 64 bits set
       to above result
    
     * Then, invert the function clocksource_khz2mult() to get the shift from
       maximal mult value
    
    Fixes: ec693d47010e ('net/mlx4_en: Add HW timestamping (TS) support')
    Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
    Reviewed-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e835a65f7ab143acf9aee6f9a98ef1c7afd2a835
Merge: 0cbb0b92689a 37eda9df5bd8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Feb 13 08:18:21 2016 -0800

    Merge tag 'arc-4.5-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc
    
    Pull ARC fixes from Vineet Gupta:
     "I've been sitting on some of these fixes for a while.
    
       - Corner case of returning to delay slot from interrupt
       - Changing default interrupt prioiry level
       - Kconfig'ize support for super pages
       - Other minor fixes"
    
    * tag 'arc-4.5-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc:
      ARC: mm: Introduce explicit super page size support
      ARCv2: intc: Allow interruption by lowest priority interrupt
      ARCv2: Check for LL-SC livelock only if LLSC is enabled
      ARC: shrink cpuinfo by not saving full timer BCR
      ARCv2: clocksource: Rename GRTC -> GFRC ...
      ARCv2: STAR 9000950267: Handle return from intr to Delay Slot #2

commit 3ccb4fd8f492f99aece21acc1bd6142275f26236
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Jan 27 22:29:36 2016 -0800

    Drivers: hv: vmbus: don't manipulate with clocksources on crash
    
    clocksource_change_rating() involves mutex usage and can't be called
    in interrupt context. It also makes sense to avoid doing redundant work
    on crash.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27853751e20c1d4c3d060210d38cc0b63ac0c991
Author: Roman Volkov <rvolkov@v1ros.org>
Date:   Fri Jan 1 16:24:41 2016 +0300

    clocksource/drivers/vt8500: Increase the minimum delta
    
    [ Upstream commit f9eccf24615672896dc13251410c3f2f33a14f95 ]
    
    The vt8500 clocksource driver declares itself as capable to handle the
    minimum delay of 4 cycles by passing the value into
    clockevents_config_and_register(). The vt8500_timer_set_next_event()
    requires the passed cycles value to be at least 16. The impact is that
    userspace hangs in nanosleep() calls with small delay intervals.
    
    This problem is reproducible in Linux 4.2 starting from:
    c6eb3f70d448 ('hrtimer: Get rid of hrtimer softirq')
    
    From Russell King, more detailed explanation:
    
    "It's a speciality of the StrongARM/PXA hardware. It takes a certain
    number of OSCR cycles for the value written to hit the compare registers.
    So, if a very small delta is written (eg, the compare register is written
    with a value of OSCR + 1), the OSCR will have incremented past this value
    before it hits the underlying hardware. The result is, that you end up
    waiting a very long time for the OSCR to wrap before the event fires.
    
    So, we introduce a check in set_next_event() to detect this and return
    -ETIME if the calculated delta is too small, which causes the generic
    clockevents code to retry after adding the min_delta specified in
    clockevents_config_and_register() to the current time value.
    
    min_delta must be sufficient that we don't re-trip the -ETIME check - if
    we do, we will return -ETIME, forward the next event time, try to set it,
    return -ETIME again, and basically lock the system up. So, min_delta
    must be larger than the check inside set_next_event(). A factor of two
    was chosen to ensure that this situation would never occur.
    
    The PXA code worked on PXA systems for years, and I'd suggest no one
    changes this mechanism without access to a wide range of PXA systems,
    otherwise they're risking breakage."
    
    Cc: stable@vger.kernel.org
    Cc: Russell King <linux@arm.linux.org.uk>
    Acked-by: Alexey Charkov <alchark@gmail.com>
    Signed-off-by: Roman Volkov <rvolkov@v1ros.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit bb0395416bd0cd4f230923ca7e0108b4ca246ab5
Author: Roman Volkov <rvolkov@v1ros.org>
Date:   Fri Jan 1 16:24:41 2016 +0300

    clocksource/drivers/vt8500: Increase the minimum delta
    
    commit f9eccf24615672896dc13251410c3f2f33a14f95 upstream.
    
    The vt8500 clocksource driver declares itself as capable to handle the
    minimum delay of 4 cycles by passing the value into
    clockevents_config_and_register(). The vt8500_timer_set_next_event()
    requires the passed cycles value to be at least 16. The impact is that
    userspace hangs in nanosleep() calls with small delay intervals.
    
    This problem is reproducible in Linux 4.2 starting from:
    c6eb3f70d448 ('hrtimer: Get rid of hrtimer softirq')
    
    From Russell King, more detailed explanation:
    
    "It's a speciality of the StrongARM/PXA hardware. It takes a certain
    number of OSCR cycles for the value written to hit the compare registers.
    So, if a very small delta is written (eg, the compare register is written
    with a value of OSCR + 1), the OSCR will have incremented past this value
    before it hits the underlying hardware. The result is, that you end up
    waiting a very long time for the OSCR to wrap before the event fires.
    
    So, we introduce a check in set_next_event() to detect this and return
    -ETIME if the calculated delta is too small, which causes the generic
    clockevents code to retry after adding the min_delta specified in
    clockevents_config_and_register() to the current time value.
    
    min_delta must be sufficient that we don't re-trip the -ETIME check - if
    we do, we will return -ETIME, forward the next event time, try to set it,
    return -ETIME again, and basically lock the system up. So, min_delta
    must be larger than the check inside set_next_event(). A factor of two
    was chosen to ensure that this situation would never occur.
    
    The PXA code worked on PXA systems for years, and I'd suggest no one
    changes this mechanism without access to a wide range of PXA systems,
    otherwise they're risking breakage."
    
    Cc: Russell King <linux@arm.linux.org.uk>
    Acked-by: Alexey Charkov <alchark@gmail.com>
    Signed-off-by: Roman Volkov <rvolkov@v1ros.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 9282d8b196725d802a57a757e78a3c74cccb9708
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Nov 30 12:30:30 2015 +1100

    time: Avoid signed overflow in timekeeping_get_ns()
    
    [ Upstream commit 35a4933a895927990772ae96fdcfd2f806929ee2 ]
    
    1e75fa8 "time: Condense timekeeper.xtime into xtime_sec" replaced a call to
    clocksource_cyc2ns() from timekeeping_get_ns() with an open-coded version
    of the same logic to avoid keeping a semi-redundant struct timespec
    in struct timekeeper.
    
    However, the commit also introduced a subtle semantic change - where
    clocksource_cyc2ns() uses purely unsigned math, the new version introduces
    a signed temporary, meaning that if (delta * tk->mult) has a 63-bit
    overflow the following shift will still give a negative result.  The
    choice of 'maxsec' in __clocksource_updatefreq_scale() means this will
    generally happen if there's a ~10 minute pause in examining the
    clocksource.
    
    This can be triggered on a powerpc KVM guest by stopping it from qemu for
    a bit over 10 minutes.  After resuming time has jumped backwards several
    minutes causing numerous problems (jiffies does not advance, msleep()s can
    be extended by minutes..).  It doesn't happen on x86 KVM guests, because
    the guest TSC is effectively frozen while the guest is stopped, which is
    not the case for the powerpc timebase.
    
    Obviously an unsigned (64 bit) overflow will only take twice as long as a
    signed, 63-bit overflow.  I don't know the time code well enough to know
    if that will still cause incorrect calculations, or if a 64-bit overflow
    is avoided elsewhere.
    
    Still, an incorrect forwards clock adjustment will cause less trouble than
    time going backwards.  So, this patch removes the potential for
    intermediate signed overflow.
    
    Cc: stable@vger.kernel.org  (3.7+)
    Suggested-by: Laurent Vivier <lvivier@redhat.com>
    Tested-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 1b69e00de62060e7426702dd5799d88953b96757
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Nov 30 12:30:30 2015 +1100

    time: Avoid signed overflow in timekeeping_get_ns()
    
    commit 35a4933a895927990772ae96fdcfd2f806929ee2 upstream.
    
    1e75fa8 "time: Condense timekeeper.xtime into xtime_sec" replaced a call to
    clocksource_cyc2ns() from timekeeping_get_ns() with an open-coded version
    of the same logic to avoid keeping a semi-redundant struct timespec
    in struct timekeeper.
    
    However, the commit also introduced a subtle semantic change - where
    clocksource_cyc2ns() uses purely unsigned math, the new version introduces
    a signed temporary, meaning that if (delta * tk->mult) has a 63-bit
    overflow the following shift will still give a negative result.  The
    choice of 'maxsec' in __clocksource_updatefreq_scale() means this will
    generally happen if there's a ~10 minute pause in examining the
    clocksource.
    
    This can be triggered on a powerpc KVM guest by stopping it from qemu for
    a bit over 10 minutes.  After resuming time has jumped backwards several
    minutes causing numerous problems (jiffies does not advance, msleep()s can
    be extended by minutes..).  It doesn't happen on x86 KVM guests, because
    the guest TSC is effectively frozen while the guest is stopped, which is
    not the case for the powerpc timebase.
    
    Obviously an unsigned (64 bit) overflow will only take twice as long as a
    signed, 63-bit overflow.  I don't know the time code well enough to know
    if that will still cause incorrect calculations, or if a 64-bit overflow
    is avoided elsewhere.
    
    Still, an incorrect forwards clock adjustment will cause less trouble than
    time going backwards.  So, this patch removes the potential for
    intermediate signed overflow.
    
    Suggested-by: Laurent Vivier <lvivier@redhat.com>
    Tested-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    [ luis: backported to 3.16: adjusted context ]
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 51975a203210d3a94a7711651b1045ed0e3514ed
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Nov 30 12:30:30 2015 +1100

    time: Avoid signed overflow in timekeeping_get_ns()
    
    [ Upstream commit 35a4933a895927990772ae96fdcfd2f806929ee2 ]
    
    1e75fa8 "time: Condense timekeeper.xtime into xtime_sec" replaced a call to
    clocksource_cyc2ns() from timekeeping_get_ns() with an open-coded version
    of the same logic to avoid keeping a semi-redundant struct timespec
    in struct timekeeper.
    
    However, the commit also introduced a subtle semantic change - where
    clocksource_cyc2ns() uses purely unsigned math, the new version introduces
    a signed temporary, meaning that if (delta * tk->mult) has a 63-bit
    overflow the following shift will still give a negative result.  The
    choice of 'maxsec' in __clocksource_updatefreq_scale() means this will
    generally happen if there's a ~10 minute pause in examining the
    clocksource.
    
    This can be triggered on a powerpc KVM guest by stopping it from qemu for
    a bit over 10 minutes.  After resuming time has jumped backwards several
    minutes causing numerous problems (jiffies does not advance, msleep()s can
    be extended by minutes..).  It doesn't happen on x86 KVM guests, because
    the guest TSC is effectively frozen while the guest is stopped, which is
    not the case for the powerpc timebase.
    
    Obviously an unsigned (64 bit) overflow will only take twice as long as a
    signed, 63-bit overflow.  I don't know the time code well enough to know
    if that will still cause incorrect calculations, or if a 64-bit overflow
    is avoided elsewhere.
    
    Still, an incorrect forwards clock adjustment will cause less trouble than
    time going backwards.  So, this patch removes the potential for
    intermediate signed overflow.
    
    Cc: stable@vger.kernel.org  (3.7+)
    Suggested-by: Laurent Vivier <lvivier@redhat.com>
    Tested-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit dc799d0179baa7f62d2e73a8217a273ca82adbdf
Merge: 7ab85d4a8516 1ca8ec532fc2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jan 31 15:49:06 2016 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "The timer departement delivers:
    
       - a regression fix for the NTP code along with a proper selftest
       - prevent a spurious timer interrupt in the NOHZ lowres code
       - a fix for user space interfaces returning the remaining time on
         architectures with CONFIG_TIME_LOW_RES=y
       - a few patches to fix COMPILE_TEST fallout"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      tick/nohz: Set the correct expiry when switching to nohz/lowres mode
      clocksource: Fix dependencies for archs w/o HAS_IOMEM
      clocksource: Select CLKSRC_MMIO where needed
      tick/sched: Hide unused oneshot timer code
      kselftests: timers: Add adjtimex SETOFFSET validity tests
      ntp: Fix ADJ_SETOFFSET being used w/ ADJ_NANO
      itimers: Handle relative timers with CONFIG_TIME_LOW_RES proper
      posix-timers: Handle relative timers with CONFIG_TIME_LOW_RES proper
      timerfd: Handle relative timers with CONFIG_TIME_LOW_RES proper
      hrtimer: Handle remaining time proper for TIME_LOW_RES
      clockevents/tcb_clksrc: Prevent disabling an already disabled clock

commit d584f0fb041d86b9605fae1f0ed9e268f217daa9
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 22 14:27:50 2016 +0530

    ARCv2: clocksource: Rename GRTC -> GFRC ...
    
    ... it is now called Global Free Running Counter
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit bbf66d897adf2bb0c310db96c97e8db6369f39e1
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Fri Jan 22 18:31:53 2016 +0100

    clocksource: Allow unregistering the watchdog
    
    Hyper-V vmbus module registers TSC page clocksource when loaded. This is
    the clocksource with the highest rating and thus it becomes the watchdog
    making unloading of the vmbus module impossible.
    Separate clocksource_select_watchdog() from clocksource_enqueue_watchdog()
    and use it on clocksource register/rating change/unregister.
    
    After all, lobotomized monkeys may need some love too.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Dexuan Cui <decui@microsoft.com>
    Cc: K. Y. Srinivasan <kys@microsoft.com>
    Link: http://lkml.kernel.org/r/1453483913-25672-1-git-send-email-vkuznets@redhat.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit d7023e62c5128bf9f150d792a3ea8c758cb431a3
Author: Richard Weinberger <richard@nod.at>
Date:   Mon Jan 25 23:24:19 2016 +0100

    clocksource: Fix dependencies for archs w/o HAS_IOMEM
    
    Not every arch has io memory.
    So, unbreak the build by fixing the dependencies.
    
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Cc: user-mode-linux-devel@lists.sourceforge.net
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1453760661-1444-21-git-send-email-richard@nod.at
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 2be6d9bfef53d185975b44fd808aece36595e83e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Jan 25 17:02:49 2016 +0100

    clocksource: Select CLKSRC_MMIO where needed
    
    The Tegra clocksource implementation uses the clocksource_mmio helper
    functions, but currently can be configured without them, which fails:
    
    drivers/clocksource/built-in.o: In function `tegra20_init_timer':
    :(.init.text+0xac): undefined reference to `clocksource_mmio_init'
    :(.init.text+0x140): undefined reference to `clocksource_mmio_readl_up'
    
    The same problem exists for Digicolor:
    
    drivers/clocksource/built-in.o: In function `digicolor_timer_init':
    :(.init.text+0xfa): undefined reference to `clocksource_mmio_init'
    :(.init.text+0x14c): undefined reference to `clocksource_mmio_readl_down'
    
    I've inspected the Kconfig file to look for other cases that I have not
    yet run into, and added an explicit 'select' to each one to ensure we
    can successfully link the drivers.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1453737776-1960372-1-git-send-email-arnd@arndb.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 5083c54264d21bf9b8a4766068f51581854d772c
Merge: 0c582826a158 0ef917f4fb83
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jan 20 17:55:20 2016 -0800

    Merge tag 'armsoc-cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC cleanups from Olof Johansson:
     "A smallish number of general cleanup commits this release cycle.  Some
      of these are minor tweaks:
    
       - shmobile change of binding for their GIC (using arm,pl390 now)
       - ARCH_RENESAS introduction
       - Misc other renesas updates
    
      There's also a couple of treewide commits from Masahiro Yamada
      cleaning up const/__initconst for SMP operation structs and a switch
      to using "depends on" instead of if-constructs on most of the Kconfig
      platform targets"
    
    * tag 'armsoc-cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc:
      staging: board: armadillo800eva: Use "arm,pl390"
      staging: board: kzm9d: Use "arm,pl390"
      ARM: shmobile: r8a7778 dtsi: Use "arm,pl390" for GIC
      ARM: shmobile: emev2 dtsi: Use "arm,pl390" for GIC
      ARM: shmobile: r8a7740 dtsi: Use "arm,pl390" for GIC
      ARM: shmobile: r7s72100 dtsi: Use "arm,pl390" for GIC
      ARM: use "depends on" for SoC configs instead of "if" after prompt
      ARM/clocksource: use automatic DT probing for ux500 PRCMU
      ARM: use const and __initconst for smp_operations
      ARM: hisi: do not export smp_operations structures
      ARM: mvebu: remove unused mach/gpio.h
      ARM: shmobile: Remove legacy mach/irqs.h
      ARM: shmobile: Introduce ARCH_RENESAS
      MAINTAINERS: Remove link to oss.renesas.com which is closed

commit dcd1bfd50ab6952e8c60fd99d065d5be38b4b8b4
Merge: 747a9b0a08ae 1f16f116b01c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 14 11:45:56 2016 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Ingo Molnar:
     "Three clocksource driver fixes"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/vt8500: Increase the minimum delta
      clocksource/drivers/fsl_ftm_timer: Fix CLKSRC_MMIO dependency
      clocksource/drivers: Fix dependencies for !HAS_IOMEM archs

commit 3e9121950c92a65e33e0163d2ba111b4d9293d4c
Merge: 31ade3b83e18 e32465429490
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Jan 12 10:14:07 2016 -0800

    Merge branch 'treewide/cleanup' into late/tegra
    
    * treewide/cleanup:
      ARM: use "depends on" for SoC configs instead of "if" after prompt
      ARM/clocksource: use automatic DT probing for ux500 PRCMU
      ARM: use const and __initconst for smp_operations
      ARM: hisi: do not export smp_operations structures
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit bd902c536298830e4d126dcf6491b46d3f1bf96e
Author: Andy Lutomirski <luto@kernel.org>
Date:   Tue Dec 29 20:12:24 2015 -0800

    x86/vdso: Disallow vvar access to vclock IO for never-used vclocks
    
    It makes me uncomfortable that even modern systems grant every
    process direct read access to the HPET.
    
    While fixing this for real without regressing anything is a mess
    (unmapping the HPET is tricky because we don't adequately track
    all the mappings), we can do almost as well by tracking which
    vclocks have ever been used and only allowing pages associated
    with used vclocks to be faulted in.
    
    This will cause rogue programs that try to peek at the HPET to
    get SIGBUS instead on most systems.
    
    We can't restrict faults to vclock pages that are associated
    with the currently selected vclock due to a race: a process
    could start to access the HPET for the first time and race
    against a switch away from the HPET as the current clocksource.
    We can't segfault the process trying to peek at the HPET in this
    case, even though the process isn't going to do anything useful
    with the data.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/e79d06295625c02512277737ab55085a498ac5d8.1451446564.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit b4cee21ee057ff3e5c9014fb6a175bd932c5ce62
Merge: ae8a52185e5c 01414888eaf7 1b9f23727abb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 11 18:06:43 2016 -0800

    Merge branches 'timers-core-for-linus' and 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates - and a leftover fix - from Thomas Gleixner:
     "A rather large (commit wise) update from the timer side:
    
       - A bulk update to make compile tests work in the clocksource drivers
    
       - An overhaul of the h8300 timers
    
       - Some more Y2038 work
    
       - A few overflow prevention checks in the timekeeping/ntp code
    
       - The usual pile of fixes and improvements to the various
         clocksource/clockevent drivers and core code"
    
    Also:
     "A single fix for the posix-clock poll code which did not make it into
      4.4"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (84 commits)
      clocksource/drivers/acpi_pm: Convert to pr_* macros
      clocksource: Make clocksource validation work for all clocksources
      timekeeping: Cap adjustments so they don't exceed the maxadj value
      ntp: Fix second_overflow's input parameter type to be 64bits
      ntp: Change time_reftime to time64_t and utilize 64bit __ktime_get_real_seconds
      timekeeping: Provide internal function __ktime_get_real_seconds
      clocksource/drivers/h8300: Use ioread / iowrite
      clocksource/drivers/h8300: Initializer cleanup.
      clocksource/drivers/h8300: Simplify delta handling
      clocksource/drivers/h8300: Fix timer not overflow case
      clocksource/drivers/h8300: Change to overflow interrupt
      clocksource/drivers/lpc32: Correct pr_err() output format
      clocksource/drivers/arm_global_timer: Fix suspend resume
      clocksource/drivers/pistachio: Fix wrong calculated clocksource read value
      clockevents/drivers/arm_global_timer: Use writel_relaxed in gt_compare_set
      clocksource/drivers/dw_apb_timer: Inline apbt_readl and apbt_writel
      clocksource/drivers/dw_apb_timer: Use {readl|writel}_relaxed in critical path
      clocksource/drivers/dw_apb_timer: Fix apbt_readl return types
      clocksource/drivers/tango-xtal: Replace code by clocksource_mmio_init
      clocksource/drivers/h8300: Increase the compilation test coverage
      ...
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      posix-clock: Fix return code on the poll method's error path

commit 88cbfd07119e394b9cbb1a4a764056c4b37e8378
Merge: 4f19b8803bdd 8705d603edd4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 11 15:58:16 2016 -0800

    Merge branch 'x86-asm-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 asm updates from Ingo Molnar:
     "The main changes in this cycle were:
    
       - vDSO and asm entry improvements (Andy Lutomirski)
    
       - Xen paravirt entry enhancements (Boris Ostrovsky)
    
       - asm entry labels enhancement (Borislav Petkov)
    
       - and other misc changes (Thomas Gleixner, me)"
    
    * 'x86-asm-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/vsdo: Fix build on PARAVIRT_CLOCK=y, KVM_GUEST=n
      Revert "x86/kvm: On KVM re-enable (e.g. after suspend), update clocks"
      x86/entry/64_compat: Make labels local
      x86/platform/uv: Include clocksource.h for clocksource_touch_watchdog()
      x86/vdso: Enable vdso pvclock access on all vdso variants
      x86/vdso: Remove pvclock fixmap machinery
      x86/vdso: Get pvclock data from the vvar VMA instead of the fixmap
      x86, vdso, pvclock: Simplify and speed up the vdso pvclock reader
      x86/kvm: On KVM re-enable (e.g. after suspend), update clocks
      x86/entry/64: Bypass enter_from_user_mode on non-context-tracking boots
      x86/asm: Add asm macros for static keys/jump labels
      x86/asm: Error out if asm/jump_label.h is included inappropriately
      context_tracking: Switch to new static_branch API
      x86/entry, x86/paravirt: Remove the unused usergs_sysret32 PV op
      x86/paravirt: Remove the unused irq_enable_sysexit pv op
      x86/xen: Avoid fast syscall path for Xen PV guests

commit f9eccf24615672896dc13251410c3f2f33a14f95
Author: Roman Volkov <rvolkov@v1ros.org>
Date:   Fri Jan 1 16:24:41 2016 +0300

    clocksource/drivers/vt8500: Increase the minimum delta
    
    The vt8500 clocksource driver declares itself as capable to handle the
    minimum delay of 4 cycles by passing the value into
    clockevents_config_and_register(). The vt8500_timer_set_next_event()
    requires the passed cycles value to be at least 16. The impact is that
    userspace hangs in nanosleep() calls with small delay intervals.
    
    This problem is reproducible in Linux 4.2 starting from:
    c6eb3f70d448 ('hrtimer: Get rid of hrtimer softirq')
    
    From Russell King, more detailed explanation:
    
    "It's a speciality of the StrongARM/PXA hardware. It takes a certain
    number of OSCR cycles for the value written to hit the compare registers.
    So, if a very small delta is written (eg, the compare register is written
    with a value of OSCR + 1), the OSCR will have incremented past this value
    before it hits the underlying hardware. The result is, that you end up
    waiting a very long time for the OSCR to wrap before the event fires.
    
    So, we introduce a check in set_next_event() to detect this and return
    -ETIME if the calculated delta is too small, which causes the generic
    clockevents code to retry after adding the min_delta specified in
    clockevents_config_and_register() to the current time value.
    
    min_delta must be sufficient that we don't re-trip the -ETIME check - if
    we do, we will return -ETIME, forward the next event time, try to set it,
    return -ETIME again, and basically lock the system up. So, min_delta
    must be larger than the check inside set_next_event(). A factor of two
    was chosen to ensure that this situation would never occur.
    
    The PXA code worked on PXA systems for years, and I'd suggest no one
    changes this mechanism without access to a wide range of PXA systems,
    otherwise they're risking breakage."
    
    Cc: stable@vger.kernel.org
    Cc: Russell King <linux@arm.linux.org.uk>
    Acked-by: Alexey Charkov <alchark@gmail.com>
    Signed-off-by: Roman Volkov <rvolkov@v1ros.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 03724ac3d48f8f0e3caf1d30fa134f8fd96c94e2
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Jan 8 14:21:31 2016 +0100

    clocksource/drivers/fsl_ftm_timer: Fix CLKSRC_MMIO dependency
    
    Select CLKSRC_MMIO when FSL_FTM_TIMER is enabled. Otherwise it fails to
    compile on i386 with COMPILE_TEST=y.
    
    "
    on i386:
    when CLKSRC_MMIO is not enabled:
    
    drivers/built-in.o: In function `ftm_timer_init':
    fsl_ftm_timer.c:(.init.text+0x6842): undefined reference to `clocksource_mmio_readl_up'
    fsl_ftm_timer.c:(.init.text+0x6855): undefined reference to `clocksource_mmio_init'
    "
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 863ee050726b67db82869e8e4221a7385a28b067
Author: Richard Weinberger <richard@nod.at>
Date:   Sat Jan 2 23:06:36 2016 +0100

    clocksource/drivers: Fix dependencies for !HAS_IOMEM archs
    
    Not every arch has io memory.
    
    So, unbreak the build by fixing the dependencies.
    
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 01414888eaf725a677171605cb051b1c6311e6ab
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Dec 28 15:41:25 2015 +0200

    clocksource/drivers/acpi_pm: Convert to pr_* macros
    
    Like it's already done in one place in the driver, convert the rest to use pr_*
    macros instead of printk(KERN_LEVEL) calls.
    
    While here, join strings to be one string for one line to make grep on them
    easier.
    
    There is no functional change.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1451310085-113182-1-git-send-email-andriy.shevchenko@linux.intel.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 8907dbaa363de87e5c6f48070e3d8b639477d5ba
Merge: 9cdac4a20a96 e32465429490
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Dec 22 13:10:00 2015 -0800

    Merge branch 'treewide/cleanup' into next/soc
    
    Merge in cleanup to avoid internal conflicts with newly added code.
    
    * treewide/cleanup:
      ARM: use "depends on" for SoC configs instead of "if" after prompt
      ARM/clocksource: use automatic DT probing for ux500 PRCMU
      ARM: use const and __initconst for smp_operations
      ARM: hisi: do not export smp_operations structures
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit a25682e2a19788ca1fc989ea079db8c5609cb885
Merge: 8bdd6f545434 c050b45d87ad
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Dec 22 13:02:00 2015 -0800

    Merge tag 'v4.4-next-kconfig' of https://github.com/mbgg/linux-mediatek into next/config64
    
    Enable mediatek clocksource driver by default as otherwise the system
    does not boot.
    
    * tag 'v4.4-next-kconfig' of https://github.com/mbgg/linux-mediatek:
      arm64: mediatek: enable MTK_TIMER
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 1f45f1f33c8c8b96722dbc5e6b7acf74eaa721f7
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Sat Oct 31 18:20:55 2015 +0800

    clocksource: Make clocksource validation work for all clocksources
    
    The clocksource validation which makes sure that the newly read value
    is not smaller than the last value only works if the clocksource mask
    is 64bit, i.e. the counter is 64bit wide. But we want to use that
    mechanism also for clocksources which are less than 64bit wide.
    
    So instead of checking whether bit 63 is set, we check whether the
    most significant bit of the clocksource mask is set in the delta
    result. If it is set, we return 0.
    
    [ tglx: Simplified the implementation, added a comment and massaged
            the commit message ]
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: <linux-arm-kernel@lists.infradead.org>
    Link: http://lkml.kernel.org/r/56349607.6070708@huawei.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 11c7a6c5a3232e2ff1127d80d609daa95df5d5d4
Merge: 3f93c644c92d e32465429490
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Dec 18 17:07:52 2015 +0100

    Merge branch 'treewide/cleanup' into next/multiplatform
    
    The realview multiplatform series has a trivial conflict with
    one of the treewide cleanups, let's just merge that in to
    avoid having to resolve this later.
    
    * treewide/cleanup:
      ARM: use "depends on" for SoC configs instead of "if" after prompt
      ARM/clocksource: use automatic DT probing for ux500 PRCMU
      ARM: use const and __initconst for smp_operations
      ARM: hisi: do not export smp_operations structures
    
    Conflicts:
            arch/arm/mach-integrator/Kconfig

commit fcd71d9cc6e301bdbd71829b79e80168473ca609
Author: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
Date:   Tue Dec 8 14:17:55 2015 +0530

    of: fix declaration of of_io_request_and_map
    
    We are having build failure with linux-next for sparc allmodconfig with
    the error messages:
    
    drivers/built-in.o: In function `meson6_timer_init':
    meson6_timer.c:(.init.text+0x5fe8): undefined reference to `of_io_request_and_map'
    drivers/built-in.o: In function `mtk_timer_init':
    mtk_timer.c:(.init.text+0x6af0): undefined reference to `of_io_request_and_map'
    drivers/built-in.o: In function `asm9260_timer_init':
    asm9260_timer.c:(.init.text+0x6c48): undefined reference to `of_io_request_and_map'
    
    CONFIG_OF is defined for sparc so it is expected that we have a
    definition of of_io_request_and_map() but of/address.c is only compiled
    if it is !SPARC. In other words, CONFIG_OF_ADDRESS is not defined for
    sparc so we get the build failure.
    
    Fixes: e572f844ca66 ("clocksource/drivers/meson6: Add the COMPILE_TEST option")
    Fixes: bec8c4617611 ("clocksource/drivers/mediatek: Add the COMPILE_TEST option")
    Fixes: 4a373b45f94a ("clocksource/drivers/asm9260: Add the COMPILE_TEST option")
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sudip Mukherjee <sudip@vectorindia.org>
    [robh: move include of io.h out of ifdef's]
    Signed-off-by: Rob Herring <robh@kernel.org>

commit ec02b076ceab63f99e5b3d80fd223d777266c236
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Dec 3 10:23:30 2015 -0800

    timekeeping: Cap adjustments so they don't exceed the maxadj value
    
    Thus its been occasionally noted that users have seen
    confusing warnings like:
    
        Adjusting tsc more than 11% (5941981 vs 7759439)
    
    We try to limit the maximum total adjustment to 11% (10% tick
    adjustment + 0.5% frequency adjustment). But this is done by
    bounding the requested adjustment values, and the internal
    steering that is done by tracking the error from what was
    requested and what was applied, does not have any such limits.
    
    This is usually not problematic, but in some cases has a risk
    that an adjustment could cause the clocksource mult value to
    overflow, so its an indication things are outside of what is
    expected.
    
    It ends up most of the reports of this 11% warning are on systems
    using chrony, which utilizes the adjtimex() ADJ_TICK interface
    (which allows a +-10% adjustment). The original rational for
    ADJ_TICK unclear to me but my assumption it was originally added
    to allow broken systems to get a big constant correction at boot
    (see adjtimex userspace package for an example) which would allow
    the system to work w/ ntpd's 0.5% adjustment limit.
    
    Chrony uses ADJ_TICK to make very aggressive short term corrections
    (usually right at startup). Which push us close enough to the max
    bound that a few late ticks can cause the internal steering to push
    past the max adjust value (tripping the warning).
    
    Thus this patch adds some extra logic to enforce the max adjustment
    cap in the internal steering.
    
    Note: This has the potential to slow corrections when the ADJ_TICK
    value is furthest away from the default value. So it would be good to
    get some testing from folks using chrony, to make sure we don't
    cause any troubles there.
    
    Cc: Miroslav Lichvar <mlichvar@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Tested-by: Miroslav Lichvar <mlichvar@redhat.com>
    Reported-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit d33f250af4e67d449f2c748b861ba99d50955469
Author: Yoshinori Sato <ysato@users.sourceforge.jp>
Date:   Sat Dec 5 02:48:18 2015 +0900

    clocksource/drivers/h8300: Use ioread / iowrite
    
    Signed-off-by: Yoshinori Sato <ysato@users.sourceforge.jp>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6f2b611db23404426a2b21b343392dc1d9584f92
Author: Yoshinori Sato <ysato@users.sourceforge.jp>
Date:   Sat Dec 5 02:48:17 2015 +0900

    clocksource/drivers/h8300: Initializer cleanup.
    
    Signed-off-by: Yoshinori Sato <ysato@users.sourceforge.jp>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f37632d1e9ff8445e0d1ea761f4ce7b98e059d75
Author: Yoshinori Sato <ysato@users.sourceforge.jp>
Date:   Sat Dec 5 02:48:16 2015 +0900

    clocksource/drivers/h8300: Simplify delta handling
    
    Signed-off-by: Yoshinori Sato <ysato@users.sourceforge.jp>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2f445e0aa00e3bdbcf6e99b88a6aab54b6b02f2a
Author: Yoshinori Sato <ysato@users.sourceforge.jp>
Date:   Sat Dec 5 02:48:15 2015 +0900

    clocksource/drivers/h8300: Fix timer not overflow case
    
    Signed-off-by: Yoshinori Sato <ysato@users.sourceforge.jp>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2a0ff87774e468e4b146fe5af9ffadf5169424f9
Author: Yoshinori Sato <ysato@users.sourceforge.jp>
Date:   Sat Dec 5 02:48:14 2015 +0900

    clocksource/drivers/h8300: Change to overflow interrupt
    
    Counter overflow detection use for overflow interrupt
    
    Signed-off-by: Yoshinori Sato <ysato@users.sourceforge.jp>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d662ed204357cfcf3b069ba705446f7395b80fc5
Author: Vladimir Zapolskiy <vz@mleia.com>
Date:   Wed Dec 2 08:02:08 2015 +0200

    clocksource/drivers/lpc32: Correct pr_err() output format
    
    If by some reason timerclk is not available, both clockevent and
    clocksource initializations correctly exit, but output of errno to
    kernel log buffer may be confusing:
    
      lpc32xx_clk_init: failed to map system control block registers
      lpc32xx_clocksource_init: clock get failed (4294966779)
      lpc32xx_clockevent_init: clock get failed (4294966779)
    
    Use signed integer output in the correspondent pr_err() string formats:
    
      lpc32xx_clocksource_init: clock get failed (-517)
      lpc32xx_clockevent_init: clock get failed (-517)
    
    Signed-off-by: Vladimir Zapolskiy <vz@mleia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9c9ae5ffee2831c0b8c0b002443b093e141d08f1
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Mon Nov 30 20:25:12 2015 +0200

    clocksource/drivers/arm_global_timer: Fix suspend resume
    
    Now the System stall is observed on TI AM437x based board (am437x-gp-evm)
    during resuming from System suspend when ARM Global timer is selected as
    clocksource device (CPUIdle not enabled) - SysRq are working, but nothing
    else.
    
    The reason of stall is that ARM Global timer loses its contexts during
    System suspend:
       GT_CONTROL.TIMER_ENABLE = 0 (unbanked)
       GT_COUNTERx = 0
    
    Hence, update ARM Global timer driver to reflect above behaviour
    - re-enable ARM Global timer on resume (GT_CONTROL.TIMER_ENABLE = 1)
      if not enabled.
    
    CC: Arnd Bergmann <arnd@arndb.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Felipe Balbi <balbi@ti.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 272a25a247ce6d31315856721014635469500e96
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Wed Nov 25 23:42:49 2015 +0800

    clocksource/drivers/pistachio: Fix wrong calculated clocksource read value
    
    Let's assume the counter value is 0xf0000000, the pistachio clocksource
    read cycles function should return ~0x0fffffff but actually it returns
    0xffffffff0fffffff.
    
    That occurs because:
    
            ~(cycle_t)value is different from (cycle_t)~value.
    
    unsigned long val = ~(unsigned long)0xf0000000;
    40049a:       48 b8 ff ff ff 0f ff    movabs $0xffffffff0fffffff,%rax
    
    unsigned long val = (unsigned long)~0xf0000000;
    40049a:       48 c7 45 f8 ff ff ff    movq   $0xfffffff,-0x8(%rbp)
    
    We fix this issue by calculating bitwise-not counter, then cast to
    cycle_t.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 520ddad4e560423a320bc1861792da19b0b879f9
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Thu Nov 26 00:01:52 2015 +0800

    clocksource/drivers/dw_apb_timer: Inline apbt_readl and apbt_writel
    
    It seems gcc can automatically inline apbt_writel() for us, but
    apbt_real isn't inlined. This patch makes them inline to get a trivial
    performance improvement: 4096 rounds of __apbt_read_clocksource() call
    spend time on Marvell BG4CT platform:
    
     before the patch 1275240ns on average
     after the patch 1263240ns on average
    
    so we get 1% performance improvement.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 39d3611f2d8ff5dcba523c9081e6f5e51f066c86
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Thu Nov 26 00:01:53 2015 +0800

    clocksource/drivers/dw_apb_timer: Use {readl|writel}_relaxed in critical path
    
    It's safe to use the relaxed version. From another side, the relaxed io
    accessor macros are available on all architectures now, so we can use
    the relaxed versions to get a trivial system performance improvement,
    we measured time the following functions spent on Marvell BG4CT:
    
    4096 rounds of __apbt_read_clocksource() call:
    
    before the patch: 1263240ns on average
    after the patch: 1250080ns on average
    improved by 1%
    
    4096 rounds of apbt_eoi() call:
    
    before the patch: 1290960ns on average
    after the patch: 1248240ns on average
    
    4096 rounds of apbt_next_event() call:
    
    before the patch: 3333660ns on average
    after the patch: 1322040ns on average
    
    improved by 60%!
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9f4165dc4e9e6dd10627b7b4d4e09c09fc01410c
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Wed Nov 25 23:41:23 2015 +0800

    clocksource/drivers/dw_apb_timer: Fix apbt_readl return types
    
    On Marvell BG4CT platform, we observed the __apbt_read_clocksource()
    return wrong value: Let's assume the APBTMR_N_CURRENT_VALUE value is
    0xf0000000, we got 0xffffffff0fffffff, but it should be 0xfffffff.
    
    This issue should be common on all 64bit platforms. We fix the issue
    by letting aptb_readl() return u32. apbt_writel() is also updated
    to write u32 val rather than unsigned long.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0881841f7e7863ba0d33d4c34ee284cde85e18c4
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Nov 13 10:44:38 2015 +0100

    clocksource/drivers/tango-xtal: Replace code by clocksource_mmio_init
    
    The current code to initialize, register and read the clocksource is
    already factored out in mmio.c via the clocksource_mmio_init function.
    
    Factor out the code with the clocksource_mmio_init function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 46e7c3c6e5c56aadac391f92771e37dc03bec9b8
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Nov 9 15:18:08 2015 +0100

    clocksource/drivers/h8300: Increase the compilation test coverage
    
    Add the COMPILE_TEST option so the drivers can be compiled on different
    architecture with the 'allyesconfig' kernel configuration.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 97a23beb8db9766ed8f673479af4dcc883311504
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Nov 9 14:43:52 2015 +0100

    clocksource/drivers/h8300_timer8: Separate the Kconfig option from the arch
    
    The current Kconfig option is the H8300 arch option. In order to comply to the
    current rule, let's create a specific option for the timer8 and select it
    from the arch's Kconfig.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 157dfadef8323046df32caa4b39b46bf7737ca23
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Nov 12 18:05:11 2015 +0100

    clocksource/drivers/timer_sun5i: Replace code by clocksource_mmio_init
    
    The current code to initialize, register and read the clocksource is
    already factored out in mmio.c via the clocksource_mmio_init function.
    
    The only difference is the readl vs readl_relaxed.
    
    Factor out the code with the clocksource_mmio_init function.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>

commit 05de7ed6795a1826e67fac56051f0ec23a643d38
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Nov 9 10:55:30 2015 +0100

    clocksource/drivers/h8300_timer16: Remove pointless lock
    
    The lock in the timer16_clocksource_read is not needed, remove it.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5019c9023251efd3bfa22b1090d8ad1901914c93
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Nov 9 10:52:35 2015 +0100

    clocksource/drivers/h8300_timer16: Fix irq return value check
    
    The function irq_of_parse_and_map returns zero in case of failure.
    
    Fix the return code test to check against zero.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 903e5fd3f857c978ff8a75ae4bc5c51e6161031c
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Nov 9 10:51:09 2015 +0100

    clocksource/drivers/h8300_timer16: Remove unused fields in timer16_priv
    
    The fields are not used in the code, remove them.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8b24e8d7177257279f842c8169672c1180e6c831
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Nov 9 10:49:14 2015 +0100

    clocksource/drivers/h8300_timer16: Remove unused macros
    
    The macros are no longer used in the code, remove them.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8cbade52715634481cf4fd8ab9d4f091860724e2
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Nov 9 10:46:13 2015 +0100

    clocksource/drivers/h8300_timer16: Remove pointless headers
    
    The headers are not needed, remove them.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit cce483e0ee70c2c9c6ff08e502b6f0bba3e15f62
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 8 23:24:28 2015 +0100

    clocksource/drivers/h8300_timer8: Retrieve the clock rate at init time
    
    The current code retrieves the rate value when the timer is enabled which
    occurs each time a timer is re-armed. Except if the clock frequency has changed
    magically I don't see why this should be done each time.
    
    Retrieve the clock rate value at init time only.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 254d8b5d59516d670111e0ac14d53fed4d61118d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 8 22:39:12 2015 +0100

    clocksource/drivers/h8300_timer8: Remove irq and lock legacy code
    
    The time framawork takes care of disabling the interrupts and takes a lock
    to prevent races.
    
    Remove the legacy code in the driver taking care of the races.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7053fdac76451efe5f16c9e0974dc17fcf29f6d6
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 8 18:07:38 2015 +0100

    clocksource/drivers/h8300_timer8: Remove pointless irq re-entrant safe code
    
    The current code assumes the interrupt function is re-entrant.
    
    That is not correct. An interrupt handler is never invoked concurrently. The
    interrupt line is masked on all processors.
    
    Remove the chewing flags in the code.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 54a0cd5a7e107ba0cf15a4fb876595d0c8a7faab
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 8 17:56:18 2015 +0100

    clocksource/drivers/h8300_timer8: Fix irq return value check
    
    The value returned in case of error for the 'irq_of_parse_and_map' function is
    zero in case of error. Fix the check in the init code.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 1f058d52b3e32b919742d451c673b3ab71c487dc
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 8 17:46:54 2015 +0100

    clocksource/drivers/h8300_timer8: Remove PERIODIC and ONESHOT macro
    
    Specify the delta as parameter for the timer8_clock_event_start function
    instead of using a macro to tell PERIODIC or ONESHOT.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7116ae437fc7380ffc0b9429438bba9de9681024
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 8 17:40:35 2015 +0100

    clocksource/drivers/h8300_timer8: Remove unused macros
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d1f9db13e36de0d66bbc41e65da0dec08907d23a
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 8 17:39:05 2015 +0100

    clocksource/drivers/h8300_timer8: Remove unused headers
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 31221a4bfbf2717c9d8f7a8a1f490ac890fe867f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sat Nov 7 14:26:46 2015 +0100

    clocksource/drivers/h8300_tpu: Remove pointless headers for TPU
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9471f1d95442e35c04d429378fb01a962ebfba55
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sat Nov 7 14:18:51 2015 +0100

    clocksource/drivers/h8300_tpu: Remove unused macros
    
    Some macros are unused, delete them.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8c09b7d6ba91ece6d10c7703f5cb201ff3265771
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Nov 9 09:02:38 2015 +0100

    clocksource/drivers/h8300_timer8: Fix compilation error with dev_warn
    
    The dev_warn is using the platform driver which was removed in the previous
    patch.
    
    Let's replace dev_warn by pr_warn.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4633f4cac85ad19f586fdd4f832ebd145190a68c
Author: Yoshinori Sato <ysato@users.sourceforge.jp>
Date:   Sat Nov 7 01:31:44 2015 +0900

    clocksource/drivers/h8300: Cleanup startup and remove module code.
    
    Remove some legacy code and replace it by the clksrc-of code.
    
    Do some cleanup and code consolidation.
    
    Signed-off-by: Yoshinori Sato <ysato@users.sourceforge.jp>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9115df89d12c2cf6db080a7ee57cd076f8416e4a
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Thu Nov 5 10:32:06 2015 +0800

    clocksource/drivers/dw_apb_timer_of: Implement ARM delay timer
    
    Implement an ARM delay timer to be used for udelay(). This allows us to
    skip the delay loop calibration at boot on Marvell BG2, BG2Q, BG2CD
    platforms. And after this patch, udelay() will be unaffected by CPU
    frequency changes.
    
    Note: Although in case there are several possible delay timers, we may
    not select the "best" delay timer. Take one Marvell Berlin platform for
    example: we have arch timer and dw-apb timer. The arch timer freq is
    25MHZ while the dw-apb timer freq is 100MHZ, current selection would
    choose the dw-apb timer. But the dw apb timer is on the APB bus while
    arch timer sits in CPU, the cost of accessing the apb timer is higher
    than the arch timer. We could introduce "rating" concept to delay
    timer, but this approach "brings a lot of complexity and workarounds
    in the code for a small benefit" as pointed out by Daniel.
    
    Later, Arnd pointed out "However, we could argue that this actually
    doesn't matter at all, because the entire point of the ndelay()/
    udelay()/mdelay() functions is to waste CPU cycles doing not much at
    all, so we can just as well waste them reading the timer register
    than spinning on the CPU reading the arch timer more often.", so we
    just simply register the dw apb base delay timer.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0901f18432db704b7622c969a09fba9846e4cfcd
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Wed Nov 4 14:21:42 2015 +0100

    clocksource/drivers/Kconfig: Add missing GENERIC_CLOCKEVENTS dependency
    
    In order to compile on all arch without error with 'allyesconfig' make
    sure the platform selected the GENERIC_CLOCKEVENTS. Without this patch
    the new added drivers will prevent the kernel to compile on PARISC.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ef49336bbd15bd4ffbdcf81501d25abcd87f16ab
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Nov 2 09:51:02 2015 +0100

    clocksource/drivers/fsl-ftm: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 778c5696b93f45c3d11442150e2634f454bb5213
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 1 21:57:05 2015 +0100

    clocksource/drivers/samsung-pwm: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 39366ef42194b58519274afc35f4a9282fb05931
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 1 21:51:30 2015 +0100

    clocksource/drivers/exynos_mct: Fix Kconfig and add COMPILE_TEST option
    
    Let the platform's Kconfig to select the clock instead of having a reverse
    dependency from the driver to the platform options.
    
    Add the COMPILE_TEST option for the compilation test coverage. Due to the
    non portable 'delay' code, this driver is only compilable on ARM.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>

commit 1becd6edea0c2849bc1a585d8c549d611517dd76
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 1 21:16:01 2015 +0100

    clocksource/drivers/prcmu: Fix Kconfig and add COMPILE_TEST option
    
    Let the platform's Kconfig to select the clock instead of having a reverse
    dependency from the driver to the platform options.
    
    Add the COMPILE_TEST option for the compilation test coverage.
    
    This change is debatable as the option itself in the Kconfig allows to
    select the driver for the platform or not. This change will make the prcmu
    timer always selected.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>

commit 703296530609ef37e22e715c9f5438d60a7ec11f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Nov 1 21:11:28 2015 +0100

    clocksource/drivers/nomadik_mtu: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Due to the non portable code for the delay timer, this option is only
    available for the ARM architecture.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ddcf48c776845b9b83e7ab514b54220358993a6f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sat Oct 31 21:44:52 2015 +0100

    clocksource/drivers/lpc32xx: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b9755841e7b2280b94d72a7f42a0d2062a43b201
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sat Oct 31 21:41:23 2015 +0100

    clocksource/drivers/asm9260: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 57f49318f9b1a083bcada14505c4c5397b9dd8f2
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sat Oct 31 21:39:03 2015 +0100

    clocksource/drivers/cadence_ttc: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    The driver depends on the common clock framework, thus the dependency added
    on COMMON_CLK.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b4bdf7ef301655b85875c9cf04f93a54bd763f97
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sat Oct 31 20:23:54 2015 +0100

    clocksource/drivers/vt8500: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 351bb99b71048529f6977389859a9f83fb2115ab
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sat Oct 31 20:20:43 2015 +0100

    clocksource/drivers/vt8500: Remove unneeded header
    
    Remove the <asm/time.h> header inclusion which is pointless.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit adce4bc8311f43dd0c2207eae841f925f3a6fcf2
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sat Oct 31 20:13:09 2015 +0100

    clocksource/drivers/tegra2: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Due to the non portable code for the delay timer, this option is only
    available for the ARM architecture.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f0c5afb787cfc800f7678f614d746b9bd2f18d01
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sat Oct 31 17:01:46 2015 +0100

    clocksource/drivers/sun5i: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    The driver depends on the common clock framework, thus the dependency added
    on COMMON_CLK.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b4fcd48b887eb4bb4511b17ed65d2588602a938a
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 30 22:39:00 2015 +0100

    clocksource/drivers/sun4i: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5b097f6ba57fb4a8e7da11147048f7e1c898bc29
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 30 22:35:00 2015 +0100

    clocksource/drivers/dw_apb: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e6c1db13f955a7b2091d047dc8c294717e0d1a8f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 30 22:32:10 2015 +0100

    clocksource/drivers/digicolor: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c916554971fdfda3d34259851684a76ece5f85d1
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 30 22:28:31 2015 +0100

    clocksource/drivers/orion: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    The driver is using the atomic_io API which is not portable, so the
    compilation is restricted to ARM only.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0b7a7bb70562960834f4c2b7ed703f06dbb0c7e8
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 30 22:07:39 2015 +0100

    clocksource/drivers/meson6: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9519e80c755592b3527f435497521563d158649d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 30 20:30:34 2015 +0100

    clocksource/drivers/armada-370-xp: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Due to the non portable 'delay' code, the compilation is restricted to the
    ARM architecture only.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 40ada2aac5e3a3c38f295d4e37b182fc4feff723
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 30 17:58:47 2015 +0100

    clocksource/drivers/rockchip: Add COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Due to the dsb() usage in the driver, this driver is only compilable on
    ARM and ARM64.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fbca9eabe9b6c7602c13b0d671f58f62c1a15d4d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 30 17:53:27 2015 +0100

    clocksource/drivers/mediatek: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit dfdb16525b1093328617c15d57593ef4c4759d7a
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 30 17:28:13 2015 +0100

    clocksource/drivers/pistachio: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5a7351f0e156d1b359b5662d4475bd295f0617d9
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Oct 29 20:54:19 2015 +0100

    clocksource/drivers/tango: Add COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5ae996cbee445e899915d16903f140d064b53cc7
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 9 17:47:32 2015 +0200

    clocksource/drivers/pxa_timer: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 389d9b5841b031103208f1836bcb49a0710531ed
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 9 15:48:38 2015 +0200

    clocksource/drivers/pxa_timer: Move the Kconfig rule
    
    Instead of having the clocksource's Kconfig depending on the arch, let the
    arch to select the timer it needs.
    
    The CLKSRC_OF dependency is removed because already selected by the
    ARCH_PXA, and it is added for SA1100.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit baacaf8338516d107b568ae727a47855c7fe6b51
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 9 15:36:28 2015 +0200

    clocksource/drivers/st_lpc: Add the COMPILE_TEST option
    
    Increase the compilation test coverage by adding the COMPILE_TEST option.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2ffdf71b83bfe5df46f959029c3aad1fd5c298e6
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 9 15:33:06 2015 +0200

    clocksource/drivers/st_lpc: Fix Kconfig dependency
    
    Change the Kconfig selection rule by letting the STI arch to select
    the timer.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Coquelin <maxime.coquelin@st.com>

commit 3dc0e9f6fda39d1f9c893806bc971ec4ee4939fa
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Oct 9 11:10:43 2015 +0200

    clocksource/drivers/qcom: Make COMPILE_TEST enabled for ARM architecture
    
    In order to be consistent with the rest of the drivers compilation, let's
    introduce the COMPILE_TEST option. Unfortunately, the delay.h code is not
    portable, so the compilation test coverage will be restricted to the ARM
    architecture.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 23b8f81f3890edd06bcabdaac33ff5c087114c59
Author: Caesar Wang <wxt@rock-chips.com>
Date:   Fri Sep 25 10:14:55 2015 +0800

    clocksource/drivers/rockchip: Remove dsb() usage
    
    The dsb() instruction is pointless in this code.
    
    Remove it.
    
    That also fixes the ARM64 compilation issue.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Tested-by: Caesar Wang <wxt@rock-chips.com>

commit 364eba4b3a58a3e9af5a1355f4131a58cd1f3b8d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Thu Oct 29 18:33:47 2015 +0100

    time: Define dummy functions for the generic sched clock
    
    When we try to compile a clocksource driver with the COMPILE_TEST option,
    we can't select the GENERIC_SCHED_CLOCK because the sched_clock() symbol
    will be duplicated with the one defined for the x86.
    
    In order to fix that, we don't select the GENERIC_SCHED_CLOCK in the
    driver Kconfig's file but we define some empty functions for the different
    symbols in order to prevent the unresolved ones.
    
    This patch fixes the COMPILE_TEST option for the compile test coverage for
    the clocksource drivers. Without this patch, we can't add the COMPILE_TEST
    option for the clocksource drivers using the GENERIC_SCHED_CLOCK.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a0d2216ec0d04ec6bf2a7282774338d5ffb3ff0b
Author: Caesar Wang <wxt@rock-chips.com>
Date:   Fri Sep 25 10:14:56 2015 +0800

    clocksource/drivers/rockchip: Make the driver more readable
    
    Let's checkstyle to clean up the macros with such trivial details.
    
    Signed-off-by: Caesar Wang <wxt@rock-chips.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a3a8908fb02bfa2514750734bfd3afc6c1daeb89
Author: Lucas Stach <dev@lynxeye.de>
Date:   Sun Oct 25 16:40:30 2015 +0100

    clocksource/drivers/tegra: Allow timer irq affinity change
    
    Allow the timer core to change the smp affinity of the broadcast timer
    irq by setting CLOCK_EVT_FEAT_DYNIRQ flag.
    
    This reduces interrupt pressure and wakeups on CPU0 as well as vastly
    reducing the number of timer broadcast IPIs.
    
    Signed-off-by: Lucas Stach <dev@lynxeye.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 11faa20eb43997baae0c72916d8a959efcb6f8c4
Author: Alexey Klimov <alexey.klimov@linaro.org>
Date:   Sun Oct 25 23:21:24 2015 +0000

    clocksource/drivers/mtk_timer: Fix memleak in mtk_timer_init()
    
    Add error path to clear evt struct allocated by kzalloc() in the beginning of
    function mtk_timer_init().
    
    Acked-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Alexey Klimov <alexey.klimov@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6cd7ccaaa84f6d9ee9ed33c66d7492121e2b98fd
Author: Alexey Klimov <alexey.klimov@linaro.org>
Date:   Sun Oct 25 23:21:23 2015 +0000

    clocksource/drivers/mtk_timer: Fix pr_warn() messages in mtk_timer_init
    
    1) Change pr_warn()s to pr_err()s. These messages are actually errors and not
       warnings.
    2) Add missing \n.
    3) Error message for kzalloc() failure is removed per suggestion by Joe Perches.
       There is generic stack_dump() for allocation issues.
    
    Signed-off-by: Alexey Klimov <alexey.klimov@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9a78ec45bd6ac7650a995a9de0912fd75d6b6886
Author: Alexey Klimov <alexey.klimov@linaro.org>
Date:   Sun Oct 25 23:21:22 2015 +0000

    clocksource/drivers/mtk_timer: Add pr_fmt define
    
    It's a bit unclear what subsystem/driver emits some messages to dmesg in
    the function mtk_init_timer(). Use pr_fmt to auto-prefix the messages
    appropriately.
    
    Acked-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Alexey Klimov <alexey.klimov@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 43afc99db9ead0bb8a69833ffb5e6ee2a7fe76b4
Merge: f17ef4959f62 e2bf3e6ecaff
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Dec 13 12:36:23 2015 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Thomas Gleixner:
     "A single fix to unbreak a clocksource driver which has more than 32bit
      counter width"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: Mmio: remove artificial 32bit limitation

commit 80f7273c05b3447c5890ee6eb639d7c49ce100d7
Merge: 31ade3b83e18 e32465429490
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sat Dec 12 00:17:55 2015 +0100

    Merge branch 'treewide/cleanup' into next/cleanup
    
    These are a couple of changes that may conflict with other branches,
    so we're keeping them in a separate branch that can be merged into
    those if necessary.
    
    * treewide/cleanup:
      ARM: use "depends on" for SoC configs instead of "if" after prompt
      ARM/clocksource: use automatic DT probing for ux500 PRCMU
      ARM: use const and __initconst for smp_operations
      ARM: hisi: do not export smp_operations structures

commit d51953b0873358d13b189996e6976dfa12a9b59d
Author: Ingo Molnar <mingo@kernel.org>
Date:   Fri Dec 11 09:01:30 2015 +0100

    x86/platform/uv: Include clocksource.h for clocksource_touch_watchdog()
    
    This build failure triggers on 64-bit allmodconfig:
    
      arch/x86/platform/uv/uv_nmi.c:493:2: error: implicit declaration of function ‘clocksource_touch_watchdog’ [-Werror=implicit-function-declaration]
    
    which is caused by recent changes exposing a missing clocksource.h include
    in uv_nmi.c:
    
      cc1e24fdb064 x86/vdso: Remove pvclock fixmap machinery
    
    this file got clocksource.h indirectly via fixmap.h - that stealth route
    of header inclusion is now gone.
    
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit e2bf3e6ecaff79c5479682da2dc7b2035e52c5b8
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Dec 10 18:21:41 2015 +0100

    clocksource: Mmio: remove artificial 32bit limitation
    
    The EP93xx is registering a clocksource of 40 bits with
    clocksource_mmio_init() but this is not working because of this
    artificial limitation. It works fine to lift the uppe limit to
    64 bits, and since cycle_t is u64, it should intuitively have been
    like that from the beginning.
    
    Fixes: 000bc17817bf "ARM: ep93xx: switch to GENERIC_CLOCKEVENTS"
    Reported-by: Alexander Sverdlin <alexander.sverdlin@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1449768101-6879-1-git-send-email-linus.walleij@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 390dd67c471a43a8a0f36c7d5177de49e7749c59
Author: Seiichi Ikarashi <s.ikarashi@jp.fujitsu.com>
Date:   Thu Sep 10 18:01:56 2015 +0900

    clocksource: Add CPU info to clocksource watchdog reporting
    
    The clocksource watchdog reporting was improved by 0b046b217ad4c6.
    I want to add the info of CPU where the watchdog detects a
    deviation because it is necessary to identify the trouble spot
    if the clocksource is TSC.
    
    Signed-off-by: Seiichi Ikarashi <s.ikarashi@jp.fujitsu.com>
    [jstultz: Tweaked commit message]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 35a4933a895927990772ae96fdcfd2f806929ee2
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Mon Nov 30 12:30:30 2015 +1100

    time: Avoid signed overflow in timekeeping_get_ns()
    
    1e75fa8 "time: Condense timekeeper.xtime into xtime_sec" replaced a call to
    clocksource_cyc2ns() from timekeeping_get_ns() with an open-coded version
    of the same logic to avoid keeping a semi-redundant struct timespec
    in struct timekeeper.
    
    However, the commit also introduced a subtle semantic change - where
    clocksource_cyc2ns() uses purely unsigned math, the new version introduces
    a signed temporary, meaning that if (delta * tk->mult) has a 63-bit
    overflow the following shift will still give a negative result.  The
    choice of 'maxsec' in __clocksource_updatefreq_scale() means this will
    generally happen if there's a ~10 minute pause in examining the
    clocksource.
    
    This can be triggered on a powerpc KVM guest by stopping it from qemu for
    a bit over 10 minutes.  After resuming time has jumped backwards several
    minutes causing numerous problems (jiffies does not advance, msleep()s can
    be extended by minutes..).  It doesn't happen on x86 KVM guests, because
    the guest TSC is effectively frozen while the guest is stopped, which is
    not the case for the powerpc timebase.
    
    Obviously an unsigned (64 bit) overflow will only take twice as long as a
    signed, 63-bit overflow.  I don't know the time code well enough to know
    if that will still cause incorrect calculations, or if a 64-bit overflow
    is avoided elsewhere.
    
    Still, an incorrect forwards clock adjustment will cause less trouble than
    time going backwards.  So, this patch removes the potential for
    intermediate signed overflow.
    
    Cc: stable@vger.kernel.org  (3.7+)
    Suggested-by: Laurent Vivier <lvivier@redhat.com>
    Tested-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 9d2aa8c7961ae9af5f75af2dc171dd4e4f441e89
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Dec 1 15:00:24 2015 +0100

    ARM/clocksource: use automatic DT probing for ux500 PRCMU
    
    The ARM core kernel already calls clocksource_of_init() so why
    go to all the trouble of locating and probing this node in the
    machine. CLOCKSOURCE_OF_DECLARE() will take care of it in the
    clocksource driver, and thus we can also get rid of the
    dangling header file <linux/clksrc-dbx500-prcmu.h>
    
    Suggested-by: Arnd Bergmann <arndb@linaro.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 09a9982016499daeb3fbee5ac8d87797310a565a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Nov 19 11:43:09 2015 +0100

    timekeeping: Lift clocksource cacheline restriction
    
    We cache all hotpath members of a clocksource in the time keeper
    core. So there is no requirement in general to cache line align struct
    clocksource. Remove the enforces alignment.
    
    That allows users which need to wrap struct clocksource into their own
    struct to align the struct without getting extra padding.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Russell King - ARM Linux <linux@arm.linux.org.uk>
    Cc: Marc Gonzalez <marc_gonzalez@sigmadesigns.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Mans Rullgard <mans@mansr.com>
    Cc: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: Nicolas Pitre <nico@linaro.org>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Sebastian Frias <sebastian_frias@sigmadesigns.com>
    Link: http://lkml.kernel.org/r/alpine.DEB.2.11.1511191209000.3898@nanos

commit 34db37c63a08b8f06f8ff15c5c301a26635ddf25
Author: John Stultz <john.stultz@linaro.org>
Date:   Fri Nov 13 13:07:31 2015 -0800

    MAINTAINERS: Add entry for kernel/time/alarmtimer.c
    
    I've been missing patches against alarmtimer.c due to
    a lack of a proper entry for it in the MAINTAINERS file.
    
    So update MAINTAINERS to fix this, adding it in with the
    timekeeping, ntp and core clocksource logic I share with
    Thomas.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 707b4f493e77638387f29d5ea35e383c418e710d
Merge: 4143fc83bb0c 3da6d49e8471
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Nov 21 10:26:24 2015 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "Two timer fixlets from Arnd:
    
       - Use proper constant size in the FSL timer driver
       - Prevent a build error for legacy platforms"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: Disallow drivers for ARCH_USES_GETTIMEOFFSET
      clocksource/fsl: Avoid harmless 64-bit warnings

commit 3f9808099be442aaca2b9ba5c7ef7c67c6382c23
Author: John Stultz <john.stultz@linaro.org>
Date:   Mon Sep 14 18:05:20 2015 -0700

    clocksource: Fix abs() usage w/ 64bit values
    
    commit 67dfae0cd72fec5cd158b6e5fb1647b7dbe0834c upstream.
    
    This patch fixes one cases where abs() was being used with 64-bit
    nanosecond values, where the result may be capped at 32-bits.
    
    This potentially could cause watchdog false negatives on 32-bit
    systems, so this patch addresses the issue by using abs64().
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Link: http://lkml.kernel.org/r/1442279124-7309-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit add68d6aa9e2492e51707ca603ada5b26c626757
Author: Chris Bainbridge <chris.bainbridge@gmail.com>
Date:   Thu Nov 12 18:05:37 2015 +0000

    ACPI / SMBus: Fix boot stalls / high CPU caused by reentrant code
    
    In the SBS initialisation, a reentrant call to wait_event_timeout()
    causes an intermittent boot stall of several minutes usually following
    the "Switching to clocksource tsc" message. Another symptom of this bug
    is high CPU usage from programs (Firefox, upowerd) querying the battery
    state. This is caused by:
    
     1. drivers/acpi/sbshc.c wait_transaction_complete() calls
        wait_event_timeout():
    
            if (wait_event_timeout(hc->wait, smb_check_done(hc),
                                   msecs_to_jiffies(timeout)))
    
     2. ___wait_event sets task state to uninterruptible
    
     3. ___wait_event calls the "condition" smb_check_done()
    
     4. smb_check_done (sbshc.c) calls through to ec_read() in
        drivers/acpi/ec.c
    
     5. ec_guard() is reached which calls wait_event_timeout()
    
            if (wait_event_timeout(ec->wait,
                                   ec_transaction_completed(ec),
                                   guard))
    
        ie. wait_event_timeout() is being called again inside evaluation of
        the previous wait_event_timeout() condition
    
     5. The EC IRQ handler calls wake_up() and wakes up the sleeping task in
        ec_guard()
    
     6. The task is now in state running even though the wait "condition" is
        still being evaluated
    
     7. The "condition" check returns false so ___wait_event calls
        schedule_timeout()
    
     8. Since the task state is running, the scheduler immediately schedules
        it again
    
     9. This loop usually repeats for around 250 seconds even though the
        original wait_event_timeout was only 1000ms.
    
        The timeout is incorrect because each call to schedule_timeout()
        usually returns immediately, taking less than 1ms, so the jiffies
        timeout counter is not decremented. The task is now stuck in a
        running state, and so is highly likely to be immediately
        rescheduled, which takes less than a jiffy. The loop will never exit
        if all schedule_timeout() calls take less than a jiffy.
    
    Fix this by replacing SMBus reads in the wait_event_timeout condition
    with checks of a boolean value that is updated by the EC query handler.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=107191
    Link: https://lkml.org/lkml/2015/11/6/776
    Signed-off-by: Chris Bainbridge <chris.bainbridge@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 3da6d49e847128378c30292848125cc3e207e5f7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 16 17:51:17 2015 +0100

    clocksource: Disallow drivers for ARCH_USES_GETTIMEOFFSET
    
    We can now select clocksource drivers like ti-32k and CONFIG_OF
    on ancient machines that still use gettimeoffset, and the combination
    results in a link error.
    
    arch/arm/kernel/built-in.o: In function `time_init':
    (.init.text+0xc28): undefined reference to `clocksource_probe'
    
    The reason for this is that the Makefile is hidden behind
    CONFIG_ARCH_USES_GETTIMEOFFSET, but the Kconfig file is not, and
    it has shown up just now because the ti-32k driver was added
    and can be selected using COMPILE_TEST on all platforms.
    
    This patch hides the Kconfig menu in CONFIG_ARCH_USES_GETTIMEOFFSET
    as well.
    
    Fixes: dfedaf105d60 "clocksource: ti-32k: make it depend on GENERIC_CLOCKSOURCE"
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Felipe Balbi <balbi@ti.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/7579471.4N90fYPQOK@wuerfel
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit dde7632ed02382e4bac2b57c66ee2285764f2cd7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Nov 16 17:34:50 2015 +0100

    clocksource/fsl: Avoid harmless 64-bit warnings
    
    The ftm_clockevent_init passes the value of "~0UL" into a function
    that takes a 32-bit argument, which drops the upper 32 bits, as
    gcc warns about on ARM64:
    
    clocksource/fsl_ftm_timer.c: In function 'ftm_clockevent_init':
    clocksource/fsl_ftm_timer.c:206:13: warning: large integer implicitly truncated to unsigned type [-Woverflow]
    
    This was obviously unintended behavior, and is easily avoided by
    using '~0u' as the integer literal, because that is 32-bit wide
    on all architectures.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Xiubo Li <Li.Xiubo@freescale.com>
    Cc: Shawn Guo <shawnguo@kernel.org>
    Cc: Sascha Hauer <kernel@pengutronix.de>
    Cc: Stefan Agner <stefan@agner.ch>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/3990834.xnjhm37Grs@wuerfel
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit a7f4df4e21dd8a8dab96e88acd2c9c5017b83fc6
Author: Alex Smith <alex.smith@imgtec.com>
Date:   Wed Oct 21 09:57:44 2015 +0100

    MIPS: VDSO: Add implementations of gettimeofday() and clock_gettime()
    
    Add user-mode implementations of gettimeofday() and clock_gettime() to
    the VDSO. This is currently usable with 2 clocksources: the CP0 count
    register, which is accessible to user-mode via RDHWR on R2 and later
    cores, or the MIPS Global Interrupt Controller (GIC) timer, which
    provides a "user-mode visible" section containing a mirror of its
    counter registers. This section must be mapped into user memory, which
    is done below the VDSO data page.
    
    When a supported clocksource is not in use, the VDSO functions will
    return -ENOSYS, which causes libc to fall back on the standard syscall
    path.
    
    When support for neither of these clocksources is compiled into the
    kernel at all, the VDSO still provides clock_gettime(), as the coarse
    realtime/monotonic clocks can still be implemented. However,
    gettimeofday() is not provided in this case as nothing can be done
    without a suitable clocksource. This causes the symbol lookup to fail
    in libc and it will then always use the standard syscall path.
    
    This patch includes a workaround for a bug in QEMU which results in
    RDHWR on the CP0 count register always returning a constant (incorrect)
    value. A fix for this has been submitted, and the workaround can be
    removed after the fix has been in stable releases for a reasonable
    amount of time.
    
    A simple performance test which calls gettimeofday() 1000 times in a
    loop and calculates the average execution time gives the following
    results on a Malta + I6400 (running at 20MHz):
    
     - Syscall:    ~31000 ns
     - VDSO (GIC): ~15000 ns
     - VDSO (CP0): ~9500 ns
    
    [markos.chandras@imgtec.com:
    - Minor code re-arrangements in order for mappings to be made
    in the order they appear to the process' address space.
    - Move do_{monotonic, realtime} outside of the MIPS_CLOCK_VSYSCALL ifdef
    - Use gic_get_usm_range so we can do the GIC mapping in the
    arch/mips/kernel/vdso instead of the GIC irqchip driver]
    
    Signed-off-by: Alex Smith <alex.smith@imgtec.com>
    Signed-off-by: Markos Chandras <markos.chandras@imgtec.com>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/11338/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 4bde961e5245bb37dab4831107bbed23e433d55a
Merge: c6de7f1754bd 2eb5f31bc4ea
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 10 16:33:37 2015 -0800

    Merge branch 'for-linus-4.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rw/uml
    
    Pull UML updates from Richard Weinberger:
    
     - a new hrtimer based clocksource by Anton Ivanov
    
     - ptrace() enhancments by Richard Weinberger
    
     - random cleanups and bug fixes all over the place
    
    * 'for-linus-4.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rw/uml:
      um: Switch clocksource to hrtimers
      um: net: replace GFP_KERNEL with GFP_ATOMIC when spinlock is held
      um: Report host OOM more nicely
      um: Simplify STUB_DATA loading
      um: Remove dead symbol from i386 syscall stub
      um: Remove dead code from x86_64 syscall stub
      um: Get rid of open coded NR_SYSCALLS
      um: Store syscall number after syscall_trace_enter()
      um: Define PTRACE_OLDSETOPTIONS

commit a5e1d715a8d0696961d99d31d869aa522f1cad5a
Merge: 64fd8c8a0ff4 d3dc3df6330e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 10 14:48:36 2015 -0800

    Merge tag 'armsoc-cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC cleanups from Olof Johansson:
     "Again we have a sizable (but not huge) cleanup branch with a net delta
      of about -3k lines.
    
      Main contents here is:
    
       - A bunch of development/cleanup of a few PXA boards
       - Removal of bockw platforms on shmobile, since the platform has now
         gone completely multiplatform.  Whee!
       - move of the 32kHz timer on OMAP to a proper timesource
       - Misc cleanup of older OMAP material (incl removal of one board
         file)
       - Switch over to new common PWM lookup support for several platforms
    
      There's also a handful of other cleanups across the tree, but the
      above are the major pieces"
    
    * tag 'armsoc-cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (103 commits)
      ARM: OMAP3: hwmod data: Remove legacy mailbox data and addrs
      ARM: DRA7: hwmod data: Remove spinlock hwmod addrs
      ARM: OMAP4: hwmod data: Remove spinlock hwmod addrs
      ARM: DRA7/AM335x/AM437x: hwmod: Remove gpmc address space from hwmod data
      ARM: Remove __ref on hotplug cpu die path
      ARM: Remove open-coded version of IRQCHIP_DECLARE
      arm: omap2: board-generic: use omap4_local_timer_init for AM437x
      ARM: DRA7/AM335x/AM437x: hwmod: Remove elm address space from hwmod data
      ARM: OMAP: Remove duplicated operand in OR operation
      clocksource: ti-32k: make it depend on GENERIC_CLOCKSOURCE
      ARM: pxa: remove incorrect __init annotation on pxa27x_set_pwrmode
      ARM: pxa: raumfeld: make some variables static
      ARM: OMAP: Change all cpu_is_* occurences to soc_is_* for id.c
      ARM: OMAP2+: Rename cpu_is macros to soc_is
      arm: omap2: timer: limit hwmod usage to non-DT boots
      arm: omap2+: select 32k clocksource driver
      clocksource: add TI 32.768 Hz counter driver
      arm: omap2: timer: rename omap_sync32k_timer_init()
      arm: omap2: timer: always call clocksource_of_init() when DT
      arm: omap2: timer: move realtime_counter_init() around
      ...

commit 2eb5f31bc4ea24bb293e82934cfa1cce9573304b
Author: Anton Ivanov <aivanov@brocade.com>
Date:   Mon Nov 2 16:16:37 2015 +0000

    um: Switch clocksource to hrtimers
    
    UML is using an obsolete itimer call for
    all timers and "polls" for kernel space timer firing
    in its userspace portion resulting in a long list
    of bugs and incorrect behaviour(s). It also uses
    ITIMER_VIRTUAL for its timer which results in the
    timer being dependent on it running and the cpu
    load.
    
    This patch fixes this by moving to posix high resolution
    timers firing off CLOCK_MONOTONIC and relaying the timer
    correctly to the UML userspace.
    
    Fixes:
     - crashes when hosts suspends/resumes
     - broken userspace timers - effecive ~40Hz instead
       of what they should be. Note - this modifies skas behavior
       by no longer setting an itimer per clone(). Timer events
       are relayed instead.
     - kernel network packet scheduling disciplines
     - tcp behaviour especially under load
     - various timer related corner cases
    
    Finally, overall responsiveness of userspace is better.
    
    Signed-off-by: Thomas Meyer <thomas@m3y3r.de>
    Signed-off-by: Anton Ivanov <aivanov@brocade.com>
    [rw: massaged commit message]
    Signed-off-by: Richard Weinberger <richard@nod.at>

commit 7b2a4306f9e7d64bb408a6df3bb419500578068a
Merge: 316dde2fe95b 03f136a2074b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 3 14:13:41 2015 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The timer departement provides:
    
       - More y2038 work in the area of ntp and pps.
    
       - Optimization of posix cpu timers
    
       - New time related selftests
    
       - Some new clocksource drivers
    
       - The usual pile of fixes, cleanups and improvements"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (25 commits)
      timeconst: Update path in comment
      timers/x86/hpet: Type adjustments
      clocksource/drivers/armada-370-xp: Implement ARM delay timer
      clocksource/drivers/tango_xtal: Add new timer for Tango SoCs
      clocksource/drivers/imx: Allow timer irq affinity change
      clocksource/drivers/exynos_mct: Use container_of() instead of this_cpu_ptr()
      clocksource/drivers/h8300_*: Remove unneeded memset()s
      clocksource/drivers/sh_cmt: Remove unneeded memset() in sh_cmt_setup()
      clocksource/drivers/em_sti: Remove unneeded memset()s
      clocksource/drivers/mediatek: Use GPT as sched clock source
      clockevents/drivers/mtk: Fix spurious interrupt leading to crash
      posix_cpu_timer: Reduce unnecessary sighand lock contention
      posix_cpu_timer: Convert cputimer->running to bool
      posix_cpu_timer: Check thread timers only when there are active thread timers
      posix_cpu_timer: Optimize fastpath_timer_check()
      timers, kselftest: Add 'adjtick' test to validate adjtimex() tick adjustments
      timers: Use __fls in apply_slack()
      clocksource: Remove return statement from void functions
      net: sfc: avoid using timespec
      ntp/pps: use y2038 safe types in pps_event_time
      ...

commit f5eab26701999b1aa26d06772e013b11c4a16f6a
Merge: 4bf690d7e09b fe326c5cc07c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 1 11:39:03 2015 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "The last round of minimalistic fixes for clocksource drivers:
    
       - Prevent multiple shutdown of the sh_mtu2 clocksource
    
       - Annotate a bunch of clocksource/schedclock functions with notrace
         to prevent an annoying ftrace recursion issue"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/sh_mtu2: Fix multiple shutdown call issue
      clocksource/drivers/digicolor: Prevent ftrace recursion
      clocksource/drivers/fsl_ftm_timer: Prevent ftrace recursion
      clocksource/drivers/vf_pit_timer: Prevent ftrace recursion
      clocksource/drivers/prima2: Prevent ftrace recursion
      clocksource/drivers/samsung_pwm_timer: Prevent ftrace recursion
      clocksource/drivers/pistachio: Prevent ftrace recursion
      clocksource/drivers/arm_global_timer: Prevent ftrace recursion

commit fe326c5cc07cd265abad29c35c142cfae09889e4
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Wed Oct 28 10:43:23 2015 +0900

    clocksource/drivers/sh_mtu2: Fix multiple shutdown call issue
    
    On the r7s72100 Genmai board the MTU2 driver currently triggers a common
    clock framework WARN_ON(enable_count) when disabling the clock due to
    the MTU2 driver after recent callback rework may call ->set_state_shutdown()
    multiple times. A similar issue was spotted for the TMU driver and fixed in:
    452b132 clocksource/drivers/sh_tmu: Fix traceback spotted in -next
    
    On r7s72100 Genmai v4.3-rc7 built with shmobile_defconfig spits out the
    following during boot:
    
    sh_mtu2 fcff0000.timer: ch0: used for clock events
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 1 at drivers/clk/clk.c:675 clk_core_disable+0x2c/0x6c()
    CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.3.0-rc7 #1
    Hardware name: Generic R7S72100 (Flattened Device Tree)
    Backtrace:
    [<c00133d4>] (dump_backtrace) from [<c0013570>] (show_stack+0x18/0x1c)
    [<c0013558>] (show_stack) from [<c01c7aac>] (dump_stack+0x74/0x90)
    [<c01c7a38>] (dump_stack) from [<c00272fc>] (warn_slowpath_common+0x88/0xb4)
    [<c0027274>] (warn_slowpath_common) from [<c0027400>] (warn_slowpath_null+0x24/0x2c)
    [<c00273dc>] (warn_slowpath_null) from [<c03a9320>] (clk_core_disable+0x2c/0x6c)
    [<c03a92f4>] (clk_core_disable) from [<c03aa0a0>] (clk_disable+0x40/0x4c)
    [<c03aa060>] (clk_disable) from [<c0395d2c>] (sh_mtu2_disable+0x24/0x50)
    [<c0395d08>] (sh_mtu2_disable) from [<c0395d6c>] (sh_mtu2_clock_event_shutdown+0x14/0x1c)
    [<c0395d58>] (sh_mtu2_clock_event_shutdown) from [<c007d7d0>] (clockevents_switch_state+0xc8/0x114)
    [<c007d708>] (clockevents_switch_state) from [<c007d834>] (clockevents_shutdown+0x18/0x28)
    [<c007d81c>] (clockevents_shutdown) from [<c007dd58>] (clockevents_exchange_device+0x70/0x78)
    [<c007dce8>] (clockevents_exchange_device) from [<c007e578>] (tick_check_new_device+0x88/0xe0)
    [<c007e4f0>] (tick_check_new_device) from [<c007daf0>] (clockevents_register_device+0xac/0x120)
    [<c007da44>] (clockevents_register_device) from [<c0395be8>] (sh_mtu2_probe+0x230/0x350)
    [<c03959b8>] (sh_mtu2_probe) from [<c028b6f0>] (platform_drv_probe+0x50/0x98)
    
    Reported-by: Chris Brandt <chris.brandt@renesas.com>
    Fixes: 19a9ffb ("clockevents/drivers/sh_mtu2: Migrate to new 'set-state' interface")
    Cc: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>

commit 4c82f28617ab9ce938118f0b99156a96c64d3da0
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Tue Oct 13 08:48:54 2015 +0530

    ARC: remove @init_time, @init_irq platform callbacks
    
    These are not in use for ARC platforms. Moreover DT mechanims exist to
    probe them w/o explicit platform calls.
    
     - clocksource drivers can use CLOCKSOURCE_OF_DECLARE()
     - intc IRQCHIP_DECLARE() calls + cascading inside DT allows external
       intc to be probed automatically
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit 9b0cf919fa4bdc15e7d1279cf299238ceff0e4b7
Author: John Stultz <john.stultz@linaro.org>
Date:   Mon Sep 14 18:05:20 2015 -0700

    clocksource: Fix abs() usage w/ 64bit values
    
    commit 67dfae0cd72fec5cd158b6e5fb1647b7dbe0834c upstream.
    
    This patch fixes one cases where abs() was being used with 64-bit
    nanosecond values, where the result may be capped at 32-bits.
    
    This potentially could cause watchdog false negatives on 32-bit
    systems, so this patch addresses the issue by using abs64().
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Link: http://lkml.kernel.org/r/1442279124-7309-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    [ luis: backported to 3.16: adjusted context ]
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 76b1ba7feda533a74c5874a1d15bb4039083efc8
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Tue Oct 20 16:02:39 2015 +0800

    clocksource/drivers/digicolor: Prevent ftrace recursion
    
    Having a traceable function in the sched_clock() path leads to a recursion
    within ftrace and a kernel crash.
    
    We should not trace digicolor_timer_sched_read() function. Fix this by adding
    the notrace attribute to this function.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Acked-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bd859a44b2f6749fd82e89dabbaa37f2c8aa33fe
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Tue Oct 20 16:02:40 2015 +0800

    clocksource/drivers/fsl_ftm_timer: Prevent ftrace recursion
    
    Having a traceable function in the sched_clock() path leads to a recursion
    within ftrace and a kernel crash.
    
    We should not trace the ftm_read_sched_clock() function.
    
    Fix this by adding the notrace attribute to this function.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 36361abc8bc14e80f6b4db561665e5e15249c181
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Tue Oct 20 16:02:38 2015 +0800

    clocksource/drivers/vf_pit_timer: Prevent ftrace recursion
    
    Having a traceable function in the sched_clock() path leads to a recursion
    within ftrace and a kernel crash.
    
    We should not trace the pit_read_sched_clock() function. Fix this by adding a
    notrace attribute to this function.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit cdc68ec01853baf3558c6d25f19c869add4a6888
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Tue Oct 20 16:02:37 2015 +0800

    clocksource/drivers/prima2: Prevent ftrace recursion
    
    Currently prima2 timer can be used as a scheduler clock. We properly
    marked sirfsoc_read_sched_clock() as notrace but we then call another
    function sirfsoc_timer_read() that _wasn't_ notrace.
    
    Having a traceable function in the sched_clock() path leads to a recursion
    within ftrace and a kernel crash.
    
    Fix this by adding notrace attribute to the sirfsoc_timer_read() function.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b8725dab66f0b2d57affb33a7f6ca094d9f1f8dd
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Tue Oct 20 16:02:35 2015 +0800

    clocksource/drivers/samsung_pwm_timer: Prevent ftrace recursion
    
    Currently samsung_pwm_timer can be used as a scheduler clock. We properly
    marked samsung_read_sched_clock() as notrace but we then call another
    function samsung_clocksource_read() that _wasn't_ notrace.
    
    Having a traceable function in the sched_clock() path leads to a recursion
    within ftrace and a kernel crash.
    
    Fix this by adding notrace attribute to the samsung_clocksource_read()
    function.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f8af0e9c644caf64d0f42dce816c18346c744a9f
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Tue Oct 20 16:02:36 2015 +0800

    clocksource/drivers/pistachio: Prevent ftrace recursion
    
    Currently pistachio can be used as a scheduler clock. We properly marked
    pistachio_read_sched_clock() as notrace but we then call another function
    pistachio_clocksource_read_cycles() that _wasn't_ notrace.
    
    Having a traceable function in the sched_clock() path leads to a recursion
    within ftrace and a kernel crash.
    
    Fix this by adding notrace attribute to the pistachio_clocksource_read_cycles()
    function.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d6df3576e6b4bcf765f5ace69915b4fa4a7ee1c3
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Tue Oct 20 16:02:34 2015 +0800

    clocksource/drivers/arm_global_timer: Prevent ftrace recursion
    
    Currently arm_global_timer can be used as a scheduler clock. We properly
    marked gt_sched_clock_read() as notrace but we then call another function
    gt_counter_read() that _wasn't_ notrace.
    
    Having a traceable function in the sched_clock() path leads to a recursion
    within ftrace and a kernel crash.
    
    Fix this by adding an extra notrace function to keep other users of
    gt_counter_read() traceable.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d3dc3df6330e4b4d799bef4aac6f934b5e726b1c
Merge: 7b6e28c38f7c ef4da0c1c8f3
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Oct 26 14:35:41 2015 +0900

    Merge tag 'omap-for-v4.4/soc-clean-up' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into next/cleanup
    
    Minimal omap SoC changes for v4.4 merge window. As we've spent quite a
    bit of time sorting out regressions for v4.3 and are very late with
    these, I've kept the changes down to minimum:
    
    - A series of timer changes from Felipe Balbi to get us closer to
      moving the remaining timer code into drivers
    
    - A series of hwmod clean-up changes queued by Paul Walmsley
    
    - SoC detection clean-up to use soc_is instead of cpu_is as CPU is
      within the SoC and is confusing naming. The rest we can now change
      along with the other clean-up
    
    * tag 'omap-for-v4.4/soc-clean-up' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap: (21 commits)
      ARM: OMAP3: hwmod data: Remove legacy mailbox data and addrs
      ARM: DRA7: hwmod data: Remove spinlock hwmod addrs
      ARM: OMAP4: hwmod data: Remove spinlock hwmod addrs
      ARM: DRA7/AM335x/AM437x: hwmod: Remove gpmc address space from hwmod data
      arm: omap2: board-generic: use omap4_local_timer_init for AM437x
      ARM: DRA7/AM335x/AM437x: hwmod: Remove elm address space from hwmod data
      ARM: OMAP: Remove duplicated operand in OR operation
      clocksource: ti-32k: make it depend on GENERIC_CLOCKSOURCE
      ARM: OMAP: Change all cpu_is_* occurences to soc_is_* for id.c
      ARM: OMAP2+: Rename cpu_is macros to soc_is
      arm: omap2: timer: limit hwmod usage to non-DT boots
      arm: omap2+: select 32k clocksource driver
      clocksource: add TI 32.768 Hz counter driver
      arm: omap2: timer: rename omap_sync32k_timer_init()
      arm: omap2: timer: always call clocksource_of_init() when DT
      arm: omap2: timer: move realtime_counter_init() around
      arm: omap2: timer: provide generic sync32k_timer_init function
      arm: omap2: timer: remove __omap_gptimer_init()
      arm: omap2: timer: add a gptimer argument to sync32k_timer_init()
      arm: omap2: timer: get rid of obfuscating macros
      ...
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit e3ed766b4958bf7889539f09aec3f6a72d2c4dd2
Merge: 343ccb040e60 3722ed2380ad
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sun Oct 25 22:55:14 2015 +0100

    Merge branch 'acpi-init'
    
    * acpi-init:
      clocksource: cosmetic: Drop OF 'dependency' from symbols
      clocksource / arm_arch_timer: Convert to ACPI probing
      clocksource: Add new CLKSRC_{PROBE,ACPI} config symbols
      clocksource / ACPI: Add probing infrastructure for ACPI-based clocksources
      irqchip / GIC: Convert the GIC driver to ACPI probing
      irqchip / ACPI: Add probing infrastructure for ACPI-based irqchips
      ACPI: Add early device probing infrastructure

commit 11195a5e5b0665b1cde0c6e629342592240e8ec2
Author: John Stultz <john.stultz@linaro.org>
Date:   Mon Sep 14 18:05:20 2015 -0700

    clocksource: Fix abs() usage w/ 64bit values
    
    commit 67dfae0cd72fec5cd158b6e5fb1647b7dbe0834c upstream.
    
    This patch fixes one cases where abs() was being used with 64-bit
    nanosecond values, where the result may be capped at 32-bits.
    
    This potentially could cause watchdog false negatives on 32-bit
    systems, so this patch addresses the issue by using abs64().
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Link: http://lkml.kernel.org/r/1442279124-7309-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb0f2538039c65f2bb64a9d427dbe9dd7d0f71a6
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Oct 19 16:19:20 2015 +0100

    clocksource/drivers/armada-370-xp: Implement ARM delay timer
    
    Implement an ARM delay timer to be used for udelay() on Armada 37x
    platforms.  This allows us to skip the delay loop calibration at boot,
    saving 180ms on the boot time of the kernel (which is around 10%).
    
    It also means that udelay() will be unaffected by CPU frequency changes
    when cpufreq is enabled on these platforms.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Tested-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>

commit dfedaf105d602a4b30a43c188596418ecf3a3b26
Author: Felipe Balbi <balbi@ti.com>
Date:   Fri Oct 16 16:10:05 2015 -0500

    clocksource: ti-32k: make it depend on GENERIC_CLOCKSOURCE
    
    the new ti 32k clocksource driver should depend on
    GENERIC_CLOCKSOURCE because of its reliance on
    sched_clock_register().
    
    Let's enable that to avoid any possible build errors
    and/or warnings on randbuilds.
    
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit bf4c94490aa4491cca758d633c0e641a4419c920
Author: Felipe Balbi <balbi@ti.com>
Date:   Tue Sep 29 15:10:10 2015 -0500

    arm: omap2: timer: limit hwmod usage to non-DT boots
    
    now that we have a working 32k clocksource driver,
    we can limit HWMOD usage to non-DT boots and rely
    on clocksource_of_init() every time we boot
    with DT.
    
    While at that, also make sure that we don't disable
    the 32-counter device so it gets probed by its driver.
    
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 429ac200c7e1da0cfe2240f0cea18aeaf9a99099
Author: Felipe Balbi <balbi@ti.com>
Date:   Mon Oct 5 11:40:58 2015 -0500

    arm: omap2+: select 32k clocksource driver
    
    Now that we have a 32k clocksource driver, let's
    select it for OMAP2PLUS builds.
    
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit fe851f56d5f5b02a9afca95acde5224c3e73fac1
Author: Felipe Balbi <balbi@ti.com>
Date:   Tue Sep 29 13:55:33 2015 -0500

    clocksource: add TI 32.768 Hz counter driver
    
    Introduce a new clocksource driver for Texas
    Instruments 32.768 Hz device which is available
    on most OMAP-like devices.
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 9c46ffcd521474056629aea580a092559f721b32
Author: Felipe Balbi <balbi@ti.com>
Date:   Tue Sep 29 13:15:02 2015 -0500

    arm: omap2: timer: always call clocksource_of_init() when DT
    
    If booting with DT, let's make sure to always
    call clocksource_of_init() as this will make
    it easier to move timer code to drivers/clocksource
    in the future.
    
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit ccd63ce471c9b69663783e919ca4dba9967cd690
Author: Marc Gonzalez <marc_gonzalez@sigmadesigns.com>
Date:   Fri Oct 9 16:59:18 2015 +0200

    clocksource/drivers/tango_xtal: Add new timer for Tango SoCs
    
    Sigma Designs Tango platforms provide a 27 MHz crystal oscillator.
    Use it for clocksource, sched_clock, and delay_timer.
    
    Signed-off-by: Marc Gonzalez <marc_gonzalez@sigmadesigns.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f1c08c9bc8f475aa242270da30b6cc9232bd19e0
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Wed Oct 14 11:24:17 2015 +0200

    clocksource/drivers/imx: Allow timer irq affinity change
    
    Allow the timer core to change the smp affinity of the broadcast timer
    irq by setting CLOCK_EVT_FEAT_DYNIRQ flag. For this to work the timer
    core needs to be told about the used irq.
    
    This reduces interrupt pressure and wakeups on CPU0 as well as vastly
    reducing the number of timer broadcast IPIs.
    
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 31f7987406497dc65408dee4e84e3f3cc3ffe9cd
Author: Alexey Klimov <alexey.klimov@linaro.org>
Date:   Fri Sep 4 02:49:58 2015 +0300

    clocksource/drivers/exynos_mct: Use container_of() instead of this_cpu_ptr()
    
    Since evt structure is embedded in per-CPU mevt structure it's
    definitely faster to use container_of() to get access to mevt
    if we have evt (for example as incoming function argument) instead
    of more expensive approach with this_cpu_ptr(&percpu_mct_tick).
    this_cpu_ptr() on per-CPU mevt structure leads to access to cp15
    to get cpu id and arithmetic operations.
    Container_of() is cheaper since it's just one asm instruction.
    This should work if used evt pointer is correct and owned by
    local mevt structure.
    
    For example, before this patch set_state_shutdown() looks like:
    
     4a4:   e92d4010        push    {r4, lr}
     4a8:   e3004000        movw    r4, #0
     4ac:   ebfffffe        bl      0 <debug_smp_processor_id>
     4b0:   e3003000        movw    r3, #0
     4b4:   e3404000        movt    r4, #0
     4b8:   e3403000        movt    r3, #0
     4bc:   e7933100        ldr     r3, [r3, r0, lsl #2]
     4c0:   e0844003        add     r4, r4, r3
     4c4:   e59400c0        ldr     r0, [r4, #192]  ; 0xc0
     4c8:   ebffffd4        bl      420 <exynos4_mct_tick_stop.isra.1>
     4cc:   e3a00000        mov     r0, #0
     4d0:   e8bd8010        pop     {r4, pc}
    
    With this patch:
    
     4a4:   e92d4010        push    {r4, lr}
     4a8:   e59000c0        ldr     r0, [r0, #192]  ; 0xc0
     4ac:   ebffffdb        bl      420 <exynos4_mct_tick_stop.isra.1>
     4b0:   e3a00000        mov     r0, #0
     4b4:   e8bd8010        pop     {r4, pc}
    
    Also, for me size of exynos_mct.o decreased from 84588 bytes
    to 83956.
    
    Signed-off-by: Alexey Klimov <alexey.klimov@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>

commit ba49af35be8a41af7f00a37902a2d70764078bc5
Author: Alexey Klimov <alexey.klimov@linaro.org>
Date:   Thu Sep 10 03:38:21 2015 +0300

    clocksource/drivers/h8300_*: Remove unneeded memset()s
    
    Memory for timer16_priv, timer8_priv and tpu_priv structs is
    allocated by devm_kzalloc() in corresponding probe functions
    of drivers.
    No need to zero it one more time.
    
    Signed-off-by: Alexey Klimov <alexey.klimov@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6eeb8c355fbbe66d1d52eadaa588d5651f8cb092
Author: Alexey Klimov <alexey.klimov@linaro.org>
Date:   Thu Sep 10 03:38:20 2015 +0300

    clocksource/drivers/sh_cmt: Remove unneeded memset() in sh_cmt_setup()
    
    Memory for cmt struct is allocated by kzalloc() in sh_cmt_setup.
    
    Signed-off-by: Alexey Klimov <alexey.klimov@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fdbd13105d08fed6a8201549f389e9c12021b67b
Author: Alexey Klimov <alexey.klimov@linaro.org>
Date:   Thu Sep 10 03:38:19 2015 +0300

    clocksource/drivers/em_sti: Remove unneeded memset()s
    
    Memory for cs and ced fields in struct em_sti_priv is allocated
    by devm_kzalloc() in the beginning of em_sti_probe() so they
    don't need to be zeroed one more time in
    em_sti_register_clocksource() and in em_sti_register_clockevent().
    
    Signed-off-by: Alexey Klimov <alexey.klimov@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f14665f63b92f958636b7e7610ec2c9726ea9335
Author: Yingjoe Chen <yingjoe.chen@mediatek.com>
Date:   Mon Jul 13 17:32:46 2015 +0800

    clocksource/drivers/mediatek: Use GPT as sched clock source
    
    When cpu is in deep idle, arch timer will stop counting. Setup GPT as
    sched clock source so it can keep counting in idle.
    
    Signed-off-by: Yingjoe Chen <yingjoe.chen@mediatek.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Stephen Boyd <sboyd@codeaurora.org>
    Acked-by: Matthias Brugger <matthias.bgg@gmail.com>

commit f5128432b08c3e263e1a7ce709d686b1ded51131
Author: Alexander Kuleshov <kuleshovmail@gmail.com>
Date:   Thu Oct 8 23:12:25 2015 +0600

    crypto: jitterentropy - remove unnecessary information from a comment
    
    The clocksource does not provide clocksource_register() function since
    f893598 commit (clocksource: Mostly kill clocksource_register()), so
    let's remove unnecessary information about this function from a comment.
    
    Signed-off-by: Alexander Kuleshov <kuleshovmail@gmail.com>
    Suggested-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit cfed432d7f4114e16e0163bcfe65e96f0c304493
Author: Guillaume Gomez <guillaume1.gomez@gmail.com>
Date:   Wed Sep 23 13:19:19 2015 +0200

    clocksource: Remove return statement from void functions
    
    Signed-off-by: Guillaume Gomez <guillaume1.gomez@gmail.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/CAAOQCfSDgmqSWDBsetau%2ByF8x0%2BDagCF_pfFw0p5xH_BKkKEog@mail.gmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit f3c65c2892cf27cf24ff9161ac9110a04dd57a5e
Merge: a67e5c32aac9 7d8d05d11473
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Oct 8 17:26:27 2015 +0200

    Merge tag 'at91-cleanup-4.4' of git://git.kernel.org/pub/scm/linux/kernel/git/abelloni/linux into next/drivers
    
    Merge "First batch of cleanups for 4.4:" from Alexandre Belloni:
     - properly get the slow clock from timer-atmel-st, tcb_clksrc and pwm-atmel-tcb
     - small fix in an error path for tcb_clksrc
    
    * tag 'at91-cleanup-4.4' of git://git.kernel.org/pub/scm/linux/kernel/git/abelloni/linux:
      misc: atmel_tclib: get and use slow clock
      clocksource: tcb_clksrc: fix setup_clkevents error path
      clocksource: atmel-st: get and use slow clock

commit eed9fb9df47898ea62d71be7dcc3b36d95819a7c
Author: Boris Brezillon <bbrezillon@kernel.org>
Date:   Sun Aug 16 11:23:45 2015 +0200

    clocksource: tcb_clksrc: fix setup_clkevents error path
    
    t2_clk is already disabled before request_irq(), it must not be disabled
    again.
    
    Signed-off-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 216ab8f155fba659e06df240862cf59acb8b7be5
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Sun Aug 16 11:23:44 2015 +0200

    clocksource: atmel-st: get and use slow clock
    
    The current slow clock rate is hardcoded. Properly get the slow clock
    and use its rate.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 37cc7ab1d2c317cc989b8aa0224cfc5f0478ccbd
Merge: a758379b031f 67dfae0cd72f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Oct 3 10:51:41 2015 -0400

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Ingo Molnar:
     "An abs64() fix in the watchdog driver, and two clocksource driver
      NO_IRQ assumption fixes"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: Fix abs() usage w/ 64bit values
      clocksource/drivers/keystone: Fix bad NO_IRQ usage
      clocksource/drivers/rockchip: Fix bad NO_IRQ usage

commit 67dfae0cd72fec5cd158b6e5fb1647b7dbe0834c
Author: John Stultz <john.stultz@linaro.org>
Date:   Mon Sep 14 18:05:20 2015 -0700

    clocksource: Fix abs() usage w/ 64bit values
    
    This patch fixes one cases where abs() was being used with 64-bit
    nanosecond values, where the result may be capped at 32-bits.
    
    This potentially could cause watchdog false negatives on 32-bit
    systems, so this patch addresses the issue by using abs64().
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/1442279124-7309-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 3722ed2380ad6e89eaf81fcf93f06d605e740435
Author: Marc Zyngier <Marc.Zyngier@arm.com>
Date:   Mon Sep 28 15:49:18 2015 +0100

    clocksource: cosmetic: Drop OF 'dependency' from symbols
    
    Seeing the 'of' characters in a symbol that is being called from
    ACPI seems to freak out people. So let's do a bit of pointless
    renaming so that these folks do feel at home.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit ae281cbd2689200329afe2474b2f39f3f6eb54b9
Author: Marc Zyngier <Marc.Zyngier@arm.com>
Date:   Mon Sep 28 15:49:17 2015 +0100

    clocksource / arm_arch_timer: Convert to ACPI probing
    
    It is now absolutely trivial to convert the arch timer driver to
    use ACPI probing, just like its DT counterpart.
    
    Let's enjoy another crapectomy.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit aad83b15aa21f2d9e46b978b27bc63989e61202d
Author: Marc Zyngier <Marc.Zyngier@arm.com>
Date:   Mon Sep 28 15:49:16 2015 +0100

    clocksource: Add new CLKSRC_{PROBE,ACPI} config symbols
    
    The clocksource probing infrastructure currently depends on
    CONFIG_CLKSRC_OF, which depends on CONFIG_OF. In order to make
    this infrastructure selectable even if CONFIG_OF is not selected,
    introduce a new CONFIG_CLKSRC_PROBE (which allow the infrastructure
    to be compiled in), and CONFIG_CLKSRC_ACPI (which is the pendent
    of CONFIG_CLKSRC_OF for ACPI).
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit c625f76a9910b9d51df5d6ca40a8da0684326996
Author: Marc Zyngier <Marc.Zyngier@arm.com>
Date:   Mon Sep 28 15:49:15 2015 +0100

    clocksource / ACPI: Add probing infrastructure for ACPI-based clocksources
    
    DT enjoys a rather nice probing infrastructure for clocksources,
    while ACPI is so far stuck into a very distant past.
    
    This patch introduces a declarative API, allowing clocksources
    to be self-contained and be called when parsing the GTDT table.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit e647b532275bb357e87272e052fccf5fcdb36a17
Author: Marc Zyngier <Marc.Zyngier@arm.com>
Date:   Mon Sep 28 15:49:12 2015 +0100

    ACPI: Add early device probing infrastructure
    
    IRQ controllers and timers are the two types of device the kernel
    requires before being able to use the device driver model.
    
    ACPI so far lacks a proper probing infrastructure similar to the one
    we have with DT, where we're able to declare IRQ chips and
    clocksources inside the driver code, and let the core code pick it up
    and call us back on a match. This leads to all kind of really ugly
    hacks all over the arm64 code and even in the ACPI layer.
    
    In order to allow some basic probing based on the ACPI tables,
    introduce "struct acpi_probe_entry" which contains just enough
    data and callbacks to match a table, an optional subtable, and
    call a probe function. A driver can, at build time, register itself
    and expect being called if the right entry exists in the ACPI
    table.
    
    A acpi_probe_device_table() is provided, taking an identifier for
    a set of acpi_prove_entries, and iterating over the registered
    entries.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Reviewed-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Hanjun Guo <hanjun.guo@linaro.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit d9388c8432379e8c99b2315bff207f0773554462
Author: Alexander Stein <alexander.stein@systec-electronic.com>
Date:   Wed Sep 30 08:23:40 2015 +0200

    clk: imx31: Do not call mxc_timer_init twice when booting with DT
    
    mxc_timer_init must not be called from within mx31_clocks_init_dt. It will
    eventually be called by imx31_timer_init_dt
    (drivers/clocksource/timer-imx-gpt.c).
    This arranges the initialization code similar to clk-imx27.c
    
    Signed-off-by: Alexander Stein <alexander.stein@systec-electronic.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

commit bdf7344e14d826d0df438a55fc51146d179e198d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Sep 20 07:00:35 2015 -0700

    clocksource/drivers/keystone: Fix bad NO_IRQ usage
    
    The current code assumes the 'irq_of_parse_and_map' will return NO_IRQ in case
    of failure. Unfortunately, the NO_IRQ is not consistent across the different
    architectures and we must not rely on it.
    
    NO_IRQ is equal to '-1' on ARM and 'irq_of_parse_and_map' returns '0' in case
    of an error. Hence, the latter won't be detected and will lead to a crash.
    
    Fix this by just checking 'irq' is different from zero.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ccc42592d436d021d17f86729d24806f30dbad25
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Sun Sep 20 07:00:10 2015 -0700

    clocksource/drivers/rockchip: Fix bad NO_IRQ usage
    
    The current code assumes the 'irq_of_parse_and_map' will return NO_IRQ in case
    of failure. Unfortunately, the NO_IRQ is not consistent across the different
    architectures and we must not rely on it.
    
    NO_IRQ is equal to '-1' on ARM and 'irq_of_parse_and_map' returns '0' in case
    of an error. Hence, the latter won't be detected and will lead to a crash.
    
    Fix this by just checking 'irq' is different from zero.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8d449cb5e29a488cef44d81196f2819b92585513
Author: Alexander Stein <alexander.stein@systec-electronic.com>
Date:   Wed Sep 9 11:35:14 2015 +0200

    clk: imx35: Do not call mxc_timer_init twice when booting with DT
    
    mxc_timer_init must not be called from within mx35_clocks_init_dt. It will
    eventually be called by imx31_timer_init_dt
    (drivers/clocksource/timer-imx-gpt.c).
    This arranges the initialization code similar to clk-imx27.c
    
    Signed-off-by: Alexander Stein <alexander.stein@systec-electronic.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

commit ce2e572cfe7b2fc3f0e9da4aa7bc61a2c2c51fc7
Author: Daniel J Blueman <daniel@numascale.com>
Date:   Mon Sep 21 18:02:25 2015 +0800

    x86/numachip: Introduce Numachip2 timer mechanisms
    
    Add 1GHz 64-bit Numachip2 clocksource timer support for accurate
    system-wide timekeeping, as core TSCs are unsynchronised.
    
    Additionally, add a per-core clockevent mechanism that interrupts via the
    platform IPI vector after a programmed period.
    
    [ tglx: Taking it through x86 due to dependencies ]
    
    Signed-off-by: Daniel J Blueman <daniel@numascale.com>
    Acked-by: Steffen Persvold <sp@numascale.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1442829745-29311-1-git-send-email-daniel@numascale.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit f719a0d6a8541b383c506aaa4b4fa6b4109669f4
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Mar 25 11:27:25 2014 +0100

    ARM: efm32: switch to vendor,device compatible strings
    
    The mainline drivers were fixed in commits
    
     - 4ea8dafd2475 (serial: efm32: use $vendor,$device scheme for
       compatible string)
     - 12f6dd860cf8 (spi: efm32: use $vendor,$device scheme for compatible
       string)
     - 63cc122381bd (clocksource: efm32: use $vendor,$device scheme for
       compatible string)
    
    which are all in 3.16-rc1 to also support these compatible strings.
    
    For the other affected peripherals (adc and gpio) there are no drivers in
    mainline yet.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>

commit 839fe9156fbe89c3157aa6146d22090f8cffddd8
Merge: 54283aed90c3 6dc0dcde406b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Sep 8 17:45:05 2015 -0700

    Merge branch 'parisc-4.3-1' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux
    
    Pull parisc updates from Helge Deller:
     "The most important changes in this patchset are:
    
       - re-enable 64bit PCI bus addresses which were temporarily disabled
         for PA-RISC in kernel 4.2
    
       - fix the 64bit CAS operation in the LWS path which now enables us to
         enable the 64bit gcc atomic builtins even on 32bit userspace with
         64bit kernel
    
       - fix a long-standing bug which sometimes crashed kernel at bootup
         while serial interrupt wasn't registered yet"
    
    * 'parisc-4.3-1' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/parisc-linux:
      parisc: Use platform_device_register_simple("rtc-generic")
      parisc: Drop CONFIG_SMP around update_cr16_clocksource()
      parisc: Use double word condition in 64bit CAS operation
      parisc: Filter out spurious interrupts in PA-RISC irq handler
      parisc: Additionally check for in_atomic() in page fault handler
      PCI,parisc: Enable 64-bit bus addresses on PA-RISC
      parisc: Define ioremap_uc and ioremap_wc

commit 72581cecee411be2b2c00226c98e0c20aab337a2
Author: Helge Deller <deller@gmx.de>
Date:   Tue Sep 8 17:49:31 2015 +0200

    parisc: Drop CONFIG_SMP around update_cr16_clocksource()
    
    No need to use CONFIG_SMP around update_cr16_clocksource(). It checks for
    num_online_cpus() beeing greater than 1, which is always 1 in UP builds.
    
    Signed-off-by: Helge Deller <deller@gmx.de>

commit af0cfb2c44ee5cd3c86d1ffd054d318f536cb6dd
Author: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
Date:   Thu Aug 6 12:22:43 2015 +0100

    MIPS: pistachio: Allow to enable the external timer based clocksource
    
    This commit introduces a new config, so the user can choose to enable
    the General Purpose Timer based clocksource. This option is required
    to have CPUFreq support.
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-mips@linux-mips.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: devicetree@vger.kernel.org
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Bresticker <abrestic@chromium.org>
    Cc: James Hartley <James.Hartley@imgtec.com>
    Cc: Govindraj Raja <Govindraj.Raja@imgtec.com>
    Cc: Damien Horsley <Damien.Horsley@imgtec.com>
    Cc: James Hogan <James.Hogan@imgtec.com>
    Cc: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Cc: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
    Patchwork: http://patchwork.linux-mips.org/patch/10887/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 84583983c31983068429d82e6f9262009d584549
Author: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
Date:   Fri Aug 7 16:39:31 2015 +0100

    CLOCKSOURCE: Add Pistachio clocksource-only driver
    
    The Pistachio SoC provides four general purpose timers, and allow
    to implement a clocksource driver.
    
    This driver can be used as a replacement for the MIPS GIC and MIPS R4K
    clocksources and sched clocks, which are clocked from the CPU clock.
    
    Given the general purpose timers are clocked from an independent clock,
    this new clocksource driver will be useful to introduce CPUFreq support
    for Pistachio machines.
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
    Signed-off-by: Govindraj Raja <govindraj.raja@imgtec.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-mips@linux-mips.org
    Cc: devicetree@vger.kernel.org
    Cc: Andrew Bresticker <abrestic@chromium.org>
    Cc: James Hartley <James.Hartley@imgtec.com>
    Cc: Damien Horsley <Damien.Horsley@imgtec.com>
    Cc: James Hogan <James.Hogan@imgtec.com>
    Cc: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Cc: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
    Patchwork: https://patchwork.linux-mips.org/patch/10899/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit d6ed2b9b60cb03091e0c84c270d145a475606297
Author: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
Date:   Mon Jul 27 15:02:33 2015 +0100

    Documentation: dt: Add Pistachio SoC general purpose timer binding document
    
    Add a device-tree binding document for the clocksource driver provided
    by Pistachio SoC general purpose timers.
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
    Reviewed-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-mips@linux-mips.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: devicetree@vger.kernel.org
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: James Hartley <James.Hartley@imgtec.com>
    Cc: Govindraj Raja <Govindraj.Raja@imgtec.com>
    Cc: Damien Horsley <Damien.Horsley@imgtec.com>
    Cc: James Hogan <James.Hogan@imgtec.com>
    Cc: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Patchwork: https://patchwork.linux-mips.org/patch/10783/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 67d4e669c1e504a491e44737f3561eaba919b304
Author: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
Date:   Mon Jul 27 15:00:14 2015 +0100

    CLOCKSOURCE: mips-gic: Split clocksource and clockevent initialization
    
    This is preparation work for the introduction of clockevent frequency
    update with a clock notifier. This is only possible when the device
    is passed a clk struct, so let's split the legacy and devicetree
    initialization.
    
    Reviewed-by: Andrew Bresticker <abrestic@chromium.org>
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-mips@linux-mips.org
    Cc: devicetree@vger.kernel.org
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: James Hartley <James.Hartley@imgtec.com>
    Cc: Govindraj Raja <Govindraj.Raja@imgtec.com>
    Cc: Damien Horsley <Damien.Horsley@imgtec.com>
    Cc: James Hogan <James.Hogan@imgtec.com>
    Cc: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Patchwork: https://patchwork.linux-mips.org/patch/10781/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit f8a89fc05a81d8cae63890e8d52489de8e700fee
Merge: e525293d97b9 be3b0f9babc0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Aug 22 07:37:41 2015 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "Two minimalistic fixes for 4.2 regressions:
    
       - Eric fixed a thinko in the timer_list base switching code caused by
         the overhaul of the timer wheel.  It can cause a cpu to see the
         wrong base for a timer while we move the timer around.
    
       - Guenter fixed a regression for IMX if booted w/o device tree, where
         the timer interrupt is not initialized and therefor the machine
         fails to boot"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/imx: Fix boot with non-DT systems
      timer: Write timer->flags atomically

commit f4be3c67ed5829462f53e225edd95029bb0793c4
Merge: 99650c258a4b 17cdddf0fb68
Author: Olof Johansson <olof@lixom.net>
Date:   Fri Aug 21 10:15:29 2015 -0700

    Merge tag 'tegra-for-4.3-dt' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux into next/dt
    
    ARM: tegra: Devicetree changes for v4.3-rc1
    
    Enables CPU frequency scaling on Jetson TK1 and enables the GK20A GPU on
    Venice2 and Jetson TK1. This also enables support for the PMU hardware
    found on Tegra124, which among other things, can be used for performance
    measurements.
    
    * tag 'tegra-for-4.3-dt' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux:
      ARM: tegra: Add gpio-ranges property
      ARM: tegra: Fix AHB base address on Tegra20, Tegra30 and Tegra114
      ARM: tegra: Add Tegra124 PMU support
      ARM: tegra: jetson-tk1: Add GK20A GPU DT node
      ARM: tegra: venice2: Add GK20A GPU DT node
      ARM: tegra: Add IOMMU node to GK20A
      ARM: tegra: Add CPU regulator to the Jetson TK1 device tree
      ARM: tegra: Add entries for cpufreq on Tegra124
      ARM: tegra: Enable the DFLL on the Jetson TK1
      ARM: tegra: Add the DFLL to Tegra124 device tree
      pinctrl: tegra: Only set the gpio range if needed
      clk: tegra: Add the DFLL as a possible parent of the cclk_g clock
      clk: tegra: Save/restore CCLKG_BURST_POLICY on suspend
      clk: tegra: Add Tegra124 DFLL clocksource platform driver
      clk: tegra: Add DFLL DVCO reset control for Tegra124
      clk: tegra: Introduce ability for SoC-specific reset control callbacks
      clk: tegra: Add functions for parsing CVB tables
      clk: tegra: Add closed loop support for the DFLL
      clk: tegra: Add library for the DFLL clock source (open-loop mode)
      clk: tegra: Add binding for the Tegra124 DFLL clocksource
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit bf9d026775796bec30895cab080baf37b70bc3b3
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Wed May 13 17:58:44 2015 +0300

    ARM: tegra: Add the DFLL to Tegra124 device tree
    
    The DFLL clocksource is a separate IP block from the usual
    clock-and-reset controller, so it gets its own device tree node.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Signed-off-by: Mikko Perttunen <mikko.perttunen@kapsi.fi>
    Acked-by: Michael Turquette <mturquette@linaro.org>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit 88c9281a9fba67636ab26c1fd6afbc78a632374f
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Aug 19 09:54:24 2015 -0700

    x86/hyperv: Mark the Hyper-V TSC as unstable
    
    The Hyper-V top-level functional specification states, that
    "algorithms should be resilient to sudden jumps forward or
    backward in the TSC value", this means that we should consider
    TSC as unstable. In some cases tsc tests are able to detect the
    instability, it was detected in 543 out of 646 boots in my
    testing:
    
     Measured 6277 cycles TSC warp between CPUs, turning off TSC clock.
     tsc: Marking TSC unstable due to check_tsc_sync_source failed
    
    This is, however, just a heuristic. On Hyper-V platform there
    are two good clocksources: MSR-based hyperv_clocksource and
    recently introduced TSC page.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: K. Y. Srinivasan <kys@microsoft.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: devel@linuxdriverproject.org
    Link: http://lkml.kernel.org/r/1440003264-9949-1-git-send-email-vkuznets@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit be3b0f9babc0b29931b75f7048d81f966473ce13
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Thu Aug 20 03:27:21 2015 -0700

    clocksource/imx: Fix boot with non-DT systems
    
    Commit 6dd747825b20 ("ARM: imx: move timer resources into a structure")
    moved initialization parameters into a data structure, but neglected to set
    the irq field in that data structure for non-DT boots. This causes the system
    to hang if a non-DT boot is attempted.
    
    Fixes: 6dd747825b20 ("ARM: imx: move timer resources into a structure")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Cc: Shawn Guo <shawn.guo@linaro.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1440066441-13930-1-git-send-email-linux@roeck-us.net
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 3670901f73e889538a1b8283e8d6eb9962aab410
Merge: b25c6cee55c7 54d46b7fbcbd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 14 11:06:43 2015 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Ingo Molnar:
     "A single clocksource driver suspend/resume fix"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clockevents/drivers/sh_cmt: Only perform clocksource suspend/resume if enabled

commit 570ceed4e267a6d354653f4884bb8c2b4a975087
Author: Hans Ulli Kroll <ulli.kroll@googlemail.com>
Date:   Tue Aug 11 22:09:03 2015 +0200

    ARM: gemini: Add missing register definitions for gemini timer
    
    Add missing register defintions for the gemini clocksource
    Also do some #define' cleanup to make the code more readable.
    
    Signed-off-by: Hans Ulli Kroll <ulli.kroll@googlemail.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit d548ca43d0333a0c4af0c79e9e6aafc29cd5a854
Merge: 4b45efe85263 82805d1b3ee0 2a7a0e9bf7b3
Author: Lee Jones <lee.jones@linaro.org>
Date:   Tue Aug 11 15:08:04 2015 +0100

    Merge branches 'ib-mfd-base-acpi-dma-4.3', 'ib-mfd-clocksource-rtc-watchdog-4.3' and 'ib-mfd-i2c-x86-watchdog-4.3' into ibs-for-mfd-merged

commit b7a843d6c3063389a83d3260d6ee53bafdb39ec3
Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
Date:   Tue Jun 23 16:09:23 2015 +0200

    drivers: clk: st: Fix flexgen lock init
    
    commit 0f4f2afd4402883a51ad27a1d9e046643bb1e3cb upstream.
    
    While proving lock, the following warning happens
    and it is fixed after initializing lock in the setup
    function
    
    INFO: trying to register non-static key.
    the code is fine but needs lockdep annotation.
    turning off the locking correctness validator.
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 3.10.27-02861-g39df285-dirty #33
    [<c00154ac>] (unwind_backtrace+0x0/0xf4) from [<c0011b50>] (show_stack+0x10/0x14)
    [<c0011b50>] (show_stack+0x10/0x14) from [<c00689ac>] (__lock_acquire+0x900/0xb14)
    [<c00689ac>] (__lock_acquire+0x900/0xb14) from [<c0069394>] (lock_acquire+0x68/0x7c)
    [<c0069394>] (lock_acquire+0x68/0x7c) from [<c04958f8>] (_raw_spin_lock_irqsave+0x48/0x5c)
    [<c04958f8>] (_raw_spin_lock_irqsave+0x48/0x5c) from [<c0381e6c>] (clk_gate_endisable+0x28/0x88)
    [<c0381e6c>] (clk_gate_endisable+0x28/0x88) from [<c0381ee0>] (clk_gate_enable+0xc/0x14)
    [<c0381ee0>] (clk_gate_enable+0xc/0x14) from [<c0386c68>] (flexgen_enable+0x28/0x40)
    [<c0386c68>] (flexgen_enable+0x28/0x40) from [<c037f260>] (__clk_enable+0x5c/0x9c)
    [<c037f260>] (__clk_enable+0x5c/0x9c) from [<c037f558>] (clk_enable+0x18/0x2c)
    [<c037f558>] (clk_enable+0x18/0x2c) from [<c064a1dc>] (st_lpc_of_register+0xc0/0x248)
    [<c064a1dc>] (st_lpc_of_register+0xc0/0x248) from [<c0649e44>] (clocksource_of_init+0x34/0x58)
    [<c0649e44>] (clocksource_of_init+0x34/0x58) from [<c0637ddc>] (sti_timer_init+0x10/0x18)
    [<c0637ddc>] (sti_timer_init+0x10/0x18) from [<c06343f8>] (time_init+0x20/0x30)
    [<c06343f8>] (time_init+0x20/0x30) from [<c0632984>] (start_kernel+0x20c/0x2e8)
    [<c0632984>] (start_kernel+0x20c/0x2e8) from [<40008074>] (0x40008074)
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: Gabriel Fernandez <gabriel.fernandez@linaro.org>
    Fixes: b116517055b7 ("clk: st: STiH407: Support for Flexgen Clocks")
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 452b13248fe8499b2d9a487999d3610095aecca5
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Tue Jul 21 08:01:14 2015 +0530

    clocksource/drivers/sh_tmu: Fix traceback spotted in -next
    
    Traceback in -next due to commit 'clockevents/drivers/sh_tmu: Migrate to new
    'set-state' interface'.
    
    Commit ("clockevents/drivers/sh_tmu: Migrate to new 'set-state' interface")
    in -next causes the following traceback. This is seen with qemu runs for the sh
    target.
    
    ------------[ cut here ]------------
    WARNING: at drivers/clocksource/sh_tmu.c:202
    Modules linked in:
    
    CPU: 0 PID: 0 Comm: swapper Not tainted 4.2.0-rc3-next-20150720 #1
    task: 8c411ed8 ti: 8c40e000 task.ti: 8c40e000
    PC is at sh_tmu_disable+0x40/0x60
    PR is at sh_tmu_clock_event_shutdown+0x8/0x20
    PC  : 8c271220 SP  : 8c40ff10 SR  : 400081f1 TEA : 00000000
    R0  : 8c271240 R1  : 8fc08cfc R2  : 00000000 R3  : 3fffffff
    R4  : 8fc08c00 R5  : 00000001 R6  : 00000002 R7  : ffffffff
    R8  : 00000001 R9  : 8fc08c20 R10 : 00000000 R11 : 00000000
    R12 : 8c012820 R13 : 00000000 R14 : 00000000
    MACH: 3b9ac9ff MACL: 80000000 GBR : 00000000 PR  : 8c271248
    
    Call trace:
     [<8c065836>] clockevents_switch_state+0x16/0x60
     [<8c06588c>] clockevents_shutdown+0xc/0x40
     [<8c066330>] tick_check_new_device+0x90/0xc0
     [<8c065556>] clockevents_register_device+0x56/0x120
     [<8c0662a0>] tick_check_new_device+0x0/0xc0
     [<8c27167a>] sh_tmu_probe+0x29a/0x4e0
     [<8c18a994>] kasprintf+0x14/0x20
     [<8c442782>] early_platform_driver_probe+0x20e/0x2bc
     [<8c1fade0>] platform_match+0x0/0x100
     [<8c33babc>] printk+0x0/0x24
     [<8c434892>] start_kernel+0x32e/0x574
     [<8c33babc>] printk+0x0/0x24
     [<8c17d320>] strlen+0x0/0x58
     [<8c43430c>] unknown_bootoption+0x0/0x1e0
     [<8c011024>] _stext+0x24/0x30
    
    ---[ end trace cb88537fdc8fa200 ]---
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>

commit 02760b116c56376ad564e959f81835008848861d
Author: Antonio Borneo <borneo.antonio@gmail.com>
Date:   Wed Jun 17 19:42:30 2015 +0800

    clockevents/drivers/Kconfig: Replace USE_OF with OF
    
    USE_OF is used as intermediate Kconfig option by few arch's (ARM, MIPS,
    Xtensa); in all these cases it implies setting option OF too. Replace the
    only instance of USE_OF in clocksource with OF.
    
    Signed-off-by: Antonio Borneo <borneo.antonio@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 54d46b7fbcbd00fe4b20a27208e5909facc714e3
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Aug 6 17:32:06 2015 +0200

    clockevents/drivers/sh_cmt: Only perform clocksource suspend/resume if enabled
    
    Currently the sh_cmt clocksource timer is disabled or enabled
    unconditionally on clocksource suspend resp. resume, even if a
    better clocksource is present (e.g. arch_sys_counter) and the
    sh_cmt clocksource is not enabled.
    
    As sh_cmt is a syscore device when its timer is enabled, this
    may lead to a genpd.prepared_count imbalance in the presence of
    PM Domains, which may cause a lock-up during reboot after s2ram.
    
    During suspend:
      - pm_genpd_prepare() is called for all non-syscore devices (incl.
        sh_cmt), increasing genpd.prepared_count for each device,
      - clocksource.suspend() is called for all clocksource devices,
      - sh_cmt_clocksource_suspend() calls sh_cmt_stop(), which is a no-op
        as the clocksource was not enabled.
    
    During resume:
      - clocksource.resume() is called for all clocksource devices,
      - sh_cmt_clocksource_resume() calls sh_cmt_start(), which enables the
        clocksource timer, and turns sh_cmt into a syscore device,
      - pm_genpd_complete() is called for all non-syscore devices (excl.
        sh_cmt now!), decreasing genpd.prepared_count for each device but
        sh_cmt.
    
    Now genpd.prepared_count of the PM Domain containing sh_cmt is
    still 1 instead of zero.  On subsequent suspend/resume cycles,
    sh_cmt is still a syscore device, hence it's skipped for
    pm_genpd_{prepare,complete}(), keeping the imbalance of
    genpd.prepared_count at 1.
    
    During reboot:
    
      - platform_drv_shutdown() is called for any platform device that has
        a driver with a .shutdown() method (only rcar-dmac on R-Car Gen2),
    
      - platform_drv_shutdown() calls dev_pm_domain_detach(), which
        calls genpd_dev_pm_detach(),
    
      - genpd_dev_pm_detach() keeps calling pm_genpd_remove_device() until
        it doesn't return -EAGAIN[*],
    
      - If the device is part of the same PM Domain as sh_cmt,
        pm_genpd_remove_device() always fails with -EAGAIN due to
        genpd.prepared_count > 0.
    
      - Infinite loop in genpd_dev_pm_detach()[*].
    
    [*] Commit 93af5e9354432828 ("PM / Domains: Avoid infinite loops in
        attach/detach code") already limited the number of loop iterations,
        avoiding the lock-up.
    
    To fix this, only disable or enable the clocksource timer on
    clocksource suspend resp. resume if the clocksource was enabled.
    
    This was tested on r8a7791/koelsch with the CPG Clock Domain:
    
      - using arch_sys_counter as the clocksource, which is the default, and
        which showed the problem,
    
      - using sh_cmt as a clocksource ("echo ffca0000.timer > \
        /sys/devices/system/clocksource/clocksource0/current_clocksource"),
        which behaves the same as before.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1438875126-12596-2-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit ca9357bd26c2f8e7b909321eedd651f52cc30d04
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Wed Aug 5 00:52:42 2015 -0700

    Drivers: hv: vmbus: Implement a clocksource based on the TSC page
    
    The current Hyper-V clock source is based on the per-partition reference counter
    and this counter is being accessed via s synthetic MSR - HV_X64_MSR_TIME_REF_COUNT.
    Hyper-V has a more efficient way of computing the per-partition reference
    counter value that does not involve reading a synthetic MSR. We implement
    a time source based on this mechanism.
    
    Tested-by: Vivek Yadav <vyadav@microsoft.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19364fe163ee1d2bd14b45b162cba5621c1ea591
Author: Damian Eppel <d.eppel@samsung.com>
Date:   Fri Jun 26 15:23:04 2015 +0200

    clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier
    
    commit 56a94f13919c0db5958611b388e1581b4852f3c9 upstream.
    
    Whilst testing cpu hotplug events on kernel configured with
    DEBUG_PREEMPT and DEBUG_ATOMIC_SLEEP we get following BUG message,
    caused by calling request_irq() and free_irq() in the context of
    hotplug notification (which is in this case atomic context).
    
    [   40.785859] CPU1: Software reset
    [   40.786660] BUG: sleeping function called from invalid context at mm/slub.c:1241
    [   40.786668] in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper/1
    [   40.786678] Preemption disabled at:[<  (null)>]   (null)
    [   40.786681]
    [   40.786692] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 3.19.0-rc4-00024-g7dca860 #36
    [   40.786698] Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    [   40.786728] [<c0014a00>] (unwind_backtrace) from [<c0011980>] (show_stack+0x10/0x14)
    [   40.786747] [<c0011980>] (show_stack) from [<c0449ba0>] (dump_stack+0x70/0xbc)
    [   40.786767] [<c0449ba0>] (dump_stack) from [<c00c6124>] (kmem_cache_alloc+0xd8/0x170)
    [   40.786785] [<c00c6124>] (kmem_cache_alloc) from [<c005d6f8>] (request_threaded_irq+0x64/0x128)
    [   40.786804] [<c005d6f8>] (request_threaded_irq) from [<c0350b8c>] (exynos4_local_timer_setup+0xc0/0x13c)
    [   40.786820] [<c0350b8c>] (exynos4_local_timer_setup) from [<c0350ca8>] (exynos4_mct_cpu_notify+0x30/0xa8)
    [   40.786838] [<c0350ca8>] (exynos4_mct_cpu_notify) from [<c003b330>] (notifier_call_chain+0x44/0x84)
    [   40.786857] [<c003b330>] (notifier_call_chain) from [<c0022fd4>] (__cpu_notify+0x28/0x44)
    [   40.786873] [<c0022fd4>] (__cpu_notify) from [<c0013714>] (secondary_start_kernel+0xec/0x150)
    [   40.786886] [<c0013714>] (secondary_start_kernel) from [<40008764>] (0x40008764)
    
    Interrupts cannot be requested/freed in the CPU_STARTING/CPU_DYING
    notifications which run on the hotplugged cpu with interrupts and
    preemption disabled.
    
    To avoid the issue, request the interrupts for all possible cpus in
    the boot code. The interrupts are marked NO_AUTOENABLE to avoid a racy
    request_irq/disable_irq() sequence. The flag prevents the
    request_irq() code from enabling the interrupt immediately.
    
    The interrupt is then enabled in the CPU_STARTING notifier of the
    hotplugged cpu and again disabled with disable_irq_nosync() in the
    CPU_DYING notifier.
    
    [ tglx: Massaged changelog to match the patch ]
    
    Fixes: 7114cd749a12 ("clocksource: exynos_mct: use (request/free)_irq calls for local timer registration")
    Reported-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Marcin Jabrzyk <m.jabrzyk@samsung.com>
    Signed-off-by: Damian Eppel <d.eppel@samsung.com>
    Cc: m.szyprowski@samsung.com
    Cc: kyungmin.park@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: kgene@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1435324984-7328-1-git-send-email-d.eppel@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 510a437d013e8531c4b6d9854e056ca79cf4ba49
Author: Damian Eppel <d.eppel@samsung.com>
Date:   Fri Jun 26 15:23:04 2015 +0200

    clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier
    
    commit 56a94f13919c0db5958611b388e1581b4852f3c9 upstream.
    
    Whilst testing cpu hotplug events on kernel configured with
    DEBUG_PREEMPT and DEBUG_ATOMIC_SLEEP we get following BUG message,
    caused by calling request_irq() and free_irq() in the context of
    hotplug notification (which is in this case atomic context).
    
    [   40.785859] CPU1: Software reset
    [   40.786660] BUG: sleeping function called from invalid context at mm/slub.c:1241
    [   40.786668] in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper/1
    [   40.786678] Preemption disabled at:[<  (null)>]   (null)
    [   40.786681]
    [   40.786692] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 3.19.0-rc4-00024-g7dca860 #36
    [   40.786698] Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    [   40.786728] [<c0014a00>] (unwind_backtrace) from [<c0011980>] (show_stack+0x10/0x14)
    [   40.786747] [<c0011980>] (show_stack) from [<c0449ba0>] (dump_stack+0x70/0xbc)
    [   40.786767] [<c0449ba0>] (dump_stack) from [<c00c6124>] (kmem_cache_alloc+0xd8/0x170)
    [   40.786785] [<c00c6124>] (kmem_cache_alloc) from [<c005d6f8>] (request_threaded_irq+0x64/0x128)
    [   40.786804] [<c005d6f8>] (request_threaded_irq) from [<c0350b8c>] (exynos4_local_timer_setup+0xc0/0x13c)
    [   40.786820] [<c0350b8c>] (exynos4_local_timer_setup) from [<c0350ca8>] (exynos4_mct_cpu_notify+0x30/0xa8)
    [   40.786838] [<c0350ca8>] (exynos4_mct_cpu_notify) from [<c003b330>] (notifier_call_chain+0x44/0x84)
    [   40.786857] [<c003b330>] (notifier_call_chain) from [<c0022fd4>] (__cpu_notify+0x28/0x44)
    [   40.786873] [<c0022fd4>] (__cpu_notify) from [<c0013714>] (secondary_start_kernel+0xec/0x150)
    [   40.786886] [<c0013714>] (secondary_start_kernel) from [<40008764>] (0x40008764)
    
    Interrupts cannot be requested/freed in the CPU_STARTING/CPU_DYING
    notifications which run on the hotplugged cpu with interrupts and
    preemption disabled.
    
    To avoid the issue, request the interrupts for all possible cpus in
    the boot code. The interrupts are marked NO_AUTOENABLE to avoid a racy
    request_irq/disable_irq() sequence. The flag prevents the
    request_irq() code from enabling the interrupt immediately.
    
    The interrupt is then enabled in the CPU_STARTING notifier of the
    hotplugged cpu and again disabled with disable_irq_nosync() in the
    CPU_DYING notifier.
    
    [ tglx: Massaged changelog to match the patch ]
    
    Fixes: 7114cd749a12 ("clocksource: exynos_mct: use (request/free)_irq calls for local timer registration")
    Reported-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Marcin Jabrzyk <m.jabrzyk@samsung.com>
    Signed-off-by: Damian Eppel <d.eppel@samsung.com>
    Cc: m.szyprowski@samsung.com
    Cc: kyungmin.park@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: kgene@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1435324984-7328-1-git-send-email-d.eppel@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f0b316fff5b5b90ab8f5f9292b464f0c26d19e3
Author: Damian Eppel <d.eppel@samsung.com>
Date:   Fri Jun 26 15:23:04 2015 +0200

    clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier
    
    commit 56a94f13919c0db5958611b388e1581b4852f3c9 upstream.
    
    Whilst testing cpu hotplug events on kernel configured with
    DEBUG_PREEMPT and DEBUG_ATOMIC_SLEEP we get following BUG message,
    caused by calling request_irq() and free_irq() in the context of
    hotplug notification (which is in this case atomic context).
    
    [   40.785859] CPU1: Software reset
    [   40.786660] BUG: sleeping function called from invalid context at mm/slub.c:1241
    [   40.786668] in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper/1
    [   40.786678] Preemption disabled at:[<  (null)>]   (null)
    [   40.786681]
    [   40.786692] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 3.19.0-rc4-00024-g7dca860 #36
    [   40.786698] Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    [   40.786728] [<c0014a00>] (unwind_backtrace) from [<c0011980>] (show_stack+0x10/0x14)
    [   40.786747] [<c0011980>] (show_stack) from [<c0449ba0>] (dump_stack+0x70/0xbc)
    [   40.786767] [<c0449ba0>] (dump_stack) from [<c00c6124>] (kmem_cache_alloc+0xd8/0x170)
    [   40.786785] [<c00c6124>] (kmem_cache_alloc) from [<c005d6f8>] (request_threaded_irq+0x64/0x128)
    [   40.786804] [<c005d6f8>] (request_threaded_irq) from [<c0350b8c>] (exynos4_local_timer_setup+0xc0/0x13c)
    [   40.786820] [<c0350b8c>] (exynos4_local_timer_setup) from [<c0350ca8>] (exynos4_mct_cpu_notify+0x30/0xa8)
    [   40.786838] [<c0350ca8>] (exynos4_mct_cpu_notify) from [<c003b330>] (notifier_call_chain+0x44/0x84)
    [   40.786857] [<c003b330>] (notifier_call_chain) from [<c0022fd4>] (__cpu_notify+0x28/0x44)
    [   40.786873] [<c0022fd4>] (__cpu_notify) from [<c0013714>] (secondary_start_kernel+0xec/0x150)
    [   40.786886] [<c0013714>] (secondary_start_kernel) from [<40008764>] (0x40008764)
    
    Interrupts cannot be requested/freed in the CPU_STARTING/CPU_DYING
    notifications which run on the hotplugged cpu with interrupts and
    preemption disabled.
    
    To avoid the issue, request the interrupts for all possible cpus in
    the boot code. The interrupts are marked NO_AUTOENABLE to avoid a racy
    request_irq/disable_irq() sequence. The flag prevents the
    request_irq() code from enabling the interrupt immediately.
    
    The interrupt is then enabled in the CPU_STARTING notifier of the
    hotplugged cpu and again disabled with disable_irq_nosync() in the
    CPU_DYING notifier.
    
    [ tglx: Massaged changelog to match the patch ]
    
    Fixes: 7114cd749a12 ("clocksource: exynos_mct: use (request/free)_irq calls for local timer registration")
    Reported-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Marcin Jabrzyk <m.jabrzyk@samsung.com>
    Signed-off-by: Damian Eppel <d.eppel@samsung.com>
    Cc: m.szyprowski@samsung.com
    Cc: kyungmin.park@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: kgene@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1435324984-7328-1-git-send-email-d.eppel@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c74a06dce5f82ea4e94a552d486293667c905267
Author: Lee Jones <lee.jones@linaro.org>
Date:   Tue May 12 13:58:16 2015 +0100

    rtc: bindings: Supply knowledge of a third supported device - clocksource
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit 82c32c0326dc758bdf202c82cb05594ba0dd0d2e
Author: Lee Jones <lee.jones@linaro.org>
Date:   Tue May 12 13:58:14 2015 +0100

    watchdog: bindings: Supply knowledge of a third supported device - clocksource
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit bea6356c12600b683de55a70e6a4c6cc36fa640f
Author: Lee Jones <lee.jones@linaro.org>
Date:   Tue May 12 13:58:12 2015 +0100

    clocksource: bindings: Provide bindings for ST's LPC Clocksource device
    
    On current ST platforms the LPC controls a number of functions including
    Watchdog and Real Time Clock.  This patch provides the bindings used to
    configure LPC in Clocksource mode.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit ff45d8dd84dbb6e674e3757a07ef9471568c2e94
Author: Lee Jones <lee.jones@linaro.org>
Date:   Tue May 12 13:58:11 2015 +0100

    clocksource: sti: Provide 'use timer as sched clock' capability
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit 70bef01c0f1c9a55b54b625be3f82ff7ee1e8c05
Author: Lee Jones <lee.jones@linaro.org>
Date:   Tue May 26 13:39:43 2015 +0100

    clocksource: sti: Provide support for the ST LPC Clocksource IP
    
    This IP is shared with Watchdog and RTC functionality.  All 3 of
    these devices are mutually exclusive from one another i.e. Only 1
    IP can be used at any given time.  We use the device-driver model
    combined with a DT 'mode' property to enforce this.
    
    The ST LPC Clocksource IP can be used as the system (tick) timer.
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit c0cc72efd839acd555d918febe08d91786dbea8d
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Jun 19 15:00:46 2015 -0700

    clocksource: cadence_ttc: Remove clk-provider.h include
    
    This file doesn't use the clk provider APIs. Remove the include.
    
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit 79cf95c763a11d4b365cd5a627fd1ab4dca67890
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Wed May 13 17:58:43 2015 +0300

    clk: tegra: Add the DFLL as a possible parent of the cclk_g clock
    
    The DFLL clocksource was missing from the list of possible parents for
    the fast CPU cluster. Add it to the list.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Signed-off-by: Mikko Perttunen <mikko.perttunen@kapsi.fi>
    Acked-by: Michael Turquette <mturquette@linaro.org>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit c38864a703f3fe50e2b87883a0def392dd5bf26f
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Wed May 13 17:58:42 2015 +0300

    clk: tegra: Save/restore CCLKG_BURST_POLICY on suspend
    
    Save and restore this register since the LP1 restore assembly routines
    fiddle with it. Otherwise the CPU would keep running on PLLX after
    resume from suspend even when DFLL was the original clocksource.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Signed-off-by: Mikko Perttunen <mikko.perttunen@kapsi.fi>
    Acked-by: Peter De Schrijver <pdeschrijver@nvidia.com>
    Acked-by: Michael Turquette <mturquette@linaro.org>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit 62a8a094b0e1de782a1b3dcb5e42a7d44379e583
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Wed May 13 17:58:41 2015 +0300

    clk: tegra: Add Tegra124 DFLL clocksource platform driver
    
    Add basic platform driver support for the fast CPU cluster DFLL
    clocksource found on Tegra124 SoCs. This small driver selects the
    appropriate Tegra124-specific characterization data and integration
    code. It relies on the DFLL common code to do most of the work.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Signed-off-by: Mikko Perttunen <mikko.perttunen@kapsi.fi>
    Acked-by: Michael Turquette <mturquette@linaro.org>
    [treding@nvidia.com: move setup code into ->probe()]
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit 9eb15dbbfa1a23b5e65efaf1d5d6c47798e7264b
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Wed May 13 17:58:48 2015 +0300

    cpufreq: Add cpufreq driver for Tegra124
    
    Add a new cpufreq driver for Tegra124. Instead of using the PLLX as
    the CPU clocksource, switch immediately to the DFLL. It allows the use
    of higher clock rates, and will automatically scale the CPU voltage as
    well. Besides the CPU clocksource switch, we let the cpufreq-dt driver
    for all the cpufreq operations.
    
    This driver also relies on the DFLL driver to fill the OPP table for the
    CPU0 device, so that the cpufreq-dt driver knows what frequencies to
    use.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Signed-off-by: Mikko Perttunen <mikko.perttunen@kapsi.fi>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit d8d7a08fa82ff7c241c74c2461f342c5685dda27
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Wed May 13 17:58:36 2015 +0300

    clk: tegra: Add library for the DFLL clock source (open-loop mode)
    
    Add shared code to support the Tegra DFLL clocksource in open-loop
    mode. This root clocksource is present on the Tegra124 SoCs. The
    DFLL is the intended primary clock source for the fast CPU cluster.
    
    This code is very closely based on a patch by Paul Walmsley from
    December (http://comments.gmane.org/gmane.linux.ports.tegra/15273),
    which in turn comes from the internal driver by originally created
    by Aleksandr Frid <afrid@nvidia.com>.
    
    Subsequent patches will add support for closed loop mode and drivers
    for the Tegra124 fast CPU cluster DFLL devices, which rely on this
    code.
    
    Signed-off-by: Paul Walmsley <pwalmsley@nvidia.com>
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Signed-off-by: Mikko Perttunen <mikko.perttunen@kapsi.fi>
    Acked-by: Peter De Schrijver <pdeschrijver@nvidia.com>
    Acked-by: Michael Turquette <mturquette@linaro.org>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit 0c59d26770333cf605d9119a78dd6c1ebebc6a61
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Wed May 13 17:58:35 2015 +0300

    clk: tegra: Add binding for the Tegra124 DFLL clocksource
    
    The DFLL is the main clocksource for the fast CPU cluster on Tegra124
    and also provides automatic CPU rail voltage scaling as well. The DFLL
    is a separate IP block from the usual Tegra124 clock-and-reset
    controller, so it gets its own node in the device tree.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Signed-off-by: Mikko Perttunen <mikko.perttunen@kapsi.fi>
    Acked-by: Michael Turquette <mturquette@linaro.org>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit 6f5c8ac9553344789ce7e1a5b4fe33cd05b28d00
Author: Damian Eppel <d.eppel@samsung.com>
Date:   Fri Jun 26 15:23:04 2015 +0200

    clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier
    
    commit 56a94f13919c0db5958611b388e1581b4852f3c9 upstream.
    
    Whilst testing cpu hotplug events on kernel configured with
    DEBUG_PREEMPT and DEBUG_ATOMIC_SLEEP we get following BUG message,
    caused by calling request_irq() and free_irq() in the context of
    hotplug notification (which is in this case atomic context).
    
    [   40.785859] CPU1: Software reset
    [   40.786660] BUG: sleeping function called from invalid context at mm/slub.c:1241
    [   40.786668] in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper/1
    [   40.786678] Preemption disabled at:[<  (null)>]   (null)
    [   40.786681]
    [   40.786692] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 3.19.0-rc4-00024-g7dca860 #36
    [   40.786698] Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    [   40.786728] [<c0014a00>] (unwind_backtrace) from [<c0011980>] (show_stack+0x10/0x14)
    [   40.786747] [<c0011980>] (show_stack) from [<c0449ba0>] (dump_stack+0x70/0xbc)
    [   40.786767] [<c0449ba0>] (dump_stack) from [<c00c6124>] (kmem_cache_alloc+0xd8/0x170)
    [   40.786785] [<c00c6124>] (kmem_cache_alloc) from [<c005d6f8>] (request_threaded_irq+0x64/0x128)
    [   40.786804] [<c005d6f8>] (request_threaded_irq) from [<c0350b8c>] (exynos4_local_timer_setup+0xc0/0x13c)
    [   40.786820] [<c0350b8c>] (exynos4_local_timer_setup) from [<c0350ca8>] (exynos4_mct_cpu_notify+0x30/0xa8)
    [   40.786838] [<c0350ca8>] (exynos4_mct_cpu_notify) from [<c003b330>] (notifier_call_chain+0x44/0x84)
    [   40.786857] [<c003b330>] (notifier_call_chain) from [<c0022fd4>] (__cpu_notify+0x28/0x44)
    [   40.786873] [<c0022fd4>] (__cpu_notify) from [<c0013714>] (secondary_start_kernel+0xec/0x150)
    [   40.786886] [<c0013714>] (secondary_start_kernel) from [<40008764>] (0x40008764)
    
    Interrupts cannot be requested/freed in the CPU_STARTING/CPU_DYING
    notifications which run on the hotplugged cpu with interrupts and
    preemption disabled.
    
    To avoid the issue, request the interrupts for all possible cpus in
    the boot code. The interrupts are marked NO_AUTOENABLE to avoid a racy
    request_irq/disable_irq() sequence. The flag prevents the
    request_irq() code from enabling the interrupt immediately.
    
    The interrupt is then enabled in the CPU_STARTING notifier of the
    hotplugged cpu and again disabled with disable_irq_nosync() in the
    CPU_DYING notifier.
    
    [ tglx: Massaged changelog to match the patch ]
    
    Fixes: 7114cd749a12 ("clocksource: exynos_mct: use (request/free)_irq calls for local timer registration")
    Reported-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Marcin Jabrzyk <m.jabrzyk@samsung.com>
    Signed-off-by: Damian Eppel <d.eppel@samsung.com>
    Cc: m.szyprowski@samsung.com
    Cc: kyungmin.park@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: kgene@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1435324984-7328-1-git-send-email-d.eppel@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 131c2e0480b0f7afefbc9a46cc4e158e17caa844
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Thu Jun 25 17:57:39 2015 +0900

    ARM: shmobile: r8a7779: Generic CCF and timer support
    
    Add a r8a7779-specific callback to initialize CCF and
    clocksources. With this in place we are one step closer
    to be able to use r8a7779 without C board code.
    
    Also add a multiplatform wrapper to avoid breaking the
    r8a7779 marzen legacy case.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 7b732169e9d1f0f6614a8e85a9e65a9d755b3d86
Merge: c4bc680cf7bc c4d029f2d43b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jul 12 09:36:59 2015 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "This update from the timer departement contains:
    
       - A series of patches which address a shortcoming in the tick
         broadcast code.
    
         If the broadcast device is not available or an hrtimer emulated
         broadcast device, some of the original assumptions lead to boot
         failures.  I rather plugged all of the corner cases instead of only
         addressing the issue reported, so the change got a little larger.
    
         Has been extensivly tested on x86 and arm.
    
       - Get rid of the last holdouts using do_posix_clock_monotonic_gettime()
    
       - A regression fix for the imx clocksource driver
    
       - An update to the new state callbacks mechanism for clockevents.
         This is required to simplify the conversion, which will take place
         in 4.3"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      tick/broadcast: Prevent NULL pointer dereference
      time: Get rid of do_posix_clock_monotonic_gettime
      cris: Replace do_posix_clock_monotonic_gettime()
      tick/broadcast: Unbreak CONFIG_GENERIC_CLOCKEVENTS=n build
      tick/broadcast: Handle spurious interrupts gracefully
      tick/broadcast: Check for hrtimer broadcast active early
      tick/broadcast: Return busy when IPI is pending
      tick/broadcast: Return busy if periodic mode and hrtimer broadcast
      tick/broadcast: Move the check for periodic mode inside state handling
      tick/broadcast: Prevent deep idle if no broadcast device available
      tick/broadcast: Make idle check independent from mode and config
      tick/broadcast: Sanity check the shutdown of the local clock_event
      tick/broadcast: Prevent hrtimer recursion
      clockevents: Allow set-state callbacks to be optional
      clocksource/imx: Define clocksource for mx27

commit 5127e31a6ce04bd41a020c0ba28a1c0915ab6da1
Author: Suzuki K. Poulose <suzuki.poulose@arm.com>
Date:   Fri Jul 10 16:26:38 2015 +0100

    regulator: Add missing dummy definition for regulator_list_voltage
    
    Fixes a build break when CONFIG_REGULATOR is not selected.
    
    e.g, on linux-next - 07102015:
    
    drivers/clk/tegra/clk-dfll.c: In function ‘find_lut_index_for_rate’:
    drivers/clk/tegra/clk-dfll.c:691:3: error: implicit declaration of function ‘regulator_list_voltage’ [-Werror=implicit-function-declaration]
        if (regulator_list_voltage(td->vdd_reg, td->i2c_lut[i]) == uv)
        ^
       CC      drivers/clocksource/mmio.o
       CC      fs/proc/softirqs.o
    cc1: some warnings being treated as errors
    make[3]: *** [drivers/clk/tegra/clk-dfll.o] Error 1
    make[2]: *** [drivers/clk/tegra] Error 2
    make[1]: *** [drivers/clk] Error 2
    make[1]: *** Waiting for unfinished jobs....
    
    This should be pushed to 4.2 as we have the issue in 4.2-rc1, just that
    nobody uses it without the REGULATOR(yet).
    
    Signed-off-by: Suzuki K. Poulose <suzuki.poulose@arm.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit c4288334818c81c946acb23d2319881f58c3d497
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Jul 5 20:53:17 2015 +0000

    tick/broadcast: Handle spurious interrupts gracefully
    
    Andriy reported that on a virtual machine the warning about negative
    expiry time in the clock events programming code triggered:
    
    hpet: hpet0 irq 40 for MSI
    hpet: hpet1 irq 41 for MSI
    Switching to clocksource hpet
    WARNING: at kernel/time/clockevents.c:239
    
    [<ffffffff810ce6eb>] clockevents_program_event+0xdb/0xf0
    [<ffffffff810cf211>] tick_handle_periodic_broadcast+0x41/0x50
    [<ffffffff81016525>] timer_interrupt+0x15/0x20
    
    When the second hpet is installed as a per cpu timer the broadcast
    event is not longer required and stopped, which sets the next_evt of
    the broadcast device to KTIME_MAX.
    
    If after that a spurious interrupt happens on the broadcast device,
    then the current code blindly handles it and tries to reprogram the
    broadcast device afterwards, which adds the period to
    next_evt. KTIME_MAX + period results in a negative expiry value
    causing the WARN_ON in the clockevents code to trigger.
    
    Add a proper check for the state of the broadcast device into the
    interrupt handler and return if the interrupt is spurious.
    
    [ Folded in pointer fix from Sudeep ]
    
    Reported-by: Andriy Gapon <avg@FreeBSD.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Sudeep Holla <sudeep.holla@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Preeti U Murthy <preeti@linux.vnet.ibm.com>
    Link: http://lkml.kernel.org/r/20150705205221.802094647@linutronix.de

commit 747d34e7313034768aac83d679db43cedc5ab778
Author: Philippe Reynes <tremyfr@gmail.com>
Date:   Sat Jun 27 23:11:44 2015 +0200

    clocksource/imx: Define clocksource for mx27
    
    The rework of the imx clocksource driver missed to add an entry for
    imx27 which results in a boot failure on those machines.
    
    Add the proper CLOCKSOURCE_OF_DECLARE() entry for imx27 and map it to
    the imx21 init.
    
    Fixes: bef11c881ba5 'ARM: imx: initialize gpt device type for DT boot'
    Signed-off-by: Philippe Reynes <tremyfr@gmail.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: daniel.lezcano@linaro.org
    Cc: fabio.estevam@freescale.com
    Cc: shawnguo@kernel.org
    Cc: kernel@pengutronix.de
    Link: http://lkml.kernel.org/r/1435439504-406-1-git-send-email-tremyfr@gmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 0f4f2afd4402883a51ad27a1d9e046643bb1e3cb
Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
Date:   Tue Jun 23 16:09:23 2015 +0200

    drivers: clk: st: Fix flexgen lock init
    
    While proving lock, the following warning happens
    and it is fixed after initializing lock in the setup
    function
    
    INFO: trying to register non-static key.
    the code is fine but needs lockdep annotation.
    turning off the locking correctness validator.
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 3.10.27-02861-g39df285-dirty #33
    [<c00154ac>] (unwind_backtrace+0x0/0xf4) from [<c0011b50>] (show_stack+0x10/0x14)
    [<c0011b50>] (show_stack+0x10/0x14) from [<c00689ac>] (__lock_acquire+0x900/0xb14)
    [<c00689ac>] (__lock_acquire+0x900/0xb14) from [<c0069394>] (lock_acquire+0x68/0x7c)
    [<c0069394>] (lock_acquire+0x68/0x7c) from [<c04958f8>] (_raw_spin_lock_irqsave+0x48/0x5c)
    [<c04958f8>] (_raw_spin_lock_irqsave+0x48/0x5c) from [<c0381e6c>] (clk_gate_endisable+0x28/0x88)
    [<c0381e6c>] (clk_gate_endisable+0x28/0x88) from [<c0381ee0>] (clk_gate_enable+0xc/0x14)
    [<c0381ee0>] (clk_gate_enable+0xc/0x14) from [<c0386c68>] (flexgen_enable+0x28/0x40)
    [<c0386c68>] (flexgen_enable+0x28/0x40) from [<c037f260>] (__clk_enable+0x5c/0x9c)
    [<c037f260>] (__clk_enable+0x5c/0x9c) from [<c037f558>] (clk_enable+0x18/0x2c)
    [<c037f558>] (clk_enable+0x18/0x2c) from [<c064a1dc>] (st_lpc_of_register+0xc0/0x248)
    [<c064a1dc>] (st_lpc_of_register+0xc0/0x248) from [<c0649e44>] (clocksource_of_init+0x34/0x58)
    [<c0649e44>] (clocksource_of_init+0x34/0x58) from [<c0637ddc>] (sti_timer_init+0x10/0x18)
    [<c0637ddc>] (sti_timer_init+0x10/0x18) from [<c06343f8>] (time_init+0x20/0x30)
    [<c06343f8>] (time_init+0x20/0x30) from [<c0632984>] (start_kernel+0x20c/0x2e8)
    [<c0632984>] (start_kernel+0x20c/0x2e8) from [<40008074>] (0x40008074)
    
    Signed-off-by: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Signed-off-by: Gabriel Fernandez <gabriel.fernandez@linaro.org>
    Fixes: b116517055b7 ("clk: st: STiH407: Support for Flexgen Clocks")
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit 27c634054a3155e1d9a02f0e362e4f4ff8d28ee7
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Jun 25 18:44:10 2015 +0200

    x86/asm/tsc: Use rdtsc_ordered() in read_tsc() instead of get_cycles()
    
    There are two logical changes here.  First, this removes a check
    for cpu_has_tsc.  That check is unnecessary, as we don't
    register the TSC as a clocksource on systems that have no TSC.
    
    Second, it adds a barrier, thus preventing observable
    non-monotonicity.
    
    I suspect that the missing barrier was never a problem in
    practice because system calls themselves were heavy enough
    barriers to prevent user code from observing time warps due to
    speculation. (Without the corresponding barrier in the vDSO,
    however, non-monotonicity is easy to detect.)
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Huang Rui <ray.huang@amd.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Len Brown <lenb@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: kvm ML <kvm@vger.kernel.org>
    Link: http://lkml.kernel.org/r/c6ff621a053127a65b70f175443578db7a0711be.1434501121.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 9d7754d5411c49d47846010ee85269b322c8ca3f
Author: Damian Eppel <d.eppel@samsung.com>
Date:   Fri Jun 26 15:23:04 2015 +0200

    clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier
    
    [ Upstream commit 56a94f13919c0db5958611b388e1581b4852f3c9 ]
    
    Whilst testing cpu hotplug events on kernel configured with
    DEBUG_PREEMPT and DEBUG_ATOMIC_SLEEP we get following BUG message,
    caused by calling request_irq() and free_irq() in the context of
    hotplug notification (which is in this case atomic context).
    
    [   40.785859] CPU1: Software reset
    [   40.786660] BUG: sleeping function called from invalid context at mm/slub.c:1241
    [   40.786668] in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper/1
    [   40.786678] Preemption disabled at:[<  (null)>]   (null)
    [   40.786681]
    [   40.786692] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 3.19.0-rc4-00024-g7dca860 #36
    [   40.786698] Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    [   40.786728] [<c0014a00>] (unwind_backtrace) from [<c0011980>] (show_stack+0x10/0x14)
    [   40.786747] [<c0011980>] (show_stack) from [<c0449ba0>] (dump_stack+0x70/0xbc)
    [   40.786767] [<c0449ba0>] (dump_stack) from [<c00c6124>] (kmem_cache_alloc+0xd8/0x170)
    [   40.786785] [<c00c6124>] (kmem_cache_alloc) from [<c005d6f8>] (request_threaded_irq+0x64/0x128)
    [   40.786804] [<c005d6f8>] (request_threaded_irq) from [<c0350b8c>] (exynos4_local_timer_setup+0xc0/0x13c)
    [   40.786820] [<c0350b8c>] (exynos4_local_timer_setup) from [<c0350ca8>] (exynos4_mct_cpu_notify+0x30/0xa8)
    [   40.786838] [<c0350ca8>] (exynos4_mct_cpu_notify) from [<c003b330>] (notifier_call_chain+0x44/0x84)
    [   40.786857] [<c003b330>] (notifier_call_chain) from [<c0022fd4>] (__cpu_notify+0x28/0x44)
    [   40.786873] [<c0022fd4>] (__cpu_notify) from [<c0013714>] (secondary_start_kernel+0xec/0x150)
    [   40.786886] [<c0013714>] (secondary_start_kernel) from [<40008764>] (0x40008764)
    
    Interrupts cannot be requested/freed in the CPU_STARTING/CPU_DYING
    notifications which run on the hotplugged cpu with interrupts and
    preemption disabled.
    
    To avoid the issue, request the interrupts for all possible cpus in
    the boot code. The interrupts are marked NO_AUTOENABLE to avoid a racy
    request_irq/disable_irq() sequence. The flag prevents the
    request_irq() code from enabling the interrupt immediately.
    
    The interrupt is then enabled in the CPU_STARTING notifier of the
    hotplugged cpu and again disabled with disable_irq_nosync() in the
    CPU_DYING notifier.
    
    [ tglx: Massaged changelog to match the patch ]
    
    Fixes: 7114cd749a12 ("clocksource: exynos_mct: use (request/free)_irq calls for local timer registration")
    Reported-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Marcin Jabrzyk <m.jabrzyk@samsung.com>
    Signed-off-by: Damian Eppel <d.eppel@samsung.com>
    Cc: m.szyprowski@samsung.com
    Cc: kyungmin.park@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: kgene@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1435324984-7328-1-git-send-email-d.eppel@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 91e20b5040c67c51aad88cf87db4305c5bd7f79d
Author: Joel Porquet <joel@porquet.org>
Date:   Thu Jul 2 15:32:00 2015 -0400

    irqchip: Move IRQCHIP_DECLARE macro to include/linux/irqchip.h
    
    At the moment the IRQCHIP_DECLARE macro is only declared locally in
    drivers/irqchip/irqchip.h. It prevents from using it directly in arch/*
    directories whenever irqchip drivers only exist there, which happens in a few
    cases (e.g. arc, arm, microblaze and mips).
    
    This patch makes the macro to be globally defined, i.e. in
    include/linux/irqchip.h, and thus usable for arch-specific declarations of
    irqchip drivers. In this way, it is very similar to what clocksource does (ie
    CLOCKSOURCE_OF_DECLARE is defined in include/linux/clocksource.h).
    
    For now, this patch only moves the declaration of the macro
    IRQCHIP_DECLARE to the global header 'include/linux/irqchip.h' and make
    'drivers/irqchip/irqchip.h' include 'include/linux/irqchip.h'. Later, other
    patches will get rid of 'drivers/irqchip/irqchip.h' and modify all the impacted
    irqchip drivers.
    
    Signed-off-by: Joel Porquet <joel@porquet.org>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Link: http://lkml.kernel.org/r/1435865565-14114-1-git-send-email-joel@porquet.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 6ac15baacb6ecd87c66209627753b96ded3b4515
Merge: d5fb82137b6c 65f26062cd8f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 1 15:44:18 2015 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "This contains:
    
       - a build regression fix introduced by the timeconst move
    
       - a hotplug regression fix introduced by the timer wheel diet
    
       - a cpu hotplug bug fix for the exynos clocksource driver"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      time: Remove development rules from Kbuild/Makefile
      timer: Fix hotplug regression
      clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier

commit 0890a264794f33df540fbaf274699146903b4e6b
Merge: 05a8256c586a 40b8ad8f762c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 1 09:24:26 2015 -0700

    Merge tag 'arc-4.2-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc
    
    Pull ARC architecture updates from Vineet Gupta:
    
     - support for HS38 cores based on ARCv2 ISA
    
         ARCv2 is the next generation ISA from Synopsys and basis for the
         HS3{4,6,8} families of processors which retain the traditional ARC mantra of
         low power and configurability and are now more performant and feature rich.
    
         HS38x is a 10 stage pipeline core which supports MMU (with huge pages) and
         SMP (upto 4 cores) among other features.
    
         + www.synopsys.com/dw/ipdir.php?ds=arc-hs38-processor
         + http://news.synopsys.com/2014-10-14-New-DesignWare-ARC-HS38-Processor-Doubles-Performance-for-Embedded-Linux-Applications
         + http://www.embedded.com/electronics-news/4435975/Synopsys-ARC-HS38-core-gives-2X-boost-to-Linux-based-apps
    
     - support for ARC SDP (Software Development platform): Main Board + CPU Cards
        = AXS101: CPU Card with ARC700 in silicon @ 700 MHz
        = AXS103: CPU Card with HS38x in FPGA
    
     - refactoring of ARCompact port to accomodate new ARCv2 ISA
    
     - misc updates/cleanups
    
    * tag 'arc-4.2-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc: (72 commits)
      ARC: Fix build failures for ARCompact in linux-next after ARCv2 support
      ARCv2: Allow older gcc to cope with new regime of ARCv2/ARCompact support
      ARCv2: [vdk] dts files and defconfig for HS38 VDK
      ARCv2: [axs103] Support ARC SDP FPGA platform for HS38x cores
      ARC: [axs101] Prepare for AXS103
      ARCv2: [nsim*hs*] Support simulation platforms for HS38x cores
      ARCv2: All bits in place, allow ARCv2 builds
      ARCv2: SLC: Handle explcit flush for DMA ops (w/o IO-coherency)
      ARCv2: STAR 9000837815 workaround hardware exclusive transactions livelock
      ARC: Reduce bitops lines of code using macros
      ARCv2: barriers
      arch: conditionally define smp_{mb,rmb,wmb}
      ARC: add smp barriers around atomics per Documentation/atomic_ops.txt
      ARC: add compiler barrier to LLSC based cmpxchg
      ARCv2: SMP: intc: IDU 2nd level intc for dynamic IRQ distribution
      ARCv2: SMP: clocksource: Enable Global Real Time counter
      ARCv2: SMP: ARConnect debug/robustness
      ARCv2: SMP: Support ARConnect (MCIP) for Inter-Core-Interrupts et al
      ARC: make plat_smp_ops weak to allow over-rides
      ARCv2: clocksource: Introduce 64bit local RTC counter
      ...

commit 56a94f13919c0db5958611b388e1581b4852f3c9
Author: Damian Eppel <d.eppel@samsung.com>
Date:   Fri Jun 26 15:23:04 2015 +0200

    clocksource: exynos_mct: Avoid blocking calls in the cpu hotplug notifier
    
    Whilst testing cpu hotplug events on kernel configured with
    DEBUG_PREEMPT and DEBUG_ATOMIC_SLEEP we get following BUG message,
    caused by calling request_irq() and free_irq() in the context of
    hotplug notification (which is in this case atomic context).
    
    [   40.785859] CPU1: Software reset
    [   40.786660] BUG: sleeping function called from invalid context at mm/slub.c:1241
    [   40.786668] in_atomic(): 1, irqs_disabled(): 128, pid: 0, name: swapper/1
    [   40.786678] Preemption disabled at:[<  (null)>]   (null)
    [   40.786681]
    [   40.786692] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 3.19.0-rc4-00024-g7dca860 #36
    [   40.786698] Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    [   40.786728] [<c0014a00>] (unwind_backtrace) from [<c0011980>] (show_stack+0x10/0x14)
    [   40.786747] [<c0011980>] (show_stack) from [<c0449ba0>] (dump_stack+0x70/0xbc)
    [   40.786767] [<c0449ba0>] (dump_stack) from [<c00c6124>] (kmem_cache_alloc+0xd8/0x170)
    [   40.786785] [<c00c6124>] (kmem_cache_alloc) from [<c005d6f8>] (request_threaded_irq+0x64/0x128)
    [   40.786804] [<c005d6f8>] (request_threaded_irq) from [<c0350b8c>] (exynos4_local_timer_setup+0xc0/0x13c)
    [   40.786820] [<c0350b8c>] (exynos4_local_timer_setup) from [<c0350ca8>] (exynos4_mct_cpu_notify+0x30/0xa8)
    [   40.786838] [<c0350ca8>] (exynos4_mct_cpu_notify) from [<c003b330>] (notifier_call_chain+0x44/0x84)
    [   40.786857] [<c003b330>] (notifier_call_chain) from [<c0022fd4>] (__cpu_notify+0x28/0x44)
    [   40.786873] [<c0022fd4>] (__cpu_notify) from [<c0013714>] (secondary_start_kernel+0xec/0x150)
    [   40.786886] [<c0013714>] (secondary_start_kernel) from [<40008764>] (0x40008764)
    
    Interrupts cannot be requested/freed in the CPU_STARTING/CPU_DYING
    notifications which run on the hotplugged cpu with interrupts and
    preemption disabled.
    
    To avoid the issue, request the interrupts for all possible cpus in
    the boot code. The interrupts are marked NO_AUTOENABLE to avoid a racy
    request_irq/disable_irq() sequence. The flag prevents the
    request_irq() code from enabling the interrupt immediately.
    
    The interrupt is then enabled in the CPU_STARTING notifier of the
    hotplugged cpu and again disabled with disable_irq_nosync() in the
    CPU_DYING notifier.
    
    [ tglx: Massaged changelog to match the patch ]
    
    Fixes: 7114cd749a12 ("clocksource: exynos_mct: use (request/free)_irq calls for local timer registration")
    Reported-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Marcin Jabrzyk <m.jabrzyk@samsung.com>
    Signed-off-by: Damian Eppel <d.eppel@samsung.com>
    Cc: m.szyprowski@samsung.com
    Cc: kyungmin.park@samsung.com
    Cc: daniel.lezcano@linaro.org
    Cc: kgene@kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1435324984-7328-1-git-send-email-d.eppel@samsung.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@vger.kernel.org>

commit e8a0b37d28ace440776c0a4fe3c65f5832a9a7ee
Merge: abea9629486c 002af195a8c7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 26 12:20:00 2015 -0700

    Merge branch 'for-linus' of git://ftp.arm.linux.org.uk/~rmk/linux-arm
    
    Pull ARM updates from Russell King:
     "Bigger items included in this update are:
    
       - A series of updates from Arnd for ARM randconfig build failures
       - Updates from Dmitry for StrongARM SA-1100 to move IRQ handling to
         drivers/irqchip/
       - Move ARMs SP804 timer to drivers/clocksource/
       - Perf updates from Mark Rutland in preparation to move the ARM perf
         code into drivers/ so it can be shared with ARM64.
       - MCPM updates from Nicolas
       - Add support for taking platform serial number from DT
       - Re-implement Keystone2 physical address space switch to conform to
         architecture requirements
       - Clean up ARMv7 LPAE code, which goes in hand with the Keystone2
         changes.
       - L2C cleanups to avoid unlocking caches if we're prevented by the
         secure support to unlock.
       - Avoid cleaning a potentially dirty cache containing stale data on
         CPU initialisation
       - Add ARM-only entry point for secondary startup (for machines that
         can only call into a Thumb kernel in ARM mode).  Same thing is also
         done for the resume entry point.
       - Provide arch_irqs_disabled via asm-generic
       - Enlarge ARMv7M vector table
       - Always use BFD linker for VDSO, as gold doesn't accept some of the
         options we need.
       - Fix an incorrect BSYM (for Thumb symbols) usage, and convert all
         BSYM compiler macros to a "badr" (for branch address).
       - Shut up compiler warnings provoked by our cmpxchg() implementation.
       - Ensure bad xchg sizes fail to link"
    
    * 'for-linus' of git://ftp.arm.linux.org.uk/~rmk/linux-arm: (75 commits)
      ARM: Fix build if CLKDEV_LOOKUP is not configured
      ARM: fix new BSYM() usage introduced via for-arm-soc branch
      ARM: 8383/1: nommu: avoid deprecated source register on mov
      ARM: 8391/1: l2c: add options to overwrite prefetching behavior
      ARM: 8390/1: irqflags: Get arch_irqs_disabled from asm-generic
      ARM: 8387/1: arm/mm/dma-mapping.c: Add arm_coherent_dma_mmap
      ARM: 8388/1: tcm: Don't crash when TCM banks are protected by TrustZone
      ARM: 8384/1: VDSO: force use of BFD linker
      ARM: 8385/1: VDSO: group link options
      ARM: cmpxchg: avoid warnings from macro-ized cmpxchg() implementations
      ARM: remove __bad_xchg definition
      ARM: 8369/1: ARMv7M: define size of vector table for Vybrid
      ARM: 8382/1: clocksource: make ARM_TIMER_SP804 depend on GENERIC_SCHED_CLOCK
      ARM: 8366/1: move Dual-Timer SP804 driver to drivers/clocksource
      ARM: 8365/1: introduce sp804_timer_disable and remove arm_timer.h inclusion
      ARM: 8364/1: fix BE32 module loading
      ARM: 8360/1: add secondary_startup_arm prototype in header file
      ARM: 8359/1: correct secondary_startup_arm mode
      ARM: proc-v7: sanitise and document registers around errata
      ARM: proc-v7: clean up MIDR access
      ...

commit 55a7d4b85ca1f723d26b8956e8faeff730d0d240
Merge: aefbef10e3ae 07834743f42b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jun 25 13:07:24 2015 -0700

    Merge tag 'for-4.2' of git://git.sourceforge.jp/gitroot/uclinux-h8/linux
    
    Pull Renesas H8/300 architecture re-introduction from Yoshinori Sato.
    
    We dropped arch/h8300 two years ago as stale and old, this is a new and
    more modern rewritten arch support for the same architecture.
    
    * tag 'for-4.2' of git://git.sourceforge.jp/gitroot/uclinux-h8/linux: (27 commits)
      h8300: fix typo.
      h8300: Always build dtb
      h8300: Remove ARCH_WANT_IPC_PARSE_VERSION
      sh-sci: Get register size from platform device
      clk: h8300: fix error handling in h8s2678_pll_clk_setup()
      h8300: Symbol name fix
      h8300: devicetree source
      h8300: configs
      h8300: IRQ chip driver
      h8300: clocksource
      h8300: clock driver
      h8300: Build scripts
      h8300: library functions
      h8300: Memory management
      h8300: miscellaneous functions
      h8300: process helpers
      h8300: compressed image support
      h8300: Low level entry
      h8300: kernel startup
      h8300: Interrupt and exceptions
      ...

commit 002af195a8c720ca47c7884fd0390f3b327423b9
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Tue Jun 23 20:49:05 2015 -0700

    ARM: Fix build if CLKDEV_LOOKUP is not configured
    
    mips:allmodconfig fails to build with
    
    drivers/clocksource/timer-sp804.c: In function '__sp804_clocksource_and_sched_clock_init':
    drivers/clocksource/timer-sp804.c:88:3: error: implicit declaration of function 'clk_get_sys'
    
    because CLKDEV_LOOKUP is not configured and the driver depends on it.
    
    Fixes: 0b7402dce445 ("ARM: 8366/1: move Dual-Timer SP804 driver to drivers/clocksource")
    Acked-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 618b902d8c098f2fff188119da7b3184c4bc5483
Author: Yoshinori Sato <ysato@users.sourceforge.jp>
Date:   Wed Jan 28 02:52:42 2015 +0900

    h8300: clocksource
    
    h8300_timer8: 8bit clockevent device
    h8300_timer16 / h8300_tpu: 16bit clocksource
    
    Signed-off-by: Yoshinori Sato <ysato@users.sourceforge.jp>

commit 43224b96af3154cedd7220f7b90094905f07ac78
Merge: d70b3ef54cea 1cb6c2151850
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 22 18:57:44 2015 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "A rather largish update for everything time and timer related:
    
       - Cache footprint optimizations for both hrtimers and timer wheel
    
       - Lower the NOHZ impact on systems which have NOHZ or timer migration
         disabled at runtime.
    
       - Optimize run time overhead of hrtimer interrupt by making the clock
         offset updates smarter
    
       - hrtimer cleanups and removal of restrictions to tackle some
         problems in sched/perf
    
       - Some more leap second tweaks
    
       - Another round of changes addressing the 2038 problem
    
       - First step to change the internals of clock event devices by
         introducing the necessary infrastructure
    
       - Allow constant folding for usecs/msecs_to_jiffies()
    
       - The usual pile of clockevent/clocksource driver updates
    
      The hrtimer changes contain updates to sched, perf and x86 as they
      depend on them plus changes all over the tree to cleanup API changes
      and redundant code, which got copied all over the place.  The y2038
      changes touch s390 to remove the last non 2038 safe code related to
      boot/persistant clock"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (114 commits)
      clocksource: Increase dependencies of timer-stm32 to limit build wreckage
      timer: Minimize nohz off overhead
      timer: Reduce timer migration overhead if disabled
      timer: Stats: Simplify the flags handling
      timer: Replace timer base by a cpu index
      timer: Use hlist for the timer wheel hash buckets
      timer: Remove FIFO "guarantee"
      timers: Sanitize catchup_timer_jiffies() usage
      hrtimer: Allow hrtimer::function() to free the timer
      seqcount: Introduce raw_write_seqcount_barrier()
      seqcount: Rename write_seqcount_barrier()
      hrtimer: Fix hrtimer_is_queued() hole
      hrtimer: Remove HRTIMER_STATE_MIGRATE
      selftest: Timers: Avoid signal deadlock in leap-a-day
      timekeeping: Copy the shadow-timekeeper over the real timekeeper last
      clockevents: Check state instead of mode in suspend/resume path
      selftests: timers: Add leap-second timer edge testing to leap-a-day.c
      ntp: Do leapsecond adjustment in adjtimex read path
      time: Prevent early expiry of hrtimers[CLOCK_REALTIME] at the leap second edge
      ntp: Introduce and use SECS_PER_DAY macro instead of 86400
      ...

commit 336694a01dae7e788630f8043dae30337047b51b
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Tue Mar 31 09:14:59 2015 +0300

    watchdog: digicolor: driver for Conexant Digicolor CX92755 SoC
    
    This commit add a driver for the watchdog functionality of the Conexant CX92755
    SoC, from the Digicolor series of SoCs. Of 8 system timers provided by the
    CX92755, the first one, timer A, can reset the chip when its counter reaches
    zero. This driver uses this capability to provide userspace with a standard
    watchdog, using the watchdog timer driver core framework. This driver also
    implements a reboot handler for the reboot(2) system call.
    
    The watchdog driver shares the timer registers with the CX92755 timer driver
    (drivers/clocksource/timer-digicolor.c). The timer driver, however, uses only
    timers other than A, so both drivers should coexist.
    
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@iguana.be>

commit 72d72880612705143ad32cf4ede0d6ae27e8b975
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Wed Dec 24 18:41:55 2014 +0530

    ARCv2: SMP: clocksource: Enable Global Real Time counter
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit aa93e8ef98471277cfedacd68604bb28b5a35aa7
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Thu Nov 7 14:57:16 2013 +0530

    ARCv2: clocksource: Introduce 64bit local RTC counter
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit 1cb6c2151850584ee805fdcf088af0bb81f4b086
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sat Jun 20 19:02:32 2015 -0400

    clocksource: Increase dependencies of timer-stm32 to limit build wreckage
    
    This driver leaks out into arch/parisc builds that don't have
    CONFIG_GENERIC_CLOCKEVENTS, leading to the following (truncated)
    wreckage:
    
      CC      drivers/clocksource/timer-stm32.o
    drivers/clocksource/timer-stm32.c:38:28: error: field 'evtdev' has incomplete type
    drivers/clocksource/timer-stm32.c:44:19: warning: 'enum clock_event_mode' declared inside parameter list
    drivers/clocksource/timer-stm32.c:44:19: warning: its scope is only this definition or declaration, which is probably not what you want
    drivers/clocksource/timer-stm32.c:43:62: error: parameter 1 ('mode') has incomplete type
    drivers/clocksource/timer-stm32.c:43:13: error: function declaration isn't a prototype
    drivers/clocksource/timer-stm32.c: In function 'stm32_clock_event_set_mode':
    drivers/clocksource/timer-stm32.c:47:3: error: type defaults to 'int' in declaration of '__mptr'
    drivers/clocksource/timer-stm32.c:47:3: warning: initialization from incompatible pointer type
    drivers/clocksource/timer-stm32.c:51:7: error: 'CLOCK_EVT_MODE_PERIODIC' undeclared (first use in this function)
    drivers/clocksource/timer-stm32.c:51:7: note: each undeclared identifier is reported only once for each function it appears in
    drivers/clocksource/timer-stm32.c:56:7: error: 'CLOCK_EVT_MODE_ONESHOT' undeclared (first use in this function)
    
    Tighten up the dependencies to limit where it gets built by copying
    the style of the Kconfig line for CLKSRC_EFM32 a few lines above.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Chanwoo Choi <cw00.choi@samsung.com>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1434841352-24300-1-git-send-email-paul.gortmaker@windriver.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 5b9bd1784088f5407424d43f63ef777bb898d2d5
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Sat Mar 7 16:59:38 2015 +0530

    ARC: clocksource cleanups
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit 3e0d0b81ea0f7ed01a706d7c0c48b157c66f870e
Merge: 2f69b1a4e8a0 0be5da9dc249
Author: Kevin Hilman <khilman@linaro.org>
Date:   Wed Jun 10 16:58:05 2015 -0700

    Merge tag 'imx-soc-4.2' of git://git.kernel.org/pub/scm/linux/kernel/git/shawnguo/linux into next/soc
    
    The i.MX SoC updates for 4.2:
     - Add new SoC i.MX7D support, which integrates two Cortex-A7 and one
       Cortex-M4 cores.
     - Support suspend from IRAM on i.MX53, so that DDR pins can be set to
       high impedance for more power saving during suspend.
     - Move i.MX clock drivers from arch/arm/mach-imx to drivers/clk/imx.
     - Move i.MX GPT timer driver from arch/arm/mach-imx into
       drivers/clocksource.
     - A couple of clock driver update for VF610 and i.MX6Q.
     - A few random code correction and improvement.
    
    * tag 'imx-soc-4.2' of git://git.kernel.org/pub/scm/linux/kernel/git/shawnguo/linux: (44 commits)
      ARM: imx: imx7d requires anatop
      clocksource: timer-imx-gpt: remove include of <asm/mach/time.h>
      ARM: imx: move timer driver into drivers/clocksource
      ARM: imx: remove platform headers from timer driver
      ARM: imx: provide gpt device specific irq functions
      ARM: imx: get rid of variable timer_base
      ARM: imx: define gpt register offset per device type
      ARM: imx: move clock event variables into imx_timer
      ARM: imx: set up .set_next_event hook via imx_gpt_data
      ARM: imx: setup tctl register in device specific function
      ARM: imx: initialize gpt device type for DT boot
      ARM: imx: define an enum for gpt timer device type
      ARM: imx: move timer resources into a structure
      ARM: imx: use relaxed IO accessor in timer driver
      ARM: imx: make imx51/3 suspend optional
      ARM: clk-imx6q: refine sata's parent
      ARM: imx: clk-v610: Add clock for I2C2 and I2C3
      ARM: mach-imx: iomux-imx31: Use DECLARE_BITMAP
      ARM: imx: add imx7d clk tree support
      ARM: clk: imx: update pllv3 to support imx7
      ...
    
     Conflicts:
            arch/arm/mach-imx/Kconfig

commit 45bbfe64ea564a69e56ab6754006eee506224f46
Author: Joe Perches <joe@perches.com>
Date:   Mon May 25 11:49:55 2015 -0700

    clocksource: Use current logging style
    
    clocksource messages aren't prefixed in dmesg so it's a bit unclear
    what subsystem emits the messages.
    
    Use pr_fmt and pr_<level> to auto-prefix the messages appropriately.
    
    Miscellanea:
    
    o Remove "Warning" from KERN_WARNING level messages
    o Align "timekeeping watchdog: " messages
    o Coalesce formats
    o Align multiline arguments
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/1432579795.2846.75.camel@perches.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit cc013fa8dc302c5835465155da4799a1f0b4b06d
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Fri May 29 21:02:36 2015 +0800

    clocksource: timer-imx-gpt: remove include of <asm/mach/time.h>
    
    The include of <asm/mach/time.h> is not needed at all, and causes build
    error in some cases.  Remove it.
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bea5af41dd9b5f127c730c00610756972a616ed4
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Fri May 15 15:41:00 2015 +0800

    ARM: imx: move timer driver into drivers/clocksource
    
    After the cleanup on imx timer driver, now it's ready to be moved into
    drivers/clocksource/.  Let's do it.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c7770bbae276135ec59370159e60497593cc6b46
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Tue May 19 18:47:47 2015 +0800

    ARM: imx: use relaxed IO accessor in timer driver
    
    Replace the __raw_readl/__raw_writel with readl_relaxed/writel_relaxed
    which is endian-safe, as a step of moving the driver code into folder
    drivers/clocksource.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

commit 09cbbf0c169dd81487682622500c81a9012cbeef
Merge: be3ef76e9d9b d4688bdc6335
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 2 16:57:47 2015 +0200

    Merge branch 'clockevents/4.2' of http://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clockevents/clocksource changes from Daniel Lezcano:
    
      - Removed dead code in the files related to mach-msm for qcom (Stephen Boyd)
      - Cleaned up code for exynos_mct (Krzysztof Kozlowski)
      - Added the new timer lpc3220 (Joachim Eastwood)
      - Added the new timer STM32 and ARM system timer (Maxime Coquelin)

commit d4688bdc6335e9faaf3f0173f96932cd520cee1a
Author: Maxime Coquelin <mcoquelin.stm32@gmail.com>
Date:   Thu May 28 07:05:53 2015 +0200

    clockevents/drivers/timer-stm32: Fix build warning spotted by kbuild test robot
    
    This patch fixes below warning spotted by kbuild test robot when building
    with ARCH=powerpc:
    
       drivers/clocksource/timer-stm32.c: In function 'stm32_clockevent_init':
    >> drivers/clocksource/timer-stm32.c:140:9: warning: large integer implicitly
            truncated to unsigned type [-Woverflow]
    
         writel_relaxed(~0UL, data->base + TIM_ARR);
    
    The fix consists in using 0U instead of 0UL.
    
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4958ebb3d027886c46b936453745dba59b09c578
Author: Maxime Coquelin <mcoquelin.stm32@gmail.com>
Date:   Sat May 9 09:53:46 2015 +0200

    clocksource/drivers/armv7m_systick: Add ARM System timer driver
    
    This patch adds clocksource support for ARMv7-M's System timer,
    also known as SysTick.
    
    Tested-by: Chanwoo Choi <cw00.choi@samsung.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5fc9b49deadc16d088e8fc6ca4fee85644380497
Author: Joachim Eastwood <manabian@gmail.com>
Date:   Tue May 12 00:00:49 2015 +0200

    doc: dt: Add documentation for lpc3220-timer
    
    Add DT bindings documentation for lpc3220-timer. This timer is
    used as clocksource on many NXP platforms.
    
    Signed-off-by: Joachim Eastwood <manabian@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

commit 050dd3222ba9fe8cadcb5146de052139ffb30b61
Author: Joachim Eastwood <manabian@gmail.com>
Date:   Tue May 12 00:00:48 2015 +0200

    clocksource/drivers/lpc32xx: Add the lpc32xx timer driver
    
    Add support for using the NXP LPC timer as clocksource and clock
    event. These timers are present on many NXP devices including
    LPC32xx, LPC17xx, LPC18xx and LPC43xx.
    
    The timer has a 32-bit timer counter register with a programmable
    32-bit prescaler. It supports up to 4 compare match values with
    interrupt generation and reset/stop timer counter action.
    
    Signed-off-by: Joachim Eastwood <manabian@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Ezequiel Garcia <ezequiel@vanguardiasur.com.ar>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

commit 65ec7b2718719cef0c9e9db853a014db5a102def
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Apr 30 13:42:53 2015 +0900

    clocksource/drivers/exynos_mct: Remove old platform mct_init()
    
    Since commit 228e3023eb04 ("Merge tag 'mct-exynos-for-v3.10' of ...") the
    mct_init() was superseded by mct_init_dt() and is not referenced
    anywhere. Remove it.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6c10bf637207818f3caaea965d4b72007c36fc92
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Apr 30 13:42:52 2015 +0900

    clocksource/drivers/exynos_mct: Staticize struct clocksource
    
    The struct clocksource 'mct_frc' is not exported and used outside so
    make it static.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 37285674f3f14d9f0a7e26565b48e68e3edc635f
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Apr 30 13:42:51 2015 +0900

    clocksource/drivers/exynos_mct: Change exynos4_mct_tick_clear return type to void
    
    Return value of exynos4_mct_tick_clear() was never checked so it can
    be safely changed to void.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4ba15d1d41ba9a51da2dc986c145b7514cc394be
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Apr 10 16:11:02 2015 -0700

    clocksource/drivers/qcom: Remove dead code
    
    This code is no longer used now that mach-msm has been removed.
    Delete it.
    
    Cc: David Brown <davidb@codeaurora.org>
    Cc: Bryan Huntsman <bryanh@codeaurora.org>
    Cc: Daniel Walker <dwalker@fifo99.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e44d89f14227ffa5e96cd158fb2d35fbb40fa97a
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Fri May 29 12:27:46 2015 +0100

    ARM: 8382/1: clocksource: make ARM_TIMER_SP804 depend on GENERIC_SCHED_CLOCK
    
    Commit 5261ef2ea836 ("ARM: 8366/1: move Dual-Timer SP804 driver to
    drivers/clocksource") moved SP804 to drivers/clocksource resulting in
    it being selectable on platforms/architectures without the config
    GENERIC_SCHED_CLOCK enabled. Due to that, it results in the following
    build failure(e.g. x86_64 allmodconfig)
    
    drivers/built-in.o: In function `__sp804_clocksource_and_sched_clock_init':
    (.init.text+0x1a0e7): undefined reference to `sched_clock_register'
    
    This patch fixes the build by making ARM_TIMER_SP804 depend on
    GENERIC_SCHED_CLOCK
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 0b7402dce445ba0d11401c2cb806e8fc260c9e49
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon May 18 16:29:40 2015 +0100

    ARM: 8366/1: move Dual-Timer SP804 driver to drivers/clocksource
    
    The ARM Dual-Timer SP804 module is peripheral found not only on ARM32
    platforms but also on ARM64 platforms.
    
    This patch moves the driver out of arch/arm to driver/clocksource
    so that it can be used on ARM64 platforms also.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Rob Herring <robh@kernel.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Olof Johansson <olof@lixom.net>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 2526318638589ec26804f935cf38a7fa1d43cdeb
Author: Maxime Coquelin <mcoquelin.stm32@gmail.com>
Date:   Fri May 22 23:50:52 2015 +0200

    ARM: Kconfig: Select clocksource in STM32 entry
    
    STM32 clocksource driver needs to be selected if ARCH_STM32.
    
    Signed-off-by: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit ca9341d470e264327989a58ae537759f6e64e913
Author: Maxime Coquelin <mcoquelin.stm32@gmail.com>
Date:   Sat May 9 09:53:55 2015 +0200

    ARM: dts: Add ARM System timer as clocksource in armv7m
    
    Tested-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 5e1d01285140a8cd90676ba15c06c8ec700fd618
Author: Robert Jarzmik <robert.jarzmik@free.fr>
Date:   Sat Dec 27 14:55:25 2014 +0100

    ARM: pxa: change clocks init sequence
    
    Since pxa clocks were ported to the clock framework, an ordering issue
    appears between clocks and clocksource initialization. As a consequence,
    the pxa timer clock cannot be acquired in pxa_timer, and is disabled by
    clock framework because it is "unused".
    
    The ordering issue is that in the kernel boot sequence :
      start_kernel()
        ...
        time_init()
          -> pxa_timer()
            -> here the clocksource is initialized
        ...
        rest_init()
          kernel_init()
            initcalls
              -> here the clocks are initialized
    
    In the current sequence, the clocks are initialized way after pxa_timer,
    which cannot acquire the OSTIMER0 clock.
    
    To solve this issue, the clocks initialization is moved to pxa_timer(),
    so that clocks are initialized before clocksource for non device-tree.
    For device-tree, the standard arm time_init() will take care of the
    ordering.
    
    Reviewed-by: Michael Turquette <mturquette@linaro.org>
    Signed-off-by: Robert Jarzmik <robert.jarzmik@free.fr>

commit 8dd3075c489ba19a8f2795199352334e52f34bed
Author: Robert Jarzmik <robert.jarzmik@free.fr>
Date:   Sun Oct 12 22:11:08 2014 +0200

    ARM: dts: pxa: add pxa-timer to pxa27x and pxa3xx
    
    Each pxa has an embedded OS Timers IP. The kernel cannot work without a
    valid clocksource, and this adds the OS Timers to the pxa device-tree
    description.
    
    Signed-off-by: Robert Jarzmik <robert.jarzmik@free.fr>

commit 9fa8cc0a85c774b75218ba5f385792be387c190b
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Sat May 2 17:03:25 2015 +0200

    clocksource: sun5i: Fix of_io_request_and_map error check
    
    of_io_request_and map returns an error pointer, but the current code assumes
    that on error the returned pointer will be NULL.
    
    Obviously, that makes the check completely useless. Change the test to actually
    check for the proper error code.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1430579006-32702-6-git-send-email-maxime.ripard@free-electrons.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit bd580e7ed4add8ce9b2c1dd1911f8fb9d444128b
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Sat May 2 17:03:24 2015 +0200

    clocksource: integrator: Fix of_io_request_and_map error check
    
    of_io_request_and map returns an error pointer, but the current code assumes
    that on error the returned pointer will be NULL.
    
    Obviously, that makes the check completely useless. Change the test to actually
    check for the proper error code.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1430579006-32702-5-git-send-email-maxime.ripard@free-electrons.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit ff569fcd7123d9a9176d59174a27bab9a4fad328
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Sat May 2 17:03:23 2015 +0200

    clocksource: asm9260: Fix of_io_request_and_map error check
    
    of_io_request_and map returns an error pointer, but the current code assumes
    that on error the returned pointer will be NULL.
    
    Obviously, that makes the check completely useless. Change the test to actually
    check for the proper error code.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1430579006-32702-4-git-send-email-maxime.ripard@free-electrons.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 7f9f44308c8993c9ab8078d174dad34bea3e82d7
Merge: 63905bba5b01 d939b52abe0c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Apr 26 13:31:05 2015 -0700

    Merge tag 'cris-for-4.1' of git://git.kernel.org/pub/scm/linux/kernel/git/jesper/cris
    
    Pull arch/cris updates from Jesper Nilsson:
     "Some much needed love for the CRIS-port.
    
      There's a bunch of changes this time, giving the CRISv32 port a bit of
      modern makeover with device-tree, irq domain and gpiolib support, and
      more switchover to generic frameworks.
    
      Some small fixes and removal of the theoretical SMP support brings up
      the rear"
    
    * tag 'cris-for-4.1' of git://git.kernel.org/pub/scm/linux/kernel/git/jesper/cris:
      cris: fix integer overflow in ELF_ET_DYN_BASE
      CRISv32: use GENERIC_SCHED_CLOCK
      CRISv32: use MMIO clocksource
      CRISv32: use generic clockevents
      CRIS: use generic headers via Kbuild
      CRIS: use generic cmpxchg.h
      CRIS: use generic atomic.h
      CRIS: use generic atomic bitops
      CRISv10: remove redundant macros from system.h
      CRIS: remove SMP code
      CRISv32: don't enable irqs in INIT_THREAD
      CRISv32: handle multiple signals
      CRISv32: prevent bogus restarts on sigreturn
      CRISv32: don't attempt syscall restart on irq exit
      Add binding documentation for CRIS
      CRIS: add Axis 88 board device tree
      CRISv32: add device tree support
      CRISv32: add irq domains support
      CRIS: enable GPIOLIB

commit 836ee4874e201a5907f9658fb2bf3527dd952d30
Merge: fb65d872d7a8 7676fa70feb2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 24 08:23:45 2015 -0700

    Merge tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux
    
    Pull initial ACPI support for arm64 from Will Deacon:
     "This series introduces preliminary ACPI 5.1 support to the arm64
      kernel using the "hardware reduced" profile.  We don't support any
      peripherals yet, so it's fairly limited in scope:
    
       - MEMORY init (UEFI)
    
       - ACPI discovery (RSDP via UEFI)
    
       - CPU init (FADT)
    
       - GIC init (MADT)
    
       - SMP boot (MADT + PSCI)
    
       - ACPI Kconfig options (dependent on EXPERT)
    
      ACPI for arm64 has been in development for a while now and hardware
      has been available that can boot with either FDT or ACPI tables.  This
      has been made possible by both changes to the ACPI spec to cater for
      ARM-based machines (known as "hardware-reduced" in ACPI parlance) but
      also a Linaro-driven effort to get this supported on top of the Linux
      kernel.  This pull request is the result of that work.
    
      These changes allow us to initialise the CPUs, interrupt controller,
      and timers via ACPI tables, with memory information and cmdline coming
      from EFI.  We don't support a hybrid ACPI/FDT scheme.  Of course,
      there is still plenty of work to do (a serial console would be nice!)
      but I expect that to happen on a per-driver basis after this core
      series has been merged.
    
      Anyway, the diff stat here is fairly horrible, but splitting this up
      and merging it via all the different subsystems would have been
      extremely painful.  Instead, we've got all the relevant Acks in place
      and I've not seen anything other than trivial (Kconfig) conflicts in
      -next (for completeness, I've included my resolution below).  Nearly
      half of the insertions fall under Documentation/.
    
      So, we'll see how this goes.  Right now, it all depends on EXPERT and
      I fully expect people to use FDT by default for the immediate future"
    
    * tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux: (31 commits)
      ARM64 / ACPI: make acpi_map_gic_cpu_interface() as void function
      ARM64 / ACPI: Ignore the return error value of acpi_map_gic_cpu_interface()
      ARM64 / ACPI: fix usage of acpi_map_gic_cpu_interface
      ARM64: kernel: acpi: honour acpi=force command line parameter
      ARM64: kernel: acpi: refactor ACPI tables init and checks
      ARM64: kernel: psci: let ACPI probe PSCI version
      ARM64: kernel: psci: factor out probe function
      ACPI: move arm64 GSI IRQ model to generic GSI IRQ layer
      ARM64 / ACPI: Don't unflatten device tree if acpi=force is passed
      ARM64 / ACPI: additions of ACPI documentation for arm64
      Documentation: ACPI for ARM64
      ARM64 / ACPI: Enable ARM64 in Kconfig
      XEN / ACPI: Make XEN ACPI depend on X86
      ARM64 / ACPI: Select ACPI_REDUCED_HARDWARE_ONLY if ACPI is enabled on ARM64
      clocksource / arch_timer: Parse GTDT to initialize arch timer
      irqchip: Add GICv2 specific ACPI boot support
      ARM64 / ACPI: Introduce ACPI_IRQ_MODEL_GIC and register device's gsi
      ACPI / processor: Make it possible to get CPU hardware ID via GICC
      ACPI / processor: Introduce phys_cpuid_t for CPU hardware ID
      ARM64 / ACPI: Parse MADT for SMP initialization
      ...

commit 7d2b6ef19cf0f98cef17aa5185de3631a618710a
Merge: 5c73cc4b6c83 7415d97ee2b8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 22 09:18:17 2015 -0700

    Merge tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC driver updates from Olof Johansson:
     "Driver updates for v4.1.  Some of these are for drivers/soc, where we
      find more and more SoC-specific drivers these days.  Some are for
      other driver subsystems where we have received acks from the
      appropriate maintainers.
    
      The larger parts of this branch are:
    
       - MediaTek support for their PMIC wrapper interface, a high-level
         interface for talking to the system PMIC over a dedicated I2C
         interface.
    
       - Qualcomm SCM driver has been moved to drivers/firmware.  It's used
         for CPU up/down and needs to be in a shared location for arm/arm64
         common code.
    
       - cleanup of ARM-CCI PMU code.
    
       - another set of cleanusp to the OMAP GPMC code"
    
    * tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (43 commits)
      soc/mediatek: Remove unused variables
      clocksource: atmel-st: select MFD_SYSCON
      soc: mediatek: Add PMIC wrapper for MT8135 and MT8173 SoCs
      arm-cci: Fix CCI PMU event validation
      arm-cci: Split the code for PMU vs driver support
      arm-cci: Get rid of secure transactions for PMU driver
      arm-cci: Abstract the CCI400 PMU specific definitions
      arm-cci: Rearrange code for splitting PMU vs driver code
      drivers: cci: reject groups spanning multiple HW PMUs
      ARM: at91: remove useless include
      clocksource: atmel-st: remove mach/hardware dependency
      clocksource: atmel-st: use syscon/regmap
      ARM: at91: time: move the system timer driver to drivers/clocksource
      ARM: at91: properly initialize timer
      ARM: at91: at91rm9200: remove deprecated arm_pm_restart
      watchdog: at91rm9200: implement restart handler
      watchdog: at91rm9200: use the system timer syscon
      mfd: syscon: Add atmel system timer registers definition
      ARM: at91/dt: declare atmel,at91rm9200-st as a syscon
      soc: qcom: gsbi: Add support for ADM CRCI muxing
      ...

commit 4796cf9b02b5bea141632e21d64556a7eb883a65
Author: Yingjoe Chen <yingjoe.chen@mediatek.com>
Date:   Fri Apr 10 21:55:50 2015 +0800

    time: Remove nonexistent function prototype
    
    The function clocksource_get_next() was removed in commit 75c5158f70
    (timekeeping: Update clocksource with stop_machine), but the
    prototype was not removed with it. Remove the prototype.
    
    Signed-off-by: Yingjoe Chen <yingjoe.chen@mediatek.com>
    Cc: <linux-arm-kernel@lists.infradead.org>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: <srv_heupstream@mediatek.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/1428674150-1780-1-git-send-email-yingjoe.chen@mediatek.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 3c6527a54302f6ad724c8657a03dc4cdf64abe6c
Author: Yongbae Park <yongbae2@gmail.com>
Date:   Tue Mar 3 19:46:49 2015 +0900

    clocksource: efm32: Fix a NULL pointer dereference
    
    [ Upstream commit 7b8f10da3bf1056546133c9f54f49ce389fd95ab ]
    
    The initialisation of the efm32 clocksource first sets up the irq and only
    after that initialises the data needed for irq handling. In case this
    initialisation is delayed the irq handler would dereference a NULL pointer.
    
    I'm not aware of anything that could delay the process in such a way, but it's
    better to be safe than sorry, so setup the irq only when the clock event device
    is ready.
    
    Cc: stable@vger.kernel.org
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Yongbae Park <yongbae2@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 2a9fe3ca84afff6259820c4f62e579f41476becc
Author: Heiko Stuebner <heiko@sntech.de>
Date:   Tue Jan 20 23:47:30 2015 +0100

    rockchip: make sure timer7 is enabled on rk3288 platforms
    
    timer7 supplies the architected timer and thus as has to run when
    the system clocksource and clockevents drivers are registered.
    
    While it should be the responsibility of the bootloader to do this,
    and there exists a fix in a community u-boot, all u-boot based systems
    that actually shipped have the mentioned issue.
    
    Therefore to not require every developer to update their u-boot, add a
    snippet for this, enabling the timer early in the kernel.
    
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>

commit 5f26facecb622d07e5444c0b8dc7ace8f03a1339
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Apr 16 11:31:12 2015 +0200

    ALSA: hda - Add missing inclusion of <linux/clocksource.h>
    
    For fixing randconfig build errors like:
    
       sound/hda/hdac_stream.c: In function 'azx_timecounter_init':
       sound/hda/hdac_stream.c:365:2: error: implicit declaration of function 'CLOCKSOURCE_MASK' [-Werror=implicit-function-declaration]
    
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit b447eaa7d22db0fee573a6f859fba2cdfbb6d92d
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Mon Jan 12 16:26:02 2015 -0800

    x86, hyperv: Mark the Hyper-V clocksource as being continuous
    
    commit 32c6590d126836a062b3140ed52d898507987017 upstream.
    
    The Hyper-V clocksource is continuous; mark it accordingly.
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Acked-by: jasowang@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: devel@linuxdriverproject.org
    Cc: olaf@aepfle.de
    Cc: apw@canonical.com
    Link: http://lkml.kernel.org/r/1421108762-3331-1-git-send-email-kys@microsoft.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Zefan Li <lizefan@huawei.com>

commit 7415d97ee2b809119270fc3a365968ff8d4f544b
Merge: 875dac1c72e4 7ab7ef741a46
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 14 01:52:47 2015 +0200

    Merge tag 'at91-clocksource-driver2' of git://git.kernel.org/pub/scm/linux/kernel/git/nferre/linux-at91 into next/drivers
    
    Pull "A fix for the ST clocksource driver Kconfig option" from Nicolas Ferre
    
    * tag 'at91-clocksource-driver2' of git://git.kernel.org/pub/scm/linux/kernel/git/nferre/linux-at91:
      clocksource: atmel-st: select MFD_SYSCON

commit 7fd56474db326f7a6df0e2a4e3a9600cc083ab9b
Merge: 49d2953c72c6 def747087e83
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 13 11:08:28 2015 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Ingo Molnar:
     "The main changes in this cycle were:
    
       - clockevents state machine cleanups and enhancements (Viresh Kumar)
    
       - clockevents broadcast notifier horror to state machine conversion
         and related cleanups (Thomas Gleixner, Rafael J Wysocki)
    
       - clocksource and timekeeping core updates (John Stultz)
    
       - clocksource driver updates and fixes (Ben Dooks, Dmitry Osipenko,
         Hans de Goede, Laurent Pinchart, Maxime Ripard, Xunlei Pang)
    
       - y2038 fixes (Xunlei Pang, John Stultz)
    
       - NMI-safe ktime_get_raw_fast() and general refactoring of the clock
         code, in preparation to perf's per event clock ID support (Peter
         Zijlstra)
    
       - generic sched/clock fixes, optimizations and cleanups (Daniel
         Thompson)
    
       - clockevents cpu_down() race fix (Preeti U Murthy)"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (94 commits)
      timers/PM: Drop unnecessary braces from tick_freeze()
      timers/PM: Fix up tick_unfreeze()
      timekeeping: Get rid of stale comment
      clockevents: Cleanup dead cpu explicitely
      clockevents: Make tick handover explicit
      clockevents: Remove broadcast oneshot control leftovers
      sched/idle: Use explicit broadcast oneshot control function
      ARM: Tegra: Use explicit broadcast oneshot control function
      ARM: OMAP: Use explicit broadcast oneshot control function
      intel_idle: Use explicit broadcast oneshot control function
      ACPI/idle: Use explicit broadcast control function
      ACPI/PAD: Use explicit broadcast oneshot control function
      x86/amd/idle, clockevents: Use explicit broadcast oneshot control functions
      clockevents: Provide explicit broadcast oneshot control functions
      clockevents: Remove the broadcast control leftovers
      ARM: OMAP: Use explicit broadcast control function
      intel_idle: Use explicit broadcast control function
      cpuidle: Use explicit broadcast control function
      ACPI/processor: Use explicit broadcast control function
      ACPI/PAD: Use explicit broadcast control function
      ...

commit 954ca149d24600a805522da54c9b5f91dd631035
Author: Yongbae Park <yongbae2@gmail.com>
Date:   Tue Mar 3 19:46:49 2015 +0900

    clocksource: efm32: Fix a NULL pointer dereference
    
    commit 7b8f10da3bf1056546133c9f54f49ce389fd95ab upstream.
    
    The initialisation of the efm32 clocksource first sets up the irq and only
    after that initialises the data needed for irq handling. In case this
    initialisation is delayed the irq handler would dereference a NULL pointer.
    
    I'm not aware of anything that could delay the process in such a way, but it's
    better to be safe than sorry, so setup the irq only when the clock event device
    is ready.
    
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Yongbae Park <yongbae2@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c75a45eba48c9cde17c1041db76ba1f7596049f8
Author: Yongbae Park <yongbae2@gmail.com>
Date:   Tue Mar 3 19:46:49 2015 +0900

    clocksource: efm32: Fix a NULL pointer dereference
    
    commit 7b8f10da3bf1056546133c9f54f49ce389fd95ab upstream.
    
    The initialisation of the efm32 clocksource first sets up the irq and only
    after that initialises the data needed for irq handling. In case this
    initialisation is delayed the irq handler would dereference a NULL pointer.
    
    I'm not aware of anything that could delay the process in such a way, but it's
    better to be safe than sorry, so setup the irq only when the clock event device
    is ready.
    
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Yongbae Park <yongbae2@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ab7ef741a467e7af50c9b7446ec992bec9ea6a7
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Thu Mar 19 14:17:48 2015 +0100

    clocksource: atmel-st: select MFD_SYSCON
    
    Enforce MFD_SYSCON selection as the driver needs it. Else, it will still
    compile with some warning about X1, x2 or sr being used uninitialized.
    
    Reported-by: kbuild test robot <fengguang.wu@intel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Acked-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>

commit aabab880c5441cd39aef75fc1ecaa3125efb7a89
Merge: 4580cb8a9812 8590ca655a19
Author: Olof Johansson <olof@lixom.net>
Date:   Fri Apr 3 10:44:28 2015 -0700

    Merge tag 'at91-cleanup3' of git://git.kernel.org/pub/scm/linux/kernel/git/nferre/linux-at91 into next/drivers
    
    Merge "at91: cleanup for 4.1 #3" from Nicolas Ferre:
    
    Third batch of cleanup for 4.1:
    - System Timer (ST) for at91rm9200 re-work (syscon/regmap):
      - watchdog
      - restart handler
      - timer as a proper clocksource
      => remove mach dependency + cleanup
    
    * tag 'at91-cleanup3' of git://git.kernel.org/pub/scm/linux/kernel/git/nferre/linux-at91: (54 commits)
      ARM: at91: remove useless include
      clocksource: atmel-st: remove mach/hardware dependency
      clocksource: atmel-st: use syscon/regmap
      ARM: at91: time: move the system timer driver to drivers/clocksource
      ARM: at91: properly initialize timer
      ARM: at91: at91rm9200: remove deprecated arm_pm_restart
      watchdog: at91rm9200: implement restart handler
      watchdog: at91rm9200: use the system timer syscon
      mfd: syscon: Add atmel system timer registers definition
      ARM: at91/dt: declare atmel,at91rm9200-st as a syscon
      ARM: at91: remove old setup
      ARM: at91: sama5d4: remove useless map_io
      ARM: at91: sama5 use SoC detection infrastructure
      ARM: at91: at91sam9: use SoC detection infrastructure
      ARM: at91: at91rm9200 use SoC detection infrastructure
      ARM: at91: add soc detection infrastructure
      ARM: at91/dt: introduce atmel,<chip>-dbgu
      ARM: at91: remove unused _matrix.h headers
      ARM: at91: remove unused at91_ioremap_matrix and header
      ARM: at91: remove NEED_MACH_IO_H
      ...
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 8e56f33f8439b2f8e7f4ae7f3d0bfe683ecc3b09
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Apr 1 20:34:39 2015 -0700

    clocksource: Improve comment explaining clocks_calc_max_nsecs()'s 50% safety margin
    
    Ingo noted that the description of clocks_calc_max_nsecs()'s
    50% safety margin was somewhat circular. So this patch tries
    to improve the comment to better explain what we mean by the
    50% safety margin and why we need it.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1427945681-29972-20-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 0fa88cb4b82b5cf7429bc1cef9db006ca035754e
Author: Xunlei Pang <pang.xunlei@linaro.org>
Date:   Wed Apr 1 20:34:38 2015 -0700

    time, drivers/rtc: Don't bother with rtc_resume() for the nonstop clocksource
    
    If a system does not provide a persistent_clock(), the time
    will be updated on resume by rtc_resume(). With the addition
    of the non-stop clocksources for suspend timing, those systems
    set the time on resume in timekeeping_resume(), but may not
    provide a valid persistent_clock().
    
    This results in the rtc_resume() logic thinking no one has set
    the time and it then will over-write the suspend time again,
    which is not necessary and only increases clock error.
    
    So, fix this for rtc_resume().
    
    This patch also improves the name of persistent_clock_exist to
    make it more grammatical.
    
    Signed-off-by: Xunlei Pang <pang.xunlei@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1427945681-29972-19-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 264bb3f79f2a465477cdcd2f0554e21aedc443a3
Author: Xunlei Pang <pang.xunlei@linaro.org>
Date:   Wed Apr 1 20:34:37 2015 -0700

    time: Fix a bug in timekeeping_suspend() with no persistent clock
    
    When there's no persistent clock, normally
    timekeeping_suspend_time should always be zero, but this can
    break in timekeeping_suspend().
    
    At T1, there was a system suspend, so old_delta was assigned T1.
    After some time, one time adjustment happened, and xtime got the
    value of T1-dt(0s<dt<2s). Then, there comes another system
    suspend soon after this adjustment, obviously we will get a
    small negative delta_delta, resulting in a negative
    timekeeping_suspend_time.
    
    This is problematic, when doing timekeeping_resume() if there is
    no nonstop clocksource for example, it will hit the else leg and
    inject the improper sleeptime which is the wrong logic.
    
    So, we can solve this problem by only doing delta related code
    when the persistent clock is existent. Actually the code only
    makes sense for persistent clock cases.
    
    Signed-off-by: Xunlei Pang <pang.xunlei@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1427945681-29972-18-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit cb850717b076d979058d52529e15f1736359d811
Author: Xunlei Pang <pang.xunlei@linaro.org>
Date:   Wed Apr 1 20:34:26 2015 -0700

    ARM, clocksource/drivers: Provide read_boot_clock64() and read_persistent_clock64() and use them
    
    As part of addressing "y2038 problem" for in-kernel uses, this
    patch converts read_boot_clock() to read_boot_clock64() and
    read_persistent_clock() to read_persistent_clock64() using
    timespec64 by converting clock_access_fn to use timespec64.
    
    Signed-off-by: Xunlei Pang <pang.xunlei@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Thierry Reding <treding@nvidia.com> (for tegra part)
    Cc: Russell King <rmk@dyn-67.arm.linux.org.uk>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1427945681-29972-7-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit a0c2998f918e7e597d3c686c5f3d5a30d0382dd6
Author: Xunlei Pang <pang.xunlei@linaro.org>
Date:   Wed Apr 1 20:34:25 2015 -0700

    clocksource/drivers/tegra: Provide y2038-safe tegra_read_persistent_clock() replacement
    
    As part of addressing "y2038 problem" for in-kernel uses, this
    patch adds the y2038-safe tegra_read_persistent_clock64() using
    timespec64.
    
    Because we rely on some subsequent changes to convert arm
    multiarch support, tegra_read_persistent_clock() will be removed
    then.
    
    Signed-off-by: Xunlei Pang <pang.xunlei@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1427945681-29972-6-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 58bc2d9b160e1d2ce517eb05552b5a07efa814ef
Merge: c0b0bb6e1490 1164f672d71a
Author: Olof Johansson <olof@lixom.net>
Date:   Wed Apr 1 17:58:11 2015 -0700

    Merge tag 'at91-multiplatform' of git://git.kernel.org/pub/scm/linux/kernel/git/nferre/linux-at91 into next/multiplatform
    
    Merge "at91: multiplatform for 4.1 #1" from Nicolas Ferre:
    
    This is the multi-platform support for AT91:
    - reworked arch/arm/mach-at91/Kconfig and arch/arm/Kconfig to switch to
      multi-platform
    - updated at91_dt_defconfig
    - continue the cleanup of unneeded files and code chunks
    
    * tag 'at91-multiplatform' of git://git.kernel.org/pub/scm/linux/kernel/git/nferre/linux-at91: (61 commits)
      ARM: at91: drop AT91_TIMER_HZ
      ARM: at91: remove hardware.h
      ARM: at91: remove SoC headers
      ARM: at91: remove useless mach/cpu.h
      ARM: at91: remove unused headers
      ARM: at91: switch at91_dt_defconfig to multiplatform
      ARM: at91: switch to multiplatform
      ARM: at91: remove useless include
      clocksource: atmel-st: remove mach/hardware dependency
      clocksource: atmel-st: use syscon/regmap
      ARM: at91: time: move the system timer driver to drivers/clocksource
      ARM: at91: properly initialize timer
      ARM: at91: at91rm9200: remove deprecated arm_pm_restart
      watchdog: at91rm9200: implement restart handler
      watchdog: at91rm9200: use the system timer syscon
      mfd: syscon: Add atmel system timer registers definition
      ARM: at91/dt: declare atmel,at91rm9200-st as a syscon
      ARM: at91: remove old setup
      ARM: at91: sama5d4: remove useless map_io
      ARM: at91: sama5 use SoC detection infrastructure
      ...
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit bfb83b27519aa7ed9510f601a8f825a2c1484bc2
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Mar 25 13:06:04 2015 +0100

    tick: Move clocksource related stuff to timekeeping.h
    
    Move clocksource related stuff to timekeeping.h and remove the
    pointless include from ntp.c
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    [ rjw: Subject ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/2714218.nM5AEfAHj0@vostro.rjw.lan
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 3071efa466b30636bf958f3d13bc808e03105cd8
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Mar 31 12:12:26 2015 +0200

    clocksource/drivers/sun5i: Add clock notifiers
    
    The parent clock of the sun5i timer is the AHB clock, which rate
    might change because of other devices requirements.
    
    This is for example the case on the Allwinner A31, where the DMA
    controller needs a minimum rate higher than the default, that is
    enforced after the timer driver has probed.
    
    Add clock notifiers to make sure we reflect the clock rate
    changes in the timer rates.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1427796746-373-5-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 4a59058f0b09682200c04b1db236b4a3b92128d7
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Mar 31 12:12:25 2015 +0200

    clocksource/drivers/sun5i: Refactor the current code
    
    Refactor the code in order to remove the global variables and
    split the clock source and clock events registration in order to
    ease the addition of the clock notifiers needed to handle the
    parent clock rate changes.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1427796746-373-4-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit a45860d0ba433c217d359fa2cc2a4984d18ce263
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Mar 31 12:12:24 2015 +0200

    clocksource/drivers/sun5i: Use of_io_request_and_map()
    
    of_iomap doesn't do a request_mem_region() on the memory area
    defined in the DT it maps. Switch to of_io_request_and_map() to
    make sure we're the only users.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1427796746-373-3-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 5673bc5a863bd4391eab5bb85277f0f1dd1dca50
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Mar 31 12:12:23 2015 +0200

    clocksource/drivers/sun5i: Switch to request_irq()
    
    The current code uses setup_irq(), while it could perfectly use
    the much simpler request_irq(). Switch to that.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1427796746-373-2-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 566e6dfad580a55084c29fe3e887c7273b16fc6a
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 31 12:12:22 2015 +0200

    clocksource/drivers/arm_arch_timer: Rename 'arch_timer_probed()' to 'arch_timer_needs_probing()' to reflect behaviour
    
    The arch_timer_probed() function returns whether the given time
    doesn't need to be probed. This can be the case when the timer
    has been probed already, but also when it has no corresponding
    enabled node in DT.
    
    Rename the function to arch_timer_needs_probing() and invert its
    return value to better reflect the function's purpose and
    behaviour.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Sudeep Holla <sudeep.holla@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1427796746-373-1-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 7d9cd1f5189abaa9553ddcb966b749c65b669d5a
Author: Markos Chandras <markos.chandras@imgtec.com>
Date:   Mon Mar 23 12:32:02 2015 +0000

    CLOCKSOURCE: mips-gic-timer: Ensure GIC counter is running
    
    Start the GIC counter after configuring the clocksource since there
    are no guarantees the counter will be running after a CPU reset.
    
    Signed-off-by: Markos Chandras <markos.chandras@imgtec.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/9595/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 4806c87f017d8a7003ad34886f58c3b9e023df6a
Author: Ben Dooks <ben.dooks@codethink.co.uk>
Date:   Mon Mar 30 22:17:09 2015 +0200

    clocksource/drivers/at91: Fix IO endianness
    
    Fix the use of __raw IO accessor with the readl/writel_relaxed()
    versions to allow the code to be used on a system running in big
    endian mode.
    
    Signed-off-by: Ben Dooks <ben.dooks@codethink.co.uk>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Cc: Andrew Victor <linux@maxim.org.za>
    Cc: Jean-Christophe Plagniol-Villard <plagnioj@jcrosoft.com>
    Cc: Linux ARM Kernel <linux-arm-kernel@lists.infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: digetx@gmail.com
    Cc: hdegoede@redhat.com
    Cc: laurent.pinchart+renesas@ideasonboard.com
    Cc: maxime.ripard@free-electrons.com
    Cc: viresh.kumar@linaro.org
    Link: http://lkml.kernel.org/r/1427746633-9137-7-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 37b8b003c483191a327a740fc32c1993959e7ae9
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Mar 30 22:17:10 2015 +0200

    clocksource/drivers/sun4i-timer: Only register a sched_clock on sun4i and sun5i
    
    sun6i and newer have an arm arch timer which is a better
    sched_clock source then the sun4i-timer, and sched_clock does
    not have priorities, so do not register the sun4i-timer
    sched_clock at all on sun6i and newer.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Cc: ben.dooks@codethink.co.uk
    Cc: digetx@gmail.com
    Cc: laurent.pinchart+renesas@ideasonboard.com
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: viresh.kumar@linaro.org
    Link: http://lkml.kernel.org/r/1427746633-9137-8-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 59196bcef5c1034f020fe5bf3579f89767537246
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Mar 30 22:17:11 2015 +0200

    clocksource/drivers/tegra: Fix IO endianness
    
    Support big-endian kernel by using endian-aware register access
    functions.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Cc: ben.dooks@codethink.co.uk
    Cc: hdegoede@redhat.com
    Cc: laurent.pinchart+renesas@ideasonboard.com
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: maxime.ripard@free-electrons.com
    Cc: viresh.kumar@linaro.org
    Link: http://lkml.kernel.org/r/1427746633-9137-9-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 3a10013b6a5975346fe5a8db59500a8d176d64e0
Author: Ben Dooks <ben.dooks@codethink.co.uk>
Date:   Mon Mar 30 22:17:12 2015 +0200

    clocksource/drivers/dw_apb_timers_of: Fix IO endianness causing time jumps
    
    The dw_apb_timer_of timer is using __raw_readl() to access the
    timer register, which is causing issues when the system is
    running in big endian mode. Fix this by using readl_relaxed()
    which should account for the endian settings.
    
    This fixes issues where the time jumps around in the dmesg
    output due to returnling __le32 values.
    
    For an example, these two console lines show time running
    backwards:
    
    [   49.882572] CPU1: failed to come online
    [   43.282457] Brought up 1 CPUs
    
    Signed-off-by: Ben Dooks <ben.dooks@codethink.co.uk>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Cc: Dinh Nguyen <dinguyen@opensource.altera.com>
    Cc: Linux ARM Kernel <linux-arm-kernel@lists.infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: digetx@gmail.com
    Cc: hdegoede@redhat.com
    Cc: laurent.pinchart+renesas@ideasonboard.com
    Cc: maxime.ripard@free-electrons.com
    Cc: viresh.kumar@linaro.org
    Link: http://lkml.kernel.org/r/1427746633-9137-10-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit ad834a346853b7ee7c684efa56b1d415a850a710
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon Mar 30 22:17:13 2015 +0200

    clocksource/drivers/efm32: Use CLOCK_EVT_FEAT_PERIODIC for defining features
    
    We have used CLOCK_EVT_MODE_PERIODIC instead of
    CLOCK_EVT_FEAT_PERIODIC while defining features. Fix it.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Uwe Kleine-Koenig <u.kleine-koenig@pengutronix.de>
    Cc: ben.dooks@codethink.co.uk
    Cc: digetx@gmail.com
    Cc: hdegoede@redhat.com
    Cc: laurent.pinchart+renesas@ideasonboard.com
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: maxime.ripard@free-electrons.com
    Link: http://lkml.kernel.org/r/1427746633-9137-11-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit fc28726d892f65d0eb55eb3328ee573deb2c3a26
Author: Yongbae Park <yongbae2@gmail.com>
Date:   Tue Mar 3 19:46:49 2015 +0900

    clocksource: efm32: Fix a NULL pointer dereference
    
    commit 7b8f10da3bf1056546133c9f54f49ce389fd95ab upstream.
    
    The initialisation of the efm32 clocksource first sets up the irq and only
    after that initialises the data needed for irq handling. In case this
    initialisation is delayed the irq handler would dereference a NULL pointer.
    
    I'm not aware of anything that could delay the process in such a way, but it's
    better to be safe than sorry, so setup the irq only when the clock event device
    is ready.
    
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Yongbae Park <yongbae2@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 4a89452e70a019cb6bfb1114b12f2607c3bace24
Merge: 19dba4f3e9f7 6e206020324c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Mar 28 11:21:23 2015 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Ingo Molnar:
     "Two clocksource driver fixes, and an idle loop RCU warning fix"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource/drivers/sun5i: Fix cpufreq interaction with sched_clock()
      clocksource/drivers: Fix various !CONFIG_HAS_IOMEM build errors
      timers/tick/broadcast-hrtimer: Fix suspicious RCU usage in idle loop

commit b09ca1ecf6d499d5a33f978c905d2fbcc79b55d9
Author: Hanjun Guo <hanjun.guo@linaro.org>
Date:   Tue Mar 24 14:02:50 2015 +0000

    clocksource / arch_timer: Parse GTDT to initialize arch timer
    
    Using the information presented by GTDT (Generic Timer Description Table)
    to initialize the arch timer (not memory-mapped).
    
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Originally-by: Amit Daniel Kachhap <amit.daniel@samsung.com>
    Tested-by: Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
    Tested-by: Yijing Wang <wangyijing@huawei.com>
    Tested-by: Mark Langsdorf <mlangsdo@redhat.com>
    Tested-by: Jon Masters <jcm@redhat.com>
    Tested-by: Timur Tabi <timur@codeaurora.org>
    Tested-by: Robert Richter <rrichter@cavium.com>
    Acked-by: Robert Richter <rrichter@cavium.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Grant Likely <grant.likely@linaro.org>
    Signed-off-by: Hanjun Guo <hanjun.guo@linaro.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit 6e206020324c50a95486f6b279a53512febed92d
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Mar 26 10:27:09 2015 +0100

    clocksource/drivers/sun5i: Fix cpufreq interaction with sched_clock()
    
    The sun5i timer is used as the sched-clock on certain systems, and ever
    since we started using cpufreq, the cpu clock (that is one of the
    timer's clock indirect parent) now changes as well, along with the
    actual sched_clock() rate.
    
    This is not accurate and not desirable.
    
    We can safely remove the sun5i sched-clock on those systems, since we
    have other reliable sched_clock() sources in the system.
    
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    [ Improved the changelog. ]
    Cc: richard@nod.at
    Link: http://lkml.kernel.org/r/1427362029-6511-4-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 11bc26fe372fa6da81c82c68f755d2795838a640
Author: Richard Weinberger <richard@nod.at>
Date:   Thu Mar 26 10:27:06 2015 +0100

    clocksource/drivers: Fix various !CONFIG_HAS_IOMEM build errors
    
    Fix !CONFIG_HAS_IOMEM related build failures in three clocksource drivers.
    
    The build failures have the pattern of:
    
      drivers/clocksource/sh_cmt.c: In function ‘sh_cmt_map_memory’: drivers/clocksource/sh_cmt.c:920:2:
      error: implicit declaration of function ‘ioremap_nocache’ [-Werror=implicit-function-declaration]   cmt->mapbase = ioremap_nocache(mem->start, resource_size(mem));
    
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: maxime.ripard@free-electrons.com
    Link: http://lkml.kernel.org/r/1427362029-6511-1-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit edfb6d5f1a05627204d1640ba527312dc8ea745a
Author: Rabin Vincent <rabin@rab.in>
Date:   Mon Mar 9 18:48:25 2015 +0100

    CRISv32: use MMIO clocksource
    
    Use a generic MMIO clocksource and get rid of some lines of code.
    
    Signed-off-by: Rabin Vincent <rabin@rab.in>
    Signed-off-by: Jesper Nilsson <jespern@axis.com>

commit 13326e5a620df5063df2e87b38d923785066ee63
Merge: 8e6e44fbd230 d415a7f1c1a8 9ab2b7f3acfa
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 17 13:22:29 2015 -0700

    Merge branches 'perf-urgent-for-linus' and 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull perf and timer fixes from Ingo Molnar:
     "Two small perf fixes:
       - kernel side context leak fix
       - tooling crash fix
    
      And two clocksource driver fixes"
    
    * 'perf-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      perf: Fix context leak in put_event()
      perf annotate: Fix fallback to unparsed disassembler line
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clockevents: sun5i: Fix setup_irq init sequence
      clocksource: efm32: Fix a NULL pointer dereference

commit 88c5544ab2240cf2a2dc87b5af9cd7990d06d028
Merge: 2197cf7006b6 8590ca655a19
Author: Nicolas Ferre <nicolas.ferre@atmel.com>
Date:   Mon Mar 16 18:09:48 2015 +0100

    Merge tag 'at91-cleanup3' into at91-4.1-multiplatform
    
    Third batch of cleanup for 4.1:
    - System Timer (ST) for at91rm9200 re-work (syscon/regmap):
      - watchdog
      - restart handler
      - timer as a proper clocksource
      => remove mach dependency + cleanup

commit 0afb46b248eff66e619ac00ac96d2e986844575e
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Fri Mar 13 11:54:37 2015 +0100

    clocksource: atmel-st: remove mach/hardware dependency
    
    Remove the mach/hardware dependency to prepare the driver for multiplatform
    support.
    Also switch from setup_irq() to request_irq()
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>

commit adf2edfd6003c401ae52a360e0e67abc7deeb952
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Thu Mar 12 13:07:32 2015 +0100

    clocksource: atmel-st: use syscon/regmap
    
    The register range from the system timer is also used by the watchdog driver.
    Use a regmap to handle concurrent accesses.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Acked-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>

commit b53cdd03222391f76e82cd0c7d040816c919ab75
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Thu Mar 12 13:07:31 2015 +0100

    ARM: at91: time: move the system timer driver to drivers/clocksource
    
    Import at91rm9200_time.c from mach-at91 as timer-atmel-st.c. Further cleanup is
    required to get rid of the mach-at91 headers.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Acked-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>

commit bbfc97e1b1b9fb2177a9134f57506eb371638b85
Author: Alexandre Belloni <alexandre.belloni@free-electrons.com>
Date:   Thu Mar 12 13:07:30 2015 +0100

    ARM: at91: properly initialize timer
    
    Use clocksource_of_init to initialize the system timer instead of relying on a
    custom function.
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Acked-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>

commit fba9e07208c0f9d92d9f73761c99c8612039da44
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:40 2015 -0700

    clocksource: Rename __clocksource_updatefreq_*() to __clocksource_update_freq_*()
    
    Ingo requested this function be renamed to improve readability,
    so I've renamed __clocksource_updatefreq_scale() as well as the
    __clocksource_updatefreq_hz/khz() functions to avoid
    squishedtogethernames.
    
    This touches some of the sh clocksources, which I've not tested.
    
    The arch/arm/plat-omap change is just a comment change for
    consistency.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-13-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 8cc8c525ad4e7b581cacf84119e1a28dcb4044db
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:39 2015 -0700

    clocksource: Add some debug info about clocksources being registered
    
    Print the mask, max_cycles, and max_idle_ns values for
    clocksources being registered.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-12-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 3142f76022fe46f6e0a0d3940b23fb6ccb794692
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:38 2015 -0700

    clocksource, sparc32: Convert to using clocksource_register_hz()
    
    While cleaning up some clocksource code, I noticed the
    time_32 implementation uses the clocksource_hz2mult()
    helper, but doesn't use the clocksource_register_hz()
    method.
    
    I don't believe the Sparc clocksource is a default
    clocksource, so we shouldn't need to self-define
    the mult/shift pair.
    
    So convert the time_32.c implementation to use
    clocksource_register_hz().
    
    Untested.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: David S. Miller <davem@davemloft.net>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-11-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit f8935983f110505daa38e8d36ee406807f83a069
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:37 2015 -0700

    clocksource: Mostly kill clocksource_register()
    
    A long running project has been to clean up remaining uses
    of clocksource_register(), replacing it with the simpler
    clocksource_register_khz/hz() functions.
    
    However, there are a few cases where we need to self-define
    our mult/shift values, so switch the function to a more
    obviously internal __clocksource_register() name, and
    consolidate much of the internal logic so we don't have
    duplication.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-10-git-send-email-john.stultz@linaro.org
    [ Minor cleanups. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 0b046b217ad4c64fbbeaaac24d0648cb1fa49ad8
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:36 2015 -0700

    clocksource: Improve clocksource watchdog reporting
    
    The clocksource watchdog reporting has been less helpful
    then desired, as it just printed the delta between
    the two clocksources. This prevents any useful analysis
    of why the skew occurred.
    
    Thus this patch tries to improve the output when we
    mark a clocksource as unstable, printing out the cycle
    last and now values for both the current clocksource
    and the watchdog clocksource. This will allow us to see
    if the result was due to a false positive caused by
    a problematic watchdog.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-9-git-send-email-john.stultz@linaro.org
    [ Minor cleanups of kernel messages. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 057b87e3161d1194a095718f9918c01b2c389e74
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:34 2015 -0700

    timekeeping: Try to catch clocksource delta underflows
    
    In the case where there is a broken clocksource
    where there are multiple actual clocks that
    aren't perfectly aligned, we may see small "negative"
    deltas when we subtract 'now' from 'cycle_last'.
    
    The values are actually negative with respect to the
    clocksource mask value, not necessarily negative
    if cast to a s64, but we can check by checking the
    delta to see if it is a small (relative to the mask)
    negative value (again negative relative to the mask).
    
    If so, we assume we jumped backwards somehow and
    instead use zero for our delta.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-7-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit a558cd021d83b65c47ee5b9bec1fcfe5298a769f
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:33 2015 -0700

    timekeeping: Add checks to cap clocksource reads to the 'max_cycles' value
    
    When calculating the current delta since the last tick, we
    currently have no hard protections to prevent a multiplication
    overflow from occuring.
    
    This patch introduces infrastructure to allow a cap that
    limits the clocksource read delta value to the 'max_cycles' value,
    which is where an overflow would occur.
    
    Since this is in the hotpath, it adds the extra checking under
    CONFIG_DEBUG_TIMEKEEPING=y.
    
    There was some concern that capping time like this could cause
    problems as we may stop expiring timers, which could go circular
    if the timer that triggers time accumulation were mis-scheduled
    too far in the future, which would cause time to stop.
    
    However, since the mult overflow would result in a smaller time
    value, we would effectively have the same problem there.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-6-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 3c17ad19f0697ffe5ef7438cdafc2d2b7757d8a5
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:32 2015 -0700

    timekeeping: Add debugging checks to warn if we see delays
    
    Recently there's been requests for better sanity
    checking in the time code, so that it's more clear
    when something is going wrong, since timekeeping issues
    could manifest in a large number of strange ways in
    various subsystems.
    
    Thus, this patch adds some extra infrastructure to
    add a check to update_wall_time() to print two new
    warnings:
    
     1) if we see the call delayed beyond the 'max_cycles'
        overflow point,
    
     2) or if we see the call delayed beyond the clocksource's
        'max_idle_ns' value, which is currently 50% of the
        overflow point.
    
    This extra infrastructure is conditional on
    a new CONFIG_DEBUG_TIMEKEEPING option, also
    added in this patch - default off.
    
    Tested this a bit by halting qemu for specified
    lengths of time to trigger the warnings.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-5-git-send-email-john.stultz@linaro.org
    [ Improved the changelog and the messages a bit. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 7290ce1423c38108027ae90116ece6618db32bc3
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 17:40:10 2015 -0700

    selftests/timers: Add clocksource-switch test from timetest suite
    
    Adds the clocksource-switch tests which continually switches the
    current clocksource between all the available ones, watching for
    any timekeeping inconsistencies.
    
    Cc: Shuah Khan <shuahkh@osg.samsung.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Prarit Bhargava <prarit@redhat.com>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

commit fb82fe2fe8588745edd73aa3a6229facac5c1e15
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:31 2015 -0700

    clocksource: Add 'max_cycles' to 'struct clocksource'
    
    In order to facilitate clocksource validation, add a
    'max_cycles' field to the clocksource structure which
    will hold the maximum cycle value that can safely be
    multiplied without potentially causing an overflow.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-4-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 362fde0410377e468ca00ad363fdf3e3ec42eb6a
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:30 2015 -0700

    clocksource: Simplify the logic around clocksource wrapping safety margins
    
    The clocksource logic has a number of places where we try to
    include a safety margin. Most of these are 12% safety margins,
    but they are inconsistently applied and sometimes are applied
    on top of each other.
    
    Additionally, in the previous patch, we corrected an issue
    where we unintentionally in effect created a 50% safety margin,
    which these 12.5% margins where then added to.
    
    So to simplify the logic here, this patch removes the various
    12.5% margins, and consolidates adding the margin in one place:
    clocks_calc_max_nsecs().
    
    Additionally, Linus prefers a 50% safety margin, as it allows
    bad clock values to be more easily caught. This should really
    have no net effect, due to the corrected issue earlier which
    caused greater then 50% margins to be used w/o issue.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Stephen Boyd <sboyd@codeaurora.org> (for the sched_clock.c bit)
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-3-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 6086e346fdea1ae64d974c94c1acacc2605567ae
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 11 21:16:29 2015 -0700

    clocksource: Simplify the clocks_calc_max_nsecs() logic
    
    The previous clocks_calc_max_nsecs() code had some unecessarily
    complex bit logic to find the max interval that could cause
    multiplication overflows. Since this is not in the hot
    path, just do the divide to make it easier to read.
    
    The previous implementation also had a subtle issue
    that it avoided overflows with signed 64-bit values, where
    as the intervals are always unsigned. This resulted in
    overly conservative intervals, which other safety margins
    were then added to, reducing the intended interval length.
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1426133800-29329-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 1c09fe950fbf5f1cbb13385f2c91cdcb2f5f4fa0
Author: Matthias Brugger <matthias.bgg@gmail.com>
Date:   Thu Feb 19 11:41:33 2015 +0100

    clocksource: mtk: Fix race conditions in probe code
    
    commit d4a19eb3b15a4ba98f627182f48d5bc0cffae670 upstream.
    
    We have two race conditions in the probe code which could lead to a null
    pointer dereference in the interrupt handler.
    
    The interrupt handler accesses the clockevent device, which may not yet be
    registered.
    
    First race condition happens when the interrupt handler gets registered before
    the interrupts get disabled. The second race condition happens when the
    interrupts get enabled, but the clockevent device is not yet registered.
    
    Fix that by disabling the interrupts before we register the interrupt and enable
    the interrupts after the clockevent device got registered.
    
    Reported-by: Gongbae Park <yongbae2@gmail.com>
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df1d6514e97391aa4e2459f6cf04d7f3be9b0faf
Author: Matthias Brugger <matthias.bgg@gmail.com>
Date:   Thu Feb 19 11:41:33 2015 +0100

    clocksource: mtk: Fix race conditions in probe code
    
    commit d4a19eb3b15a4ba98f627182f48d5bc0cffae670 upstream.
    
    We have two race conditions in the probe code which could lead to a null
    pointer dereference in the interrupt handler.
    
    The interrupt handler accesses the clockevent device, which may not yet be
    registered.
    
    First race condition happens when the interrupt handler gets registered before
    the interrupts get disabled. The second race condition happens when the
    interrupts get enabled, but the clockevent device is not yet registered.
    
    Fix that by disabling the interrupts before we register the interrupt and enable
    the interrupts after the clockevent device got registered.
    
    Reported-by: Gongbae Park <yongbae2@gmail.com>
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b8f10da3bf1056546133c9f54f49ce389fd95ab
Author: Yongbae Park <yongbae2@gmail.com>
Date:   Tue Mar 3 19:46:49 2015 +0900

    clocksource: efm32: Fix a NULL pointer dereference
    
    The initialisation of the efm32 clocksource first sets up the irq and only
    after that initialises the data needed for irq handling. In case this
    initialisation is delayed the irq handler would dereference a NULL pointer.
    
    I'm not aware of anything that could delay the process in such a way, but it's
    better to be safe than sorry, so setup the irq only when the clock event device
    is ready.
    
    Cc: stable@vger.kernel.org
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Yongbae Park <yongbae2@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 640c0f5c57864cbc1f495509bdc879fab94d4d9d
Merge: d7b48fec3520 e3eff6fe7d8a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Mar 1 12:00:25 2015 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Ingo Molnar:
     "Three clockevents/clocksource driver fixes"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: pxa: Fix section mismatch
      clocksource: mtk: Fix race conditions in probe code
      clockevents: asm9260: Fix compilation error with sparc/sparc64 allyesconfig

commit 6f2116ebe24f9f0f0d90ad17e405ea181f2499eb
Author: Robert Jarzmik <robert.jarzmik@free.fr>
Date:   Sat Jan 31 23:40:40 2015 +0100

    clocksource: pxa: Fix section mismatch
    
    As pxa_timer_common_init() is only called in init context, mark it as
    such, and quiesce the compiler warnings :
    WARNING: vmlinux.o(.text.unlikely+0x45d4): Section mismatch in reference
    from the function pxa_timer_common_init() to the function
    .init.text:sched_clock_register()
    
    WARNING: vmlinux.o(.text.unlikely+0x4610): Section mismatch in reference
    from the function pxa_timer_common_init() to the function
    .init.text:clocksource_mmio_init()
    
    Signed-off-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d4a19eb3b15a4ba98f627182f48d5bc0cffae670
Author: Matthias Brugger <matthias.bgg@gmail.com>
Date:   Thu Feb 19 11:41:33 2015 +0100

    clocksource: mtk: Fix race conditions in probe code
    
    We have two race conditions in the probe code which could lead to a null
    pointer dereference in the interrupt handler.
    
    The interrupt handler accesses the clockevent device, which may not yet be
    registered.
    
    First race condition happens when the interrupt handler gets registered before
    the interrupts get disabled. The second race condition happens when the
    interrupts get enabled, but the clockevent device is not yet registered.
    
    Fix that by disabling the interrupts before we register the interrupt and enable
    the interrupts after the clockevent device got registered.
    
    Reported-by: Gongbae Park <yongbae2@gmail.com>
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a8b1b9fc927400045fb7631d5b12093aaf5d939d
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Feb 23 19:54:16 2015 +0100

    clockevents: asm9260: Fix compilation error with sparc/sparc64 allyesconfig
    
    The Kconfig options for the asm9260 timer is wrong as it can be selected by
    another platform with allyes config and thus leading to a compilation failure
    as some non arch related code is pulled by the compilation.
    
    Fix this by having the platform Kconfig to select the timer as it is done for
    the others drivers.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Acked-by: Oleksij Rempel <linux@rempel-privat.de>
    
    Conflicts:
            drivers/clocksource/Kconfig

commit 30225743852ed5c3e732d7debe6c1f473c807d62
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Feb 17 15:52:39 2015 +0100

    ARM: shmobile: sh73a0 dtsi: Add Cortex-A9 TWD node
    
    Add a node for the Private Timer and Watchdog, as found in the Cortex-A9
    MPCore.
    
    Without this, there's no clocksource available during early kernel
    initialization, before cmt1 is initialized, leading to a lock-up if
    CONFIG_CPU_IDLE=y.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit cea62dbdc110e3e8d5db8fb9eebebf01587830b8
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Mon Jan 12 16:26:02 2015 -0800

    x86, hyperv: Mark the Hyper-V clocksource as being continuous
    
    commit 32c6590d126836a062b3140ed52d898507987017 upstream.
    
    The Hyper-V clocksource is continuous; mark it accordingly.
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Acked-by: jasowang@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: devel@linuxdriverproject.org
    Cc: olaf@aepfle.de
    Cc: apw@canonical.com
    Link: http://lkml.kernel.org/r/1421108762-3331-1-git-send-email-kys@microsoft.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 99fa0ad92c4fd8b529c89b3640b42323984be761
Merge: 1d9e71404e2c 5f5081852038
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Feb 17 14:17:51 2015 -0800

    Merge tag 'suspend-to-idle-3.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull suspend-to-idle updates from Rafael Wysocki:
     "Suspend-to-idle timer quiescing support for v3.20-rc1
    
      Until now suspend-to-idle has not been able to save much more energy
      than runtime PM because of timer interrupts that periodically bring
      CPUs out of idle while they are waiting for a wakeup interrupt.  Of
      course, the timer interrupts are not wakeup ones, so the handling of
      them can be deferred until a real wakeup interrupt happens, but at the
      same time we don't want to mass-expire timers at that point.
    
      The solution is to suspend the entire timekeeping when the last CPU is
      entering an idle state and resume it when the first CPU goes out of
      idle.  That has to be done with care, though, so as to avoid accessing
      suspended clocksources etc.  end we need extra support from idle
      drivers for that.
    
      This series of commits adds support for quiescing timers during
      suspend-to-idle and adds the requisite callbacks to intel_idle and the
      ACPI cpuidle driver"
    
    * tag 'suspend-to-idle-3.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:
      ACPI / idle: Implement ->enter_freeze callback routine
      intel_idle: Add ->enter_freeze callbacks
      PM / sleep: Make it possible to quiesce timers during suspend-to-idle
      timekeeping: Make it safe to use the fast timekeeper while suspended
      timekeeping: Pass readout base to update_fast_timekeeper()
      PM / sleep: Re-implement suspend-to-idle handling

commit 8c334ce8f0fec7122fc3059c52a697b669a01b41
Merge: 3c6847eaa3da f40d149b58f5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Feb 16 15:26:10 2015 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull clocksource updates from Ingo Molnar:
     "The main change in this tree is the addition of various new SoC
      clocksource/clockevents drivers: Conexant Digicolor SoCs, rockchip
      rk3288 board, asm9260 for MIPS and versatile AB/PB boards"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      dts: versatile: Add sysregs node
      clocksource: versatile: Adapt for Versatile AB and PB boards
      dt/bindings: Add binding for Versatile system registers
      clocksource: Driver for Conexant Digicolor SoC timer
      clocksource: devicetree: Document Conexant Digicolor timer binding
      clockevents: rockchip: Add rockchip timer for rk3288
      ARM: clocksource: Add asm9260_timer driver
      clocksource: marco: Rename marco to atlas7
      clocksource: sirf: Remove unused variable

commit 124cf9117c5f93cc5b324530b7e105b09c729d5d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Feb 13 23:50:43 2015 +0100

    PM / sleep: Make it possible to quiesce timers during suspend-to-idle
    
    The efficiency of suspend-to-idle depends on being able to keep CPUs
    in the deepest available idle states for as much time as possible.
    Ideally, they should only be brought out of idle by system wakeup
    interrupts.
    
    However, timer interrupts occurring periodically prevent that from
    happening and it is not practical to chase all of the "misbehaving"
    timers in a whack-a-mole fashion.  A much more effective approach is
    to suspend the local ticks for all CPUs and the entire timekeeping
    along the lines of what is done during full suspend, which also
    helps to keep suspend-to-idle and full suspend reasonably similar.
    
    The idea is to suspend the local tick on each CPU executing
    cpuidle_enter_freeze() and to make the last of them suspend the
    entire timekeeping.  That should prevent timer interrupts from
    triggering until an IO interrupt wakes up one of the CPUs.  It
    needs to be done with interrupts disabled on all of the CPUs,
    though, because otherwise the suspended clocksource might be
    accessed by an interrupt handler which might lead to fatal
    consequences.
    
    Unfortunately, the existing ->enter callbacks provided by cpuidle
    drivers generally cannot be used for implementing that, because some
    of them re-enable interrupts temporarily and some idle entry methods
    cause interrupts to be re-enabled automatically on exit.  Also some
    of these callbacks manipulate local clock event devices of the CPUs
    which really shouldn't be done after suspending their ticks.
    
    To overcome that difficulty, introduce a new cpuidle state callback,
    ->enter_freeze, that will be guaranteed (1) to keep interrupts
    disabled all the time (and return with interrupts disabled) and (2)
    not to touch the CPU timer devices.  Modify cpuidle_enter_freeze() to
    look for the deepest available idle state with ->enter_freeze present
    and to make the CPU execute that callback with suspended tick (and the
    last of the online CPUs to execute it with suspended timekeeping).
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>

commit 060407aed56c00960c9b5f70f5d19b2823adffd7
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Feb 13 14:49:02 2015 +0100

    timekeeping: Make it safe to use the fast timekeeper while suspended
    
    Theoretically, ktime_get_mono_fast_ns() may be executed after
    timekeeping has been suspended (or before it is resumed) which
    in turn may lead to undefined behavior, for example, when the
    clocksource read from timekeeping_get_ns() called by it is
    not accessible at that time.
    
    Prevent that from happening by setting up a dummy readout base for
    the fast timekeeper during timekeeping_suspend() such that it will
    always return the same number of cycles.
    
    After the last timekeeping_update() in timekeeping_suspend() the
    clocksource is read and the result is stored as cycles_at_suspend.
    The readout base from the current timekeeper is copied onto the
    dummy and the ->read pointer of the dummy is set to a routine
    unconditionally returning cycles_at_suspend.  Next, the dummy is
    passed to update_fast_timekeeper().
    
    Then, ktime_get_mono_fast_ns() will work until the subsequent
    timekeeping_resume() and the proper readout base for the fast
    timekeeper will be restored by the timekeeping_update() called
    right after clearing timekeeping_suspended.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>

commit b2f21d1b7bc80150f2b7d1fecae5f64c9ead26fa
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Wed Dec 10 11:02:09 2014 +0000

    clocksource: arch_timer: Only use the virtual counter (CNTVCT) on arm64
    
    commit d6ad36913083d683aad4e02e53580c995f1a6ede upstream.
    
    Commit 0b46b8a718c6 (clocksource: arch_timer: Fix code to use physical
    timers when requested) introduces the use of physical counters in the
    ARM architected timer driver. However, he arm64 kernel uses CNTVCT in
    VDSO. When booting in EL2, the kernel switches to the physical timers to
    make things easier for KVM but it continues to use the virtual counter
    both in user and kernel. While in such scenario CNTVCT == CNTPCT (since
    CNTVOFF is initialised by the kernel to 0), we want to spot firmware
    bugs corrupting CNTVOFF early (which would affect CNTVCT).
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Tested-by: Yingjoe Chen <yingjoe.chen@mediatek.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Fixes: 0b46b8a718c6 ("clocksource: arch_timer: Fix code to use physical
    timers when requested")
    Cc: Ian Campbell <ijc@hellion.org.uk>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 552b7a455c1c1a9a5b73bf195a51edccd3a53c86
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Wed Dec 10 11:02:09 2014 +0000

    clocksource: arch_timer: Only use the virtual counter (CNTVCT) on arm64
    
    commit d6ad36913083d683aad4e02e53580c995f1a6ede upstream.
    
    Commit 0b46b8a718c6 (clocksource: arch_timer: Fix code to use physical
    timers when requested) introduces the use of physical counters in the
    ARM architected timer driver. However, he arm64 kernel uses CNTVCT in
    VDSO. When booting in EL2, the kernel switches to the physical timers to
    make things easier for KVM but it continues to use the virtual counter
    both in user and kernel. While in such scenario CNTVCT == CNTPCT (since
    CNTVOFF is initialised by the kernel to 0), we want to spot firmware
    bugs corrupting CNTVOFF early (which would affect CNTVCT).
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Tested-by: Yingjoe Chen <yingjoe.chen@mediatek.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 9c167b4585be6b51eca8fffa269181a595421cb2
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Mon Jan 12 16:26:02 2015 -0800

    x86, hyperv: Mark the Hyper-V clocksource as being continuous
    
    commit 32c6590d126836a062b3140ed52d898507987017 upstream.
    
    The Hyper-V clocksource is continuous; mark it accordingly.
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Acked-by: jasowang@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: devel@linuxdriverproject.org
    Cc: olaf@aepfle.de
    Cc: apw@canonical.com
    Link: http://lkml.kernel.org/r/1421108762-3331-1-git-send-email-kys@microsoft.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit e9f7cc53499ab56b0374061a9264b70df7870266
Author: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
Date:   Wed Oct 22 03:37:08 2014 +0200

    clocksource: exynos_mct: Fix bitmask regression for exynos4_mct_write
    
    commit 8c38d28ba8da98f7102c31d35359b4dbe9d1f329 upstream.
    
    EXYNOS4_MCT_L_MASK is defined as 0xffffff00, so applying this bitmask
    produces a number outside the range 0x00 to 0xff, which always results
    in execution of the default switch statement.
    
    Obviously this is wrong and git history shows that the bitmask inversion
    was incorrectly set during a refactoring of the MCT code.
    
    Fix this by putting the inversion at the correct position again.
    
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Reported-by: GP Orcullo <kinsamanka@gmail.com>
    Reviewed-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 6551a22dd25ca792be871767cd41de0d617ed92d
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Mon Jan 12 16:26:02 2015 -0800

    x86, hyperv: Mark the Hyper-V clocksource as being continuous
    
    commit 32c6590d126836a062b3140ed52d898507987017 upstream.
    
    The Hyper-V clocksource is continuous; mark it accordingly.
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Acked-by: jasowang@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: devel@linuxdriverproject.org
    Cc: olaf@aepfle.de
    Cc: apw@canonical.com
    Link: http://lkml.kernel.org/r/1421108762-3331-1-git-send-email-kys@microsoft.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b96c388232087b785b2d7993600c1544d49b60c
Author: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
Date:   Wed Oct 22 03:37:08 2014 +0200

    clocksource: exynos_mct: Fix bitmask regression for exynos4_mct_write
    
    commit 8c38d28ba8da98f7102c31d35359b4dbe9d1f329 upstream.
    
    EXYNOS4_MCT_L_MASK is defined as 0xffffff00, so applying this bitmask
    produces a number outside the range 0x00 to 0xff, which always results
    in execution of the default switch statement.
    
    Obviously this is wrong and git history shows that the bitmask inversion
    was incorrectly set during a refactoring of the MCT code.
    
    Fix this by putting the inversion at the correct position again.
    
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Reported-by: GP Orcullo <kinsamanka@gmail.com>
    Reviewed-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10ee480d03d54dbdf38a82711ab58baee9df3e80
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Mon Jan 12 16:26:02 2015 -0800

    x86, hyperv: Mark the Hyper-V clocksource as being continuous
    
    commit 32c6590d126836a062b3140ed52d898507987017 upstream.
    
    The Hyper-V clocksource is continuous; mark it accordingly.
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Acked-by: jasowang@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: devel@linuxdriverproject.org
    Cc: olaf@aepfle.de
    Cc: apw@canonical.com
    Link: http://lkml.kernel.org/r/1421108762-3331-1-git-send-email-kys@microsoft.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cbcd35fe591013cac84bcff3a740b1aa0a30008
Author: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
Date:   Wed Oct 22 03:37:08 2014 +0200

    clocksource: exynos_mct: Fix bitmask regression for exynos4_mct_write
    
    commit 8c38d28ba8da98f7102c31d35359b4dbe9d1f329 upstream.
    
    EXYNOS4_MCT_L_MASK is defined as 0xffffff00, so applying this bitmask
    produces a number outside the range 0x00 to 0xff, which always results
    in execution of the default switch statement.
    
    Obviously this is wrong and git history shows that the bitmask inversion
    was incorrectly set during a refactoring of the MCT code.
    
    Fix this by putting the inversion at the correct position again.
    
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Reported-by: GP Orcullo <kinsamanka@gmail.com>
    Reviewed-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 246b625243c5e2889e97098662ec069f1ebcac9d
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Mon Jan 12 16:26:02 2015 -0800

    x86, hyperv: Mark the Hyper-V clocksource as being continuous
    
    commit 32c6590d126836a062b3140ed52d898507987017 upstream.
    
    The Hyper-V clocksource is continuous; mark it accordingly.
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Acked-by: jasowang@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: devel@linuxdriverproject.org
    Cc: olaf@aepfle.de
    Cc: apw@canonical.com
    Link: http://lkml.kernel.org/r/1421108762-3331-1-git-send-email-kys@microsoft.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec987a13d5ec90d690a52304224d731881544f86
Author: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
Date:   Wed Oct 22 03:37:08 2014 +0200

    clocksource: exynos_mct: Fix bitmask regression for exynos4_mct_write
    
    commit 8c38d28ba8da98f7102c31d35359b4dbe9d1f329 upstream.
    
    EXYNOS4_MCT_L_MASK is defined as 0xffffff00, so applying this bitmask
    produces a number outside the range 0x00 to 0xff, which always results
    in execution of the default switch statement.
    
    Obviously this is wrong and git history shows that the bitmask inversion
    was incorrectly set during a refactoring of the MCT code.
    
    Fix this by putting the inversion at the correct position again.
    
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Reported-by: GP Orcullo <kinsamanka@gmail.com>
    Reviewed-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 436d3b13fc1962639ec558a1a98ad96b62d4b82b
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Thu Jan 29 00:04:11 2015 +0200

    ARM: digicolor: select syscon and timer
    
    The digicolor interrupt controller driver now needs syscon.
    
    Also, as per clocksource maintainer request, we now have a separate config
    symbol, CONFIG_DIGICOLOR_TIMER, for the digicolor timer.
    
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit c89368de860b51baaa6fee2bbdd816a85a1bfc04
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Mon Jan 12 16:26:02 2015 -0800

    x86, hyperv: Mark the Hyper-V clocksource as being continuous
    
    commit 32c6590d126836a062b3140ed52d898507987017 upstream.
    
    The Hyper-V clocksource is continuous; mark it accordingly.
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Acked-by: jasowang@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: devel@linuxdriverproject.org
    Cc: olaf@aepfle.de
    Cc: apw@canonical.com
    Link: http://lkml.kernel.org/r/1421108762-3331-1-git-send-email-kys@microsoft.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 121be0f4cf47b5bc4caa654de233ae83fdd6dd8d
Author: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
Date:   Wed Oct 22 03:37:08 2014 +0200

    clocksource: exynos_mct: Fix bitmask regression for exynos4_mct_write
    
    commit 8c38d28ba8da98f7102c31d35359b4dbe9d1f329 upstream.
    
    EXYNOS4_MCT_L_MASK is defined as 0xffffff00, so applying this bitmask
    produces a number outside the range 0x00 to 0xff, which always results
    in execution of the default switch statement.
    
    Obviously this is wrong and git history shows that the bitmask inversion
    was incorrectly set during a refactoring of the MCT code.
    
    Fix this by putting the inversion at the correct position again.
    
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Reported-by: GP Orcullo <kinsamanka@gmail.com>
    Reviewed-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit f2fa0299d34236d7e6ed213a28dca380b8c68ac0
Author: Rob Herring <robh@kernel.org>
Date:   Wed Jan 28 11:56:31 2015 -0600

    clocksource: versatile: Adapt for Versatile AB and PB boards
    
    The same 24MHz counter is also present on Versatile AB and PB boards, so
    add the compatible string for them.
    
    Signed-off-by: Rob Herring <robh@kernel.org>
    Acked-by: Liviu Dudau <Liviu.Dudau@arm.com>
    Cc: Liviu Dudau <liviu.dudau@arm.com>
    Cc: Sudeep Holla <sudeep.holla@arm.com>
    Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9b8bb7736b78e954044e12b94a2b16aafb0ee0e3
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Mon Jan 26 20:35:18 2015 +0200

    clocksource: Driver for Conexant Digicolor SoC timer
    
    Add clocksource driver to the Conexant CX92755 SoC, part of the Digicolor SoCs
    series. Hardware provides 8 timers, A to H. Timer A is dedicated to a future
    watchdog driver so we don't use it here. Use timer B for sched_clock, and timer
    C for clock_event.
    
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9ff99be7dc69a56ec16d5a928a4e7622023abda5
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Mon Jan 26 20:35:17 2015 +0200

    clocksource: devicetree: Document Conexant Digicolor timer binding
    
    The Conexant CX92755 SoC provides 8 32-bit timers as part of its so called
    "Agent Communication" block. Timers can be configures either as free running or
    one shot. Each timer has a dedicated interrupt source in the CX92755 interrupts
    controller. The first timer (Timer A) can also be configured as watchdog.
    
    This commit adds devicetree binding definition of this hardware module. The
    binding defined here should be reusable for other SoCs in the Digicolor series.
    
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8d8bd7be8bf0981564fd557d4b68eeeaaa2325d0
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Thu Jan 8 10:07:22 2015 +0100

    ARM: clocksource: Add asm9260_timer driver
    
    In some cases asm9260 looks similar to iMX2x. One of exceptions is
    timer controller. So this patch introduces new driver for this special case.
    
    Signed-off-by: Oleksij Rempel <linux@rempel-privat.de>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5833ac98651f7985037e52d4b41f7d4e02e32064
Author: Barry Song <Baohua.Song@csr.com>
Date:   Mon Jan 12 00:04:43 2015 +0800

    clocksource: marco: Rename marco to atlas7
    
    marco project is replaced by atlas7 and we should obliterate
    its all traces.
    
    Signed-off-by: Barry Song <Baohua.Song@csr.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f0ac4f3e067dc9b233de9300214a98cc4ccb46d3
Merge: a5565a217520 11ff8c86d740
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Jan 27 16:24:08 2015 -0800

    Merge tag 'v3.20-rockchip-dts2' of git://git.kernel.org/pub/scm/linux/kernel/git/mmind/linux-rockchip into next/dt
    
    Merge "ARM: rockchip: second batch of dts updates for 3.20" from Heiko Stübner:
    
    Basic display nodes for crtcs and hdmi encoder, timer node
    for the broadcast timer going through the clocksource tree
    and two new boards, the rk3288-based Firefly and the
    PX2-based Rayeager board (the PX2 is identical to the rk3066
    but made for industrial users).
    
    * tag 'v3.20-rockchip-dts2' of git://git.kernel.org/pub/scm/linux/kernel/git/mmind/linux-rockchip:
      ARM: dts: rockchip: add dts for ChipSPARK Rayeager PX2 board
      ARM: dts: rockchip: add dts for Firefly Firefly-RK3288 boards
      dt-bindings: add vendor prefix and root compatible property for Rockchip boards
      ARM: dts: rockchip: Add rockchip timer node for rk3288
      ARM: dts: rockchip: add rk3288 hdmi nodes
      ARM: dts: rockchip: Add rk3288 vop and display-subsystem
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 14746306afe705f1d41bd51774a4378b1aec562d
Merge: 4d2f0ef1c9f7 520452172e6b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jan 25 18:11:17 2015 -0800

    Merge branch 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 fixes from Thomas Gleixner:
     "Hopefully the last round of fixes for 3.19
    
       - regression fix for the LDT changes
       - regression fix for XEN interrupt handling caused by the APIC
         changes
       - regression fixes for the PAT changes
       - last minute fixes for new the MPX support
       - regression fix for 32bit UP
       - fix for a long standing relocation issue on 64bit tagged for stable
       - functional fix for the Hyper-V clocksource tagged for stable
       - downgrade of a pr_err which tends to confuse users
    
      Looks a bit on the large side, but almost half of it are valuable
      comments"
    
    * 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/tsc: Change Fast TSC calibration failed from error to info
      x86/apic: Re-enable PCI_MSI support for non-SMP X86_32
      x86, mm: Change cachemode exports to non-gpl
      x86, tls: Interpret an all-zero struct user_desc as "no segment"
      x86, tls, ldt: Stop checking lm in LDT_empty
      x86, mpx: Strictly enforce empty prctl() args
      x86, mpx: Fix potential performance issue on unmaps
      x86, mpx: Explicitly disable 32-bit MPX support on 64-bit kernels
      x86, hyperv: Mark the Hyper-V clocksource as being continuous
      x86: Don't rely on VMWare emulating PAT MSR correctly
      x86, irq: Properly tag virtualization entry in /proc/interrupts
      x86, boot: Skip relocs when load address unchanged
      x86/xen: Override ACPI IRQ management callback __acpi_unregister_gsi
      ACPI: pci: Do not clear pci_dev->irq in acpi_pci_irq_disable()
      x86/xen: Treat SCI interrupt as normal GSI interrupt

commit b73f0c8f4ba810cd753031d18f4fab83bd9ac58f
Merge: 71a59b127273 5fbaba8603d5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jan 25 17:47:34 2015 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "A set of small fixes:
    
       - regression fix for exynos_mct clocksource
    
       - trivial build fix for kona clocksource
    
       - functional one liner fix for the sh_tmu clocksource
    
       - two validation fixes to prevent (root only) data corruption in the
         kernel via settimeofday and adjtimex.  Tagged for stable"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      time: adjtimex: Validate the ADJ_FREQUENCY values
      time: settimeofday: Validate the values of tv from user
      clocksource: sh_tmu: Set cpu_possible_mask to fix SMP broadcast
      clocksource: kona: fix __iomem annotation
      clocksource: exynos_mct: Fix bitmask regression for exynos4_mct_write

commit d072c9658c3c2aa204c22e3ef27a0db6b4e3befa
Author: Thierry Reding <treding@nvidia.com>
Date:   Mon Dec 15 16:59:20 2014 +0100

    clocksource: sirf: Remove unused variable
    
    Commit ef89af1f4380 ("clocksource: sirf: Remove hard-coded clock rate")
    removes all uses of the timer_div variable. Since the variable is no
    longer used it should be removed.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2e568f56c3572d13e3654c42f520f6f731a42a3f
Merge: ff3a45b6185d d035fdfa27ac
Author: Olof Johansson <olof@lixom.net>
Date:   Fri Jan 23 14:56:49 2015 -0800

    Merge tag 'tegra-for-3.20-arm64' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux into next/arm64
    
    Merge "arm64: Add initial Tegra support" from Thierry Reding:
    
    This adds support for the Tegra132 SoC, which is essentially a Tegra124
    with a dual Denver CPU complex instead of the quad-Cortex-A15. There is
    not much here, only the Kconfig entries, but it will allow us to more
    easily get subsequent patches in (many of which have already been sent
    for review).
    
    * tag 'tegra-for-3.20-arm64' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux:
      arm64: Add Tegra132 support
      soc: tegra: Add thermal reset (thermtrip) support to PMC
      ARM: tegra: Add PMC thermtrip programming to Jetson TK1 device tree
      of: Add descriptions of thermtrip properties to Tegra PMC bindings
      soc/tegra: pmc: Add Tegra132 support
      soc/tegra: fuse: Add Tegra132 support
      soc/tegra: fuse: Constify tegra_fuse_info structures
      soc/tegra: Add Tegra132 support
      clocksource: Build Tegra timer on 32-bit ARM only
      soc/tegra: pmc: restrict compilation of suspend-related support to ARM
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 82483ad67e965f6edd61c6c2cdb4ba295cf0af96
Merge: 085dd64e537b 3568df3d31d6
Author: Olof Johansson <olof@lixom.net>
Date:   Fri Jan 23 14:53:54 2015 -0800

    Merge tag 'tegra-for-3.20-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux into next/soc
    
    Merge "ARM: tegra: Core code changes for v3.20" from Thierry Reding:
    
    This contains a couple of preparatory patches for 64-bit support. A new
    feature is implemented in the power-management controller which allows
    it to switch off the SoC if it overheats.
    
    * tag 'tegra-for-3.20-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux:
      soc: tegra: Add thermal reset (thermtrip) support to PMC
      ARM: tegra: Add PMC thermtrip programming to Jetson TK1 device tree
      of: Add descriptions of thermtrip properties to Tegra PMC bindings
      soc/tegra: pmc: Add Tegra132 support
      soc/tegra: fuse: Add Tegra132 support
      soc/tegra: fuse: Constify tegra_fuse_info structures
      soc/tegra: Add Tegra132 support
      clocksource: Build Tegra timer on 32-bit ARM only
      soc/tegra: pmc: restrict compilation of suspend-related support to ARM
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 94dd85f6a0688245dbb5a452a86a2a545dee96c1
Author: Palik, Imre <imrep@amazon.de>
Date:   Tue Jan 13 09:14:22 2015 +0100

    x86/xen: prefer TSC over xen clocksource for dom0
    
    In Dom0's the use of the TSC clocksource (whenever it is stable enough to
    be used) instead of the Xen clocksource should not cause any issues, as
    Dom0 VMs never live-migrated.  The TSC clocksource is somewhat more
    efficient than the Xen paravirtualised clocksource, thus it should have
    higher rating.
    
    This patch decreases the rating of the Xen clocksource in Dom0s to 275.
    Which is half-way between the rating of the TSC clocksource (300) and the
    hpet clocksource (250).
    
    Cc: Anthony Liguori <aliguori@amazon.com>
    Signed-off-by: Imre Palik <imrep@amazon.de>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>

commit 32c6590d126836a062b3140ed52d898507987017
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Mon Jan 12 16:26:02 2015 -0800

    x86, hyperv: Mark the Hyper-V clocksource as being continuous
    
    The Hyper-V clocksource is continuous; mark it accordingly.
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Acked-by: jasowang@redhat.com
    Cc: gregkh@linuxfoundation.org
    Cc: devel@linuxdriverproject.org
    Cc: olaf@aepfle.de
    Cc: apw@canonical.com
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/1421108762-3331-1-git-send-email-kys@microsoft.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit b8775da83d1605bf765c10909961f6a58b608efd
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Wed Sep 24 00:14:29 2014 +0900

    ARM: dts: Enable PWM node by default for s3c64xx
    
    commit 5e794de514f56de1e78e979ca09c56a91aa2e9f1 upstream.
    
    The PWM block is required for system clock source so it must be always
    enabled. This patch fixes boot issues on SMDK6410 which did not have
    the node enabled explicitly for other purposes.
    
    Fixes: eeb93d02 ("clocksource: of: Respect device tree node status")
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8be474538333eba411aae430bedc7b7e4e4f882e
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Wed Sep 24 00:14:29 2014 +0900

    ARM: dts: Enable PWM node by default for s3c64xx
    
    commit 5e794de514f56de1e78e979ca09c56a91aa2e9f1 upstream.
    
    The PWM block is required for system clock source so it must be always
    enabled. This patch fixes boot issues on SMDK6410 which did not have
    the node enabled explicitly for other purposes.
    
    Fixes: eeb93d02 ("clocksource: of: Respect device tree node status")
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ad928e105fef65b791a7964f4f67abf3f1f1ebe
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Wed Sep 24 00:14:29 2014 +0900

    ARM: dts: Enable PWM node by default for s3c64xx
    
    commit 5e794de514f56de1e78e979ca09c56a91aa2e9f1 upstream.
    
    The PWM block is required for system clock source so it must be always
    enabled. This patch fixes boot issues on SMDK6410 which did not have
    the node enabled explicitly for other purposes.
    
    Fixes: eeb93d02 ("clocksource: of: Respect device tree node status")
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit fdd1710f81c181b8970e3a3e2dc865584706d89a
Author: Sonny Rao <sonnyrao@chromium.org>
Date:   Sun Nov 23 23:02:44 2014 -0800

    clocksource: arch_timer: Fix code to use physical timers when requested
    
    commit 0b46b8a718c6e90910a1b1b0fe797be3c167e186 upstream.
    
    This is a bug fix for using physical arch timers when
    the arch_timer_use_virtual boolean is false.  It restores the
    arch_counter_get_cntpct() function after removal in
    
    0d651e4e "clocksource: arch_timer: use virtual counters"
    
    We need this on certain ARMv7 systems which are architected like this:
    
    * The firmware doesn't know and doesn't care about hypervisor mode and
      we don't want to add the complexity of hypervisor there.
    
    * The firmware isn't involved in SMP bringup or resume.
    
    * The ARCH timer come up with an uninitialized offset between the
      virtual and physical counters.  Each core gets a different random
      offset.
    
    * The device boots in "Secure SVC" mode.
    
    * Nothing has touched the reset value of CNTHCTL.PL1PCEN or
      CNTHCTL.PL1PCTEN (both default to 1 at reset)
    
    One example of such as system is RK3288 where it is much simpler to
    use the physical counter since there's nobody managing the offset and
    each time a core goes down and comes back up it will get reinitialized
    to some other random value.
    
    Fixes: 0d651e4e65e9 ("clocksource: arch_timer: use virtual counters")
    Signed-off-by: Sonny Rao <sonnyrao@chromium.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    [ luis: backported to 3.16: adjusted context ]
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 489f04a3b25ea8477c4f3b0d90c7ac706f2e2299
Author: Nathan Lynch <nathan_lynch@mentor.com>
Date:   Mon Sep 29 01:50:06 2014 +0200

    clocksource: arm_arch_timer: Change clocksource name if CP15 unavailable
    
    commit 423bd69e69f565167ba14e2fe61df76c3c4a0d26 upstream.
    
    The arm and arm64 VDSOs need CP15 access to the architected counter.
    If this is unavailable (which is allowed by ARM v7), indicate this by
    changing the clocksource name to "arch_mem_counter" before registering
    the clocksource.
    
    Suggested by Stephen Boyd.
    
    Signed-off-by: Nathan Lynch <nathan_lynch@mentor.com>
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 7a8ca0a0c480fedf91bdbadf8b90edd5374ce18b
Author: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
Date:   Sun Dec 21 16:08:13 2014 +0100

    ARM: 8252/1: sa1100: use pxa_timer clocksource driver
    
    Use pxa_timer clocksource driver.
    
    Signed-off-by: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit e074ff86e8b4f4f7983ff9b752bc904c8a729900
Author: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
Date:   Sun Dec 21 16:07:09 2014 +0100

    ARM: 8251/1: clocksource: enable pxa_timer for SA-1100 platform
    
    SA-11x0 platform used the same IP block as was used on PXA. Consequently
    it makes sense to have only one driver. Enable pxa_timer clocksource for
    StrongARM platform.
    
    Signed-off-by: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit ee3a4020f7c91ffc3c1a680c88652371b9711809
Author: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
Date:   Sun Dec 21 16:07:43 2014 +0100

    ARM: 8250/1: sa1100: provide OSTIMER0 clock for pxa_timer
    
    Pxa_timer clocksource requires OSTIMER0 clock to be provided.
    Add dummy clock returning proper rate.
    
    Signed-off-by: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 910978e753d0be0b429cf75b5adaed55b90c96b2
Author: Thierry Reding <treding@nvidia.com>
Date:   Mon Jul 7 15:26:30 2014 +0200

    clocksource: Build Tegra timer on 32-bit ARM only
    
    Instead of directly using the ARCH_TEGRA Kconfig symbol to enable this
    driver, add a new, non-user-visible Kconfig symbol (TEGRA_TIMER) which
    can be selected by the various SoCs.
    
    This is useful to disable building the driver on Tegra132 (64-bit ARM)
    where it doesn't currently compile but also isn't needed (yet).
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit 82c236bcbe0c3898025588b1725d0fa6c3d55b20
Author: Sonny Rao <sonnyrao@chromium.org>
Date:   Sun Nov 23 23:02:44 2014 -0800

    clocksource: arch_timer: Fix code to use physical timers when requested
    
    commit 0b46b8a718c6e90910a1b1b0fe797be3c167e186 upstream.
    
    This is a bug fix for using physical arch timers when
    the arch_timer_use_virtual boolean is false.  It restores the
    arch_counter_get_cntpct() function after removal in
    
    0d651e4e "clocksource: arch_timer: use virtual counters"
    
    We need this on certain ARMv7 systems which are architected like this:
    
    * The firmware doesn't know and doesn't care about hypervisor mode and
      we don't want to add the complexity of hypervisor there.
    
    * The firmware isn't involved in SMP bringup or resume.
    
    * The ARCH timer come up with an uninitialized offset between the
      virtual and physical counters.  Each core gets a different random
      offset.
    
    * The device boots in "Secure SVC" mode.
    
    * Nothing has touched the reset value of CNTHCTL.PL1PCEN or
      CNTHCTL.PL1PCTEN (both default to 1 at reset)
    
    One example of such as system is RK3288 where it is much simpler to
    use the physical counter since there's nobody managing the offset and
    each time a core goes down and comes back up it will get reinitialized
    to some other random value.
    
    Fixes: 0d651e4e65e9 ("clocksource: arch_timer: use virtual counters")
    Signed-off-by: Sonny Rao <sonnyrao@chromium.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c8f1e78612f3155bfd10c020b38bcb4ca175223
Author: Richard Cochran <richardcochran@gmail.com>
Date:   Tue Jan 6 14:26:13 2015 +0100

    arm_arch_timer: include clocksource.h directly
    
    This driver makes use of the clocksource code. Previously it had only
    included the proper header indirectly, but that chain was inadvertently
    broken by 74d23cc "time: move the timecounter/cyclecounter code into its
    own file."
    
    This patch fixes the issue by including clocksource.h directly.
    
    Signed-off-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f2a5473861cf69c03d0f0ee5d0ea1b853b9e582e
Author: Magnus Damm <damm+renesas@opensource.se>
Date:   Tue Dec 16 18:48:54 2014 +0900

    clocksource: sh_tmu: Set cpu_possible_mask to fix SMP broadcast
    
    Update the TMU driver to use cpu_possible_mask as cpumask to make
    r8a7779 SMP work as expected with or without the ARM TWD timer.
    
    Signed-off-by: Magnus Damm <damm+renesas@opensource.se>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ff4bcc84a9e720ffa6cb7cf01e9e938568147cd6
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Dec 8 13:42:02 2014 -0800

    clocksource: kona: fix __iomem annotation
    
    It makes no sense to hide the __iomem annotation from the function
    that uses it, especially since it causes a sparse warning:
    
    drivers/clocksource/bcm_kona_timer.c:118:38: warning: incorrect type in argument 1 (different address spaces)
    drivers/clocksource/bcm_kona_timer.c:118:38:    expected void *timer_base
    drivers/clocksource/bcm_kona_timer.c:118:38:    got void [noderef] <asn:2>*static [toplevel] tmr_regs
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8c38d28ba8da98f7102c31d35359b4dbe9d1f329
Author: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
Date:   Wed Oct 22 03:37:08 2014 +0200

    clocksource: exynos_mct: Fix bitmask regression for exynos4_mct_write
    
    EXYNOS4_MCT_L_MASK is defined as 0xffffff00, so applying this bitmask
    produces a number outside the range 0x00 to 0xff, which always results
    in execution of the default switch statement.
    
    Obviously this is wrong and git history shows that the bitmask inversion
    was incorrectly set during a refactoring of the MCT code.
    
    Fix this by putting the inversion at the correct position again.
    
    Cc: stable@vger.kernel.org
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Reported-by: GP Orcullo <kinsamanka@gmail.com>
    Reviewed-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit dd9553988879a3ff71a86323b88409e7631c4e5d
Merge: b422da7c366f 5ce07a5cef50
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Jan 2 16:47:51 2015 -0500

    Merge branch 'timecounter-next'
    
    Richard Cochran says:
    
    ====================
    Fixing the "Time Counter fixes and improvements"
    
    For this series I had only tested the build with ARCH=x86 and arm, but
    others like sparc64, microblaze, powerpc, and s390 will fail because
    they somehow don't indirectly include clocksource.h for the drivers in
    question.
    
    This series fixes the build issues reported by:
     kbuild test robot <fengguang.wu@intel.com>
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d9f393734af52b7b09f02439164cc7182e17063c
Author: Richard Cochran <richardcochran@gmail.com>
Date:   Fri Jan 2 20:22:08 2015 +0100

    mlx4: include clocksource.h again
    
    This driver uses the function, clocksource_khz2mult, and so it really must
    include clocksource.h.
    
    Signed-off-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1891172aa5c32f08ad9931b794edd71e91a4a527
Author: Richard Cochran <richardcochran@gmail.com>
Date:   Fri Jan 2 20:22:03 2015 +0100

    timecounter: provide a macro to initialize the cyclecounter mask field.
    
    There is no need for users of the timecounter/cyclecounter code to include
    clocksource.h just for a single macro.
    
    Signed-off-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9aacfb2023c67c8e797bf1f9ba5e095c5a09d296
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Dec 31 18:32:40 2014 -0500

    igb_ptp: Include clocksource.h to get CLOCKSOURCE_MASK.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 54da5083b71f01596ac3112685920fdde4540685
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Dec 31 18:32:25 2014 -0500

    e1000e: Include clocksource.h to get CLOCKSOURCE_MASK.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e495f78d787b56ad249946b191406f4521b58150
Merge: bec94d430f2c 5405afd1a306
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Dec 31 18:26:02 2014 -0500

    Merge branch 'fib_trie-next'
    
    Alexander Duyck says:
    
    ====================
    fib_trie: Reduce time spent in fib_table_lookup by 35 to 75%
    
    These patches are meant to address several performance issues I have seen
    in the fib_trie implementation, and fib_table_lookup specifically.  With
    these changes in place I have seen a reduction of up to 35 to 75% for the
    total time spent in fib_table_lookup depending on the type of search being
    performed.
    
    On a VM running in my Corei7-4930K system with a trie of maximum depth of 7
    this resulted in a reduction of over 370ns per packet in the total time to
    process packets received from an ixgbe interface and route them to a dummy
    interface.  This represents a failed lookup in the local trie followed by
    a successful search in the main trie.
    
                                    Baseline        Refactor
      ixgbe->dummy routing          1.20Mpps        2.21Mpps
      ------------------------------------------------------------
      processing time per packet            835ns           453ns
      fib_table_lookup              50.1%   418ns   25.0%   113ns
      check_leaf.isra.9              7.9%    66ns      --    --
      ixgbe_clean_rx_irq             5.3%    44ns    9.8%    44ns
      ip_route_input_noref           2.9%    25ns    4.6%    21ns
      pvclock_clocksource_read       2.6%    21ns    4.6%    21ns
      ip_rcv                         2.6%    22ns    4.0%    18ns
    
    In the simple case of receiving a frame and dropping it before it can reach
    the socket layer I saw a reduction of 40ns per packet.  This represents a
    trip through the local trie with the correct leaf found with no need for
    any backtracing.
    
                                    Baseline        Refactor
      ixgbe->local receive          2.65Mpps        2.96Mpps
      ------------------------------------------------------------
      processing time per packet            377ns           337ns
      fib_table_lookup              25.1%    95ns   25.8%    87ns
      ixgbe_clean_rx_irq             8.7%    33ns    9.0%    30ns
      check_leaf.isra.9              7.2%    27ns      --    --
      ip_rcv                         5.7%    21ns    6.5%    22ns
    
    These changes have resulted in several functions being inlined such as
    check_leaf and fib_find_node, but due to the code simplification the
    overall size of the code has been reduced.
    
       text    data     bss     dec     hex filename
      16932     376      16   17324    43ac net/ipv4/fib_trie.o - before
      15259     376       8   15643    3d1b net/ipv4/fib_trie.o - after
    
    Changes since RFC:
      Replaced this_cpu_ptr with correct call to this_cpu_inc in patch 1
      Changed test for leaf_info mismatch to (key ^ n->key) & li->mask_plen in patch 10
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9bb29b6b927bcd79cf185ee67bcebfe630f0dea1
Merge: e4811a27842b 007487f1fd43
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 30 17:13:13 2014 -0800

    Merge tag 'fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC fixes from Arnd Bergmann:
     "A very small set of fixes for 3.19, as everyone was out.
    
      The clocksource patch was something I missed for the merge window
      after the change that broke arm64 was merged through arm-soc.  The
      other two patches are a fix for an undetected merge problem in mvebu
      and a defconfig change to make some exynos boards work with the normal
      multi_v7_defconfig"
    
    * tag 'fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc:
      Add USB_EHCI_EXYNOS to multi_v7_defconfig
      ARM: mvebu: Fix pinctrl configuration for Armada 370 DB
      clocksource: arch_timer: Only use the virtual counter (CNTVCT) on arm64

commit 5115ec9654f87ba0d9508569f91fe1f444ffbf58
Merge: 2c90331cf5ed 2eebdde6528a
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Dec 30 18:30:00 2014 -0500

    Merge branch 'timecounter'
    
    Richard Cochran says:
    
    ====================
    Time Counter fixes and improvements
    
    Several PTP Hardware Clock (PHC) drivers implement the clock in
    software using the timecounter/cyclecounter code. This series adds one
    simple improvement and one more subtle fix to the shared timecounter
    facility. Credit for this series goes to Janusz Użycki, who pointed
    the issues out to me off list.
    
    Patch #1 simply move the timecounter code into its own file. When
    working on this series, it was really annoying to see half the kernel
    recompile after every tweak to the timecounter stuff. There is no
    reason to keep this together with the clocksource code.
    
    Patch #2 implements an improved adjtime() method, and patches 3-10
    convert all of the drivers over to the new method.
    
    Patch #11 fixes a subtle but important issue with the timecounter WRT
    frequency adjustment. As it stands now, a timecounter based PHC will
    exhibit a variable frequency resolution (and variable time error)
    depending on how often the clock is read.
    
    In timecounter_read_delta(), the expression
    
       (delta * cc->mult) >> cc->shift;
    
    can lose resolution from the adjusted value of 'mult'. If the value
    of 'delta' is too small, then small changes in 'mult' have no effect.
    However, if the delta value is large enough, then small changes in
    'mult' will have an effect.
    
    Reading the clock too often means smaller 'delta' values which in turn
    will spoil the fine adjustments made to 'mult'. Up until now, this
    effect did not show up in my testing. The following example explains
    why.
    
    The CPTS has an input clock of 250 MHz, and the clock source uses
    mult=0x80000000 and shift=29, making the ticks to nanoseconds
    conversion like this:
    
       ticks * 2^31
       ------------
           2^29
    
    Imagine what happens if the clock is read every 10 milliseconds. Ten
    milliseconds are about 2500000 ticks, which corresponds to about 21
    bits. The product in the numerator has then 52 bits. After the shift
    operation, 23 bits are preserved. This results in a frequency
    adjustment resolution of about 0.1 ppm (not _too_ bad.)
    
    A frequency resolution of 1 ppm requires 20 bits.
    A frequency resolution of 1 ppb requires 30 bits.
    
    For the 250 MHz CPTS clock, reading every 4 seconds yields a 1 ppb
    resolution (which is the finest that our API allows).
    
    However, the error can be much higher if the clock is read too often
    or if time stamps occur close in time to read operations. In general
    it is really not acceptable to allow the rate of clock readings to
    influence the clock accuracy.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 74d23cc704d19732e70ef1579a669f7d5f09dd9a
Author: Richard Cochran <richardcochran@gmail.com>
Date:   Sun Dec 21 19:46:56 2014 +0100

    time: move the timecounter/cyclecounter code into its own file.
    
    The timecounter code has almost nothing to do with the clocksource
    code. Let it live in its own file. This will help isolate the
    timecounter users from the clocksource users in the source tree.
    
    Signed-off-by: Richard Cochran <richardcochran@gmail.com>
    Acked-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d6ad36913083d683aad4e02e53580c995f1a6ede
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Wed Dec 10 11:02:09 2014 +0000

    clocksource: arch_timer: Only use the virtual counter (CNTVCT) on arm64
    
    Commit 0b46b8a718c6 (clocksource: arch_timer: Fix code to use physical
    timers when requested) introduces the use of physical counters in the
    ARM architected timer driver. However, he arm64 kernel uses CNTVCT in
    VDSO. When booting in EL2, the kernel switches to the physical timers to
    make things easier for KVM but it continues to use the virtual counter
    both in user and kernel. While in such scenario CNTVCT == CNTPCT (since
    CNTVOFF is initialised by the kernel to 0), we want to spot firmware
    bugs corrupting CNTVOFF early (which would affect CNTVCT).
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Tested-by: Yingjoe Chen <yingjoe.chen@mediatek.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit a7cb7bb664543e4562ab0e9a072470d2d18c761f
Merge: ccb5a4910d0c 078014dd3698
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Dec 12 10:08:06 2014 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial
    
    Pull trivial tree update from Jiri Kosina:
     "Usual stuff: documentation updates, printk() fixes, etc"
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial: (24 commits)
      intel_ips: fix a type in error message
      cpufreq: cpufreq-dt: Move newline to end of error message
      ps3rom: fix error return code
      treewide: fix typo in printk and Kconfig
      ARM: dts: bcm63138: change "interupts" to "interrupts"
      Replace mentions of "list_struct" to "list_head"
      kernel: trace: fix printk message
      scsi: mpt2sas: fix ioctl in comment
      zbud, zswap: change module author email
      clocksource: Fix 'clcoksource' typo in comment
      arm: fix wording of "Crotex" in CONFIG_ARCH_EXYNOS3 help
      gpio: msm-v1: make boolean argument more obvious
      usb: Fix typo in usb-serial-simple.c
      PCI: Fix comment typo 'COMFIG_PM_OPS'
      powerpc: Fix comment typo 'CONIFG_8xx'
      powerpc: Fix comment typos 'CONFiG_ALTIVEC'
      clk: st: Spelling s/stucture/structure/
      isci: Spelling s/stucture/structure/
      usb: gadget: zero: Spelling s/infrastucture/infrastructure/
      treewide: Fix company name in module descriptions
      ...

commit c0222ac086669a631814bbf857f8c8023452a4d7
Merge: 140cd7fb04a4 e2965cd0003f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 11 17:56:37 2014 -0800

    Merge branch 'upstream' of git://git.linux-mips.org/pub/scm/ralf/upstream-linus
    
    Pull MIPS updates from Ralf Baechle:
     "This is an unusually large pull request for MIPS - in parts because
      lots of patches missed the 3.18 deadline but primarily because some
      folks opened the flood gates.
    
       - Retire the MIPS-specific phys_t with the generic phys_addr_t.
       - Improvments for the backtrace code used by oprofile.
       - Better backtraces on SMP systems.
       - Cleanups for the Octeon platform code.
       - Cleanups and fixes for the Loongson platform code.
       - Cleanups and fixes to the firmware library.
       - Switch ATH79 platform to use the firmware library.
       - Grand overhault to the SEAD3 and Malta interrupt code.
       - Move the GIC interrupt code to drivers/irqchip
       - Lots of GIC cleanups and updates to the GIC code to use modern IRQ
         infrastructures and features of the kernel.
       - OF documentation updates for the GIC bindings
       - Move GIC clocksource driver to drivers/clocksource
       - Merge GIC clocksource driver with clockevent driver.
       - Further updates to bring the GIC clocksource driver up to date.
       - R3000 TLB code cleanups
       - Improvments to the Loongson 3 platform code.
       - Convert pr_warning to pr_warn.
       - Merge a bunch of small lantiq and ralink fixes that have been
         staged/lingering inside the openwrt tree for a while.
       - Update archhelp for IP22/IP32
       - Fix a number of issues for Loongson 1B.
       - New clocksource and clockevent driver for Loongson 1B.
       - Further work on clk handling for Loongson 1B.
       - Platform work for Broadcom BMIPS.
       - Error handling cleanups for TurboChannel.
       - Fixes and optimization to the microMIPS support.
       - Option to disable the FTLB.
       - Dump more relevant information on machine check exception
       - Change binfmt to allow arch to examine PT_*PROC headers
       - Support for new style FPU register model in O32
       - VDSO randomization.
       - BCM47xx cleanups
       - BCM47xx reimplement the way the kernel accesses NVRAM information.
       - Random cleanups
       - Add support for ATH25 platforms
       - Remove pointless locking code in some PCI platforms.
       - Some improvments to EVA support
       - Minor Alchemy cleanup"
    
    * 'upstream' of git://git.linux-mips.org/pub/scm/ralf/upstream-linus: (185 commits)
      MIPS: Add MFHC0 and MTHC0 instructions to uasm.
      MIPS: Cosmetic cleanups of page table headers.
      MIPS: Add CP0 macros for extended EntryLo registers
      MIPS: Remove now unused definition of phys_t.
      MIPS: Replace use of phys_t with phys_addr_t.
      MIPS: Replace MIPS-specific 64BIT_PHYS_ADDR with generic PHYS_ADDR_T_64BIT
      PCMCIA: Alchemy Don't select 64BIT_PHYS_ADDR in Kconfig.
      MIPS: lib: memset: Clean up some MIPS{EL,EB} ifdefery
      MIPS: iomap: Use __mem_{read,write}{b,w,l} for MMIO
      MIPS: <asm/types.h> fix indentation.
      MAINTAINERS: Add entry for BMIPS multiplatform kernel
      MIPS: Enable VDSO randomization
      MIPS: Remove a temporary hack for debugging cache flushes in SMTC configuration
      MIPS: Remove declaration of obsolete arch_init_clk_ops()
      MIPS: atomic.h: Reformat to fit in 79 columns
      MIPS: Apply `.insn' to fixup labels throughout
      MIPS: Fix microMIPS LL/SC immediate offsets
      MIPS: Kconfig: Only allow 32-bit microMIPS builds
      MIPS: signal.c: Fix an invalid cast in ISA mode bit handling
      MIPS: mm: Only build one microassembler that is suitable
      ...

commit a157508c9790ccd1c8b5c6a828d6ba85bbe95aaa
Merge: 86c6a2fddf0b 89de77a8c557
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 10 08:18:32 2014 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer core updates from Thomas Gleixner:
     "The time(r) departement provides:
    
       - more infrastructure work on the year 2038 issue
    
       - a few fixes in the Armada SoC timers
    
       - the usual pile of fixlets and improvements"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: armada-370-xp: Use the reference clock on A375 SoC
      watchdog: orion: Use the reference clock on Armada 375 SoC
      clocksource: armada-370-xp: Add missing clock enable
      time: Fix sign bug in NTP mult overflow warning
      time: Remove timekeeping_inject_sleeptime()
      rtc: Update suspend/resume timing to use 64bit time
      rtc/lib: Provide y2038 safe rtc_tm_to_time()/rtc_time_to_tm() replacement
      time: Fixup comments to reflect usage of timespec64
      time: Expose get_monotonic_coarse64() for in-kernel uses
      time: Expose getrawmonotonic64 for in-kernel uses
      time: Provide y2038 safe mktime() replacement
      time: Provide y2038 safe timekeeping_inject_sleeptime() replacement
      time: Provide y2038 safe do_settimeofday() replacement
      time: Complete NTP adjustment threshold judging conditions
      time: Avoid possible NTP adjustment mult overflow.
      time: Rename udelay_test.c to test_udelay.c
      clocksource: sirf: Remove hard-coded clock rate

commit 3a647c1d7ab08145cee4b650f5e797d168846c51
Merge: 6cd94d5e57ab 5db45002576f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 9 14:48:22 2014 -0800

    Merge tag 'drivers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC driver updates from Arnd Bergmann:
     "These are changes for drivers that are intimately tied to some SoC and
      for some reason could not get merged through the respective subsystem
      maintainer tree.
    
      The largest single change here this time around is the Tegra
      iommu/memory controller driver, which gets updated to the new iommu DT
      binding.  More drivers like this are likely to follow for the
      following merge window, but we should be able to do those through the
      iommu maintainer.
    
      Other notable changes are:
       - reset controller drivers from the reset maintainer (socfpga, sti,
         berlin)
       - fixes for the keystone navigator driver merged last time
       - at91 rtc driver changes related to the at91 cleanups
       - ARM perf driver changes from Will Deacon
       - updates for the brcmstb_gisb driver"
    
    * tag 'drivers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (53 commits)
      clocksource: arch_timer: Allow the device tree to specify uninitialized timer registers
      clocksource: arch_timer: Fix code to use physical timers when requested
      memory: Add NVIDIA Tegra memory controller support
      bus: brcmstb_gisb: Add register offset tables for older chips
      bus: brcmstb_gisb: Look up register offsets in a table
      bus: brcmstb_gisb: Introduce wrapper functions for MMIO accesses
      bus: brcmstb_gisb: Make the driver buildable on MIPS
      of: Add NVIDIA Tegra memory controller binding
      ARM: tegra: Move AHB Kconfig to drivers/amba
      amba: Add Kconfig file
      clk: tegra: Implement memory-controller clock
      serial: samsung: Fix serial config dependencies for exynos7
      bus: brcmstb_gisb: resolve section mismatch
      ARM: common: edma: edma_pm_resume may be unused
      ARM: common: edma: add suspend resume hook
      powerpc/iommu: Rename iommu_[un]map_sg functions
      rtc: at91sam9: add DT bindings documentation
      rtc: at91sam9: use clk API instead of relying on AT91_SLOW_CLOCK
      ARM: at91: add clk_lookup entry for RTT devices
      rtc: at91sam9: rework the Kconfig description
      ...

commit 6cd94d5e57ab97ddd672b707ab4bb639672c1727
Merge: 6c9e92476bc9 842f7d2c4d39
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 9 14:38:28 2014 -0800

    Merge tag 'soc-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC platform changes from Arnd Bergmann:
     "New and updated SoC support, notable changes include:
    
       - bcm:
            brcmstb SMP support
            initial iproc/cygnus support
       - exynos:
            Exynos4415 SoC support
            PMU and suspend support for Exynos5420
            PMU support for Exynos3250
            pm related maintenance
       - imx:
            new LS1021A SoC support
            vybrid 610 global timer support
       - integrator:
            convert to using multiplatform configuration
       - mediatek:
            earlyprintk support for mt8127/mt8135
       - meson:
            meson8 soc and l2 cache controller support
       - mvebu:
            Armada 38x CPU hotplug support
            drop support for prerelease Armada 375 Z1 stepping
            extended suspend support, now works on Armada 370/XP
       - omap:
            hwmod related maintenance
            prcm cleanup
       - pxa:
            initial pxa27x DT handling
       - rockchip:
            SMP support for rk3288
            add cpu frequency scaling support
       - shmobile:
            r8a7740 power domain support
            various small restart, timer, pci apmu changes
       - sunxi:
            Allwinner A80 (sun9i) earlyprintk support
       - ux500:
            power domain support
    
      Overall, a significant chunk of changes, coming mostly from the usual
      suspects: omap, shmobile, samsung and mvebu, all of which already
      contain a lot of platform specific code in arch/arm"
    
    * tag 'soc-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (187 commits)
      ARM: mvebu: use the cpufreq-dt platform_data for independent clocks
      soc: integrator: Add terminating entry for integrator_cm_match
      ARM: mvebu: add SDRAM controller description for Armada XP
      ARM: mvebu: adjust mbus controller description on Armada 370/XP
      ARM: mvebu: add suspend/resume DT information for Armada XP GP
      ARM: mvebu: synchronize secondary CPU clocks on resume
      ARM: mvebu: make sure MMU is disabled in armada_370_xp_cpu_resume
      ARM: mvebu: Armada XP GP specific suspend/resume code
      ARM: mvebu: reserve the first 10 KB of each memory bank for suspend/resume
      ARM: mvebu: implement suspend/resume support for Armada XP
      clk: mvebu: add suspend/resume for gatable clocks
      bus: mvebu-mbus: provide a mechanism to save SDRAM window configuration
      bus: mvebu-mbus: suspend/resume support
      clocksource: time-armada-370-xp: add suspend/resume support
      irqchip: armada-370-xp: Add suspend/resume support
      ARM: add lolevel debug support for asm9260
      ARM: add mach-asm9260
      ARM: EXYNOS: use u8 for val[] in struct exynos_pmu_conf
      power: reset: imx-snvs-poweroff: add power off driver for i.mx6
      ARM: imx: temporarily remove CONFIG_SOC_FSL from LS1021A
      ...

commit 0563fdc0d9fbd4d8896956d4aeb01fad09146acc
Merge: 0a9e0acddb2f ba62a8593d15
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 9 14:17:12 2014 -0800

    Merge tag 'at91-cleanup-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC cleanup on mach-at91 from Arnd Bergmann:
     "On Atmel AT91, the conversion to device tree is now considered
      complete, and all machines that were not already converted in 3.18 are
      assumed to be unused and dropped by the maintainer.
    
      All remaining board files that were written in C are dropped, and the
      ancient at91x40 sub-platform (based on an MMU-less ARM7) is removed
      altogether.  Cleaning up the last pieces was great fun, so I took the
      time to do some of the coding myself and removed several hundred code
      lines that ended up unused after the board files were done.
    
      There are still a couple of AT91 specific device drivers that are not
      converted to DT (CF, USB-OTG) and currently not working, and the
      platform itself is not "multiplatform"-enabled, but both issues are
      going to be taken care of in the 3.20 cycle.
    
      This is split out from the other cleanups purely based on the size of
      the branch"
    
    * tag 'at91-cleanup-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (33 commits)
      ARM: at91: remove unused board.h file
      ARM: at91: remove unneeded header files
      ARM: at91/clocksource: remove !DT PIT initializations
      ARM: at91: at91rm9200 ST initialization is now DT only
      ARM: at91: remove old AT91-specific drivers
      ARM: at91: cleanup initilisation code by removing dead code
      ARM: at91/Kconfig: select board files automatically
      ARM: at91: remove unused IRQ function declarations
      ARM: at91: remove legacy IRQ driver and related code
      ARM: at91: remove old at91-specific clock driver
      ARM: at91: remove clock data in at91sam9n12.c and at91sam9x5.c files
      ARM: at91: remove all !DT related configuration options
      ARM: at91/trivial: update Kconfig comment to mention SAMA5
      ARM: at91: always USE_OF from now on
      ARM: at91/Kconfig: remove ARCH_AT91RM9200 option for drivers
      ARM: at91: switch configuration option to SOC_AT91RM9200
      ARM: at91: remove at91rm9200 legacy board support
      ARM: at91: remove at91rm9200 legacy boards files
      ARM: at91/Kconfig: remove useless fbdev Kconfig options
      ARM: at91: remove at91sam9261/at91sam9g10 legacy board support
      ...

commit fb3268b0081e4a9a8baa369b8e882874dcd5f955
Merge: 83b63c699b53 65b5732d241b
Author: Olof Johansson <olof@lixom.net>
Date:   Thu Dec 4 23:33:16 2014 -0800

    Merge branch 'clocksource/physical-timers' into next/dt
    
    These are a pre-req to get rk3288 SMP to work with some firmwares, so merge
    it in here as well as in next/drivers.
    
    * clocksource/physical-timers:
      clocksource: arch_timer: Allow the device tree to specify uninitialized timer registers
      clocksource: arch_timer: Fix code to use physical timers when requested

commit 6b34df9e30c8b596f9d0173ca17714076474458e
Merge: e58e501a9b3e 65b5732d241b
Author: Olof Johansson <olof@lixom.net>
Date:   Thu Dec 4 23:32:16 2014 -0800

    Merge branch 'clocksource/physical-timers' into next/drivers
    
    * clocksource/physical-timers:
      clocksource: arch_timer: Allow the device tree to specify uninitialized timer registers
      clocksource: arch_timer: Fix code to use physical timers when requested

commit 65b5732d241b8b39e07653794eefffd0d8028cbb
Author: Doug Anderson <dianders@chromium.org>
Date:   Wed Oct 8 00:33:47 2014 -0700

    clocksource: arch_timer: Allow the device tree to specify uninitialized timer registers
    
    Some 32-bit (ARMv7) systems are architected like this:
    
    * The firmware doesn't know and doesn't care about hypervisor mode and
      we don't want to add the complexity of hypervisor there.
    
    * The firmware isn't involved in SMP bringup or resume.
    
    * The ARCH timer come up with an uninitialized offset (CNTVOFF)
      between the virtual and physical counters.  Each core gets a
      different random offset.
    
    * The device boots in "Secure SVC" mode.
    
    * Nothing has touched the reset value of CNTHCTL.PL1PCEN or
      CNTHCTL.PL1PCTEN (both default to 1 at reset)
    
    On systems like the above, it doesn't make sense to use the virtual
    counter.  There's nobody managing the offset and each time a core goes
    down and comes back up it will get reinitialized to some other random
    value.
    
    This adds an optional property which can inform the kernel of this
    situation, and firmware is free to remove the property if it is going
    to initialize the CNTVOFF registers when each CPU comes out of reset.
    
    Currently, the best course of action in this case is to use the
    physical timer, which is why it is important that CNTHCTL hasn't been
    changed from its reset value and it's a reasonable assumption given
    that the firmware has never entered HYP mode.
    
    Note that it's been said that on ARMv8 systems the firmware and
    kernel really can't be architected as described above.  That means
    using the physical timer like this really only makes sense for ARMv7
    systems.
    
    Signed-off-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Sonny Rao <sonnyrao@chromium.org>
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 0b46b8a718c6e90910a1b1b0fe797be3c167e186
Author: Sonny Rao <sonnyrao@chromium.org>
Date:   Sun Nov 23 23:02:44 2014 -0800

    clocksource: arch_timer: Fix code to use physical timers when requested
    
    This is a bug fix for using physical arch timers when
    the arch_timer_use_virtual boolean is false.  It restores the
    arch_counter_get_cntpct() function after removal in
    
    0d651e4e "clocksource: arch_timer: use virtual counters"
    
    We need this on certain ARMv7 systems which are architected like this:
    
    * The firmware doesn't know and doesn't care about hypervisor mode and
      we don't want to add the complexity of hypervisor there.
    
    * The firmware isn't involved in SMP bringup or resume.
    
    * The ARCH timer come up with an uninitialized offset between the
      virtual and physical counters.  Each core gets a different random
      offset.
    
    * The device boots in "Secure SVC" mode.
    
    * Nothing has touched the reset value of CNTHCTL.PL1PCEN or
      CNTHCTL.PL1PCTEN (both default to 1 at reset)
    
    One example of such as system is RK3288 where it is much simpler to
    use the physical counter since there's nobody managing the offset and
    each time a core goes down and comes back up it will get reinitialized
    to some other random value.
    
    Fixes: 0d651e4e65e9 ("clocksource: arch_timer: use virtual counters")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sonny Rao <sonnyrao@chromium.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit ef1dfa7332e9205b532da1c2d286757ce511cd1d
Merge: 3d2660694cd1 ba62a8593d15
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Dec 4 19:11:03 2014 +0100

    Merge tag 'at91-cleanup5' of git://git.kernel.org/pub/scm/linux/kernel/git/nferre/linux-at91 into next/cleanup
    
    Pull "Fifth batch of cleanup/SoC for 3.19" from Nicolas Ferre:
    
    - removal of now dead code and AT91-specific driver
    - removal of !DT initialization in some core AT91 drivers
    - simplification of Kconfig DT board file selection: now automatic
    
    * tag 'at91-cleanup5' of git://git.kernel.org/pub/scm/linux/kernel/git/nferre/linux-at91:
      ARM: at91: remove unused board.h file
      ARM: at91: remove unneeded header files
      ARM: at91/clocksource: remove !DT PIT initializations
      ARM: at91: at91rm9200 ST initialization is now DT only
      ARM: at91: remove old AT91-specific drivers
      ARM: at91: cleanup initilisation code by removing dead code
      ARM: at91/Kconfig: select board files automatically
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit ab64920c3742ba992a3bf0b06f9750d1cad9d050
Merge: 756f80cee766 6e6db2bea3ea
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Dec 4 16:46:43 2014 +0100

    Merge tag 'mvebu-soc-suspend-3.19' of git://git.infradead.org/linux-mvebu into next/soc
    
    Pull "mvebu SoC suspend changes for v3.19" from Jason Cooper:
    
     - Armada 370/XP suspend/resume support
    
     - mvebu SoC driver suspend/resume support
        - irqchip
        - clocksource
        - mbus
        - clk
    
    * tag 'mvebu-soc-suspend-3.19' of git://git.infradead.org/linux-mvebu:
      ARM: mvebu: add SDRAM controller description for Armada XP
      ARM: mvebu: adjust mbus controller description on Armada 370/XP
      ARM: mvebu: add suspend/resume DT information for Armada XP GP
      ARM: mvebu: synchronize secondary CPU clocks on resume
      ARM: mvebu: make sure MMU is disabled in armada_370_xp_cpu_resume
      ARM: mvebu: Armada XP GP specific suspend/resume code
      ARM: mvebu: reserve the first 10 KB of each memory bank for suspend/resume
      ARM: mvebu: implement suspend/resume support for Armada XP
      clk: mvebu: add suspend/resume for gatable clocks
      bus: mvebu-mbus: provide a mechanism to save SDRAM window configuration
      bus: mvebu-mbus: suspend/resume support
      clocksource: time-armada-370-xp: add suspend/resume support
      irqchip: armada-370-xp: Add suspend/resume support
      Documentation: dt-bindings: minimal documentation for MVEBU SDRAM controller
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 06f9eb884be81431d54d7d37390043e3b5b7f14a
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Thu Dec 4 01:17:01 2014 +0000

    arm64: Provide a namespace to NCAPS
    
    Building arm64.allmodconfig leads to the following warning:
    
    usb/gadget/function/f_ncm.c:203:0: warning: "NCAPS" redefined
     #define NCAPS (USB_CDC_NCM_NCAP_ETH_FILTER | USB_CDC_NCM_NCAP_CRC_MODE)
     ^
    In file included from /home/build/work/batch/arch/arm64/include/asm/io.h:32:0,
                     from /home/build/work/batch/include/linux/clocksource.h:19,
                     from /home/build/work/batch/include/clocksource/arm_arch_timer.h:19,
                     from /home/build/work/batch/arch/arm64/include/asm/arch_timer.h:27,
                     from /home/build/work/batch/arch/arm64/include/asm/timex.h:19,
                     from /home/build/work/batch/include/linux/timex.h:65,
                     from /home/build/work/batch/include/linux/sched.h:19,
                     from /home/build/work/batch/arch/arm64/include/asm/compat.h:25,
                     from /home/build/work/batch/arch/arm64/include/asm/stat.h:23,
                     from /home/build/work/batch/include/linux/stat.h:5,
                     from /home/build/work/batch/include/linux/module.h:10,
                     from /home/build/work/batch/drivers/usb/gadget/function/f_ncm.c:19:
    arch/arm64/include/asm/cpufeature.h:27:0: note: this is the location of the previous definition
     #define NCAPS     2
    
    So add a ARM64 prefix to avoid such problem.
    
    Reported-by: Olof's autobuilder <build@lixom.net>
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit 50755f6f038829d3428435158fcdd5fb15a5d902
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Dec 2 14:54:03 2014 +0100

    ARM: at91/clocksource: remove !DT PIT initializations
    
    As AT91 !DT code is now removed, cleanup the PIT clocksource driver.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    [nicolas.ferre@atmel.com: split patch]
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Cc: Boris BREZILLON <boris.brezillon@free-electrons.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f9a49ab53a269fda39ae57063bd336b4bd62fa76
Author: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
Date:   Fri Nov 21 17:00:01 2014 +0100

    clocksource: time-armada-370-xp: add suspend/resume support
    
    This commit adds a set of suspend/resume syscore_ops to respectively
    save and restore a number of timer registers, in order to make sure
    the clockevent and clocksource devices continue to work properly
    across a suspend/resume cycle.
    
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lkml.kernel.org/r/1416585613-2113-5-git-send-email-thomas.petazzoni@free-electrons.com
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit 32e049ad7997ef09af3fc1969325ce2326a5dd11
Merge: df717a58a38c 3db47dc0ae4d
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Nov 28 14:59:53 2014 +0100

    Merge tag 'imx-soc-3.19' of git://git.kernel.org/pub/scm/linux/kernel/git/shawnguo/linux into next/soc
    
    Pull "The i.MX SoC update for 3.19" from Shawn Guo
    
     - Update i.MX6 suspend code to check DDR instead of CPU type, as the
       difference we need to handle is between LPDDR2 and DDR3, not SoCs.
     - Set anatop properly for LPDDR2 in DSM mode
     - Add support for new SoC LS1021A which integrates dual Cortex-A7
     - Add ENET initialization for i.MX6SX platform
     - Add cpufreq support for i.MX53 platform
     - Add a SNVS based poweroff driver for i.MX6 platforms
     - Use ARM  Global Timer as clocksource on VF610
    
    Note: the change set is built on top of tag imx-fixes-3.18-2 to resolve
    a conflict on file arch/arm/mach-imx/clk-vf610.c.
    
    * tag 'imx-soc-3.19' of git://git.kernel.org/pub/scm/linux/kernel/git/shawnguo/linux:
      power: reset: imx-snvs-poweroff: add power off driver for i.mx6
      ARM: imx: temporarily remove CONFIG_SOC_FSL from LS1021A
      ARM: imx: clk-vf610: get input clocks from assigned clocks
      ARM: imx: Add Freescale LS1021A SMP support
      ARM: imx: Add initial support for Freescale LS1021A
      ARM: imx53: add cpufreq support
      ARM: imx53: clk: add ARM clock
      ARM: imx: add CPU clock type
      ARM: imx5: add step clock, used when reprogramming PLL1
      ARM: imx: add enet init for i.mx6sx
      ARM: imx6sx: add imx6sx iomux-gpr field define
      ARM: vf610: Add ARM Global Timer clocksource option
      ARM: imx: add anatop settings for LPDDR2 when enter DSM mode
      ARM: imx: replace cpu type check with ddr type check
      ARM: imx: Fix the removal of CONFIG_SPI option
      ARM: imx: clk-vf610: define PLL's clock tree
    
    Signed-off-by; Arnd Bergmann <arnd@arndb.de>

commit 183f35d75954cbe344e442f49134357052b33208
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Mon Oct 13 18:59:09 2014 -0600

    clocksource: Remove "weak" from clocksource_default_clock() declaration
    
    commit 96a2adbc6f501996418da9f7afe39bf0e4d006a9 upstream.
    
    kernel/time/jiffies.c provides a default clocksource_default_clock()
    definition explicitly marked "weak".  arch/s390 provides its own definition
    intended to override the default, but the "weak" attribute on the
    declaration applied to the s390 definition as well, so the linker chose one
    based on link order (see 10629d711ed7 ("PCI: Remove __weak annotation from
    pcibios_get_phb_of_node decl")).
    
    Remove the "weak" attribute from the clocksource_default_clock()
    declaration so we always prefer a non-weak definition over the weak one,
    independent of link order.
    
    Fixes: f1b82746c1e9 ("clocksource: Cleanup clocksource selection")
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 89de77a8c557f14d2713a1f43fbc33980e639b98
Merge: cb2aa63469f8 4a22d9c93af1
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Nov 27 11:47:10 2014 +0100

    Merge branch 'clockevents/3.19' of http://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Daniel Lezcano muttered:
    
     * Marvell timer updates from Ezequiel Garcia
       - Add missing clock enable calls for armada
       - Change source clock for clocksource and watchdog
     * SIRF timer updates from Yanchang Li
       - Make clock rate configurable

commit 4a22d9c93af1f2b2c40354c4bc59fd007f33f05e
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Nov 4 10:21:33 2014 -0300

    clocksource: armada-370-xp: Use the reference clock on A375 SoC
    
    The 25 MHz reference clock has better stability so its use is preferred over the
    core clock.
    
    This commit takes advantage of the already introduced Armada 375 devicetree
    compatible string and adds a new timer initialization. If available, the timer
    will use the reference clock (named as 'fixed'). Otherwise, it falls back to the
    previous behavior.
    
    Acked-by: Jason Cooper <jason@lakedaemon.net>
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Acked-by: Wim Van Sebroeck <wim@iguana.be>
    Reviewed-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Tested-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 551f2fd5c6f34945e2daa3abb547f81f5576facb
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Nov 4 10:21:31 2014 -0300

    clocksource: armada-370-xp: Add missing clock enable
    
    This commit makes sure the timer clock is prepared and enabled
    before retrieving its rate.
    
    Acked-by: Jason Cooper <jason@lakedaemon.net>
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Acked-by: Wim Van Sebroeck <wim@iguana.be>
    Reviewed-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Tested-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e12aa828ff42bae894e4eb7350d4dbf46eb19084
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Wed Nov 12 11:43:39 2014 -0800

    clocksource: mips-gic: Add device-tree support
    
    Parse the GIC timer frequency and interrupt from the device-tree.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Pawel Moll <pawel.moll@arm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Ian Campbell <ijc+devicetree@hellion.org.uk>
    Cc: Kumar Gala <galak@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: David Daney <ddaney.cavm@gmail.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: James Hogan <james.hogan@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: devicetree@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8421/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit a45da5659852bd4cbe453b49f5b26def65f5a6bf
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Mon Oct 20 12:04:06 2014 -0700

    clocksource: mips-gic: Bump up rating of GIC timer
    
    Bump up the rating of the GIC timer so that it gets prioritized
    over the CP0 timer.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8141/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit b695d8e6ad6fba3d72b309b0d62128b04cf57160
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Mon Oct 20 12:04:05 2014 -0700

    clocksource: mips-gic: Use clockevents_config_and_register
    
    Use clockevents_config_and_register to setup the clock_event_device
    based on frequency and min/max ticks instead of doing it ourselves.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8140/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit e4752dbbc300939e14029583ba2a0b235b147649
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Mon Oct 20 12:04:04 2014 -0700

    clocksource: mips-gic: Use CPU notifiers to setup the timer
    
    Instead of requiring an explicit call to gic_clockevent_init in the SMP
    startup path, use CPU notifiers to register and enable the GIC timer on
    CPU startup.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8139/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit f7ea3060b60a8f32794aa094f9216b198083d232
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Mon Oct 20 12:04:03 2014 -0700

    clocksource: mips-gic: Use percpu_dev_id
    
    Since the GIC timer IRQ is a percpu IRQ, we can use percpu_dev_id
    to pass the IRQ handler the correct clock_event_device.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8138/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 001f5fe72cf6434f00fccf2b628f6843de1c3d4f
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Mon Oct 20 12:04:02 2014 -0700

    clocksource: mips-gic: Remove gic_event_handler
    
    Remove gic_event_handler since it is completely unnecessary.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8136/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit b0854514537e4e2f0a599ca05d18fe95dcd3ee42
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Mon Oct 20 12:04:01 2014 -0700

    clocksource: mips-gic: Move gic_frequency to clocksource driver
    
    There's no reason for gic_frequency to be global any more and it
    certainly doesn't belong in the GIC irqchip driver, so move it to
    the GIC clocksource driver.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8137/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 5fee56e0ddac14511a4dd33f1240a0f0b94a9d08
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Mon Oct 20 12:04:00 2014 -0700

    clocksource: mips-gic: Staticize local symbols
    
    There are a number of variables and functions which are unnecessarily
    global.  Mark them static.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8135/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit a331ce63c85080f554e0a19fc4189a520c65267b
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Mon Oct 20 12:03:59 2014 -0700

    clocksource: mips-gic: Combine with GIC clockevent driver
    
    Combine the GIC clocksource driver with the GIC clockevent driver from
    arch/mips/kernel/cevt-gic.c and remove the clockevent driver's separate
    Kconfig symbol.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Andrew Bresticker <abrestic@chromium.org>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8132/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit fa5635a277171021d364f6a3fab4addce8f358d2
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Mon Oct 20 12:03:58 2014 -0700

    MIPS: Move GIC clocksource driver to drivers/clocksource/
    
    Move the GIC clocksource driver to drivers/clocksource/mips-gic-timer.c.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8133/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit c5d58e9e79dd8d687454915fc4e845434f973175
Author: Kelvin Cheung <keguang.zhang@gmail.com>
Date:   Fri Oct 10 11:40:02 2014 +0800

    MIPS: Loongson1B: Add a clockevent/clocksource using PWM Timer
    
    This patch add a clockevent/clocksource using PWM Timer for Loongson1B,
    which is based on earlier work by Tang, Haifeng.
    
    Signed-off-by: Kelvin Cheung <keguang.zhang@gmail.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/8025/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 387904ff84caeeff5aa5aad43aef4d0e5ce4bb24
Author: Andrew Bresticker <abrestic@chromium.org>
Date:   Mon Oct 20 12:03:49 2014 -0700

    irqchip: mips-gic: Export function to read counter width
    
    Export the function gic_get_count_width to read the width of
    the GIC global counter from GIC_SH_CONFIG.  Update the GIC
    clocksource driver to use this new function.
    
    Signed-off-by: Andrew Bresticker <abrestic@chromium.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Paul Burton <paul.burton@imgtec.com>
    Cc: Qais Yousef <qais.yousef@imgtec.com>
    Cc: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/8124/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 2ce34b105c79ee0404b3a8f68c9ab2ce197dd06f
Merge: 0df1f2487d2f 3db47dc0ae4d
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sun Nov 23 15:07:02 2014 +0800

    Merge tag 'imx-soc-3.19' into imx/dt
    
    The i.MX SoC update for 3.19:
     - Update i.MX6 suspend code to check DDR instead of CPU type, as the
       difference we need to handle is between LPDDR2 and DDR3, not SoCs.
     - Set anatop properly for LPDDR2 in DSM mode
     - Add support for new SoC LS1021A which integrates dual Cortex-A7
     - Add ENET initialization for i.MX6SX platform
     - Add cpufreq support for i.MX53 platform
     - Add a SNVS based poweroff driver for i.MX6 platforms
     - Use ARM  Global Timer as clocksource on VF610
    
    Note: the change set is built on top of tag imx-fixes-3.18-2 to resolve
    a conflict on file arch/arm/mach-imx/clk-vf610.c.

commit 2a61cba71fba5b73b11e0de665869a6ee619af0e
Author: Stefan Agner <stefan@agner.ch>
Date:   Wed Sep 24 18:20:10 2014 +0200

    ARM: vf610: Add ARM Global Timer clocksource option
    
    Add the ARM Global Timer as clocksource/scheduler clock option and
    use it as default scheduler clock. This leaves the PIT timer for
    other users e.g. the secondary Cortex-M4 core. Also, the Global Timer
    has double the precission (running at pheripheral clock compared to
    IPG clock) and a 64-bit incrementing counter register. We still keep
    the PIT timer as an secondary option in case the ARM Global Timer is
    not available.
    
    Signed-off-by: Stefan Agner <stefan@agner.ch>
    Acked-by: Bill Pringlemeir <bpringlemeir@nbsps.com>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

commit b77d43943ea83997c6c37b8831d1561981d499c5
Author: Heiko Stuebner <heiko@sntech.de>
Date:   Sat Nov 22 16:23:28 2014 +0100

    ARM: dts: rockchip: temporarily disable smp on rk3288
    
    Stock firmware on rk3288 does not initizalize the CNTVOFF registers
    of the architected timer correctly. This introduces issues with the
    newly added SMP support for rk3288, resulting in rcu stalls due to
    differing timer values per core.
    
    There exist preliminary and tested patches for u-boot for this problem,
    but there are a minority of boards using other bootloaders like coreboot.
    
    There also is currently a second solution for miss-initialized architected
    timers in the works:
    - clocksource: arch_timer: Fix code to use physical timers when requested
    - clocksource: arch_timer: Allow the device tree to specify uninitialized timer registers
    
    Therefore disable smp on rk3288 again till these are finalized, also
    allowing coreboot-based boards to boot again.
    
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>

commit 659bc17b80c692e0ccda757e207fc4666d9b3e71
Author: pang.xunlei <pang.xunlei@linaro.org>
Date:   Thu Oct 9 15:04:31 2014 +0800

    time: Complete NTP adjustment threshold judging conditions
    
    The clocksource mult-adjustment threshold is [mult-maxadj, mult+maxadj],
    timekeeping_adjust() only deals with the upper threshold, but misses the
    lower threshold.
    
    This patch adds the lower threshold judging condition.
    
    Signed-off-by: pang.xunlei <pang.xunlei@linaro.org>
    [jstultz: Minor fix for > 80 char line]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 6067dc5a8c2b1b57e67eaf1125db1d63c1ed6361
Author: pang.xunlei <pang.xunlei@linaro.org>
Date:   Wed Oct 8 15:03:34 2014 +0800

    time: Avoid possible NTP adjustment mult overflow.
    
    Ideally, __clocksource_updatefreq_scale, selects the largest shift
    value possible for a clocksource. This results in the mult memember of
    struct clocksource being particularly large, although not so large
    that NTP would adjust the clock to cause it to overflow.
    
    That said, nothing actually prohibits an overflow from occuring, its
    just that it "shouldn't" occur.
    
    So while very unlikely, and so far never observed, the value of
    (cs->mult+cs->maxadj) may have a chance to reach very near 0xFFFFFFFF,
    so there is a possibility it may overflow when doing NTP positive
    adjustment
    
    See the following detail: When NTP slewes the clock, kernel goes
    through update_wall_time()->...->timekeeping_apply_adjustment():
            tk->tkr.mult += mult_adj;
    
    Since there is no guard against it, its possible tk->tkr.mult may
    overflow during this operation.
    
    This patch avoids any possible mult overflow by judging the overflow
    case before adding mult_adj to mult, also adds the WARNING message
    when capturing such case.
    
    Signed-off-by: pang.xunlei <pang.xunlei@linaro.org>
    [jstultz: Reworded commit message]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit fefd9bdc44e64c55da24e2a7d96faaeb0d5aea1e
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Mon Oct 13 18:59:09 2014 -0600

    clocksource: Remove "weak" from clocksource_default_clock() declaration
    
    commit 96a2adbc6f501996418da9f7afe39bf0e4d006a9 upstream.
    
    kernel/time/jiffies.c provides a default clocksource_default_clock()
    definition explicitly marked "weak".  arch/s390 provides its own definition
    intended to override the default, but the "weak" attribute on the
    declaration applied to the s390 definition as well, so the linker chose one
    based on link order (see 10629d711ed7 ("PCI: Remove __weak annotation from
    pcibios_get_phb_of_node decl")).
    
    Remove the "weak" attribute from the clocksource_default_clock()
    declaration so we always prefer a non-weak definition over the weak one,
    independent of link order.
    
    Fixes: f1b82746c1e9 ("clocksource: Cleanup clocksource selection")
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce1d89b64cb210b29bd4802549d831577f005816
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Mon Oct 13 18:59:09 2014 -0600

    clocksource: Remove "weak" from clocksource_default_clock() declaration
    
    commit 96a2adbc6f501996418da9f7afe39bf0e4d006a9 upstream.
    
    kernel/time/jiffies.c provides a default clocksource_default_clock()
    definition explicitly marked "weak".  arch/s390 provides its own definition
    intended to override the default, but the "weak" attribute on the
    declaration applied to the s390 definition as well, so the linker chose one
    based on link order (see 10629d711ed7 ("PCI: Remove __weak annotation from
    pcibios_get_phb_of_node decl")).
    
    Remove the "weak" attribute from the clocksource_default_clock()
    declaration so we always prefer a non-weak definition over the weak one,
    independent of link order.
    
    Fixes: f1b82746c1e9 ("clocksource: Cleanup clocksource selection")
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88d96d8e9ece6591b19a9989f010db1b623c0d9a
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Mon Oct 13 18:59:09 2014 -0600

    clocksource: Remove "weak" from clocksource_default_clock() declaration
    
    commit 96a2adbc6f501996418da9f7afe39bf0e4d006a9 upstream.
    
    kernel/time/jiffies.c provides a default clocksource_default_clock()
    definition explicitly marked "weak".  arch/s390 provides its own definition
    intended to override the default, but the "weak" attribute on the
    declaration applied to the s390 definition as well, so the linker chose one
    based on link order (see 10629d711ed7 ("PCI: Remove __weak annotation from
    pcibios_get_phb_of_node decl")).
    
    Remove the "weak" attribute from the clocksource_default_clock()
    declaration so we always prefer a non-weak definition over the weak one,
    independent of link order.
    
    Fixes: f1b82746c1e9 ("clocksource: Cleanup clocksource selection")
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2f456e720351028bdd84f02abb5a58ceacbdcaa
Merge: 2db0aea59024 7b6b0a455d98
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Nov 20 17:20:59 2014 +0100

    Merge tag 'v3.19-meson-soc' of https://github.com/carlocaione/linux-meson into next/soc
    
    Pull "ARM: meson: SOC related changes" from Carlo Caione:
    
    This is the pull request for the SoC related changes for the 3.19.
    The support for Meson8 is added together with L2 cache management.
    
    * tag 'v3.19-meson-soc' of https://github.com/carlocaione/linux-meson:
      clocksource: meson6: Select CLKSRC_MMIO
      ARM: meson: enable L2 cache
      ARM: meson: document meson8 compatible properties
      ARM: meson: add meson8 support
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 4eca459bc10d8400407d0fc04e90dac45b571c87
Merge: d686ce4204c5 f956a785a282
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Nov 20 17:13:55 2014 +0100

    Merge tag 'integrator-v3.19-arm-soc-2' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-integrator into next/soc
    
    Pull "ARM SoC Integrator updates for v3.19" from Linus Walleij:
    
    Integrator updates for the v3.19 merge cycle on
    top of the multiplatform patches, this moves out
    some drivers and reduced the amount of code carried
    in arch/arm/mach-integrator.
    
    - Move the Integrator/AP timer to drivers/clocksource
    - Move the restart functionality to the device tree,
      patches to enable restart for the Integrator have
      been merged to the reset tree (orthogonal)
    - Move debug LEDs to device tree (using the syscon
      LED driver merged for v3.18)
    - Move core module LEDs to device tree (using the
      syscon LED driver merged for v3.18)
    - Move the SoC driver (chip ID etc) to
      drivers/soc/versatile/soc-integrator.c
    
    * tag 'integrator-v3.19-arm-soc-2' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-integrator:
      soc: move SoC driver for the ARM Integrator
      ARM: integrator: move core module LED to device tree
      ARM: integrator: move debug LEDs to syscon LED driver
      ARM: integrator: move restart to the device tree
      ARM: integrator: move AP timer to clocksource
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 0f207b54545a7535e02e7ca11931655396e15846
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Mon Oct 13 18:59:09 2014 -0600

    clocksource: Remove "weak" from clocksource_default_clock() declaration
    
    commit 96a2adbc6f501996418da9f7afe39bf0e4d006a9 upstream.
    
    kernel/time/jiffies.c provides a default clocksource_default_clock()
    definition explicitly marked "weak".  arch/s390 provides its own definition
    intended to override the default, but the "weak" attribute on the
    declaration applied to the s390 definition as well, so the linker chose one
    based on link order (see 10629d711ed7 ("PCI: Remove __weak annotation from
    pcibios_get_phb_of_node decl")).
    
    Remove the "weak" attribute from the clocksource_default_clock()
    declaration so we always prefer a non-weak definition over the weak one,
    independent of link order.
    
    Fixes: f1b82746c1e9 ("clocksource: Cleanup clocksource selection")
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit ef89af1f4380b922bdadd31c9e49829a022f55ae
Author: Yanchang Li <yl22@csr.com>
Date:   Tue Nov 11 20:42:52 2014 +0800

    clocksource: sirf: Remove hard-coded clock rate
    
    The customers may want to adjust the whole PLL and dividers according to
    different user scenerios, and this causes the parent clock of sirf clocksource
    not be divided exactly by the current hard-coded 1MHz clock rate.
    This patch removes the hard-coded rate and makes the clocksource driver more
    adaptive to the external changes.
    
    Signed-off-by: Yanchang Li <yl22@csr.com>
    Signed-off-by: Barry Song <Baohua.Song@csr.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7b6b0a455d98c7a314278e0fdca25ec6395a502a
Author: Beniamino Galvani <b.galvani@gmail.com>
Date:   Tue Nov 18 16:41:20 2014 +0100

    clocksource: meson6: Select CLKSRC_MMIO
    
    Select CLKSRC_MMIO when the meson6_timer driver is enabled since it
    depends on clocksource MMIO functions.
    
    Signed-off-by: Beniamino Galvani <b.galvani@gmail.com>
    Signed-off-by: Carlo Caione <carlo@caione.org>

commit a0f3e826e8a5084bec73433a36670c386ed3aefe
Merge: 1f2dd7bcbfbe d5153cd734dd
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Nov 4 14:44:53 2014 -0800

    Merge tag 'renesas-dt-clocksource-for-v3.19' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas into next/dt
    
    Merge "Renesas ARM Based SoC DT Clocksource Updates for v3.19" from Simon
    Horman:
    
    * sh_mtu2: Drop incorrect SoC family name
    * sh_tmu: Document r8a7778 and r8a7740 bindings
    
    * tag 'renesas-dt-clocksource-for-v3.19' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas:
      clocksource: sh_mtu2: Drop incorrect SoC family name
      clocksource: sh_tmu: Document r8a7778 binding
      clocksource: sh_tmu: Document R-Mobile r8a7740 binding
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 9e3680b1750b9a62680b0262c9f438de98b77655
Author: Heena Sirwani <heenasirwani@gmail.com>
Date:   Wed Oct 29 16:01:16 2014 +0530

    timekeeping: Provide fast accessor to the seconds part of CLOCK_MONOTONIC
    
    This is the counterpart to get_seconds() based on CLOCK_MONOTONIC. The
    use case for this interface are kernel internal coarse grained
    timestamps which do neither require the nanoseconds fraction of
    current time nor the CLOCK_REALTIME properties. Such timestamps can
    currently only retrieved by calling ktime_get_ts64() and using the
    tv_sec field of the returned timespec64. That's inefficient as it
    involves the read of the clocksource, math operations and must be
    protected by the timekeeper sequence counter.
    
    To avoid the sequence counter protection we restrict the return value
    to unsigned 32bit on 32bit machines. This covers ~136 years of uptime
    and therefor an overflow is not expected to hit anytime soon.
    
    To avoid math in the function we calculate the current seconds portion
    of CLOCK_MONOTONIC when the timekeeper gets updated in
    tk_update_ktime_data() similar to the CLOCK_REALTIME counterpart
    xtime_sec.
    
    [ tglx: Massaged changelog, simplified and commented the update
            function, added docbook comment ]
    
    Signed-off-by: Heena Sirwani <heenasirwani@gmail.com>
    Reviewed-by: Arnd Bergman <arnd@arndb.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: opw-kernel@googlegroups.com
    Link: http://lkml.kernel.org/r/da0b63f4bdf3478909f92becb35861197da3a905.1414578445.git.heenasirwani@gmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit be278e980d95f52b280cefac1a98b87fa518dd29
Author: James Hartley <james.hartley@imgtec.com>
Date:   Thu Sep 18 15:59:07 2014 +0100

    clocksource: Fix 'clcoksource' typo in comment
    
    Simple typo in a comment, so fix it.
    
    Signed-off-by: James Hartley <james.hartley@imgtec.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit beb5818bd012953c79de38f9726f327d8e311569
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Oct 15 15:30:25 2014 +0200

    ARM: integrator: move AP timer to clocksource
    
    This moves the timer/clocksource implementation for the
    Integrator/AP down to drivers/clocksource and augments the
    driver a little to use CLOCKSOURCE_OF_DECLARE(). Remove
    the static mapping of the timer blocks while we're at it.
    
    Tested on the Integrator/AP.
    
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit d5153cd734dd6c1243bb3dc98065be99b10d049f
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Oct 24 13:29:38 2014 +0200

    clocksource: sh_mtu2: Drop incorrect SoC family name
    
    The MTU2 hardware block is found in many Renesas SH and ARM SoCs, but
    not in R-Car.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit f9d6ec6f546a061f5b9eeb53927f1bfac5fb8278
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Oct 24 13:31:52 2014 +0200

    clocksource: sh_tmu: Document r8a7778 binding
    
    The r8a7778 is very similar to the r8a7779, and already handled by
    the current driver in the non-DT case.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit ec95a345198fc97022c98b44446c96b31d693882
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Oct 22 11:38:27 2014 +0200

    clocksource: sh_tmu: Document R-Mobile r8a7740 binding
    
    Compared to the r8a7779, the r8a7740 lacks the input capture register,
    which is not used by the driver (the current driver already handles the
    r8a7740 in the non-DT case).
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 59aa896db80479dec29f471a7ca2b9eeeeb7d38e
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Wed Oct 15 16:06:20 2014 +0100

    ARM/ARM64: arch-timer: fix arch_timer_probed logic
    
    Commit c387f07e6205 (clocksource: arm_arch_timer: Discard unavailable
    timers correctly) changed the way the driver makes sure both the memory
    and system-register timers have been probed before finalizing the probing.
    
    There is a interesting flaw in this logic that leads to this final step
    never to be executed. Things seems to work pretty well until something
    actually needs the data that is produced during this final stage.
    
    For example, KVM explodes on the first run of a guest when executed on
    a platform that has both memory and sysreg nodes (Juno, for example).
    
    Just fix the damned logic, and enjoy booting VMs again.
    
    Tested on a Juno system.
    
    Cc: Sudeep Holla <sudeep.holla@arm.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Christoffer Dall <christoffer.dall@linaro.org>
    Reported-by: Riku Voipio <riku.voipio@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Sudeep Holla <sudeep.holla@arm.com>
    Tested-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 20ca57cde5557d8623af8cbf81a17733bbbce3a6
Merge: c6d13403a153 486edb24952c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 24 12:41:50 2014 -0700

    Merge tag 'stable/for-linus-3.18-b-rc1-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/xen/tip
    
    Pull xen bug fixes from David Vrabel:
    
     - Fix regression in xen_clocksource_read() which caused all Xen guests
       to crash early in boot.
     - Several fixes for super rare race conditions in the p2m.
     - Assorted other minor fixes.
    
    * tag 'stable/for-linus-3.18-b-rc1-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/xen/tip:
      xen/pci: Allocate memory for physdev_pci_device_add's optarr
      x86/xen: panic on bad Xen-provided memory map
      x86/xen: Fix incorrect per_cpu accessor in xen_clocksource_read()
      x86/xen: avoid race in p2m handling
      x86/xen: delay construction of mfn_list_list
      x86/xen: avoid writing to freed memory after race in p2m handling
      xen/balloon: Don't continue ballooning when BP_ECANCELED is encountered

commit 816fb4175c29b16948fb24a92053bea1e79908cc
Merge: 8c81f48e16fb 271a9c351589
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 23 15:04:27 2014 -0700

    Merge tag 'remove-weak-declarations' of git://git.kernel.org/pub/scm/linux/kernel/git/helgaas/pci
    
    Pull weak function declaration removal from Bjorn Helgaas:
     "The "weak" attribute is commonly used for the default version of a
      function, where an architecture can override it by providing a strong
      version.
    
      Some header file declarations included the "weak" attribute.  That's
      error-prone because it causes every implementation to be weak, with no
      strong version at all, and the linker chooses one based on link order.
    
      What we want is the "weak" attribute only on the *definition* of the
      default implementation.  These changes remove "weak" from the
      declarations, leaving it on the default definitions"
    
    * tag 'remove-weak-declarations' of git://git.kernel.org/pub/scm/linux/kernel/git/helgaas/pci:
      uprobes: Remove "weak" from function declarations
      memory-hotplug: Remove "weak" from memory_block_size_bytes() declaration
      kgdb: Remove "weak" from kgdb_arch_pc() declaration
      ARC: kgdb: generic kgdb_arch_pc() suffices
      vmcore: Remove "weak" from function declarations
      clocksource: Remove "weak" from clocksource_default_clock() declaration
      x86, intel-mid: Remove "weak" from function declarations
      audit: Remove "weak" from audit_classify_compat_syscall() declaration

commit 3251f20b897f955ab7f153181b4ebfbb2317cbb9
Author: Boris Ostrovsky <boris.ostrovsky@oracle.com>
Date:   Thu Oct 16 17:02:15 2014 -0400

    x86/xen: Fix incorrect per_cpu accessor in xen_clocksource_read()
    
    Commit 89cbc76768c2 ("x86: Replace __get_cpu_var uses") replaced
    __get_cpu_var() with this_cpu_ptr() in xen_clocksource_read() in such a
    way that instead of accessing a structure pointed to by a per-cpu pointer
    we are trying to get to a per-cpu structure.
    
    __this_cpu_read() of the pointer is the more appropriate accessor.
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>

commit 96a2adbc6f501996418da9f7afe39bf0e4d006a9
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Mon Oct 13 18:59:09 2014 -0600

    clocksource: Remove "weak" from clocksource_default_clock() declaration
    
    kernel/time/jiffies.c provides a default clocksource_default_clock()
    definition explicitly marked "weak".  arch/s390 provides its own definition
    intended to override the default, but the "weak" attribute on the
    declaration applied to the s390 definition as well, so the linker chose one
    based on link order (see 10629d711ed7 ("PCI: Remove __weak annotation from
    pcibios_get_phb_of_node decl")).
    
    Remove the "weak" attribute from the clocksource_default_clock()
    declaration so we always prefer a non-weak definition over the weak one,
    independent of link order.
    
    Fixes: f1b82746c1e9 ("clocksource: Cleanup clocksource selection")
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Ingo Molnar <mingo@kernel.org>
    CC: Daniel Lezcano <daniel.lezcano@linaro.org>
    CC: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 5e794de514f56de1e78e979ca09c56a91aa2e9f1
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Wed Sep 24 00:14:29 2014 +0900

    ARM: dts: Enable PWM node by default for s3c64xx
    
    The PWM block is required for system clock source so it must be always
    enabled. This patch fixes boot issues on SMDK6410 which did not have
    the node enabled explicitly for other purposes.
    
    Fixes: eeb93d02 ("clocksource: of: Respect device tree node status")
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit e8b397754a712f1b3c3fbf448ad836034ecc6643
Author: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date:   Tue Sep 23 11:55:20 2014 -0700

    ARM: zynq: DT: Remove 222 MHz OPP
    
    Due to dependencies between timer and CPU frequency, only changes by
    powers of two are allowed. The clocksource driver prevents other
    changes, but with cpufreq and its governors it can result in being
    spammed with error messages constantly. Hence, remove the 222 MHz OPP.
    
    Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>

commit 0429fbc0bdc297d64188483ba029a23773ae07b0
Merge: 6929c358972f 513d1a2884a4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 15 07:48:18 2014 +0200

    Merge branch 'for-3.18-consistent-ops' of git://git.kernel.org/pub/scm/linux/kernel/git/tj/percpu
    
    Pull percpu consistent-ops changes from Tejun Heo:
     "Way back, before the current percpu allocator was implemented, static
      and dynamic percpu memory areas were allocated and handled separately
      and had their own accessors.  The distinction has been gone for many
      years now; however, the now duplicate two sets of accessors remained
      with the pointer based ones - this_cpu_*() - evolving various other
      operations over time.  During the process, we also accumulated other
      inconsistent operations.
    
      This pull request contains Christoph's patches to clean up the
      duplicate accessor situation.  __get_cpu_var() uses are replaced with
      with this_cpu_ptr() and __this_cpu_ptr() with raw_cpu_ptr().
    
      Unfortunately, the former sometimes is tricky thanks to C being a bit
      messy with the distinction between lvalues and pointers, which led to
      a rather ugly solution for cpumask_var_t involving the introduction of
      this_cpu_cpumask_var_ptr().
    
      This converts most of the uses but not all.  Christoph will follow up
      with the remaining conversions in this merge window and hopefully
      remove the obsolete accessors"
    
    * 'for-3.18-consistent-ops' of git://git.kernel.org/pub/scm/linux/kernel/git/tj/percpu: (38 commits)
      irqchip: Properly fetch the per cpu offset
      percpu: Resolve ambiguities in __get_cpu_var/cpumask_var_t -fix
      ia64: sn_nodepda cannot be assigned to after this_cpu conversion. Use __this_cpu_write.
      percpu: Resolve ambiguities in __get_cpu_var/cpumask_var_t
      Revert "powerpc: Replace __get_cpu_var uses"
      percpu: Remove __this_cpu_ptr
      clocksource: Replace __this_cpu_ptr with raw_cpu_ptr
      sparc: Replace __get_cpu_var uses
      avr32: Replace __get_cpu_var with __this_cpu_write
      blackfin: Replace __get_cpu_var uses
      tile: Use this_cpu_ptr() for hardware counters
      tile: Replace __get_cpu_var uses
      powerpc: Replace __get_cpu_var uses
      alpha: Replace __get_cpu_var
      ia64: Replace __get_cpu_var uses
      s390: cio driver &__get_cpu_var replacements
      s390: Replace __get_cpu_var uses
      mips: Replace __get_cpu_var uses
      MIPS: Replace __get_cpu_var uses in FPU emulator.
      arm: Replace __this_cpu_ptr with raw_cpu_ptr
      ...

commit 47137c6ba1bcde30215795f9594cea770946456b
Merge: afa3536be88b 867f667fb9c6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 9 06:35:05 2014 -0400

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "Nothing really exciting this time:
    
       - a few fixlets in the NOHZ code
    
       - a new ARM SoC timer abomination.  One should expect that we have
         enough of them already, but they insist on inventing new ones.
    
       - the usual bunch of ARM SoC timer updates.  That feels like herding
         cats"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: arm_arch_timer: Consolidate arch_timer_evtstrm_enable
      clocksource: arm_arch_timer: Enable counter access for 32-bit ARM
      clocksource: arm_arch_timer: Change clocksource name if CP15 unavailable
      clocksource: sirf: Disable counter before re-setting it
      clocksource: cadence_ttc: Add support for 32bit mode
      clocksource: tcb_clksrc: Sanitize IRQ request
      clocksource: arm_arch_timer: Discard unavailable timers correctly
      clocksource: vf_pit_timer: Support shutdown mode
      ARM: meson6: clocksource: Add Meson6 timer support
      ARM: meson: documentation: Add timer documentation
      clocksource: sh_tmu: Document r8a7779 binding
      clocksource: sh_mtu2: Document r7s72100 binding
      clocksource: sh_cmt: Document SoC specific bindings
      timerfd: Remove an always true check
      nohz: Avoid tick's double reprogramming in highres mode
      nohz: Fix spurious periodic tick behaviour in low-res dynticks mode

commit 8b45bc892e6842115fc87c2b2a3b86a20617606a
Merge: eb785bef684f fa637bf0595e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 8 17:37:16 2014 -0400

    Merge tag 'drivers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC driver updates from Arnd Bergmann:
     "These are changes for drivers that are intimately tied to some SoC and
      for some reason could not get merged through the respective subsystem
      maintainer tree.
    
      Most of the new code is for the Keystone Navigator driver, which is
      new base support that is going to be needed for their hardware
      accelerated network driver and other units.
    
      Most of the commits are for moving old code around from at91 and omap
      for things that are done in device drivers nowadays.
    
       - at91: move reset, poweroff, memory and clocksource code into
         drivers directories
       - socfpga: add edac driver (through arm-soc, as requested by Boris)
       - omap: move omap-intc code to drivers/irqchip
       - sunxi: added an RTC driver for sun6i
       - omap: mailbox driver related changes
       - keystone: support for the "Navigator" component
       - versatile: new reboot, led and soc drivers"
    
    * tag 'drivers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (92 commits)
      bus: arm-ccn: Fix spurious warning message
      leds: add device tree bindings for register bit LEDs
      soc: add driver for the ARM RealView
      power: reset: driver for the Versatile syscon reboot
      leds: add a driver for syscon-based LEDs
      drivers/soc: ti: fix build break with modules
      MAINTAINERS: Add Keystone Multicore Navigator drivers entry
      soc: ti: add Keystone Navigator DMA support
      Documentation: dt: soc: add Keystone Navigator DMA bindings
      soc: ti: add Keystone Navigator QMSS driver
      Documentation: dt: soc: add Keystone Navigator QMSS bindings
      rtc: sunxi: Depend on platforms sun4i/sun7i that actually have the rtc
      rtc: sun6i: Add sun6i RTC driver
      irqchip: omap-intc: remove unnecessary comments
      irqchip: omap-intc: correct maximum number or MIR registers
      irqchip: omap-intc: enable TURBO idle mode
      irqchip: omap-intc: enable IP protection
      irqchip: omap-intc: remove unnecesary of_address_to_resource() call
      irqchip: omap-intc: comment style cleanup
      irqchip: omap-intc: minor improvement to omap_irq_pending()
      ...

commit 212fe84a6f215c39795a76517c1c02114d428681
Merge: 4a4743e840d0 05301fe7de11
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 8 17:06:53 2014 -0400

    Merge tag 'cleanup-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC cleanups from Arnd Bergmann:
     "This time around, the cleanup branch contains mostly code removal.  A
      number of board files for at91, imx and msm have become obsolete
      because of the DT conversion and are now ready to be removed.  The
      OMAP platform has traditionally had its own DMA engine abstraction and
      as this is being phased out, a lot of the original code is now unused
      and can be removed as well.
    
      S3C24xx can be simplified now that the restart code is a proper device
      driver.
    
      Finally, a number of cleanups in shmobile are done to prepare for the
      addition of new code in other branches"
    
    * tag 'cleanup-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (43 commits)
      ARM: at91: Remove the support for the RSI EWS board
      arm: mach-omap2: Convert pr_warning to pr_warn
      ARM: OMAP: Remove unused pieces of legacy DMA API
      ARM: at91: remove board file for Acme Systems Fox G20
      ARM: orion5x: Convert pr_warning to pr_warn
      ARM: S3C24XX: remove separate restart code
      ARM: EXYNOS: Do not calculate boot address twice
      ARM: sunxi: Remove sun4i reboot code from mach directory
      ARM: imx: Remove mach-mxt_td60 board file
      ARM: shmobile: armadillo800eva legacy: Use rmobile_add_devices_to_domains()
      ARM: shmobile: r8a7740: Clean up pm domain table
      ARM: shmobile: r8a7740: Use rmobile_add_devices_to_domains()
      ARM: shmobile: sh7372: Make domain_devices[] static __initdata
      ARM: shmobile: mackerel: Make domain_devices[] static __initdata
      clocksource: tcb_clksrc: sanitize IRQ request
      ARM: at91/tclib: mask interruptions at shutdown and probe
      ARM: at91/tclib: move initialization from alloc to probe
      ARM: at91/tclib: prefer using of devm_* functions
      ARM: clps711x: Switch CLPS711X subarch to use clk and clocksource driver
      ARM: shmobile: r8a7791 is now called "R-Car M2-W"
      ...

commit 867f667fb9c6734e06cc24e96fc7f06a7e772084
Merge: e1ce5c7adc73 fb0eee2f1419
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Mon Sep 29 01:59:51 2014 +0200

    Merge tag 'renesas-clocksource-for-v3.18' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas into clockevents/3.18
    
    Renesas Clocksource Updates for v3.18
    
    * Document per-SoC bindings
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e1ce5c7adc735ce96a35806ca32ceb78e607a283
Author: Nathan Lynch <nathan_lynch@mentor.com>
Date:   Mon Sep 29 01:50:06 2014 +0200

    clocksource: arm_arch_timer: Consolidate arch_timer_evtstrm_enable
    
    The arch_timer_evtstrm_enable hooks in arm and arm64 are substantially
    similar, the only difference being a CONFIG_COMPAT-conditional section
    which is relevant only for arm64.  Copy the arm64 version to the
    driver, removing the arch-specific hooks.
    
    Signed-off-by: Nathan Lynch <nathan_lynch@mentor.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Will Deacon <will.deacon@arm.com>

commit 8b8dde00347ef409b29abd97e5833ffdb4ed7508
Author: Nathan Lynch <nathan_lynch@mentor.com>
Date:   Mon Sep 29 01:50:06 2014 +0200

    clocksource: arm_arch_timer: Enable counter access for 32-bit ARM
    
    The only difference between arm and arm64's implementations of
    arch_counter_set_user_access is that 32-bit ARM does not enable user
    access to the virtual counter.  We want to enable this access for the
    32-bit ARM VDSO, so copy the arm64 version to the driver itself, and
    remove the arch-specific implementations.
    
    Signed-off-by: Nathan Lynch <nathan_lynch@mentor.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Will Deacon <will.deacon@arm.com>

commit 423bd69e69f565167ba14e2fe61df76c3c4a0d26
Author: Nathan Lynch <nathan_lynch@mentor.com>
Date:   Mon Sep 29 01:50:06 2014 +0200

    clocksource: arm_arch_timer: Change clocksource name if CP15 unavailable
    
    The arm and arm64 VDSOs need CP15 access to the architected counter.
    If this is unavailable (which is allowed by ARM v7), indicate this by
    changing the clocksource name to "arch_mem_counter" before registering
    the clocksource.
    
    Suggested by Stephen Boyd.
    
    Signed-off-by: Nathan Lynch <nathan_lynch@mentor.com>
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Will Deacon <will.deacon@arm.com>

commit 28cf35675a66947b20731f6acbc9d5b131930ce3
Author: Hao Liu <Hao.Liu@csr.com>
Date:   Mon Sep 29 01:50:06 2014 +0200

    clocksource: sirf: Disable counter before re-setting it
    
    According to HW spec, we have to disable the counter before setting
    it, if we don't this, in pressure test, sometimes the timer might
    not generate interrupt any more.
    
    And this patch also fixes a typo for register set by changing 0x7
    to 0x3. 0x7 is loop mode in HW, but here we are using oneshot 0x3.
    
    Signed-off-by: Hao Liu <Hao.Liu@csr.com>
    Signed-off-by: Barry Song <Baohua.Song@csr.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4e2bec0c327025671c1ec2101660e8fea29d9d89
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Mon Sep 29 01:50:05 2014 +0200

    clocksource: cadence_ttc: Add support for 32bit mode
    
    New TTCs support 32bit mode. Older versions support
    only 16bit modes. Keep 16bit mode as default
    and 32bit optional.
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2743f1beb0d31be9f59b6fc84f755fb4e173df4d
Author: Gael Portay <gael.portay@gmail.com>
Date:   Mon Sep 29 01:50:05 2014 +0200

    clocksource: tcb_clksrc: Sanitize IRQ request
    
    The clock is not unprepared in case of the request IRQ fails.
    
    Also update to request_irq.
    
    Signed-off-by: Gaël PORTAY <gael.portay@gmail.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c387f07e6205cc13f57c1def5f885bf0a20e1c2d
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Sep 29 01:50:05 2014 +0200

    clocksource: arm_arch_timer: Discard unavailable timers correctly
    
    Currently we wait until both cp15 and mem timers are probed if we
    have both timer device nodes present in the device tree without
    checking if the device is actually available. If one of the timer
    device node present is disabled, the system locks up on the boot
    as no timer gets registered.
    
    This patch adds the check for the availability of the timer device
    so that unavailable timers are discarded correctly. It also adds
    the missing of_node_put.
    
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 04f7e3e5134b9517bd9a78a84a9ee0f982d3ebdd
Author: Stefan Agner <stefan@agner.ch>
Date:   Mon Sep 29 01:50:05 2014 +0200

    clocksource: vf_pit_timer: Support shutdown mode
    
    In order to avoid waking up the system in a low power mode, the
    clocksource should not generate interrupts anymore. Disable the PIT
    timer interrupt when changing into the CLOCK_EVT_MODE_SHUTDOWN mode.
    
    [dlezcano] : remove superfluous empty line
    
    Signed-off-by: Stefan Agner <stefan@agner.ch>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Bill Pringlemeir <bpringlemeir@nbsps.com>

commit e4a6b378751fa8934c691816da1423e849059fad
Author: Carlo Caione <carlo@caione.org>
Date:   Mon Sep 29 01:50:05 2014 +0200

    ARM: meson6: clocksource: Add Meson6 timer support
    
    Meson6 SoCs are equipped with 5 32-bit timers, called TIMER_A, TIMER_B,
    TIMER_C, TIMER_D and TIMER_E.
    
    The driver is providing clocksource support for the 32-bit counter using
    TIMER_E. Clockevents are also supported using TIMER_A.
    
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Carlo Caione <carlo@caione.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>

commit 17497acbdce9506fd6a75115dee4ab80c3cc5ee5
Author: Tejun Heo <tj@kernel.org>
Date:   Wed Sep 24 13:31:50 2014 -0400

    blk-mq, percpu_ref: start q->mq_usage_counter in atomic mode
    
    blk-mq uses percpu_ref for its usage counter which tracks the number
    of in-flight commands and used to synchronously drain the queue on
    freeze.  percpu_ref shutdown takes measureable wallclock time as it
    involves a sched RCU grace period.  This means that draining a blk-mq
    takes measureable wallclock time.  One would think that this shouldn't
    matter as queue shutdown should be a rare event which takes place
    asynchronously w.r.t. userland.
    
    Unfortunately, SCSI probing involves synchronously setting up and then
    tearing down a lot of request_queues back-to-back for non-existent
    LUNs.  This means that SCSI probing may take above ten seconds when
    scsi-mq is used.
    
      [    0.949892] scsi host0: Virtio SCSI HBA
      [    1.007864] scsi 0:0:0:0: Direct-Access     QEMU     QEMU HARDDISK    1.1. PQ: 0 ANSI: 5
      [    1.021299] scsi 0:0:1:0: Direct-Access     QEMU     QEMU HARDDISK    1.1. PQ: 0 ANSI: 5
      [    1.520356] tsc: Refined TSC clocksource calibration: 2491.910 MHz
    
      <stall>
    
      [   16.186549] sd 0:0:0:0: Attached scsi generic sg0 type 0
      [   16.190478] sd 0:0:1:0: Attached scsi generic sg1 type 0
      [   16.194099] osd: LOADED open-osd 0.2.1
      [   16.203202] sd 0:0:0:0: [sda] 31457280 512-byte logical blocks: (16.1 GB/15.0 GiB)
      [   16.208478] sd 0:0:0:0: [sda] Write Protect is off
      [   16.211439] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
      [   16.218771] sd 0:0:1:0: [sdb] 31457280 512-byte logical blocks: (16.1 GB/15.0 GiB)
      [   16.223264] sd 0:0:1:0: [sdb] Write Protect is off
      [   16.225682] sd 0:0:1:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
    
    This is also the reason why request_queues start in bypass mode which
    is ended on blk_register_queue() as shutting down a fully functional
    queue also involves a RCU grace period and the queues for non-existent
    SCSI devices never reach registration.
    
    blk-mq basically needs to do the same thing - start the mq in a
    degraded mode which is faster to shut down and then make it fully
    functional only after the queue reaches registration.  percpu_ref
    recently grew facilities to force atomic operation until explicitly
    switched to percpu mode, which can be used for this purpose.  This
    patch makes blk-mq initialize q->mq_usage_counter in atomic mode and
    switch it to percpu mode only once blk_register_queue() is reached.
    
    Note that this issue was previously worked around by 0a30288da1ae
    ("blk-mq, percpu_ref: implement a kludge for SCSI blk-mq stall during
    probe") for v3.17.  The temp fix was reverted in preparation of adding
    persistent atomic mode to percpu_ref by 9eca80461a45 ("Revert "blk-mq,
    percpu_ref: implement a kludge for SCSI blk-mq stall during probe"").
    This patch and the prerequisite percpu_ref changes will be merged
    during v3.18 devel cycle.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Christoph Hellwig <hch@infradead.org>
    Link: http://lkml.kernel.org/g/20140919113815.GA10791@lst.de
    Fixes: add703fda981 ("blk-mq: use percpu_ref for mq usage count")
    Reviewed-by: Kent Overstreet <kmo@daterainc.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Johannes Weiner <hannes@cmpxchg.org>

commit 4693c723f713a11c9ef3cecdea295e824bf57901
Merge: 2f83c3da277e b052ff30cd45
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Sep 23 21:58:35 2014 -0700

    Merge tag 'at91-drivers2' of git://github.com/at91linux/linux-at91 into next/drivers
    
    Merge " Second drivers series for AT91/3.18" from Nicolas Ferre:
    
    - move of the PIT (basic timer) from mach-at91 to its proper location:
      drivers/clocksource
    - big cleanup of this driver along the way
    
    * tag 'at91-drivers2' of git://github.com/at91linux/linux-at91:
      ARM: at91: PIT: Move the driver to drivers/clocksource
      ARM: at91: Give the PIT irq as an argument of at91sam926x_pit_init
      ARM: at91: Convert the boards to the init_time callback
      ARM: at91: soc: Add init_time callback
      ARM: at91: PIT: (Almost) remove the global variables
      ARM: at91: PIT: use request_irq instead of setup_irq
      ARM: at91: PIT: Use pr_fmt
      ARM: at91: PIT: Use consistent exit path in probe
      ARM: at91: dt: Remove init_time definitions
      ARM: at91: PIT: Rework probe functions
      ARM: at91: PIT: Use of_have_populated_dt instead of CONFIG_OF
      ARM: at91: PIT: Use DIV_ROUND_CLOSEST to compute the cycles
      ARM: at91: generic.h: Add include safe guards
      ARM: at91: PIT: Follow the general coding rules
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 64d8ee59577a2b1de73cc40c2ec661bddf71e8b0
Author: Kyle McMartin <kyle@redhat.com>
Date:   Tue Sep 16 15:03:30 2014 -0400

    drm/radeon: delete unused PTE_* defines
    
    They don't appear to be used anywhere... elsewhere uses R*_PTE_*.
    
    master@linux:U:.% git grep PTE_ -- drivers/gpu/drm/radeon | grep -v _PTE_
    master@linux:U:.%       (kyle@redacted:~/linux)
    
    ./arch/arm64/include/asm/pgtable.h:27:0: note: this is the location of the previous definition
     #define PTE_VALID  (_AT(pteval_t, 1) << 0)
     ^
    In file included from drivers/gpu/drm/radeon/r600_cs.c:31:0:
    drivers/gpu/drm/radeon/r600d.h:48:0: warning: "PTE_VALID" redefined [enabled by default]
     #define PTE_VALID    (1 << 0)
     ^
    In file included from ./arch/arm64/include/asm/io.h:29:0,
                     from include/linux/clocksource.h:19,
                     from include/clocksource/arm_arch_timer.h:19,
                     from ./arch/arm64/include/asm/arch_timer.h:27,
                     from ./arch/arm64/include/asm/timex.h:19,
                     from include/linux/timex.h:65,
    <snip>
                     from include/drm/drmP.h:51,
                     from drivers/gpu/drm/radeon/r600_cs.c:29:
    ./arch/arm64/include/asm/pgtable.h:27:0: note: this is the location of the previous definition
     #define PTE_VALID  (_AT(pteval_t, 1) << 0)
     ^
    
    Signed-off-by: Kyle McMartin <kyle@redhat.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit b052ff30cd450c91a32e8e928979bca021462996
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Sep 2 18:12:35 2014 +0200

    ARM: at91: PIT: Move the driver to drivers/clocksource
    
    Now that we don't depend on anyting in the mach-at91 directory, we can just
    move the driver to where it belongs.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Acked-by: Boris BREZILLON <boris.brezillon@free-electrons.com>
    Acked-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    
    Conflicts:
            arch/arm/mach-at91/Kconfig
            arch/arm/mach-at91/Makefile

commit c40c4028f048a077a8950fd95e5d8901f773a63f
Merge: 32dc5ca0c10c d07a1ecdfb96
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Sep 9 17:03:17 2014 +0200

    Merge tag 'at91-cleanup2' of git://github.com/at91linux/linux-at91 into next/cleanup
    
    Pull "Second batch of AT91 cleanup for 3.18" from Nicolas Ferre:
    - Timer Counter (TC) fixup and cleanup:
      - fix segmentation fault when kexec-ing a kernel by masking
        TC interrupts at shutdown and probe time
      - use modern driver model: devm_*, probe function, sanitize IRQ request
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    
    * tag 'at91-cleanup2' of git://github.com/at91linux/linux-at91:
      clocksource: tcb_clksrc: sanitize IRQ request
      ARM: at91/tclib: mask interruptions at shutdown and probe
      ARM: at91/tclib: move initialization from alloc to probe
      ARM: at91/tclib: prefer using of devm_* functions

commit 3d3c6a5f3de2c76b2d6bf96be56dd6fcc2bb2a30
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sat Jul 26 20:49:39 2014 +0200

    ARM: pxa: fix section mismatch warning for pxa_timer_nodt_init
    
    commit a38b1f60b5245a3 ("ARM: pxa: Add non device-tree timer link to
    clocksource") introduced a harmless section mismatch warning for
    all pxa platforms, by introducing a new pxa_timer_init() function
    that is not marked __init but that calls pxa_timer_nodt_init(),
    which is.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Robert Jarzmik <robert.jarzmik@free.fr>

commit d07a1ecdfb96b26dd665b54fee22fc7417b1cb08
Author: Gaël PORTAY <gael.portay@gmail.com>
Date:   Sat Sep 6 19:52:37 2014 +0200

    clocksource: tcb_clksrc: sanitize IRQ request
    
    The clock is not unprepared in case of the request IRQ fails.
    
    Also update to request_irq.
    
    Signed-off-by: Gaël PORTAY <gael.portay@gmail.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>

commit fb0eee2f141976b5d7f31e477a71556d312f7dc3
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Wed Aug 27 13:36:51 2014 +0900

    clocksource: sh_tmu: Document r8a7779 binding
    
    In general Renesas hardware is not documented to the extent
    where the relationship between IP blocks on different SoCs can be assumed
    although they may appear to operate the same way. Furthermore the
    documentation typically does not specify a version for individual
    IP blocks. For these reasons a convention of using the SoC name in place
    of a version and providing SoC-specific compat strings has been adopted.
    
    Although not universally liked this convention is used in the bindings
    for a number of drivers for Renesas hardware. The purpose of this patch is
    to update the Renesas R-Car Timer Unit (TMU) driver to follow this
    convention.
    
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    
    ---
    * I plan to follow up with a patch patch to use the new binding in the
      dtsi files for the r8a7779 SoC.
    commit 471269b790aec03385dc4fb127ed7094ff83c16d
    
    v2
    * Suggestions by Mark Rutland and Sergei Shtylyov
      - Compatible strings should be "one or more" not "one" of those listed
      - Describe the generic binding as covering any MTU2 device
      - Re-order compat strings from most to least specific
    
    v3
    * Suggested by Laurent Pinchart
      - Reword in keeping with a similar though more extensive patch for CMT

commit ffd24a543afe4c693d5c611ecfa01cc48e97f97d
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Wed Aug 27 13:36:51 2014 +0900

    clocksource: sh_mtu2: Document r7s72100 binding
    
    In general Renesas hardware is not documented to the extent
    where the relationship between IP blocks on different SoCs can be assumed
    although they may appear to operate the same way. Furthermore the
    documentation typically does not specify a version for individual
    IP blocks. For these reasons a convention of using the SoC name in place
    of a version and providing SoC-specific compat strings has been adopted.
    
    Although not universally liked this convention is used in the bindings
    for a number of drivers for Renesas hardware. The purpose of this patch is
    to update the Renesas R-Car Multi-Function Timer Pulse Unit 2 (MTU2) driver
    to follow this convention.
    
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    
    ---
    * I plan to follow up with a patch patch to use the new binding in the
      dtsi files for the r7s72100 SoC.
    
    v2
    * Suggestions by Mark Rutland and Sergei Shtylyov
      - Compatible strings should be "one or more" not "one" of those listed
      - Describe the generic binding as covering any MTU2 device
      - Re-order compat strings from most to least specific
    
    v3
    * Suggested by Laurent Pinchart
      - Reword compat documentation for consistency with a more extensive
        CMT change

commit 01fe3aaa3abd3379788173e0017a6299b5b438db
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Wed Aug 27 13:36:51 2014 +0900

    clocksource: sh_cmt: Document SoC specific bindings
    
    In general Renesas hardware is not documented to the extent
    where the relationship between IP blocks on different SoCs can be assumed
    although they may appear to operate the same way. Furthermore the
    documentation typically does not specify a version for individual
    IP blocks. For these reasons a convention of using the SoC name in place
    of a version and providing SoC-specific compat strings has been adopted.
    
    Although not universally liked this convention is used in the bindings for
    a number of drivers for Renesas hardware. The purpose of this patch is to
    update the Renesas R-Car Compare Match Timer (CMT) driver to follow this
    convention.
    
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    
    ---
    * I plan to follow up with patches to use these new bindings in the
      dtsi files for the affected SoCs.
    
    v2
    * Reorder compat entries so more-specific entries and their fallbacks
      are grouped with the fallback entry coming last.
    * Explicitly document fallback
    
    v3
    * Avoid circular dependency in documentation of fallback
      behaviour of renesas,cmt-48-gen2
    * Use consistent case for SoC names in compat string descriptions

commit fff74a935ec81d2353423917a2638aa1570d4634
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Tue Aug 19 16:31:13 2014 +0400

    ARM: clps711x: Switch CLPS711X subarch to use clk and clocksource driver
    
    This patch removes old support for clk and clocksource support and
    switches platform to use new drivers.
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 77422a8fee1b96d2420a8a254f784bab8644ac41
Author: Christoph Lameter <cl@linux.com>
Date:   Sun Aug 17 12:30:55 2014 -0500

    clocksource: Replace __this_cpu_ptr with raw_cpu_ptr
    
    One newly introduced __this_cpu_ptr should be raw_cpu_ptr.
    
    Signed-off-by: Christoph Lameter <cl@linux.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>

commit 27d051677977da11dc50caeb210204b587c94eb5
Author: Christoph Lameter <cl@linux.com>
Date:   Sun Aug 17 12:30:32 2014 -0500

    drivers/clocksource: Replace __get_cpu_var used for address calculation
    
    Replace __get_cpu_var used for address calculation with this_cpu_ptr.
    
    Acked-by: James Hogan <james.hogan@imgtec.com>
    Signed-off-by: Christoph Lameter <cl@linux.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>

commit e7fda6c4c3c1a7d6996dd75fd84670fa0b5d448f
Merge: 08d69a257144 953dec21aed4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Aug 5 17:46:42 2014 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer and time updates from Thomas Gleixner:
     "A rather large update of timers, timekeeping & co
    
       - Core timekeeping code is year-2038 safe now for 32bit machines.
         Now we just need to fix all in kernel users and the gazillion of
         user space interfaces which rely on timespec/timeval :)
    
       - Better cache layout for the timekeeping internal data structures.
    
       - Proper nanosecond based interfaces for in kernel users.
    
       - Tree wide cleanup of code which wants nanoseconds but does hoops
         and loops to convert back and forth from timespecs.  Some of it
         definitely belongs into the ugly code museum.
    
       - Consolidation of the timekeeping interface zoo.
    
       - A fast NMI safe accessor to clock monotonic for tracing.  This is a
         long standing request to support correlated user/kernel space
         traces.  With proper NTP frequency correction it's also suitable
         for correlation of traces accross separate machines.
    
       - Checkpoint/restart support for timerfd.
    
       - A few NOHZ[_FULL] improvements in the [hr]timer code.
    
       - Code move from kernel to kernel/time of all time* related code.
    
       - New clocksource/event drivers from the ARM universe.  I'm really
         impressed that despite an architected timer in the newer chips SoC
         manufacturers insist on inventing new and differently broken SoC
         specific timers.
    
    [ Ed. "Impressed"? I don't think that word means what you think it means ]
    
       - Another round of code move from arch to drivers.  Looks like most
         of the legacy mess in ARM regarding timers is sorted out except for
         a few obnoxious strongholds.
    
       - The usual updates and fixlets all over the place"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (114 commits)
      timekeeping: Fixup typo in update_vsyscall_old definition
      clocksource: document some basic timekeeping concepts
      timekeeping: Use cached ntp_tick_length when accumulating error
      timekeeping: Rework frequency adjustments to work better w/ nohz
      timekeeping: Minor fixup for timespec64->timespec assignment
      ftrace: Provide trace clocks monotonic
      timekeeping: Provide fast and NMI safe access to CLOCK_MONOTONIC
      seqcount: Add raw_write_seqcount_latch()
      seqcount: Provide raw_read_seqcount()
      timekeeping: Use tk_read_base as argument for timekeeping_get_ns()
      timekeeping: Create struct tk_read_base and use it in struct timekeeper
      timekeeping: Restructure the timekeeper some more
      clocksource: Get rid of cycle_last
      clocksource: Move cycle_last validation to core code
      clocksource: Make delta calculation a function
      wireless: ath9k: Get rid of timespec conversions
      drm: vmwgfx: Use nsec based interfaces
      drm: i915: Use nsec based interfaces
      timekeeping: Provide ktime_get_raw()
      hangcheck-timer: Use ktime_get_ns()
      ...

commit 953dec21aed4038464fec02f96a2f1b8701a5bce
Author: John Stultz <john.stultz@linaro.org>
Date:   Fri Jul 25 21:37:19 2014 -0700

    timekeeping: Fixup typo in update_vsyscall_old definition
    
    In commit 4a0e637738f0 ("clocksource: Get rid of cycle_last"),
    currently in the -tip tree, there was a small typo where cycles_t
    was used intstead of cycle_t. This broke ppc64 builds.
    
    Fix this by using the proper cycle_t type for this usage, in
    both the definition and the ia64 implementation.
    
    Now, having both cycle_t and cycles_t types seems like a very
    bad idea just asking for these sorts of issues. But that
    will be a cleanup for another day.
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/1406349439-11785-1-git-send-email-john.stultz@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 04eca28cde52cdf9eb91e127cc358ad79a8ec53b
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Mon Jul 21 18:38:48 2014 +0300

    regulator: Add helpers for low-level register access
    
    Add helper functions that allow regulator consumers to obtain low-level
    details about the regulator hardware, like the voltage selector register
    address and such. These details can be useful when configuring hardware
    or firmware that want to do low-level access to regulators, with no
    involvement from the kernel.
    
    The use-case for Tegra is a voltage-controlled oscillator clocksource
    which has control logic to change the supply voltage via I2C to achieve
    a desired output clock rate.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit 7806f60e1d205db46eca6ad24429b3f86eda2588
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Jul 10 09:52:27 2014 +0200

    clocksource: document some basic timekeeping concepts
    
    This adds some documentation about clock sources, clock events,
    the weak sched_clock() function and delay timers that answers
    questions that repeatedly arise on the mailing lists.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Nicolas Pitre <nico@fluxnic.net>
    Cc: Colin Cross <ccross@google.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Nicolas Pitre <nico@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 6d3aadf3e180e09dbefab16478c6876b584ce16e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jul 16 21:05:15 2014 +0000

    timekeeping: Restructure the timekeeper some more
    
    Access to time requires to touch two cachelines at minimum
    
       1) The timekeeper data structure
    
       2) The clocksource data structure
    
    The access to the clocksource data structure can be avoided as almost
    all clocksource implementations ignore the argument to the read
    callback, which is a pointer to the clocksource.
    
    But the core needs to touch it to access the members @read and @mask.
    
    So we are better off by copying the @read function pointer and the
    @mask from the clocksource to the core data structure itself.
    
    For the most used ktime_get() access all required data including the
    @read and @mask copies fits together with the sequence counter into a
    single 64 byte cacheline.
    
    For the other time access functions we touch in the current code three
    cache lines in the worst case. But with the clocksource data copies we
    can reduce that to two adjacent cachelines, which is more efficient
    than disjunct cache lines.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 4a0e637738f06673725792d74eed67f8779b62c7
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jul 16 21:05:13 2014 +0000

    clocksource: Get rid of cycle_last
    
    cycle_last was added to the clocksource to support the TSC
    validation. We moved that to the core code, so we can get rid of the
    extra copy.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 09ec54429c6d10f87d1f084de53ae2c1c3a81108
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jul 16 21:05:12 2014 +0000

    clocksource: Move cycle_last validation to core code
    
    The only user of the cycle_last validation is the x86 TSC. In order to
    provide NMI safe accessor functions for clock monotonic and
    monotonic_raw we need to do that in the core.
    
    We can't do the TSC specific
    
        if (now < cycle_last)
                now = cycle_last;
    
    for the other wrapping around clocksources, but TSC has
    CLOCKSOURCE_MASK(64) which actually does not mask out anything so if
    now is less than cycle_last the subtraction will give a negative
    result. So we can check for that in clocksource_delta() and return 0
    for that case.
    
    Implement and enable it for x86
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 3a97837784acbf9fed699fc04d1799b0eb742fdf
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jul 16 21:05:10 2014 +0000

    clocksource: Make delta calculation a function
    
    We want to move the TSC sanity check into core code to make NMI safe
    accessors to clock monotonic[_raw] possible. For this we need to
    sanity check the delta calculation. Create a helper function and
    convert all sites to use it.
    
    [ Build fix from jstultz ]
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 1af447bd8cbfb808a320885d214555fb2d32e6e6
Merge: 5442e9fbd7c2 3252a646aa2c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jul 23 13:22:59 2014 +0200

    Merge branch 'clockevents/3.17' of git://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clockevents from Danel Lezcano:
     * New timer driver for the Cirrus Logic CLPS711X SoC
     * New driver for the Mediatek SoC which includes:
     * A new function for of, acked by Rob Herring
     * Move the PXA driver to drivers/clocksource, add DT support
     * Optimization of the exynos_mct driver
     * DT support for the renesas timers family.
     * Some Kconfig and driver fixlets

commit 3252a646aa2cf706b2a26433a8bd9cb2e5dce410
Author: Doug Anderson <dianders@chromium.org>
Date:   Sat Jul 5 06:43:26 2014 +0900

    clocksource: exynos_mct: Only use 32-bits where possible
    
    The MCT has a nice 64-bit counter.  That means that we _can_ register
    as a 64-bit clocksource and sched_clock.  ...but that doesn't mean we
    should.
    
    The 64-bit counter is read by reading two 32-bit registers.  That
    means reading needs to be something like:
    - Read upper half
    - Read lower half
    - Read upper half and confirm that it hasn't changed.
    
    That wouldn't be terrible, but:
    - THe MCT isn't very fast to access (hundreds of nanoseconds).
    - The clocksource is queried _all the time_.
    
    In total system profiles of real workloads on ChromeOS, we've seen
    exynos_frc_read() taking 2% or more of CPU time even after optimizing
    the 3 reads above to 2 (see below).
    
    The MCT is clocked at ~24MHz on all known systems.  That means that
    the 32-bit half of the counter rolls over every ~178 seconds.  This
    inspired an optimization in ChromeOS to cache the upper half between
    calls, moving 3 reads to 2.  ...but we can do better!  Having a 32-bit
    timer that flips every 178 seconds is more than sufficient for Linux.
    Let's just use the lower half of the MCT.
    
    Times on 5420 to do 1000000 gettimeofday() calls from userspace:
    * Original code:                      1323852 us
    * ChromeOS cache upper half:          1173084 us
    * ChromeOS + ldmia to optimize:       1045674 us
    * Use lower 32-bit only (this code):  1014429 us
    
    As you can see, the time used doesn't increase linearly with the
    number of reads and we can make 64-bit work almost as fast as 32-bit
    with a bit of assembly code.  But since there's no real gain for
    64-bit, let's go with the simplest and fastest implementation.
    
    Note: with this change roughly half the time for gettimeofday() is
    spent in exynos_frc_read().  The rest is timer / system call overhead.
    
    Also note: this patch disables the use of the MCT on ARM64 systems
    until we've sorted out how to make "cycles_t" always 32-bit.  Really
    ARM64 systems should be using arch timers anyway.
    
    Signed-off-by: Doug Anderson <dianders@chromium.org>
    Acked-by Vincent Guittot <vincent.guittot@linaro.org>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fdb06f66d53e3c9ba7eeab3c0629c450aee76937
Author: Doug Anderson <dianders@chromium.org>
Date:   Sat Jul 5 06:43:20 2014 +0900

    clocksource: exynos_mct: Use readl_relaxed/writel_relaxed
    
    Using the __raw functions is discouraged.  Update the file to
    consistently use the proper functions.
    
    Signed-off-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a38b1f60b5245a3f610baac2019c0ecd8abd8752
Author: Robert Jarzmik <robert.jarzmik@free.fr>
Date:   Mon Jul 14 18:52:04 2014 +0200

    ARM: pxa: Add non device-tree timer link to clocksource
    
    As clocksource pxa_timer was moved to clocksource framework, the
    pxa_timer initialization needs to be a bit amended, to pass the
    necessary informations to clocksource, ie :
     - the timer interrupt (mach specific)
     - the timer registers base (ditto)
     - the timer clockrate
    
    Signed-off-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ab5354c48d58a6a72e70d37d2032206eba3b1dbb
Author: Robert Jarzmik <robert.jarzmik@free.fr>
Date:   Mon Jul 14 18:52:02 2014 +0200

    clocksource: pxa: Add device-tree support for PXA timer
    
    Add device-tree support to PXA platforms.
    The driver still needs to maintain backward non device-tree
    compatibility as well, which implies :
     - a non device-tree init function
     - a static registers base address in the driver
    
    Signed-off-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c5421d7aa40965b9527999e65a78f71aec48f19d
Author: Robert Jarzmik <robert.jarzmik@free.fr>
Date:   Mon Jul 14 18:52:01 2014 +0200

    clocksource: pxa: Move PXA timer to clocksource framework
    
    Move time.c from arch/arm/mach-pxa/time.c to
    drivers/clocksource/pxa_timer.c.
    
    Signed-off-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fd944da37fab391cfd80d649b511d777123ee6f9
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Sun Jul 13 08:45:36 2014 +0400

    clocksource: clps711x: Add DT bindings documentation
    
    This patch adds DT binding documentation for the Cirrus Logic
    CLPS711X-based CPUs clocksource subsystem.
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f0b7fabec3273c85fa2c4714762177d04f64c08e
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Sun Jul 13 08:45:13 2014 +0400

    clocksource: clps711x: Add CLPS711X clocksource driver
    
    This adds the clocksource driver for Cirrus Logic CLPS711X series SoCs.
    Designed primarily for migration CLPS711X subarch for multiplatform & DT,
    for this as the "OF" and "non-OF" calls implemented.
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 38941522ecbd2198694b742343a67ea128b44913
Author: Zhiwu Song <Zhiwu.Song@csr.com>
Date:   Thu Jul 3 20:52:51 2014 +0800

    clocksource: sirf: Fix incorrect clock enable counter for timer
    
    In the clocksource driver, we didn't explicitly enable the clock. it makes the
    clk reference counter wrong. We didn't encounter any hang issue because the
    tick's clock input has been open and is shared by some other hardware
    components, but if we don't enable those components in kernel, in the stage of
    disabling unused clk in kernel boot, Linux tick hangs.
    
    This patch fixes it. it does an explicit prepare and enable to the clock input,
    and increases the usage counter of the clk.
    
    Signed-off-by: Zhiwu Song <Zhiwu.Song@csr.com>
    Signed-off-by: Barry Song <Baohua.Song@csr.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 40c96312dc3534d97c64d7d69acf1ea14ceff404
Author: Chen Gang <gang.chen.5i5j@gmail.com>
Date:   Tue Jul 8 20:39:40 2014 +0800

    clocksource: Kconfig: Let EM_TIMER_STI depend on HAS_IOMEM
    
    In 'em_sti.c', it will call devm_ioremap_resource() which need
    HAS_IOMEM. So need let EM_TIMER_STI depend on HAS_IOMEM, too.
    
    The related error (with allmodconfig under score):
    
      LD      init/built-in.o
    em_sti.c:(.text.em_sti_probe+0x84): undefined reference to `devm_ioremap_resource'
    make: *** [vmlinux] Error 1
    
    Signed-off-by: Chen Gang <gang.chen.5i5j@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ecb3530dd59ddd5158bcc507d634e698130fd937
Author: Matthias Brugger <matthias.bgg@gmail.com>
Date:   Fri Jul 18 11:36:43 2014 +0200

    clocksource: Add support for the Mediatek SoCs
    
    This patch adds a clock source and clock event for the timer found
    on the Mediatek SoCs.
    
    The Mediatek General Purpose Timer block provides five 32 bit timers and
    one 64 bit timer.
    
    Two 32 bit timers are used by this driver:
    TIMER1: clock events supporting periodic and oneshot events
    TIMER2: clock source configured as a free running counter
    
    The General Purpose Timer block can be run with two clocks. A 13 MHz system
    clock and the RTC clock running at 32 KHz. This implementation uses the system
    clock with no clock source divider.
    
    The interrupts are shared between the different timers and have to be read back
    from a register. We just enable one interrupt for the clock event. The clock
    event timer is used by all cores.
    
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7e1391876c8f95df9241deb78fa98e799e7bb05e
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Fri Jul 18 11:36:36 2014 +0200

    clocksource: sh_mtu2: Tidy up Kconfig typo for MTU2
    
    It should be "MTU2" instead of "TMU2"
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Acked-by: Wolfram Sang <wsa@sang-engineering.com>
    Acked-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fd4959d8779a8e7099c6ecf4f7c854dbf34890e9
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Sun Jul 13 09:34:00 2014 +0400

    ARM: i.MX: Use CLOCKSOURCE_OF_DECLARE() for DT targets
    
    This patch uses clocksource_of_init() call for DT targets.
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>

commit 2f3870e9e8600cd34030e622fea4bc236f855c24
Merge: 5fa77b54eff1 cacadb4ff969
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jul 13 12:10:18 2014 -0700

    Merge tag 'fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC fixes from Olof Johansson:
     "This week's arm-soc fixes:
    
       - Another set of OMAP fixes
         * Clock fixes
         * Restart handling
         * PHY regulators
         * SATA hwmod data for DRA7
         + Some trivial fixes and removal of a bit of dead code
       - Exynos fixes
         * A bunch of clock fixes
         * Some SMP fixes
         * Exynos multi-core timer: register as clocksource and fix ftrace.
         + a few other minor fixes
    
      There's also a couple more patches, and at91 fix for USB caused by
      common clock conversion, and more MAINTAINERS entries for shmobile.
    
      We're definitely switching to only regression fixes from here on out,
      we've been a little less strict than usual up until now"
    
    * tag 'fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (26 commits)
      ARM: at91: at91sam9x5: add clocks for usb device
      ARM: EXYNOS: Register cpuidle device only on exynos4210 and 5250
      ARM: dts: Add clock property for mfc_pd in exynos5420
      clk: exynos5420: Add IDs for clocks used in PD mfc
      ARM: EXYNOS: Add support for clock handling in power domain
      ARM: OMAP2+: Remove non working OMAP HDMI audio initialization
      ARM: imx: fix shared gate clock
      ARM: dts: Update the parent for Audss clocks in Exynos5420
      ARM: EXYNOS: Update secondary boot addr for secure mode
      ARM: dts: Fix TI CPSW Phy mode selection on IGEP COM AQUILA.
      ARM: dts: am335x-evmsk: Enable the McASP FIFO for audio
      ARM: dts: am335x-evm: Enable the McASP FIFO for audio
      ARM: OMAP2+: Make GPMC skip disabled devices
      ARM: OMAP2+: create dsp device only on OMAP3 SoCs
      ARM: dts: dra7-evm: Make VDDA_1V8_PHY supply always on
      ARM: DRA7/AM43XX: fix header definition for omap44xx_restart
      ARM: OMAP2+: clock/dpll: fix _dpll_test_fint arithmetics overflow
      ARM: DRA7: hwmod: Add SYSCONFIG for usb_otg_ss
      ARM: DRA7: hwmod: Fixup SATA hwmod
      ARM: OMAP3: PRM/CM: Add back macros used by TI DSP/Bridge driver
      ...

commit 2c323893a2dadae1aae154b1e4a6f70563831c2d
Author: Xiaoming Gao <newtongao@tencent.com>
Date:   Thu Jun 19 19:14:57 2014 +0800

    kvm: fix wrong address when writing Hyper-V tsc page
    
    commit e1fa108d24697b78348fd4e5a531029a50d0d36d upstream.
    
    When kvm_write_guest writes the tsc_ref structure to the guest, or it will lead
    the low HV_X64_MSR_TSC_REFERENCE_ADDRESS_SHIFT bits of the TSC page address
    must be cleared, or the guest can see a non-zero sequence number.
    
    Otherwise Windows guests would not be able to get a correct clocksource
    (QueryPerformanceCounter will always return 0) which causes serious chaos.
    
    Signed-off-by: Xiaoming Gao <newtongao@tencnet.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c8c5a45d44452212a26af9a80f580707f1f77d1
Author: Xiaoming Gao <newtongao@tencent.com>
Date:   Thu Jun 19 19:14:57 2014 +0800

    kvm: fix wrong address when writing Hyper-V tsc page
    
    commit e1fa108d24697b78348fd4e5a531029a50d0d36d upstream.
    
    When kvm_write_guest writes the tsc_ref structure to the guest, or it will lead
    the low HV_X64_MSR_TSC_REFERENCE_ADDRESS_SHIFT bits of the TSC page address
    must be cleared, or the guest can see a non-zero sequence number.
    
    Otherwise Windows guests would not be able to get a correct clocksource
    (QueryPerformanceCounter will always return 0) which causes serious chaos.
    
    Signed-off-by: Xiaoming Gao <newtongao@tencnet.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 069c70cb07105521a095655e707ce9c20bcc6154
Merge: 8b5ca6495358 35e75645f16c
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Jul 7 21:10:17 2014 -0700

    Merge tag 'samsung-fixes-2' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung into fixes
    
    Merge "Samsung fixes-2 for v3.16" from Kukjin Kim:
    
    - fix the check for SMP configuration with using CONFIG_SMP
      not just SMP
    - fix the number of pwm-cells for exynos4 pwm
    - fix ftrace for exynos_mct
    - register exynos_mct for stable udely
    - fix secondary boot addr for secure mode for exynos SoCs
    
    * tag 'samsung-fixes-2' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung:
      ARM: EXYNOS: Update secondary boot addr for secure mode
      clocksource: exynos_mct: Register the timer for stable udelay
      clocksource: exynos_mct: Fix ftrace
      ARM: dts: fix pwm-cells in pwm node for exynos4
      ARM: EXYNOS: Fix the check for non-smp configuration
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit b040614c5bf6af6657574299fdf0572d47b53366
Merge: 21760aedabc7 0ff36b4f479e
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Jul 6 17:47:28 2014 -0700

    Merge tag 'tegra-for-3.17-delay-timer' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux into next/soc
    
    Merge "ARM: tegra: use us counter as delay timer" from Stephen Warren:
    
    Tegra has a micro-second counter whose rate doesn't vary with cpufreq
    changes. Register it so it can be used as the delay timer, so delays
    aren't influenced by cpufreq.
    
    * tag 'tegra-for-3.17-delay-timer' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux:
      clocksource: tegra: Use us counter as delay timer
      ARM: choose highest resolution delay timer
      kernel: add calibration_delay_done()
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit bc6aa56680b07984dc1443ef1a5a1a0fac0e20be
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Sun Jun 22 16:06:22 2014 -0400

    MAINTAINERS: Add few more Keystone drivers
    
    Update MAINTAINERS file for recently added reset controller, AEMIF
    and clocksource driver for Keystone SOCs.
    
    The EMIF memory controller driver is also added along with AEMIF.
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Olof Johansson <olof@lixom.net>
    Cc: Kevin Hilman <khilman@linaro.org>
    Cc: Mike Turquette <mturquette@linaro.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 8bf13a4346996b5a53d5f0c64b0914693c818fc2
Author: Amit Daniel Kachhap <amit.daniel@samsung.com>
Date:   Sat Jul 5 06:40:23 2014 +0900

    clocksource: exynos_mct: Register the timer for stable udelay
    
    This patch registers the exynos mct clocksource as the current timer
    as it has constant clock rate. This will generate correct udelay for
    the exynos platform and avoid using unnecessary calibrated
    jiffies. This change has been tested on exynos5420 based board and
    udelay is very close to expected.
    
    Without this patch udelay() on exynos5400 / exynos5800 is wildly
    inaccurate due to big.LITTLE not adjusting loops_per_jiffy correctly.
    Also without this patch udelay() on exynos5250 can be innacruate
    during transitions between frequencies < 800 MHz (you'll go 200 MHz ->
    800 MHz -> 300 MHz and will run at 800 MHz for a time with the wrong
    loops_per_jiffy).
    
    [dianders: reworked and created version 3]
    
    Signed-off-by: Amit Daniel Kachhap <amit.daniel@samsung.com>
    Signed-off-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 89e6a13b88c8bf7ce1011a8a69113f22889f4585
Author: Doug Anderson <dianders@chromium.org>
Date:   Sat Jul 5 06:38:55 2014 +0900

    clocksource: exynos_mct: Fix ftrace
    
    In (93bfb76 clocksource: exynos_mct: register sched_clock callback) we
    supported using the MCT as a scheduler clock.  We properly marked
    exynos4_read_sched_clock() as notrace.  However, we then went and
    called another function that _wasn't_ notrace.  That means if you do:
    
      cd /sys/kernel/debug/tracing/
      echo function_graph > current_tracer
    
    You'll get a crash.
    
    Fix this (but still let other readers of the MCT be trace-enabled) by
    adding an extra function.  It's important to keep other users of MCT
    traceable because the MCT is actually quite slow to access and we want
    exynos4_frc_read() to show up in ftrace profiles if it's the
    bottleneck.
    
    Signed-off-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit cca8d0596c4c7acb371ea1bc5eee9b404b30516a
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 18:28:26 2014 +0100

    clocksource: sh_mtu2: Add DT support
    
    Document DT bindings and parse them in the MTU2 driver.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 3e29b5543f9250bb358169cff0594f58284ece74
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri Apr 11 16:23:40 2014 +0200

    clocksource: sh_tmu: Add DT support
    
    Document DT bindings and parse them in the TMU driver.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Simon Horman <horms+renesas@verge.net.au>

commit 1768aa2f4c1248051013282c6cf63b368016cb53
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Wed Feb 12 17:12:40 2014 +0100

    clocksource: sh_cmt: Add DT support
    
    Document DT bindings and parse them in the CMT driver.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Simon Horman <horms+renesas@verge.net.au>

commit 628627bfd943c077c65489acd8b23c7bb14eb0e2
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 18:50:53 2014 +0100

    clocksource: shmobile: Remove unused sh_timer_config members
    
    The name, channel_offset, timer_bit, clockevent_rating and
    clocksource_rating members are unused. Remove them.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Simon Horman <horms+renesas@verge.net.au>

commit 8b2463d8cae2dda0c98ab5a15f25a0350a0e998d
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 15:25:56 2014 +0100

    clocksource: sh_mtu2: Replace global spinlock with a per-device spinlock
    
    The global spinlock is used to protect the shared start/stop register.
    Now that all MTU2 channels are handled by a single device instance, use
    a per-device spinlock.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 1a5da0e43be0c07462e445549dbdd4a1731a3e11
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 18:13:57 2014 +0100

    clocksource: sh_mtu2: Drop support for legacy platform data
    
    Now that all platforms have switched to the new-style platform data,
    drop support for the legacy version.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 2b027f1f0f887097b4140a71b5c1e878da1e2fd9
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Feb 17 16:49:05 2014 +0100

    clocksource: sh_tmu: Replace global spinlock with a per-device spinlock
    
    The global spinlock is used to protect the shared start/stop register.
    Now that all TMU channels are handled by a single device instance, use a
    per-device spinlock.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Simon Horman <horms+renesas@verge.net.au>

commit 681b9e852cf2d48ebd63954028814c7cece71945
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Jan 28 15:52:46 2014 +0100

    clocksource: sh_tmu: Drop support for legacy platform data
    
    Now that all platforms have switched to the new-style platform data,
    drop support for the legacy version.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Simon Horman <horms+renesas@verge.net.au>

commit de599c8843ebbdfc29a119c94af481b1de76700e
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Feb 17 16:49:05 2014 +0100

    clocksource: sh_cmt: Replace global spinlock with a per-device spinlock
    
    The global spinlock is used to protect the shared start/stop register.
    Now that all CMT channels are handled by a single device instance, use a
    per-device spinlock.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Simon Horman <horms+renesas@verge.net.au>

commit 31e912f598371bcfdffc990289029e1110f8b3f9
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Jan 28 15:52:46 2014 +0100

    clocksource: sh_cmt: Drop support for legacy platform data
    
    Now that all platforms have switched to the new-style platform data,
    drop support for the legacy version.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Simon Horman <horms+renesas@verge.net.au>

commit 9cbf3d2b7ea16e04f026cafbec2733cc1291999d
Merge: 6d43925f5a21 7cbcb9d46f91
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jun 22 20:46:52 2014 +0200

    Merge tag 'samsung-fixes-1' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung into fixes
    
    Merge Samsung fixes for 3.16 from Kukjin Kim:
    
    - use WFI macro in platform_do_lowpower because exynos cpuhotplug
      includes a hardcoded WFI instruction and it causes compile error
      in Thumb-2 mode.
    - fix GIC reg sizes for exynos4 SoCs
    - remove reset timer counter value during boot and resume for mct
      to fix a big jump in printk timestamps
    - fix pm code to check cortex-A9 for another exynos SoCs
    - don't rely on firmware's secondary_cpu_start for mcpm
    
    * tag 'samsung-fixes-1' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung:
      ARM: EXYNOS: Don't rely on firmware's secondary_cpu_start for mcpm
      ARM: EXYNOS: fix pm code to check for cortex A9 rather than the SoC
      clocksource: exynos_mct: Don't reset the counter during boot and resume
      ARM: dts: fix reg sizes of GIC for exynos4
      ARM: EXYNOS: Use wfi macro in platform_do_lowpower
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 58394271c610e9c65dd0165a1c1f6dec75dc5f3e
Author: Jean Delvare <jdelvare@suse.de>
Date:   Mon Jun 16 11:48:45 2014 +0200

    clocksource: Add a Kconfig menu
    
    Move the clocksource Kconfig entries into their own menu, so that they
    don't pollute the main device driver menu.
    
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/20140616114845.343e9960@endymion.delvare
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit e1fa108d24697b78348fd4e5a531029a50d0d36d
Author: Xiaoming Gao <newtongao@tencent.com>
Date:   Thu Jun 19 19:14:57 2014 +0800

    kvm: fix wrong address when writing Hyper-V tsc page
    
    When kvm_write_guest writes the tsc_ref structure to the guest, or it will lead
    the low HV_X64_MSR_TSC_REFERENCE_ADDRESS_SHIFT bits of the TSC page address
    must be cleared, or the guest can see a non-zero sequence number.
    
    Otherwise Windows guests would not be able to get a correct clocksource
    (QueryPerformanceCounter will always return 0) which causes serious chaos.
    
    Signed-off-by: Xiaoming Gao <newtongao@tencnet.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit 0ff36b4f479ec8e0cd9b7a919ab877f2d553cd30
Author: Peter De Schrijver <pdeschrijver@nvidia.com>
Date:   Thu Jun 12 18:58:29 2014 +0300

    clocksource: tegra: Use us counter as delay timer
    
    All Tegra SoCs have a freerunning microsecond counter which can be used as a
    delay timer.
    
    Signed-off-by: Peter De Schrijver <pdeschrijver@nvidia.com>
    Acked-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

commit 1d80415db64b54141ef02ae58bd2f273d0ac3c38
Author: Chirantan Ekbote <chirantan@chromium.org>
Date:   Thu Jun 12 00:18:48 2014 +0900

    clocksource: exynos_mct: Don't reset the counter during boot and resume
    
    Unfortunately on some exynos systems, resetting the mct counter also
    resets the architected timer counter.  This can cause problems if the
    architected timer driver has already been initialized because the kernel
    will think that the counter has wrapped around, causing a big jump in
    printk timestamps and delaying any scheduled clock events until the
    counter reaches the value it had before it was reset.
    
    The kernel code makes no assumptions about the initial value of the mct
    counter so there is no reason from a software perspective to clear the
    counter before starting it.  This also fixes the problems described in
    the previous paragraph.
    
    Cc: Olof Johansson <olof@lixom.net>
    Cc: Tomasz Figa <tomasz.figa@gmail.com>
    Signed-off-by: Chirantan Ekbote <chirantan@chromium.org>
    Reviewed-by: Doug Anderson <dianders@chromium.org>
    Tested-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 080908ff363f552a817ae6f9f34d701d28799117
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 23 14:49:17 2014 +0200

    genirq: Provide irq_force_affinity fallback for non-SMP
    
    commit 4c88d7f9b0d5fb0588c3386be62115cc2eaa8f9f upstream.
    
    Patch 01f8fa4f01d "genirq: Allow forcing cpu affinity of interrupts" added
    an irq_force_affinity() function, and 30ccf03b4a6 "clocksource: Exynos_mct:
    Use irq_force_affinity() in cpu bringup" subsequently uses it. However, the
    driver can be used with CONFIG_SMP disabled, but the function declaration
    is only available for CONFIG_SMP, leading to this build error:
    
    drivers/clocksource/exynos_mct.c:431:3: error: implicit declaration of function 'irq_force_affinity' [-Werror=implicit-function-declaration]
       irq_force_affinity(mct_irqs[MCT_L0_IRQ + cpu], cpumask_of(cpu));
    
    This patch introduces a dummy helper function for the non-SMP case
    that always returns success, to get rid of the build error.
    Since the patches causing the problem are marked for stable backports,
    this one should be as well.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Link: http://lkml.kernel.org/r/5619084.0zmrrIUZLV@wuerfel
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 55d9b08514ede9334e443337e9bf6181a3f8b114
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 23 14:49:17 2014 +0200

    genirq: Provide irq_force_affinity fallback for non-SMP
    
    commit 4c88d7f9b0d5fb0588c3386be62115cc2eaa8f9f upstream.
    
    Patch 01f8fa4f01d "genirq: Allow forcing cpu affinity of interrupts" added
    an irq_force_affinity() function, and 30ccf03b4a6 "clocksource: Exynos_mct:
    Use irq_force_affinity() in cpu bringup" subsequently uses it. However, the
    driver can be used with CONFIG_SMP disabled, but the function declaration
    is only available for CONFIG_SMP, leading to this build error:
    
    drivers/clocksource/exynos_mct.c:431:3: error: implicit declaration of function 'irq_force_affinity' [-Werror=implicit-function-declaration]
       irq_force_affinity(mct_irqs[MCT_L0_IRQ + cpu], cpumask_of(cpu));
    
    This patch introduces a dummy helper function for the non-SMP case
    that always returns success, to get rid of the build error.
    Since the patches causing the problem are marked for stable backports,
    this one should be as well.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Link: http://lkml.kernel.org/r/5619084.0zmrrIUZLV@wuerfel
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0447d3173813aff149b9e660e6d8caac45f7cf52
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Wed Apr 16 14:36:45 2014 +0000

    clocksource: Exynos_mct: Register clock event after request_irq()
    
    commit 8db6e5104b77de5d0b7002b95069da0992a34be9 upstream.
    
    After hotplugging CPU1 the first call of interrupt handler for CPU1
    oneshot timer was called on CPU0 because it fired before setting IRQ
    affinity. Affected are SoCs where Multi Core Timer interrupts are
    shared (SPI), e.g. Exynos 4210.
    
    During setup of the MCT timers the clock event device should be
    registered after setting the affinity for interrupt. This will prevent
    starting the timer too early.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Tomasz Figa <t.figa@samsung.com>,
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>,
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: linux-arm-kernel@lists.infradead.org,
    Link: http://lkml.kernel.org/r/20140416143316.299247848@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bae3622bb8afd02343c79949635b8d84c2cf3485
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 23 14:49:17 2014 +0200

    genirq: Provide irq_force_affinity fallback for non-SMP
    
    commit 4c88d7f9b0d5fb0588c3386be62115cc2eaa8f9f upstream.
    
    Patch 01f8fa4f01d "genirq: Allow forcing cpu affinity of interrupts" added
    an irq_force_affinity() function, and 30ccf03b4a6 "clocksource: Exynos_mct:
    Use irq_force_affinity() in cpu bringup" subsequently uses it. However, the
    driver can be used with CONFIG_SMP disabled, but the function declaration
    is only available for CONFIG_SMP, leading to this build error:
    
    drivers/clocksource/exynos_mct.c:431:3: error: implicit declaration of function 'irq_force_affinity' [-Werror=implicit-function-declaration]
       irq_force_affinity(mct_irqs[MCT_L0_IRQ + cpu], cpumask_of(cpu));
    
    This patch introduces a dummy helper function for the non-SMP case
    that always returns success, to get rid of the build error.
    Since the patches causing the problem are marked for stable backports,
    this one should be as well.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Link: http://lkml.kernel.org/r/5619084.0zmrrIUZLV@wuerfel
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce5e2b32090d5564d4393b36b5be3b226f4ded4e
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Wed Apr 16 14:36:45 2014 +0000

    clocksource: Exynos_mct: Register clock event after request_irq()
    
    commit 8db6e5104b77de5d0b7002b95069da0992a34be9 upstream.
    
    After hotplugging CPU1 the first call of interrupt handler for CPU1
    oneshot timer was called on CPU0 because it fired before setting IRQ
    affinity. Affected are SoCs where Multi Core Timer interrupts are
    shared (SPI), e.g. Exynos 4210.
    
    During setup of the MCT timers the clock event device should be
    registered after setting the affinity for interrupt. This will prevent
    starting the timer too early.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Tomasz Figa <t.figa@samsung.com>,
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>,
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: linux-arm-kernel@lists.infradead.org,
    Link: http://lkml.kernel.org/r/20140416143316.299247848@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35c726c15087376c8c50b726df5b60b786e07741
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Apr 16 14:36:45 2014 +0000

    clocksource: Exynos_mct: Use irq_force_affinity() in cpu bringup
    
    commit 30ccf03b4a6a2102a2219058bdc6d779dc637dd7 upstream.
    
    The starting cpu is not yet in the online mask so irq_set_affinity()
    fails which results in per cpu timers for this cpu ending up on some
    other online cpu, ususally cpu 0.
    
    Use irq_force_affinity() which disables the online mask check and
    makes things work.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Tomasz Figa <t.figa@samsung.com>,
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>,
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: linux-arm-kernel@lists.infradead.org,
    Link: http://lkml.kernel.org/r/20140416143316.106665251@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bdb96457c0728672b655f677d987898945d7cfd
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Wed Apr 16 14:36:45 2014 +0000

    clocksource: Exynos_mct: Register clock event after request_irq()
    
    commit 8db6e5104b77de5d0b7002b95069da0992a34be9 upstream.
    
    After hotplugging CPU1 the first call of interrupt handler for CPU1
    oneshot timer was called on CPU0 because it fired before setting IRQ
    affinity. Affected are SoCs where Multi Core Timer interrupts are
    shared (SPI), e.g. Exynos 4210.
    
    During setup of the MCT timers the clock event device should be
    registered after setting the affinity for interrupt. This will prevent
    starting the timer too early.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Tomasz Figa <t.figa@samsung.com>,
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>,
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: linux-arm-kernel@lists.infradead.org,
    Link: http://lkml.kernel.org/r/20140416143316.299247848@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 0ba79d6efc90465ed75f41e723b27aff79a7baae
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Apr 16 14:36:45 2014 +0000

    clocksource: Exynos_mct: Use irq_force_affinity() in cpu bringup
    
    commit 30ccf03b4a6a2102a2219058bdc6d779dc637dd7 upstream.
    
    The starting cpu is not yet in the online mask so irq_set_affinity()
    fails which results in per cpu timers for this cpu ending up on some
    other online cpu, ususally cpu 0.
    
    Use irq_force_affinity() which disables the online mask check and
    makes things work.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Tomasz Figa <t.figa@samsung.com>,
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>,
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: linux-arm-kernel@lists.infradead.org,
    Link: http://lkml.kernel.org/r/20140416143316.106665251@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 82e627eb5e07d7993216c9e63fb5550cf6ed25d7
Merge: f1a7cd0ffe8c 331b483f42fb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jun 4 15:57:20 2014 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip into next
    
    Pull timer core updates from Thomas Gleixner:
     "This time you get nothing really exciting:
       - A huge update to the sh* clocksource drivers
       - Support for two more ARM SoCs
       - Removal of the deprecated setup_sched_clock() API
       - The usual pile of fixlets all over the place"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (23 commits)
      clocksource: Add Freescale FlexTimer Module (FTM) timer support
      ARM: dts: vf610: Add Freescale FlexTimer Module timer node.
      clocksource: ftm: Add FlexTimer Module (FTM) Timer devicetree Documentation
      clocksource: sh_tmu: Remove unnecessary OOM messages
      clocksource: sh_mtu2: Remove unnecessary OOM messages
      clocksource: sh_cmt: Remove unnecessary OOM messages
      clocksource: em_sti: Remove unnecessary OOM messages
      clocksource: dw_apb_timer_of: Do not trace read_sched_clock
      clocksource: Fix clocksource_mmio_readX_down
      clocksource: Fix type confusion for clocksource_mmio_readX_Y
      clocksource: sh_tmu: Fix channel IRQ retrieval in legacy case
      clocksource: qcom: Implement read_current_timer for udelay
      ntp: Make is_error_status() use its argument
      ntp: Convert simple_strtol to kstrtol
      timer_stats/doc: Fix /proc/timer_stats documentation
      sched_clock: Remove deprecated setup_sched_clock() API
      ARM: sun6i: a31: Add support for the High Speed Timers
      clocksource: sun5i: Add support for reset controller
      clocksource: efm32: use $vendor,$device scheme for compatible string
      KConfig: Vexpress: build the ARM_GLOBAL_TIMER with vexpress platform
      ...

commit 1605abfffe331b3d9f845a456e7762f1bf53d973
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jun 4 12:34:15 2014 +0200

    clocksource: versatile: Use sched_clock_register()
    
    The newly merged versatile sched clock support uses a deprecated
    interface.  Of course that patch got routed through the ARM tree instead
    of going through the relevant maintainer tree.
    
    Use the proper interface so we can get rid of the cruft.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit aa699a1d84474eb993867822b6aefc47a9a6ce0c
Merge: 758b67126fac acbf6d21ac81
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 27 15:58:20 2014 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull two timer fixes from Thomas Gleixner:
     "Two small fixlets for ARM SoC clocksource drivers:
    
       - avoid calling functions which might sleep from interrupt [disabled]
         context in tcb_clksrc used on Atmel SoCs
    
       - use irq_force_affinity() to pin the per cpu timer interrupt on a
         not yet online cpu in the SiRFprimaII driver"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: tcb_clksrc: Make tc_mode interrupt safe
      clocksource: marco: Fix the affinity set for local timer of CPU1

commit 331b483f42fb4d04d52ce920ae10a71411c859a4
Merge: 309179fabddd 2529c3a33079
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 27 10:03:39 2014 +0200

    Merge branch 'clockevents/3.16' of git://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    This pull request contains the following changes:
    
    * Laurent Pinchart did a lot of modifications to prepare the DT
      support.  These modifications include a lot of cleanup (structure
      renaming, preparation to support multiple channel, kzalloc usage,
      ...) and then finishes to drop the old code to the new one.
    
    * Jingoo Han removed the dev_err when an allocation fails because this
      error is already given by the mm subsystems.
    
    * Matthew Leach added the ARM global timer with vexpress, enabled the
      ARM global timer with the A5 and added the definition in the DT. He
      also fixed a invalid check when looking for an usable ARM global
      timer for A9
    
    * Maxime Ripard added the support for AllWinner A31 for sun4i and made
      the timer reset optional through the DT
    
    * Stephen Boyd used the msm timer for the udelay
    
    * Uwe Kleine-König fixed the non-standard 'compatible' binding for efm32
    
    * Xiubo Li clarified the types for the clocksource_mmio_read* and
      added a new Flextimer Module (FTM) with its bindings
    
    * Yang Wei added the 'notrace' attribute to 'read_sched_clock' for the
      dw_apb_timer

commit 4fd09120443a47ea1876ecce494205420b94d201
Merge: e469d6ba0ac0 eb28d0bb857f
Author: Olof Johansson <olof@lixom.net>
Date:   Mon May 26 14:52:23 2014 -0700

    Merge tag 'zynq-cleanup-for-3.16' of git://git.xilinx.com/linux-xlnx into next/soc
    
    Merge "Xilinx Zynq changes for v3.16" from Michal Simek:
    
    arm: Xilinx Zynq cleanup patches for v3.16
    
    - Add support for BIG Endian
    - Add SOC_BUS support
    - Sort Kconfig options
    - Fix early console
    
    * tag 'zynq-cleanup-for-3.16' of git://git.xilinx.com/linux-xlnx:
      ARM: zynq: Enable big-endian
      ARM: zynq: Fix uart0 early console virtual address
      clocksource: cadence_ttc: Use readl/writel_relaxed instead of __raw
      ARM: zynq: Sort Kconfig options
      ARM: zynq: Add support for SOC_BUS
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit b33cdd283bd917d431469c29419c2cf2624bd683
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon May 26 17:25:22 2014 +0200

    ARM: vexpress: refine dependencies for new code
    
    The versatile express changes for 3.16 introduced a number of
    build regressions for randconfig kernels by not tracking dependencies
    between the components right.
    
    This patch tries to rectify that:
    
    * the mach-vexpress code cannot link without the syscfg driver,
      which in turn needs MFD_VEXPRESS_SYSREG
    * various drivers call devm_regmap_init_vexpress_config(), which
      has to be exported so it can be used by loadable modules
    * the configuration bus uses OF DT helper functions that are not
      available to platforms disable CONFIG_OF
    * The sysreg driver exports GPIOs through gpiolib, which can
      be disabled on some platforms.
    * The clocksource code cannot be built on platforms that don't
      use modern timekeeping but rely on gettimeoffset.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 2529c3a330797000d699d70c9a65b8525c6652de
Author: Xiubo Li <Li.Xiubo@freescale.com>
Date:   Fri May 23 10:12:04 2014 +0200

    clocksource: Add Freescale FlexTimer Module (FTM) timer support
    
    The Freescale FlexTimer Module time reference is a 16-bit counter
    that can be used as an unsigned or signed increase counter.
    
    CNTIN defines the starting value of the count and MOD defines the
    final value of the count. The value of CNTIN is loaded into the FTM
    counter, and the counter increments until the value of MOD is reached,
    at which point the counter is reloaded with the value of CNTIN. That's
    also when an overflow interrupt will be generated.
    
    Here using the 'evt' prefix or postfix as clock event device and
    the 'src' as clock source device.
    
    Signed-off-by: Xiubo Li <Li.Xiubo@freescale.com>
    Cc: Shawn Guo <shawn.guo@linaro.org>
    Cc: Jingchang Lu <b35083@freescale.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 12e499d0ed1fa09940a573e5a8cce52b556f3c38
Author: Xiubo Li <Li.Xiubo@freescale.com>
Date:   Fri May 23 10:12:04 2014 +0200

    clocksource: ftm: Add FlexTimer Module (FTM) Timer devicetree Documentation
    
    The FTM binding could be used on Vybrid and LS1+, add a binding
    document for it.
    
    Signed-off-by: Xiubo Li <Li.Xiubo@freescale.com>
    Cc: Shawn Guo <shawn.guo@linaro.org>
    Cc: Jingchang Lu <b35083@freescale.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 814876b0b00ae98a8568d1b989bc98ca5389b98a
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Thu May 22 14:05:07 2014 +0200

    clocksource: sh_tmu: Remove unnecessary OOM messages
    
    The site-specific OOM messages are unnecessary, because they
    duplicate the MM subsystem generic OOM message.
    
    [dlezcano] : refreshed against latest modifications: kmalloc -> kzalloc
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c77a565b2966567b97d589e90a6b9ce725bb15b1
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Thu May 22 14:05:07 2014 +0200

    clocksource: sh_mtu2: Remove unnecessary OOM messages
    
    The site-specific OOM messages are unnecessary, because they
    duplicate the MM subsystem generic OOM message.
    
    [dlezcano] : refreshed against latest modifications: kmalloc -> kzalloc
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0178f41d3d35b63ed25a066d90e7dda380018c06
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Thu May 22 14:05:06 2014 +0200

    clocksource: sh_cmt: Remove unnecessary OOM messages
    
    The site-specific OOM messages are unnecessary, because they
    duplicate the MM subsystem generic OOM message.
    
    [dlezcano] : refreshed against latest modifications: kmalloc -> kzalloc
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 39dd56776e3583d08bdfaabae2171a1a70a679c9
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Thu May 22 14:05:06 2014 +0200

    clocksource: em_sti: Remove unnecessary OOM messages
    
    The site-specific OOM messages are unnecessary, because they
    duplicate the MM subsystem generic OOM message.
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0d24d1f2495ec4d6996c70c8edec202053cf7e69
Author: Yang Wei <Wei.Yang@windriver.com>
Date:   Tue May 13 11:10:08 2014 +0800

    clocksource: dw_apb_timer_of: Do not trace read_sched_clock
    
    We do not need to trace read_sched_clock function,
    so add notrace attribute for this function.
    
    Signed-off-by: Yang Wei <Wei.Yang@windriver.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 95c19a06ec1cf9530ebb8f2c7eeda1d7398b43f1
Author: Xiubo Li <Li.Xiubo@freescale.com>
Date:   Wed Apr 23 10:12:00 2014 +0800

    clocksource: Fix clocksource_mmio_readX_down
    
    For some clocksource devices, for example, the registers are 32-bit, while
    the lower 16-bit is used for timer counting(And reading the upper 16-bit
    will return 0).
    
    For example, when the counter value is 0x00001111, and then the
    ~readl_relaxed(to_mmio_clksrc(c)->reg) will return the value of 0xFFFFEEEE,
    but it should be 0x0000EEEE.
    
    So just using the c->mask to mask the unused bits.
    
    Signed-off-by: Xiubo Li <Li.Xiubo@freescale.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4a3ae07413844733e4cb3765f67a752b846df913
Author: Xiubo Li <Li.Xiubo@freescale.com>
Date:   Wed Apr 23 10:11:59 2014 +0800

    clocksource: Fix type confusion for clocksource_mmio_readX_Y
    
    The types' definations are:
       o  cycle_t       -> u64
       o  readl_relaxed -> u32
       o  readw_relaxed -> u16
    
    So let clocksource_mmio_readX_Ys return a cast to cycle_t, though
    this maybe look reduntant sometimes, it make sense and they will be
    more readable and less confusion...
    
    This patch clarifies the functions type and fix it.
    
    Signed-off-by: Xiubo Li <Li.Xiubo@freescale.com>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit acbf6d21ac81195071b97ebb114b0b37bd9fcc86
Author: David Jander <david@protonic.nl>
Date:   Thu May 8 12:06:25 2014 +0200

    clocksource: tcb_clksrc: Make tc_mode interrupt safe
    
    tc_mode() can be called from interrupt context and thus must not call
    clk_*prepare*() functions.
    
    Signed-off-by: David Jander <david@protonic.nl>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>

commit f214be50f317d78c47532d4ca8aa0ba5e79fc1ca
Author: Zhiwu Song <Zhiwu.Song@csr.com>
Date:   Wed May 7 14:46:44 2014 +0800

    clocksource: marco: Fix the affinity set for local timer of CPU1
    
    irqchip will reject the affinity set to CPUs which is not online
    yet. but in the CPU1 wakeup stage, OS only sets CPU1 to be online
    after local timer is set, so that causes the irq_set_affinity not
    work. this patch moves to irq_force_affinity() for the low level
    boot stage.
    
    Signed-off-by: Zhiwu Song <Zhiwu.Song@csr.com>
    Signed-off-by: Barry Song <Baohua.Song@csr.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit efca0a3e85045da839320d7c5121f82d55be8b79
Merge: ed99885ccb89 93bfb769752b
Author: Olof Johansson <olof@lixom.net>
Date:   Wed May 21 22:32:57 2014 -0700

    Merge tag 'samsung-drivers' of http://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung into next/drivers
    
    Merge "Samsung driver update for 3.16" from Kukjin Kim:
    
    exynos_mct update for v3.16
    
    - register sched_clock callback to use clocksource mct-frc
    
    * tag 'samsung-drivers' of http://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung:
      clocksource: exynos_mct: register sched_clock callback
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 486ad2ede13314346226ee52e92b8e8773221f63
Merge: 9e05f9f30082 6b2c31c71d6f
Author: Olof Johansson <olof@lixom.net>
Date:   Wed May 21 14:23:56 2014 -0700

    Merge tag 'vexpress/updates-for-3.16' of git://git.linaro.org/people/pawel.moll/linux into next/cleanup
    
    Merge "ARM Versatile Express updates for 3.16" from Pawel Moll:
    
    This series reworks VE's platform configuration infrastructure by:
    
    - making it possible to instantiate selected devices from the
      Device Tree, prior to massive population,
    - converting custom "func" API into standard "regmap",
    - splitting the existing MFD driver into smaller ones and placing
      them into relevant directories.
    
    The common clock framework driver can now be selected individually
    (mostly for arm64 sake, where some of them are not used at all).
    
    It also simplifies the machine code, by:
    
    - moving the shed clock info clocksource driver,
    - simplifying SMP operations to base them entirely of the DT data,
    - moving platform ID checks into relevant driver.
    
    * tag 'vexpress/updates-for-3.16' of git://git.linaro.org/people/pawel.moll/linux:
      ARM: vexpress: move HBI check to sysreg driver
      ARM: vexpress: Simplify SMP operations for DT-powered system
      ARM: vexpress: remove redundant vexpress_dt_cpus_num to get cpu count
      clocksource: Sched clock source for Versatile Express
      clk: versatile: Split config options for sp810 and vexpress_osc
      mfd: vexpress: Define the device as MFD cells
      mfd: syscon: Add platform data with a regmap config name
      mfd: vexpress: Convert custom func API to regmap
      of: Keep track of populated platform devices
      + Linux 3.15-rc5
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 91f0f06ccbd2a0648160aad6783b7da92e2880d7
Merge: 4a70e968893e 346f5e76b382
Author: Olof Johansson <olof@lixom.net>
Date:   Wed May 21 14:05:27 2014 -0700

    Merge branch 'depends/clockevents-cleanups' into next/boards
    
    Bringing in as an external dependency that the renesas/clock-cleanup2 branch
    relies on.
    
    * depends/clockevents-cleanups: (52 commits)
      clocksource: sh_mtu2: Sort headers alphabetically
      clocksource: sh_mtu2: Remove FSF mail address from GPL notice
      clocksource: sh_mtu2: Rename clock to "fck" in the non-legacy case
      clocksource: sh_mtu2: Add support for multiple channels per device
      clocksource: sh_mtu2: Hardcode MTU2 clock event rating to 200
      clocksource: sh_mtu2: Set cpumask to cpu_possible_mask
      clocksource: sh_mtu2: Replace hardcoded register values with macros
      clocksource: sh_mtu2: Allocate channels dynamically
      clocksource: sh_mtu2: Replace kmalloc + memset with kzalloc
      clocksource: sh_mtu2: Add index to struct sh_mtu2_channel
      clocksource: sh_mtu2: Add memory base to sh_mtu2_channel structure
      clocksource: sh_mtu2: Constify name argument to sh_mtu2_register()
      clocksource: sh_mtu2: Split channel setup to separate function
      clocksource: sh_mtu2: Rename struct sh_mtu2_priv to sh_mtu2_device
      clocksource: sh_mtu2: Split channel fields from sh_mtu2_priv
      clocksource: sh_mtu2: Turn sh_mtu2_priv fields into local variables
      clocksource: sh_mtu2: Use request_irq() instead of setup_irq()
      clocksource: sh_tmu: Sort headers alphabetically
      clocksource: sh_tmu: Remove FSF mail address from GPL notice
      clocksource: sh_tmu: Rename clock to "fck" in the non-legacy case
      ...
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 87ab4361beed9960687eb60f0da79f85293d1ade
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Fri Apr 11 15:39:29 2014 +0200

    clocksource: cadence_ttc: Use readl/writel_relaxed instead of __raw
    
    For supporting ARM big-endian is necessary to use
    proper IO endianess accessors.
    
    Based on Ben Dooks BE guide.
    Similar conversion is done here:
    "mv_xor: use {readl, writel}_relaxed instead of __raw_{readl, writel}"
    (sha1: 5733c38ae3473115ac7df3fe19bd2502149d8c51)
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>

commit 9e05f9f300828aecb84659cedc6399b7a76683ef
Merge: a501fd37f77a c7cff54d5926
Author: Olof Johansson <olof@lixom.net>
Date:   Mon May 19 22:06:02 2014 -0700

    Merge tag 'sirf-soc-for-3.16' of git://git.kernel.org/pub/scm/linux/kernel/git/baohua/linux into next/cleanup
    
    Merge "ARM: sirf: machine update for 3.16" from Barry Song:
    
    Most of them fix some minor checkpatch issues according to key customers'
    requirement. And this patchset also cleanups the clk of clocksource: move
    to get clk by dts properity.
    
    * tag 'sirf-soc-for-3.16' of git://git.kernel.org/pub/scm/linux/kernel/git/baohua/linux:
      clocksource:sirf: remove the hardcode for the clk of timers
      irqchip: sirf: fix one minor checkpatch issue
      clocksource: prima2: fix some minor checkpatch issues
      ARM: prima2: rstc: fix some minor checkpatch issues
      + Linux 3.15-rc3
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit c54697ae180e652a96db8bc71f0c7c7baee2bf16
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri May 16 14:44:23 2014 +0200

    clocksource: sh_tmu: Fix channel IRQ retrieval in legacy case
    
    In the legacy platform data case each TMU platform device handles a
    single channel with a single IRQ for the platform device. Retrieve the
    IRQ using the logical channel number instead of the hardware channel
    number.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 013be5adf5cd6e6d58eb72f3bb0137a78be152c8
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Tue May 13 16:01:00 2014 -0700

    clocksource: qcom: Implement read_current_timer for udelay
    
    Setup the same timer used as the clocksource to be used as the
    read_current_timer implementation. This allows us to support a
    stable udelay implementation on MSMs where it's possible for the
    CPUs to scale speeds independently of one another.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 220e2a8d22cd57d5ec8111465923c6c25691394d
Author: Pawel Moll <pawel.moll@arm.com>
Date:   Wed Apr 16 18:22:59 2014 +0100

    clocksource: Sched clock source for Versatile Express
    
    This patch adds a trival sched clock source using free
    running, 24MHz clocked counter present in the ARM Ltd.
    reference platforms (Versatile, RealView, Versatile
    Express) System Registers block.
    
    This code replaces the call in the VE machine code.
    
    Signed-off-by: Pawel Moll <pawel.moll@arm.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>

commit c7cff54d5926e3f419c23eff2ebaf6f5e12da05d
Author: Zhiwu Song <Zhiwu.Song@csr.com>
Date:   Mon May 5 19:30:04 2014 +0800

    clocksource:sirf: remove the hardcode for the clk of timers
    
    Nobody want to know the connection between io clk and timer clk,
    so exposing this information to timer module is not reasonable.
    this patch moves to define the timers' clk in dt.
    
    Signed-off-by: Zhiwu Song <Zhiwu.Song@csr.com>
    Signed-off-by: Barry Song <Baohua.Song@csr.com>

commit 4c1ad70921caa9831b4926e83481c9f825016dd6
Author: Bin Shi <Bin.Shi@csr.com>
Date:   Tue May 6 22:42:29 2014 +0800

    clocksource: prima2: fix some minor checkpatch issues
    
    Fix the "line over 80 characters". users of the codes - key customers
    really care about that.
    
    WARNING: line over 80 characters
    64: FILE: timer-prima2.c:64:
    +       WARN_ON(!(readl_relaxed(sirfsoc_timer_base + SIRFSOC_TIMER_STATUS) & BIT(0)));
    
    WARNING: line over 80 characters
    80: FILE: timer-prima2.c:80:
    +       writel_relaxed(SIRFSOC_TIMER_LATCH_BIT, sirfsoc_timer_base + SIRFSOC_TIMER_LATCH);
    
    WARNING: line over 80 characters
    82: FILE: timer-prima2.c:82:
    +       cycles = (cycles << 32) | readl_relaxed(sirfsoc_timer_base + SIRFSOC_TIMER_LATCHED_LO);
    
    WARNING: line over 80 characters
    92: FILE: timer-prima2.c:92:
    +       writel_relaxed(SIRFSOC_TIMER_LATCH_BIT, sirfsoc_timer_base + SIRFSOC_TIMER_LATCH);
    
    WARNING: line over 80 characters
    96: FILE: timer-prima2.c:96:
    +       writel_relaxed(SIRFSOC_TIMER_LATCH_BIT, sirfsoc_timer_base + SIRFSOC_TIMER_LATCH);
    
    WARNING: line over 80 characters
    111: FILE: timer-prima2.c:111:
    +               writel_relaxed(val | BIT(0), sirfsoc_timer_base + SIRFSOC_TIMER_INT_EN);
    
    WARNING: line over 80 characters
    114: FILE: timer-prima2.c:114:
    +               writel_relaxed(val & ~BIT(0), sirfsoc_timer_base + SIRFSOC_TIMER_INT_EN);
    
    WARNING: line over 80 characters
    126: FILE: timer-prima2.c:126:
    +       writel_relaxed(SIRFSOC_TIMER_LATCH_BIT, sirfsoc_timer_base + SIRFSOC_TIMER_LATCH);
    
    WARNING: line over 80 characters
    129: FILE: timer-prima2.c:129:
    +               sirfsoc_timer_reg_val[i] = readl_relaxed(sirfsoc_timer_base + sirfsoc_timer_reg_list[i]);
    
    WARNING: line over 80 characters
    137: FILE: timer-prima2.c:137:
    +               writel_relaxed(sirfsoc_timer_reg_val[i], sirfsoc_timer_base + sirfsoc_timer_reg_list[i]);
    
    WARNING: line over 80 characters
    139: FILE: timer-prima2.c:139:
    +       writel_relaxed(sirfsoc_timer_reg_val[SIRFSOC_TIMER_REG_CNT - 2], sirfsoc_timer_base + SIRFSOC_TIMER_COUNTER_LO);
    
    WARNING: line over 80 characters
    140: FILE: timer-prima2.c:140:
    +       writel_relaxed(sirfsoc_timer_reg_val[SIRFSOC_TIMER_REG_CNT - 1], sirfsoc_timer_base + SIRFSOC_TIMER_COUNTER_HI);
    
    WARNING: line over 80 characters
    216: FILE: timer-prima2.c:216:
    +CLOCKSOURCE_OF_DECLARE(sirfsoc_prima2_timer, "sirf,prima2-tick", sirfsoc_prima2_timer_init);
    
    total: 0 errors, 13 warnings, 216 lines checked
    
    timer-prima2.c has style problems, please review.
    
    If any of these errors are false positives, please report
    them to the maintainer, see CHECKPATCH in MAINTAINERS.
    
    Signed-off-by: Bin Shi <Bin.Shi@csr.com>
    Signed-off-by: Barry Song <Baohua.Song@csr.com>

commit 62187910b0fc7a75cfec9c30fda58ce2f39d689b
Author: Feng Tang <feng.tang@intel.com>
Date:   Thu Apr 24 16:18:18 2014 +0800

    x86/intel: Add quirk to disable HPET for the Baytrail platform
    
    HPET on current Baytrail platform has accuracy problem to be
    used as reliable clocksource/clockevent, so add a early quirk to
    disable it.
    
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Cc: Clemens Ladisch <clemens@ladisch.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/1398327498-13163-2-git-send-email-feng.tang@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 4c88d7f9b0d5fb0588c3386be62115cc2eaa8f9f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 23 14:49:17 2014 +0200

    genirq: Provide irq_force_affinity fallback for non-SMP
    
    Patch 01f8fa4f01d "genirq: Allow forcing cpu affinity of interrupts" added
    an irq_force_affinity() function, and 30ccf03b4a6 "clocksource: Exynos_mct:
    Use irq_force_affinity() in cpu bringup" subsequently uses it. However, the
    driver can be used with CONFIG_SMP disabled, but the function declaration
    is only available for CONFIG_SMP, leading to this build error:
    
    drivers/clocksource/exynos_mct.c:431:3: error: implicit declaration of function 'irq_force_affinity' [-Werror=implicit-function-declaration]
       irq_force_affinity(mct_irqs[MCT_L0_IRQ + cpu], cpumask_of(cpu));
    
    This patch introduces a dummy helper function for the non-SMP case
    that always returns success, to get rid of the build error.
    Since the patches causing the problem are marked for stable backports,
    this one should be as well.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/5619084.0zmrrIUZLV@wuerfel
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 05f4640979e0d67fae56be42393fb5b81a0293de
Merge: 56bfa7ee7c88 de21b26e51d1
Author: David S. Miller <davem@davemloft.net>
Date:   Mon May 5 13:19:00 2014 -0400

    Merge branch 'am437x'
    
    George Cherian says:
    
    ====================
    The series adds CPTS support for AM4372.
    
    Patch 1 - DT changes w.r.t clock changes for AM33xx.
    Patch 2 - CPTS clock name harcoding in the driver is removed.
              Easier to pass the clock name from dt rather than hardcoding in driver.
              Also in prepration for DRA7x CPTS support.
    Patch 3 - Enable the CPTS support for both DRA7x and AM4372 in the driver.
    Patch 4 - Enable the Annexe F for L2 PTP for AM437x and DRA7x.
    Patch 5 - Change the default clocksource to dpll_core_m5
    Patch 6 - DT changes for AM4372.
    
    v1 -> v2
            Patch 1 and 2 Re-ordering.
            Seperate TS_BITS define for Hw version V2 and V3
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f9786f419d58fc6667ba07a5590640112b31ba64
Author: George Cherian <george.cherian@ti.com>
Date:   Fri May 2 12:02:03 2014 +0530

    ARM: AM43xx: clk: Change the cpts ref clock source to dpll_core_m5 clk
    
    cpsw_cpts_rft_clk has got the choice of 3 clocksources
     -dpll_core_m4_ck
     -dpll_core_m5_ck
     -dpll_disp_m2_ck
    
    By default dpll_core_m4_ck is selected, witn this as clock
    source the CPTS doesnot work properly. It gives clockcheck errors
    while running PTP.
    
     clockcheck: clock jumped backward or running slower than expected!
    
    By selecting dpll_core_m5_ck as the clocksource fixes this issue.
    In AM335x dpll_core_m5_ck is the default clocksource.
    
    Signed-off-by: George Cherian <george.cherian@ti.com>
    Acked-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 98facf0e1ee3d2db313863a283e499ed1c0b5b79
Merge: 00622e61eda4 98a01e779f3c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 3 08:31:45 2014 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "This update brings along:
    
       - Two fixes for long standing bugs in the hrtimer code, one which
         prevents remote enqueuing and the other preventing arbitrary delays
         after a interrupt hang was detected
    
       - A fix in the timer wheel which prevents math overflow
    
       - A fix for a long standing issue with the architected ARM timer
         related to the C3STOP mechanism.
    
       - A trivial compile fix for nspire SoC clocksource"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      timer: Prevent overflow in apply_slack
      hrtimer: Prevent remote enqueue of leftmost timers
      hrtimer: Prevent all reprogramming if hang detected
      clocksource: nspire: Fix compiler warning
      clocksource: arch_arm_timer: Fix age-old arch timer C3STOP detection issue

commit 93bfb769752babdc4d3665a1fb166bb4e3ff927b
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Fri May 2 22:27:01 2014 +0900

    clocksource: exynos_mct: register sched_clock callback
    
    Use the clocksource mct-frc for sched_clock
    
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    Reviewed-by: Tomasz Figa <t.figa@samsung.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 9afa27ce9414c92e271b0d7eec937bd9f5565da5
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Sat Apr 26 09:32:16 2014 +0400

    clocksource: nspire: Fix compiler warning
    
    CC      drivers/clocksource/zevio-timer.o
    drivers/clocksource/zevio-timer.c:215:1: warning: comparison of distinct pointer types lacks a cast [enabled by default]
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 82a5619410d4c4df65c04272db198eca5a867c18
Author: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
Date:   Tue Apr 8 10:04:32 2014 +0100

    clocksource: arch_arm_timer: Fix age-old arch timer C3STOP detection issue
    
    ARM arch timers are tightly coupled with the CPU logic and lose context
    on platform implementing HW power management when cores are powered
    down at run-time. Marking the arch timers as C3STOP regardless of power
    management capabilities causes issues on platforms with no power management,
    since in that case the arch timers cannot possibly enter states where the
    timer loses context at runtime and therefore can always be used as a high
    resolution clockevent device.
    
    In order to fix the C3STOP issue in a way compliant with how real HW
    works, this patch adds a boolean property to the arch timer bindings
    to define if the arch timer is managed by an always-on power domain.
    
    This power domain is present on all ARM platforms to date, and manages
    HW that must not be turned off, whatever the state of other HW
    components (eg power controller). On platforms with no power management
    capabilities, it is the only power domain present, which encompasses
    and manages power supply for all HW components in the system.
    
    If the timer is powered by the always-on power domain, the always-on
    property must be present in the bindings which means that the timer cannot
    be shutdown at runtime, so it is not a C3STOP clockevent device.
    If the timer binding does not contain the always-on property, the timer is
    assumed to be power-gateable, hence it must be defined as a C3STOP
    clockevent device.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Magnus Damm <damm@opensource.se>
    Cc: Marc Carino <marc.ceeeee@gmail.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d9e9e8e2fe832180f5c8f659a63def2e8fcaea4a
Merge: a8d706986c5e 8db6e5104b77
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Apr 27 11:21:03 2014 -0700

    Merge branch 'irq-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull irq fixes from Thomas Gleixner:
     "A slighlty large fix for a subtle issue in the CPU hotplug code of
      certain ARM SoCs, where the not yet online cpu needs to setup the cpu
      local timer and needs to set the interrupt affinity to itself.
      Setting interrupt affinity to a not online cpu is prohibited and
      therefor the timer interrupt ends up on the wrong cpu, which leads to
      nasty complications.
    
      The SoC folks tried to hack around that in the SoC code in some more
      than nasty ways.  The proper solution is to have a way to enforce the
      affinity setting to a not online cpu.  The core patch to the genirq
      code provides that facility and the follow up patches make use of it
      in the GIC interrupt controller and the exynos timer driver.
    
      The change to the core code has no implications to existing users,
      except for the rename of the locked function and therefor the
      necessary fixup in mips/cavium.  Aside of that, no runtime impact is
      possible, as none of the existing interrupt chips implements anything
      which depends on the force argument of the irq_set_affinity()
      callback"
    
    * 'irq-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: Exynos_mct: Register clock event after request_irq()
      clocksource: Exynos_mct: Use irq_force_affinity() in cpu bringup
      irqchip: Gic: Support forced affinity setting
      genirq: Allow forcing cpu affinity of interrupts

commit ab5ab9dbe6bd480d17f23b3a33510ae33e6ab280
Author: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
Date:   Tue Apr 22 23:26:27 2014 +0200

    ARM: orion5x: switch to DT interrupts and timer
    
    This commit switches the Orion5x platforms described through DT to use
    a DT-defined interrupt controller and timer.
    
    This involves:
    
     * Describing in the DT the bridge interrupt controller, which is a
       child interrupt controller to the main one, which is used for timer
       and watchdog interrupts.
    
     * Describing in the DT the timer.
    
     * Adding in the DT the interrupt specifications for the watchdog.
    
     * Selecting the ORION_IRQCHIP and ORION_TIMER drivers to be compiled.
    
     * Change board-dt.c to no longer have an ->init_time() callback,
       since the default callback will work fine: it calls
       clocksource_of_init() and of_clk_init(), as needed.
    
     * Implement a multi-IRQ handler for non-DT platforms in
       mach-orion5x/irq.c.
    
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Acked-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Link: https://lkml.kernel.org/r/1398202002-28530-24-git-send-email-thomas.petazzoni@free-electrons.com
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit 3fe89d2e768792a924d3c1e9310ba0b4448cb78e
Merge: 625bba662c17 76e7745e8e43
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 25 13:02:02 2014 -0700

    Merge tag 'fixes-3.15-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC fixes from Arnd Bergmann:
     "Since we didn't get around to collect fixes in time for -rc2 over the
      easter vacation, this one is unfortunately a bit larger than we'd like
      for an -rc3 merge.
    
      A large set of the changes is in the device tree sources, so I'm
      splitting out the description between code changes and DT changes.
      Aside from omap and versatile express, the actual code bugs are and
      trivial.  Here is an overview:
    
      imx:
       - fix video clock settings
       - fix one clock refcounting bug
    
      omap:
       - update defconfig for renamed USB PHY driver
       - fix error handling in gpmc
       - fix N900 video initialization regression
       - fix reression in hwmod code from missing braces
       - fix am43xx and omap3 clocks
       - remove bogus write to voltage control register
    
      pxa:
       - fix build regression from 3.13 header cleanup
    
      rockchip:
       - fix a misleading printk string
    
      shmobile:
       - fix incorrect sound setting on multiple machines
    
      spear:
       - remove incorrect __init section annotation
    
      tegra:
       - remove a stale Kconfig entry
    
      u300:
       - update defconfig
    
      ux500:
       - enable common wireless and sensor drivers in defconfig
       - more defconfig updates
    
      vexpress:
       - fix voltage calculation for opp
       - fix reboot hang and warning
       - fix out-of-bounds array access
       - improve error handling in clock driver
    
      overall:
       - always select CLKSRC_OF in multiplatform builds
    
      And these are the devicetree related changes:
    
      imx:
       - add missing #clock-cell properties
       - fix pinctrl setting in imx6sl-evk
       - fix video endpoint on imx53
       - remove obsolete lvds-channel nodes (multiple patches)
       - add missing second stmpe node
       - fix usb host mode on dmo-edmqmx6 (multiple patches)
       - fix gic node #address-cells to match usage
       - add missing legacy IRQ map for PCIe
       - fix microsom pincontrol setting for rgmii
       - fix fatal typo in touchscreen DT usage for mx5
       - list all RAM present on m53evk and mx53qsb
    
      omap:
       - fix bug in DT handling of gpmc external bus
       - add DT for older revision of beagleboard
       - fix regression after DT node name fixes
       - remove obsolete properties for gpmc
       - fix pinmux comment to match DT it refers to
       - fix newly added dra7xx clock node data
       - add missing clock for USB PHY
    
      mvebu:
       - add missing clock for mdio node
       - fix nonstandard vendor prefixes on i2c nodes
    
      rockchip:
       - fix pin control setting for uart
    
      shmobile:
       - fix typo in DT data for pin control (multiple patches)
       - fix gic node #address-cells to match usage
    
      tegra:
       - fix clock and uart DT representation to match hardware
    
      zynq:
       - add DT nodes for newly added driver
       - add DT properties required for cpufreq-ondemand
    
      overall:
       - restore alphabetic order in Makefile
       - grammar fixes in bindings"
    
    * tag 'fixes-3.15-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (66 commits)
      ARM: vexpress/TC2: Convert OPP voltage to uV before storing
      power/reset: vexpress: Fix restart/power off operation
      dt: tegra: remove non-existent clock IDs
      clk: tegra: remove non-existent clocks
      ARM: tegra: remove UART5/UARTE from tegra124.dtsi
      ARM: tegra: remove TEGRA_EMC_SCALING_ENABLE
      ARM: Tidy up DTB Makefile entries
      ARM: fix missing CLKSRC_OF on multi-platform
      ARM: spear: add __init to spear_clocksource_init()
      ARM: pxa: hx4700.h: include "irqs.h" for PXA_NR_BUILTIN_GPIO
      arm/mach-vexpress: array accessed out of bounds
      clk: vexpress: NULL dereference on error path
      ARM: OMAP2+: Fix GPMC remap for devices using an offset
      ARM: zynq: dt: Add I2C nodes to Zynq device tree
      ARM: zynq: DT: Add 'clock-latency' property
      ARM: OMAP2+: Fix oops for GPMC free
      ARM: dts: Add support for the BeagleBoard xM A/B
      ARM: dts: Grammar /that will/it will/
      ARM: dts: Grammar /is uses/ is used/
      ARM: OMAP2+: Fix config name for USB3 PHY
      ...

commit bc3ee18a7a57243721ecfd879319e3d2e882f289
Author: Chanho Min <chanho.min@lge.com>
Date:   Mon Apr 14 08:38:53 2014 +0100

    arm64: init: Move of_clk_init to time_init
    
    Clock providers should be initialized before clocksource_of_init.
    If not, Clock source initialization can be fail to get the clock.
    
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Chanho Min <chanho.min@lge.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

commit 1be5f69216a20b3ed7ef8b0392ca97385bdca959
Author: Alex Elder <elder@linaro.org>
Date:   Wed Apr 9 09:01:12 2014 -0500

    ARM: spear: add __init to spear_clocksource_init()
    
    I get a build warning because spear_clocksource_init() calls
    clocksource_mmio_init(), but it doesn't have an __init annotation.
    Fix that.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit e50a00be5c420b4f28836dec281cdde4bed832a2
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Apr 17 11:06:45 2014 +0200

    clocksource: sun5i: Add support for reset controller
    
    The Allwinner A31 that uses this timer has the timer IP asserted in reset.
    Add an optional reset property to the DT, and deassert the timer from reset if
    it's there.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 63cc122381bda123c2b1b0137cca09f66e5be660
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Mar 25 15:50:44 2014 +0100

    clocksource: efm32: use $vendor,$device scheme for compatible string
    
    Wolfram Sang pointed out that "efm32,$device" is non-standard. So use the
    common scheme and prefix device with "efm32-". The old compatible string
    is left in place until arch/arm/boot/dts/efm32* is fixed.
    
    Acked-by: Wolfram Sang <wsa@the-dreams.de>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2cf2ff9f1fcdca404885bc55292b2046eabc039a
Author: Matthew Leach <matthew.leach@arm.com>
Date:   Fri Mar 14 10:18:19 2014 +0000

    clocksource: arm_global_timer: Only check for unusable timer on A9
    
    The check for a usable global timer in the probe code does not enquire
    which CPU we are currently running on. This can cause the driver to
    incorrectly assume we have an unusable global timer if we are running
    on a CPU other than A9.
    
    Before checking the CPU revision, ensure we are running on an A9 CPU.
    
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Matthew Leach <matthew.leach@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit dd79f191795df3d8b9a3d139343dc70006c2dc40
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 19 21:02:21 2014 -0700

    tcp: syncookies: do not use getnstimeofday()
    
    [ Upstream commit 632623153196bf183a69686ed9c07eee98ff1bf8 ]
    
    While it is true that getnstimeofday() uses about 40 cycles if TSC
    is available, it can use 1600 cycles if hpet is the clocksource.
    
    Switch to get_jiffies_64(), as this is more than enough, and
    go back to 60 seconds periods.
    
    Fixes: 8c27bd75f04f ("tcp: syncookies: reduce cookie lifetime to 128 seconds")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Florian Westphal <fw@strlen.de>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 8db6e5104b77de5d0b7002b95069da0992a34be9
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Wed Apr 16 14:36:45 2014 +0000

    clocksource: Exynos_mct: Register clock event after request_irq()
    
    After hotplugging CPU1 the first call of interrupt handler for CPU1
    oneshot timer was called on CPU0 because it fired before setting IRQ
    affinity. Affected are SoCs where Multi Core Timer interrupts are
    shared (SPI), e.g. Exynos 4210.
    
    During setup of the MCT timers the clock event device should be
    registered after setting the affinity for interrupt. This will prevent
    starting the timer too early.
    
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Tomasz Figa <t.figa@samsung.com>,
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>,
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: linux-arm-kernel@lists.infradead.org,
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20140416143316.299247848@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 30ccf03b4a6a2102a2219058bdc6d779dc637dd7
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Apr 16 14:36:45 2014 +0000

    clocksource: Exynos_mct: Use irq_force_affinity() in cpu bringup
    
    The starting cpu is not yet in the online mask so irq_set_affinity()
    fails which results in per cpu timers for this cpu ending up on some
    other online cpu, ususally cpu 0.
    
    Use irq_force_affinity() which disables the online mask check and
    makes things work.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Marek Szyprowski <m.szyprowski@samsung.com>
    Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Tomasz Figa <t.figa@samsung.com>,
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>,
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: linux-arm-kernel@lists.infradead.org,
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20140416143316.106665251@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 346f5e76b3822a2530a03f33b00ee89dfc463326
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 14:11:47 2014 +0100

    clocksource: sh_mtu2: Sort headers alphabetically
    
    This helps locating duplicates and inserting new headers.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 24c8f71707087eb177b45f4a24faedaa0d8f0287
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 14:12:32 2014 +0100

    clocksource: sh_mtu2: Remove FSF mail address from GPL notice
    
    Do not include the paragraph about writing to the Free Software
    Foundation's mailing address from the sample GPL notice. The FSF has
    changed addresses in the past, and may do so again. Linux already
    includes a copy of the GPL.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 6dc9693bb3997cb324a2ffb39deaa72081a9bd0d
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 18:09:15 2014 +0100

    clocksource: sh_mtu2: Rename clock to "fck" in the non-legacy case
    
    The sh_mtu2 driver gets the MTU2 functional clock using a connection ID
    of "mtu2_fck". While all SH SoCs create clock lookup entries with a NULL
    device ID and a "mtu2_fck" connection ID, the ARM SoCs use the device ID
    only with a NULL connection ID. This works on legacy platforms but will
    break on ARM with DT boot.
    
    Fix the situation by using a connection ID of "fck" in the non-legacy
    platform data case. Clock lookup entries will be renamed to use the
    device ID as well as the connection ID as platforms get moved to new
    platform data. The legacy code will eventually be dropped, leaving us
    with device ID based clock lookup, compatible with DT boot.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit faf3f4f8c805f5f8a786ba544c94bf3e01838388
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 18:05:45 2014 +0100

    clocksource: sh_mtu2: Add support for multiple channels per device
    
    MTU2 hardware devices can support multiple channels, with global
    registers and per-channel registers. The sh_mtu2 driver currently models
    the hardware with one Linux device per channel. This model makes it
    difficult to handle global registers in a clean way.
    
    Add support for a new model that uses one Linux device per timer with
    multiple channels per device. This requires changes to platform data,
    add new channel configuration fields.
    
    Support for the legacy model is kept and will be removed after all
    platforms switch to the new model.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 207e21a9732a27f58843ccae1c9644f3a1636b66
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 15:19:41 2014 +0100

    clocksource: sh_mtu2: Hardcode MTU2 clock event rating to 200
    
    All boards use clock event ratings of 200 for the MTU2, hardcode it in
    the driver.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 3cc950479891040366629247357512f1cc928da3
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 15:22:19 2014 +0100

    clocksource: sh_mtu2: Set cpumask to cpu_possible_mask
    
    The MTU2 is not tied to CPU0, make it usable on any CPU.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit f992c2410bd31b7c80ba8cc8b989d91b9cac3c30
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 15:16:25 2014 +0100

    clocksource: sh_mtu2: Replace hardcoded register values with macros
    
    Define symbolic macros for all used registers bits.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit c54ccb431ce6ce813bb850e8659991fc4c5bc6bc
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 14:23:00 2014 +0100

    clocksource: sh_mtu2: Allocate channels dynamically
    
    This prepares the driver for multi-channel support.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 810c651369b343618d949826e0acd0df1b8b06eb
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 14:10:55 2014 +0100

    clocksource: sh_mtu2: Replace kmalloc + memset with kzalloc
    
    One kzalloc a day keeps the bugs away.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit d2b93177065fd8e1e18f4f42880326e0881ff457
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 14:17:26 2014 +0100

    clocksource: sh_mtu2: Add index to struct sh_mtu2_channel
    
    Use the index as the timer start/stop bit and when printing messages to
    identify the channel.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit da90a1c67751a412499a9f5698c3bf0bf80f65a6
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 14:04:24 2014 +0100

    clocksource: sh_mtu2: Add memory base to sh_mtu2_channel structure
    
    The channel memory base is channel-specific, add it to the channel
    structure in preparation for support of multiple channels per device.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit aa83804af705731d2802b80fb4b94a79045d31a3
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 13:57:14 2014 +0100

    clocksource: sh_mtu2: Constify name argument to sh_mtu2_register()
    
    The name argument is assigned to const structure fields only, constify
    it.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 2e1a53265d550002fdd1658778854d56ae4cadc1
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 13:11:23 2014 +0100

    clocksource: sh_mtu2: Split channel setup to separate function
    
    Move the channel setup code from sh_mtu2_setup to a new
    sh_mtu2_setup_channel function and call it from sh_mtu2_setup.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 7dad72de1b475d02935e5c79c218637b6c63108b
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 13:04:48 2014 +0100

    clocksource: sh_mtu2: Rename struct sh_mtu2_priv to sh_mtu2_device
    
    Channel data is private as well, rename priv to device to make the
    distrinction between the core device and the channels clearer.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 42752cc619c0ee619b56f86932ce42b00adb5052
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 12:58:30 2014 +0100

    clocksource: sh_mtu2: Split channel fields from sh_mtu2_priv
    
    Create a new sh_mtu2_channel structure to hold the channel-specific
    fields in preparation for multiple channels per device support.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit f92d62f53973466cccb25900c2597ff6df950d74
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Mar 4 12:59:54 2014 +0100

    clocksource: sh_mtu2: Turn sh_mtu2_priv fields into local variables
    
    The rate and periodic fields are used in a single function only, as
    local variables. Remove them from the structure.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 276bee05d8b72e98d530b55161e0a2131da99f58
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Feb 17 11:27:49 2014 +0100

    clocksource: sh_mtu2: Use request_irq() instead of setup_irq()
    
    The driver claims it needs to register an interrupt handler too early
    for request_irq(). This might have been true in the past, but the only
    meaningful difference between request_irq() and setup_irq() today is an
    additional kzalloc() call in request_irq(). As the driver calls
    kmalloc() itself we know that the slab allocator is available, we can
    thus switch to request_irq().
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Tested-by: Wolfram Sang <wsa@sang-engineering.com>

commit 13931f8065fabff117828999e007f62a5cabea34
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Wed Feb 12 16:56:44 2014 +0100

    clocksource: sh_tmu: Sort headers alphabetically
    
    This helps locating duplicates and inserting new headers.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 6b96c15b034813ec0b46e5bebbf8cffae0ac72d0
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri Feb 14 01:25:50 2014 +0100

    clocksource: sh_tmu: Remove FSF mail address from GPL notice
    
    Do not include the paragraph about writing to the Free Software
    Foundation's mailing address from the sample GPL notice. The FSF has
    changed addresses in the past, and may do so again. Linux already
    includes a copy of the GPL.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit a27d922749f3be0a88f7e0aeb507c373703c08ee
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri Feb 14 00:35:18 2014 +0100

    clocksource: sh_tmu: Rename clock to "fck" in the non-legacy case
    
    The sh_tmu driver gets the TMU functional clock using a connection ID of
    "tmu_fck". While all SH SoCs create clock lookup entries with a NULL
    device ID and a "tmu_fck" connection ID, the ARM SoCs use the device ID
    only with a NULL connection ID. This works on legacy platforms but will
    break on ARM with DT boot.
    
    Fix the situation by using a connection ID of "fck" in the non-legacy
    platform data case. Clock lookup entries will be renamed to use the
    device ID as well as the connection ID as platforms get moved to new
    platform data. The legacy code will eventually be dropped, leaving us
    with device ID based clock lookup, compatible with DT boot.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 8c7f21e6739ad836f30561d641393a8417abdad3
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Jan 28 12:36:48 2014 +0100

    clocksource: sh_tmu: Add support for multiple channels per device
    
    TMU hardware devices can support multiple channels, with global
    registers and per-channel registers. The sh_tmu driver currently models
    the hardware with one Linux device per channel. This model makes it
    difficult to handle global registers in a clean way.
    
    Add support for a new model that uses one Linux device per timer with
    multiple channels per device. This requires changes to platform data,
    add new channel configuration fields.
    
    Support for the legacy model is kept and will be removed after all
    platforms switch to the new model.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit f1010ed1a13ea38f495ebfa2fdb1f38b7f87301f
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Wed Feb 19 17:00:31 2014 +0100

    clocksource: sh_tmu: Hardcode TMU clock event and source ratings to 200
    
    All boards use clock event and clock source ratings of 200 for the TMU,
    hardcode it in the driver.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 5cfe2d151f8f55052f5463e725d3d3a4aa51335d
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Wed Jan 29 00:33:08 2014 +0100

    clocksource: sh_tmu: Replace hardcoded register values with macros
    
    Define symbolic macros for all used registers bits.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit a5de49f436e2bc498c1d13f6f8a9afaf19cb5f95
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_tmu: Allocate channels dynamically
    
    This prepares the driver for multi-channel support.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 3b77a83eeabb885c5fff02756eba50f446a2d83c
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_tmu: Replace kmalloc + memset with kzalloc
    
    One kzalloc a day keeps the bugs away.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit fe68eb802ef8bf034735f37cb561ab814fb3b0d6
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_tmu: Add index to struct sh_tmu_channel
    
    Use the index as the timer start/stop bit and when printing messages to
    identify the channel.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit de693461bf9624ec12808f8c5524510364cc2a43
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_tmu: Add memory base to sh_tmu_channel structure
    
    The channel memory base is channel-specific, add it to the channel
    structure in preparation for support of multiple channels per device.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 84876d0505b15a2907696566a80a365993feab44
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Feb 17 16:04:16 2014 +0100

    clocksource: sh_tmu: Constify name argument to sh_tmu_register()
    
    The name argument is assigned to const structure fields only, constify
    it.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit a94ddaa6fcd46e168736027535b2d81b6a18883f
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_tmu: Split channel setup to separate function
    
    Move the channel setup code from sh_tmu_setup to a new
    sh_tmu_setup_channel function and call it from sh_tmu_setup.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 0a72aa39cc105fbf6971feb8928a63530a4a446b
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_tmu: Rename struct sh_tmu_priv to sh_tmu_device
    
    Channel data is private as well, rename priv to device to make the
    distrinction between the core device and the channels clearer.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit de2d12c7e856f0fa59ea83275410a364d2b182c0
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 15:29:19 2014 +0100

    clocksource: sh_tmu: Split channel fields from sh_tmu_priv
    
    Create a new sh_tmu_channel structure to hold the channel-specific
    field in preparation for multiple channels per device support.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 1c56cf6b048e1e1bbe08faf38b5592b373905ac5
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Feb 17 11:27:49 2014 +0100

    clocksource: sh_tmu: Use request_irq() instead of setup_irq()
    
    The driver claims it needs to register an interrupt handler too early
    for request_irq(). This might have been true in the past, but the only
    meaningful difference between request_irq() and setup_irq() today is an
    additional kzalloc() call in request_irq(). As the driver calls
    kmalloc() itself we know that the slab allocator is available, we can
    thus switch to request_irq().
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit bfa76bb12f23ecf0c6d07c302f4571a6fe9bc3e3
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri Feb 21 01:24:47 2014 +0100

    clocksource: sh_cmt: Request IRQ for clock event device only
    
    Clock sources don't need an IRQ, request the IRQ only for channels used
    as clock event devices.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit e7a9bcc2372b0e62443569c63a369cfd528db4f4
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Wed Feb 12 16:56:44 2014 +0100

    clocksource: sh_cmt: Sort headers alphabetically
    
    This helps locating duplicates and inserting new headers.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 1cd89c568c057a13ca11acf0eb3a78121513e2b6
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri Feb 14 01:25:50 2014 +0100

    clocksource: sh_cmt: Remove FSF mail address from GPL notice
    
    Do not include the paragraph about writing to the Free Software
    Foundation's mailing address from the sample GPL notice. The FSF has
    changed addresses in the past, and may do so again. Linux already
    includes a copy of the GPL.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 24b4e07df54b7bf7739fb3dd193f639a8f274ad6
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri Feb 14 00:35:18 2014 +0100

    clocksource: sh_cmt: Rename clock to "fck" in the non-legacy case
    
    The sh_cmt driver gets the CMT functional clock using a connection ID of
    "cmt_fck". While all SH SoCs create clock lookup entries with a NULL
    device ID and a "cmt_fck" connection ID, the ARM SoCs use the device ID
    only with a NULL connection ID. This works on legacy platforms but will
    break on ARM with DT boot.
    
    Fix the situation by using a connection ID of "fck" in the non-legacy
    platform data case. Clock lookup entries will be renamed to use the
    device ID as well as the connection ID as platforms get moved to new
    platform data. The legacy code will eventually be dropped, leaving us
    with device ID based clock lookup, compatible with DT boot.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 81b3b2711072b6047d5f332cd8751a1c5c9a3fb2
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Jan 28 12:36:48 2014 +0100

    clocksource: sh_cmt: Add support for multiple channels per device
    
    CMT hardware devices can support multiple channels, with global
    registers and per-channel registers. The sh_cmt driver currently models
    the hardware with one Linux device per channel. This model makes it
    difficult to handle global registers in a clean way.
    
    Add support for a new model that uses one Linux device per timer with
    multiple channels per device. This requires changes to platform data,
    add new channel configuration fields.
    
    Support for the legacy model is kept and will be removed after all
    platforms switch to the new model.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit fb28a659813084365eced5c2876c6383da52e634
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Wed Feb 19 17:00:31 2014 +0100

    clocksource: sh_cmt: Hardcode CMT clock source rating to 125
    
    All boards use or should use a clock source rating of 125 for the CMT,
    hardcode it in the driver.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit b7fcbb0f830e6cccc9d358c24f8463e5d8018649
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Wed Feb 19 17:00:31 2014 +0100

    clocksource: sh_cmt: Hardcode CMT clock event rating to 125
    
    All boards use or should use a clock event rating of 125 for the CMT,
    hardcode it in the driver.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit f1ebe1e47e1979393a8492bfe751176908a830ae
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Wed Feb 19 16:19:44 2014 +0100

    clocksource: sh_cmt: Set cpumask to cpu_possible_mask
    
    The CMT is a global timer not restricted to a single CPU. It has a lower
    rating than the TMU or ARM architected timer, but is still useful on
    systems where the other timers are stopped during CPU sleep.
    
    When multiple timers are available the timers core selects which timer
    to use based on timer ratings.
    
    On SMP systems where timer broadcasting is required, one dummy timer is
    instantiated per CPU with a rating of 100. On those systems the CMT
    timer has a rating of 80, which makes the dummy timer selected by
    default on all CPUs. The CMT is then available, and will be used as a
    broadcast timer.
    
    On UP systems no dummy timer is instantiated. The CMT timer has a rating
    of 125 on those systems and is used directly as a clock event device for
    CPU0 without broadcasting.
    
    The CMT rating shouldn't depend on whether we boot a UP or SMP system.
    We can't raise the CMT rating to 125 on SMP systems. This would select
    CMT as the clock event device for CPU0 as its rating is higher than the
    dummy timer rating, and would leave the system without a broadcast
    timer. We could instead lower the rating to 80 on all systems, but that
    wouldn't reflect reality as ratings between 1 and 99 are documented as
    "unfit for real use".
    
    We should raise the rating above 99 and still have the CMT selected as a
    broadcast timer. This can be done by changing the cpumask from
    cpumask_of(0) to cpu_possible_mask. In that case the timer selection
    logic will prefer the previously probed and already selected dummy timer
    for all CPUs based on the fact that already selected per-cpu timers are
    preferred over new global timers, regardless of their respective
    ratings. This also better reflects reality, as the CMT is not tied to
    the boot CPU.
    
    Ideally the timer selection logic should realize that the CMT needs to
    be used as a broadcast timer on SMP systems as no other broadcast timer
    is available, regardless of the cpumask and rating.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit d14be99b7e3fe52bc9921caa30953d49f499f121
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Wed Jan 29 00:33:08 2014 +0100

    clocksource: sh_cmt: Replace hardcoded register values with macros
    
    Define symbolic macros for all used registers bits.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 2cda3ac49d5744432e9ebffb8ba47bef6eca053d
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Feb 11 23:46:48 2014 +0100

    clocksource: sh_cmt: Split static information from sh_cmt_device
    
    Create a new sh_cmt_info structure to hold static information about the
    device model and reference that structure from the sh_cmt_device
    structure.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit f5ec9b194a93c05e2ccdb3e90d9061cfedc806d9
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_cmt: Allocate channels dynamically
    
    This prepares the driver for multi-channel support.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit b262bc74dcfd77355720342cbcf89cc8ec12e86b
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_cmt: Replace kmalloc + memset with kzalloc
    
    One kzalloc a day keeps the bugs away.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 740a95184dd61eb0481f75ced05ea5e01b7ce6ac
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_cmt: Add index to struct sh_cmt_channel
    
    Use the index when printing messages to identify the channel.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit c924d2d2a964715b55b6601be338b3bd05a1ced5
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_cmt: Add memory base to sh_cmt_channel structure
    
    The channel memory base is channel-specific, add it to the channel
    structure in preparation for support of multiple channels per device.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 36f1ac982d94cd3cce8ae24abd0676b79dec6126
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_cmt: Rename mapbase/mapbase_str to mapbase_ch/mapbase
    
    The mapbase variable points to the mapped base address of the channel,
    rename it to mapbase_sh. mapbase_str points to the mapped base address
    of the CMT device, rename it to mapbase.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 1d053e1d8eb28f42b7ec57d1c11ce70b8fba45ff
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Feb 17 16:04:16 2014 +0100

    clocksource: sh_cmt: Constify name argument to sh_cmt_register()
    
    The name argument is assigned to const structure fields only, constify
    it.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit b882e7b13bc12b3d6b00e4ea2fe374413ddcdd2d
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_cmt: Split channel setup to separate function
    
    Move the channel setup code from sh_cmt_setup to a new
    sh_cmt_setup_channel function and call it from sh_cmt_setup.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 2653caf4381f9adeec8c18dfec21ec3c855d801c
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 22:04:17 2014 +0100

    clocksource: sh_cmt: Rename struct sh_cmt_priv to sh_cmt_device
    
    Channel data is private as well, rename priv to device to make the
    distrinction between the core device and the channels clearer.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 7269f9333292586f2378c5321b40a8d3779c4653
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Jan 27 15:29:19 2014 +0100

    clocksource: sh_cmt: Split channel fields from sh_cmt_priv
    
    Create a new sh_cmt_channel structure to hold the channel-specific
    field in preparation for multiple channels per device support.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit dc2eadece70089430f12e4ed6bb1a4421cf3d6f4
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Mon Feb 17 11:27:49 2014 +0100

    clocksource: sh_cmt: Use request_irq() instead of setup_irq()
    
    The driver claims it needs to register an interrupt handler too early
    for request_irq(). This might have been true in the past, but the only
    meaningful difference between request_irq() and setup_irq() today is an
    additional kzalloc() call in request_irq(). As the driver calls
    kmalloc() itself we know that the slab allocator is available, we can
    thus switch to request_irq().
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit 652c3e3e38667d11e6e7ca204497930c24d059c3
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 19 21:02:21 2014 -0700

    tcp: syncookies: do not use getnstimeofday()
    
    [ Upstream commit 632623153196bf183a69686ed9c07eee98ff1bf8 ]
    
    While it is true that getnstimeofday() uses about 40 cycles if TSC
    is available, it can use 1600 cycles if hpet is the clocksource.
    
    Switch to get_jiffies_64(), as this is more than enough, and
    go back to 60 seconds periods.
    
    Fixes: 8c27bd75f04f ("tcp: syncookies: reduce cookie lifetime to 128 seconds")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Florian Westphal <fw@strlen.de>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 467a9e1633043810259a7f5368fbcc1e84746137
Merge: b8780c363d80 a0e247a80592
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 7 14:55:46 2014 -0700

    Merge tag 'cpu-hotplug-3.15-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull CPU hotplug notifiers registration fixes from Rafael Wysocki:
     "The purpose of this single series of commits from Srivatsa S Bhat
      (with a small piece from Gautham R Shenoy) touching multiple
      subsystems that use CPU hotplug notifiers is to provide a way to
      register them that will not lead to deadlocks with CPU online/offline
      operations as described in the changelog of commit 93ae4f978ca7f ("CPU
      hotplug: Provide lockless versions of callback registration
      functions").
    
      The first three commits in the series introduce the API and document
      it and the rest simply goes through the users of CPU hotplug notifiers
      and converts them to using the new method"
    
    * tag 'cpu-hotplug-3.15-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (52 commits)
      net/iucv/iucv.c: Fix CPU hotplug callback registration
      net/core/flow.c: Fix CPU hotplug callback registration
      mm, zswap: Fix CPU hotplug callback registration
      mm, vmstat: Fix CPU hotplug callback registration
      profile: Fix CPU hotplug callback registration
      trace, ring-buffer: Fix CPU hotplug callback registration
      xen, balloon: Fix CPU hotplug callback registration
      hwmon, via-cputemp: Fix CPU hotplug callback registration
      hwmon, coretemp: Fix CPU hotplug callback registration
      thermal, x86-pkg-temp: Fix CPU hotplug callback registration
      octeon, watchdog: Fix CPU hotplug callback registration
      oprofile, nmi-timer: Fix CPU hotplug callback registration
      intel-idle: Fix CPU hotplug callback registration
      clocksource, dummy-timer: Fix CPU hotplug callback registration
      drivers/base/topology.c: Fix CPU hotplug callback registration
      acpi-cpufreq: Fix CPU hotplug callback registration
      zsmalloc: Fix CPU hotplug callback registration
      scsi, fcoe: Fix CPU hotplug callback registration
      scsi, bnx2fc: Fix CPU hotplug callback registration
      scsi, bnx2i: Fix CPU hotplug callback registration
      ...

commit 1ead65812486cda65093683a99b8907a7242fa93
Merge: b6d739e95812 b97f0291a250
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 1 11:00:07 2014 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer changes from Thomas Gleixner:
     "This assorted collection provides:
    
       - A new timer based timer broadcast feature for systems which do not
         provide a global accessible timer device.  That allows those
         systems to put CPUs into deep idle states where the per cpu timer
         device stops.
    
       - A few NOHZ_FULL related improvements to the timer wheel
    
       - The usual updates to timer devices found in ARM SoCs
    
       - Small improvements and updates all over the place"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (44 commits)
      tick: Remove code duplication in tick_handle_periodic()
      tick: Fix spelling mistake in tick_handle_periodic()
      x86: hpet: Use proper destructor for delayed work
      workqueue: Provide destroy_delayed_work_on_stack()
      clocksource: CMT, MTU2, TMU and STI should depend on GENERIC_CLOCKEVENTS
      timer: Remove code redundancy while calling get_nohz_timer_target()
      hrtimer: Rearrange comments in the order struct members are declared
      timer: Use variable head instead of &work_list in __run_timers()
      clocksource: exynos_mct: silence a static checker warning
      arm: zynq: Add support for cpufreq
      arm: zynq: Don't use arm_global_timer with cpufreq
      clocksource/cadence_ttc: Overhaul clocksource frequency adjustment
      clocksource/cadence_ttc: Call clockevents_update_freq() with IRQs enabled
      clocksource: Add Kconfig entries for CMT, MTU2, TMU and STI
      sh: Remove Kconfig entries for TMU, CMT and MTU2
      ARM: shmobile: Remove CMT, TMU and STI Kconfig entries
      clocksource: armada-370-xp: Use atomic access for shared registers
      clocksource: orion: Use atomic access for shared registers
      clocksource: timer-keystone: Delete unnecessary variable
      clocksource: timer-keystone: introduce clocksource driver for Keystone
      ...

commit de690a49748fa75ff3ecffabfba6a954ceca00de
Author: Stefan Agner <stefan@agner.ch>
Date:   Wed Mar 5 23:11:08 2014 +0100

    clocksource: vf_pit_timer: use complement for sched_clock reading
    
    commit 224aa3ed45c8735ae02bb2ecca002409fa6aa772 upstream.
    
    Vybrids PIT register is monitonic decreasing. However, sched_clock
    reading needs to be monitonic increasing. Use bitwise not to get
    the complement of the clock register. This fixes the clock going
    backward. Also, the clock now starts at 0 since we load the
    register with the maximum value at start.
    
    Signed-off-by: Stefan Agner <stefan@agner.ch>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Cc: daniel.lezcano@linaro.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux@arm.linux.org.uk
    Link: http://lkml.kernel.org/r/d25af915993aec1b486be653eb86f748ddef54fe.1394057313.git.stefan@agner.ch
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4a987db1b3cd89207cece4b8121c09cbfbc978a
Author: Huacai Chen <chenhc@lemote.com>
Date:   Fri Mar 21 18:44:09 2014 +0800

    MIPS: Loongson 3: Add CPU hotplug support
    
    Tips of Loongson's CPU hotplug:
    1, To fully shutdown a core in Loongson 3, the target core should go to
       CKSEG1 and flush all L1 cache entries at first. Then, another core
       (usually Core 0) can safely disable the clock of the target core. So
       play_dead() call loongson3_play_dead() via CKSEG1 (both uncached and
       unmmaped).
    2, The default clocksource of Loongson is MIPS. Since clock source is a
       global device, timekeeping need the CP0' Count registers of each core
       be synchronous. Thus, when a core is up, we use a SMP_ASK_C0COUNT IPI
       to ask Core-0's Count.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Hongliang Tao <taohl@lemote.com>
    Signed-off-by: Hua Yan <yanh@lemote.com>
    Tested-by: Alex Smith <alex.smith@imgtec.com>
    Reviewed-by: Alex Smith <alex.smith@imgtec.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Steven J. Hill <Steven.Hill@imgtec.com>
    Cc: Aurelien Jarno <aurelien@aurel32.net>
    Cc: linux-mips@linux-mips.org
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Patchwork: https://patchwork.linux-mips.org/patch/6639
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 07a2f05ccb2b392a0360653eb6f9d32906e2d516
Author: Stefan Agner <stefan@agner.ch>
Date:   Wed Mar 5 23:11:08 2014 +0100

    clocksource: vf_pit_timer: use complement for sched_clock reading
    
    commit 224aa3ed45c8735ae02bb2ecca002409fa6aa772 upstream.
    
    Vybrids PIT register is monitonic decreasing. However, sched_clock
    reading needs to be monitonic increasing. Use bitwise not to get
    the complement of the clock register. This fixes the clock going
    backward. Also, the clock now starts at 0 since we load the
    register with the maximum value at start.
    
    Signed-off-by: Stefan Agner <stefan@agner.ch>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Cc: daniel.lezcano@linaro.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux@arm.linux.org.uk
    Link: http://lkml.kernel.org/r/d25af915993aec1b486be653eb86f748ddef54fe.1394057313.git.stefan@agner.ch
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 87291a9267ecc0a8efceb4d9cbd4da870f958fc1
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Mar 20 15:05:50 2014 +0100

    clocksource: CMT, MTU2, TMU and STI should depend on GENERIC_CLOCKEVENTS
    
    If GENERIC_CLOCKEVENTS=n:
    
    drivers/clocksource/sh_cmt.c:54:28: error: field 'ced' has incomplete type
    drivers/clocksource/sh_cmt.c: In function 'sh_cmt_interrupt':
    drivers/clocksource/sh_cmt.c:407:23: error: 'CLOCK_EVT_MODE_ONESHOT' undeclared (first use in this function)
    
    drivers/clocksource/sh_mtu2.c:44:28: error: field 'ced' has incomplete type
    drivers/clocksource/sh_mtu2.c: In function 'ced_to_sh_mtu2':
    drivers/clocksource/sh_mtu2.c:184:70: warning: initialization from incompatible pointer type [enabled by default]
    drivers/clocksource/sh_mtu2.c: At top level:
    drivers/clocksource/sh_mtu2.c:188:16: warning: 'enum clock_event_mode' declared inside parameter list [enabled by default]
    
    drivers/clocksource/sh_tmu.c:45:28: error: field 'ced' has incomplete type
    drivers/clocksource/sh_tmu.c: In function 'sh_tmu_interrupt':
    drivers/clocksource/sh_tmu.c:207:21: error: 'CLOCK_EVT_MODE_ONESHOT' undeclared (first use in this function)
    
    drivers/clocksource/em_sti.c:44:28: error: field 'ced' has incomplete type
    drivers/clocksource/em_sti.c: In function 'ced_to_em_sti':
    drivers/clocksource/em_sti.c:251:69: warning: initialization from incompatible pointer type [enabled by default]
    drivers/clocksource/em_sti.c: At top level:
    drivers/clocksource/em_sti.c:255:16: warning: 'enum clock_event_mode' declared inside parameter list [enabled by default]
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Magnus Damm <damm@opensource.se>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1395324352-9146-1-git-send-email-geert@linux-m68k.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 632623153196bf183a69686ed9c07eee98ff1bf8
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 19 21:02:21 2014 -0700

    tcp: syncookies: do not use getnstimeofday()
    
    While it is true that getnstimeofday() uses about 40 cycles if TSC
    is available, it can use 1600 cycles if hpet is the clocksource.
    
    Switch to get_jiffies_64(), as this is more than enough, and
    go back to 60 seconds periods.
    
    Fixes: 8c27bd75f04f ("tcp: syncookies: reduce cookie lifetime to 128 seconds")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Florian Westphal <fw@strlen.de>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8daa127f4e857427c66f365f650dda90f459aa54
Author: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
Date:   Tue Mar 11 02:10:23 2014 +0530

    clocksource, dummy-timer: Fix CPU hotplug callback registration
    
    Subsystems that want to register CPU hotplug callbacks, as well as perform
    initialization for the CPUs that are already online, often do it as shown
    below:
    
            get_online_cpus();
    
            for_each_online_cpu(cpu)
                    init_cpu(cpu);
    
            register_cpu_notifier(&foobar_cpu_notifier);
    
            put_online_cpus();
    
    This is wrong, since it is prone to ABBA deadlocks involving the
    cpu_add_remove_lock and the cpu_hotplug.lock (when running concurrently
    with CPU hotplug operations).
    
    Instead, the correct and race-free way of performing the callback
    registration is:
    
            cpu_notifier_register_begin();
    
            for_each_online_cpu(cpu)
                    init_cpu(cpu);
    
            /* Note the use of the double underscored version of the API */
            __register_cpu_notifier(&foobar_cpu_notifier);
    
            cpu_notifier_register_done();
    
    Fix the clocksource dummy-timer code by using this latter form of callback
    registration.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit ea1cd65a648bd98ff9d028a647462d28313aadfd
Merge: 4907cdca7210 224aa3ed45c8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 19 09:05:38 2014 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fix from Thomas Gleixner:
     "A single bugfix: make the scheduler clock on Vybrid SoCs count
      forward"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: vf_pit_timer: use complement for sched_clock reading

commit 9321256a6cdb293512c1c723eecc54305545619e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 13 21:01:57 2013 +0100

    NOHZ: Check for nohz active instead of nohz enabled
    
    commit d689fe222a858c767cb8594faf280048e532b53f upstream.
    
    RCU and the fine grained idle time accounting functions check
    tick_nohz_enabled. But that variable is merily telling that NOHZ has
    been enabled in the config and not been disabled on the command line.
    
    But it does not tell anything about nohz being active. That's what all
    this should check for.
    
    Matthew reported, that the idle accounting on his old P1 machine
    showed bogus values, when he enabled NOHZ in the config and did not
    disable it on the kernel command line. The reason is that his machine
    uses (refined) jiffies as a clocksource which explains why the "fine"
    grained accounting went into lala land, because it depends on when the
    system goes and leaves idle relative to the jiffies increment.
    
    Provide a tick_nohz_active indicator and let RCU and the accounting
    code use this instead of tick_nohz_enable.
    
    Reported-and-tested-by: Matthew Whitehead <tedheadster@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
    Reviewed-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: john.stultz@linaro.org
    Cc: mwhitehe@redhat.com
    Link: http://lkml.kernel.org/r/alpine.DEB.2.02.1311132052240.30673@ionos.tec.linutronix.de
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 09e15176ded1faa7bd685b3b5b1213cf0240566e
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Mar 1 16:57:14 2014 +0300

    clocksource: exynos_mct: silence a static checker warning
    
    My guess is we aren't going to have a 2 digit cpuid here any time soon
    but the static checkers don't know that and complain that the snprintf()
    could overflow.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b3e90722f6f53fa457a88146a877e34ea71d25ea
Author: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date:   Wed Feb 19 15:14:42 2014 -0800

    clocksource/cadence_ttc: Overhaul clocksource frequency adjustment
    
    The currently used method adjusting the clocksource to a changing input
    frequency does not work on kernels from 3.11 on.
    The new approach is to keep the timer frequency as constant as possible.
    I.e.
     - due to the TTC's prescaler limitations, allow frequency changes
       only if the frequency scales by a power of 2
     - adjust the counter's divider on the fly when a frequency change
       occurs
    
    This limits cpufreq to scale by certain factors only.
    But we may keep the time base somewhat constant, so that sleep() & co
    keep working as expected, while supporting cpufreq.
    
    Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Michal Simek <michal.simek@xilinx.com>

commit 5f0ba3b462b2d36b3c28748863747fb1050f40d0
Author: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date:   Wed Feb 19 15:14:41 2014 -0800

    clocksource/cadence_ttc: Call clockevents_update_freq() with IRQs enabled
    
    The timer core takes care of serialization and IRQs. Hence the driver is
    no longer required to disable interrupts when calling
    clockevents_update_freq().
    
    Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Michal Simek <michal.simek@xilinx.com>

commit fd3f1270d237d1afb344ee6bfd0e50c488c29e34
Author: Magnus Damm <damm@opensource.se>
Date:   Thu Feb 20 12:54:45 2014 +0100

    clocksource: Add Kconfig entries for CMT, MTU2, TMU and STI
    
    Add Kconfig entries for CMT, MTU2, TMU and STI to
    drivers/clocksource/Kconfig. This will allow us to
    get rid of duplicated entires in architecture code
    such as arch/sh and arch/arm/mach-shmobile.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Wolfram Sang <wsa@sang-engineering.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fbfa893458edb0daf18a0add33d3341b1e9f6d44
Author: Magnus Damm <damm@opensource.se>
Date:   Thu Feb 20 12:54:47 2014 +0100

    sh: Remove Kconfig entries for TMU, CMT and MTU2
    
    Now when drivers/clocksource/Kconfig has been
    updated with entires for CMT, TMU and MTU2
    it is safe to remove these from SH.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@sang-engineering.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit aeb8fb7910fc7344d0ee0c9306eb45f11327c600
Author: Magnus Damm <damm@opensource.se>
Date:   Thu Feb 20 12:54:46 2014 +0100

    ARM: shmobile: Remove CMT, TMU and STI Kconfig entries
    
    Now when drivers/clocksource/Kconfig has been
    updated with entires for CMT, TMU, MTU2, and STI
    it is safe to remove these from mach-shmobile.
    
    Also select timers per SoC via SYS_SUPPORTS_xxx.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@sang-engineering.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c8af34b4dbc211f1e08a7ea513dc399046825866
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Wed Feb 19 17:05:26 2014 -0300

    clocksource: armada-370-xp: Use atomic access for shared registers
    
    Replace the driver-specific thread-safe shared register API
    by the recently introduced atomic_io_clear_set().
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0a54a069585bb875d37494c434f36a19bcc05df9
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Wed Feb 19 17:05:25 2014 -0300

    clocksource: orion: Use atomic access for shared registers
    
    Replace the driver-specific thread-safe shared register API
    by the recently introduced atomic_io_clear_set().
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Tested-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Tested-by: Willy Tarreau <w@1wt.eu>
    Acked-by: Jason Cooper <jason@lakedaemon.net>
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e099d01eb221f4a1e713a7663ca143c05303947f
Author: Matthias Brugger <matthias.bgg@gmail.com>
Date:   Tue Feb 18 19:29:28 2014 +0100

    clocksource: timer-keystone: Delete unnecessary variable
    
    Commit 438e0bff5257 added the timer-keystone device driver but make use
    of an unnecessary variable in the init function. This patch deletes this
    variable.
    
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit e6b7f580bacb4a23e1ee5cdf6dc6e54bab141f7c
Author: Ivan Khoronzhuk <ivan.khoronzhuk@ti.com>
Date:   Mon Feb 10 12:10:56 2014 +0200

    clocksource: timer-keystone: introduce clocksource driver for Keystone
    
    Add broadcast clock-event device for the Keystone arch.
    
    The timer can be configured as a general-purpose 64-bit timer,
    dual general-purpose 32-bit timers. When configured as dual 32-bit
    timers, each half can operate in conjunction (chain mode) or
    independently (unchained mode) of each other.
    
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>
    Acked-by: Santosh shilimkar <santosh.shilimkar@ti.com>
    Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@ti.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 926b65e20dc336391dc333309d34bdf7d5fa3f3b
Author: Ivan Khoronzhuk <ivan.khoronzhuk@ti.com>
Date:   Mon Feb 10 12:10:57 2014 +0200

    clocksource: keystone: add bindings for keystone timer
    
    This patch provides bindings for the 64-bit timer in the KeyStone
    architecture devices. The timer can be configured as a general-purpose 64-bit
    timer, dual general-purpose 32-bit timers. When configured as dual 32-bit
    timers, each half can operate in conjunction (chain mode) or independently
    (unchained mode) of each other.
    
    It is global timer is a free running up-counter and can generate interrupt
    when the counter reaches preset counter values.
    
    Documentation:
    http://www.ti.com/lit/ug/sprugv5a/sprugv5a.pdf
    
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@ti.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b4f26440d932d022e109fb7a0518ae291e72f399
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Feb 6 10:40:32 2014 +0100

    ARM: sunxi: dt: Convert to the new clocksource compatible
    
    Switch the device tree to the new compatibles introduced in the timer driver
    to have a common pattern accross all Allwinner SoCs.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ec6c085cc779ae863d363e7d076b763a2a0aca4c
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Feb 6 10:40:31 2014 +0100

    clocksource: sunxi: Add new compatibles
    
    The Allwinner A10 compatibles were following a slightly different compatible
    patterns than the rest of the SoCs for historical reasons. Add compatibles
    matching the other pattern to the timer driver for consistency, and keep the
    older one for backward compatibility.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9affbd2458eca452e63b108e1a6258cf370f6eb9
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Jan 21 15:04:14 2014 +0100

    ARM: u300: move timer driver to clocksource
    
    Move the U300 timer driver down to the clocksource driver
    subsystem and keep arch/arm clean.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7b52ad2efa4926ca7f399e5e63cf9a587396cd87
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Mon Jan 6 14:56:17 2014 -0800

    clocksource: arch_timer: Set dynamic irq affinity on mmio clockevent
    
    Set the CLOCK_EVT_FEAT_DYNIRQ flag on the memory mapped
    clockevent so that we save power by waking up the CPU with the
    next event when this timer is used in broadcast mode.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 687fb3c8a0d36c50434fe1b66c5f4fe9161e5983
Merge: cf460cde7c72 a83784859ccd
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Mar 9 11:26:31 2014 -0700

    Merge tag 'samsung-drivers' of http://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung into next/cleanup
    
    Samsung drivers update for v3.15 from Kukjin Kim:
    - remove inclusion <asm/mach/time.h> from exynos_mct.c
    - remove inclusion <asm/mach/irq.h> from exynos-combiner.c
      and use calling handle_bad_irq() instead of do_bad_IRQ()
    
    * tag 'samsung-drivers' of http://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung:
      irqchip: exynos-combiner: call handle_bad_irq directly
      clocksource: exynos_mct: remove unwanted header file inclusion
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit f2f91bee92c4cdec1f66d08600a57262940fe35d
Merge: c381585fcc24 9b91bd81fa40
Author: Olof Johansson <olof@lixom.net>
Date:   Sat Mar 8 23:02:00 2014 -0800

    Merge tag 'omap-for-v3.15/soc-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into next/soc
    
    OMAP SoC changes from Tony Lindgren:
    
    Few SoC related improvments for omaps.
    
    * tag 'omap-for-v3.15/soc-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: OMAP2+: remove OMAP_PACKAGE_ZAC and OMAP_PACKAGE_ZAF
      ARM: OMAP2+: AM43x: Use gptimer as clocksource
      ARM: OMAP2+: AM43x: determine features
      ARM: OMAP2+: AM43x: Add ID for ES1.1
      ARM: OMAP2+: AM43x: enable in default config
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 767f30210bee1bb74ab042e237c2a21e77874070
Author: Henrik Austad <henrik@austad.us>
Date:   Tue Mar 4 09:20:53 2014 +0100

    tile: avoid overflow in ns2cycles
    
    In commit 4cecf6d401a ("sched, x86: Avoid unnecessary overflow in
    sched_clock") and in recent patch "clocksource: avoid unnecessary
    overflow in cyclecounter_cyc2ns()" https://lkml.org/lkml/2014/3/4/17,
    the mult-shift approach is replaced by 2 steps to avoid storing a large,
    intermediate value that could overflow.
    
    arch/tile/kernel/time.c has a similar pattern in cycles2ns, and this
    copies the same pattern in this function
    
    CC: John Stultz <johnstul@us.ibm.com>
    CC: Mike Galbraith <bitbucket@online.de>
    CC: Salman Qazi <sqazi@google.com>
    Signed-off-by: Henrik Austad <henrik@austad.us>
    Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>

commit 224aa3ed45c8735ae02bb2ecca002409fa6aa772
Author: Stefan Agner <stefan@agner.ch>
Date:   Wed Mar 5 23:11:08 2014 +0100

    clocksource: vf_pit_timer: use complement for sched_clock reading
    
    Vybrids PIT register is monitonic decreasing. However, sched_clock
    reading needs to be monitonic increasing. Use bitwise not to get
    the complement of the clock register. This fixes the clock going
    backward. Also, the clock now starts at 0 since we load the
    register with the maximum value at start.
    
    Signed-off-by: Stefan Agner <stefan@agner.ch>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Cc: daniel.lezcano@linaro.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux@arm.linux.org.uk
    Link: http://lkml.kernel.org/r/d25af915993aec1b486be653eb86f748ddef54fe.1394057313.git.stefan@agner.ch
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 5b5c01359152f3ddaa1aa0e5d1141bc2b29ba2c5
Author: Rajendra Nayak <rnayak@ti.com>
Date:   Fri Feb 7 15:51:26 2014 +0530

    ARM: OMAP2+: AM43x: Use gptimer as clocksource
    
    The SyncTimer in AM43x is clocked using the following two sources:
    1) An inaccuarte 32k clock (CLK_32KHZ) derived from PER DPLL, causing system
       time to go slowly (~10% deviation).
    2) external 32KHz RTC clock, which may not always be available on board like
       in the case of ePOS EVM
    
    Use gptimer as clocksource instead, as is done in the case of AM335x
    (which does not have a SyncTimer). With this, system time keeping works
    accurately.
    
    Signed-off-by: Rajendra Nayak <rnayak@ti.com>
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit f1a0d58e876be28bd2f53b55dd20d3cba92c6937
Merge: a3f4fdf2190e cf1e8f0cd665
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Feb 25 18:09:27 2014 +0100

    Merge branch 'qcom/cleanup' into next/drivers
    
    * qcom/cleanup:
      ARM: qcom: Rename various msm prefixed functions to qcom
      clocksource: qcom: split building of legacy vs multiplatform support
      ARM: qcom: Split Qualcomm support into legacy and multiplatform
      clocksource: qcom: Move clocksource code out of mach-msm
      ARM: msm: kill off hotplug.c
      ARM: msm: Remove pen_release usage
      ARM: dts: msm: split out msm8660 and msm8960 soc into dts include
    
    This cleanup branch is a dependency for the following qcom driver changes.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit a00dfeddf4f81335afa6174f0e5a7ebd611b8c4c
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Feb 20 09:50:57 2014 +0100

    ARM: efm32: drop selecting CLKSRC_MMIO
    
    CLKSRC_MMIO is needed on efm32 because the clocksource driver
    (CLKSRC_EFM32) uses clocksource_mmio_init() and
    clocksource_mmio_readl_up(). Since commit 09ca27579ee5 (clocksource:
    time-efm32: Select CLKSRC_MMIO) CLKSRC_EFM32 does the necessary select
    itself and ARCH_EFM32 doesn't need to select it explicitly any more.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>

commit fc8cd2ac0ad8fca1ca4699da53e635b3e9cc35ed
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Mon Feb 10 20:00:21 2014 -0300

    watchdog: orion: Use atomic access for shared registers
    
    Since the timer control register is shared with the clocksource driver,
    use the recently introduced atomic_io_clear_set() to access such register.
    Given the watchdog core already provides serialization for all the
    watchdog ops, this commit allows to remove the spinlock entirely.
    
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Tested-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Acked-by: Wim Van Sebroeck <wim@iguana.be>
    Tested-By: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit 567acf8e1766650c91a6613ec115efda6c559da4
Merge: 6d0abeca3242 6990c132abc9
Author: Olof Johansson <olof@lixom.net>
Date:   Thu Feb 20 01:11:52 2014 -0800

    Merge tag 'qcom-soc-for-3.15' of git://git.kernel.org/pub/scm/linux/kernel/git/galak/linux-qcom into next/soc
    
    Merge "Qualcomm ARM Based SoC Updates for v3.15" from Kumar Gala:
    
    * Add support for determining smp ops based on device tree.
    * Add DT binding specs for Krait/Scorpion enable method
    * Add DT binding specs for various Krait Processor controller complexes
    * Add SoC SMP support for Krait Processor Subsystem v1 & v2
    
    * tag 'qcom-soc-for-3.15' of git://git.kernel.org/pub/scm/linux/kernel/git/galak/linux-qcom:
      ARM: qcom: Add SMP support for KPSSv2
      ARM: qcom: Add SMP support for KPSSv1
      devicetree: bindings: Document qcom,saw2 node
      devicetree: bindings: Document qcom,kpss-acc
      devicetree: bindings: Document Krait/Scorpion cpus and enable-method
      ARM: qcom: Re-organize platsmp to make it extensible
      ARM: Introduce CPU_METHOD_OF_DECLARE() for cpu hotplug/smp
      ARM: qcom: Rename various msm prefixed functions to qcom
      clocksource: qcom: split building of legacy vs multiplatform support
      ARM: qcom: Split Qualcomm support into legacy and multiplatform
      clocksource: qcom: Move clocksource code out of mach-msm
      ARM: msm: kill off hotplug.c
      ARM: msm: Remove pen_release usage
      ARM: dts: msm: split out msm8660 and msm8960 soc into dts include
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit a671d255afb47bd2f83b94355b2848a0d46a1a92
Merge: 4a179c1f3784 cf1e8f0cd665
Author: Olof Johansson <olof@lixom.net>
Date:   Thu Feb 20 00:52:24 2014 -0800

    Merge tag 'qcom-cleanup-for-3.15' of git://git.kernel.org/pub/scm/linux/kernel/git/galak/linux-qcom into next/cleanup
    
    Merge "General cleanups for MSM/QCOM for 3.15" from Kumar Gala:
    
    Split of the multiplatform support for the Qualcomm SoCs into a mach-qcom
    while we leave mach-msm as legacy support.  Also, some smp and device tree
    related cleanups.
    
    * tag 'qcom-cleanup-for-3.15' of git://git.kernel.org/pub/scm/linux/kernel/git/galak/linux-qcom:
      ARM: qcom: Rename various msm prefixed functions to qcom
      clocksource: qcom: split building of legacy vs multiplatform support
      ARM: qcom: Split Qualcomm support into legacy and multiplatform
      clocksource: qcom: Move clocksource code out of mach-msm
      ARM: msm: kill off hotplug.c
      ARM: msm: Remove pen_release usage
      ARM: dts: msm: split out msm8660 and msm8960 soc into dts include
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 11d73c56b96b4297bd96273e9a22b7c72d13f1fa
Merge: 6d0abeca3242 fb3174e4ad24
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Feb 18 22:19:33 2014 -0800

    Merge tag 'dropmachtimexh-v2' of git://git.pengutronix.de/git/ukl/linux into next/cleanup
    
    This cleanup series gets rid of <mach/timex.h> for platforms not using
    ARCH_MULTIPLATFORM. (For multi-platform code it's already unused since
    387798b (ARM: initial multiplatform support).)
    
    To make this work some code out of arch/arm needed to be adapted. The
    respective changes got acks by their maintainers to be taken via armsoc
    (with Andrew Morton substituting for Alessandro Zummo as rtc maintainer).
    
    Compared to the previous pull request there was another patch added that
    fixes a (non-critical) regression on ixp4xx. Olof Johansson asked to not
    squash this fix into the original commit to save him from the need to
    reverify the series.
    
    * tag 'dropmachtimexh-v2' of git://git.pengutronix.de/git/ukl/linux:
      ARM: ixp4xx: fix timer latch calculation
      ARM: drop <mach/timex.h> for !ARCH_MULTIPLATFORM, too
      ARM: rpc: stop using <mach/timex.h>
      ARM: ixp4xx: stop using <mach/timex.h>
      input: ixp4xx-beeper: don't use symbols from <mach/timex.h>
      ARM: at91: don't use <mach/timex.h>
      ARM: ep93xx: stop using mach/timex.h
      ARM: mmp: stop using mach/timex.h
      ARM: netx: stop using mach/timex.h
      ARM: sa1100: stop using mach/timex.h
      clocksource: sirf/marco+prima2: drop usage of CLOCK_TICK_RATE
      rtc: pxa: drop unused #define TIMER_FREQ
      rtc: at91sam9: include <mach/hardware.h> explicitly
      ARM/serial: at91: switch atmel serial to use gpiolib
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 3a19c07c565c1e05b73b165c3dc0750d6863a81c
Merge: 9bd01b9bbdc0 dd5fd9b91a77
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Feb 15 16:04:42 2014 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "The following trilogy of patches brings you:
    
       - fix for a long standing math overflow issue with HZ < 60
    
       - an onliner fix for a corner case in the dreaded tick broadcast
         mechanism affecting a certain range of AMD machines which are
         infested with the infamous automagic C1E power control misfeature
    
       - a fix for one of the ARM platforms which allows the kernel to
         proceed and boot instead of stupidly panicing for no good reason.
         The patch is slightly larger than necessary, but it's less ugly
         than the alternative 5 liner"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      tick: Clear broadcast pending bit when switching to oneshot
      clocksource: Kona: Print warning rather than panic
      time: Fix overflow when HZ is smaller than 60

commit d9bd24c3bc422acf43f744124d6537921719352f
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun Dec 29 12:39:50 2013 +0000

    ARM: fix footbridge clockevent device
    
    commit 4ff859fe1dc0da0f87bbdfff78f527898878fa4a upstream.
    
    The clockevents code was being told that the footbridge clock event
    device ticks at 16x the rate which it actually does.  This leads to
    timekeeping problems since it allows the clocksource to wrap before
    the kernel notices.  Fix this by using the correct clock.
    
    Fixes: 4e8d76373c9fd ("ARM: footbridge: convert to clockevents/clocksource")
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    [bwh: Backported to 3.2: fold in the relevant parts of commit 838a2ae80a6a
     ('ARM: use clockevents_config_and_register() where possible')]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3581e56fd33b87ef485140c246d0db6c43fe4c58
Author: Pankaj Dubey <pankaj.dubey@samsung.com>
Date:   Fri Feb 14 07:25:05 2014 +0900

    clocksource: exynos_mct: remove unwanted header file inclusion
    
    remove unwanted header file inclusion "asm/mach/time.h" from exynos_mct.c
    
    Signed-off-by: Pankaj Dubey <pankaj.dubey@samsung.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit c588a2e83c793ddf4811c57a347916ddccb7060a
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Thu Jan 16 09:10:31 2014 +0100

    ARM: orion: provide C-style interrupt handler for MULTI_IRQ_HANDLER
    
    commit f28d7de6bd4d41774744e011141945affa127da4 upstream.
    
    DT-enabled Marvell Kirkwood and Dove SoCs make use of an irqchip
    driver. As expected for irqchip drivers, it uses a C-style
    interrupt handler and therefore selects MULTI_IRQ_HANDLER.
    
    Now, compiling a kernel with both non-DT and DT support enabled,
    selecting MULTI_IRQ_HANDLER will break ASM irq handler used by
    non-DT boards.
    
    Therefore, we provide a C-style irq handler even for non-DT boards,
    if MULTI_IRQ_HANDLER is set. By installing the C-style irq handler
    in orion_irq_init this is transparent to all non-DT board files.
    
    While the regression report was filed on Marvell Kirkwood, also
    Marvell Dove non-DT boards are affected and fixed by this patch.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Tested-by: Ian Campbell <ijc@hellion.org.uk>
    Reported-by: Ian Campbell <ijc@hellion.org.uk>
    Fixes: 2326f04321a9 ("ARM: kirkwood: convert to DT irqchip and clocksource")
    Fixes: f07d73e33d0e ("ARM: dove: convert to DT irqchip and clocksource")
    Acked-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd4042ce17f45dda46149a235a5e620bffbcafe6
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Thu Jan 16 09:10:31 2014 +0100

    ARM: orion: provide C-style interrupt handler for MULTI_IRQ_HANDLER
    
    commit f28d7de6bd4d41774744e011141945affa127da4 upstream.
    
    DT-enabled Marvell Kirkwood and Dove SoCs make use of an irqchip
    driver. As expected for irqchip drivers, it uses a C-style
    interrupt handler and therefore selects MULTI_IRQ_HANDLER.
    
    Now, compiling a kernel with both non-DT and DT support enabled,
    selecting MULTI_IRQ_HANDLER will break ASM irq handler used by
    non-DT boards.
    
    Therefore, we provide a C-style irq handler even for non-DT boards,
    if MULTI_IRQ_HANDLER is set. By installing the C-style irq handler
    in orion_irq_init this is transparent to all non-DT board files.
    
    While the regression report was filed on Marvell Kirkwood, also
    Marvell Dove non-DT boards are affected and fixed by this patch.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Tested-by: Ian Campbell <ijc@hellion.org.uk>
    Reported-by: Ian Campbell <ijc@hellion.org.uk>
    Fixes: 2326f04321a9 ("ARM: kirkwood: convert to DT irqchip and clocksource")
    Fixes: f07d73e33d0e ("ARM: dove: convert to DT irqchip and clocksource")
    Acked-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d6d45f86969acd57850ab4d91ea002db08ff235
Author: Kumar Gala <galak@codeaurora.org>
Date:   Wed Jan 29 17:01:37 2014 -0600

    clocksource: qcom: split building of legacy vs multiplatform support
    
    The majority of the clocksource code for the Qualcomm platform is shared
    between newer (multiplatform) and older platforms.  However there is a bit
    of code that isn't, so only build it for the appropriate config.
    
    Acked-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Kumar Gala <galak@codeaurora.org>

commit ad037c1f4ae6f9258f27fddb679ceb703ff07a88
Author: Tim Kryger <tim.kryger@linaro.org>
Date:   Tue Feb 4 16:15:04 2014 -0800

    clocksource: Kona: Print warning rather than panic
    
    Since there may be other clocksources available, this driver should not
    trigger a panic simply because it can not determine the frequency of an
    external clock.  This change refactors the driver to allow a warning to
    be printed in this case instead.
    
    Signed-off-by: Tim Kryger <tim.kryger@linaro.org>
    Reviewed-by: Markus Mayer <markus.mayer@linaro.org>
    Reviewed-by: Matt Porter <matt.porter@linaro.org>
    Cc: Christian Daudt <bcm@fixthebug.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1391559304-26558-1-git-send-email-tim.kryger@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 3f8e8cee2f4bd02367583cc2d143887d1f49fd6c
Author: Kumar Gala <galak@codeaurora.org>
Date:   Wed Jan 29 16:17:30 2014 -0600

    clocksource: qcom: Move clocksource code out of mach-msm
    
    We intend to share the clocksource code for MSM platforms between legacy
    and multiplatform supported qcom SoCs.
    
    Acked-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Kumar Gala <galak@codeaurora.org>

commit c29b8f3149f2916e98fc3b8d6c1df2137d003979
Merge: 587d1b06e07b 38dbfb59d117
Author: Mauro Carvalho Chehab <mchehab@kernel.org>
Date:   Mon Feb 3 15:32:45 2014 -0200

    Merge tag 'v3.14-rc1' into patchwork
    
    Linus 3.14-rc1
    
    * tag 'v3.14-rc1': (11781 commits)
      Linus 3.14-rc1
      hpfs: optimize quad buffer loading
      hpfs: remember free space
      parisc: add flexible mmap memory layout support
      parisc: Make EWOULDBLOCK be equal to EAGAIN on parisc
      parisc: convert uapi/asm/stat.h to use native types only
      parisc: wire up sched_setattr and sched_getattr
      parisc: fix cache-flushing
      parisc/sti_console: prefer Linux fonts over built-in ROM fonts
      hwmon: Fix SENSORS_TMP102 dependencies to eliminate build errors
      hwmon: Fix SENSORS_LM75 dependencies to eliminate build errors
      tools/power turbostat: introduce -s to dump counters
      tools/power turbostat: remove unused command line option
      afs: proc cells and rootcell are writeable
      tile: remove compat_sys_lookup_dcookie declaration to fix compile error
      Revert "PCI: Remove from bus_list and release resources in pci_release_dev()"
      ARM: multi_v7_defconfig: remove redundant entries and re-enable TI_EDMA
      ARM: multi_v7_defconfig: add mvebu drivers
      clocksource: kona: Add basic use of external clock
      drivers: bus: fix CCI driver kcalloc call parameters swap
      ...

commit e4c0da21650185cb7df6685c5437dad0e9f77028
Merge: 5cb480f6b488 f39aa2753724
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Feb 2 11:11:06 2014 -0800

    Merge tag 'fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC fixes from Olof Johansson:
     "Here's a set of patches for (hopefully) -rc1.  Some of them are fixes,
      but a good number of them also do things such as enable new drivers in
      the defconfigs for platforms that have such devices, increases
      coverage of the multiplatform defconfig and some DTS changes that
      plumbs up some of the devices that now have bindings and driver
      support.
    
      The commit dates are recent; we've mostly collected these fixes in the
      last few days but I also had to rebuild the branch yesterday to sort
      out some internal conflicts which reset the timestamps.  The changes
      should have been tested by each platform maintainer already (and few
      of them have cross-platform impact) so I'm personally not too
      concerned by it at this time"
    
    * tag 'fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (23 commits)
      ARM: multi_v7_defconfig: remove redundant entries and re-enable TI_EDMA
      ARM: multi_v7_defconfig: add mvebu drivers
      clocksource: kona: Add basic use of external clock
      drivers: bus: fix CCI driver kcalloc call parameters swap
      ARM: dts: bcm28155-ap: Fix Card Detection GPIO
      ARM: multi_v7_defconfig: Select CONFIG_AT803X_PHY
      ARM: keystone: config: fix build warning when CONFIG_DMADEVICES is not set
      MAINTAINERS: ARM: SiRF: use regex patterns to involve all SiRF drivers
      ARM: dts: zynq: Add SDHCI nodes
      ARM: hisi: don't select SMP
      ARM: tegra: rebuild tegra_defconfig to add DEBUG_FS
      ARM: multi_v7: copy most options from tegra_defconfig
      ARM: iop32x: fix power off handling for the EM7210 board
      ARM: integrator: restore static map on the CP
      ARM: msm_defconfig: Enable MSM clock drivers
      ARM: dts: msm: Add clock controller nodes and hook into uart
      ARM: OMAP4+: move errata initialization to omap4_pm_init_early
      ARM: OMAP4460: cpuidle: Extend PM_OMAP4_ROM_SMP_BOOT_ERRATUM_GICD on cpuidle
      ARM: mvebu: fix compilation warning on Armada 370 (i.e. non-SMP)
      ARM: shmobile: r8a7790.dtsi: ficx i2c[0-3] clock reference
      ...

commit 50ac206102660fe29e75d8a685178db95c530f4f
Author: Tim Kryger <tim.kryger@linaro.org>
Date:   Thu Dec 5 11:20:43 2013 -0800

    clocksource: kona: Add basic use of external clock
    
    When an clock is specified in the device tree, enable it and use it to
    determine the external clock frequency.
    
    Signed-off-by: Tim Kryger <tim.kryger@linaro.org>
    Reviewed-by: Markus Mayer <markus.mayer@linaro.org>
    Reviewed-by: Matt Porter <matt.porter@linaro.org>
    Reviewed-by: Christian Daudt <bcm@fixthebug.org>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Christian Daudt <bcm@fixthebug.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 6c6461435611e1d4843516f2d55e8316c009112e
Merge: a0fa1dd3cdbc 00e2bcd6d35f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 20 11:34:26 2014 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer changes from Ingo Molnar:
      - ARM clocksource/clockevent improvements and fixes
      - generic timekeeping updates: TAI fixes/improvements, cleanups
      - Posix cpu timer cleanups and improvements
      - dynticks updates: full dynticks bugfixes, optimizations and cleanups
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (46 commits)
      clocksource: Timer-sun5i: Switch to sched_clock_register()
      timekeeping: Remove comment that's mostly out of date
      rtc-cmos: Add an alarm disable quirk
      timekeeper: fix comment typo for tk_setup_internals()
      timekeeping: Fix missing timekeeping_update in suspend path
      timekeeping: Fix CLOCK_TAI timer/nanosleep delays
      tick/timekeeping: Call update_wall_time outside the jiffies lock
      timekeeping: Avoid possible deadlock from clock_was_set_delayed
      timekeeping: Fix potential lost pv notification of time change
      timekeeping: Fix lost updates to tai adjustment
      clocksource: sh_cmt: Add clk_prepare/unprepare support
      clocksource: bcm_kona_timer: Remove unused bcm_timer_ids
      clocksource: vt8500: Remove deprecated IRQF_DISABLED
      clocksource: tegra: Remove deprecated IRQF_DISABLED
      clocksource: misc drivers: Remove deprecated IRQF_DISABLED
      clocksource: sh_mtu2: Remove unnecessary platform_set_drvdata()
      clocksource: sh_tmu: Remove unnecessary platform_set_drvdata()
      clocksource: armada-370-xp: Enable timer divider only when needed
      clocksource: clksrc-of: Warn if no clock sources are found
      clocksource: orion: Switch to sched_clock_register()
      ...

commit 00e2bcd6d35f59fce7fa0e76e24d08f74c6a8506
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jan 16 17:38:06 2014 -0800

    clocksource: Timer-sun5i: Switch to sched_clock_register()
    
    The 32-bit sched_clock() interface supports 64 bits since
    3.13-rc1. Upgrade to the 64-bit function to allow us to remove
    the 32-bit registration interface.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Maxime Ripard <maxime.ripard@free-electrons.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1389922686-6249-1-git-send-email-sboyd@codeaurora.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit f28d7de6bd4d41774744e011141945affa127da4
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Thu Jan 16 09:10:31 2014 +0100

    ARM: orion: provide C-style interrupt handler for MULTI_IRQ_HANDLER
    
    DT-enabled Marvell Kirkwood and Dove SoCs make use of an irqchip
    driver. As expected for irqchip drivers, it uses a C-style
    interrupt handler and therefore selects MULTI_IRQ_HANDLER.
    
    Now, compiling a kernel with both non-DT and DT support enabled,
    selecting MULTI_IRQ_HANDLER will break ASM irq handler used by
    non-DT boards.
    
    Therefore, we provide a C-style irq handler even for non-DT boards,
    if MULTI_IRQ_HANDLER is set. By installing the C-style irq handler
    in orion_irq_init this is transparent to all non-DT board files.
    
    While the regression report was filed on Marvell Kirkwood, also
    Marvell Dove non-DT boards are affected and fixed by this patch.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Tested-by: Ian Campbell <ijc@hellion.org.uk>
    Reported-by: Ian Campbell <ijc@hellion.org.uk>
    Cc: <stable@vger.kernel.org> # v3.12+
    Fixes: 2326f04321a9 ("ARM: kirkwood: convert to DT irqchip and clocksource")
    Fixes: f07d73e33d0e ("ARM: dove: convert to DT irqchip and clocksource")
    Acked-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit 85ce70fdf48aa290b4845311c2dd815d7f8d1fa5
Merge: 9b6c4ea95ff8 9722c2dac708 e59da0aedb57
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 16 08:33:21 2014 +0700

    Merge branches 'sched-urgent-for-linus' and 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull scheduler and timer fixes from Ingo Molnar:
     "Contains a fix for a scheduler bug that manifested itself as a 3D
      performance regression and a crash fix for the ARM Cadence TTC clock
      driver"
    
    * 'sched-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      sched: Calculate effective load even if local weight is 0
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: cadence_ttc: Fix mutex taken inside interrupt context

commit 32956a0646e1f63e03d2dbf35370772934d5654f
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun Dec 29 12:39:50 2013 +0000

    ARM: fix footbridge clockevent device
    
    commit 4ff859fe1dc0da0f87bbdfff78f527898878fa4a upstream.
    
    The clockevents code was being told that the footbridge clock event
    device ticks at 16x the rate which it actually does.  This leads to
    timekeeping problems since it allows the clocksource to wrap before
    the kernel notices.  Fix this by using the correct clock.
    
    Fixes: 4e8d76373c9fd ("ARM: footbridge: convert to clockevents/clocksource")
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4adf2b4bd303e73dfc13c3428383a8dba129fdb5
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun Dec 29 12:39:50 2013 +0000

    ARM: fix footbridge clockevent device
    
    commit 4ff859fe1dc0da0f87bbdfff78f527898878fa4a upstream.
    
    The clockevents code was being told that the footbridge clock event
    device ticks at 16x the rate which it actually does.  This leads to
    timekeeping problems since it allows the clocksource to wrap before
    the kernel notices.  Fix this by using the correct clock.
    
    Fixes: 4e8d76373c9fd ("ARM: footbridge: convert to clockevents/clocksource")
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc77a313b995bdd4c8806593326ffea8d01ec7bc
Author: Magnus Damm <damm@opensource.se>
Date:   Wed Sep 18 15:01:16 2013 -0500

    clocksource: em_sti: Set cpu_possible_mask to fix SMP broadcast
    
    commit 2199a5574b6d94b9ca26c6345356f45ec60fef8b upstream.
    
    Update the STI driver by setting cpu_possible_mask to make EMEV2
    SMP work as expected together with the ARM broadcast timer.
    
    This breakage was introduced by:
    
    f7db706 ARM: 7674/1: smp: Avoid dummy clockevent being preferred over real hardware clock-event
    
    Without this fix SMP operation is broken on EMEV2 since no
    broadcast timer interrupts trigger on the secondary CPU cores.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Tested-by: Simon Horman <horms+renesas@verge.net.au>
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 855a0fc30b70d6ae681badd24d6625f9a9abb787
Author: Frederic Weisbecker <fweisbec@gmail.com>
Date:   Tue Dec 17 00:16:37 2013 +0100

    nohz: Get timekeeping max deferment outside jiffies_lock
    
    We don't need to fetch the timekeeping max deferment under the
    jiffies_lock seqlock.
    
    If the clocksource is updated concurrently while we stop the tick,
    stop machine is called and the tick will be reevaluated again along with
    uptodate jiffies and its related values.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Alex Shi <alex.shi@linaro.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Kevin Hilman <khilman@linaro.org>
    Link: http://lkml.kernel.org/r/1387320692-28460-9-git-send-email-fweisbec@gmail.com
    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>

commit 0fb4040e6ed69b62e64ec781694882309edbf33c
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Thu Oct 17 02:42:18 2013 +0400

    xtensa: mark ccount as continuous clocksource
    
    This allows ccount to be used as highres timer.
    
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Chris Zankel <chris@zankel.net>

commit 1b3f82876006bd4172ca7696aa367baf96ec7c15
Merge: d05d24a984f8 98aefbe72ec6
Author: Ingo Molnar <mingo@kernel.org>
Date:   Sun Jan 12 17:28:52 2014 +0100

    Merge branch 'clockevents/3.14' of git://git.linaro.org/people/daniel.lezcano/linux into timers/core
    
    Pull clocksource/clockevent updates from Daniel Lezcano:
    
      * Axel Lin removed an unused structure defining the ids for the
        bcm kona driver.
    
      * Ezequiel Garcia enabled the timer divider only when the 25MHz
        timer is not used for the armada 370 XP.
    
      * Jingoo Han removed a pointless platform data initialization for
        the sh_mtu and sh_mtu2.
    
      * Laurent Pinchart added the clk_prepare/clk_unprepare for sh_cmt.
    
      * Linus Walleij added a useful warning in clk_of when no clocks
        are found while the old behavior was to silently hang at boot time.
    
      * Maxime Ripard added the high speed timer drivers for the
        Allwinner SoCs (A10, A13, A20). He increased the rating, shared the
        irq across all available cpus and fixed the clockevent's irq
        initialization for the sun4i.
    
      * Michael Opdenacker removed the usage of the IRQF_DISABLED for the
        all the timers driver located in drivers/clocksource.
    
      * Stephen Boyd switched to sched_clock_register for the
        arm_global_timer, cadence_ttc, sun4i and orion timers.
    
    Conflicts:
            drivers/clocksource/clksrc-of.c
    
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 1b8f3096911f5e0c3bf7ec8739e181247e1fbc4f
Author: Dinh Nguyen <dinguyen@altera.com>
Date:   Tue Dec 10 19:49:18 2013 +0100

    clocksource: dw_apb_timer_of: Fix support for dts binding "snps,dw-apb-timer"
    
    commit 9ab4727c1d41e50b67aecde4bf11879560a3ca78 upstream.
    
    In commit 620f5e1cbf (dts: Rename DW APB timer compatible strings), both
    "snps,dw-apb-timer-sp" and "snps,dw-apb-timer-osc" were deprecated in place
    of "snps,dw-apb-timer". But the driver also needs to be udpated in order to
    support this new binding "snps,dw-apb-timer".
    
    Signed-off-by: Dinh Nguyen <dinguyen@altera.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dae60c345164a8073706611c321e94b71e9a036b
Author: Dinh Nguyen <dinguyen@altera.com>
Date:   Tue Dec 10 19:49:18 2013 +0100

    clocksource: dw_apb_timer_of: Fix read_sched_clock
    
    commit 85dc6ee1237c8a4a7742e6abab96a20389b7d682 upstream.
    
    The read_sched_clock should return the ~value because the clock is a
    countdown implementation. read_sched_clock() should be the same as
     __apbt_read_clocksource().
    
    Signed-off-by: Dinh Nguyen <dinguyen@altera.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 714c21cb90951905b269870087a99c37f3a7af0c
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 30 17:51:26 2013 +0000

    clocksource: arch_timer: use virtual counters
    
    commit 0d651e4e65e96989f72236bf83bd4c6e55eb6ce4 upstream.
    
    Switching between reading the virtual or physical counters is
    problematic, as some core code wants a view of time before we're fully
    set up. Using a function pointer and switching the source after the
    first read can make time appear to go backwards, and having a check in
    the read function is an unfortunate block on what we want to be a fast
    path.
    
    Instead, this patch makes us always use the virtual counters. If we're a
    guest, or don't have hyp mode, we'll use the virtual timers, and as such
    don't care about CNTVOFF as long as it doesn't change in such a way as
    to make time appear to travel backwards. As the guest will use the
    virtual timers, a (potential) KVM host must use the physical timers
    (which can wake up the host even if they fire while a guest is
    executing), and hence a host must have CNTVOFF set to zero so as to have
    a consistent view of time between the physical timers and virtual
    counters.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Cc: Rob Herring <rob.herring@calxeda.com>
    Cc: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3da8d9a6ae084d013bfe1b47c319380a91c7012a
Author: Dinh Nguyen <dinguyen@altera.com>
Date:   Tue Dec 10 19:49:18 2013 +0100

    clocksource: dw_apb_timer_of: Fix read_sched_clock
    
    commit 85dc6ee1237c8a4a7742e6abab96a20389b7d682 upstream.
    
    The read_sched_clock should return the ~value because the clock is a
    countdown implementation. read_sched_clock() should be the same as
     __apbt_read_clocksource().
    
    Signed-off-by: Dinh Nguyen <dinguyen@altera.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ced015aaa430e559ab2a44e858d25d6fdcca0a79
Merge: d0f2a5ba07ac 047ef2fa4e68
Author: Olof Johansson <olof@lixom.net>
Date:   Wed Jan 8 22:05:42 2014 -0800

    Merge tag 'bcm-for-3.14-soc' of git://github.com/broadcom/bcm11351 into next/soc
    
    From Christian Daudt, various defconfig udpates to bcm mobile.
    
    * tag 'bcm-for-3.14-soc' of git://github.com/broadcom/bcm11351:
      rename ARCH_BCM to ARCH_BCM_MOBILE (clocksource)
      ARM: bcm_defconfig: Unset CONFIG_CRYPTO_ANSI_CPRNG
      ARM: bcm_defconfig: Do not expect appended DTB
      ARM: bcm_defconfig: CONFIG_OABI_COMPAT default off
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit c1dcc927dae01dfd4904ee82ce2c00b50eab6dc3
Author: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date:   Tue Nov 26 17:04:50 2013 -0800

    clocksource: cadence_ttc: Fix mutex taken inside interrupt context
    
    When the kernel is compiled with:
    CONFIG_HIGH_RES_TIMERS=no
    CONFIG_HZ_PERIODIC=yes
    CONFIG_DEBUG_ATOMIC_SLEEP=yes
    
    The following WARN appears:
    
    WARNING: CPU: 1 PID: 0 at linux/kernel/mutex.c:856 mutex_trylock+0x70/0x1fc()
    DEBUG_LOCKS_WARN_ON(in_interrupt())
    Modules linked in:
    CPU: 1 PID: 0 Comm: swapper/1 Not tainted 3.12.0-xilinx-dirty #93
    [<c0014a78>] (unwind_backtrace+0x0/0x11c) from [<c0011b6c>] (show_stack+0x10/0x14)
    [<c0011b6c>] (show_stack+0x10/0x14) from [<c039120c>] (dump_stack+0x7c/0xc0)
    [<c039120c>] (dump_stack+0x7c/0xc0) from [<c001fda4>] (warn_slowpath_common+0x60/0x84)
    [<c001fda4>] (warn_slowpath_common+0x60/0x84) from [<c001fe48>] (warn_slowpath_fmt+0x2c/0x3c)
    [<c001fe48>] (warn_slowpath_fmt+0x2c/0x3c) from [<c0392658>] (mutex_trylock+0x70/0x1fc)
    [<c0392658>] (mutex_trylock+0x70/0x1fc) from [<c02dfc08>] (clk_prepare_lock+0xc/0xe4)
    [<c02dfc08>] (clk_prepare_lock+0xc/0xe4) from [<c02e099c>] (clk_get_rate+0xc/0x44)
    [<c02e099c>] (clk_get_rate+0xc/0x44) from [<c02d0394>] (ttc_set_mode+0x34/0x78)
    [<c02d0394>] (ttc_set_mode+0x34/0x78) from [<c005f794>] (clockevents_set_mode+0x28/0x5c)
    [<c005f794>] (clockevents_set_mode+0x28/0x5c) from [<c00607fc>] (tick_broadcast_on_off+0x190/0x1c0)
    [<c00607fc>] (tick_broadcast_on_off+0x190/0x1c0) from [<c005f168>] (clockevents_notify+0x58/0x1ac)
    [<c005f168>] (clockevents_notify+0x58/0x1ac) from [<c02b99dc>] (cpuidle_setup_broadcast_timer+0x20/0x24)
    [<c02b99dc>] (cpuidle_setup_broadcast_timer+0x20/0x24) from [<c006cd04>] (generic_smp_call_function_single_interrupt+0)
    [<c006cd04>] (generic_smp_call_function_single_interrupt+0xe0/0x130) from [<c00138c8>] (handle_IPI+0x88/0x118)
    [<c00138c8>] (handle_IPI+0x88/0x118) from [<c0008504>] (gic_handle_irq+0x58/0x60)
    [<c0008504>] (gic_handle_irq+0x58/0x60) from [<c0012644>] (__irq_svc+0x44/0x78)
    Exception stack(0xef099fa0 to 0xef099fe8)
    9fa0: 00000001 ef092100 00000000 ef092100 ef098000 00000015 c0399f2c c0579d74
    9fc0: 0000406a 413fc090 00000000 00000000 00000000 ef099fe8 c00666ec c000f46c
    9fe0: 20000113 ffffffff
    [<c0012644>] (__irq_svc+0x44/0x78) from [<c000f46c>] (arch_cpu_idle+0x34/0x3c)
    [<c000f46c>] (arch_cpu_idle+0x34/0x3c) from [<c0053980>] (cpu_startup_entry+0xa8/0x10c)
    [<c0053980>] (cpu_startup_entry+0xa8/0x10c) from [<000085a4>] (0x85a4)
    
    We are in an interrupt context (IPI) and we are calling clk_get_rate in the
    set_mode function which in turn ends up by getting a mutex... Even if that
    does not hang, it is a potential kernel deadlock.
    
    It is not allowed to call clk_get_rate() from interrupt context. To
    avoid such calls the timer input frequency is stored in the driver's
    data struct which makes it accessible to the driver in any context.
    
    [dlezcano] completed the changelog with the WARN trace and added a more
    detailed description. Tested on zync zc702.
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Tested-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4ff859fe1dc0da0f87bbdfff78f527898878fa4a
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun Dec 29 12:39:50 2013 +0000

    ARM: fix footbridge clockevent device
    
    The clockevents code was being told that the footbridge clock event
    device ticks at 16x the rate which it actually does.  This leads to
    timekeeping problems since it allows the clocksource to wrap before
    the kernel notices.  Fix this by using the correct clock.
    
    Fixes: 4e8d76373c9fd ("ARM: footbridge: convert to clockevents/clocksource")
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Cc: <stable@vger.kernel.org>

commit 2652fbde3f423112b0acd5e7f8ec75c31a04d752
Merge: 448e7edefa92 e0b51c2eae8e
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Dec 22 14:12:57 2013 -0800

    Merge tag 'samsung-dt' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung into next/dt
    
    From Kukjin Kim:
    Samsung DT updates for v3.14
    - Add support Octa Cores for exynos5420
      : populate CPU node entries to 8 Cores
      : extend mct to support 8 local interrupts
    - Update dwmmc nodes for exynos5250 and exynos5420
      : change status property of dwmmc nodes for exynos5250
      : move dwmmc nodes from exynos5 to exynos5250 because
        it's different between exynos5250 and exynos5420
      : rename mmc nodes from dwmmc for exynos5 SoCs
      : add dwmmc nodes for exynos5420
    - Add G-Scaler nodes for exynos5420
    - Add HS-i2c nodes in exynos5420
      : High Speed I2C 7 channels (4 to 10)
    - Update sysreg binding and node name in exynos4
    - Update min voltage on exynos5250-arndale
    - Move fifo-depth property from boards to exynos5250 SoC
      : because the fifo-depth property is SoC specific
    
    * tag 'samsung-dt' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung:
      ARM: dts: Update Samsung sysreg binding document
      ARM: dts: Fix sysreg node name in exynos4.dtsi
      ARM: dts: Add hs-i2c nodes to exynos5420
      ARM: dts: Update min voltage for vdd_arm on Arndale
      ARM: dts: populate cpu node entries to 8 cpus for exynos5420
      clocksource: mct: extend mct to support 8 local interrupts for Exynos5420
      ARM: dts: Add device nodes for GScaler blocks for exynos5420
      ARM: dts: Add dwmmc DT nodes for exynos5420 SOC
      ARM: dts: rename mmc dts node for exynos5 series
      ARM: dts: Move fifo-depth property from exynos5250 board dts
      ARM: dts: change status property of dwmmc nodes for exynos5250
      ARM: dts: Move dwmmc nodes from exynos5.dtsi to exynos5250.dtsi
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 980c51ab0774b7cd701eeb84056c148f84e152d8
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Nov 11 21:06:11 2013 +0100

    clocksource: sirf/marco+prima2: drop usage of CLOCK_TICK_RATE
    
    Since CSR SiRF was converted to multi platform in cf82e0e (ARM: sirf:
    enable multiplatform support) the symbol CLOCK_TICK_RATE isn't the
    platform specific definition any more, but a global dummy value. There
    was no harm introduced in cf82e0e because the global value happens to
    match the old platform specific one, still this dummy value isn't
    intended to be used and will hopefully disappear soon, so introduce a
    local #define and use that instead.
    
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>

commit 98aefbe72ec6015f90fe045ed16c5cf755da283d
Merge: 6d19944bd260 57dee992df24
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Wed Dec 18 15:14:11 2013 +0100

    Merge branch 'clockevents/for-Simon-3.13-rc2' into clockevents/3.14
    
     * clocksource: sh_cmt: Add clk_prepare/unprepare support
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 57dee992df244ccce6a6a3a88a43160e285da5d8
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Sat Dec 14 15:07:32 2013 +0900

    clocksource: sh_cmt: Add clk_prepare/unprepare support
    
    Prepare the clock at probe time, as there is no other appropriate place
    in the driver where we're allowed to sleep.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 941ef73dbe337623e5eb3fd0a43bc1fc56082bb6
Merge: dd0508093b79 5d5119a476f7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 17 12:36:26 2013 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Ingo Molnar:
     "Five self-contained fixlets:
    
       - fix clocksource driver build bug
       - fix two sched_clock() bugs triggering on specific hardware
       - fix devicetree enumeration bug affecting specific hardware
       - fix irq handler registration race resulting in boot crash
       - fix device node refcount bug"
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: dw_apb_timer_of: Fix support for dts binding "snps,dw-apb-timer"
      clocksource: dw_apb_timer_of: Fix read_sched_clock
      clocksource: sunxi: Stop timer from ticking before enabling interrupts
      clocksource: clksrc-of: Do not drop unheld reference on device node
      clocksource: armada-370-xp: Register sched_clock after the counter reset
      clocksource: time-efm32: Select CLKSRC_MMIO

commit 6c16dedfd4c49c6a7f410f171c6da3116834a23d
Author: Chander Kashyap <chander.kashyap@linaro.org>
Date:   Mon Dec 2 07:48:23 2013 +0900

    clocksource: mct: extend mct to support 8 local interrupts for Exynos5420
    
    Exynos5420 is octa-core SoC from Samsung. Hence extend exynos-mct clocksource
    driver to support 8 local interrupts.
    
    Also extend dts entries for 8 interrupts.
    
    Signed-off-by: Chander Kashyap <chander.kashyap@linaro.org>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 047ef2fa4e687b6c0d4e7d47b8a184147151482c
Author: Christian Daudt <bcm@fixthebug.org>
Date:   Mon Sep 23 10:20:34 2013 -0700

    rename ARCH_BCM to ARCH_BCM_MOBILE (clocksource)
    
    Currently ARCH_BCM has been used for Broadcom
    Mobile V7 based SoCs. In order to allow other Broadcom
    SoCs to also use mach-bcm directory and files, this patch
    renames the original ARCH_BCM to ARCH_BCM_MOBILE, and
    uses ARCH_BCM to define any Broadcom chip residing
    in mach-bcm directory.
    
    Signed-off-by: Christian Daudt <bcm@fixthebug.org>
    Acked-by: Olof Johansson <olof@lixom.net>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6d19944bd2609a1d7d48149605aa9f62ca8bf640
Author: Axel Lin <axel.lin@ingics.com>
Date:   Mon Nov 25 09:54:45 2013 +0800

    clocksource: bcm_kona_timer: Remove unused bcm_timer_ids
    
    bcm_timer_ids is no longer used after converting to CLOCKSOURCE_OF_DECLARE.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 39039eb31c6e5252e25ec6336d92ddef938ccafa
Author: Michael Opdenacker <michael.opdenacker@free-electrons.com>
Date:   Mon Dec 9 10:38:50 2013 +0100

    clocksource: vt8500: Remove deprecated IRQF_DISABLED
    
    This patch removes the use of the IRQF_DISABLED flag.
    
    It's a NOOP since 2.6.35 and it will be removed one day.
    
    [dlezcano] : slightly changed the changelog
    
    Signed-off-by: Michael Opdenacker <michael.opdenacker@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 39304fad8f31b2114492e9a09fe0bd1ac7eb1834
Author: Michael Opdenacker <michael.opdenacker@free-electrons.com>
Date:   Mon Dec 9 10:35:45 2013 +0100

    clocksource: tegra: Remove deprecated IRQF_DISABLED
    
    This patch removes the use of the IRQF_DISABLED flag.
    
    It's a NOOP since 2.6.35 and it will be removed one day.
    
    [dlezcano] : slightly changed the changelog
    
    Signed-off-by: Michael Opdenacker <michael.opdenacker@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 38c30a8421ce8b06492121deee422ba7ecfaeef2
Author: Michael Opdenacker <michael.opdenacker@free-electrons.com>
Date:   Mon Dec 9 10:12:10 2013 +0100

    clocksource: misc drivers: Remove deprecated IRQF_DISABLED
    
    This patch removes the use of the IRQF_DISABLED flag
    
    It's a NOOP since 2.6.35 and it will be removed one day.
    
    [dlezcano] : slightly changed the changelog
    
    Signed-off-by: Michael Opdenacker <michael.opdenacker@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 87d4bb9fced08054afb83af2d85f5cf0ba0e21e4
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Tue Dec 3 15:51:06 2013 +0900

    clocksource: sh_mtu2: Remove unnecessary platform_set_drvdata()
    
    The driver core clears the driver data to NULL after device_release
    or on probe failure. Thus, it is not needed to manually clear the
    device driver data to NULL.
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Acked-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5707f18c28f4df0f993d965aff1c168b69637d63
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Tue Dec 3 15:50:09 2013 +0900

    clocksource: sh_tmu: Remove unnecessary platform_set_drvdata()
    
    The driver core clears the driver data to NULL after device_release
    or on probe failure. Thus, it is not needed to manually clear the
    device driver data to NULL.
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Acked-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 08cb8e460956489fcfbfab5a7d33e62acd190b9a
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Mon Dec 2 11:39:56 2013 +0100

    clocksource: armada-370-xp: Enable timer divider only when needed
    
    The current code sets the timer divider bits always. However, when
    the 25 MHz timer is enabled, this is not needed and has no effect.
    As this causes some confusion, rework the code so the divider is
    set only when needed, i.e. when the 25 MHz timer is not in use.
    
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fdca679d87bb4ac0fdc882dbf3deb47a1f58b813
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Nov 20 09:58:56 2013 +0100

    clocksource: clksrc-of: Warn if no clock sources are found
    
    Many platforms rely on clocksource_of_init() being implicitly
    called for registering clock sources and will get zero warnings
    if no working clock source is available. Let's print a critical
    error message if no clock source is found.
    
    Acked-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2e8bac532f8bcd3834853e0a22b130b9fd59270d
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Nov 20 00:47:32 2013 +0100

    clocksource: orion: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Cc: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Tested-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 662e7230ee16951e6858c01e72db87c5dc46150e
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Nov 20 00:47:32 2013 +0100

    clocksource: sun4i: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface. While we're here, mark the sched_clock function as
    notrace to prevent ftrace recursion crashes.
    
    Cc: Maxime Ripard <maxime.ripard@free-electrons.com>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit dfded00902d7437963870accbcf4b39114e85f59
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Nov 20 00:47:32 2013 +0100

    clocksource: cadence_ttc_timer: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Cc: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Cc: Michal Simek <monstr@monstr.eu>
    Tested-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit af066fce5fa6b615588732cad6909c450a9eb616
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Nov 20 00:47:32 2013 +0100

    clocksource: arm_global_timer: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface. While we're here increase the number of bits that
    sched_clock can handle to 64 to make full use of the counter.
    
    Cc: Stuart Menefy <stuart.menefy@st.com>
    Cc: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    Acked-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    Acked-by: Stuart Menefy <stuart.menefy@st.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 67905540e8b8eaf51e621cfd2ef15641d6d5b9a7
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Nov 7 12:01:48 2013 +0100

    clocksource: Add Allwinner SoCs HS timers driver
    
    Most of the Allwinner SoCs (at this time, all but the A10) also have a
    High Speed timers that are not using the 24MHz oscillator as a source
    but rather the AHB clock running much faster.
    
    The IP is slightly different between the A10s/A13 and the one used in
    the A20/A31, since the latter have 4 timers available, while the former
    have only 2 of them.
    
    [dlezcano] : Fixed conflict with b788beda "Order Kconfig options
                    alphabetically"
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Tested-by: Emilio López <emilio@elopez.com.ar>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5df9affb50a09e0cb571c4fa3e2d577db85c7475
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Thu Nov 7 12:01:48 2013 +0100

    clocksource: sun4i: Increase a bit the clock event and sources rating
    
    We want to keep this driver as the default provider of the clock events
    and source, yet some other driver might fit in the "desired" category of
    ratings. Hence, we need to increase a bit the rating so that we can have
    more flexibility in the ratings we choose.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Tested-by: Emilio López <emilio@elopez.com.ar>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 2c28f32ca4c98b41ad95f62fa27f59f3117931d4
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Fri Oct 25 12:16:11 2013 +0100

    clocksource: sun4i: Change CPU mask to cpu_possible_mask
    
    The interrupt for the timer is a shared processor interrupt, so any CPU
    found in the system can handle it. Switch to our cpumask to
    cpu_possible_mask instead of cpumask_of(0).
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>

commit 5d5119a476f77b57381ddd66d4f7034a5447480b
Merge: 17b2112f332d 9ab4727c1d41
Author: Ingo Molnar <mingo@kernel.org>
Date:   Tue Dec 10 20:47:22 2013 +0100

    Merge branch 'clockevents/fixes' of git://git.linaro.org/people/daniel.lezcano/linux into timers/urgent
    
    Pull clockevents/clocksource fixes from Daniel Lezcano:
    
      * Axel Lin added a missing dependency on CLKSRC_MMIO in the Kconfig
        for the time-efm32
    
      * Dinh Nguyen fixed read_sched_clock to return the right value and
        added the clksrc-of missing definition for the dw_apb_timer
    
      * Ezequiel Garcia registered the sched clock after the counter,
        thus preventing time jump in the traces for the armada-370-xp
    
      * Marc Zyngier stopped the timer before enabling the irq in order
        to prevent it to be fired before the clockevent is registered for
        the sunxi
    
      * Thierry Reding removed a of_node_put in clksrc-of because the
        reference is not held
    
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 9ab4727c1d41e50b67aecde4bf11879560a3ca78
Author: Dinh Nguyen <dinguyen@altera.com>
Date:   Tue Dec 10 19:49:18 2013 +0100

    clocksource: dw_apb_timer_of: Fix support for dts binding "snps,dw-apb-timer"
    
    In commit 620f5e1cbf (dts: Rename DW APB timer compatible strings), both
    "snps,dw-apb-timer-sp" and "snps,dw-apb-timer-osc" were deprecated in place
    of "snps,dw-apb-timer". But the driver also needs to be udpated in order to
    support this new binding "snps,dw-apb-timer".
    
    Signed-off-by: Dinh Nguyen <dinguyen@altera.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 85dc6ee1237c8a4a7742e6abab96a20389b7d682
Author: Dinh Nguyen <dinguyen@altera.com>
Date:   Tue Dec 10 19:49:18 2013 +0100

    clocksource: dw_apb_timer_of: Fix read_sched_clock
    
    The read_sched_clock should return the ~value because the clock is a
    countdown implementation. read_sched_clock() should be the same as
     __apbt_read_clocksource().
    
    Signed-off-by: Dinh Nguyen <dinguyen@altera.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6db50bb67598668c525f12e2f7191f5d03ca46f2
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Mon Dec 2 09:29:35 2013 +0000

    clocksource: sunxi: Stop timer from ticking before enabling interrupts
    
    The sun4i timer can still be ticking when we enable the interrupt.
    If another timer is actually used (A7 architected timer, for example),
    odds are that the interrupt will eventually fire with the event_handler
    pointer being NULL.
    
    The obvious fix it to stop the timer before registering the interrupt.
    
    Observed and tested on sun7i (cubietruck).
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4c4b053235fa73db1ea241aa5a6b021afb0ed8db
Author: Thierry Reding <thierry.reding@gmail.com>
Date:   Sat Oct 19 00:49:48 2013 +0200

    clocksource: clksrc-of: Do not drop unheld reference on device node
    
    When booting a recent kernel on ARM with OF_DYNAMIC enabled, the kernel
    warns about the following:
    
            [    0.000000] ERROR: Bad of_node_put() on /timer@50004600
            [    0.000000] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 3.12.0-rc5-next-20131017-00077-gedfd827-dirty #406
            [    0.000000] [<c0015b68>] (unwind_backtrace+0x0/0xf4) from [<c00117e4>] (show_stack+0x10/0x14)
            [    0.000000] [<c00117e4>] (show_stack+0x10/0x14) from [<c055f734>] (dump_stack+0x9c/0xc8)
            [    0.000000] [<c055f734>] (dump_stack+0x9c/0xc8) from [<c03b47d4>] (of_node_release+0x90/0x9c)
            [    0.000000] [<c03b47d4>] (of_node_release+0x90/0x9c) from [<c03b5084>] (of_find_matching_node_and_match+0x78/0xb4)
            [    0.000000] [<c03b5084>] (of_find_matching_node_and_match+0x78/0xb4) from [<c07887c8>] (clocksource_of_init+0x60/0x70)
            [    0.000000] [<c07887c8>] (clocksource_of_init+0x60/0x70) from [<c076e99c>] (start_kernel+0x1f4/0x33c)
            [    0.000000] [<c076e99c>] (start_kernel+0x1f4/0x33c) from [<80008074>] (0x80008074)
    
    This is caused by clocksource_of_init() dropping a reference on the
    device node that it never took. The reference taken by the loop is
    implicitly dropped on subsequent iterations. See the implementation of
    and the comment on top of the of_find_matching_node_and_match()
    function for reference (no pun intended).
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>

commit c813eff078588733a3d1a46c033c2d59d66a263b
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Nov 26 18:20:14 2013 -0300

    clocksource: armada-370-xp: Register sched_clock after the counter reset
    
    This commit registers the sched_clock _after_ the counter reset
    (instead of before). This removes the timestamp 'jump' in kernel
    log messages.
    
    Before this change:
    
    [    0.000000] sched_clock: 32 bits at 25MHz, resolution 40ns, wraps every 171798691800ns
    [    0.000000] Initializing Coherency fabric
    [    0.000000] Aurora cache controller enabled
    [    0.000000] l2x0: 16 ways, CACHE_ID 0x00000100, AUX_CTRL 0x1a696b12, Cache size: 1024 kB
    [  163.507447] Calibrating delay loop... 1325.05 BogoMIPS (lpj=662528)
    [  163.521419] pid_max: default: 32768 minimum: 301
    [  163.526185] Mount-cache hash table entries: 512
    [  163.531095] CPU: Testing write buffer coherency: ok
    
    After this change:
    
    [    0.000000] sched_clock: 32 bits at 25MHz, resolution 40ns, wraps every 171798691800ns
    [    0.000000] Initializing Coherency fabric
    [    0.000000] Aurora cache controller enabled
    [    0.000000] l2x0: 16 ways, CACHE_ID 0x00000100, AUX_CTRL 0x1a696b12, Cache size: 1024 kB
    [    0.016849] Calibrating delay loop... 1325.05 BogoMIPS (lpj=662528)
    [    0.030820] pid_max: default: 32768 minimum: 301
    [    0.035588] Mount-cache hash table entries: 512
    [    0.040500] CPU: Testing write buffer coherency: ok
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Jason Cooper <jason@lakedaemon.net>

commit 09ca27579ee5a1b6f537b82165080b85c1febac8
Author: Axel Lin <axel.lin@ingics.com>
Date:   Wed Nov 20 10:15:11 2013 +0800

    clocksource: time-efm32: Select CLKSRC_MMIO
    
    The time-efm32 driver uses the clocksource MMIO functions.
    Thus it needs to select CLKSRC_MMIO in Kconfig.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>

commit 1ab231b274ba51a54acebec23c6aded0f3cdf54e
Merge: dea4f48a0a30 0e576acbc1d9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 4 08:52:09 2013 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
    
     - timekeeping: Cure a subtle drift issue on GENERIC_TIME_VSYSCALL_OLD
    
     - nohz: Make CONFIG_NO_HZ=n and nohz=off command line option behave the
       same way.  Fixes a long standing load accounting wreckage.
    
     - clocksource/ARM: Kconfig update to avoid ARM=n wreckage
    
     - clocksource/ARM: Fixlets for the AT91 and SH clocksource/clockevents
    
     - Trivial documentation update and kzalloc conversion from akpms pile
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      nohz: Fix another inconsistency between CONFIG_NO_HZ=n and nohz=off
      time: Fix 1ns/tick drift w/ GENERIC_TIME_VSYSCALL_OLD
      clocksource: arm_arch_timer: Hide eventstream Kconfig on non-ARM
      clocksource: sh_tmu: Add clk_prepare/unprepare support
      clocksource: sh_tmu: Release clock when sh_tmu_register() fails
      clocksource: sh_mtu2: Add clk_prepare/unprepare support
      clocksource: sh_mtu2: Release clock when sh_mtu2_register() fails
      ARM: at91: rm9200: switch back to clockevents_config_and_register
      tick: Document tick_do_timer_cpu
      timer: Convert kmalloc_node(...GFP_ZERO...) to kzalloc_node(...)
      NOHZ: Check for nohz active instead of nohz enabled

commit 8da15e17408c58ff45dc8e01dad8775246ef2220
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Nov 19 22:17:06 2013 +0100

    ARM: ux500: decomission the non-DT MTU init sequence
    
    The MTU is now only initialized using the native clocksource
    device tree matching.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 192b4bcbbe7f226a063c57c82007dbdd31739c54
Merge: c61248afa819 793b4b107201
Author: Kevin Hilman <khilman@linaro.org>
Date:   Mon Nov 25 15:54:42 2013 -0800

    Merge tag 'imx-fixes-3.13-2' of git://git.linaro.org/people/shawnguo/linux-2.6 into fixes
    
    The imx fixes for 3.13, part 2:
     - Disable S/PDIF "rxtx5" clock option to fix the clocksource breakage
       introduced by S/PDIF driver
    
    * tag 'imx-fixes-3.13-2' of git://git.linaro.org/people/shawnguo/linux-2.6:
      ARM: dts: imx6qdl: disable spdif "rxtx5" clock option
    
    Signed-off-by: Kevin Hilman <khilman@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 7805d2bdfe47151a1973f86bc98e1582523ecece
Author: Arnaud Patard <arnaud.patard@rtp-net.org>
Date:   Tue Nov 5 19:09:14 2013 +0100

    ARM: kirkwood: stop printk TCLK value at boot for DT boards
    
    Commit 2326f04321a9 (ARM: kirkwood: convert to DT irqchip and clocksource)
    dropped the call to kirkwood_timer_init() when booting with DT.
    This results in kirkwood_tclk not being set and the boot message is now:
    
    Kirkwood: MV88F6281-A0, TCLK=0
    
    This patch modifies the message for printing only the kirkwood id,
    as it allows to detect if we're running A0/A1/... variants with a simple
    dmesg.
    
    Signed-off-by: Arnaud Patard <arnaud.patard@rtp-net.org>
    Acked-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Acked-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit 77f7ce9a9f636daaa65731a833bae1311a7b80e5
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Nov 20 12:02:03 2013 -0800

    clocksource: arm_arch_timer: Hide eventstream Kconfig on non-ARM
    
    Pavel Machek reports that this config is exposed on x86 where the
    ARM architected timers aren't even present. Make it depend on the
    ARM architected timers being selected so that non-ARM builds
    aren't asked about it.
    
    Reported-by: Pavel Machek <pavel@ucw.cz>
    Reviewed-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d5bdaf4f68f0590fc481bca54bcaffeb27b75fca
Merge: dc6ec87d4c77 5cfe8f1ba5ee
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 20 15:03:45 2013 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mattst88/alpha
    
    Pull alpha updates from Matt Turner:
     "It contains a few fixes and some work from Richard to make alpha
      emulation under QEMU much more usable"
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mattst88/alpha:
      alpha: Prevent a NULL ptr dereference in csum_partial_copy.
      alpha: perf: fix out-of-bounds array access triggered from raw event
      alpha: Use qemu+cserve provided high-res clock and alarm.
      alpha: Switch to GENERIC_CLOCKEVENTS
      alpha: Enable the rpcc clocksource for single processor
      alpha: Reorganize rtc handling
      alpha: Primitive support for CPU power down.
      alpha: Allow HZ to be configured
      alpha: Notice if we're being run under QEMU
      alpha: Eliminate compiler warning from memset macro

commit 1c09eb3e2d761ffd152faa6b9d06caf560e7d445
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri Nov 8 11:08:00 2013 +0100

    clocksource: sh_tmu: Add clk_prepare/unprepare support
    
    Prepare the clock at probe time, as there is no other appropriate place
    in the driver where we're allowed to sleep.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Acked-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 394a4486f009a184b58fc2f2435d6f5f800870bb
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri Nov 8 11:07:59 2013 +0100

    clocksource: sh_tmu: Release clock when sh_tmu_register() fails
    
    Fix the probe error path to release the clock resource when the
    sh_tmu_register() call fails.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Acked-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bd7549308eed47b3750b3dab692034a553e75663
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri Nov 8 11:07:59 2013 +0100

    clocksource: sh_mtu2: Add clk_prepare/unprepare support
    
    Prepare the clock at probe time, as there is no other appropriate place
    in the driver where we're allowed to sleep.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Acked-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a4a5fc3b64cd553820d97667056506636eaaba77
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Fri Nov 8 11:07:59 2013 +0100

    clocksource: sh_mtu2: Release clock when sh_mtu2_register() fails
    
    Fix the probe error path to release the clock resource when the
    sh_mtu2_register() call fails.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Acked-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit d689fe222a858c767cb8594faf280048e532b53f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 13 21:01:57 2013 +0100

    NOHZ: Check for nohz active instead of nohz enabled
    
    RCU and the fine grained idle time accounting functions check
    tick_nohz_enabled. But that variable is merily telling that NOHZ has
    been enabled in the config and not been disabled on the command line.
    
    But it does not tell anything about nohz being active. That's what all
    this should check for.
    
    Matthew reported, that the idle accounting on his old P1 machine
    showed bogus values, when he enabled NOHZ in the config and did not
    disable it on the kernel command line. The reason is that his machine
    uses (refined) jiffies as a clocksource which explains why the "fine"
    grained accounting went into lala land, because it depends on when the
    system goes and leaves idle relative to the jiffies increment.
    
    Provide a tick_nohz_active indicator and let RCU and the accounting
    code use this instead of tick_nohz_enable.
    
    Reported-and-tested-by: Matthew Whitehead <tedheadster@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
    Reviewed-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: john.stultz@linaro.org
    Cc: mwhitehe@redhat.com
    Link: http://lkml.kernel.org/r/alpine.DEB.2.02.1311132052240.30673@ionos.tec.linutronix.de

commit 793b4b10720174b6b27beaf915425248858d7fc5
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sat Nov 16 22:38:29 2013 +0800

    ARM: dts: imx6qdl: disable spdif "rxtx5" clock option
    
    The spdif "rxtx5" clock option is being set to ipg clk (62) by mistake.
    This causes an incorrect time keeping when spdif driver is running,
    because ipg is ancestor clock for clocksource while spdif driver will
    change the rate of this clock in certain circumstance.  Before the
    correct clock for "rxtx5" option can be supplied, let's disable this
    option for now by filling a dummy clock for it.
    
    Reported-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

commit a1659d6d128a7e0c2985bce7c957b66af1f71181
Author: Richard Henderson <rth@twiddle.net>
Date:   Sun Jul 14 10:57:34 2013 -0700

    alpha: Switch to GENERIC_CLOCKEVENTS
    
    This allows us to get rid of some hacky code for SMP.  Get rid of
    some cycle counter hackery that's now handled by generic code via
    clocksource + clock_event_device objects.
    
    Signed-off-by: Richard Henderson <rth@twiddle.net>

commit db2d3260617ae8c9076ef12e6de06bd5b3d82cd3
Author: Richard Henderson <rth@twiddle.net>
Date:   Sun Jul 14 09:55:08 2013 -0700

    alpha: Enable the rpcc clocksource for single processor
    
    Don't depend on SMP, just check the number of processors online.
    This allows a single distribution kernel to use the clocksource
    when run on a single processor machine.  Do depend on whether or
    not we're using WTINT.
    
    Signed-off-by: Richard Henderson <rth@twiddle.net>

commit 6e181a455cf06c53e0c008190bfe2b4773ed0beb
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Sep 13 21:45:51 2013 +0200

    clk: nomadik: set all timers to use 2.4 MHz TIMCLK
    
    commit b9b5ab11ea221a9f2d5af41da639e0898675c34c upstream.
    
    This fixes a regression for the Nomadik on the main system
    timers.
    
    The Nomadik seemed a bit slow and its heartbeat wasn't looking
    healthy. And it was not strange, because it has been connected
    to the 32768 Hz clock at boot, while being told by the clock driver
    that it was 2.4MHz. Actually connect the TIMCLK to 2.4MHz by
    default as this is what we want for nice scheduling, clocksource
    and clock event.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 728ccd1f9a6e8ec19e001d8b4d1e2930c9034068
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Sep 24 21:50:23 2013 +0200

    clockevents: Sanitize ticks to nsec conversion
    
    commit 97b9410643475d6557d2517c2aff9fd2221141a9 upstream.
    
    Marc Kleine-Budde pointed out, that commit 77cc982 "clocksource: use
    clockevents_config_and_register() where possible" caused a regression
    for some of the converted subarchs.
    
    The reason is, that the clockevents core code converts the minimal
    hardware tick delta to a nanosecond value for core internal
    usage. This conversion is affected by integer math rounding loss, so
    the backwards conversion to hardware ticks will likely result in a
    value which is less than the configured hardware limitation. The
    affected subarchs used their own workaround (SIGH!) which got lost in
    the conversion.
    
    The solution for the issue at hand is simple: adding evt->mult - 1 to
    the shifted value before the integer divison in the core conversion
    function takes care of it. But this only works for the case where for
    the scaled math mult/shift pair "mult <= 1 << shift" is true. For the
    case where "mult > 1 << shift" we can apply the rounding add only for
    the minimum delta value to make sure that the backward conversion is
    not less than the given hardware limit. For the upper bound we need to
    omit the rounding add, because the backwards conversion is always
    larger than the original latch value. That would violate the upper
    bound of the hardware device.
    
    Though looking closer at the details of that function reveals another
    bogosity: The upper bounds check is broken as well. Checking for a
    resulting "clc" value greater than KTIME_MAX after the conversion is
    pointless. The conversion does:
    
          u64 clc = (latch << evt->shift) / evt->mult;
    
    So there is no sanity check for (latch << evt->shift) exceeding the
    64bit boundary. The latch argument is "unsigned long", so on a 64bit
    arch the handed in argument could easily lead to an unnoticed shift
    overflow. With the above rounding fix applied the calculation before
    the divison is:
    
           u64 clc = (latch << evt->shift) + evt->mult - 1;
    
    So we need to make sure, that neither the shift nor the rounding add
    is overflowing the u64 boundary.
    
    [ukl: move assignment to rnd after eventually changing mult, fix build
     issue and correct comment with the right math]
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Russell King - ARM Linux <linux@arm.linux.org.uk>
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: nicolas.ferre@atmel.com
    Cc: Marc Pignat <marc.pignat@hevs.ch>
    Cc: john.stultz@linaro.org
    Cc: kernel@pengutronix.de
    Cc: Ronald Wahl <ronald.wahl@raritan.com>
    Cc: LAK <linux-arm-kernel@lists.infradead.org>
    Cc: Ludovic Desroches <ludovic.desroches@atmel.com>
    Link: http://lkml.kernel.org/r/1380052223-24139-1-git-send-email-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5b02b140665d016236918cb88b88f6249050605
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Sep 24 21:50:23 2013 +0200

    clockevents: Sanitize ticks to nsec conversion
    
    commit 97b9410643475d6557d2517c2aff9fd2221141a9 upstream.
    
    Marc Kleine-Budde pointed out, that commit 77cc982 "clocksource: use
    clockevents_config_and_register() where possible" caused a regression
    for some of the converted subarchs.
    
    The reason is, that the clockevents core code converts the minimal
    hardware tick delta to a nanosecond value for core internal
    usage. This conversion is affected by integer math rounding loss, so
    the backwards conversion to hardware ticks will likely result in a
    value which is less than the configured hardware limitation. The
    affected subarchs used their own workaround (SIGH!) which got lost in
    the conversion.
    
    The solution for the issue at hand is simple: adding evt->mult - 1 to
    the shifted value before the integer divison in the core conversion
    function takes care of it. But this only works for the case where for
    the scaled math mult/shift pair "mult <= 1 << shift" is true. For the
    case where "mult > 1 << shift" we can apply the rounding add only for
    the minimum delta value to make sure that the backward conversion is
    not less than the given hardware limit. For the upper bound we need to
    omit the rounding add, because the backwards conversion is always
    larger than the original latch value. That would violate the upper
    bound of the hardware device.
    
    Though looking closer at the details of that function reveals another
    bogosity: The upper bounds check is broken as well. Checking for a
    resulting "clc" value greater than KTIME_MAX after the conversion is
    pointless. The conversion does:
    
          u64 clc = (latch << evt->shift) / evt->mult;
    
    So there is no sanity check for (latch << evt->shift) exceeding the
    64bit boundary. The latch argument is "unsigned long", so on a 64bit
    arch the handed in argument could easily lead to an unnoticed shift
    overflow. With the above rounding fix applied the calculation before
    the divison is:
    
           u64 clc = (latch << evt->shift) + evt->mult - 1;
    
    So we need to make sure, that neither the shift nor the rounding add
    is overflowing the u64 boundary.
    
    [ukl: move assignment to rnd after eventually changing mult, fix build
     issue and correct comment with the right math]
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Russell King - ARM Linux <linux@arm.linux.org.uk>
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: nicolas.ferre@atmel.com
    Cc: Marc Pignat <marc.pignat@hevs.ch>
    Cc: john.stultz@linaro.org
    Cc: kernel@pengutronix.de
    Cc: Ronald Wahl <ronald.wahl@raritan.com>
    Cc: LAK <linux-arm-kernel@lists.infradead.org>
    Cc: Ludovic Desroches <ludovic.desroches@atmel.com>
    Link: http://lkml.kernel.org/r/1380052223-24139-1-git-send-email-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f81d0a99446a0c4548d5783807529d075b06c64e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Sep 24 21:50:23 2013 +0200

    clockevents: Sanitize ticks to nsec conversion
    
    commit 97b9410643475d6557d2517c2aff9fd2221141a9 upstream.
    
    Marc Kleine-Budde pointed out, that commit 77cc982 "clocksource: use
    clockevents_config_and_register() where possible" caused a regression
    for some of the converted subarchs.
    
    The reason is, that the clockevents core code converts the minimal
    hardware tick delta to a nanosecond value for core internal
    usage. This conversion is affected by integer math rounding loss, so
    the backwards conversion to hardware ticks will likely result in a
    value which is less than the configured hardware limitation. The
    affected subarchs used their own workaround (SIGH!) which got lost in
    the conversion.
    
    The solution for the issue at hand is simple: adding evt->mult - 1 to
    the shifted value before the integer divison in the core conversion
    function takes care of it. But this only works for the case where for
    the scaled math mult/shift pair "mult <= 1 << shift" is true. For the
    case where "mult > 1 << shift" we can apply the rounding add only for
    the minimum delta value to make sure that the backward conversion is
    not less than the given hardware limit. For the upper bound we need to
    omit the rounding add, because the backwards conversion is always
    larger than the original latch value. That would violate the upper
    bound of the hardware device.
    
    Though looking closer at the details of that function reveals another
    bogosity: The upper bounds check is broken as well. Checking for a
    resulting "clc" value greater than KTIME_MAX after the conversion is
    pointless. The conversion does:
    
          u64 clc = (latch << evt->shift) / evt->mult;
    
    So there is no sanity check for (latch << evt->shift) exceeding the
    64bit boundary. The latch argument is "unsigned long", so on a 64bit
    arch the handed in argument could easily lead to an unnoticed shift
    overflow. With the above rounding fix applied the calculation before
    the divison is:
    
           u64 clc = (latch << evt->shift) + evt->mult - 1;
    
    So we need to make sure, that neither the shift nor the rounding add
    is overflowing the u64 boundary.
    
    [ukl: move assignment to rnd after eventually changing mult, fix build
     issue and correct comment with the right math]
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Russell King - ARM Linux <linux@arm.linux.org.uk>
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: nicolas.ferre@atmel.com
    Cc: Marc Pignat <marc.pignat@hevs.ch>
    Cc: john.stultz@linaro.org
    Cc: kernel@pengutronix.de
    Cc: Ronald Wahl <ronald.wahl@raritan.com>
    Cc: LAK <linux-arm-kernel@lists.infradead.org>
    Cc: Ludovic Desroches <ludovic.desroches@atmel.com>
    Link: http://lkml.kernel.org/r/1380052223-24139-1-git-send-email-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87093826aa0172d9135ca1f301c4298a258ceee6
Merge: 39cf275a1a18 ee5872befc93
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 12 10:36:00 2013 +0900

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer changes from Ingo Molnar:
     "Main changes in this cycle were:
    
       - Updated full dynticks support.
    
       - Event stream support for architected (ARM) timers.
    
       - ARM clocksource driver updates.
    
       - Move arm64 to using the generic sched_clock framework & resulting
         cleanup in the generic sched_clock code.
    
       - Misc fixes and cleanups"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (50 commits)
      x86/time: Honor ACPI FADT flag indicating absence of a CMOS RTC
      clocksource: sun4i: remove IRQF_DISABLED
      clocksource: sun4i: Report the minimum tick that we can program
      clocksource: sun4i: Select CLKSRC_MMIO
      clocksource: Provide timekeeping for efm32 SoCs
      clocksource: em_sti: convert to clk_prepare/unprepare
      time: Fix signedness bug in sysfs_get_uname() and its callers
      timekeeping: Fix some trivial typos in comments
      alarmtimer: return EINVAL instead of ENOTSUPP if rtcdev doesn't exist
      clocksource: arch_timer: Do not register arch_sys_counter twice
      timer stats: Add a 'Collection: active/inactive' line to timer usage statistics
      sched_clock: Remove sched_clock_func() hook
      arch_timer: Move to generic sched_clock framework
      clocksource: tcb_clksrc: Remove IRQF_DISABLED
      clocksource: tcb_clksrc: Improve driver robustness
      clocksource: tcb_clksrc: Replace clk_enable/disable with clk_prepare_enable/disable_unprepare
      clocksource: arm_arch_timer: Use clocksource for suspend timekeeping
      clocksource: dw_apb_timer_of: Mark a few more functions as __init
      clocksource: Put nodes passed to CLOCKSOURCE_OF_DECLARE callbacks centrally
      arm: zynq: Enable arm_global_timer
      ...

commit 3ae423fe4734af3b2f7ac718c6e64e72bfe443b3
Merge: 280c84d1c172 723ff7943249
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 8 08:32:58 2013 +0900

    Merge branch 'upstream' of git://git.linux-mips.org/pub/scm/ralf/upstream-linus
    
    Pull MIPS updates from Ralf Baechle:
     - Some minor work bringing the Cobalt MIPS platforms in line with other
       MIPS platforms
     - Make vmlinux.32 and vmlinux.64 build messages less verbose
     - Always register the R4k clocksource when selected, the clock source's
       rating will decide if this or another clock source is actually going
       to be used
     - Drop support for the Cisco (formerly Scientific Atlanta) PowerTV
       platform.  There appears to be nobody left who cares and the USB
       driver went stale while waiting for years to be merged
     - Some cleanup of Loongson 2 related #ifdefery
     - Various minor cleanups
     - Major rework on all things related to tracing / ptrace on MIPS,
       including switching the MIPS ELF core dumper to regsets, enabling the
       entries for SIGSYS in struct siginfo for MIPS, enabling ftrace
       syscall trace points
     - Some more work to bring DECstation support code in line with other
       more modern code
     - Report the name of the detected CPU, not just its CP0 PrID value
     - Some more BCM 47xx and atheros ath79xx work
     - Support for compressed kernels using the XZ compression scheme
    
    * 'upstream' of git://git.linux-mips.org/pub/scm/ralf/upstream-linus: (53 commits)
      MIPS: remove duplicate define
      MIPS: Random whitespace clean-ups
      MIPS: traps: Reformat notify_die invocations to 80 columns.
      MIPS: Print correct PC in trace dump after NMI exception
      MIPS: kernel: cpu-probe: Report CPU id during probe
      MIPS: Remove unused defines in piix4.h
      MIPS: Get rid of hard-coded values for Malta PIIX4 fixups
      MIPS: Always register R4K clock when selected
      MIPS: Loongson: Get rid of Loongson 2 #ifdefery all over arch/mips.
      MIPS: cacheops.h: Increase indentation by one tab.
      MIPS: Remove bogus BUG_ON()
      MIPS: PowerTV: Remove support code.
      MIPS: ftrace: Add support for syscall tracepoints.
      MIPS: ptrace: Switch syscall reporting to tracehook_report_syscall_entry().
      MIPS: Move audit_arch() helper function to __syscall_get_arch().
      MIPS: Enable HAVE_ARCH_TRACEHOOK.
      MIPS: Switch ELF core dumper to use regsets.
      MIPS: Implement task_user_regset_view.
      MIPS: ptrace: Use tracehook helpers.
      MIPS: O32 / 32-bit: Always copy 4 stack arguments.
      ...

commit b0e0b97c59f6116b12cd33c59aa803a8aac1f6e0
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Oct 7 15:19:53 2013 +0200

    ARM: integrator: deactivate timer0 on the Integrator/CP
    
    commit 29114fd7db2fc82a34da8340d29b8fa413e03dca upstream.
    
    This fixes a long-standing Integrator/CP regression from
    commit 870e2928cf3368ca9b06bc925d0027b0a56bcd8e
    "ARM: integrator-cp: convert use CLKSRC_OF for timer init"
    
    When this code was introduced, the both aliases pointing the
    system to use timer1 as primary (clocksource) and timer2
    as secondary (clockevent) was ignored, and the system would
    simply use the first two timers found as clocksource and
    clockevent.
    
    However this made the system timeline accelerate by a
    factor x25, as it turns out that the way the clocking
    actually works (totally undocumented and found after some
    trial-and-error) is that timer0 runs @ 25MHz and timer1
    and timer2 runs @ 1MHz. Presumably this divider setting
    is a boot-on default and configurable albeit the way to
    configure it is not documented.
    
    So as a quick fix to the problem, let's mark timer0 as
    disabled, so the code will chose timer1 and timer2 as it
    used to.
    
    This also deletes the two aliases for the primary and
    secondary timer as they have been superceded by the
    auto-selection
    
    Cc: Rob Herring <rob.herring@calxeda.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77fc96c899a5c926dd8ba6f340f1e04933e7bfd2
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Oct 7 15:19:53 2013 +0200

    ARM: integrator: deactivate timer0 on the Integrator/CP
    
    commit 29114fd7db2fc82a34da8340d29b8fa413e03dca upstream.
    
    This fixes a long-standing Integrator/CP regression from
    commit 870e2928cf3368ca9b06bc925d0027b0a56bcd8e
    "ARM: integrator-cp: convert use CLKSRC_OF for timer init"
    
    When this code was introduced, the both aliases pointing the
    system to use timer1 as primary (clocksource) and timer2
    as secondary (clockevent) was ignored, and the system would
    simply use the first two timers found as clocksource and
    clockevent.
    
    However this made the system timeline accelerate by a
    factor x25, as it turns out that the way the clocking
    actually works (totally undocumented and found after some
    trial-and-error) is that timer0 runs @ 25MHz and timer1
    and timer2 runs @ 1MHz. Presumably this divider setting
    is a boot-on default and configurable albeit the way to
    configure it is not documented.
    
    So as a quick fix to the problem, let's mark timer0 as
    disabled, so the code will chose timer1 and timer2 as it
    used to.
    
    This also deletes the two aliases for the primary and
    secondary timer as they have been superceded by the
    auto-selection
    
    Cc: Rob Herring <rob.herring@calxeda.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67aeb39a173b5c172c75c5b9f1844853aec16eb4
Author: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date:   Fri Nov 1 08:42:04 2013 -0700

    of: Add vendor prefix for Cadence
    
    Drivers like clocksource/cadence_ttc and net/macb already use the 'cdns'
    prefix for Cadence IP.
    
    Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

commit f7886e87546cc68844e8edb66150aaaeacaf7204
Author: Steven J. Hill <Steven.Hill@imgtec.com>
Date:   Mon Oct 7 11:32:54 2013 +0100

    MIPS: Always register R4K clock when selected
    
    Always register the R4K clocksource when CONFIG_CSRC_R4K is selected,
    regardless of selected support for other clocksources. The kernel will
    select the best clocksource based on their ratings, making it safe to
    register R4K unconditionally and use it as a fallback should the
    kernel be run on a system where other selected clocksources are
    inoperable.
    
    Signed-off-by: Steven J. Hill <Steven.Hill@imgtec.com>
    Signed-off-by: Markos Chandras <markos.chandras@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/6024/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 97b9410643475d6557d2517c2aff9fd2221141a9
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Sep 24 21:50:23 2013 +0200

    clockevents: Sanitize ticks to nsec conversion
    
    Marc Kleine-Budde pointed out, that commit 77cc982 "clocksource: use
    clockevents_config_and_register() where possible" caused a regression
    for some of the converted subarchs.
    
    The reason is, that the clockevents core code converts the minimal
    hardware tick delta to a nanosecond value for core internal
    usage. This conversion is affected by integer math rounding loss, so
    the backwards conversion to hardware ticks will likely result in a
    value which is less than the configured hardware limitation. The
    affected subarchs used their own workaround (SIGH!) which got lost in
    the conversion.
    
    The solution for the issue at hand is simple: adding evt->mult - 1 to
    the shifted value before the integer divison in the core conversion
    function takes care of it. But this only works for the case where for
    the scaled math mult/shift pair "mult <= 1 << shift" is true. For the
    case where "mult > 1 << shift" we can apply the rounding add only for
    the minimum delta value to make sure that the backward conversion is
    not less than the given hardware limit. For the upper bound we need to
    omit the rounding add, because the backwards conversion is always
    larger than the original latch value. That would violate the upper
    bound of the hardware device.
    
    Though looking closer at the details of that function reveals another
    bogosity: The upper bounds check is broken as well. Checking for a
    resulting "clc" value greater than KTIME_MAX after the conversion is
    pointless. The conversion does:
    
          u64 clc = (latch << evt->shift) / evt->mult;
    
    So there is no sanity check for (latch << evt->shift) exceeding the
    64bit boundary. The latch argument is "unsigned long", so on a 64bit
    arch the handed in argument could easily lead to an unnoticed shift
    overflow. With the above rounding fix applied the calculation before
    the divison is:
    
           u64 clc = (latch << evt->shift) + evt->mult - 1;
    
    So we need to make sure, that neither the shift nor the rounding add
    is overflowing the u64 boundary.
    
    [ukl: move assignment to rnd after eventually changing mult, fix build
     issue and correct comment with the right math]
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Russell King - ARM Linux <linux@arm.linux.org.uk>
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: nicolas.ferre@atmel.com
    Cc: Marc Pignat <marc.pignat@hevs.ch>
    Cc: john.stultz@linaro.org
    Cc: kernel@pengutronix.de
    Cc: Ronald Wahl <ronald.wahl@raritan.com>
    Cc: LAK <linux-arm-kernel@lists.infradead.org>
    Cc: Ludovic Desroches <ludovic.desroches@atmel.com>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/1380052223-24139-1-git-send-email-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>

commit 3353652ce0eb22854b1748b8320c2b81912953a1
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Mon Oct 14 21:07:48 2013 +0200

    clocksource: sun4i: remove IRQF_DISABLED
    
    IRQF_DISABLED is a no-op nowadays, so we can safely remove it.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 12e1480bcb4920c1b02b3793cb48756497919a60
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Mon Oct 14 21:07:47 2013 +0200

    clocksource: sun4i: Report the minimum tick that we can program
    
    We need to wait for at least 2 clock cycles whenever we reprogram our
    clockevent timer. Report that the minimum number of ticks we can handle
    is 3 ticks, and remove 3 ticks to the interval programmed to reflect
    this.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 71c568c00026f082ca16980e2d9bc506e7d3b145
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Mon Oct 14 21:07:46 2013 +0200

    clocksource: sun4i: Select CLKSRC_MMIO
    
    The Allwinner SoCs timer use the clocksource MMIO functions. We thus
    need to select them in Kconfig.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9c9b781804e0a278e258f81dfc31c50f80867730
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Oct 3 21:56:29 2013 +0200

    clocksource: Provide timekeeping for efm32 SoCs
    
    An efm32 features 4 16-bit timers with a 10-bit prescaler. This driver
    provides clocksource and clock event device using one timer instance
    each.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit fdfcab17a26ab2179c9d233f8a1b63e93cff9a4a
Author: Shinya Kuribayashi <shinya.kuribayashi.px@renesas.com>
Date:   Tue Oct 8 18:01:28 2013 +0900

    clocksource: em_sti: convert to clk_prepare/unprepare
    
    Add calls to clk_prepare and unprepare so that EMMA Mobile EV2 can
    migrate to the common clock framework.
    
    Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi.px@renesas.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Acked-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 4a7d3e8a9939cf8073c247286d81cbe0ae48eba2
Author: Thierry Reding <thierry.reding@gmail.com>
Date:   Tue Oct 15 15:31:51 2013 +0200

    clocksource: arch_timer: Do not register arch_sys_counter twice
    
    Commit:
    
       65cd4f6 ("arch_timer: Move to generic sched_clock framework")
    
    added code to register the arch_sys_counter in arch_timer_register(),
    but it is already registered in arch_counter_register().
    
    This results in the timer being added to the clocksource list twice,
    therefore causing an infinite loop in the list.
    
    Remove the duplicate registration and register the scheduler
    clock after the original registration instead.
    
    This fixes a hang during boot on Tegra114 (Cortex-A15).
    
    [ While I've only tested this on Tegra114, I suspect the same hang
      during boot happens for all processors that use this clock source. ]
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Cc: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Stephen Warren <swarren@wwwdotorg.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: http://lkml.kernel.org/r/1381843911-31962-1-git-send-email-treding@nvidia.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit f95a2b3d98f349eecd97d8adef7085323acec7b7
Author: Heiko Stuebner <heiko@sntech.de>
Date:   Mon Sep 30 16:29:55 2013 +0200

    ARM: rockchip: enable arm-global-timer
    
    RK2928 and RK3066 contain a dw_apb timer component, while the rk3188 uses
    a slightly similar but still different timer component. But all of them
    support the ARM-global-timer that got added as clocksource driver recently.
    
    So enable support for it to get a working clocksource for rk3188.
    
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>

commit 17828296b122ed60cf5274cfb481aa1cc0308250
Author: Arend van Spriel <arend@broadcom.com>
Date:   Wed Sep 25 12:11:01 2013 +0200

    brcmfmac: obtain platform data upon module initialization
    
    commit db4efbbeb457b6f9f4d8c4b090d1170d12f026e1 upstream.
    
    The driver uses platform_driver_probe() to obtain platform data
    if any. However, that function is placed in the .init section so
    it must be called upon driver module initialization.
    
    The problem was reported by Fenguang Wu resulting in a kernel
    oops because the .init section was already freed.
    
    [   48.966342] Switched to clocksource tsc
    [   48.970002] kernel tried to execute NX-protected page - exploit attempt? (uid: 0)
    [   48.970851] BUG: unable to handle kernel paging request at ffffffff82196446
    [   48.970957] IP: [<ffffffff82196446>] classes_init+0x26/0x26
    [   48.970957] PGD 1e76067 PUD 1e77063 PMD f388063 PTE 8000000002196163
    [   48.970957] Oops: 0011 [#1]
    [   48.970957] CPU: 0 PID: 17 Comm: kworker/0:1 Not tainted 3.11.0-rc7-00444-gc52dd7f #23
    [   48.970957] Workqueue: events brcmf_driver_init
    [   48.970957] task: ffff8800001d2000 ti: ffff8800001d4000 task.ti: ffff8800001d4000
    [   48.970957] RIP: 0010:[<ffffffff82196446>]  [<ffffffff82196446>] classes_init+0x26/0x26
    [   48.970957] RSP: 0000:ffff8800001d5d40  EFLAGS: 00000286
    [   48.970957] RAX: 0000000000000001 RBX: ffffffff820c5620 RCX: 0000000000000000
    [   48.970957] RDX: 0000000000000001 RSI: ffffffff816f7380 RDI: ffffffff820c56c0
    [   48.970957] RBP: ffff8800001d5d50 R08: ffff8800001d2508 R09: 0000000000000002
    [   48.970957] R10: 0000000000000000 R11: 0001f7ce298c5620 R12: ffff8800001c76b0
    [   48.970957] R13: ffffffff81e91d40 R14: 0000000000000000 R15: ffff88000e0ce300
    [   48.970957] FS:  0000000000000000(0000) GS:ffffffff81e84000(0000) knlGS:0000000000000000
    [   48.970957] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
    [   48.970957] CR2: ffffffff82196446 CR3: 0000000001e75000 CR4: 00000000000006b0
    [   48.970957] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   48.970957] DR3: 0000000000000000 DR6: 0000000000000000 DR7: 0000000000000000
    [   48.970957] Stack:
    [   48.970957]  ffffffff816f7df8 ffffffff820c5620 ffff8800001d5d60 ffffffff816eeec9
    [   48.970957]  ffff8800001d5de0 ffffffff81073dc5 ffffffff81073d68 ffff8800001d5db8
    [   48.970957]  0000000000000086 ffffffff820c5620 ffffffff824f7fd0 0000000000000000
    [   48.970957] Call Trace:
    [   48.970957]  [<ffffffff816f7df8>] ? brcmf_sdio_init+0x18/0x70
    [   48.970957]  [<ffffffff816eeec9>] brcmf_driver_init+0x9/0x10
    [   48.970957]  [<ffffffff81073dc5>] process_one_work+0x1d5/0x480
    [   48.970957]  [<ffffffff81073d68>] ? process_one_work+0x178/0x480
    [   48.970957]  [<ffffffff81074188>] worker_thread+0x118/0x3a0
    [   48.970957]  [<ffffffff81074070>] ? process_one_work+0x480/0x480
    [   48.970957]  [<ffffffff8107aa17>] kthread+0xe7/0xf0
    [   48.970957]  [<ffffffff810829f7>] ? finish_task_switch.constprop.57+0x37/0xd0
    [   48.970957]  [<ffffffff8107a930>] ? __kthread_parkme+0x80/0x80
    [   48.970957]  [<ffffffff81a6923a>] ret_from_fork+0x7a/0xb0
    [   48.970957]  [<ffffffff8107a930>] ? __kthread_parkme+0x80/0x80
    [   48.970957] Code: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc
    cc cc cc cc cc cc <cc> cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc
    [   48.970957] RIP  [<ffffffff82196446>] classes_init+0x26/0x26
    [   48.970957]  RSP <ffff8800001d5d40>
    [   48.970957] CR2: ffffffff82196446
    [   48.970957] ---[ end trace 62980817cd525f14 ]---
    
    Reported-by: Fengguang Wu <fengguang.wu@intel.com>
    Reviewed-by: Hante Meuleman <meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieterpg@broadcom.com>
    Tested-by: Fengguang Wu <fengguang.wu@intel.com>
    Signed-off-by: Arend van Spriel <arend@broadcom.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37afef393d94a49bea7ee44d255b05a922d7b791
Author: Arend van Spriel <arend@broadcom.com>
Date:   Wed Sep 25 12:11:01 2013 +0200

    brcmfmac: obtain platform data upon module initialization
    
    commit db4efbbeb457b6f9f4d8c4b090d1170d12f026e1 upstream.
    
    The driver uses platform_driver_probe() to obtain platform data
    if any. However, that function is placed in the .init section so
    it must be called upon driver module initialization.
    
    The problem was reported by Fenguang Wu resulting in a kernel
    oops because the .init section was already freed.
    
    [   48.966342] Switched to clocksource tsc
    [   48.970002] kernel tried to execute NX-protected page - exploit attempt? (uid: 0)
    [   48.970851] BUG: unable to handle kernel paging request at ffffffff82196446
    [   48.970957] IP: [<ffffffff82196446>] classes_init+0x26/0x26
    [   48.970957] PGD 1e76067 PUD 1e77063 PMD f388063 PTE 8000000002196163
    [   48.970957] Oops: 0011 [#1]
    [   48.970957] CPU: 0 PID: 17 Comm: kworker/0:1 Not tainted 3.11.0-rc7-00444-gc52dd7f #23
    [   48.970957] Workqueue: events brcmf_driver_init
    [   48.970957] task: ffff8800001d2000 ti: ffff8800001d4000 task.ti: ffff8800001d4000
    [   48.970957] RIP: 0010:[<ffffffff82196446>]  [<ffffffff82196446>] classes_init+0x26/0x26
    [   48.970957] RSP: 0000:ffff8800001d5d40  EFLAGS: 00000286
    [   48.970957] RAX: 0000000000000001 RBX: ffffffff820c5620 RCX: 0000000000000000
    [   48.970957] RDX: 0000000000000001 RSI: ffffffff816f7380 RDI: ffffffff820c56c0
    [   48.970957] RBP: ffff8800001d5d50 R08: ffff8800001d2508 R09: 0000000000000002
    [   48.970957] R10: 0000000000000000 R11: 0001f7ce298c5620 R12: ffff8800001c76b0
    [   48.970957] R13: ffffffff81e91d40 R14: 0000000000000000 R15: ffff88000e0ce300
    [   48.970957] FS:  0000000000000000(0000) GS:ffffffff81e84000(0000) knlGS:0000000000000000
    [   48.970957] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
    [   48.970957] CR2: ffffffff82196446 CR3: 0000000001e75000 CR4: 00000000000006b0
    [   48.970957] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   48.970957] DR3: 0000000000000000 DR6: 0000000000000000 DR7: 0000000000000000
    [   48.970957] Stack:
    [   48.970957]  ffffffff816f7df8 ffffffff820c5620 ffff8800001d5d60 ffffffff816eeec9
    [   48.970957]  ffff8800001d5de0 ffffffff81073dc5 ffffffff81073d68 ffff8800001d5db8
    [   48.970957]  0000000000000086 ffffffff820c5620 ffffffff824f7fd0 0000000000000000
    [   48.970957] Call Trace:
    [   48.970957]  [<ffffffff816f7df8>] ? brcmf_sdio_init+0x18/0x70
    [   48.970957]  [<ffffffff816eeec9>] brcmf_driver_init+0x9/0x10
    [   48.970957]  [<ffffffff81073dc5>] process_one_work+0x1d5/0x480
    [   48.970957]  [<ffffffff81073d68>] ? process_one_work+0x178/0x480
    [   48.970957]  [<ffffffff81074188>] worker_thread+0x118/0x3a0
    [   48.970957]  [<ffffffff81074070>] ? process_one_work+0x480/0x480
    [   48.970957]  [<ffffffff8107aa17>] kthread+0xe7/0xf0
    [   48.970957]  [<ffffffff810829f7>] ? finish_task_switch.constprop.57+0x37/0xd0
    [   48.970957]  [<ffffffff8107a930>] ? __kthread_parkme+0x80/0x80
    [   48.970957]  [<ffffffff81a6923a>] ret_from_fork+0x7a/0xb0
    [   48.970957]  [<ffffffff8107a930>] ? __kthread_parkme+0x80/0x80
    [   48.970957] Code: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc
    cc cc cc cc cc cc <cc> cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc
    [   48.970957] RIP  [<ffffffff82196446>] classes_init+0x26/0x26
    [   48.970957]  RSP <ffff8800001d5d40>
    [   48.970957] CR2: ffffffff82196446
    [   48.970957] ---[ end trace 62980817cd525f14 ]---
    
    Reported-by: Fengguang Wu <fengguang.wu@intel.com>
    Reviewed-by: Hante Meuleman <meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieterpg@broadcom.com>
    Tested-by: Fengguang Wu <fengguang.wu@intel.com>
    Signed-off-by: Arend van Spriel <arend@broadcom.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29114fd7db2fc82a34da8340d29b8fa413e03dca
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Oct 7 15:19:53 2013 +0200

    ARM: integrator: deactivate timer0 on the Integrator/CP
    
    This fixes a long-standing Integrator/CP regression from
    commit 870e2928cf3368ca9b06bc925d0027b0a56bcd8e
    "ARM: integrator-cp: convert use CLKSRC_OF for timer init"
    
    When this code was introduced, the both aliases pointing the
    system to use timer1 as primary (clocksource) and timer2
    as secondary (clockevent) was ignored, and the system would
    simply use the first two timers found as clocksource and
    clockevent.
    
    However this made the system timeline accelerate by a
    factor x25, as it turns out that the way the clocking
    actually works (totally undocumented and found after some
    trial-and-error) is that timer0 runs @ 25MHz and timer1
    and timer2 runs @ 1MHz. Presumably this divider setting
    is a boot-on default and configurable albeit the way to
    configure it is not documented.
    
    So as a quick fix to the problem, let's mark timer0 as
    disabled, so the code will chose timer1 and timer2 as it
    used to.
    
    This also deletes the two aliases for the primary and
    secondary timer as they have been superceded by the
    auto-selection
    
    Cc: stable@vger.kernel.org
    Cc: Rob Herring <rob.herring@calxeda.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 4d594dd3028ba8cdfcbd854bde3811a1ee4e36d7
Author: Yuvaraj Kumar C D <yuvaraj.cd@gmail.com>
Date:   Wed Sep 18 15:41:53 2013 +0530

    ARM: exynos: dts: Update 5250 arch timer node with clock frequency
    
    Without the "clock-frequency" property in arch timer node, could able
    to see the below crash dump.
    
    [<c0014e28>] (unwind_backtrace+0x0/0xf4) from [<c0011808>] (show_stack+0x10/0x14)
    [<c0011808>] (show_stack+0x10/0x14) from [<c036ac1c>] (dump_stack+0x7c/0xb0)
    [<c036ac1c>] (dump_stack+0x7c/0xb0) from [<c01ab760>] (Ldiv0_64+0x8/0x18)
    [<c01ab760>] (Ldiv0_64+0x8/0x18) from [<c0062f60>] (clockevents_config.part.2+0x1c/0x74)
    [<c0062f60>] (clockevents_config.part.2+0x1c/0x74) from [<c0062fd8>] (clockevents_config_and_register+0x20/0x2c)
    [<c0062fd8>] (clockevents_config_and_register+0x20/0x2c) from [<c02b8e8c>] (arch_timer_setup+0xa8/0x134)
    [<c02b8e8c>] (arch_timer_setup+0xa8/0x134) from [<c04b47b4>] (arch_timer_init+0x1f4/0x24c)
    [<c04b47b4>] (arch_timer_init+0x1f4/0x24c) from [<c04b40d8>] (clocksource_of_init+0x34/0x58)
    [<c04b40d8>] (clocksource_of_init+0x34/0x58) from [<c049ed8c>] (time_init+0x20/0x2c)
    [<c049ed8c>] (time_init+0x20/0x2c) from [<c049b95c>] (start_kernel+0x1e0/0x39c)
    
    THis is because the Exynos u-boot, for example on the Chromebooks, doesn't set
    up the CNTFRQ register as expected by arch_timer. Instead, we have to specify
    the frequency in the device tree like this.
    
    Signed-off-by: Yuvaraj Kumar C D <yuvaraj.cd@samsung.com>
    [olof: Changed subject, added comment, elaborated on commit message]
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 8a749de5e32d2b72def93f7bd7a2745580d75872
Merge: a44eb870f815 b4042ceaabbd
Author: Ingo Molnar <mingo@kernel.org>
Date:   Thu Oct 10 06:25:23 2013 +0200

    Merge branch 'fortglx/3.13/time' of git://git.linaro.org/people/jstultz/linux into timers/core
    
    Pull more timekeeping items for v3.13 from John Stultz:
    
      * Small cleanup in the clocksource code.
    
      * Fix for rtc-pl031 to let it work with alarmtimers.
    
      * Move arm64 to using the generic sched_clock framework & resulting
        cleanup in the generic sched_clock code.
    
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 65cd4f6c99c1170bd0114dbd71b978012ea44d28
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:18 2013 -0700

    arch_timer: Move to generic sched_clock framework
    
    Register with the generic sched_clock framework now that it
    supports 64 bits. This fixes two problems with the current
    sched_clock support for machines using the architected timers.
    First off, we don't subtract the start value from subsequent
    sched_clock calls so we can potentially start off with
    sched_clock returning gigantic numbers. Second, there is no
    support for suspend/resume handling so problems such as discussed
    in 6a4dae5 (ARM: 7565/1: sched: stop sched_clock() during
    suspend, 2012-10-23) can happen without this patch. Finally, it
    allows us to move the sched_clock setup into drivers clocksource
    out of the arch ports.
    
    Cc: Christopher Covington <cov@codeaurora.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit a44eb870f815356dac56adf3a380ee9b94787424
Merge: 68e90740284c f51380a75652
Author: Ingo Molnar <mingo@kernel.org>
Date:   Wed Oct 9 08:27:18 2013 +0200

    Merge branch 'clockevents/3.13' of git://git.linaro.org/people/dlezcano/linux into timers/core
    
    Pull ARM clocksource/clockevents updates from Daniel Lezcano:
    
      * Will Deacon and Sudeep KarkadaNagesha implemented the event stream
        for architected timer. The event streams can be used to impose a
        timeout on a wfe, to safeguard against any programming error in case
        an expected event is not generated or even to implement wfe-based
        timeouts for userspace locking implementations. Some files fall
        under the arm maintainers' umbrella but those changes have been
        reviewed and acked by the relevant people (Catalin Marinas and Olof
        Johansson).
    
      * Boris Brezillon improved the tcb_clksrc driver by removing a
        deprecated flag, checking return code values and using functions
        from the common clock framework.
    
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit c884357ec6e27c7967c78fb111cc8a830881f43b
Merge: ec01791d0ff7 64cc69abbb32
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Oct 7 09:47:31 2013 -0700

    Merge branch 'clk-of-init-v2_for-3.13' of https://github.com/shesselba/linux-dove into next/cleanup
    
    From Sebastian Hasselbarth:
    
    This is a patch set based on an RFC [1][2] sent earlier to provide
    a common arch/arm init for DT clock providers. Currently, the call to
    of_clk_init(NULL) to initialize DT clock providers is spread among several
    mach-dirs. Since most machs require DT clocks initialized before timers,
    no initcall can be used.
    
    By adding of_clk_init(NULL) to arch/arm time_init(), we can remove all
    mach-specific .init_time hooks that basically called of_clk_init and
    clocksource_of_init.
    
    In contrast to the RFC version, of_clk_init(NULL) is now only called if
    no custom .init_time callback is set. This allows some machs to still
    call clock init themselves, as not all can be converted now. Therefore,
    this patch sets drops conversion of mach-mvebu and mach-zynq. New machs
    that were introduced with v3.12-rc1 are also converted, except mach-u300
    that requires clocks before irqs.
    
    * 'clk-of-init-v2_for-3.13' of https://github.com/shesselba/linux-dove: (29 commits)
      ARM: vt8500: remove custom .init_time hook
      ARM: vexpress: remove custom .init_time hook
      ARM: tegra: remove custom .init_time hook
      ARM: sunxi: remove custom .init_time hook
      ARM: sti: remove custom .init_time hook
      ARM: socfpga: remove custom .init_time hook
      ARM: rockchip: remove custom .init_time hook
      ARM: prima2: remove custom .init_time hook
      ARM: nspire: remove custom .init_time hook
      ARM: nomadik: remove custom .init_time hook
      ARM: mxs: remove custom .init_time hook
      ARM: kirkwood: remove custom .init_time hook
      ARM: imx: remove custom .init_time hook
      ARM: highbank: remove custom .init_time hook
      ARM: exynos: remove custom .init_time hook
      ARM: dove: remove custom .init_time hook
      ARM: bcm2835: remove custom .init_time hook
      ARM: bcm: provide common arch init for DT clocks
      ARM: call of_clk_init from default time_init handler
      ARM: vt8500: prepare for arch-wide .init_time callback
      ...
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit f51380a75652a4600b34ce384c4ff89ce0a15132
Author: Boris Brezillon <bbrezillon@kernel.org>
Date:   Wed Oct 2 14:35:48 2013 +0200

    clocksource: tcb_clksrc: Remove IRQF_DISABLED
    
    Remove the deprecated IRQF_DISABLED flag.
    
    Signed-off-by: Boris BREZILLON <b.brezillon@overkiz.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5b3c11da141c27df6f8dd8acf90c0046ebab3a07
Author: Boris Brezillon <bbrezillon@kernel.org>
Date:   Wed Oct 2 14:35:41 2013 +0200

    clocksource: tcb_clksrc: Improve driver robustness
    
    Check function return values to avoid false positive driver init.
    
    Signed-off-by: Boris BREZILLON <b.brezillon@overkiz.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 0e746ec55812a2f8f5ab986aeedd5291e3b6fad4
Author: Boris Brezillon <bbrezillon@kernel.org>
Date:   Wed Oct 2 14:35:20 2013 +0200

    clocksource: tcb_clksrc: Replace clk_enable/disable with clk_prepare_enable/disable_unprepare
    
    Replace clk_enable/disable with clk_prepare_enable/disable_unprepare to
    avoid common clk framework warnings.
    
    Signed-off-by: Boris BREZILLON <b.brezillon@overkiz.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 68e90740284c69292881cd38c7ece6f09a18a58f
Merge: 19f29887a73e 4fbcdc813fb9
Author: Ingo Molnar <mingo@kernel.org>
Date:   Thu Oct 3 07:55:07 2013 +0200

    Merge branch 'clockevents/3.13' of git://git.linaro.org/people/dlezcano/linux into timers/core
    
    Pull (mostly) ARM clocksource driver updates from Daniel Lezcano:
    
    " - Soren Brinkmann added FEAT_PERCPU to a clock device when it is local
        per cpu. This feature prevents the clock framework to choose a per cpu
        timer as a broadcast timer. This problem arised when the ARM global
        timer is used when switching to the broadcast timer which is the case
        now on Xillinx with its cpuidle driver.
    
      - Stephen Boyd extended the generic sched_clock code to support 64bit
        counters and removes the setup_sched_clock deprecation, as that causes
        lots of warnings since there's still users in the arch/arm tree. He
        added also the CLOCK_SOURCE_SUSPEND_NONSTOP flag on the architected
        timer as they continue counting during suspend.
    
      - Uwe Kleine-König added some missing __init sections and consolidated the
        code by moving the of_node_put call from the drivers to the function
        clocksource_of_init. "
    
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 4fbcdc813fb9c0324fcff4c75414e717569d965e
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Sep 27 13:13:12 2013 -0700

    clocksource: arm_arch_timer: Use clocksource for suspend timekeeping
    
    The ARM architected timers keep counting during suspend so we can
    mark this clocksource with the CLOCK_SOURCE_SUSPEND_NONSTOP flag.
    This flag will indicate that this clocksource can be used for
    calculating suspend time and injecting sleep time into the
    timekeeping core. This should be more accurate than using an
    external RTC or architecture specific persistent clock.
    
    Cc: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 1cf0203ac9e3d7abed67196db494469b24fe09e3
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Oct 1 10:38:12 2013 +0200

    clocksource: dw_apb_timer_of: Mark a few more functions as __init
    
    These are all only called by dw_apb_timer_init which is an __init
    function, too
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 326e31eebe61dc838e031ea16968b2cfb43443e3
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Oct 1 11:00:53 2013 +0200

    clocksource: Put nodes passed to CLOCKSOURCE_OF_DECLARE callbacks centrally
    
    Instead of letting each driver call of_node_put do it centrally in the
    loop that also calls the CLOCKSOURCE_OF_DECLARE callbacks. This is less
    prone to error and also moves getting and putting the references into the
    same function.
    
    Consequently all respective of_node_put calls in drivers are removed.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: David Brown <davidb@codeaurora.org>

commit 6661039dc906bce5d532477f26c7c965f25e5d02
Author: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date:   Wed Sep 18 11:48:36 2013 -0700

    clocksource/arm_global_timer: Set FEAT_PERCPU flag
    
    The arm_global_timer is a per cpu device. Set the appropriate flag.
    
    Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Michal Simek <michal.simek@xilinx.com>
    Acked-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>

commit b9b5ab11ea221a9f2d5af41da639e0898675c34c
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Sep 13 21:45:51 2013 +0200

    clk: nomadik: set all timers to use 2.4 MHz TIMCLK
    
    This fixes a regression for the Nomadik on the main system
    timers.
    
    The Nomadik seemed a bit slow and its heartbeat wasn't looking
    healthy. And it was not strange, because it has been connected
    to the 32768 Hz clock at boot, while being told by the clock driver
    that it was 2.4MHz. Actually connect the TIMCLK to 2.4MHz by
    default as this is what we want for nice scheduling, clocksource
    and clock event.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

commit dd03ee9ae5bc080297175c921b1a693d0de1e8b0
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Wed Sep 4 13:16:01 2013 +0200

    ARM: mxs: remove custom .init_time hook
    
    This patch converts clk-imx2[38] clocksource_of_init compatible init
    associated with fsl,imx2[38]-clkctrl. With arch/arm calling
    of_clk_init(NULL) from time_init(), we can now also remove custom
    .init_time hooks.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Acked-by: Mike Turquette <mturquette@linaro.org>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>

commit 2881764d2a3638ec6e35e09df8f8e39338361ad7
Author: Matt Porter <matt.porter@linaro.org>
Date:   Fri Sep 20 15:16:14 2013 -0400

    ARM: bcm: provide common arch init for DT clocks
    
    With arch/arm calling of_clk_init(NULL) and clocksource_of_init()
    this is no longer needed. The former is useful because we can make
    use of dummy fixed clocks for drivers until the bcm281xx common
    clock driver is ready.
    
    Signed-off-by: Matt Porter <matt.porter@linaro.org>
    Reviewed-by: Markus Mayer <markus.mayer@linaro.org>
    Acked-by: Christian Daudt <csd@broadcom.com>

commit 4178bac4f6e955869395b30246687d41183a5edb
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Wed Sep 4 12:24:03 2013 +0200

    ARM: call of_clk_init from default time_init handler
    
    Most DT ARM machs require common clock providers initialized before timers.
    Currently, arch/arm machs use .init_time to call of_clk_init right before
    clocksource_of_init. This prevents to remove that callback and use the default
    one instead.
    
    This patch adds a call to of_clk_init() to the default .init_time callback
    for COMMON_CLK enabled machs to allow to remove custom callbacks where applicable.
    While at it, also reorder includes alphabetically.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>

commit 669fc2f0c70a6e14eefc503b72ce350448e9634e
Merge: 9b565a8051b3 62d08aec6a9f 2199a5574b6d accd1e823ed1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Sep 28 14:22:17 2013 -0700

    Merge branches 'sched-urgent-for-linus', 'timers-urgent-for-linus' and 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull scheduler, timer and x86 fixes from Ingo Molnar:
     - A context tracking ARM build and functional fix
     - A handful of ARM clocksource/clockevent driver fixes
     - An AMD microcode patch level sysfs reporting fixlet
    
    * 'sched-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      arm: Fix build error with context tracking calls
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: em_sti: Set cpu_possible_mask to fix SMP broadcast
      clocksource: of: Respect device tree node status
      clocksource: exynos_mct: Set IRQ affinity when the CPU goes online
      arm: clocksource: mvebu: Use the main timer as clock source from DT
    
    * 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/microcode/AMD: Fix patch level reporting for family 15h

commit 17deb9c2db01c7813611291d251d8c7dbdfd3c9d
Merge: f4e6e1ea1973 389e067032fb
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Sep 26 12:05:54 2013 -0700

    Merge remote-tracking branch 'tip/timers/core' into fordlezcano/3.13/sched-clock64-conversion
    
    Update to tip/timers/core and resolve minor conflict.
    
    Conflicts:
            drivers/clocksource/samsung_pwm_timer.c
    
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit db4efbbeb457b6f9f4d8c4b090d1170d12f026e1
Author: Arend van Spriel <arend@broadcom.com>
Date:   Wed Sep 25 12:11:01 2013 +0200

    brcmfmac: obtain platform data upon module initialization
    
    The driver uses platform_driver_probe() to obtain platform data
    if any. However, that function is placed in the .init section so
    it must be called upon driver module initialization.
    
    The problem was reported by Fenguang Wu resulting in a kernel
    oops because the .init section was already freed.
    
    [   48.966342] Switched to clocksource tsc
    [   48.970002] kernel tried to execute NX-protected page - exploit attempt? (uid: 0)
    [   48.970851] BUG: unable to handle kernel paging request at ffffffff82196446
    [   48.970957] IP: [<ffffffff82196446>] classes_init+0x26/0x26
    [   48.970957] PGD 1e76067 PUD 1e77063 PMD f388063 PTE 8000000002196163
    [   48.970957] Oops: 0011 [#1]
    [   48.970957] CPU: 0 PID: 17 Comm: kworker/0:1 Not tainted 3.11.0-rc7-00444-gc52dd7f #23
    [   48.970957] Workqueue: events brcmf_driver_init
    [   48.970957] task: ffff8800001d2000 ti: ffff8800001d4000 task.ti: ffff8800001d4000
    [   48.970957] RIP: 0010:[<ffffffff82196446>]  [<ffffffff82196446>] classes_init+0x26/0x26
    [   48.970957] RSP: 0000:ffff8800001d5d40  EFLAGS: 00000286
    [   48.970957] RAX: 0000000000000001 RBX: ffffffff820c5620 RCX: 0000000000000000
    [   48.970957] RDX: 0000000000000001 RSI: ffffffff816f7380 RDI: ffffffff820c56c0
    [   48.970957] RBP: ffff8800001d5d50 R08: ffff8800001d2508 R09: 0000000000000002
    [   48.970957] R10: 0000000000000000 R11: 0001f7ce298c5620 R12: ffff8800001c76b0
    [   48.970957] R13: ffffffff81e91d40 R14: 0000000000000000 R15: ffff88000e0ce300
    [   48.970957] FS:  0000000000000000(0000) GS:ffffffff81e84000(0000) knlGS:0000000000000000
    [   48.970957] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
    [   48.970957] CR2: ffffffff82196446 CR3: 0000000001e75000 CR4: 00000000000006b0
    [   48.970957] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   48.970957] DR3: 0000000000000000 DR6: 0000000000000000 DR7: 0000000000000000
    [   48.970957] Stack:
    [   48.970957]  ffffffff816f7df8 ffffffff820c5620 ffff8800001d5d60 ffffffff816eeec9
    [   48.970957]  ffff8800001d5de0 ffffffff81073dc5 ffffffff81073d68 ffff8800001d5db8
    [   48.970957]  0000000000000086 ffffffff820c5620 ffffffff824f7fd0 0000000000000000
    [   48.970957] Call Trace:
    [   48.970957]  [<ffffffff816f7df8>] ? brcmf_sdio_init+0x18/0x70
    [   48.970957]  [<ffffffff816eeec9>] brcmf_driver_init+0x9/0x10
    [   48.970957]  [<ffffffff81073dc5>] process_one_work+0x1d5/0x480
    [   48.970957]  [<ffffffff81073d68>] ? process_one_work+0x178/0x480
    [   48.970957]  [<ffffffff81074188>] worker_thread+0x118/0x3a0
    [   48.970957]  [<ffffffff81074070>] ? process_one_work+0x480/0x480
    [   48.970957]  [<ffffffff8107aa17>] kthread+0xe7/0xf0
    [   48.970957]  [<ffffffff810829f7>] ? finish_task_switch.constprop.57+0x37/0xd0
    [   48.970957]  [<ffffffff8107a930>] ? __kthread_parkme+0x80/0x80
    [   48.970957]  [<ffffffff81a6923a>] ret_from_fork+0x7a/0xb0
    [   48.970957]  [<ffffffff8107a930>] ? __kthread_parkme+0x80/0x80
    [   48.970957] Code: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc
    cc cc cc cc cc cc <cc> cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc
    [   48.970957] RIP  [<ffffffff82196446>] classes_init+0x26/0x26
    [   48.970957]  RSP <ffff8800001d5d40>
    [   48.970957] CR2: ffffffff82196446
    [   48.970957] ---[ end trace 62980817cd525f14 ]---
    
    Cc: <stable@vger.kernel.org> # 3.10.x, 3.11.x
    Reported-by: Fengguang Wu <fengguang.wu@intel.com>
    Reviewed-by: Hante Meuleman <meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieterpg@broadcom.com>
    Tested-by: Fengguang Wu <fengguang.wu@intel.com>
    Signed-off-by: Arend van Spriel <arend@broadcom.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 970eb8fe135ed11e0805ceb0566a940d3eeccbca
Author: Lee Jones <lee.jones@linaro.org>
Date:   Wed Sep 18 08:55:19 2013 +0100

    ARM: ux500: Don't attempt to enable the Nomadik System Timer twice
    
    When booting with DT enabled we already call clocksource_of_init(),
    which in turn calls the OF version of nmdk_timer_init().
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 346e7480f1d4740b3d798da60f83f087ea6488b4
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Fri Aug 23 15:53:15 2013 +0100

    drivers: clocksource: add CPU PM notifier for ARM architected timer
    
    Few control settings done in architected timer as part of initialisation
    can be lost when CPU enters deeper power states. They need to be
    restored when the CPU is (warm)reset again.
    
    This patch adds CPU PM notifiers to save the counter control register
    when entering low power modes and restore it when CPU exits low power.
    
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Sudeep KarkadaNagesha <sudeep.karkadanagesha@arm.com>

commit 037f637767a82907efedda78d3ff405c34020075
Author: Will Deacon <will.deacon@arm.com>
Date:   Fri Aug 23 15:32:29 2013 +0100

    drivers: clocksource: add support for ARM architected timer event stream
    
    The ARM architected timer can generate events (used for waking up
    CPUs executing the wfe instruction) at a frequency represented as a
    power-of-2 divisor of the clock rate.
    
    An event stream might be used:
    - To implement wfe-based timeouts for userspace locking implementations.
    - To impose a timeout on a wfe for safeguarding against any programming
      error in case an expected event is not generated.
    
    This patch computes the event stream frequency aiming for a period
    of 100us between events. It uses ARM/ARM64 specific backends to configure
    and enable the event stream.
    
    Cc: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    [sudeep: moving ARM/ARM64 changes into separate patches
             and adding Kconfig option]
    Signed-off-by: Sudeep KarkadaNagesha <sudeep.karkadanagesha@arm.com>

commit 2199a5574b6d94b9ca26c6345356f45ec60fef8b
Author: Magnus Damm <damm@opensource.se>
Date:   Wed Sep 18 15:01:16 2013 -0500

    clocksource: em_sti: Set cpu_possible_mask to fix SMP broadcast
    
    Update the STI driver by setting cpu_possible_mask to make EMEV2
    SMP work as expected together with the ARM broadcast timer.
    
    This breakage was introduced by:
    
    f7db706 ARM: 7674/1: smp: Avoid dummy clockevent being preferred over real hardware clock-event
    
    Without this fix SMP operation is broken on EMEV2 since no
    broadcast timer interrupts trigger on the secondary CPU cores.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Tested-by: Simon Horman <horms+renesas@verge.net.au>
    Reviewed-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit eeb93d02c5d8819c74f6d4da08325cff8c6a9376
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Thu Sep 26 02:08:17 2013 +0200

    clocksource: of: Respect device tree node status
    
    Clocksource devices provided by DT can be disabled (status != "okay").
    Instead of registering clocksource drivers for disabled nodes, respect
    the device's status by skiping disabled nodes.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 5df718d84679936454e815451d748ccca0e9edad
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Wed Sep 25 12:00:59 2013 +0200

    clocksource: exynos_mct: Set IRQ affinity when the CPU goes online
    
    Some variants of Exynos MCT, namely exynos4210-mct at the moment, use
    normal, shared interrupts for local timers. This means that each
    interrupt must have correct affinity set to fire only on CPU
    corresponding to given local timer.
    
    However after recent conversion of clocksource drivers to not use the
    local timer API for local timer initialization any more, the point of
    time when local timers get initialized changed and irq_set_affinity()
    fails because the CPU is not marked as online yet.
    
    This patch fixes this by moving the call to irq_set_affinity() to
    CPU_ONLINE notification, so the affinity is being set when the CPU goes
    online.
    
    This fixes a regression introduced by commit
            ee98d27df6 ARM: EXYNOS4: Divorce mct from local timer API
    which rendered all Exynos4210 based boards unbootable due to
    failing irq_set_affinity() making local timers inoperatible.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Acked-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7b0dd72a4401d999dac70377f5d423b8e6d44f4b
Author: Jean Pihet <jean.pihet@linaro.org>
Date:   Wed Sep 18 20:55:09 2013 +0200

    arm: clocksource: mvebu: Use the main timer as clock source from DT
    
    This commit:
      573145f08c2b92c45498468afbbba909f6ce6135
      clocksource: armada-370-xp: Use CLOCKSOURCE_OF_DECLARE
    
    replaced a call to the driver's timer initialization by a call to
    clocksource_of_init(). However, it failed to select CONFIG_CLKSRC_OF.
    
    Fix this by selecting CONFIG_CLKSRC_OF for Armada370/XP machines.
    Without this change the kernel is stuck at: 'Calibrating delay loop...'.
    
    Signed-off-by: Jean Pihet <jean.pihet@linaro.org>
    Acked-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit eb6b036dde364c528807f53ee8c8e5c9b0e46c34
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Sep 13 21:45:51 2013 +0200

    clk: nomadik: set all timers to use 2.4 MHz TIMCLK
    
    This fixes a regression for the Nomadik on the main system
    timers.
    
    The Nomadik seemed a bit slow and its heartbeat wasn't looking
    healthy. And it was not strange, because it has been connected
    to the 32768 Hz clock at boot, while being told by the clock driver
    that it was 2.4MHz. Actually connect the TIMCLK to 2.4MHz by
    default as this is what we want for nice scheduling, clocksource
    and clock event.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 233bcb411cd32d15c4d04271fa06ca8f2dc24eb8
Author: Elad Wexler <elad.wexler@gmail.com>
Date:   Thu Sep 12 13:28:54 2013 +0300

    clocksource: Fix 'ret' data type of sysfs_override_clocksource() and sysfs_unbind_clocksource()
    
    sysfs_override_clocksource(): The expression 'if (ret >= 0)' is always true.
    This will cause clocksource_select() to always run.
    Thus modified ret to be of type ssize_t.
    
    sysfs_unbind_clocksource(): The expression 'if (ret < 0)' is always false.
    So in case sysfs_get_uname() failed, the expression won't take an effect.
    Thus modified ret to be of type ssize_t.
    
    Signed-off-by: Elad Wexler <elad.wexler@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit a4ae54f90e0a7063799eb90852aa8648ccfbb791
Merge: 3369d116934b 63ce2cc474ce
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Sep 16 16:10:26 2013 -0400

    Merge branch 'timers/core' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer code update from Thomas Gleixner:
     - armada SoC clocksource overhaul with a trivial merge conflict
     - Minor improvements to various SoC clocksource drivers
    
    * 'timers/core' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource: armada-370-xp: Add detailed clock requirements in devicetree binding
      clocksource: armada-370-xp: Get reference fixed-clock by name
      clocksource: armada-370-xp: Replace WARN_ON with BUG_ON
      clocksource: armada-370-xp: Fix device-tree binding
      clocksource: armada-370-xp: Introduce new compatibles
      clocksource: armada-370-xp: Use CLOCKSOURCE_OF_DECLARE
      clocksource: armada-370-xp: Simplify TIMER_CTRL register access
      clocksource: armada-370-xp: Use BIT()
      ARM: timer-sp: Set dynamic irq affinity
      ARM: nomadik: add dynamic irq flag to the timer
      clocksource: sh_cmt: 32-bit control register support
      clocksource: em_sti: Convert to devm_* managed helpers

commit 5a7d8a28080caed7fd4cb1b81d092adac4445e8e
Merge: e0ea4045bce3 eb37e6ddf75a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Sep 12 16:14:49 2013 -0700

    Merge branch 'upstream' of git://git.linux-mips.org/pub/scm/ralf/upstream-linus
    
    Pull MIPS updates from Ralf Baechle:
     "This has been sitting in -next for a while with no objections and all
      MIPS defconfigs except one are building fine; that one platform got
      broken by another patch in your tree and I'm going to submit a patch
      separately.
    
       - a handful of fixes that didn't make 3.11
       - a few bits of Octeon 3 support with more to come for a later
         release
       - platform enhancements for Octeon, ath79, Lantiq, Netlogic and
         Ralink SOCs
       - a GPIO driver for the Octeon
       - some dusting off of the DECstation code
       - the usual dose of cleanups"
    
    * 'upstream' of git://git.linux-mips.org/pub/scm/ralf/upstream-linus: (65 commits)
      MIPS: DMA: Fix BUG due to smp_processor_id() in preemptible code
      MIPS: kexec: Fix random crashes while loading crashkernel
      MIPS: kdump: Skip walking indirection page for crashkernels
      MIPS: DECstation HRT calibration bug fixes
      MIPS: Export copy_from_user_page() (needed by lustre)
      MIPS: Add driver for the built-in PCI controller of the RT3883 SoC
      MIPS: DMA: For BMIPS5000 cores flush region just like non-coherent R10000
      MIPS: ralink: Add support for reset-controller API
      MIPS: ralink: mt7620: Add cpu-feature-override header
      MIPS: ralink: mt7620: Add spi clock definition
      MIPS: ralink: mt7620: Add wdt clock definition
      MIPS: ralink: mt7620: Improve clock frequency detection
      MIPS: ralink: mt7620: This SoC has EHCI and OHCI hosts
      MIPS: ralink: mt7620: Add verbose ram info
      MIPS: ralink: Probe clocksources from OF
      MIPS: ralink: Add support for systick timer found on newer ralink SoC
      MIPS: ralink: Add support for periodic timer irq
      MIPS: Netlogic: Built-in DTB for XLP2xx SoC boards
      MIPS: Netlogic: Add support for USB on XLP2xx
      MIPS: Netlogic: XLP2xx update for I2C controller
      ...

commit fa91515cbf2375a64c8bd0a033a05b0859dff591
Merge: a35c6322e52c 25475030ec0e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Sep 9 16:33:57 2013 -0700

    Merge tag 'renesas-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM Renesas SoC cleanup, refactoring and more SMP support from Kevin Hilman:
     "Lots of cleanup and refactoring and some SMP additions for Renesas
      platforms.  Due to some inter-dependencies with other arm-soc
      branches, this Renesas stuff was separated out for sending after the
      other branches were merged.
    
      Highlights:
       - remove unused board support and cleanup of unused headers
       - refactoring of init and device registration
       - simplify IRQ initialization"
    
    * tag 'renesas-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (68 commits)
      ARM: shmobile: Per-CPU SMP boot / sleep code for SCU SoCs
      ARM: shmobile: Introduce per-CPU SMP boot / sleep code
      ARM: shmobile: Use shared SCU CPU Hotplug code on r8a7779
      ARM: shmobile: Use shared SCU CPU Hotplug code on sh73a0
      ARM: shmobile: Add shared SCU CPU Hotplug code
      ARM: shmobile: Use shared SCU SMP boot code on emev2
      ARM: shmobile: Use shared SCU SMP boot code on r8a7779
      ARM: shmobile: Use shared SCU SMP boot code on sh73a0
      ARM: shmobile: Introduce shared SCU SMP boot code
      ARM: shmobile: sh73a0: Remove global GPIO_NR definition
      ARM: shmobile: kzm9d: remove nfsroot settings from bootargs
      ARM: shmobile: armadillo800eva: remove nfsroot settings from bootargs
      ARM: shmobile: r8a7779: move r8a7779_init_irq_xxx() to setup
      ARM: shmobile: r8a7740: move r8a7740_init_irq_of() to setup
      ARM: shmobile: bockw: add missing __initdata
      ARM: shmobile: r8a7790: add missing __initdata
      ARM: shmobile: r8a7779: add missing __initdata
      ARM: shmobile: Remove unused shmobile_init_time()
      ARM: shmobile: Use clocksource_of_init() on r8a7790
      ARM: shmobile: Use default ->init_time() on KZM9G DT ref
      ...

commit bef4a0ab984662d4ccd68d431a7c4ef3daebcb43
Merge: 7eb69529cbaf 12d298865ec5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Sep 9 15:49:04 2013 -0700

    Merge tag 'clk-for-linus-3.12' of git://git.linaro.org/people/mturquette/linux
    
    Pull clock framework changes from Michael Turquette:
     "The common clk framework changes for 3.12 are dominated by clock
      driver patches, both new drivers and fixes to existing.  A high
      percentage of these are for Samsung platforms like Exynos.  Core
      framework fixes and some new features like automagical clock
      re-parenting round out the patches"
    
    * tag 'clk-for-linus-3.12' of git://git.linaro.org/people/mturquette/linux: (102 commits)
      clk: only call get_parent if there is one
      clk: samsung: exynos5250: Simplify registration of PLL rate tables
      clk: samsung: exynos4: Register PLL rate tables for Exynos4x12
      clk: samsung: exynos4: Register PLL rate tables for Exynos4210
      clk: samsung: exynos4: Reorder registration of mout_vpllsrc
      clk: samsung: pll: Add support for rate configuration of PLL46xx
      clk: samsung: pll: Use new registration method for PLL46xx
      clk: samsung: pll: Add support for rate configuration of PLL45xx
      clk: samsung: pll: Use new registration method for PLL45xx
      clk: samsung: exynos4: Rename exynos4_plls to exynos4x12_plls
      clk: samsung: exynos4: Remove checks for DT node
      clk: samsung: exynos4: Remove unused static clkdev aliases
      clk: samsung: Modify _get_rate() helper to use __clk_lookup()
      clk: samsung: exynos4: Use separate aliases for cpufreq related clocks
      clocksource: samsung_pwm_timer: Get clock from device tree
      ARM: dts: exynos4: Specify PWM clocks in PWM node
      pwm: samsung: Update DT bindings documentation to cover clocks
      clk: Move symbol export to proper location
      clk: fix new_parent dereference before null check
      clk: wm831x: Initialise wm831x pointer on init
      ...

commit 44598f98b98e54beca34dc836b38eaea40be1abf
Merge: b4b50fd78b1e 4e5f67fa538d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Sep 6 13:34:43 2013 -0700

    Merge tag 'boards-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC board updates from Olof Johansson:
     "Board updates for 3.12.  Again, a bit of domain overlap with SoC and
      DT branches, but most of this is around legacy code and board support.
      We've found that platform maintainers have a hard time separating all
      of these out and might move towards fewer branches for next release.
    
       - Removal of a number of Marvell Kirkwood board files, since contents
         is now common and mostly configured via DT.
       - Device-tree updates for Marvell Dove, including irqchip and
         clocksource setup.
       - Defconfig updates.  Gotta go somewhere.  One new one for Renesas
         Lager.
       - New backlight drivers for backlights used on Renesas shmobile
         platforms.
       - Removal of Renesas leds driver.
       - Shuffling of some of the new Broadcom platforms to give room for
         others in the same mach directory.  More in 3.13"
    
    * tag 'boards-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (67 commits)
      mmc: sdhci-bcm-kona: Staticize sdhci_bcm_kona_card_event
      mmc: sdhci-bcm-kona: Remove unneeded version.h inclusion
      ARM: bcm: Make secure API call optional
      ARM: DT: binding fixup to align with vendor-prefixes.txt (drivers)
      ARM: mmc: fix NONREMOVABLE test in sdhci-bcm-kona
      ARM: bcm: Rename board_bcm
      mmc: sdhci-bcm-kona: make linker-section warning go away
      ARM: tegra: defconfig updates
      ARM: dove: add initial DT file for Globalscale D2Plug
      ARM: dove: add GPIO IR receiver node to SolidRun CuBox
      ARM: dove: add common pinmux functions to DT
      ARM: dove: add cpu device tree node
      ARM: dove: update dove_defconfig with SI5351, PCI, and xHCI
      arch/arm/mach-kirkwood: Avoid using ARRAY_AND_SIZE(e) as a function argument
      ARM: kirkwood: fix DT building and update defconfig
      ARM: kirkwood: Remove all remaining trace of DNS-320/325 platform code
      ARM: configs: disable DEBUG_LL in bcm_defconfig
      ARM: bcm281xx: Board specific reboot code
      ARM bcm281xx: Turn on socket & network support.
      ARM: bcm281xx: Turn on L2 cache.
      ...

commit a1fa6f503aad8da91c4cc8dd0e71d2789d78d3f6
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Mon Aug 26 19:08:58 2013 +0200

    clocksource: samsung_pwm_timer: Get clock from device tree
    
    When booting with device tree static clkdev aliases should not be used.
    This patch modifies the samsung_pwm_timer driver to use DT-based clock
    lookup when booting with device tree.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

commit ac3c1c4f1c77190408162aee559c655090597072
Merge: 5e0b3a4e8801 cfb6d656d569
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Sep 4 08:38:26 2013 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer changes from Ingo Molnar:
     "Various clocksource driver updates: extend the core with memory mapped
      hardware (mmio) support and add new (ARM) Moxart SoC and sun4i
      hardware support"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (23 commits)
      clocksource: arch_timer: Add support for memory mapped timers
      clocksource: arch_timer: Push the read/write wrappers deeper
      Documentation: Add memory mapped ARM architected timer binding
      clocksource: arch_timer: Pass clock event to set_mode callback
      clocksource: arch_timer: Make register accessors less error-prone
      ARM: clocksource: moxart: documentation: Update device tree bindings document
      ARM: clocksource: moxart: Add bitops.h include
      ARM: clocksource: moxart: documentation: Fix device tree bindings document
      ARM: clocksource: Add support for MOXA ART SoCs
      clocksource: cadence_ttc: Reuse clocksource as sched_clock
      clocksource: cadence_ttc: Remove unused header
      clocksource: sun4i: Fix bug when switching from periodic to oneshot modes
      clocksource: sun4i: Cleanup parent clock setup
      clocksource: sun4i: Remove TIMER_SCAL variable
      clocksource: sun4i: Factor out some timer code
      clocksource: sun4i: Fix the next event code
      clocksource: sun4i: Don't forget to enable the clock we use
      clocksource: sun4i: Add clocksource and sched clock drivers
      clocksource: sun4i: rename AUTORELOAD define to RELOAD
      clocksource: sun4i: Wrap macros arguments in parenthesis
      ...

commit b1f172a133879674ee4ab7146b788ee18aa8485a
Author: John Crispin <blogic@openwrt.org>
Date:   Thu Aug 8 13:08:07 2013 +0200

    MIPS: ralink: Probe clocksources from OF
    
    Make plat_time_init() call clocksource_of_init() allowing the systick cevt
    to load.
    
    Signed-off-by: John Crispin <blogic@openwrt.org>
    Cc: linux-mips@linux-mips.org
    Patchwork: http://patchwork.linux-mips.org/patch/5670/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 4bcd943ec81052db47465762bef6787b30b81978
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Tue Aug 27 11:13:29 2013 +0200

    microblaze: timer: Use CLKSRC_OF initialization
    
    Simplify timer initialization and prepare the driver
    for moving to drivers/clocksource folder.
    Also remove system-timer property from binding because
    the name is too generic.
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>

commit 63ce2cc474ce962d936ae6dfaa6ae2354b1db5b2
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Aug 20 12:45:54 2013 -0300

    clocksource: armada-370-xp: Add detailed clock requirements in devicetree binding
    
    Specifies the required clock inputs for each supported compatible.
    Armada 370 requires a single clock phandle, and Armada XP requires
    two clock phandles with clock-names "nbclk" and "fixed".
    
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Jason Cooper <jason@lakedaemon.net>
    Acked-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>

commit 5e9fe6cb1ba5ad321473e7b9c39fbe164129520d
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Aug 20 12:45:53 2013 -0300

    clocksource: armada-370-xp: Get reference fixed-clock by name
    
    The Armada XP timer has two mandatory clock inputs: nbclk and refclk,
    as specified by the device-tree binding.
    
    This commit fixes the clock selection. Instead of hard-coding the clock
    rate for the 25 MHz reference fixed-clock, obtain the clock by its name.
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Jason Cooper <jason@lakedaemon.net>
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>

commit ec8e51120a5b167e22ee29f4f427a0cb66eb445b
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Aug 20 12:45:52 2013 -0300

    clocksource: armada-370-xp: Replace WARN_ON with BUG_ON
    
    If the clock fails to be obtained and the timer fails to be properly
    registered, the kernel will freeze real soon. Instead, let's BUG()
    where the actual problem is located.
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Jason Cooper <jason@lakedaemon.net>
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>

commit 8ad31e66c150aeb44927b44bfb1ce7a3e23ec463
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Aug 13 11:43:14 2013 -0300

    clocksource: armada-370-xp: Fix device-tree binding
    
    This commit fixes the DT binding for the Armada 370/XP SoC timer.
    The previous "marvell,armada-370-xp-timer" compatible is removed and
    two new compatible strings are introduced: "marvell,armada-xp-timer"
    and "marvell,armada-370-timer".
    
    The rationale behind this change is that the Armada 370 SoC and the
    Armada XP SoC timers are not really compatible:
    
      * Armada 370 has no 25 MHz fixed timer.
    
      * Armada XP cannot work properly without such 25 MHz fixed timer
        as doing otherwise leads to using a clocksource whose frequency
        varies when doing cpufreq frequency changes.
    
    This commit also removes the "marvell,timer-25Mhz" property, given
    it's now meaningless.
    
    Cc: devicetree@vger.kernel.org
    Acked-by: Jason Cooper <jason@lakedaemon.net>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7cd6392c9bf5da6986103fcf5ca1b6fd0489d9b4
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Aug 13 11:43:13 2013 -0300

    clocksource: armada-370-xp: Introduce new compatibles
    
    The Armada XP SoC clocksource driver cannot work without the 25 MHz
    fixed timer. Therefore it's appropriate to introduce a new compatible
    string and use it to set the 25 MHz fixed timer.
    
    The 'marvell,timer-25MHz' property will be marked as deprecated.
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>

commit 573145f08c2b92c45498468afbbba909f6ce6135
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Aug 13 11:43:12 2013 -0300

    clocksource: armada-370-xp: Use CLOCKSOURCE_OF_DECLARE
    
    This is almost cosmetic: we achieve a bit of consistency with
    other clocksource drivers by using the CLOCKSOURCE_OF_DECLARE
    macro for the boilerplate code.
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>

commit 3579698e85ef9984e698ac3d8e2257a1adeeb722
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Aug 13 11:43:11 2013 -0300

    clocksource: armada-370-xp: Simplify TIMER_CTRL register access
    
    This commit creates two functions to access the TIMER_CTRL register:
    one for global one for the per-cpu. This makes the code much more
    readable. In addition, since the TIMER_CTRL register is also used for
    watchdog, this is preparation work for future thread-safe improvements.
    
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit ad48bd618f3761922c53f08e05fe00f3c85ca275
Author: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
Date:   Tue Aug 13 11:43:10 2013 -0300

    clocksource: armada-370-xp: Use BIT()
    
    This is a purely cosmetic commit: we replace hardcoded values that
    representing bits by BIT(), which is slightly more readable.
    
    Signed-off-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>

commit d296ebe0e61be179e79d1929d5284619d1d667cf
Merge: 65cb771fdf4a e3e1970f892d
Author: Olof Johansson <olof@lixom.net>
Date:   Thu Aug 29 16:46:14 2013 -0700

    Merge tag 'omap-for-v3.12/dra7xx-prcm' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into late/all
    
    From Tony Lindgren:
    Add basic support for devices on dra7xx by adding the PRCM and hwmod
    parts the same way as for other omaps. This is still needed in
    addition to device tree support for things like power management.
    
    Via Paul Walmsley <paul@pwsan.com>:
    
    This series adds basic TI DRA7xx PRCM and hwmod support.
    
    Basic test logs are available here:
    
    http://www.pwsan.com/omap/testlogs/dra7xx_prcm_devel_v3.12/20130823050445/
    
    Note that DRA7xx could not be tested locally, since I don't have a board.
    
    * tag 'omap-for-v3.12/dra7xx-prcm' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: OMAP: DRA7: Enable PM framework initializations
      ARM: OMAP: DRA7: hwmod: Create initial DRA7XX SoC data
      ARM: OMAP: DRA7: Reuse the omap44xx_restart and fix the device instance
      ARM: OMAP: DRA7: powerdomain: Handle missing vc/vp
      ARM: OMAP: DRA7: powerdomain: Add DRA7XX data and update header
      ARM: OMAP: DRA7: clockdomain: Add DRA7XX data and update header
      ARM: OMAP: DRA7: PRCM: Add DRA7XX local MPU PRCM regsiters
      ARM: OMAP: DRA7: CM: Add minimal regbit shifts
      ARM: OMAP: DRA7: CM: Add DRA7XX register defines
      ARM: OMAP: DRA7: PRM: Add DRA7XX register definitions
      ARM: DRA7: Add the build support in omap2plus
      ARM: DRA7: hwmod: Reuse the soc_ops used for OMAP4/5
      ARM: DRA7: id: Add cpu detection support for DRA7xx based SoCs'
      ARM: DRA7: Kconfig: Make ARCH_NR_GPIO default to 512
      ARM: DRA7: board-generic: Add basic DT support
      ARM: DRA7: Resue the clocksource, clockevent support
      ARM: DRA7: Reuse io tables and add a new .init_early
      ARM: DRA7: Reuse all of PRCM and MPUSS SMP infra
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 51f508721b778bd48d723bed1c4ca4af0855764c
Author: Chuck Anderson <chuck.anderson@oracle.com>
Date:   Tue Aug 6 15:12:19 2013 -0700

    xen/smp: initialize IPI vectors before marking CPU online
    
    commit fc78d343fa74514f6fd117b5ef4cd27e4ac30236 upstream.
    
    An older PVHVM guest (v3.0 based) crashed during vCPU hot-plug with:
    
            kernel BUG at drivers/xen/events.c:1328!
    
    RCU has detected that a CPU has not entered a quiescent state within the
    grace period.  It needs to send the CPU a reschedule IPI if it is not
    offline.  rcu_implicit_offline_qs() does this check:
    
            /*
             * If the CPU is offline, it is in a quiescent state.  We can
             * trust its state not to change because interrupts are disabled.
             */
            if (cpu_is_offline(rdp->cpu)) {
                    rdp->offline_fqs++;
                    return 1;
            }
    
            Else the CPU is online.  Send it a reschedule IPI.
    
    The CPU is in the middle of being hot-plugged and has been marked online
    (!cpu_is_offline()).  See start_secondary():
    
            set_cpu_online(smp_processor_id(), true);
            ...
            per_cpu(cpu_state, smp_processor_id()) = CPU_ONLINE;
    
    start_secondary() then waits for the CPU bringing up the hot-plugged CPU to
    mark it as active:
    
            /*
             * Wait until the cpu which brought this one up marked it
             * online before enabling interrupts. If we don't do that then
             * we can end up waking up the softirq thread before this cpu
             * reached the active state, which makes the scheduler unhappy
             * and schedule the softirq thread on the wrong cpu. This is
             * only observable with forced threaded interrupts, but in
             * theory it could also happen w/o them. It's just way harder
             * to achieve.
             */
            while (!cpumask_test_cpu(smp_processor_id(), cpu_active_mask))
                    cpu_relax();
    
            /* enable local interrupts */
            local_irq_enable();
    
    The CPU being hot-plugged will be marked active after it has been fully
    initialized by the CPU managing the hot-plug.  In the Xen PVHVM case
    xen_smp_intr_init() is called to set up the hot-plugged vCPU's
    XEN_RESCHEDULE_VECTOR.
    
    The hot-plugging CPU is marked online, not marked active and does not have
    its IPI vectors set up.  rcu_implicit_offline_qs() sees the hot-plugging
    cpu is !cpu_is_offline() and tries to send it a reschedule IPI:
    This will lead to:
    
            kernel BUG at drivers/xen/events.c:1328!
    
            xen_send_IPI_one()
            xen_smp_send_reschedule()
            rcu_implicit_offline_qs()
            rcu_implicit_dynticks_qs()
            force_qs_rnp()
            force_quiescent_state()
            __rcu_process_callbacks()
            rcu_process_callbacks()
            __do_softirq()
            call_softirq()
            do_softirq()
            irq_exit()
            xen_evtchn_do_upcall()
    
    because xen_send_IPI_one() will attempt to use an uninitialized IRQ for
    the XEN_RESCHEDULE_VECTOR.
    
    There is at least one other place that has caused the same crash:
    
            xen_smp_send_reschedule()
            wake_up_idle_cpu()
            add_timer_on()
            clocksource_watchdog()
            call_timer_fn()
            run_timer_softirq()
            __do_softirq()
            call_softirq()
            do_softirq()
            irq_exit()
            xen_evtchn_do_upcall()
            xen_hvm_callback_vector()
    
    clocksource_watchdog() uses cpu_online_mask to pick the next CPU to handle
    a watchdog timer:
    
            /*
             * Cycle through CPUs to check if the CPUs stay synchronized
             * to each other.
             */
            next_cpu = cpumask_next(raw_smp_processor_id(), cpu_online_mask);
            if (next_cpu >= nr_cpu_ids)
                    next_cpu = cpumask_first(cpu_online_mask);
            watchdog_timer.expires += WATCHDOG_INTERVAL;
            add_timer_on(&watchdog_timer, next_cpu);
    
    This resulted in an attempt to send an IPI to a hot-plugging CPU that
    had not initialized its reschedule vector. One option would be to make
    the RCU code check to not check for CPU offline but for CPU active.
    As becoming active is done after a CPU is online (in older kernels).
    
    But Srivatsa pointed out that "the cpu_active vs cpu_online ordering has been
    completely reworked - in the online path, cpu_active is set *before* cpu_online,
    and also, in the cpu offline path, the cpu_active bit is reset in the CPU_DYING
    notification instead of CPU_DOWN_PREPARE." Drilling in this the bring-up
    path: "[brought up CPU].. send out a CPU_STARTING notification, and in response
    to that, the scheduler sets the CPU in the cpu_active_mask. Again, this mask
    is better left to the scheduler alone, since it has the intelligence to use it
    judiciously."
    
    The conclusion was that:
    "
    1. At the IPI sender side:
    
       It is incorrect to send an IPI to an offline CPU (cpu not present in
       the cpu_online_mask). There are numerous places where we check this
       and warn/complain.
    
    2. At the IPI receiver side:
    
       It is incorrect to let the world know of our presence (by setting
       ourselves in global bitmasks) until our initialization steps are complete
       to such an extent that we can handle the consequences (such as
       receiving interrupts without crashing the sender etc.)
    " (from Srivatsa)
    
    As the native code enables the interrupts at some point we need to be
    able to service them. In other words a CPU must have valid IPI vectors
    if it has been marked online.
    
    It doesn't need to handle the IPI (interrupts may be disabled) but needs
    to have valid IPI vectors because another CPU may find it in cpu_online_mask
    and attempt to send it an IPI.
    
    This patch will change the order of the Xen vCPU bring-up functions so that
    Xen vectors have been set up before start_secondary() is called.
    It also will not continue to bring up a Xen vCPU if xen_smp_intr_init() fails
    to initialize it.
    
    Orabug 13823853
    Signed-off-by Chuck Anderson <chuck.anderson@oracle.com>
    Acked-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jonghwan Choi <jhbird.choi@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e707bb338b5c6f5859578ae6eb426a21b78b0f42
Merge: f0a108b7227c 282b583f752f
Author: Olof Johansson <olof@lixom.net>
Date:   Wed Aug 28 10:00:24 2013 -0700

    Merge tag 'renesas-cleanup3-for-v3.12' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas into next/renesas
    
    From Simon Horman:
    Third round of Renesas ARM based SoC cleanups for v3.12
    
    * Remove global GPIO_NR definition from sh73a0 SoC
    * Remove unnecessary nfsroot settings from bootargs of
      kzm9d and armadillo800eva
    * Rename irq initialisation functions of r8a7779 SoC
      to make them consistent with other SoCs
    * Simplify irq initialisation of r8a7740 SoC
    * Add missing __initdata annotations to bockw board, and
      r8a7790 and r8a7779 SoCs
    * Refactor time initialisation and remove shmobile_init_time.
      - This affects the following boards: kzm9g, marzen, ape6evm,
        armadillo800eva and bockw
      - This affects the following SoCs: r8a7790, r8a7779, r7a7740, r7a73a4
    * Cleanup device registration code of r8a7778 SoC
    
    * tag 'renesas-cleanup3-for-v3.12' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas: (45 commits)
      ARM: shmobile: sh73a0: Remove global GPIO_NR definition
      ARM: shmobile: kzm9d: remove nfsroot settings from bootargs
      ARM: shmobile: armadillo800eva: remove nfsroot settings from bootargs
      ARM: shmobile: r8a7779: move r8a7779_init_irq_xxx() to setup
      ARM: shmobile: r8a7740: move r8a7740_init_irq_of() to setup
      ARM: shmobile: bockw: add missing __initdata
      ARM: shmobile: r8a7790: add missing __initdata
      ARM: shmobile: r8a7779: add missing __initdata
      ARM: shmobile: Remove unused shmobile_init_time()
      ARM: shmobile: Use clocksource_of_init() on r8a7790
      ARM: shmobile: Use default ->init_time() on KZM9G DT ref
      ARM: shmobile: Use default ->init_time() on Marzen DT ref
      ARM: shmobile: Use default ->init_time() on APE6EVM DT ref
      ARM: shmobile: Use default ->init_time() on APE6EVM
      ARM: shmobile: Use default ->init_time() on Armadillo DT ref
      ARM: shmobile: Use default ->init_time() on Bockw DT ref
      ARM: shmobile: Use default ->init_time() on Bockw
      ARM: shmobile: Use default ->init_time() on r8a7779
      ARM: shmobile: Use default ->init_time() on r8a7778
      ARM: shmobile: Use default ->init_time() on r8a7740
      ...
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 8874c5e3b92fc23af4fd4da8830f7d4de41d03a0
Author: Magnus Damm <damm@opensource.se>
Date:   Mon Jun 17 15:40:52 2013 +0900

    clocksource: sh_cmt: 32-bit control register support
    
    Add support for CMT hardware with 32-bit control and counter
    registers, as found on r8a73a4 and r8a7790. To use the CMT
    with 32-bit hardware a second I/O memory resource needs to
    point out the CMSTR register and it needs to be 32 bit wide.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Reviewed-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 1745e696e174b54e37c057882970e50af1e80a7f
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Tue Jul 30 16:24:37 2013 +0200

    clocksource: em_sti: Convert to devm_* managed helpers
    
    Replace kzalloc, clk_get, ioremap and request_irq by their managed
    counterparts to simplify error paths.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Reviewed-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit cfb6d656d569510ac9239583ce09e4c92ad54719
Merge: fac778a2b8d6 220069945b29
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Aug 21 14:59:23 2013 +0200

    Merge branch 'timers/clockevents-next' of git://git.linaro.org/people/dlezcano/clockevents into timers/core
    
    * Support for memory mapped arch_timers
    * Trivial fixes to the moxart timer code
    * Documentation updates
    
    Trivial conflicts in drivers/clocksource/arm_arch_timer.c. Fixed up
    the newly added __cpuinit annotations as well.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit fc78d343fa74514f6fd117b5ef4cd27e4ac30236
Author: Chuck Anderson <chuck.anderson@oracle.com>
Date:   Tue Aug 6 15:12:19 2013 -0700

    xen/smp: initialize IPI vectors before marking CPU online
    
    An older PVHVM guest (v3.0 based) crashed during vCPU hot-plug with:
    
            kernel BUG at drivers/xen/events.c:1328!
    
    RCU has detected that a CPU has not entered a quiescent state within the
    grace period.  It needs to send the CPU a reschedule IPI if it is not
    offline.  rcu_implicit_offline_qs() does this check:
    
            /*
             * If the CPU is offline, it is in a quiescent state.  We can
             * trust its state not to change because interrupts are disabled.
             */
            if (cpu_is_offline(rdp->cpu)) {
                    rdp->offline_fqs++;
                    return 1;
            }
    
            Else the CPU is online.  Send it a reschedule IPI.
    
    The CPU is in the middle of being hot-plugged and has been marked online
    (!cpu_is_offline()).  See start_secondary():
    
            set_cpu_online(smp_processor_id(), true);
            ...
            per_cpu(cpu_state, smp_processor_id()) = CPU_ONLINE;
    
    start_secondary() then waits for the CPU bringing up the hot-plugged CPU to
    mark it as active:
    
            /*
             * Wait until the cpu which brought this one up marked it
             * online before enabling interrupts. If we don't do that then
             * we can end up waking up the softirq thread before this cpu
             * reached the active state, which makes the scheduler unhappy
             * and schedule the softirq thread on the wrong cpu. This is
             * only observable with forced threaded interrupts, but in
             * theory it could also happen w/o them. It's just way harder
             * to achieve.
             */
            while (!cpumask_test_cpu(smp_processor_id(), cpu_active_mask))
                    cpu_relax();
    
            /* enable local interrupts */
            local_irq_enable();
    
    The CPU being hot-plugged will be marked active after it has been fully
    initialized by the CPU managing the hot-plug.  In the Xen PVHVM case
    xen_smp_intr_init() is called to set up the hot-plugged vCPU's
    XEN_RESCHEDULE_VECTOR.
    
    The hot-plugging CPU is marked online, not marked active and does not have
    its IPI vectors set up.  rcu_implicit_offline_qs() sees the hot-plugging
    cpu is !cpu_is_offline() and tries to send it a reschedule IPI:
    This will lead to:
    
            kernel BUG at drivers/xen/events.c:1328!
    
            xen_send_IPI_one()
            xen_smp_send_reschedule()
            rcu_implicit_offline_qs()
            rcu_implicit_dynticks_qs()
            force_qs_rnp()
            force_quiescent_state()
            __rcu_process_callbacks()
            rcu_process_callbacks()
            __do_softirq()
            call_softirq()
            do_softirq()
            irq_exit()
            xen_evtchn_do_upcall()
    
    because xen_send_IPI_one() will attempt to use an uninitialized IRQ for
    the XEN_RESCHEDULE_VECTOR.
    
    There is at least one other place that has caused the same crash:
    
            xen_smp_send_reschedule()
            wake_up_idle_cpu()
            add_timer_on()
            clocksource_watchdog()
            call_timer_fn()
            run_timer_softirq()
            __do_softirq()
            call_softirq()
            do_softirq()
            irq_exit()
            xen_evtchn_do_upcall()
            xen_hvm_callback_vector()
    
    clocksource_watchdog() uses cpu_online_mask to pick the next CPU to handle
    a watchdog timer:
    
            /*
             * Cycle through CPUs to check if the CPUs stay synchronized
             * to each other.
             */
            next_cpu = cpumask_next(raw_smp_processor_id(), cpu_online_mask);
            if (next_cpu >= nr_cpu_ids)
                    next_cpu = cpumask_first(cpu_online_mask);
            watchdog_timer.expires += WATCHDOG_INTERVAL;
            add_timer_on(&watchdog_timer, next_cpu);
    
    This resulted in an attempt to send an IPI to a hot-plugging CPU that
    had not initialized its reschedule vector. One option would be to make
    the RCU code check to not check for CPU offline but for CPU active.
    As becoming active is done after a CPU is online (in older kernels).
    
    But Srivatsa pointed out that "the cpu_active vs cpu_online ordering has been
    completely reworked - in the online path, cpu_active is set *before* cpu_online,
    and also, in the cpu offline path, the cpu_active bit is reset in the CPU_DYING
    notification instead of CPU_DOWN_PREPARE." Drilling in this the bring-up
    path: "[brought up CPU].. send out a CPU_STARTING notification, and in response
    to that, the scheduler sets the CPU in the cpu_active_mask. Again, this mask
    is better left to the scheduler alone, since it has the intelligence to use it
    judiciously."
    
    The conclusion was that:
    "
    1. At the IPI sender side:
    
       It is incorrect to send an IPI to an offline CPU (cpu not present in
       the cpu_online_mask). There are numerous places where we check this
       and warn/complain.
    
    2. At the IPI receiver side:
    
       It is incorrect to let the world know of our presence (by setting
       ourselves in global bitmasks) until our initialization steps are complete
       to such an extent that we can handle the consequences (such as
       receiving interrupts without crashing the sender etc.)
    " (from Srivatsa)
    
    As the native code enables the interrupts at some point we need to be
    able to service them. In other words a CPU must have valid IPI vectors
    if it has been marked online.
    
    It doesn't need to handle the IPI (interrupts may be disabled) but needs
    to have valid IPI vectors because another CPU may find it in cpu_online_mask
    and attempt to send it an IPI.
    
    This patch will change the order of the Xen vCPU bring-up functions so that
    Xen vectors have been set up before start_secondary() is called.
    It also will not continue to bring up a Xen vCPU if xen_smp_intr_init() fails
    to initialize it.
    
    Orabug 13823853
    Signed-off-by Chuck Anderson <chuck.anderson@oracle.com>
    Acked-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>

commit 5515d9981f5f30e82d096921f86ba016911c9ea8
Merge: f668adebf435 cf470a1b1a74
Author: Kevin Hilman <khilman@linaro.org>
Date:   Mon Aug 19 10:22:10 2013 -0700

    Merge tag 'omap-for-v3.12/dra7xx' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into next/soc
    
    From Tony Lindgren:
    Minimal DRA7xx based SoC core support via Rajendra Nayak <rnayak@ti.com>
    
    * tag 'omap-for-v3.12/dra7xx' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap: (849 commits)
      ARM: DRA7: Add the build support in omap2plus
      ARM: DRA7: hwmod: Reuse the soc_ops used for OMAP4/5
      ARM: DRA7: id: Add cpu detection support for DRA7xx based SoCs'
      ARM: DRA7: Kconfig: Make ARCH_NR_GPIO default to 512
      ARM: DRA7: board-generic: Add basic DT support
      ARM: DRA7: Resue the clocksource, clockevent support
      ARM: DRA7: Reuse io tables and add a new .init_early
      ARM: DRA7: Reuse all of PRCM and MPUSS SMP infra
      Linux 3.11-rc5
      btrfs: don't loop on large offsets in readdir
      Btrfs: check to see if root_list is empty before adding it to dead roots
      Btrfs: release both paths before logging dir/changed extents
      Btrfs: allow splitting of hole em's when dropping extent cache
      Btrfs: make sure the backref walker catches all refs to our extent
      Btrfs: fix backref walking when we hit a compressed extent
      Btrfs: do not offset physical if we're compressed
      Btrfs: fix extent buffer leak after backref walking
      Btrfs: fix a bug of snapshot-aware defrag to make it work on partial extents
      btrfs: fix file truncation if FALLOC_FL_KEEP_SIZE is specified
      dlm: kill the unnecessary and wrong device_close()->recalc_sigpending()
      ...
    
    Signed-off-by: Kevin Hilman <khilman@linaro.org>

commit 5ddc9d6023c9b60f7e5b6c1658c3316cf915c3d1
Merge: 3b6250e707d8 5e9eaadb0b3f
Author: Olof Johansson <olof@lixom.net>
Date:   Thu Aug 15 23:29:38 2013 -0700

    Merge tag 'boards-3.12-2' of git://git.infradead.org/linux-mvebu into next/boards
    
    From Jason Cooper, mvebu boards changes for v3.12:
    
     - kirkwood
        - convert Dockstar, Guruplug, mv88f6281gtw_ge to DT
        - remove legacy boards (which have DT support) sheevaplug, lacie boards
        - ARRAY_AND_SIZE() cleanup
    
     - dove
        - some DT node updates (depends on irqchip/clocksource DT changes earlier)
        - add the D2Plug board
    
    * tag 'boards-3.12-2' of git://git.infradead.org/linux-mvebu:
      ARM: dove: add initial DT file for Globalscale D2Plug
      ARM: dove: add GPIO IR receiver node to SolidRun CuBox
      ARM: dove: add common pinmux functions to DT
      ARM: dove: add cpu device tree node
      arch/arm/mach-kirkwood: Avoid using ARRAY_AND_SIZE(e) as a function argument
      ARM: kirkwood: fix DT building and update defconfig
      ARM: kirkwood: Remove all remaining trace of DNS-320/325 platform code
      ARM: kirkwood: use dts pre-processor for mv88f6281gtw-ge
      ARM: kirkwood: convert the mv88f6281gtw_ge board to DT
      ARM: kirkwood: remove LaCie boards that are supported through DT
      ARM: kirkwood: remove support for legacy booting of Sheevaplug
      ARM: kirkwood: remove support for legacy booting of Guruplug
      ARM: kirkwood: remove support for legacy booting of Dockstar
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 8b2496a22810531cb9157191cd0264bae8efeca0
Merge: bee22087faf5 4380c39ad3ef
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Aug 13 23:33:07 2013 -0700

    Merge tag 'v3.12-pwm-cleanup-for-olof' of git://github.com/tom3q/linux into next/cleanup
    
    From Tomasz Figa:
    Here is the Samsung PWM cleanup series. Particular patches of the series
    involve following modifications:
     - fixing up few things in samsung_pwm_timer clocksource driver,
     - moving remaining Samsung platforms to the new clocksource driver,
     - removing old clocksource driver,
     - adding new multiplatform- and DT-aware PWM driver,
     - moving all Samsung platforms to use the new PWM driver,
     - removing old PWM driver,
     - removing all PWM-related code that is not used anymore.
    
    * tag 'v3.12-pwm-cleanup-for-olof' of git://github.com/tom3q/linux: (684 commits)
      ARM: SAMSUNG: Remove plat/regs-timer.h header
      ARM: SAMSUNG: Remove remaining uses of plat/regs-timer.h header
      ARM: SAMSUNG: Remove pwm-clock infrastructure
      ARM: SAMSUNG: Remove old PWM timer platform devices
      pwm: Remove superseded pwm-samsung-legacy driver
      ARM: SAMSUNG: Modify board files to use new PWM platform device
      ARM: SAMSUNG: Rework private data handling in dev-backlight
      pwm: Add new pwm-samsung driver
      pwm: samsung: Rename to pwm-samsung-legacy
      ARM: SAMSUNG: Remove unused PWM timer IRQ chip code
      ARM: SAMSUNG: Remove old samsung-time driver
      ARM: SAMSUNG: Move all platforms to new clocksource driver
      ARM: SAMSUNG: Set PWM platform data
      ARM: SAMSUNG: Add new PWM platform device
      ARM: SAMSUNG: Unify base address definitions of timer block
      clocksource: samsung_pwm_timer: Handle suspend/resume correctly
      clocksource: samsung_pwm_timer: Do not use clocksource_mmio
      clocksource: samsung_pwm_timer: Cache clocksource register address
      clocksource: samsung_pwm_timer: Correct definition of AUTORELOAD bit
      clocksource: samsung_pwm_timer: Do not request PWM mem region
      + v3.11-rc4
    
    Conflicts:
            arch/arm/Kconfig.debug
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit f18153f984bef7ab551701f2bae74078c0ded27c
Author: R Sricharan <r.sricharan@ti.com>
Date:   Thu Feb 7 13:25:39 2013 +0530

    ARM: DRA7: Resue the clocksource, clockevent support
    
    All of OMAP5 timer support for clocksource and clockevent is completely
    reused across DRA7.
    
    Signed-off-by: R Sricharan <r.sricharan@ti.com>
    Signed-off-by: Rajendra Nayak <rnayak@ti.com>

commit 11ad39ede24ee42909d58dc95031d96da46e33bd
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Sat Apr 6 02:40:36 2013 +0200

    pwm: Add new pwm-samsung driver
    
    This patch introduces new Samsung PWM driver, which is completely
    rewritten to be multiplatform- and DeviceTree-aware.
    
    In addition, remaining problems of old driver are fixed, such as:
     - proper handling of hardware variants,
     - synchronization on SMP systems,
     - handling of boundary parameter values,
     - hardware sharing with PWM clocksource driver,
     - undefined state of PWM output after stopping PWM channel.
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Mark Brown <broonie@linaro.org>
    Tested-by: Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Thierry Reding <thierry.reding@gmail.com>

commit 4ddbed9618724d52a7a79c1e10ef5adb46fcccf7
Merge: 16649596d701 fa8c5a811e0e
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Aug 11 15:33:54 2013 -0700

    Merge tag 'boards-3.12' of git://git.infradead.org/linux-mvebu into next/boards
    
    From Jason Cooper:
    mvebu boards changes for v3.12
    
     - convert kirkwood, dove, orion5x to DT init of mv643xx_eth
        - _lots_ of board code removal :)
     - convert kirkwood, dove and orion5x to DT init of clocksource and irqchip
    
    * tag 'boards-3.12' of git://git.infradead.org/linux-mvebu:
      ARM: plat-orion: add reg offset to DT irq driver stub
      ARM: kirkwood: remove obsolete SDIO clock gate workaround
      ARM: kirkwood: convert to DT irqchip and clocksource
      ARM: dove: convert to DT irqchip and clocksource
      ARM: orion5x: update intc device tree node to new reg layout
      ARM: kirkwood: move device tree nodes to DT irqchip and clocksource
      ARM: dove: move device tree nodes to DT irqchip and clocksource
      ARM: orion5x: remove legacy mv643xx_eth board setup
      ARM: kirkwood: remove legacy clk alias for mv643xx_eth
      ARM: kirkwood: remove redundant DT board files
      ARM: dove: remove legacy mv643xx_eth setup
      ARM: orion5x: add gigabit ethernet and mvmdio device tree nodes
      ARM: kirkwood: add gigabit ethernet and mvmdio device tree nodes
      ARM: dove: add gigabit ethernet and mvmdio device tree nodes
      + Linux 3.11-rc2
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit c4a62a5f79f515056d9293ee0e9ce0869a326021
Author: Magnus Damm <damm@opensource.se>
Date:   Thu Aug 1 04:03:00 2013 +0900

    ARM: shmobile: Use clocksource_of_init() on r8a7790
    
    Replace the call to shmobile_timer_init() with
    clocksource_of_init(). This will allow us to
    get rid of shmobile_timer_init().
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    [horms+renesas@verge.net.au: include linux/clocksource.h]
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit c4fb0567db44d1856795b9fc9ff58d6d2344a80a
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Sun Apr 28 02:28:06 2013 +0200

    ARM: SAMSUNG: Remove old samsung-time driver
    
    This patch removes the old samsung-time driver, since all its users have
    been migrated to the new samsung_pwm_timer clocksource driver.
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Mark Brown <broonie@linaro.org>
    Tested-by: Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

commit 4280506ac9bb17f2450cf1042edf929d26d24a8e
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Sun Apr 28 02:25:01 2013 +0200

    ARM: SAMSUNG: Move all platforms to new clocksource driver
    
    This patch moves all Samsung platforms using PWM clocksource from legacy
    samsung-time to new samsung-pwm-timer driver.
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Reviewed-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Mark Brown <broonie@linaro.org>
    Tested-by: Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

commit 0b96258b420208ebaacc0ef4b21b67dba262badf
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Mon Jun 17 01:11:31 2013 +0200

    clocksource: samsung_pwm_timer: Handle suspend/resume correctly
    
    Current suspend/resume handling of the driver was broken, because:
     - periodic timer was being enabled in CLOCK_EVT_MODE_RESUME mode, which
       does not seem to be correct behavior looking at other platforms,
     - PWM divisors need to be restored, but they were not,
     - clockevent interrupt mask needs to be restored, but it was not,
     - clocksource was being restored in clockevent resume callback.
    
    This patch fixes issues mentioned above, making suspend/resume handling
    in the driver correct.
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Mark Brown <broonie@linaro.org>
    Tested-by: Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 6792e636d5bfc1b26c25e7ed056b358e1144c6df
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Mon Jun 17 00:13:06 2013 +0200

    clocksource: samsung_pwm_timer: Do not use clocksource_mmio
    
    In case of Samsung PWM timer, clocksource MMIO can not be used, because
    custom suspend/resume callbacks are required.
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Reviewed-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Mark Brown <broonie@linaro.org>
    Tested-by: Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

commit 61d7e2056eb6147824a8689c6e6ab62396e26321
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Mon Jun 17 00:07:03 2013 +0200

    clocksource: samsung_pwm_timer: Cache clocksource register address
    
    Instead of calculating register every time the timer should be read,
    we can just do it one time at initialization and store the address in
    driver data.
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Mark Brown <broonie@linaro.org>
    Tested-by: Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

commit ceea124103c6f00561491b45133be5ccefc8ea1d
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Mon Jun 17 02:10:24 2013 +0200

    clocksource: samsung_pwm_timer: Correct definition of AUTORELOAD bit
    
    PWM channel 4 has its autoreload bit located at different position. This
    patch fixes the driver to account for that.
    
    This fixes a problem with the clocksource hanging after it overflows because
    it is not reloaded any more.
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Mark Brown <broonie@linaro.org>
    Tested-by: Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

commit e24154896e2f60b0c20bda492d662ad77ffa5c32
Author: Tomasz Figa <tomasz.figa@gmail.com>
Date:   Thu Jun 13 21:22:44 2013 +0200

    clocksource: samsung_pwm_timer: Do not request PWM mem region
    
    PWM registers are shared between clocksource and PWM drivers and so can
    not be claimed for exclusive use.
    
    Signed-off-by: Tomasz Figa <tomasz.figa@gmail.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Mark Brown <broonie@linaro.org>
    Tested-by: Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

commit 220069945b298d3998c6598b081c466dca259929
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:59:32 2013 -0700

    clocksource: arch_timer: Add support for memory mapped timers
    
    Add support for the memory mapped timers by filling in the
    read/write functions and adding some parsing code. Note that we
    only register one clocksource, preferring the cp15 based
    clocksource over the mmio one.
    
    To keep things simple we register one global clockevent. This
    covers the case of UP and SMP systems with only mmio hardware and
    systems where the memory mapped timers are used as the broadcast
    timer in low power modes.
    
    The DT binding allows for per-CPU memory mapped timers in case we
    want to support that in the future, but the code isn't added
    here. We also don't do much for hypervisor support, although it
    should be possible to support it by searching for at least two
    frames where one frame has the virtual capability and then
    updating KVM timers to support it.
    
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Marc Zyngier <Marc.Zyngier@arm.com>
    Cc: Rob Herring <robherring2@gmail.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>

commit 60faddf6eb3aba16068032bdcf35e18ace4bfb21
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:59:31 2013 -0700

    clocksource: arch_timer: Push the read/write wrappers deeper
    
    We're going to introduce support to read and write the memory
    mapped timer registers in the next patch, so push the cp15
    read/write functions one level deeper. This simplifies the next
    patch and makes it clearer what's going on.
    
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Marc Zyngier <Marc.Zyngier@arm.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>

commit 1ff99ea65687d921cb71f330491ec4205c00eb9f
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:59:30 2013 -0700

    clocksource: arch_timer: Pass clock event to set_mode callback
    
    There isn't any reason why we don't pass the event here and we'll
    need it in the near future for memory mapped arch timers anyway.
    
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Marc Zyngier <Marc.Zyngier@arm.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>

commit e09f3cc0184d6b5c3816f921b7ffb67623e5e834
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:59:28 2013 -0700

    clocksource: arch_timer: Make register accessors less error-prone
    
    Using an enum for the register we wish to access allows newer
    compilers to determine if we've forgotten a case in our switch
    statement. This allows us to remove the BUILD_BUG() instances in
    the arm64 port, avoiding problems where optimizations may not
    happen.
    
    To try and force better code generation we're currently marking
    the accessor functions as inline, but newer compilers can ignore
    the inline keyword unless it's marked __always_inline. Luckily on
    arm and arm64 inline is __always_inline, but let's make
    everything __always_inline to be explicit.
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Marc Zyngier <Marc.Zyngier@arm.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>

commit 766acb88a773dcbc98f2ae8d7ef8c147e2dccd99
Author: Jonas Jensen <jonas.jensen@gmail.com>
Date:   Fri Jul 26 16:17:15 2013 +0200

    ARM: clocksource: moxart: documentation: Update device tree bindings document
    
    1. describe compatible variable "Must be" instead of "Should be".
    2. change description so it's from the point of view of the device
    
    Signed-off-by: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit adf157ebf6097aa2abc7f05120e7dda6ed238252
Author: Jonas Jensen <jonas.jensen@gmail.com>
Date:   Fri Jul 26 16:03:38 2013 +0200

    ARM: clocksource: moxart: Add bitops.h include
    
    bitops.h included implicitly, add #include <linux/bitops.h>
    
    Signed-off-by: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit b662a8662436cd4815e1738d5f491a12dc289177
Author: Jonas Jensen <jonas.jensen@gmail.com>
Date:   Fri Jul 19 13:12:59 2013 +0200

    ARM: clocksource: moxart: documentation: Fix device tree bindings document
    
    Fix device tree bindings document with the correct clock name.
    
    Signed-off-by: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit f4e6e1ea19737077d958f2bc6c196eb579d97544
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:29 2013 -0700

    clocksource: vf_pit_timer: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Cc: Jingchang Lu <b35083@freescale.com>
    Cc: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 130e6b25a28ff5b2421d6cae5f2bac1f5afdcfb0
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:28 2013 -0700

    clocksource: sirf: Switch to sched_clock_register() and use 64 bits
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface and use all 64 bits of this timer.
    
    Cc: Barry Song <Baohua.Song@csr.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit d9dbcbe0ea29dac15a9ca70c274fec4ef100e187
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:27 2013 -0700

    clocksource: time-armada-370-xp: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Cc: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 35702999b1f366ed80fc4bd94bd8ebc8a1c46954
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:26 2013 -0700

    clocksource: tegra: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Cc: Stephen Warren <swarren@wwwdotorg.org>
    Acked-by: Stephen Warren <swarren@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 2902b30e0bd78686e7d891519dbfe2e4e43825fd
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:25 2013 -0700

    clocksource: samsung_pwm_timer: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Cc: Tomasz Figa <t.figa@samsung.com>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit e25bc5f5ad192cf8782db64acb83962a0b27c4e0
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:24 2013 -0700

    clocksource: nomadik: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit fcfca6ef6a35690648de6529b607674d4132b10e
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:23 2013 -0700

    clocksource: mxs_timer: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Cc: Shawn Guo <shawn.guo@linaro.org>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit fa8296ae62364d80bb82c4c011469ae3e423d509
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:22 2013 -0700

    clocksource: dw_apb_timer_of: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 5602d7c808aa99230ab1ef1598e2425cf2acedc5
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:21 2013 -0700

    clocksource: dbx500-prcmu: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Cc: Srinidhi Kasagar <srinidhi.kasagar@stericsson.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 18952f20fadef0a5e099f5c4cac34b97644ccc35
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:20 2013 -0700

    clocksource: bcm2835: Switch to sched_clock_register()
    
    The 32 bit sched_clock interface now supports 64 bits. Upgrade to
    the 64 bit function to allow us to remove the 32 bit registration
    interface.
    
    Cc: Stephen Warren <swarren@wwwdotorg.org>
    Acked-by: Stephen Warren <swarren@wwwdotorg.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 87d8b9eb7eb6669aad6435a51e9862362141ba76
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Jul 18 16:21:14 2013 -0700

    clocksource: Extract max nsec calculation into separate function
    
    We need to calculate the same number in the clocksource code and
    the sched_clock code, so extract this code into its own function.
    We also drop the min_t and just use min() because the two types
    are the same.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit f707f7ae37c514a3871741747bfd8c09d7badb05
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Wed May 29 10:11:17 2013 +0200

    clocksource: dw_apb: Fix error check
    
    commit 1a33bd2be705cbb3f57d7223b60baea441039307 upstream.
    
    irq_of_parse_and_map() returns 0 on error, while the code checks for NO_IRQ.
    This breaks on platforms that have NO_IRQ != 0.
    
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2326f04321a9aec591c1d159b3a9d12c2bf89438
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Tue Jul 2 15:15:07 2013 +0200

    ARM: kirkwood: convert to DT irqchip and clocksource
    
    With recent support for true irqchip and clocksource drivers for Orion
    SoCs, now make use of it on DT enabled Kirkwood boards.
    
    This also introduces a new Kconfig option for legacy (non-DT) Kirkwood
    where old code is moved out to and polishes DT board file a little bit.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit f07d73e33d0eb9858d48b81eb7037e132293ed84
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Tue Jul 2 13:03:40 2013 +0200

    ARM: dove: convert to DT irqchip and clocksource
    
    With recent support for true irqchip and clocksource drivers for Orion
    SoCs, now make use of it on DT enabled Dove boards.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit 15f18591d63fa78da87121ba0687fe1f4bcc5468
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Tue Jul 2 13:03:38 2013 +0200

    ARM: kirkwood: move device tree nodes to DT irqchip and clocksource
    
    With recent support for true irqchip and clocksource drivers for Orion
    SoCs, now make use of it on DT enabled Kirkwood boards.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit 953b710cd53718e5cef9d8c54231b8f234e4f67e
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Tue Jul 2 13:03:37 2013 +0200

    ARM: dove: move device tree nodes to DT irqchip and clocksource
    
    With recent support for true irqchip and clocksource drivers for Orion
    SoCs, now make use of it on DT enabled Dove boards.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit 47dcd3563e45fc5a59bf7f3326ef56087be8bebe
Merge: 3b2f64d00c46 060fd3043e5e
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Jul 23 14:51:34 2013 -0700

    Merge tag 'remove-local-timers' of git://git.kernel.org/pub/scm/linux/kernel/git/davidb/linux-msm into next/cleanup
    
    From Stephen Boyd:
    
    Now that we have a generic arch hook for broadcast we can remove the
    local timer API entirely. Doing so will reduce code in ARM core, reduce
    the architecture dependencies of our timer drivers, and simplify the code
    because we no longer go through an architecture layer that is essentially
    a hotplug notifier.
    
    * tag 'remove-local-timers' of git://git.kernel.org/pub/scm/linux/kernel/git/davidb/linux-msm:
      ARM: smp: Remove local timer API
      clocksource: time-armada-370-xp: Divorce from local timer API
      clocksource: time-armada-370-xp: Fix sparse warning
      ARM: msm: Divorce msm_timer from local timer API
      ARM: PRIMA2: Divorce timer-marco from local timer API
      ARM: EXYNOS4: Divorce mct from local timer API
      ARM: OMAP2+: Divorce from local timer API
      ARM: smp_twd: Divorce smp_twd from local timer API
      ARM: smp: Remove duplicate dummy timer implementation
    
    Resolved a large number of conflicts due to __cpuinit cleanups, etc.
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 397bbf6dee50bb1f07cbdb464c41b0f5b7a85493
Author: Prarit Bhargava <prarit@redhat.com>
Date:   Fri Feb 22 15:08:56 2013 -0500

    clocksource: Fix !CONFIG_CLOCKSOURCE_WATCHDOG compile
    
    If I explicitly disable the clocksource watchdog in the x86 Kconfig,
    the x86 kernel will not compile unless this is properly defined.
    
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: x86@kernel.org
    Signed-off-by: Prarit Bhargava <prarit@redhat.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 3f334c20811d2970cbe14dbd2db3c08da0220fe8
Merge: c66bce9b655a 0b776b062843
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jul 18 10:50:26 2013 -0700

    Merge branch 'cpuinit_phase2' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux
    
    Pull phase two of __cpuinit removal from Paul Gortmaker:
     "With the __cpuinit infrastructure removed earlier, this group of
      commits only removes the function/data tagging that was done with the
      various (now no-op) __cpuinit related prefixes.
    
      Now that the dust has settled with yesterday's v3.11-rc1, there
      hopefully shouldn't be any new users leaking back in tree, but I think
      we can leave the harmless no-op stubs there for a release as a
      courtesy to those who still have out of tree stuff and weren't paying
      attention.
    
      Although the commits are against the recent tag to allow for minor
      context refreshes for things like yesterday's v3.11-rc1~ slab content,
      the patches have been largely unchanged for weeks, aside from such
      trivial updates.
    
      For detail junkies, the largely boring and mostly irrelevant history
      of the patches can be viewed at:
    
        http://git.kernel.org/cgit/linux/kernel/git/paulg/cpuinit-delete.git
    
      If nothing else, I guess it does at least demonstrate the level of
      involvement required to shepherd such a treewide change to completion.
    
      This is the same repository of patches that has been applied to the
      end of the daily linux-next branches for the past several weeks"
    
    * 'cpuinit_phase2' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux: (28 commits)
      block: delete __cpuinit usage from all block files
      drivers: delete __cpuinit usage from all remaining drivers files
      kernel: delete __cpuinit usage from all core kernel files
      rcu: delete __cpuinit usage from all rcu files
      net: delete __cpuinit usage from all net files
      acpi: delete __cpuinit usage from all acpi files
      hwmon: delete __cpuinit usage from all hwmon files
      cpufreq: delete __cpuinit usage from all cpufreq files
      clocksource+irqchip: delete __cpuinit usage from all related files
      x86: delete __cpuinit usage from all x86 files
      score: delete __cpuinit usage from all score files
      xtensa: delete __cpuinit usage from all xtensa files
      openrisc: delete __cpuinit usage from all openrisc files
      m32r: delete __cpuinit usage from all m32r files
      hexagon: delete __cpuinit usage from all hexagon files
      frv: delete __cpuinit usage from all frv files
      cris: delete __cpuinit usage from all cris files
      metag: delete __cpuinit usage from all metag files
      tile: delete __cpuinit usage from all tile files
      sh: delete __cpuinit usage from all sh files
      ...

commit 07862c1cd6675cde2dd4bd64e64d704ea2185b79
Author: Jonas Jensen <jonas.jensen@gmail.com>
Date:   Wed Jul 17 10:04:57 2013 +0200

    ARM: clocksource: Add support for MOXA ART SoCs
    
    This patch adds an clocksource driver for the main timer(s)
    found on MOXA ART SoCs.
    
    The MOXA ART SoC provides three separate timers with individual
    count/load/match registers, two are used here:
    
    TIMER1: clockevents, used to support oneshot and periodic events
    TIMER2: set up as a free running counter, used as clocksource
    
    Timers are preconfigured by bootloader to count down and interrupt
    on match or zero. Count increments every APB clock cycle and is
    automatically reloaded when it reaches zero.
    
    Signed-off-by: Jonas Jensen <jonas.jensen@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 3d77b30efc72d126c2b74070b41a03869611228d
Author: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date:   Mon Jul 8 09:51:38 2013 -0700

    clocksource: cadence_ttc: Reuse clocksource as sched_clock
    
    Reuse the TTC clocksource timer as sched clock provider.
    
    Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Michal Simek <monstr@monstr.eu>

commit 9bbf914043e04f65e619f3c0ff67c387812f9458
Author: Soren Brinkmann <soren.brinkmann@xilinx.com>
Date:   Mon Jul 8 09:51:37 2013 -0700

    clocksource: cadence_ttc: Remove unused header
    
    The clk-provider.h header is not required by this driver.
    
    Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 7e14183469d8aa2c7aa7675a6156e7846dda7748
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Jul 16 16:45:38 2013 +0200

    clocksource: sun4i: Fix bug when switching from periodic to oneshot modes
    
    The interval was firing at was set up at probe time, and only changed in
    the set_next_event, and never changed back, which is not really what is
    expected.
    
    When enabling the periodic mode, now set an interval to tick every
    jiffy.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit a2c49e7b553a28f10ab34e5da538ed4a45a697a7
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Jul 16 16:45:38 2013 +0200

    clocksource: sun4i: Cleanup parent clock setup
    
    The current bring-up code for the timer was overly complicated. The only
    thing we need is actually which clock we want to use as source and
    that's pretty much all. Let's keep it that way.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c2b852f77b0d4c71967b61848d666c7a25e17627
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Jul 16 16:45:38 2013 +0200

    clocksource: sun4i: Remove TIMER_SCAL variable
    
    The prescaler is only used when using the internal low frequency
    oscillator (at 32kHz). Since we're using the higher frequency oscillator
    at 24MHz, we can just remove it.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 96651a0732d148f7e4a59cec6aa174049866cd0e
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Jul 16 16:45:38 2013 +0200

    clocksource: sun4i: Factor out some timer code
    
    The set_next_event and set_mode callbacks share a lot of common code we
    can easily factor to avoid duplication and mistakes.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 63d88f1ac71173e47c40ea116e4489f71c6ed9c7
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Jul 16 16:45:38 2013 +0200

    clocksource: sun4i: Fix the next event code
    
    The next_event logic was setting the next interval to fire in the
    current timer value instead of the interval value register, which is
    obviously wrong.
    
    Plus, the logic to set the actual value was wrong as well: the interval
    register can only be modified when the timer is disabled, and then
    enable it back, otherwise, it'll have no effect. Fix this logic as well
    since that code couldn't possibly work.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 8c31bec28b69a86aa83f072e6e00225380853a9e
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Jul 16 16:45:38 2013 +0200

    clocksource: sun4i: Don't forget to enable the clock we use
    
    Even if in our case, this clock was non-gatable, used as a parent clock
    for several IPs, it still is a good idea to enable it.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 137c6b3c7c63944a9cb51de0870b72f62d240f62
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Jul 16 16:45:37 2013 +0200

    clocksource: sun4i: Add clocksource and sched clock drivers
    
    Use the second timer found on the Allwinner SoCs as a clock source and
    sched clock, that were both not used yet on these platforms.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9eded23215e99338155c18f6d860859106568bb0
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Jul 16 16:45:37 2013 +0200

    clocksource: sun4i: rename AUTORELOAD define to RELOAD
    
    The name AUTORELOAD was actually pretty bad since it doesn't make the
    register reload the previous interval when it expires, but setting this
    value pushes the new programmed interval to the internal timer counter.
    Rename it to RELOAD instead.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit bb008b9e873f5544120dcd401316b4c0e7743dde
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Jul 16 16:45:37 2013 +0200

    clocksource: sun4i: Wrap macros arguments in parenthesis
    
    The macros were not using parenthesis to escape the arguments passed to
    them. It is pretty unsafe, so add those parenthesis.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 40777645eb7fe5b9184b339e1a8aa889993f6d75
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Tue Jul 16 16:45:37 2013 +0200

    clocksource: sun4i: Use the BIT macros where possible
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 9222d247bcbaacc40fe15549158f9d67523c1ace
Author: John Stultz <john.stultz@linaro.org>
Date:   Tue Jul 16 16:45:31 2013 +0200

    MAINTAINERS: Add Daniel as maintainer for CLOCKSOURCE and CLOCKEVENT Drivers
    
    I've been doing a bad job at managing the drivers/clocksource directory,
    so Daniel has been helping with review and patch queuing for the clocksource
    and clockevent drivers, so add him formally to the MAINTAINERS list.
    
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Joe Perches <joe@perches.com>
    Cc: Arnd Bergmann <arnd.bergmann@linaro.org>
    Cc: Olof Johansson <olof@lixom.net>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 19b0a1e5ac5a7f1dafd5ee2479a5db72b330246b
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Jul 17 19:39:19 2013 -0700

    clocksource: orion: Use linux/sched_clock.h
    
    The sched_clock.h include is under include/linux now.
    
    Cc: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 8c37bb3ac95b8ff953bd3c8bc8dd0a393d5ae989
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Jun 19 11:32:08 2013 -0400

    clocksource+irqchip: delete __cpuinit usage from all related files
    
    The __cpuinit type of throwaway sections might have made sense
    some time ago when RAM was more constrained, but now the savings
    do not offset the cost and complications.  For example, the fix in
    commit 5e427ec2d0 ("x86: Fix bit corruption at CPU resume time")
    is a good example of the nasty type of bugs that can be created
    with improper use of the various __init prefixes.
    
    After a discussion on LKML[1] it was decided that cpuinit should go
    the way of devinit and be phased out.  Once all the users are gone,
    we can then finally remove the macros themselves from linux/init.h.
    
    This removes all the drivers/clocksource and drivers/irqchip uses of
    the __cpuinit macros from all C files.
    
    [1] https://lkml.org/lkml/2013/5/20/589
    
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 0da273668657a70155f3d4ae121dc19277a05778
Merge: 560ae37178b1 b0ec636c93dd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 13 15:36:09 2013 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     - watchdog fixes for full dynticks
     - improved debug output for full dynticks
     - remove an obsolete full dynticks check
     - two ARM SoC clocksource drivers for sharing across SoCs
     - tick broadcast fix for CPU hotplug
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      tick: broadcast: Check broadcast mode on CPU hotplug
      clocksource: arm_global_timer: Add ARM global timer support
      clocksource: Add Marvell Orion SoC timer
      nohz: Remove obsolete check for full dynticks CPUs to be RCU nocbs
      watchdog: Boot-disable by default on full dynticks
      watchdog: Rename confusing state variable
      watchdog: Register / unregister watchdog kthreads on sysctl control
      nohz: Warn if the machine can not perform nohz_full

commit b0ec636c93ddd77235bf0f023a8a95d78cb6cafe
Merge: a272dcca1802 c1b40e447af8
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jul 12 17:10:30 2013 +0200

    Merge branch 'timers/clockevents' of git://git.linaro.org/people/dlezcano/clockevents into timers/urgent
    
    * New clocksource drivers for ARM SoCs to share

commit 21884a83b2192a00885d7244a1dda32debd2fbc7
Merge: 8b70a90cabaf 73b0cd674ccc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 6 14:09:38 2013 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer core updates from Thomas Gleixner:
     "The timer changes contain:
    
       - posix timer code consolidation and fixes for odd corner cases
    
       - sched_clock implementation moved from ARM to core code to avoid
         duplication by other architectures
    
       - alarm timer updates
    
       - clocksource and clockevents unregistration facilities
    
       - clocksource/events support for new hardware
    
       - precise nanoseconds RTC readout (Xen feature)
    
       - generic support for Xen suspend/resume oddities
    
       - the usual lot of fixes and cleanups all over the place
    
      The parts which touch other areas (ARM/XEN) have been coordinated with
      the relevant maintainers.  Though this results in an handful of
      trivial to solve merge conflicts, which we preferred over nasty cross
      tree merge dependencies.
    
      The patches which have been committed in the last few days are bug
      fixes plus the posix timer lot.  The latter was in akpms queue and
      next for quite some time; they just got forgotten and Frederic
      collected them last minute."
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (59 commits)
      hrtimer: Remove unused variable
      hrtimers: Move SMP function call to thread context
      clocksource: Reselect clocksource when watchdog validated high-res capability
      posix-cpu-timers: don't account cpu timer after stopped thread runtime accounting
      posix_timers: fix racy timer delta caching on task exit
      posix-timers: correctly get dying task time sample in posix_cpu_timer_schedule()
      selftests: add basic posix timers selftests
      posix_cpu_timers: consolidate expired timers check
      posix_cpu_timers: consolidate timer list cleanups
      posix_cpu_timer: consolidate expiry time type
      tick: Sanitize broadcast control logic
      tick: Prevent uncontrolled switch to oneshot mode
      tick: Make oneshot broadcast robust vs. CPU offlining
      x86: xen: Sync the CMOS RTC as well as the Xen wallclock
      x86: xen: Sync the wallclock when the system time is set
      timekeeping: Indicate that clock was set in the pvclock gtod notifier
      timekeeping: Pass flags instead of multiple bools to timekeeping_update()
      xen: Remove clock_was_set() call in the resume path
      hrtimers: Support resuming with two or more CPUs online (but stopped)
      timer: Fix jiffies wrap behavior of round_jiffies_common()
      ...

commit 332962f2c88868ed3cdab466870baaa34dd58612
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 4 22:46:45 2013 +0200

    clocksource: Reselect clocksource when watchdog validated high-res capability
    
    Up to commit 5d33b883a (clocksource: Always verify highres capability)
    we had no sanity check when selecting a clocksource, which prevented
    that a non highres capable clocksource is used when the system already
    switched to highres/nohz mode.
    
    The new sanity check works as Alex and Tim found out. It prevents the
    TSC from being used. This happens because on x86 the boot process
    looks like this:
    
     tsc_start_freqency_validation(TSC);
     clocksource_register(HPET);
     clocksource_done_booting();
            clocksource_select()
                    Selects HPET which is valid for high-res
    
     switch_to_highres();
    
     clocksource_register(TSC);
            TSC is not selected, because it is not yet
            flagged as VALID_HIGH_RES
    
     clocksource_watchdog()
            Validates TSC for highres, but that does not make TSC
            the current clocksource.
    
    Before the sanity check was added, we installed TSC unvalidated which
    worked most of the time. If the TSC was really detected as unstable,
    then the unstable logic removed it and installed HPET again.
    
    The sanity check is correct and needed. So the watchdog needs to kick
    a reselection of the clocksource, when it qualifies TSC as a valid
    high res clocksource.
    
    To solve this, we mark the clocksource which got the flag
    CLOCK_SOURCE_VALID_FOR_HRES set by the watchdog with an new flag
    CLOCK_SOURCE_RESELECT and trigger the watchdog thread. The watchdog
    thread evaluates the flag and invokes clocksource_select() when set.
    
    To avoid that the clocksource_done_booting() code, which is about to
    install the first real clocksource anyway, needs to go through
    clocksource_select and tick_oneshot_notify() pointlessly, split out
    the clocksource_watchdog_kthread() list walk code and invoke the
    select/notify only when called from clocksource_watchdog_kthread().
    
    So clocksource_done_booting() can utilize the same splitout code
    without the select/notify invocation and the clocksource_mutex
    unlock/relock dance.
    
    Reported-and-tested-by: Alex Shi <alex.shi@intel.com>
    Cc: Hans Peter Anvin <hpa@linux.intel.com>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: Andi Kleen <andi.kleen@intel.com>
    Tested-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Davidlohr Bueso <davidlohr.bueso@hp.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/alpine.DEB.2.02.1307042239150.11637@ionos.tec.linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit c1b40e447af8695666d4c11cfec4a7407e6a124d
Author: Stuart Menefy <stuart.menefy@st.com>
Date:   Wed Jun 26 12:48:38 2013 +0100

    clocksource: arm_global_timer: Add ARM global timer support
    
    This is a simple driver for the global timer module found in the Cortex
    A9-MP cores from revision r1p0 onwards. This should be able to perform
    the functions of the system timer and the local timer in an SMP system.
    
    The global timer has the following features:
        The global timer is a 64-bit incrementing counter with an
    auto-incrementing feature. It continues incrementing after sending
    interrupts. The global timer is memory mapped in the private memory
    region.
        The global timer is accessible to all Cortex-A9 processors in the
    cluster. Each Cortex-A9 processor has a private 64-bit comparator that
    is used to assert a private interrupt when the global timer has reached
    the comparator value. All the Cortex-A9 processors in a design use the
    banked ID, ID27, for this interrupt. ID27 is sent to the Interrupt
    Controller as a Private Peripheral Interrupt. The global timer is
    clocked by PERIPHCLK.
    
    Signed-off-by: Stuart Menefy <stuart.menefy@st.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@st.com>
    CC: Arnd Bergmann <arnd@arndb.de>
    CC: Rob Herring <robherring2@gmail.com>
    CC: Linus Walleij <linus.walleij@linaro.org>
    CC: Will Deacon <will.deacon@arm.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 22237d5a588cfad92525d2998ff14d3666399dce
Merge: fc76a258d41e 6b9a39de7349
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 2 13:24:47 2013 -0700

    Merge tag 'fixes-non-critical-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC non-cricitical bug fixes from Arnd Bergmann:
     "These are various bug fixes that were not considered important enough
      for merging into 3.10.
    
      The majority of the ARM fixes are for the OMAP and at91 platforms, and
      there is another set of bug fixes for device drivers that resolve
      'randconfig' build errors and that the subsystem maintainers either
      did not pick up or preferred to get merged through the arm-soc tree."
    
    * tag 'fixes-non-critical-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (43 commits)
      ARM: at91/PMC: use at91_usb_rate() for UTMI PLL
      ARM: at91/PMC: fix at91sam9n12 USB FS init
      ARM: at91/PMC: at91sam9n12 family has a PLLB
      ARM: at91/PMC: sama5d3 family doesn't have a PLLB
      ARM: tegra: fix section mismatch in tegra_pmc_parse_dt
      ARM: mxs: don't select HAVE_PWM
      ARM: mxs: stub out mxs_pm_init for !CONFIG_PM
      cpuidle: calxeda: select ARM_CPU_SUSPEND
      ARM: mvebu: fix length of ethernet registers in mv78260 dtsi
      ARM: at91: cpuidle: Fix target_residency
      ARM: at91: fix at91_extern_irq usage for non-dt boards
      ARM: sirf: use CONFIG_SIRF rather than CONFIG_PRIMA2 where necessary
      clocksource: kona: adapt to CLOCKSOURCE_OF_DECLARE change
      X.509: do not emit any informational output
      mtd: omap2: allow bulding as a module
      [SCSI] nsp32: use mdelay instead of large udelay constants
      hwrng: bcm2835: fix MODULE_LICENSE tag
      ARM: at91: Change the internal SRAM memory type MT_MEMORY_NONCACHED
      ARM: at91: Fix link breakage when !CONFIG_PHYLIB
      MAINTAINERS: Add exynos filename match to ARM/S5P EXYNOS ARM ARCHITECTURES
      ...

commit 0c1dcfd53b1066c411d3885cf8156abf59694360
Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
Date:   Tue Jun 11 08:38:50 2013 +0200

    clocksource: Add Marvell Orion SoC timer
    
    This patch add a DT enabled driver for timers found on Marvell Orion SoCs
    (Kirkwood, Dove, Orion5x, and Discovery Innovation). It installs a free-
    running clocksource on timer0 and a clockevent source on timer1.
    Corresponding device tree documentation is also added.
    
    Signed-off-by: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Tested-by: Ezequiel Garcia <ezequiel.garcia@free-electrons.com>
    Tested-by: Andrew Lunn <andrew@lunn.ch>

commit 65f918123bd108a9b50bceaf4b32ac173b9e3f3e
Author: Igor Mammedov <imammedo@redhat.com>
Date:   Mon Jun 10 18:31:11 2013 +0200

    x86: kvmclock: zero initialize pvclock shared memory area
    
    commit 07868fc6aaf57847b0f3a3d53086b7556eb83f4a upstream.
    
    kernel might hung in pvclock_clocksource_read() due to
    uninitialized memory might contain odd version value in
    following cycle:
    
            do {
                    version = __pvclock_read_cycles(src, &ret, &flags);
            } while ((src->version & 1) || version != src->version);
    
    if secondary kvmclock is accessed before it's registered with kvm.
    
    Clear garbage in pvclock shared memory area right after it's
    allocated to avoid this issue.
    
    Ref: https://bugzilla.kernel.org/show_bug.cgi?id=59521
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    [See BZ for analysis.  We may want a different fix for 3.11, but
     this is the safest for now - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ddb6d21c30d10ae4a740a788bb9101bd384fea5
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Feb 15 17:02:16 2013 -0800

    clocksource: time-armada-370-xp: Divorce from local timer API
    
    Separate the armada 370xp local timers from the local timer API.
    This will allow us to remove ARM local timer support in the near
    future and makes this driver multi-architecture friendly.
    
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Tested-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit faef31b482549640e2d0095afdf3dedb992cfa80
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Thu Feb 21 15:04:08 2013 -0800

    clocksource: time-armada-370-xp: Fix sparse warning
    
    drivers/clocksource/time-armada-370-xp.c:217:13: warning: symbol
    'armada_370_xp_timer_init' was not declared. Should it be static?
    
    Also remove the __init marking in the prototype as it's
    unnecessary and drop the init.h file.
    
    Acked-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit 4d70c59bb5be9e41a06b9f11ecfba75c14f9fea7
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Feb 15 17:31:31 2013 -0800

    ARM: msm: Divorce msm_timer from local timer API
    
    Separate the msm_timer from the local timer API. This will allow
    us to remove ARM local timer support in the near future and gets
    us closer to moving this driver to drivers/clocksource.
    
    Acked-by: David Brown <davidb@codeaurora.org>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    Cc: Bryan Huntsman <bryanh@codeaurora.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit 05a6548556d007143fcb291bfdfa6b2bb3e63e95
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Feb 15 17:02:16 2013 -0800

    ARM: PRIMA2: Divorce timer-marco from local timer API
    
    Separate the marco local timers from the local timer API. This
    will allow us to remove ARM local timer support in the near future
    and gets us closer to moving this driver to drivers/clocksource.
    
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Barry Song <baohua.song@csr.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit ee98d27df6827b5ba4bd99cb7d5cb1239b6a1a31
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Feb 15 16:40:51 2013 -0800

    ARM: EXYNOS4: Divorce mct from local timer API
    
    Separate the mct local timers from the local timer API. This will
    allow us to remove ARM local timer support in the near future and
    gets us closer to moving this driver to drivers/clocksource.
    
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Thomas Abraham <thomas.abraham@linaro.org>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit a894fcc2d01a89e6fe3da0845a4d80a5312e1124
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Feb 15 16:02:20 2013 -0800

    ARM: smp_twd: Divorce smp_twd from local timer API
    
    Separate the smp_twd timers from the local timer API. This will
    allow us to remove ARM local timer support in the near future and
    gets us closer to moving this driver to drivers/clocksource.
    
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit 3d53ceeca7bae807e5aba0935347f3757127a821
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Mon Mar 4 17:15:19 2013 -0800

    ARM: smp: Remove duplicate dummy timer implementation
    
    Drop ARM's version of the dummy timer now that we have a generic
    implementation in drivers/clocksource.
    
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit 2699339361a9bacb3fa663e6b8981a040cfca4ee
Author: Fabio Estevam <festevam@gmail.com>
Date:   Mon Jun 24 20:20:08 2013 -0300

    clocksource: vf_pit_timer: Use linux/sched_clock.h
    
    Commit 38ff87f7 (sched_clock: Make ARM's sched_clock generic for all
    architectures) changed the header to <linux/sched_clock.h>, so adapt
    it in order to fix the following build error:
    
    drivers/clocksource/vf_pit_timer.c:15:29: fatal error: asm/sched_clock.h: No such file or directory
    
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Cc: shawn.guo@linaro.org
    Cc: sboyd@codeaurora.org
    Cc: john.stultz@linaro.org
    Link: http://lkml.kernel.org/r/1372116008-2323-1-git-send-email-festevam@gmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 064706514ec3fea740c2656e03c4f01f6a551ac4
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Jun 3 13:33:53 2013 -0700

    clocksource: Add generic dummy timer driver
    
    Several architectures have a dummy timer driver tightly coupled with
    their broadcast code to support machines without cpu-local timers (or
    where there is a lack of driver support).
    
    Since 12ad100046: "clockevents: Add generic timer broadcast function"
    it's been possible to write broadcast-capable timer drivers decoupled
    from the broadcast mechanism. We can use this functionality to implement
    a generic dummy timer driver that can be shared by all architectures
    with generic tick broadcast (ARCH_HAS_TICK_BROADCAST).
    
    This patch implements a generic dummy timer using this facility.
    
    [sboyd: Make percpu data static, use __this_cpu_ptr(), move to
            early_initcall to properly register on each CPU, only
            register if more than one CPU possible]
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>,
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1370291642-13259-3-git-send-email-sboyd@codeaurora.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit e8f2ca97151892ab723dd8317313063cef79839d
Merge: 704b1005d1e2 eff4e7c7f32a
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Jun 21 15:00:24 2013 +0200

    Merge tag 'soc-exynos5420-1' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung into next/late
    
    From Kukjin Kim:
    
    based on tags/common-clk-audio
    - add support for exynos5420 SoC
    
    * tag 'soc-exynos5420-1' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung:
    
      ARM: EXYNOS: extend soft-reset support for EXYNOS5420
      ARM: EXYNOS: add secondary CPU boot base location for EXYNOS5420
      clocksource: exynos_mct: use (request/free)_irq calls for local timer registration
      ARM: dts: Add initial device tree support for EXYNOS5420
      clk: exynos5420: register clocks using common clock framework
      ARM: EXYNOS: use four additional chipid bits to identify EXYNOS family
      serial: samsung: select EXYNOS specific driver data if ARCH_EXYNOS is defined
      ARM: EXYNOS: Add support for EXYNOS5420 SoC
      ARM: dts: list the CPU nodes for EXYNOS5250
      ARM: dts: fork out common EXYNOS5 nodes
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit c20e459fcc7d5d86a359b19f54362fb6fb77c6aa
Merge: e43995ad5826 d63dc0514d56
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Jun 21 11:46:56 2013 +0200

    Merge tag 'v3.11-rockchip-basics' of git://git.kernel.org/pub/scm/linux/kernel/git/mmind/linux-rockchip into next/soc
    
    From Heiko Stuebner:
    
    Adds basic support for Rockchip Cortex-A9 SoCs.
    
    * tag 'v3.11-rockchip-basics' of git://git.kernel.org/pub/scm/linux/kernel/git/mmind/linux-rockchip:
      arm: add basic support for Rockchip RK3066a boards
      arm: add debug uarts for rockchip rk29xx and rk3xxx series
      arm: Add basic clocks for Rockchip rk3066a SoCs
      clocksource: dw_apb_timer_of: use clocksource_of_init
      clocksource: dw_apb_timer_of: select DW_APB_TIMER
      clocksource: dw_apb_timer_of: add clock-handling
      clocksource: dw_apb_timer_of: enable the use the clocksource as sched clock
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 9682bcdef1a9a0af940c30250ede697e7e70ef28
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 23 16:04:14 2013 +0200

    clocksource: kona: adapt to CLOCKSOURCE_OF_DECLARE change
    
    The CLOCKSOURCE_OF_DECLARE functions now take a device_node pointer
    as their argument, as of the clksrc/cleanup branch in arm-soc.
    This patch adapts the bcm_kona_timer driver to the new interface.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Christian Daudt <csd@broadcom.com>
    Cc: John Stultz <john.stultz@linaro.org>

commit 07868fc6aaf57847b0f3a3d53086b7556eb83f4a
Author: Igor Mammedov <imammedo@redhat.com>
Date:   Mon Jun 10 18:31:11 2013 +0200

    x86: kvmclock: zero initialize pvclock shared memory area
    
    kernel might hung in pvclock_clocksource_read() due to
    uninitialized memory might contain odd version value in
    following cycle:
    
            do {
                    version = __pvclock_read_cycles(src, &ret, &flags);
            } while ((src->version & 1) || version != src->version);
    
    if secondary kvmclock is accessed before it's registered with kvm.
    
    Clear garbage in pvclock shared memory area right after it's
    allocated to avoid this issue.
    
    Ref: https://bugzilla.kernel.org/show_bug.cgi?id=59521
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    [See BZ for analysis.  We may want a different fix for 3.11, but
     this is the safest for now - Paolo]
    Cc: <stable@vger.kernel.org> # 3.8
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit 7114cd749a12ff9fd64a2f6f04919760f45ab183
Author: Chander Kashyap <chander.kashyap@linaro.org>
Date:   Wed Jun 19 00:29:35 2013 +0900

    clocksource: exynos_mct: use (request/free)_irq calls for local timer registration
    
    Replace the (setup/remove)_irq calls for local timer registration with
    (request/free)_irq calls. This generalizes the local timer registration API.
    Suggested by Mark Rutland.
    
    Signed-off-by: Chander Kashyap <chander.kashyap@linaro.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 25c9ded6ed31184379c9b153ff37621fc323b084
Author: Paul Walmsley <pwalmsley@nvidia.com>
Date:   Fri Jun 7 06:18:58 2013 -0600

    clk: tegra: T114: add FCPU clock shaper programming, needed by the DFLL
    
    Add clock functions to initialize, enable, and disable the FCPU clock
    shapers, based on the FCPU voltage rail state.  These will be used by
    the DFLL clocksource driver code.
    
    This version of the patch contains a fix for a problem noticed by Andrew
    Chew <achew@nvidia.com>, where some of the FINETRIM_R bitfields were
    incorrectly defined.
    
    Based on code originally written by Aleksandr Frid <afrid@nvidia.com>.
    
    Signed-off-by: Paul Walmsley <pwalmsley@nvidia.com>
    Cc: Andrew Chew <achew@nvidia.com>
    Reviewed-by: Andrew Chew <achew@nvidia.com>
    Cc: Matthew Longnecker <mlongnecker@nvidia.com>
    Cc: Aleksandr Frid <afrid@nvidia.com>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

commit 0d86331b4cc9b0c52d41bbe78cb4b75f40b7381c
Merge: f54ffe0fef2b 807eba55f73e
Author: Olof Johansson <olof@lixom.net>
Date:   Fri Jun 14 16:50:48 2013 -0700

    Merge tag 'ux500-clksrc-for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-stericsson into next/drivers
    
    From Linus Walleij:
    Ux500 clocksource updates:
    - Use relaxed readl() variant
    - Fix a single comment
    
    * tag 'ux500-clksrc-for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-stericsson:
      clocksource: dbx500-prcmu: comment cleanup
      clocksource: dbx500-prcmu: use relaxed readl variant
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit bb256f803c9f620eb5a7d1c02e53360392cffbdd
Author: Afzal Mohammed <afzal@ti.com>
Date:   Mon May 27 20:06:53 2013 +0530

    ARM: OMAP2+: AM43x: basic dt support
    
    Describe minimal DT boot machine details for AM43x based SoC's. AM43x
    SoC's are ARM Cortex-A9 based with one core. AM43x is similar to
    AM335x w.r.t L4 PER/WKUP memory map. AM43x has a sync timer, here that
    is being used as clocksource, while 1ms dmtimer as clockevent.
    
    Signed-off-by: Ankur Kishore <a-kishore@ti.com>
    Signed-off-by: Afzal Mohammed <afzal@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 7d428ce284fce4aacb215ca15d0274e7261864a3
Merge: 6f39ef575df3 100214889973
Author: Olof Johansson <olof@lixom.net>
Date:   Wed Jun 12 12:32:01 2013 -0700

    Merge tag 'dw_apb_timer_of' of git://github.com/mmind/linux-rockchip into next/drivers
    
    From Heiko Stuebner, enhancements for dw_apb_timer:
    - use DECLARE_CLOCKSOURCE_OF and convert its users
    - handle the sptimer not being present as sched_clock
    - add optional handling of timer clocks
    
    * tag 'dw_apb_timer_of' of git://github.com/mmind/linux-rockchip:
      clocksource: dw_apb_timer_of: use clocksource_of_init
      clocksource: dw_apb_timer_of: select DW_APB_TIMER
      clocksource: dw_apb_timer_of: add clock-handling
      clocksource: dw_apb_timer_of: enable the use the clocksource as sched clock

commit 10021488997317d1121505a7ac659124c058efed
Author: Heiko Stuebner <heiko@sntech.de>
Date:   Tue Jun 4 11:38:42 2013 +0200

    clocksource: dw_apb_timer_of: use clocksource_of_init
    
    dw_apb_timer_init used to search the devicetree for matching timer
    devices, making calls to it from board files necessary.
    
    Change the dw_apb_timer_init to work with CLOCKSOURCE_OF_DECLARE.
    With this change the function gets called once for each timer node
    and tracks these number of calls to attach clockevent and clocksource
    devices to the nodes.
    
    Also remove the calls to dw_apb_timer_init from all previous users, as
    clocksource_of_init is the default for init_time now.
    
    Tested on the upcoming rk3066 code.
    
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Acked-by: Rob Herring <rob.herring@calxeda.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Jamie Iles <jamie@jamieiles.com>
    Acked-by: Dinh Nguyen <dinguyen@altera.com>

commit 1b4eca0f634be2a99f2baa6c29dfd183590ead3f
Author: Heiko Stuebner <heiko@sntech.de>
Date:   Tue Jun 4 11:38:11 2013 +0200

    clocksource: dw_apb_timer_of: select DW_APB_TIMER
    
    dw_apb_timer_of is the driver part facing devicetree platforms and
    calls into dw_apb_timer with the data gathered from the dt.
    
    Currently the two platforms using the dw_apb_timer_of select both
    the options for the core timer and the dt addon.
    
    As dw_apb_timer_of always depends on dw_apb_timer let it select
    DW_APB_TIMER itself without the need for every platform to do it.
    
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Acked-by: Jamie Iles <jamie@jamieiles.com>
    Acked-by: Dinh Nguyen <dinguyen@altera.com>

commit a8b447f2bbbba737ff4478f498d7f83c75a9461b
Author: Heiko Stuebner <heiko@sntech.de>
Date:   Tue Jun 4 11:37:36 2013 +0200

    clocksource: dw_apb_timer_of: add clock-handling
    
    Add the possibility to get the clock-frequency from a timer clock instead
    of specifying it as dt property. Additionally also add the possibility
    to also define a controlling periphal clock for the timer block.
    
    The clock-frequency property is kept to act as fallback if no clocks
    are specified.
    
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Acked-by: Jamie Iles <jamie@jamieiles.com>

commit a1198f83407ae3421f3f58355a0f296d5ea6249c
Author: Heiko Stuebner <heiko@sntech.de>
Date:   Tue Jun 4 11:37:02 2013 +0200

    clocksource: dw_apb_timer_of: enable the use the clocksource as sched clock
    
    Currently the dw_apb_timer always expects a separate special timer to be
    availbable for the sched_clock. Some devices using dw_apb_timers do not
    have this sptimer but can use the clocksource as sched_clock instead.
    
    Therefore enable the driver to distiguish between devices with and without
    sptimer based on the devicetree data and select the correct timer as
    sched_clock.
    
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Jamie Iles <jamie@jamieiles.com>

commit ea36b02269e49ad9dad926197de2ceab377c4c95
Merge: b67172ec0043 70423a379d54
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Jun 11 15:57:17 2013 -0700

    Merge branch 'clps711x/soc' into next/soc
    
    From Alexander Shiyan, this is a series of cleanups of clps711x, movig it
    closer to multiplatform and cleans up a bunch of old code.
    
    * clps711x/soc:
      ARM: clps711x: Update defconfig
      ARM: clps711x: Add support for SYSCON driver
      ARM: clps711x: edb7211: Control LCD backlight via PWM
      ARM: clps711x: edb7211: Add support for I2C
      ARM: clps711x: Optimize interrupt handling
      ARM: clps711x: Add clocksource framework
      ARM: clps711x: Replace "arch_initcall" in common code with ".init_early"
      ARM: clps711x: Move specific definitions from hardware.h to boards files
      ARM: clps711x: p720t: Define PLD registers as GPIOs
      ARM: clps711x: autcpu12: Move remaining specific definitions to board file
      ARM: clps711x: autcpu12: Special driver for handling memory is removed
      ARM: clps711x: autcpu12: Add support for NOR flash
      ARM: clps711x: autcpu12: Move LCD DPOT definitions to board file
      ARM: clps711x: Set PLL clock to zero if we work from 13 mHz source
      ARM: clps711x: Remove NEED_MACH_MEMORY_H dependency
      ARM: clps711x: Re-add GPIO support
      GPIO: clps711x: Add DT support
      GPIO: clps711x: Rewrite driver for using generic GPIO code
      + Linux 3.10-rc4
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit c99f72addbf5c0ad37d5a9b26f99208464d35f5c
Author: Alexander Shiyan <shc_work@mail.ru>
Date:   Mon May 13 21:07:32 2013 +0400

    ARM: clps711x: Add clocksource framework
    
    Signed-off-by: Alexander Shiyan <shc_work@mail.ru>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit fb521a0da1551468a45f2e2a1c1941d0033357ea
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Mar 20 13:57:38 2013 +0000

    arm: fix up ARM_ARCH_TIMER selects
    
    In 8a4da6e: "arm: arch_timer: move core to drivers/clocksource", the
    selection of ARM_ARCH_TIMER was indirected via HAVE_ARM_ARCH_TIMER,
    though mach-exynos's selection of ARM_ARCH_TIMER was missed, and since
    then mach-shmobile, mach-tegra, and mach-virt have begun selecting
    ARM_ARCH_TIMER. This can lead to architected timer support erroneously
    appearing to not be selected in menuconfig.
    
    This patch fixes up the Kconfigs for those platforms to select
    HAVE_ARM_ARCH_TIMER.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Acked-by: Simon Horman <horms+renesas@verge.net.au>
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>

commit 0d651e4e65e96989f72236bf83bd4c6e55eb6ce4
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 30 17:51:26 2013 +0000

    clocksource: arch_timer: use virtual counters
    
    Switching between reading the virtual or physical counters is
    problematic, as some core code wants a view of time before we're fully
    set up. Using a function pointer and switching the source after the
    first read can make time appear to go backwards, and having a check in
    the read function is an unfortunate block on what we want to be a fast
    path.
    
    Instead, this patch makes us always use the virtual counters. If we're a
    guest, or don't have hyp mode, we'll use the virtual timers, and as such
    don't care about CNTVOFF as long as it doesn't change in such a way as
    to make time appear to travel backwards. As the guest will use the
    virtual timers, a (potential) KVM host must use the physical timers
    (which can wake up the host even if they fire while a guest is
    executing), and hence a host must have CNTVOFF set to zero so as to have
    a consistent view of time between the physical timers and virtual
    counters.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Cc: Rob Herring <rob.herring@calxeda.com>

commit 77ba83bb1bb1cdabd522d32536f8eee65a870145
Author: Daniel Tang <dt.tangr@gmail.com>
Date:   Sat Jun 1 16:02:37 2013 +1000

    clocksource: Add TI-Nspire timer support
    
    This patch adds a clocksource/clockevent driver for the timer found on some
    models in the TI-Nspire calculator series. The timer has two 16bit subtimers
    within its memory mapped I/O interface but only the first can generate
    interrupts. The first subtimer is used to generate clockevents but only if an
    interrupt number and register is given.
    
    The interrupt acknowledgement mechanism is a little strange because the
    interrupt mask and acknowledge registers are located in another memory mapped
    I/O peripheral. The address of this register is passed to the driver through
    device tree bindings.
    
    The second subtimer is used as a clocksource because it isn't capable of
    generating an interrupt. This subtimer is always added.
    
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Daniel Tang <dt.tangr@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit c19672492d233e0012b60fbfa460ffac1381ee26
Author: Jingchang Lu <b35083@freescale.com>
Date:   Wed May 29 10:12:17 2013 +0200

    clocksource: Add Freescale Vybrid pit timer support
    
    Add Freescale Vybrid Family period interrupt timer support.
    
    Signed-off-by: Jingchang Lu <b35083@freescale.com>
    Reviewed-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 1a33bd2be705cbb3f57d7223b60baea441039307
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Wed May 29 10:11:17 2013 +0200

    clocksource: dw_apb: Fix error check
    
    irq_of_parse_and_map() returns 0 on error, while the code checks for NO_IRQ.
    This breaks on platforms that have NO_IRQ != 0.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>

commit 3c09f4daeee83b76779dec766f57e9e883402bb1
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri May 31 17:49:28 2013 +0200

    ARM: nomadik: fix clocksource warning
    
    The clocksource API has changed slightly, which causes a harmless
    warning:
    
    /git/arm-soc/drivers/clocksource/nomadik-mtu.c:259:28: warning: 'nmdk_timer_match' defined but not used [-Wunused-variable]
     static struct of_device_id nmdk_timer_match[] __initconst = {
                                ^
    
    Fortunately, the same API change also lets us simplify the code
    while removing the warning.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 0a0a7e66fa269de78975ea8d4e825a66d92b8d70
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Sun May 26 15:12:46 2013 +0300

    clocksource: dw_apb: Remove unused header
    
    The time.h header seems not to be used by current code.
    Removing this include allows the driver to build on other
    architecture that do not have this header.
    
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Jamie Iles <jamie@jamieiles.com>
    Cc: Dinh Nguyen <dinguyen@altera.com>
    Acked-by: Jamie Iles <jamie@jamieiles.com>
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    [tweaked commit message and header]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 1eaff67266b6b6c97bbd33cf2c20577822836413
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 28 09:48:46 2013 +0200

    clocksource: Implement clocksource_select_fallback() for CONFIG_ARCH_USES_GETTIMEOFFSET=y
    
    commit 7eaeb34305 (clocksource: Provide unbind interface in sysfs)
    implemented clocksource_select_fallback() which is not defined for
    CONFIG_ARCH_USES_GETTIMEOFFSET=y. Add an empty inline function for
    that.
    
    Reported-by: Ingo Molnar <mingo@kernel.org>
    Reported-by: fengguang.wu@intel.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit ff753f43dab762db2d177e0b0be029e4b111289d
Merge: e4aa937ec75d 49932f5ef13f
Author: Olof Johansson <olof@lixom.net>
Date:   Mon May 27 21:20:17 2013 -0700

    Merge tag 'nomadik-dt-for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-nomadik into next/dt
    
    From Linus Walleij:
    Device tree patches for the Nomadik machine:
    - Move clock registration to the device tree
    - Support probing the MTU timer from the device tree
    - Register user LED and user key in the device tree
    - Update defconfig to account for user LED and user key
    - Move pin control mappings to the device tree
    
    * tag 'nomadik-dt-for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-nomadik:
      ARM: nomadik: move the pin configuration to DT
      ARM: nomadik: add led and key for S8815
      ARM: nomadik: register clocksource from device tree
      ARM: nomadik: convert all clocks except timer to dt
      clocksource: nomadik-mtu: support of probe
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 807eba55f73e98b76d0afdc197d942c46122bdca
Author: Fabio Baltieri <fabio.baltieri@linaro.org>
Date:   Mon Jan 21 13:09:32 2013 +0100

    clocksource: dbx500-prcmu: comment cleanup
    
    Remove references to the deprecated DB5500 platform.
    
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Fabio Baltieri <fabio.baltieri@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 530282278bc8ceca122f75c2f1c7f77f28aecc89
Author: Rabin Vincent <rabin.vincent@stericsson.com>
Date:   Mon Jan 21 13:09:31 2013 +0100

    clocksource: dbx500-prcmu: use relaxed readl variant
    
    Modify clksrc_dbx500_prcmu_read to replace readl() with readl_relaxed().
    This speeds up calls to the function by about 40%.
    
    Signed-off-by: Rabin Vincent <rabin.vincent@stericsson.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Fabio Baltieri <fabio.baltieri@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 68a433f18c0574b50c5952978ca95b0db7347174
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Sat May 25 06:27:29 2013 +0900

    ARM: EXYNOS: Fix support of Exynos4210 rev0 SoC
    
    This patch extends exynos_init_time() function to handle Exynos4210
    rev0 SoC, which differs in availability of system timers and needs
    different clocksource initialization.
    
    This makes it possible to use exynos_init_time() function as init_time
    callback for all Exynos-based boards, including Universal_C210, which
    originally had to use samsung_timer_init().
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit a89c7edbe7d7aa80f507915f3dd801211b116b79
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 25 20:31:46 2013 +0000

    clocksource: Let clocksource_unregister() return success/error
    
    The unregister call can fail, if the clocksource is the current one
    and there is no replacement clocksource available. It can also fail,
    if the clocksource is the watchdog clocksource and I'm not going to
    provide support for this.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Link: http://lkml.kernel.org/r/20130425143436.029915527@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 7eaeb34305dee26634f7c98ae62646da5cebe91d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 25 20:31:46 2013 +0000

    clocksource: Provide unbind interface in sysfs
    
    With the module refcount held for the current clocksource there is no
    way to unload the module.
    
    Provide a sysfs interface which allows to unbind the clocksource. One
    could argue that the clocksource override could be (ab)used to do so,
    but the clocksource override cannot be used from the kernel itself,
    while an unbind function can be used to programmatically check whether
    a clocksource can be shutdown or not.
    
    The unbind functionality uses the new skip current feature of
    clocksource_select and verifies that a fallback clocksource has been
    installed. If the clocksource which should be unbound is the current
    clocksource and no fallback can be found, unbind returns -EBUSY.
    
    This does not support the unbinding of a clocksource which is used as
    the watchdog clocksource. No point in fostering crappy hardware.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Link: http://lkml.kernel.org/r/20130425143435.964218245@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 29b5407819f59731c9423238fae03b756822708c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 25 20:31:45 2013 +0000

    clocksource: Split out user string input
    
    Split out the user string input for clocksource override. Preparatory
    patch for unbind.
    
    [ jstultz: Fix an off by one error ]
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Link: http://lkml.kernel.org/r/20130425143435.895851338@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit f5a2e34375a5e2b711aea488ac3ae50eeba6d57c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 25 20:31:45 2013 +0000

    clocksource: Allow clocksource select to skip current clocksource
    
    Preparatory patch for clocksource unbind support.
    
    Split out code from clocksource_select and modify it, so it skips the
    current clocksource on request and tries to find a fallback
    clocksource. Convert all existing users. No functional change.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Link: http://lkml.kernel.org/r/20130425143435.834965397@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 09ac369c825d9d593404306d59062d854b321e9b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 25 20:31:44 2013 +0000

    clocksource: Add module refcount
    
    Add a module refcount, so the current clocksource cannot be removed
    unconditionally.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Link: http://lkml.kernel.org/r/20130425143435.762417789@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit ba919d1caa2e624eb8c6cae1f2ce0a253e697d45
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 25 20:31:44 2013 +0000

    clocksource: Let timekeeping_notify return success/error
    
    timekeeping_notify() can fail due cs->enable() failure. Though the
    caller does not notice and happily keeps the wrong clocksource as the
    current one.
    
    Let the caller know about failure, so the current clocksource will be
    shown correctly in sysfs.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Link: http://lkml.kernel.org/r/20130425143435.696321912@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 5d33b883aed81c6fbcd09c6f7c3619eee850a7e2
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 25 20:31:43 2013 +0000

    clocksource: Always verify highres capability
    
    If a clocksource has a (wrong) high rating, but can't be used as a
    timebase for oneshot tick mode, it is unconditionally selected even
    when the system is already in oneshot tick mode. This causes full
    system failure.
    
    Verify the clocksource selection against the oneshot mode.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Link: http://lkml.kernel.org/r/20130425143435.635040849@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit fc1f7d5606487ae28d6c84e95401952927d7379e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Apr 25 20:31:43 2013 +0000

    clocksource: apb_timer: Remove unsused function
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Cc: Magnus Damm <magnus.damm@gmail.com>
    Acked-by: Jamie Iles <jamie@jamieiles.com>
    Link: http://lkml.kernel.org/r/20130425143435.558006195@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 7690fbb293df83025cffb608f9c2e81414c468a8
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Apr 16 23:44:31 2013 +0200

    ARM: nomadik: register clocksource from device tree
    
    This switches the Nomadik platform to also registering its
    clocksource from the device tree, removing unused support
    code as we go along.
    
    Acked-by: Mike Turquette <mturquette@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 6e2b07a172b6ed98c7cdc301333b2d9f86c11880
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Apr 16 21:38:29 2013 +0200

    ARM: nomadik: convert all clocks except timer to dt
    
    This moves all Nomadik clocks except the one used for the
    timer/clocksource over to the device tree.
    
    Acked-by: Mike Turquette <mturquette@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit c7785ea0d279322bf92107d9a4fee195f5148c08
Author: Rabin Vincent <rabin.vincent@stericsson.com>
Date:   Wed Apr 3 13:28:26 2013 +0200

    clocksource: nomadik-mtu: support of probe
    
    Support device tree probe of the nomadik-mtu clocksource.
    
    Signed-off-by: Rabin Vincent <rabin.vincent@stericsson.com>

commit daf799cca8abbf7f3e253ecf1d41d244070773d7
Merge: 6019958d146a b22d1b6a91ca
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 10 07:48:05 2013 -0700

    Merge branch 'upstream' of git://git.linux-mips.org/pub/scm/ralf/upstream-linus
    
    Pull MIPS updates from Ralf Baechle:
    
     - More work on DT support for various platforms
    
     - Various fixes that were to late to make it straight into 3.9
    
     - Improved platform support, in particular the Netlogic XLR and
       BCM63xx, and the SEAD3 and Malta eval boards.
    
     - Support for several Ralink SOC families.
    
     - Complete support for the microMIPS ASE which basically reencodes the
       existing MIPS32/MIPS64 ISA to use non-constant size instructions.
    
     - Some fallout from LTO work which remove old cruft and will generally
       make the MIPS kernel easier to maintain and resistant to compiler
       optimization, even in absence of LTO.
    
     - KVM support.  While MIPS has announced hardware virtualization
       extensions this KVM extension uses trap and emulate mode for
       virtualization of MIPS32.  More KVM work to add support for VZ
       hardware virtualizaiton extensions and MIPS64 will probably already
       be merged for 3.11.
    
    Most of this has been sitting in -next for a long time.  All defconfigs
    have been build or run time tested except three for which fixes are being
    sent by other maintainers.
    
    Semantic conflict with kvm updates done as per Ralf
    
    * 'upstream' of git://git.linux-mips.org/pub/scm/ralf/upstream-linus: (118 commits)
      MIPS: Add new GIC clockevent driver.
      MIPS: Formatting clean-ups for clocksources.
      MIPS: Refactor GIC clocksource code.
      MIPS: Move 'gic_frequency' to common location.
      MIPS: Move 'gic_present' to common location.
      MIPS: MIPS16e: Add unaligned access support.
      MIPS: MIPS16e: Support handling of delay slots.
      MIPS: MIPS16e: Add instruction formats.
      MIPS: microMIPS: Optimise 'strnlen' core library function.
      MIPS: microMIPS: Optimise 'strlen' core library function.
      MIPS: microMIPS: Optimise 'strncpy' core library function.
      MIPS: microMIPS: Optimise 'memset' core library function.
      MIPS: microMIPS: Add configuration option for microMIPS kernel.
      MIPS: microMIPS: Disable LL/SC and fix linker bug.
      MIPS: microMIPS: Add vdso support.
      MIPS: microMIPS: Add unaligned access support.
      MIPS: microMIPS: Support handling of delay slots.
      MIPS: microMIPS: Add support for exception handling.
      MIPS: microMIPS: Floating point support.
      MIPS: microMIPS: Fix macro naming in micro-assembler.
      ...

commit 2675fa7c7b46842f82b2766b5abe80e16ce32977
Author: Steven J. Hill <Steven.Hill@imgtec.com>
Date:   Wed Apr 10 16:29:13 2013 -0500

    MIPS: Formatting clean-ups for clocksources.
    
    Various whitespace and #ifdef removals for GIC and R4K clocksources.
    
    Signed-off-by: Steven J. Hill <Steven.Hill@imgtec.com>

commit dfa762e1c31c30607e4e5259f287dd3e174cbcc3
Author: Steven J. Hill <Steven.Hill@imgtec.com>
Date:   Wed Apr 10 16:28:36 2013 -0500

    MIPS: Refactor GIC clocksource code.
    
    Reorganize some of the GIC clocksource driver code. Below is a list of
    the various changes.
    
      * No longer select CSRC_GIC by default for Malta platform.
      * Limit choice for either the GIC or R4K clocksource, not both.
      * Change location in Makefile.
      * Created new 'gic_read_count' function in common 'irq-gic.c' file.
      * Change 'git_hpt_read' function in 'csrc-gic.c' to use new function.
      * Surround GIC specific code in Malta platform code with #ifdef's.
      * Only initialize the GIC clocksource if it was selected. Original
        code called it unconditionally if a GIC was found.
    
    Signed-off-by: Steven J. Hill <Steven.Hill@imgtec.com>

commit bb9055b2744ada735a2fe555c4196ad39a83ef2a
Merge: 1bf25e78af31 241a9871263f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 7 11:28:42 2013 -0700

    Merge tag 'multiplatform-for-linus-2' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull late ARM Exynos multiplatform changes from Arnd Bergmann:
     "These continue the multiplatform support for exynos, adding support
      for building most of the essential drivers (clocksource, clk, irqchip)
      when combined with other platforms.  As a result, it should become
      really easy to add full multiplatform exynos support in 3.11, although
      we don't yet enable it for 3.10.
    
      The changes were not included in the earlier multiplatform series in
      order to avoid clashes with the other Exynos updates.
    
      This also includes work from Tomasz Figa to fix the pwm clocksource
      code on Exynos, which is not strictly required for multiplatform, but
      related to the other patches in this set and needed as a bug fix for
      at least one board."
    
    * tag 'multiplatform-for-linus-2' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (22 commits)
      ARM: dts: exynops4210: really add universal_c210 dts
      ARM: dts: exynos4210: Add basic dts file for universal_c210 board
      ARM: dts: exynos4: Add node for PWM device
      ARM: SAMSUNG: Do not register legacy timer interrupts on Exynos
      clocksource: samsung_pwm_timer: Work around rounding errors in clockevents core
      clocksource: samsung_pwm_timer: Correct programming of clock events
      clocksource: samsung_pwm_timer: Use proper clockevents max_delta
      clocksource: samsung_pwm_timer: Add support for non-DT platforms
      clocksource: samsung_pwm_timer: Drop unused samsung_pwm struct
      clocksource: samsung_pwm_timer: Keep all driver data in a structure
      clocksource: samsung_pwm_timer: Make PWM spinlock global
      clocksource: samsung_pwm_timer: Let platforms select the driver
      Documentation: Add device tree bindings for Samsung PWM timers
      clocksource: add samsung pwm timer driver
      irqchip: exynos: look up irq using irq_find_mapping
      irqchip: exynos: pass irq_base from platform
      irqchip: exynos: localize irq lookup for ATAGS
      irqchip: exynos: allocate combiner_data dynamically
      irqchip: exynos: pass max combiner number to combiner_init
      ARM: exynos: add missing properties for combiner IRQs
      ...

commit 1bf25e78af317e6d5d9b5594dfeb0036e0d589d6
Merge: 38f56f33ca38 0592c2189ece
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 7 11:22:14 2013 -0700

    Merge tag 'cleanup-for-linus-2' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC late cleanups from Arnd Bergmann:
     "These are cleanups and smaller changes that either depend on earlier
      feature branches or came in late during the development cycle.  We
      normally try to get all cleanups early, so these are the exceptions:
    
       - A follow-up on the clocksource reworks, hopefully the last time we
         need to merge clocksource subsystem changes through arm-soc.
    
         A first set of patches was part of the original 3.10 arm-soc
         cleanup series because of interdependencies with timer drivers now
         moved out of arch/arm.
    
       - Migrating the SPEAr13xx platform away from using auxdata for DMA
         channel descriptions towards using information in device tree,
         based on the earlier SPEAr multiplatform series
    
       - A few follow-ups on the Atmel SAMA5 support and other changes for
         Atmel at91 based on the larger at91 reworks.
    
       - Moving the armada irqchip implementation to drivers/irqchip
    
       - Several OMAP cleanups following up on the larger series already
         merged in 3.10."
    
    * tag 'cleanup-for-linus-2' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (50 commits)
      ARM: OMAP4: change the device names in usb_bind_phy
      ARM: OMAP2+: Fix mismerge for timer.c between ff931c82 and da4a686a
      ARM: SPEAr: conditionalize SMP code
      ARM: arch_timer: Silence debug preempt warnings
      ARM: OMAP: remove unused variable
      serial: amba-pl011: fix !CONFIG_DMA_ENGINE case
      ata: arasan: remove the need for platform_data
      ARM: at91/sama5d34ek.dts: remove not needed compatibility string
      ARM: at91: dts: add MCI DMA support
      ARM: at91: dts: add i2c dma support
      ARM: at91: dts: set #dma-cells to the correct value
      ARM: at91: suspend both memory controllers on at91sam9263
      irqchip: armada-370-xp: slightly cleanup irq controller driver
      irqchip: armada-370-xp: move IRQ handler to avoid forward declaration
      irqchip: move IRQ driver for Armada 370/XP
      ARM: mvebu: move L2 cache initialization in init_early()
      devtree: add binding documentation for sp804
      ARM: integrator-cp: convert use CLKSRC_OF for timer init
      ARM: versatile: use OF init for sp804 timer
      ARM: versatile: add versatile dtbs to dtbs target
      ...

commit 241a9871263f3114717c0ed416a1bd1d2415d1fb
Merge: 2254c36ddeb8 0682edaaa32c
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon May 6 23:49:09 2013 +0200

    Merge branch 'exynos/pwm-clocksource' into late/multiplatform
    
    This series from Tomasz Figa restores support for the pwm clocksource
    in Exynos, which was broken during the conversion of the platform
    to the common clk framework. The clocksource is only used in one
    board in the mainline kernel (universal_c210), and this makes it
    work for DT based probing as well as restoring the non-DT based
    case.
    
    * exynos/pwm-clocksource:
      ARM: dts: exynops4210: really add universal_c210 dts
      ARM: dts: exynos4210: Add basic dts file for universal_c210 board
      ARM: dts: exynos4: Add node for PWM device
      ARM: SAMSUNG: Do not register legacy timer interrupts on Exynos
      clocksource: samsung_pwm_timer: Work around rounding errors in clockevents core
      clocksource: samsung_pwm_timer: Correct programming of clock events
      clocksource: samsung_pwm_timer: Use proper clockevents max_delta
      clocksource: samsung_pwm_timer: Add support for non-DT platforms
      clocksource: samsung_pwm_timer: Drop unused samsung_pwm struct
      clocksource: samsung_pwm_timer: Keep all driver data in a structure
      clocksource: samsung_pwm_timer: Make PWM spinlock global
      clocksource: samsung_pwm_timer: Let platforms select the driver
      Documentation: Add device tree bindings for Samsung PWM timers
      clocksource: add samsung pwm timer driver
    
    Conflicts:
            arch/arm/boot/dts/Makefile
            arch/arm/mach-exynos/common.c
            drivers/clocksource/Kconfig
            drivers/clocksource/Makefile
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 6fa52ed33bea997374a88dbacbba5bf8c7ac4fef
Merge: 1db772216f48 bc8fd900c4d4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 4 12:31:18 2013 -0700

    Merge tag 'drivers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC driver changes from Olof Johansson:
     "This is a rather large set of patches for device drivers that for one
      reason or another the subsystem maintainer preferred to get merged
      through the arm-soc tree.  There are both new drivers as well as
      existing drivers that are getting converted from platform-specific
      code into standalone drivers using the appropriate subsystem specific
      interfaces.
    
      In particular, we can now have pinctrl, clk, clksource and irqchip
      drivers in one file per driver, without the need to call into platform
      specific interface, or to get called from platform specific code, as
      long as all information about the hardware is provided through a
      device tree.
    
      Most of the drivers we touch this time are for clocksource.  Since now
      most of them are part of drivers/clocksource, I expect that we won't
      have to touch these again from arm-soc and can let the clocksource
      maintainers take care of these in the future.
    
      Another larger part of this series is specific to the exynos platform,
      which is seeing some significant effort in upstreaming and
      modernization of its device drivers this time around, which
      unfortunately is also the cause for the churn and a lot of the merge
      conflicts.
    
      There is one new subsystem that gets merged as part of this series:
      the reset controller interface, which is a very simple interface for
      taking devices on the SoC out of reset or back into reset.  Patches to
      use this interface on i.MX follow later in this merge window, and we
      are going to have other platforms (at least tegra and sirf) get
      converted in 3.11.  This will let us get rid of platform specific
      callbacks in a number of platform independent device drivers."
    
    * tag 'drivers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (256 commits)
      irqchip: s3c24xx: add missing __init annotations
      ARM: dts: Disable the RTC by default on exynos5
      clk: exynos5250: Fix parent clock for sclk_mmc{0,1,2,3}
      ARM: exynos: restore mach/regs-clock.h for exynos5
      clocksource: exynos_mct: fix build error on non-DT
      pinctrl: vt8500: wmt: Fix checking return value of pinctrl_register()
      irqchip: vt8500: Convert arch-vt8500 to new irqchip infrastructure
      reset: NULL deref on allocation failure
      reset: Add reset controller API
      dt: describe base reset signal binding
      ARM: EXYNOS: Add arm-pmu DT binding for exynos421x
      ARM: EXYNOS: Add arm-pmu DT binding for exynos5250
      ARM: EXYNOS: Enable PMUs for exynos4
      irqchip: exynos-combiner: Correct combined IRQs for exynos4
      irqchip: exynos-combiner: Add set_irq_affinity function for combiner_irq
      ARM: EXYNOS: fix compilation error introduced due to common clock migration
      clk: exynos5250: Fix divider values for sclk_mmc{0,1,2,3}
      clk: exynos4: export clocks required for fimc-is
      clk: samsung: Fix compilation error
      clk: tegra: fix enum tegra114_clk to match binding
      ...

commit 99c6bcf46d2233d33e441834e958ed0bc22b190a
Merge: 97b1007a2924 2fdfe1c26fb9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 2 09:38:16 2013 -0700

    Merge tag 'multiplatform-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC multiplatform updates from Olof Johansson:
     "More multiplatform enablement for ARM platforms.  The ones converted
      in this branch are:
    
       - bcm2835
       - cns3xxx
       - sirf
       - nomadik
       - msx
       - spear
       - tegra
       - ux500
    
      We're getting close to having most of them converted!
    
      One of the larger platforms remaining is Samsung Exynos, and there are
      a bunch of supporting patches in this merge window for it.  There was
      a patch in this branch to a early version of multiplatform conversion,
      but it ended up being reverted due to need of more bake time.  The
      revert commit is part of the branch since it would have required
      rebasing multiple dependent branches and they were stable by then"
    
    * tag 'multiplatform-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (70 commits)
      mmc: sdhci-s3c: Fix operation on non-single image Samsung platforms
      clocksource: nomadik-mtu: fix up clocksource/timer
      Revert "ARM: exynos: enable multiplatform support"
      ARM: SPEAr13xx: Fix typo "ARCH_HAVE_CPUFREQ"
      ARM: exynos: enable multiplatform support
      rtc: s3c: make header file local
      mtd: onenand/samsung: make regs-onenand.h file local
      thermal/exynos: remove unnecessary header inclusions
      mmc: sdhci-s3c: remove platform dependencies
      ARM: samsung: move mfc device definition to s5p-dev-mfc.c
      ARM: exynos: move debug-macro.S to include/debug/
      ARM: exynos: prepare for sparse IRQ
      ARM: exynos: introduce EXYNOS_ATAGS symbol
      ARM: tegra: build assembly files with -march=armv7-a
      ARM: Push selects for TWD/SCU into machine entries
      ARM: ux500: build hotplug.o for ARMv7-a
      ARM: ux500: move to multiplatform
      ARM: ux500: make remaining headers local
      ARM: ux500: make irqs.h local to platform
      ARM: ux500: get rid of <mach/[hardware|db8500-regs].h>
      ...

commit a7726350e06401929eac0aa0677a5467106565fc
Merge: 4d26aa305414 afcf7924ecab
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 2 09:03:55 2013 -0700

    Merge tag 'cleanup-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC cleanup from Olof Johansson:
     "Here is a collection of cleanup patches.  Among the pieces that stand
      out are:
    
       - The deletion of h720x platforms
       - Split of at91 non-dt platforms to their own Kconfig file to keep
         them separate
       - General cleanups and refactoring of i.MX and MXS platforms
       - Some restructuring of clock tables for OMAP
       - Convertion of PMC driver for Tegra to dt-only
       - Some renames of sunxi -> sun4i (Allwinner A10)
       - ... plus a bunch of other stuff that I haven't mentioned"
    
    * tag 'cleanup-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (119 commits)
      ARM: i.MX: remove unused ARCH_* configs
      ARM i.MX53: remove platform ahci support
      ARM: sunxi: Rework the restart code
      irqchip: sunxi: Rename sunxi to sun4i
      irqchip: sunxi: Make use of the IRQCHIP_DECLARE macro
      clocksource: sunxi: Rename sunxi to sun4i
      clocksource: sunxi: make use of CLKSRC_OF
      clocksource: sunxi: Cleanup the timer code
      ARM: at91: remove trailing semicolon from macros
      ARM: at91/setup: fix trivial typos
      ARM: EXYNOS: remove "config EXYNOS_DEV_DRM"
      ARM: EXYNOS: change the name of USB ohci header
      ARM: SAMSUNG: Remove unnecessary code for dma
      ARM: S3C24XX: Remove unused GPIO drive strength register definitions
      ARM: OMAP4+: PM: Restore CPU power state to ON with clockdomain force wakeup method
      ARM: S3C24XX: Removed unneeded dependency on CPU_S3C2412
      ARM: S3C24XX: Removed unneeded dependency on CPU_S3C2410
      ARM: S3C24XX: Removed unneeded dependency on ARCH_S3C24XX for boards
      ARM: SAMSUNG: Fix typo "CONFIG_SAMSUNG_DEV_RTC"
      ARM: S5P64X0: Fix typo "CONFIG_S5P64X0_SETUP_SDHCI"
      ...

commit ab86e974f04b1cd827a9c7c35273834ebcd9ab38
Merge: 8700c95adb03 6f7a05d7018d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 30 08:15:40 2013 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull core timer updates from Ingo Molnar:
     "The main changes in this cycle's merge are:
    
       - Implement shadow timekeeper to shorten in kernel reader side
         blocking, by Thomas Gleixner.
    
       - Posix timers enhancements by Pavel Emelyanov:
    
       - allocate timer ID per process, so that exact timer ID allocations
         can be re-created be checkpoint/restore code.
    
       - debuggability and tooling (/proc/PID/timers, etc.) improvements.
    
       - suspend/resume enhancements by Feng Tang: on certain new Intel Atom
         processors (Penwell and Cloverview), there is a feature that the
         TSC won't stop in S3 state, so the TSC value won't be reset to 0
         after resume.  This can be taken advantage of by the generic via
         the CLOCK_SOURCE_SUSPEND_NONSTOP flag: instead of using the RTC to
         recover/approximate sleep time, the main (and precise) clocksource
         can be used.
    
       - Fix /proc/timer_list for 4096 CPUs by Nathan Zimmer: on so many
         CPUs the file goes beyond 4MB of size and thus the current
         simplistic seqfile approach fails.  Convert /proc/timer_list to a
         proper seq_file with its own iterator.
    
       - Cleanups and refactorings of the core timekeeping code by John
         Stultz.
    
       - International Atomic Clock time is managed by the NTP code
         internally currently but not exposed externally.  Separate the TAI
         code out and add CLOCK_TAI support and TAI support to the hrtimer
         and posix-timer code, by John Stultz.
    
       - Add deep idle support enhacement to the broadcast clockevents core
         timer code, by Daniel Lezcano: add an opt-in CLOCK_EVT_FEAT_DYNIRQ
         clockevents feature (which will be utilized by future clockevents
         driver updates), which allows the use of IRQ affinities to avoid
         spurious wakeups of idle CPUs - the right CPU with an expiring
         timer will be woken.
    
       - Add new ARM bcm281xx clocksource driver, by Christian Daudt
    
       - ... various other fixes and cleanups"
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (52 commits)
      clockevents: Set dummy handler on CPU_DEAD shutdown
      timekeeping: Update tk->cycle_last in resume
      posix-timers: Remove unused variable
      clockevents: Switch into oneshot mode even if broadcast registered late
      timer_list: Convert timer list to be a proper seq_file
      timer_list: Split timer_list_show_tickdevices
      posix-timers: Show sigevent info in proc file
      posix-timers: Introduce /proc/PID/timers file
      posix timers: Allocate timer id per process (v2)
      timekeeping: Make sure to notify hrtimers when TAI offset changes
      hrtimer: Fix ktime_add_ns() overflow on 32bit architectures
      hrtimer: Add expiry time overflow check in hrtimer_interrupt
      timekeeping: Shorten seq_count region
      timekeeping: Implement a shadow timekeeper
      timekeeping: Delay update of clock->cycle_last
      timekeeping: Store cycle_last value in timekeeper struct as well
      ntp: Remove ntp_lock, using the timekeeping locks to protect ntp state
      timekeeping: Simplify tai updating from do_adjtimex
      timekeeping: Hold timekeepering locks in do_adjtimex and hardpps
      timekeeping: Move ADJ_SETOFFSET to top level do_adjtimex()
      ...

commit 372b7c1bc80510225ca91cba75bc0850a6e16c39
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Mar 27 15:56:11 2013 +0000

    ARM: KVM: arch_timer: use symbolic constants
    
    In clocksource/arm_arch_timer.h we define useful symbolic constants.
    Let's use them to make the KVM arch_timer code clearer.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Christoffer Dall <cdall@cs.columbia.edu>
    Signed-off-by: Christoffer Dall <cdall@cs.columbia.edu>

commit 6604269dd262623ec79af3f349c8b93743f8014b
Merge: ea7113f70d6f 3d5a96582303
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Apr 28 15:15:05 2013 -0700

    Merge branch 'clksrc/cleanup' into next/multiplatform
    
    Merge in the clksrc/cleanup branch to avoid a silly merge conflict. For
    some reason two versions of the same patch were merged in two
    branches. Resolve this here to avoid merge conflicts down the road,
    since it can be confusing to tell which version is the one to keep.
    
    * clksrc/cleanup:
      clocksource: make CLOCKSOURCE_OF_DECLARE type safe
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    
    Conflicts:
            include/linux/clocksource.h

commit 278c800ec4bfcf26b76077e96f155c5b956bd1ad
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Tue Apr 23 17:46:31 2013 +0200

    ARM: SAMSUNG: Do not register legacy timer interrupts on Exynos
    
    This patch removes legacy PWM timer interrupt initialization from
    exynos{4,5}_init_irq() functions, since it conflicts with internal
    interrupt handling of the new PWM clocksource driver.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 81d4f7bfdc9417e7d8fc1133c762daa4458eec5e
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Tue Apr 23 17:46:30 2013 +0200

    clocksource: samsung_pwm_timer: Work around rounding errors in clockevents core
    
    Due to rounding errors in clockevents core (in conversions between ticks
    and nsecs), it might happen that the set_next_event callback gets called
    with cycles = 0, causing the code to incorrectly program the PWM timer.
    
    This patch modifies the callback to program the timer for 1 tick, if
    received tick count value is 0.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 6fe4dfd041dadbc1cc2460ed8680f2734dc3dc95
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Tue Apr 23 17:46:29 2013 +0200

    clocksource: samsung_pwm_timer: Correct programming of clock events
    
    In current code, the tick count value programmed to the hardware is
    always decremented by one. This is reasonable for periodic mode, since
    there is one extra tick between 0 and COUNT (after reloading), but it
    makes oneshot events happen 1 tick earlier than requested, because the
    interrupt is triggered on transition from 1 to 0.
    
    This patch removes the decrementation from PWM channel setup code and
    moves it instead to periodic timer setup, to make both periodic and
    oneshot modes work correctly.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit e9b852b8a7bc0217a03afff07fad34093e087542
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Tue Apr 23 17:46:28 2013 +0200

    clocksource: samsung_pwm_timer: Use proper clockevents max_delta
    
    This patch replaces hardcoded -1 argument passed to
    clockevents_config_and_register() with tcnt_max calculated based on
    variant data.
    
    This fixes invalid max delta configuration for 16-bit timers of s3c24xx.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit f9bb48a2c25a96757d13795ba7cc52687f94446f
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Tue Apr 23 17:46:27 2013 +0200

    clocksource: samsung_pwm_timer: Add support for non-DT platforms
    
    This patch extends the driver to support platforms that still use legacy
    ATAGS-based boot, without device tree, by providing an exported function
    that can be used from platform code to initialize the clocksource.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 09d718a78c79ddc270dccbfa1b1070b20b9a9ae1
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Tue Apr 23 17:46:26 2013 +0200

    clocksource: samsung_pwm_timer: Drop unused samsung_pwm struct
    
    This patch removes the unused samsung_pwm struct from public header.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 030c2a1e515077dbfabe4e43e32d4a7c549d5543
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Tue Apr 23 17:46:25 2013 +0200

    clocksource: samsung_pwm_timer: Keep all driver data in a structure
    
    This patch modifies the driver to keep all its private data consistently
    in a single struct, instead of keeping part as separate variables.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 7aac482e6290ab7ad21809e0c7327be959a2203e
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Tue Apr 23 17:46:24 2013 +0200

    clocksource: samsung_pwm_timer: Make PWM spinlock global
    
    This patch makes the PWM spinlock global and exports it to allow using
    it in Samsung PWM driver (will be reworked to use proper synchronization
    in further patches).
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 77d844344952934baf2902cf6f1ac870dc1b4d7a
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Tue Apr 23 17:46:23 2013 +0200

    clocksource: samsung_pwm_timer: Let platforms select the driver
    
    This patch modifies the way of enabling the driver to let the platforms
    select it in their Kconfig instead of specifying particular platforms in
    Kconfig entry of the driver.
    
    Signed-off-by: Tomasz Figa <t.figa@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit ea7113f70d6f91dee0d7afd8580c8cac06b6d222
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Sat Apr 20 16:09:17 2013 +0200

    clocksource: nomadik-mtu: fix up clocksource/timer
    
    The Nomadik clocksource driver has had a bad define making it
    impossible to use it for sched_clock() for a while. Fix this
    and also enable it for the Nomadik.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit f11899894c0a683c754ca71b45f7c9c3d35a3a1c
Author: Tomasz Figa <t.figa@samsung.com>
Date:   Sat Apr 20 23:22:13 2013 +0200

    clocksource: add samsung pwm timer driver
    
    This adds a new clocksource driver for the PWM timer that is
    present in most Samsung SoCs, based on the existing driver in
    arch/arm/plat-samsung/samsung-time.c and many changes implemented by
    Tomasz Figa.
    
    Originally, the conversion of all Samsung machines to the new driver was
    planned for 3.10, but that work ended up being too late and too invasive
    just before the merge window.
    
    Unfortunately, other changes in the Exynos platform resulted in some
    Exynos4 setups, particularly the Universal C210 board to be broken. In
    order to fix that with minimum risk, so we now leave the existing pwm
    clocksource driver in place for all older platforms and use the new
    driver only for device tree enabled boards. This way, we can get the
    broken machines running again using DT descriptions.
    
    All clocksource changes were implemented by Tomasz, while the DT
    registration was rewritten by Arnd.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Tomasz Figa <t.figa@samsung.com>
    Cc: Kyungmin Park <kyungmin.park@samsung.com>
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: Ben Dooks <ben-linux@fluff.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>

commit 2254c36ddeb87d4975d2e4709413dd275a913e83
Merge: 22cf644e0341 20adee8fa06e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Apr 19 23:15:58 2013 +0200

    Merge branch 'samsung/exynos-multiplatform-drivers' into late/multiplatform
    
    This series contains the final pieces for Exynos multiplatform support:
    Most of the patches are about the exynos-combiner irqchip, which is
    converted to not rely on platform provided constants.
    
    * samsung/exynos-multiplatform-drivers:
      ARM: exynos: restore mach/regs-clock.h for exynos5
      irqchip: exynos: look up irq using irq_find_mapping
      irqchip: exynos: pass irq_base from platform
      irqchip: exynos: localize irq lookup for ATAGS
      irqchip: exynos: allocate combiner_data dynamically
      irqchip: exynos: pass max combiner number to combiner_init
      ARM: exynos: add missing properties for combiner IRQs
      clocksource: exynos_mct: remove platform header dependency
      clk: exynos: prepare for multiplatform
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 034c097ca27fb163754ee4f4e26f85559bece69b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Apr 10 11:35:29 2013 +0200

    clocksource: exynos_mct: remove platform header dependency
    
    For the non-DT case, the mct_init() function requires access
    to a couple of platform specific constants, but cannot include
    the header files in case we are building for multiplatform.
    
    This changes the interface to the platform so we pass all
    the necessary data as arguments to mct_init.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>

commit f4636d0ad7eee4741ef5146080e9ce57b9e2de0b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Apr 19 22:00:04 2013 +0200

    clocksource: exynos_mct: fix build error on non-DT
    
    There is currently no alternative implementation for of_irq_count
    when the function is not defined, and the declaration is hidden,
    so this works around calling an undeclared function. It should
    really not be needed.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 17ada81e4ed9525cc2344aceb2ecf360142eef50
Merge: 981c44801455 105612489bf5
Author: Olof Johansson <olof@lixom.net>
Date:   Fri Apr 19 11:37:21 2013 -0700

    Merge branch 'omap/fixes-non-critical' into late/cleanup
    
    * omap/fixes-non-critical:
      ARM: OMAP2+: fix typo "CONFIG_BRIDGE_DVFS"
      ARM: OMAP1: remove "config MACH_OMAP_HTCWIZARD"
      ARM: OMAP: dpll: enable bypass clock only when attempting dpll bypass
      ARM: OMAP2+: powerdomain: avoid testing whether an unsigned char is less than 0
      ARM: OMAP2+: hwmod: Remove unused _HWMOD_WAKEUP_ENABLED flag
      ARM: OMAP2+: am335x: Change the wdt1 func clk src to per_32k clk
      ARM: OMAP2+: AM33xx: hwmod: Add missing sysc definition to wdt1 entry
      ARM: OMAP: fix typo "CONFIG_SMC91x_MODULE"
      ARM: OMAP5: clock: No Freqsel on OMAP5 devices too
      ARM: OMAP5: Make errata i688 workaround available
      ARM: OMAP5: Update SAR memory layout for WakeupGen
      ARM: OMAP5: Update SAR RAM base address
      ARM: OMAP5: Reuse prm read_inst/write_inst
      ARM: OMAP5: prm: Allow prm init to succeed
      ARM: OMAP5: timer: Update the clocksource name as per clock data
      ARM: OMAP5: Update SOC id detection code for ES2

commit c038c1c44179c80da6201f91ef354e48d5689617
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Wed Apr 17 10:26:06 2013 -0700

    clockevents: Switch into oneshot mode even if broadcast registered late
    
    tick_oneshot_notify() is used to notify a particular CPU to try
    to switch into oneshot mode after a oneshot capable tick device
    is registered and tick_clock_notify() is used to notify all CPUs
    to try to switch into oneshot mode after a high res clocksource
    is registered. There is one caveat; if the tick devices suffer
    from FEAT_C3_STOP we don't try to switch into oneshot mode unless
    we have a oneshot capable broadcast device already registered.
    
    If the broadcast device is registered after the tick devices that
    have FEAT_C3_STOP we'll never try to switch into oneshot mode
    again, causing us to be stuck in periodic mode forever. Avoid
    this scenario by calling tick_clock_notify() after we register
    the broadcast device so that we try to switch into oneshot mode
    on all CPUs one more time.
    
    [ tglx: Adopted to timers/core and added a comment ]
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Link: http://lkml.kernel.org/r/1366219566-29783-1-git-send-email-sboyd@codeaurora.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit c3e0c873d0653e6e7628b5a8a9fcb3745444ca9e
Merge: 228e3023eb04 69a517b2471b
Author: Olof Johansson <olof@lixom.net>
Date:   Wed Apr 17 10:10:01 2013 -0700

    Merge tag 'clksrc-cleanup-for-3.10-part2' of git://sources.calxeda.com/kernel/linux into late/clksrc
    
    This is the 2nd part of ARM timer clean-ups for 3.10. This series has
    the following changes:
    
    - Add sched_clock selection logic to select the highest frequency clock
    - Use full 64-bit arch timer counter for sched_clock
    - Convert arch timer, sp804 and integrator-cp timers to CLKSRC_OF and
    adapt all users to use clocksource_of_init
    
    * tag 'clksrc-cleanup-for-3.10-part2' of git://sources.calxeda.com/kernel/linux:
      devtree: add binding documentation for sp804
      ARM: integrator-cp: convert use CLKSRC_OF for timer init
      ARM: versatile: use OF init for sp804 timer
      ARM: versatile: add versatile dtbs to dtbs target
      ARM: vexpress: remove extra timer-sp control register clearing
      ARM: dts: vexpress: disable CA9 core tile sp804 timer
      ARM: vexpress: remove sp804 OF init
      ARM: highbank: use OF init for sp804 timer
      ARM: timer-sp: convert to use CLKSRC_OF init
      OF: add empty of_device_is_available for !OF
      ARM: convert arm/arm64 arch timer to use CLKSRC_OF init
      ARM: make machine_desc->init_time default to clocksource_of_init
      ARM: arch_timer: use full 64-bit counter for sched_clock
      ARM: make sched_clock just call a function pointer
      ARM: sched_clock: allow changing to higher frequency counter
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    
    This has a nasty set of conflicts with the exynos MCT code, which was
    moved in a separate branch, and then fixed up when merged in, but still
    conflicts a bit here. It should have been sorted out by this merge though.

commit dabfd8fb84abfddf526123388b68a50ec14cd380
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Wed Feb 6 21:18:31 2013 -0600

    ARM: vexpress: remove sp804 OF init
    
    Remove the vexpress specific setup for the sp804 timer now that
    clocksource_of_init will do it.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Acked-by: Pawel Moll <pawel.moll@arm.com>

commit 5993b3ee98c6b1a86fc0f0a4bed12a1dd9f0eae5
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Mon Jan 21 14:19:23 2013 -0600

    ARM: highbank: use OF init for sp804 timer
    
    Remove the highbank specific setup for the sp804 timer now that
    clocksource_of_init will do it.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

commit f414f13f2fd0d8bb12a87268a55827cda771d42b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 25 11:14:57 2013 -0500

    ARM: make machine_desc->init_time default to clocksource_of_init
    
    Originally from a default machine descriptor patch from Arnd, pull out
    just the default call to clocksource_of_init part. This is needed so that
    platforms can simply remove .init_time calls as they are converted to use
    clocksource_of_init.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Nicolas Pitre <nico@linaro.org>
    Acked-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

commit 56fecc7de9cfeb804d8ff51c481154bf3f6ccb6a
Merge: 535409d9b372 105612489bf5
Author: Olof Johansson <olof@lixom.net>
Date:   Thu Apr 11 04:02:34 2013 -0700

    Merge branch 'omap/fixes-non-critical' into next/dt2
    
    Merging in dependencies for the omap/dt branch.
    
    * omap/fixes-non-critical:
      ARM: OMAP2+: fix typo "CONFIG_BRIDGE_DVFS"
      ARM: OMAP1: remove "config MACH_OMAP_HTCWIZARD"
      ARM: OMAP: dpll: enable bypass clock only when attempting dpll bypass
      ARM: OMAP2+: powerdomain: avoid testing whether an unsigned char is less than 0
      ARM: OMAP2+: hwmod: Remove unused _HWMOD_WAKEUP_ENABLED flag
      ARM: OMAP2+: am335x: Change the wdt1 func clk src to per_32k clk
      ARM: OMAP2+: AM33xx: hwmod: Add missing sysc definition to wdt1 entry
      ARM: OMAP: fix typo "CONFIG_SMC91x_MODULE"
      ARM: OMAP5: clock: No Freqsel on OMAP5 devices too
      ARM: OMAP5: Make errata i688 workaround available
      ARM: OMAP5: Update SAR memory layout for WakeupGen
      ARM: OMAP5: Update SAR RAM base address
      ARM: OMAP5: Reuse prm read_inst/write_inst
      ARM: OMAP5: prm: Allow prm init to succeed
      ARM: OMAP5: timer: Update the clocksource name as per clock data
      ARM: OMAP5: Update SOC id detection code for ES2
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit b9d5868e342a9802db7b299be511ac547ff1034d
Merge: 83c15f4c0575 bc34b5f27cd3
Author: Olof Johansson <olof@lixom.net>
Date:   Thu Apr 11 03:39:00 2013 -0700

    Merge tag 'sunxi-cleanup-for-3.10' of git://github.com/mripard/linux into next/cleanup
    
    From Maxime Ripard:
    Cleanups for Allwinner sunXi architecture:
      - Remove sunxi.dtsi
      - Switch to clocksource/irqchip device tree handlers
      - Cleanup the watchdog code
    
    * tag 'sunxi-cleanup-for-3.10' of git://github.com/mripard/linux:
      ARM: sunxi: Rework the restart code
      irqchip: sunxi: Rename sunxi to sun4i
      irqchip: sunxi: Make use of the IRQCHIP_DECLARE macro
      clocksource: sunxi: Rename sunxi to sun4i
      clocksource: sunxi: make use of CLKSRC_OF
      clocksource: sunxi: Cleanup the timer code
      clocksource: make CLOCKSOURCE_OF_DECLARE type safe
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    
    Add/change conflict in drivers/clocksource/Makefile resolved.

commit 228e3023eb0430b4b9ed0736f8f87c96a6cd9c7a
Merge: 894b7382cf20 354599f460ba
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 9 22:07:37 2013 +0200

    Merge tag 'mct-exynos-for-v3.10' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung into next/drivers
    
    From Kukjin Kim <kgene.kim@samsung.com>:
    
    add support exynos mct device tree and move into drivers/clocksource
    
    * tag 'mct-exynos-for-v3.10' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung:
      clocksource: mct: Add terminating entry for exynos_mct_ids table
      clocksource: mct: Add missing semicolons in exynos_mct.c
      ARM: EXYNOS: move mct driver to drivers/clocksource
      ARM: EXYNOS: remove static io-remapping of mct registers for Exynos5
      ARM: dts: add mct device tree node for all supported Exynos SoC's
      ARM: EXYNOS: allow dt based discovery of mct controller using clocksource_of_init
      ARM: EXYNOS: add device tree support for MCT controller driver
      ARM: EXYNOS: prepare an array of MCT interrupt numbers and use it
      ARM: EXYNOS: add a register base address variable in mct controller driver
    
    Conflicts:
            drivers/clocksource/Makefile
            drivers/clocksource/exynos_mct.c
    
    [arnd: adapt to CLOCKSOURCE_OF_DECLARE interface change]
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit f8da810cbb823c9781d703319ac4303568008fae
Merge: 03e86b3a27d4 964ea47572b8
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 9 17:52:43 2013 +0200

    Merge branch 'tegra/clk' into next/dt2
    
    This is a dependency for the tegra/dt branch.
    
    Conflicts:
            drivers/clocksource/tegra20_timer.c
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 1194b152cd4eff475652785ce366b20afe82dfcf
Merge: 86feb64f5bfe 38be85de698e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 9 17:07:36 2013 +0200

    Merge branch 'tegra/soc' into next/drivers
    
    This is a dependency for the tegra/clk branch.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    
    Conflicts:
            drivers/clocksource/tegra20_timer.c

commit 3afeb0a046af159f0ff97a20cf6ebc44d0d2bd64
Merge: d93bea007ab3 38be85de698e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 9 16:54:27 2013 +0200

    Merge branch 'tegra/soc' into next/multiplatform
    
    This is a dependency for the tegra multiplatform series.
    
    Conflicts:
            drivers/clocksource/tegra20_timer.c
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 71f6424023cb9fa381efc7237ca05926b2b1ca9a
Merge: 9bc128e16bb8 e933a1a12a02
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 9 15:57:27 2013 +0200

    Merge branch 'mxs/cleanup' into next/multiplatform
    
    This is a dependency for mxs/multiplatform
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    
    Conflicts:
            drivers/clocksource/Makefile

commit 92202876a3cc6b7fb0bbb52a5059e02c2c2e2186
Merge: 44c0d2377539 e933a1a12a02
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 9 15:29:52 2013 +0200

    Merge tag 'mxs-cleanup-3.10' of git://git.linaro.org/people/shawnguo/linux-2.6 into next/cleanup
    
    From Shawn Guo <shawn.guo@linaro.org>:
    
    The mxs cleanup for 3.10:
    
    * Clean up timer code and move it into drivers/clocksource
    * Clean up icoll code and move it into drivers/irqchip
    * Clean up clock code to not include <mach/*> headers
    * Clean up rtc-stmp3xxx, mxs-lradc and mxs-saif to not include <mach/*>
      headers
    * Clean up mach-mxs code to get it prepared for multiplatform support
    
    * tag 'mxs-cleanup-3.10' of git://git.linaro.org/people/shawnguo/linux-2.6: (26 commits)
      clocksource: mxs_timer: Add semicolon at end of line
      ARM: mxs: remove unused headers
      ARM: mxs: merge imx23 and imx28 into one machine_desc
      ARM: mxs: remove common.h
      ARM: mxs: move mxs_get_ocotp() into mach-mxs.c
      ARM: mxs: remove mm.c
      ARM: mxs: use debug_ll_io_init for low-level debug
      ARM: mxs: get ocotp base address from device tree
      ARM: mxs: remove system.c
      ARM: mxs: get reset address from device tree
      ARM: mxs: remove empty hardware.h
      ASoC: mxs-saif: remove mach header inclusion
      iio: mxs-lradc: remove unneeded mach header inclusion
      rtc: stmp3xxx: use stmp_reset_block() instead
      clk: mxs: remove the use of mach level IO accessor
      clk: mxs: get base address from device tree
      ARM: mxs: remove unneeded mach-types.h inclusion
      ARM: mxs: move icoll driver into drivers/irqchip
      ARM: mxs: call stmp_reset_block() in icoll
      ARM: mxs: get icoll base address from device tree
      ...
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 8024206dbf4e0701f0cdf259a122ea23db3a7a16
Merge: 5be8f6368800 6affb4826405
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Apr 9 15:27:52 2013 +0200

    Merge tag 'tegra-for-3.10-cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/swarren/linux-tegra into next/cleanup
    
    From Stephen Warren <swarren@wwwdotorg.org>:
    
    ARM: tegra: cleanup
    
    This branch includes various cleanup of the core Tegra support.
    
    * Unification of the separate board-dt-tegra*.c files into a single
      tegra.c, now that everything is DT-driven and basically identical.
    * Use of_clk_get() in the Tegra clocksource driver so that clocks are
      described in DT rather than hard-coding clock names.
    * Some cleanup of the PMC-related code, with the aim that the PMC
      "driver" contains more of the code that touches PMC registers, rather
      than spreading PMC register accesses through other files.
    * Conversion of the "PMC" driver to acquire resources describe in device
      tree rather than hard-coding them.
    * Use of common code for the CPU sleep TLB invalidation.
    
    This branch is based on the previous fixes pull request.
    
    * tag 'tegra-for-3.10-cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/swarren/linux-tegra:
      ARM: tegra: use setup_mm_for_reboot rather than explicit pgd switch
      ARM: tegra: replace the CPU power on function with PMC call
      ARM: tegra: pmc: add power on function for secondary CPUs
      ARM: tegra: pmc: convert PMC driver to support DT only
      ARM: tegra: fix the PMC compatible string in DT
      ARM: tegra: pmc: add specific compatible DT string for Tegra30 and Tegra114
      ARM: tegra: refactor tegra{20,30}_boot_secondary
      clocksource: tegra: move to of_clk_get
      ARM: tegra: Unify Device tree board files
      ARM: tegra: Rename board-dt-tegra20.c to tegra.c
      ARM: tegra: Unify tegra{20,30,114}_init_early()
    
    Conflicts:
            drivers/clocksource/tegra20_timer.c
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit adb9e561a73c5665a83b6d40bd21a6b483ead889
Author: Sourav Poddar <sourav.poddar@ti.com>
Date:   Wed Feb 13 14:58:30 2013 +0530

    ARM: dts: omap4-panda: Add I2c pinctrl data
    
    Booting 3.8-rc6 on omap4 panda results in the following error
    
    [    0.444427] omap_i2c 48070000.i2c: did not get pins for i2c error: -19
    [    0.445770] omap_i2c 48070000.i2c: bus 0 rev0.11 at 400 kHz
    [    0.473937] omap_i2c 48072000.i2c: did not get pins for i2c error: -19
    [    0.474670] omap_i2c 48072000.i2c: bus 1 rev0.11 at 400 kHz
    [    0.474822] omap_i2c 48060000.i2c: did not get pins for i2c error: -19
    [    0.476379] omap_i2c 48060000.i2c: bus 2 rev0.11 at 100 kHz
    [    0.477294] omap_i2c 48350000.i2c: did not get pins for i2c error: -19
    [    0.477996] omap_i2c 48350000.i2c: bus 3 rev0.11 at 400 kHz
    [    0.483398] Switching to clocksource 32k_counter
    
    This happens because omap4 panda dts file is not adapted to use i2c through
    pinctrl framework. Populating i2c pinctrl data to get rid of the error.
    
    Tested on omap4460 panda with 3.8-rc6 kernel.
    
    Signed-off-by: Sourav Poddar <sourav.poddar@ti.com>
    Reported-by: Luciano Coelho <coelho@ti.com>
    Signed-off-by: Benoit Cousson <benoit.cousson@linaro.org>

commit 119fd635e383c1a58990e5805acc29f48ed3e360
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Sun Mar 24 11:49:25 2013 +0100

    clocksource: sunxi: Rename sunxi to sun4i
    
    During the introduction of the Allwinner SoC platforms, sunxi was
    initially meant as a generic name for all the variants of the Allwinner
    SoC.
    
    It was ok at the time of the support of only the A10 and A13 that
    looks pretty much the same, but it's beginning to be troublesome with
    the future addition of the Allwinner A31 (sun6i) that is quite
    different, and would introduce some weird logic, where sunxi would
    actually mean in some case sun4i and sun5i but without sun6i...
    
    Moreover, it makes the compatible strings naming scheme not consistent
    with other architectures, where usually for this kind of compability, we
    just use the oldest SoC name that has this IP, so let's do just this.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>

commit ea71d9a600e769ca669f4ba3e25ffdecdeede240
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Sun Mar 24 00:01:48 2013 +0100

    clocksource: sunxi: make use of CLKSRC_OF
    
    Using CLKSRC_OF allows to remove the SoC specific sunxi_timer.h header,
    and instead of using a custom init function in the machine definition
    use the standard clocksource_of_init function.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>

commit 049817319a5cf2812ada74018ae9f5c5b739607b
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Sun Mar 10 17:03:46 2013 +0100

    clocksource: sunxi: Cleanup the timer code
    
    The timer code was not exact to some aspects, since most of this code
    was written wihout any datasheet. Make the needed corrections to match
    the datasheet.
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>

commit dc2d3db8137fba0f62d7517e1bea8a47f69fcbc4
Merge: 8355ae69afca 7f585bbfc54f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Apr 8 19:30:48 2013 +0200

    Merge tag 'omap-for-v3.10/timer-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into next/drivers
    
    From Tony Lindgren <tony@atomide.com>:
    
    Clean-up for omap2+ timers from Jon Hunter <jon-hunter@ti.com>:
    
    This series consists mainly of clean-ups for clockevents and
    clocksource timers on OMAP2+ devices. The most significant change
    in functionality comes from the 5th patch which is changing the
    selection of the clocksource timer for OMAP3 and AM335x devices
    when gptimers are used for clocksource.
    
    Note that this series depends on 7185684 (ARM: OMAP: use
    consistent error checking) in RMK's tree and 960cba6 (ARM:
    OMAP5: timer: Update the clocksource name as per clock data)
    in omap-for-v3.10/fixes-non-critical. So this branch is based
    on a merge of 7185684 and omap-for-v3.10/fixes-non-critical
    to avoid non-trivial merge conflicts.
    
    * tag 'omap-for-v3.10/timer-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: OMAP4+: Fix sparse warning in system timers
      ARM: OMAP2+: Store ID of system timers in timer structure
      ARM: OMAP3: Update clocksource timer selection
      ARM: OMAP2+: Simplify system timers definitions
      ARM: OMAP2+: Simplify system timer clock definitions
      ARM: OMAP2+: Remove hard-coded test on timer ID
      ARM: OMAP2+: Display correct system timer name
      ARM: OMAP2+: fix typo "CONFIG_BRIDGE_DVFS"
      ARM: OMAP1: remove "config MACH_OMAP_HTCWIZARD"
      ARM: OMAP: dpll: enable bypass clock only when attempting dpll bypass
      ARM: OMAP2+: powerdomain: avoid testing whether an unsigned char is less than 0
      ARM: OMAP2+: hwmod: Remove unused _HWMOD_WAKEUP_ENABLED flag
      ARM: OMAP2+: am335x: Change the wdt1 func clk src to per_32k clk
      ARM: OMAP2+: AM33xx: hwmod: Add missing sysc definition to wdt1 entry
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 6b5606e0834bb173a8ce3505edec078f135e9f6c
Merge: e9069cf8b74b 4f0f234fce1d
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Apr 8 18:34:19 2013 +0200

    Merge branch 'zynq/clksrc/cleanup' of git://git.xilinx.com/linux-xlnx into next/drivers
    
    From Michal Simek <michal.simek@xilinx.com>:
    
    * 'zynq/clksrc/cleanup' of git://git.xilinx.com/linux-xlnx:
      arm: zynq: Move timer to generic location
      arm: zynq: Do not use xilinx specific function names
      arm: zynq: Move timer to clocksource interface
      arm: zynq: Use standard timer binding
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 14a3b6abe98c8f53a13522610c257accef7321df
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Feb 21 22:51:38 2013 +0000

    timekeeping: Store cycle_last value in timekeeper struct as well
    
    For implementing a shadow timekeeper and a split calculation/update
    region we need to store the cycle_last value in the timekeeper and
    update the value in the clocksource struct only in the update region.
    
    Add the extra storage to the timekeeper.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit c5263bb8b7944f1e34b36b5ea8a9119fc48a31ae
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Wed Mar 20 10:24:59 2013 +0100

    arm: zynq: Move timer to clocksource interface
    
    Use clocksource timer initialization.
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>

commit e932900a3279b5dbb6d8f43c7b369003620e137c
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Wed Mar 20 10:15:28 2013 +0100

    arm: zynq: Use standard timer binding
    
    Use cdns,ttc because this driver is Cadence Rev06
    Triple Timer Counter and everybody can use it
    without xilinx specific function name or probing.
    
    Also use standard dt description for timer
    and also prepare for moving to clocksource
    initialization.
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>

commit 354599f460ba79c9fb00f220e42de5a7509ceeb4
Author: Axel Lin <[axel.lin@ingics.com]>
Date:   Thu Apr 4 15:34:45 2013 +0900

    clocksource: mct: Add terminating entry for exynos_mct_ids table
    
    The of_device_id table is supposed to be zero-terminated.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit d8acac566c9b8ba96c278bf17b8acd549c99e621
Author: Doug Anderson <[dianders@chromium.org]>
Date:   Thu Apr 4 15:24:32 2013 +0900

    clocksource: mct: Add missing semicolons in exynos_mct.c
    
    The CLOCKSOURCE_OF_DECLARE lines were added without a semicolon at the
    end.  On my system this causes a compile-time error that looks like:
    
    drivers/clocksource/exynos_mct.c:557:202: warning: comparison of distinct pointer types lacks a cast [enabled by default]
    drivers/clocksource/exynos_mct.c:558:1: error: expected ',' or ';' before 'static'
    
    The error didn't show up till now because there was an extra semicolon
    at end of the CLOCKSOURCE_OF_DECLARE definition that was removed by
    Arnd Bergmann in "clocksource: make CLOCKSOURCE_OF_DECLARE type safe"
    
    Signed-off-by: Doug Anderson <dianders@chromium.org>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit e933a1a12a02f42e0013cda87bba37ccb59efc47
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Tue Apr 2 13:30:32 2013 -0300

    clocksource: mxs_timer: Add semicolon at end of line
    
    Fix the following build error:
    
    drivers/clocksource/mxs_timer.c:304:1: error: expected ',' or ';' at end of input
    
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

commit 2eb03937df3ebc822dab413bd69533dcd66afd48
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Mon Jan 28 17:53:57 2013 -0600

    ARM: OMAP3: Update clocksource timer selection
    
    When booting with device-tree for OMAP3 and AM335x devices and a gptimer
    is used as the clocksource (which is always the case for AM335x), a
    gptimer located in a power domain that is not always-on is selected.
    Ideally we should use a gptimer for clocksource that is located in a
    power domain that is always on (such as the wake-up domain) so that time
    can be maintained during a kernel suspend without keeping on additional
    power domains unnecessarily.
    
    In order to fix this so that we can select a gptimer located in a power
    domain that is always-on, the following changes were made ...
    1. Currently, only when selecting a gptimer to use for a clockevent
       timer, do we pass a timer property that can be used to select a
       specific gptimer. Change this so that we can pass a property when
       selecting a gptimer to use for a clocksource timer too.
    2. Currently, when selecting either a gptimer to use for a clockevent
       timer or a clocksource timer and no timer property is passed, then
       the first available timer is selected regardless of the properties
       it has. Change this so that if no properties are passed, then a timer
       that does not have additional features (such as always-on, dsp-irq,
       pwm, and secure) is selected.
    
    For OMAP3 and AM335x devices that use a gptimer for clocksource, change
    the selection of the gptimer so that by default the gptimer located in
    the always-on power domain is used for clocksource instead of
    clockevents.
    
    Please note that using a gptimer for both clocksource and clockevents
    can have a system power impact during idle. The reason being is that
    OMAP and AMxxx devices typically only have one gptimer in a power domain
    that is always-on. Therefore when the kernel is idle both the clocksource
    and clockevent timers will be active and this will keep additional power
    domains on. During kernel suspend, only the clocksource timer is active
    and therefore, it is better to use a gptimer in a power domain that is
    always-on for clocksource.
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Acked-by: Igor Grinberg <grinberg@compulab.co.il>

commit e95ea43a90c32ccb47a601c70203ff60c0c1f345
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Tue Jan 29 13:55:25 2013 -0600

    ARM: OMAP2+: Display correct system timer name
    
    Currently on boot, when displaying the name of the gptimer used for
    clockevents and clocksource timers, the timer ID is shown. However,
    when booting with device-tree, the timer ID is not used to select a
    gptimer but a timer property. Hence, it is possible that the timer
    selected when booting with device-tree does not match the ID shown.
    Therefore, instead display the HWMOD name of the gptimer and use
    the HWMOD name as the name of clockevent and clocksource timer (if a
    gptimer is used).
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

commit c74512bf83f3568baf566265c5bd3b8a96ede353
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Mar 25 20:16:52 2013 +0800

    ARM: mxs: move timer driver into drivers/clocksource
    
    Move mxs timer driver into drivers/clocksource as mxs_timer.c.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

commit 633ef4c7d18982d184242d42056c622a433d93fe
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Mar 25 14:53:08 2013 +0800

    ARM: mxs: use CLKSRC_OF helper to initialize timer
    
    Select CLKSRC_OF and use clocksource_of_init() to initialize timer, so
    that the call to mxs_timer_init() in clock driver can be removed.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>

commit 063ab6daeb2ba5ef8f47c3fc04a749936c62d5bb
Merge: cde35bd02702 dbaf6a8d5de7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Mar 28 12:25:51 2013 +0100

    Merge branch 'prima2/multiplatform' into next/multiplatform
    
    This series enables multiplatform support on the SIRF prima2/marco/atlas6
    platform. The code was already quite tidy, so this is a relatively simple
    change, and it follows similar changes we made to other ARMv7 based
    platforms recently.
    
    * prima2/multiplatform:
      ARM: sirf: enable support in multi_v7_defconfig
      ARM: sirf: enable multiplatform support
      ARM: sirf: use clocksource_of infrastructure
      ARM: sirf: move debug-macro.S to include/debug/sirf.S
      ARM: sirf: enable sparse IRQ
      ARM: sirf: move irq driver to drivers/irqchip
      ARM: sirf: fix prima2 interrupt lookup
      pinctrl: sirf: convert to linear irq domain
      clocksource: make CLOCKSOURCE_OF_DECLARE type safe
      ARM/dts: prima2: add .dtsi for atlas6 and .dts for atla6-evb board
      arm: prima2: add new SiRFatlas6 machine in common board
      ARM: smp_twd: convert to use CLKSRC_OF init
      clocksource: tegra20: use the device_node pointer passed to init
      clocksource: pass DT node pointer to init functions
      clocksource: add empty version of clocksource_of_init
    
    Conflicts:
            arch/arm/configs/multi_v7_defconfig
            arch/arm/mach-spear/spear13xx.c
    Tested-by: Barry Song <Barry.Song@csr.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 3d5a96582303e28c48699f3faaf920ef7d43e6f2
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 19 15:38:50 2013 +0100

    clocksource: make CLOCKSOURCE_OF_DECLARE type safe
    
    This ensures that a function pointer passed into CLOCKSOURCE_OF_DECLARE
    takes the same arguments that we use for calling that function later.
    
    Also fix the extraneous semicolon at end of the CLOCKSOURCE_OF_DECLARE
    definition.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Rob Herring <rob.herring@calxeda.com>

commit 275786b71d42bb54c03c15197128d7cb05d4dd8b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 19 15:27:22 2013 +0100

    ARM: sirf: use clocksource_of infrastructure
    
    This moves the two sirf clocksource drivers to drivers/clocksource
    and integrates them into the framework for locating the clock sources
    automatically.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Tested-by: Barry Song <Baohua.Song@csr.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>

commit ca9048ec31ab5e50c79bf18eccb79396c1f24b22
Author: Thomas Abraham <thomas.abraham@linaro.org>
Date:   Sat Mar 9 17:10:37 2013 +0900

    clocksource: mct: add support for mct clock setup
    
    Add support for mct clock lookup and setup to ensure that the mct
    clock is has been turned on.
    
    Signed-off-by: Thomas Abraham <thomas.abraham@linaro.org>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 415ac2e240f7f3e1b609f34ba7aa1c340589fdb1
Author: Thomas Abraham <thomas.abraham@linaro.org>
Date:   Sat Mar 9 17:10:31 2013 +0900

    clocksource: mct: use fin_pll clock as the tick clock source for mct
    
    With the migration of Exynos4 clocks to use common clock framework, the
    old styled 'xtal' clock is not used anymore. Instead, the clock 'fin_pll'
    is used as the tick clock for mct controller.
    
    Signed-off-by: Thomas Abraham <thomas.abraham@linaro.org>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 0dfca419b5448082b7e2f7db4de2e4643dfbfe35
Merge: c16c4c4b12cf 342896a5c565
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Mar 22 13:38:06 2013 +0100

    Merge tag 'renesas-clocksource-for-v3.10' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas into next/drivers
    
    From Simon Horman <horms@verge.net.au>:
    
    Renesas ARM and SH based SoC clocksource update for v3.10
    
    I has been agreed by Paul Mundt and myself, that it would be best to take
    these changes through the renesas tree and in turn the arm-soc tree.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    
    * tag 'renesas-clocksource-for-v3.10' of git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas:
      clocksource: sh_mtu2: Set initcall level to subsys
      clocksource: em_sti: Set initcall level to subsys
      clocksource: sh_tmu: Set initcall level to subsys
      clocksource: sh_cmt: Set initcall level to subsys
      clocksource: sh_cmt: Add CMT register layout comment
      clocksource: sh_cmt: Add control register callbacks
      clocksource: sh_cmt: CMCNT and CMCOR register access update
      clocksource: sh_cmt: CMSTR and CMCSR register access update
      clocksource: sh_cmt: Consolidate platform_set_drvdata() call
      clocksource: sh_cmt: Introduce per-register functions
      clocksource: sh_cmt: Initialize 'max_match_value' and 'lock' in sh_cmt_setup()
      clocksource: sh_cmt: Take care of clk_put() when setup_irq() fails

commit 4d10f054f7df600ec8a388091c93b2d976920de0
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 19 15:38:50 2013 +0100

    clocksource: make CLOCKSOURCE_OF_DECLARE type safe
    
    This ensures that a function pointer passed into CLOCKSOURCE_OF_DECLARE
    takes the same arguments that we use for calling that function later.
    
    Also fix the extraneous semicolon at end of the CLOCKSOURCE_OF_DECLARE
    definition.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Rob Herring <rob.herring@calxeda.com>

commit 960cba672bcecc6357984101703e70a8c819ccaa
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Mon Jan 7 17:23:22 2013 +0530

    ARM: OMAP5: timer: Update the clocksource name as per clock data
    
    OMAP5 clockdata has different sys clock node name. Fix the timer code
    to take care of it.
    
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

commit e445cf1c4257cc0238d72e4129eb4739f46fd3de
Author: Feng Tang <feng.tang@intel.com>
Date:   Tue Mar 12 11:56:48 2013 +0800

    timekeeping: utilize the suspend-nonstop clocksource to count suspended time
    
    There are some new processors whose TSC clocksource won't stop during
    suspend. Currently, after system resumes, kernel will use persistent
    clock or RTC to compensate the sleep time, but with these nonstop
    clocksources, we could skip the special compensation from external
    sources, and just use current clocksource for time recounting.
    
    This can solve some time drift bugs caused by some not-so-accurate or
    error-prone RTC devices.
    
    The current way to count suspended time is first try to use the persistent
    clock, and then try the RTC if persistent clock can't be used. This
    patch will change the trying order to:
            suspend-nonstop clocksource -> persistent clock -> RTC
    
    When counting the sleep time with nonstop clocksource, use an accurate way
    suggested by Jason Gunthorpe to cover very large delta cycles.
    
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    [jstultz: Small optimization, avoiding re-reading the clocksource]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 5caf4636259ae3af0efbb9bfc4cd97874b547c7d
Author: Feng Tang <feng.tang@intel.com>
Date:   Tue Mar 12 11:56:46 2013 +0800

    clocksource: Add new feature flag CLOCK_SOURCE_SUSPEND_NONSTOP
    
    Some x86 processors have a TSC clocksource, which continues to run
    even when system is suspended. Also most OMAP platforms have a
    32 KHz timer which has similar capability. Add a feature flag so that
    it could be utilized.
    
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit c54fdbb2823d96b842d00c548e14dbc0dd37831d
Author: Feng Tang <feng.tang@intel.com>
Date:   Tue Mar 12 11:56:45 2013 +0800

    x86: Add cpu capability flag X86_FEATURE_NONSTOP_TSC_S3
    
    On some new Intel Atom processors (Penwell and Cloverview), there is
    a feature that the TSC won't stop in S3 state, say the TSC value
    won't be reset to 0 after resume. This feature makes TSC a more reliable
    clocksource and could benefit the timekeeping code during system
    suspend/resume cycle, so add a flag for it.
    
    Signed-off-by: Feng Tang <feng.tang@intel.com>
    [jstultz: Fix checkpatch warning]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit b0d62d977674d178ac9bc0acaa3cb5cdd166035d
Merge: a3fe14c69049 da4a686a2cfb
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Mar 15 22:57:45 2013 +0100

    Merge tag 'clksrc-cleanup-for-3.10' of git://sources.calxeda.com/kernel/linux into next/cleanup
    
    From Rob Herring <robherring2@gmail.com>:
    
    - Add device_node ptr to clocksource init functions
    - Add CLKSRC_OF support to twd_smp timer
    
    * tag 'clksrc-cleanup-for-3.10' of git://sources.calxeda.com/kernel/linux:
      ARM: smp_twd: convert to use CLKSRC_OF init
      clocksource: tegra20: use the device_node pointer passed to init
      clocksource: pass DT node pointer to init functions
      clocksource: add empty version of clocksource_of_init
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit bffc5ce34483f3121f0b06e55a34b8eb56d253fb
Merge: f6161aa15358 ad38bdd15d5b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Mar 15 22:45:05 2013 +0100

    Merge branch 'next/timer-samsung' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung into next/drivers
    
    From  Kukjin Kim <kgene.kim@samsung.com>:
    
    Here is re-work samsung-time which was s5p-time to support
    clocksource/clockevent API for s3c and s5pc100 timer driver. And this enables to
    support high resolution timer and tickles mode on them.
    
    Note, this depends on previous pull request (cleanup-s3c) because of touching
    while s3c stuff.
    
    * 'next/timer-samsung' of git://git.kernel.org/pub/scm/linux/kernel/git/kgene/linux-samsung:
      ARM: SAMSUNG: Remove unused plat-samsung/time.c
      ARM: S5PC100: Add samsung-time support for s5pc100
      ARM: S3C64XX: Add samsung-time support for s3c64xx
      ARM: S3C24XX: Add samsung-time support for s3c24xx
      ARM: SAMSUNG: Rename s5p-time to samsung-time
      ARM: S3C24XX: cleanup the included soc init functions in common.h
      ARM: S3C24XX: move plat-samsung/s3c24XX headers to local common.h
      ARM: S3C24XX: remove plat/irq.h in plat-samsung
      ARM: S3C24XX: plat/common-smdk.h local
      mmc: s3cmci: moved mach/regs-sdi.h into s3cmci device driver
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 342896a5c565e38dfb87954f362735f03ae1efb0
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Tue Mar 5 15:40:42 2013 +0900

    clocksource: sh_mtu2: Set initcall level to subsys
    
    The reason for this is to ensure that MTU2 is probed earlier
    than with its previous initcall level, module init.
    
    This came up as a problem with using CMT as a clock source kzm9g-reference
    which does not make use of early timers or devices. In that scenario
    initialisation of SDHI and MMCIF both stall on msleep() calls due to the
    absence of a initialised clock source.
    
    The purpose of this change is to keep the MTU2 code in sync with the CMT code
    which has been modified in a similar manner..
    
    Compile tested only using se7206_defconfig.
    I do not believe I have any boards that support the MTU2.
    
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 09acc3a1e0dee537fcfcd5a6c17a1e9b26586066
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Tue Mar 5 15:40:42 2013 +0900

    clocksource: em_sti: Set initcall level to subsys
    
    The reason for this is to ensure that STI is probed earlier
    than with its previous initcall level, module init.
    
    This came up as a problem with using CMT as a clock source kzm9g-reference
    which does not make use of early timers or devices. In that scenario
    initialisation of SDHI and MMCIF both stall on msleep() calls due to the
    absence of a initialised clock source.
    
    The purpose of this change is to keep the STI code in sync with the CMT code
    which has been modified in a similar manner..
    
    Boot tested on: kzm9d.
    
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit b9773c3f52540ada159dc135c07653be010deee7
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Tue Mar 5 15:40:42 2013 +0900

    clocksource: sh_tmu: Set initcall level to subsys
    
    The reason for this is to ensure that TMU is probed earlier
    than with its previous initcall level, module init.
    
    This came up as a problem with using CMT as a clock source kzm9g-reference
    which does not make use of early timers or devices. In that scenario
    initialisation of SDHI and MMCIF both stall on msleep() calls due to the
    absence of a initialised clock source.
    
    The purpose of this change is to keep the TMU code in sync with the CMT code
    which has been modified in a similar manner..
    
    Boot tested on: mackerel.
    
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit e903a031402c8dccc675b2f0cf8af40ac89163b0
Author: Simon Horman <horms+renesas@verge.net.au>
Date:   Tue Mar 5 15:40:42 2013 +0900

    clocksource: sh_cmt: Set initcall level to subsys
    
    The reason for this is to ensure that CMT is probed earlier
    than with its previous initcall level, module init.
    
    This came up as a problem with using kzm9g-reference which does
    not make use of early timers or devices. In that scenario initialisation
    of SDHI and MMCIF both stall on msleep() calls due to the absence
    of a initialised clock source.
    
    Boot tested on: armadillo800eva, mackerel and kzm9g
    
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 118aee4dd91cf3c0b9546788ef66b65d3e9e31b1
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Dec 14 14:54:37 2012 +0900

    clocksource: sh_cmt: Add CMT register layout comment
    
    Add a comment about different register layouts
    supported by the CMT driver.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit cccd70455c351604d0a9075d35298ed4ff66dab3
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Dec 14 14:54:28 2012 +0900

    clocksource: sh_cmt: Add control register callbacks
    
    This patch adds control register callbacks for the CMT
    driver. At this point only 16-bit access is supported
    but in the future this will be updated to allow 32-bit
    access as well.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit a6a912ca43843d43590ce5f1cbc85cbc7ac14bba
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Dec 14 14:54:19 2012 +0900

    clocksource: sh_cmt: CMCNT and CMCOR register access update
    
    Break out the CMCNT and CMCOR register access code
    into separate 16-bit and 32-bit functions that are
    hooked into callbacks at init time. This reduces
    the amount of software calculations happening at
    runtime.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 587acb3dd5cf387de1325309e831fd0f560d1bf6
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Dec 14 14:54:10 2012 +0900

    clocksource: sh_cmt: CMSTR and CMCSR register access update
    
    Update hardware register access code for CMSTR and CMCSR
    from using sh_cmt_read() and sh_cmt_write() to make use
    of 16-bit register access functions such as sh_cmt_read16()
    and sh_cmt_write16(). Also update sh_cmt_read() and
    sh_cmt_write() now when the special cases are gone.
    
    This patch moves us one step closer to the goal of separating
    counter register access functions from control control register
    functions.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit adccc69e7ad1815ce79b073830b244a803776bbd
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Dec 14 14:53:51 2012 +0900

    clocksource: sh_cmt: Consolidate platform_set_drvdata() call
    
    Cleanup the use of platform_set_drvdata() to reduce code size
    
    Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi.px@renesas.com>
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 1b56b96b663d135305c3c47755fbdde3dc0ef720
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Dec 14 14:54:00 2012 +0900

    clocksource: sh_cmt: Introduce per-register functions
    
    Introduce sh_cmt_read_cmstr/cmcsr/cmcnt() and
    sh_cmt_write_cmstr/cmcsr/cmcnt/cmcor() to in the
    future allow us to split counter registers from
    control registers and reduce code complexity by
    removing sh_cmt_read() and sh_cmt_write().
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 44a10f943f59339f1206d599d4269a35995e397e
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Dec 14 14:53:41 2012 +0900

    clocksource: sh_cmt: Initialize 'max_match_value' and 'lock' in sh_cmt_setup()
    
    Move the setup of spinlock and max_match_value to sh_cmt_setup().
    There's no need to defer those steps until sh_cmt_register().
    
    Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi.px@renesas.com>
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 2fd61b32764c82b8410a4374d0ab3ec418ce37c7
Author: Magnus Damm <damm@opensource.se>
Date:   Fri Dec 14 14:53:32 2012 +0900

    clocksource: sh_cmt: Take care of clk_put() when setup_irq() fails
    
    Make sure clk_put() is called in case of failure in sh_cmt_setup().
    
    Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi.px@renesas.com>
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>

commit 6f88fb8af6c67f281b8e2cd607f08e0089c8ccbe
Author: Peter De Schrijver <pdeschrijver@nvidia.com>
Date:   Mon Feb 4 15:40:30 2013 +0200

    clocksource: tegra: move to of_clk_get
    
    The new clockframework introduced DT IDs for each clock. To be able to remove
    the device registrations, this driver needs to be updated to use the DT IDs.
    Note that the actual removal of the clk_register_clkdev() calls will be done
    in a later series.
    
    Signed-off-by: Peter De Schrijver <pdeschrijver@nvidia.com>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

commit 1d16cfb3aeba71bc6ecf2d19ccbabed0426e5c22
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Thu Feb 7 11:36:23 2013 -0600

    clocksource: tegra20: use the device_node pointer passed to init
    
    We've already matched the node, so use the node pointer passed in. The rtc
    init was intermingled with the timer init, so split this out to a separate
    init function.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>

commit effbfdd7baf7babc73154b87a5ff940969cf6559
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Wed Feb 6 14:40:22 2013 -0600

    clocksource: pass DT node pointer to init functions
    
    In cases where we have multiple nodes of the same type, we may need the
    node pointer to know which node was matched. Passing the node pointer
    also keeps the init function from having to match the node a 2nd time.
    
    Update bcm2835, vt8500, and tegra20 init functions for the new function
    prototype. Further tegra20 clean-ups are in follow-up commit.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Tested-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Tony Prisk <linux@prisktech.co.nz>
    Tested-by: Michal Simek <michal.simek@xilinx.com>

commit e0c25362384f4be9c755c98560cd4b1cdb2ec79c
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Sun Mar 10 21:52:53 2013 -0500

    clocksource: add empty version of clocksource_of_init
    
    Add an empty clocksource_of_init when !CLKSRC_OF. This is needed for builds
    where no timer has selected CLKSRC_OF.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>

commit 6938d75a8c1a1752f9fa7ef14a0c570036c7b73b
Author: Thomas Abraham <thomas.abraham@linaro.org>
Date:   Sat Mar 9 16:16:13 2013 +0900

    ARM: EXYNOS: move mct driver to drivers/clocksource
    
    Move the multi core timer (mct) driver to from mach-exynos
    to drivers/clocksource and update the Kconfig and makefiles.
    
    Cc: Changhwan Youn <chaos.youn@samsung.com>
    Signed-off-by: Thomas Abraham <thomas.abraham@linaro.org>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 9fbf0c85a1c0f1c927822c3026c8db9539570267
Author: Thomas Abraham <thomas.abraham@linaro.org>
Date:   Sat Mar 9 16:10:03 2013 +0900

    ARM: EXYNOS: allow dt based discovery of mct controller using clocksource_of_init
    
    Add entries to __clksrc_of_table so that Exynos MCT controller is
    discoverable using call to clocksource_of_init. With this change,
    it would be appropriate to rename the function 'exynos4_timer_init'
    as 'mct_init' since it aptly describes this function. Additionally,
    the 'init_time' callback of all machine descriptors for exynos
    platforms that were previously set to 'exynos4_timer_init' are now
    set to either 'mct_init' or 'clocksource_of_init'.
    
    Cc: Changhwan Youn <chaos.youn@samsung.com>
    Signed-off-by: Thomas Abraham <thomas.abraham@linaro.org>
    Reviewed-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 12324875d79c23a13bbf66390b595a84337dc8d7
Author: Olaf Hering <[mailto:olaf@aepfle.de]>
Date:   Sun Feb 3 17:22:37 2013 -0800

    x86: Hyper-V: register clocksource only if its advertised
    
    commit 32068f6527b8f1822a30671dedaf59c567325026 upstream.
    
    Enable hyperv_clocksource only if its advertised as a feature.
    XenServer 6 returns the signature which is checked in
    ms_hyperv_platform(), but it does not offer all features. Currently the
    clocksource is enabled unconditionally in ms_hyperv_init_platform(), and
    the result is a hanging guest.
    
    Hyper-V spec Bit 1 indicates the availability of Partition Reference
    Counter.  Register the clocksource only if this bit is set.
    
    The guest in question prints this in dmesg:
     [    0.000000] Hypervisor detected: Microsoft HyperV
     [    0.000000] HyperV: features 0x70, hints 0x0
    
    This bug can be reproduced easily be setting 'viridian=1' in a HVM domU
    .cfg file. A workaround without this patch is to boot the HVM guest with
    'clocksource=jiffies'.
    
    Signed-off-by: Olaf Hering <olaf@aepfle.de>
    Link: http://lkml.kernel.org/r/1359940959-32168-1-git-send-email-kys@microsoft.com
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 1a32c58bb945970e56f27a1cfb61625a3ac0b88e
Merge: 7307c00f335a 564991205956
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Feb 28 20:09:24 2013 -0800

    Merge tag 'late-mvebu-rebased' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC mvebu platform changes from Olof Johansson:
     "This series contains changes for the Marvell EBU platforms (mvebu,
      orion, kirkwood, dove) that were not part of the first set of pull
      requests because of dependencies on the MMC tree, and being submitted
      a little late.
    
      Notable changes are:
    
       - More devices get moved out of board files into device tree
         descriptions.  The remaining devices listed in there have patches
         that will get sent for 3.10, after which we can remove a lot of the
         board files entirely.  We are doing the pinctrl and mmc drivers
         here, ethernet and PCI still remain.
    
       - SMP support for mvebu is improved with support for the local
         interrupt controller.
    
       - The Guruplug board file gets replaced with a DT description.
    
      Unfortunately, the dependency on the MMC tree turned out to be a much
      larger problem than expected, when the MMC maintainer rebased the
      patches in his tree that all of the patches in this branch are based
      on, which caused merge conflicts between the new and old versions of
      those patches.
    
      To work around the merge conflicts, this branch rebases all patches on
      top of the respective MMC patches that did get merged into 3.9.  The
      patches are all identical to the versions that were part of
      linux-next, but have a new commit date."
    
    * tag 'late-mvebu-rebased' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (90 commits)
      arm: mvebu: enable the SD card slot on Armada 370 Reference Design board
      ARM: kirkwood: topkick: init mvsdio via DT
      ARM: kirkwood: nsa310: convert to pinctrl
      ARM: Kirkwood: topkick: Enable i2c bus.
      ARM: kirkwood: topkick: convert to pinctrl
      ARM: dove: convert serial DT nodes to clocks property
      arm: mvebu: Add SPI flash on Armada 370 DB board
      arm: mvebu: Add SPI flash on Armada XP-DB board
      arm: mvebu: Add SPI flash on Armada XP-GP board
      arm: mvebu: Add support for SPI controller in Armada 370/XP
      clocksource: update and move armada-370-xp-timer documentation to timer directory
      arm: mvebu: update DT to support local timers
      ARM: Dove: convert usb host controller to DT
      arm: mvebu: Enable USB controllers on Armada 370/XP boards
      arm: mvebu: Add support for USB host controllers in Armada 370/XP
      arm: mvebu: add button for OpenBlocks AX3-4
      ARM: Kirkwood: Convert NS2 to gpio-poweroff.
      ARM: Kirkwood: Convert NSA310 I2C to device tree
      ARM: Kirkwood: Convert NSA310 to use gpio-poweroff driver
      ARM: Kirkwood: Convert NSA310 to DT based regulators.
      ...

commit 37dd39513c33d518ccd8ea39ebe43d0f117590da
Author: Gregory CLEMENT <gregory.clement@bootlin.com>
Date:   Fri Jan 25 18:32:45 2013 +0100

    clocksource: update and move armada-370-xp-timer documentation to timer directory
    
    Timer driver for Armada 370 and Armada XP have gained local timers
    support. So it needs new resources information regarding the IRQs
    and the registers.
    
    Also move the documentation in the new and more accurate directory
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit ddd3f69f9f01063edabeb8ca5b1551936f98dfb1
Author: Gregory CLEMENT <gregory.clement@bootlin.com>
Date:   Fri Jan 25 18:32:42 2013 +0100

    clocksource: time-armada-370-xp: add local timer support
    
    On the SOCs Armada 370 and Armada XP, each CPU comes with two private
    timers. This patch use the timer 0 of each CPU as local timer for the
    clockevent if CONFIG_LOCAL_TIMER is selected. In the other case, use
    only the private Timer 0 of CPU 0.
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Jason Cooper <jason@lakedaemon.net>

commit 507d34bf74e3cef390d74b180ed9695e6bf3dcbb
Author: Olaf Hering <[mailto:olaf@aepfle.de]>
Date:   Sun Feb 3 17:22:37 2013 -0800

    x86: Hyper-V: register clocksource only if its advertised
    
    commit 32068f6527b8f1822a30671dedaf59c567325026 upstream.
    
    Enable hyperv_clocksource only if its advertised as a feature.
    XenServer 6 returns the signature which is checked in
    ms_hyperv_platform(), but it does not offer all features. Currently the
    clocksource is enabled unconditionally in ms_hyperv_init_platform(), and
    the result is a hanging guest.
    
    Hyper-V spec Bit 1 indicates the availability of Partition Reference
    Counter.  Register the clocksource only if this bit is set.
    
    The guest in question prints this in dmesg:
     [    0.000000] Hypervisor detected: Microsoft HyperV
     [    0.000000] HyperV: features 0x70, hints 0x0
    
    This bug can be reproduced easily be setting 'viridian=1' in a HVM domU
    .cfg file. A workaround without this patch is to boot the HVM guest with
    'clocksource=jiffies'.
    
    Signed-off-by: Olaf Hering <olaf@aepfle.de>
    Link: http://lkml.kernel.org/r/1359940959-32168-1-git-send-email-kys@microsoft.com
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 62f3431166bb78638f83f3a0fcfdba6e94576621
Author: Olaf Hering <[mailto:olaf@aepfle.de]>
Date:   Sun Feb 3 17:22:37 2013 -0800

    x86: Hyper-V: register clocksource only if its advertised
    
    commit 32068f6527b8f1822a30671dedaf59c567325026 upstream.
    
    Enable hyperv_clocksource only if its advertised as a feature.
    XenServer 6 returns the signature which is checked in
    ms_hyperv_platform(), but it does not offer all features. Currently the
    clocksource is enabled unconditionally in ms_hyperv_init_platform(), and
    the result is a hanging guest.
    
    Hyper-V spec Bit 1 indicates the availability of Partition Reference
    Counter.  Register the clocksource only if this bit is set.
    
    The guest in question prints this in dmesg:
     [    0.000000] Hypervisor detected: Microsoft HyperV
     [    0.000000] HyperV: features 0x70, hints 0x0
    
    This bug can be reproduced easily be setting 'viridian=1' in a HVM domU
    .cfg file. A workaround without this patch is to boot the HVM guest with
    'clocksource=jiffies'.
    
    Signed-off-by: Olaf Hering <olaf@aepfle.de>
    Link: http://lkml.kernel.org/r/1359940959-32168-1-git-send-email-kys@microsoft.com
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb2dec77f98bc2b92d60ffb9b2cb702ca85adda3
Author: Olaf Hering <[mailto:olaf@aepfle.de]>
Date:   Sun Feb 3 17:22:37 2013 -0800

    x86: Hyper-V: register clocksource only if its advertised
    
    commit 32068f6527b8f1822a30671dedaf59c567325026 upstream.
    
    Enable hyperv_clocksource only if its advertised as a feature.
    XenServer 6 returns the signature which is checked in
    ms_hyperv_platform(), but it does not offer all features. Currently the
    clocksource is enabled unconditionally in ms_hyperv_init_platform(), and
    the result is a hanging guest.
    
    Hyper-V spec Bit 1 indicates the availability of Partition Reference
    Counter.  Register the clocksource only if this bit is set.
    
    The guest in question prints this in dmesg:
     [    0.000000] Hypervisor detected: Microsoft HyperV
     [    0.000000] HyperV: features 0x70, hints 0x0
    
    This bug can be reproduced easily be setting 'viridian=1' in a HVM domU
    .cfg file. A workaround without this patch is to boot the HVM guest with
    'clocksource=jiffies'.
    
    Signed-off-by: Olaf Hering <olaf@aepfle.de>
    Link: http://lkml.kernel.org/r/1359940959-32168-1-git-send-email-kys@microsoft.com
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24e55910e4801d772f95becde20b526b8b10388d
Merge: dcad0fceae52 00f4e13c4634
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Feb 26 19:43:20 2013 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Ingo Molnar.
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clocksource : Nomadik-mtu : fix missing irq initialization
      posix-timer: Don't call idr_find() with out-of-range ID

commit 00f4e13c4634b10f6a16b26a980b22a53dfa6bb5
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Fri Feb 22 16:44:30 2013 +0100

    clocksource : Nomadik-mtu : fix missing irq initialization
    
    This patch fix the clock device irq field which is not initialized.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: linaro-kernel@lists.linaro.org
    Cc: patches@linaro.org
    Cc: linus.walleij@stericsson.com
    Cc: john.stultz@linaro.org
    Link: http://lkml.kernel.org/r/1361547870-32638-1-git-send-email-daniel.lezcano@linaro.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit b274776c54c320763bc12eb035c0e244f76ccb43
Merge: b24174b0cbbe 3b1209e7994c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Feb 21 14:58:40 2013 -0800

    Merge tag 'cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC cleanups from Arnd Bergmann:
     "A large number of cleanups, all over the platforms.  This is dominated
      largely by the Samsung platforms (s3c, s5p, exynos) and a few of the
      others moving code out of arch/arm into more appropriate subsystems.
    
      The clocksource and irqchip drivers are now abstracted to the point
      where platforms that are already cleaned up do not need to even
      specify the driver they use, it can all get configured from the device
      tree as we do for normal device drivers.  The clocksource changes
      basically touch every single platform in the process.
    
      We further clean up the use of platform specific header files here,
      with the goal of turning more of the platforms over to being
      "multiplatform" enabled, which implies that they cannot expose their
      headers to architecture independent code any more.
    
      It is expected that no functional changes are part of the cleanup.
      The overall reduction in total code lines is mostly the result of
      removing broken and obsolete code."
    
    * tag 'cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (133 commits)
      ARM: mvebu: correct gated clock documentation
      ARM: kirkwood: add missing include for nsa310
      ARM: exynos: move exynos4210-combiner to drivers/irqchip
      mfd: db8500-prcmu: update resource passing
      drivers/db8500-cpufreq: delete dangling include
      ARM: at91: remove NEOCORE 926 board
      sunxi: Cleanup the reset code and add meaningful registers defines
      ARM: S3C24XX: header mach/regs-mem.h local
      ARM: S3C24XX: header mach/regs-power.h local
      ARM: S3C24XX: header mach/regs-s3c2412-mem.h local
      ARM: S3C24XX: Remove plat-s3c24xx directory in arch/arm/
      ARM: S3C24XX: transform s3c2443 subirqs into new structure
      ARM: S3C24XX: modify s3c2443 irq init to initialize all irqs
      ARM: S3C24XX: move s3c2443 irq code to irq.c
      ARM: S3C24XX: transform s3c2416 irqs into new structure
      ARM: S3C24XX: modify s3c2416 irq init to initialize all irqs
      ARM: S3C24XX: move s3c2416 irq init to common irq code
      ARM: S3C24XX: Modify s3c_irq_wake to use the hwirq property
      ARM: S3C24XX: Move irq syscore-ops to irq-pm
      clocksource: always define CLOCKSOURCE_OF_DECLARE
      ...

commit 29d50523298eb80742cedd9ec4d42d6d6dbfb5ee
Merge: 026f149ca38a cb20e5f2c8d6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Feb 19 20:10:21 2013 -0800

    Merge branch 'x86-hyperv-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86/hyperv changes from Ingo Molnar:
     "The biggest change is support for Windows 8's improved hypervisor
      interrupt model on the Linux Hyper-V guest subsystem code side.
    
      Smallish fixes otherwise."
    
    * 'x86-hyperv-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86, hyperv: HYPERV depends on X86_LOCAL_APIC
      X86: Handle Hyper-V vmbus interrupts as special hypervisor interrupts
      X86: Add a check to catch Xen emulation of Hyper-V
      x86: Hyper-V: register clocksource only if its advertised

commit 778eeb1b199b85bec79b49ac483b013e270636ea
Author: Steven J. Hill <sjhill@mips.com>
Date:   Fri Dec 7 03:51:04 2012 +0000

    MIPS: Add new GIC clocksource.
    
    Add new clocksource that uses the counter present on the MIPS
    Global Interrupt Controller.
    
    Signed-off-by: Steven J. Hill <sjhill@mips.com>
    Patchwork: http://patchwork.linux-mips.org/patch/4681/
    Signed-off-by: John Crispin <blogic@openwrt.org>

commit 4e45e542cd742c1c3e30e7f252640644c66548b5
Author: Jayachandran C <jchandra@broadcom.com>
Date:   Mon Jan 14 15:11:57 2013 +0000

    MIPS: Netlogic: Use PIC timer as a clocksource
    
    The XLR/XLS/XLP PIC has a 8 countdown timers which run at the PIC
    frequencey. One of these can be used as a clocksource to provide
    timestamps that is common across cores. This can be used in place
    of the count/compare clocksource which is per-CPU.
    
    On XLR/XLS PIC registers are 32-bit, so we just use the lower 32-bits
    of the PIC counter. On XLP, the whole 64-bit can be used.
    
    Provide common macros and functions for PIC timer registers on XLR/XLS
    and XLP, and use them to register a PIC clocksource.
    
    Signed-off-by: Jayachandran C <jchandra@broadcom.com>
    Patchwork: http://patchwork.linux-mips.org/patch/4786/
    Signed-off-by: John Crispin <blogic@openwrt.org>

commit fe7dc7202d7d24fe211e0eecf531d8b79b655b3c
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Feb 14 17:45:25 2013 +0100

    ARM: arch_timer: include linux/errno.h
    
    Patch 8a4da6e "arm: arch_timer: move core to drivers/clocksource"
    moved a lot of code out of arch_timer.c, but ended up deleting
    too much, which broke some configurations.
    
    Obviously, include linux/errno.h is required to return error
    values.
    
    Without this patch, building allmodconfig results in:
    
    arch/arm/kernel/arch_timer.c: In function 'arch_timer_sched_clock_init':
    arch/arm/kernel/arch_timer.c:55:11: error: 'ENXIO' undeclared (first use in this function)
    arch/arm/kernel/arch_timer.c:55:11: note: each undeclared identifier is reported only once for each function it appears in
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>

commit 8872e9e513eba636c8d4266fe667660f73cd66e6
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 18 15:12:22 2013 +0530

    ARC: [plat-arcfpga] defconfig
    
    With this we get to a running kernel on ISS
    
    ---------------------------------->8-----------------------------------
    Linux version 3.8.0-rc3+ (vineetg@vineetg-Latitude) (gcc version 4.4.7
    (ARCompact elf32 toolchain (built 20121213)) ) #3 Thu Jan 17 14:22:05
    IST 2013
    Board "arc-angel4" from snps (Manufacturer)
    Memory size set via devicetree 256M
    [plat-arcfpga]: registering early dev resources
    bootconsole [early_ARCuart0] enabled
    pcpu-alloc: s0 r0 d32768 u32768 alloc=1*32768
    pcpu-alloc: [0] 0
    Built 1 zonelists in Zone order, mobility grouping on.  Total pages:
    32624
    Kernel command line: console=ttyARC0,115200n8
    PID hash table entries: 1024 (order: -1, 4096 bytes)
    Dentry cache hash table entries: 32768 (order: 4, 131072 bytes)
    Inode-cache hash table entries: 16384 (order: 3, 65536 bytes)
    Memory Available: 248M / 256M (1312K code, 463K data, 4184K init, 1400K
    reserv)
    SLUB: Genslabs=12, HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
    NR_IRQS:16
    Console: colour dummy device 80x25
    Calibrating delay loop... 39.73 BogoMIPS (lpj=198656)
    pid_max: default: 32768 minimum: 301
    Mount-cache hash table entries: 1024
    devtmpfs: initialized
    [plat-arcfpga]: registering device resources
    bio: create slab <bio-0> at 0
    Switching to clocksource ARC RTSC
    io scheduler noop registered (default)
    arc-uart: ttyARC0 at MMIO 0xc0fc1000 (irq = 5) is a arc-uart
    console [ttyARC0] enabled, bootconsole disabled
    console [ttyARC0] enabled, bootconsole disabled
    mousedev: PS/2 mouse device common for all mice
    Warning: unable to open an initial console.
    Freeing unused kernel memory: 4184k [80002000] to [80418000]
    Mounting proc
    Mounting sysfs
    Mounting devpts
    Setting hostname to ARCLinux
    Starting System logger (syslogd)
    Bringing up loopback device
    ifconfig: socket: Function not implemented
    route: socket: Function not implemented
    Disk not detected !
    Mounting tmpfs
    mount: mounting tmpfs on /dev/shm failed: Invalid argument
    /etc/init.d/rcS: line 76: can't create /proc/sys/kernel/msgmni:
    nonexistent directory
    
    Please press Enter to activate this console.
    ***********************************************************************
                            Welcome to ARCLinux
    ***********************************************************************
    [ARCLinux]$
    
    ---------------------------------->8-----------------------------------
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit 32068f6527b8f1822a30671dedaf59c567325026
Author: Olaf Hering <[mailto:olaf@aepfle.de]>
Date:   Sun Feb 3 17:22:37 2013 -0800

    x86: Hyper-V: register clocksource only if its advertised
    
    Enable hyperv_clocksource only if its advertised as a feature.
    XenServer 6 returns the signature which is checked in
    ms_hyperv_platform(), but it does not offer all features. Currently the
    clocksource is enabled unconditionally in ms_hyperv_init_platform(), and
    the result is a hanging guest.
    
    Hyper-V spec Bit 1 indicates the availability of Partition Reference
    Counter.  Register the clocksource only if this bit is set.
    
    The guest in question prints this in dmesg:
     [    0.000000] Hypervisor detected: Microsoft HyperV
     [    0.000000] HyperV: features 0x70, hints 0x0
    
    This bug can be reproduced easily be setting 'viridian=1' in a HVM domU
    .cfg file. A workaround without this patch is to boot the HVM guest with
    'clocksource=jiffies'.
    
    Signed-off-by: Olaf Hering <olaf@aepfle.de>
    Link: http://lkml.kernel.org/r/1359940959-32168-1-git-send-email-kys@microsoft.com
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Cc: <stable@vger.kernel.org>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>

commit 0582b05366f39ea1024450f18cc801c7f42bbbbb
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Feb 11 15:15:53 2013 -0800

    arm: arch_timer: add missing inline in stub function
    
    Fixes:
    
    In file included from arch/arm/include/asm/arch_timer.h:10:0,
                     from arch/arm/mach-shmobile/timer.c:23:
    include/clocksource/arm_arch_timer.h:56:28: warning: 'arch_timer_get_timecounter' defined but not used [-Wunused-function]
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 37a42fca282cb37c14d997ca9299bdc6617815bb
Merge: 3ddc0e1a7fd2 9e02e394c7d7
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Feb 11 09:04:35 2013 -0800

    Merge branch 'for-arm-soc/arch-timers' of git://git.kernel.org/pub/scm/linux/kernel/git/will/linux into next/virt
    
    From Will Deacon:
    This set of changes moves the arch-timer driver out from arch/arm/ and
    into drivers/clocksource and unifies the new driver with the arm64 copy.
    
    * 'for-arm-soc/arch-timers' of git://git.kernel.org/pub/scm/linux/kernel/git/will/linux:
      ARM: arch_timers: switch to physical timers if HYP mode is available
      Documentation: Add ARMv8 to arch_timer devicetree
      arm64: move from arm_generic to arm_arch_timer
      arm64: arm_generic: prevent reading stale time
      arm: arch_timer: move core to drivers/clocksource
      arm: arch_timer: add arch_counter_set_user_access
      arm: arch_timer: divorce from local_timer api
      arm: arch_timer: add isbs to register accessors
      arm: arch_timer: factor out register accessors
      arm: arch_timer: split cntfrq accessor
      arm: arch_timer: standardise counter reading
      arm: arch_timer: use u64/u32 for register data
      arm: arch_timer: remove redundant available check
      arm: arch_timer: balance device_node refcounting
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit d8005e6b95268cbb50db3773d5f180c32a9434fe
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Jan 18 15:12:18 2013 +0530

    ARC: Timers/counters/delay management
    
    ARC700 includes 2 in-core 32bit timers TIMER0 and TIMER1.
    Both have exactly same capabilies.
    
    * programmable to count from TIMER<n>_CNT to TIMER<n>_LIMIT
    * for count 0 and LIMIT ~1, provides a free-running counter by
        auto-wrapping when limit is reached.
    * optionally interrupt when LIMIT is reached (oneshot event semantics)
    * rearming the interrupt provides periodic semantics
    * run at CPU clk
    
    ARC Linux uses TIMER0 for clockevent (periodic/oneshot) and TIMER1 for
    clocksource (free-running clock).
    
    Newer cores provide RTSC insn which gives a 64bit cpu clk snapshot hence
    is more apt for clocksource when available.
    
    SMP poses a bit of challenge for global timekeeping clocksource /
    sched_clock() backend:
     -TIMER1 based local clocks are out-of-sync hence can't be used
      (thus we default to jiffies based cs as well as sched_clock() one/both
      of which platform can override with it's specific hardware assist)
     -RTSC is only allowed in SMP if it's cross-core-sync (Kconfig glue
      ensures that) and thus usable for both requirements.
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>

commit bda6f8e6cdcdb55db9b2961b6a7c9d0d97da4765
Merge: c35a0bfacb61 ef3ffe5a0458
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Feb 5 12:13:10 2013 -0800

    Merge tag 'tegra-for-3.9-soc-ccf' of git://git.kernel.org/pub/scm/linux/kernel/git/swarren/linux-tegra into next/soc
    
    From Stephen Warren:
    ARM: tegra: Common Clock Framework rework
    
    Tegra already supports the common clock framework, but had issues:
    
    1) The clock driver was located in arch/arm/mach-tegra/ rather than
       drivers/clk/.
    
    2) A single "Tegra clock" type was implemented, rather than separate
       clock types for PLL, mux, divider, ... type in HW.
    
    3) Clock lookups by device drivers were still driven by device name
       and connection ID, rather than through device tree.
    
    This pull request solves all three issues. This required some DT changes
    to add clocks properties, and driver changes to request clocks more
    "correctly". Finally, this rework allows all AUXDATA to be removed from
    Tegra board files, and various duplicate clock lookup entries to be
    removed from the driver.
    
    This pull request is based on the previous pull request, with tag
    tegra-for-3.9-cleanup.
    
    * tag 'tegra-for-3.9-soc-ccf' of git://git.kernel.org/pub/scm/linux/kernel/git/swarren/linux-tegra: (31 commits)
      clk: tegra30: remove unused TEGRA_CLK_DUPLICATE()s
      clk: tegra20: remove unused TEGRA_CLK_DUPLICATE()s
      ARM: tegra30: remove auxdata
      ARM: tegra20: remove auxdata
      ASoC: tegra: remove auxdata
      staging: nvec: remove use of clk_get_sys
      ARM: tegra: paz00: add clock information to DT
      ARM: tegra: add clock properties to Tegra30 DT
      ARM: tegra: add clock properties to Tegra20 DT
      spi: tegra: do not use clock name to get clock
      ARM: tegra: remove legacy clock code
      ARM: tegra: migrate to new clock code
      clk: tegra: add clock support for Tegra30
      clk: tegra: add clock support for Tegra20
      clk: tegra: add Tegra specific clocks
      ARM: tegra: define Tegra30 CAR binding
      ARM: tegra: define Tegra20 CAR binding
      ARM: tegra: move tegra_cpu_car.h to linux/clk/tegra.h
      ARM: tegra: add function to read chipid
      ARM: tegra: fix compile error when disable CPU_IDLE
      ...
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    
    Conflicts:
            arch/arm/mach-tegra/board-dt-tegra20.c
            arch/arm/mach-tegra/board-dt-tegra30.c
            arch/arm/mach-tegra/common.c
            arch/arm/mach-tegra/platsmp.c
            drivers/clocksource/Makefile

commit f0390669d13b0a1592fc7906445b4f6c8ec5af23
Merge: b60decad7791 24e30c941723
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Feb 5 12:10:18 2013 -0800

    Merge tag 'tegra-for-3.9-cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/swarren/linux-tegra into next/cleanup
    
    From Stephen Warren:
    ARM: tegra: cleanup
    
    This pull request contains various cleanup and minor changes to core
    Tegra code:
    * Tegra clocksource driver is moved to drivers/clocksource.
    * Various typos, warning cleanup, statics cleanup, section mismatch
      fixes, etc.
    * Various small fixes/cleanups for CPU/hotplug/SMP code.
    
    This pull request is based on a merge of v3.8-rc3 and at least part of
    arm-soc's timer/cleanup branch.
    
    * tag 'tegra-for-3.9-cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/swarren/linux-tegra:
      ARM: tegra: fix compile error when disable CPU_IDLE
      ARM: tegra30: make the wait time of CPU power up to proportional to HZ
      ARM: tegra: make device can run on UP
      ARM: tegra: clean up the CPUINIT section
      ARM: tegra: moving the clock gating procedure to tegra_cpu_kill
      ARM: tegra: update the cache maintenance order for CPU shutdown
      ARM: tegra30: fix power up sequence for boot_secondary
      ARM: tegra: cpufreq: move clk_get/put out of function tegra_cpu_init/exit
      ARM: tegra: fix Kconfig warnings when !SMP
      ARM: tegra: Make variables static
      clocksource: tegra: cosmetic: Fix error message
      ARM: tegra: move timer.c to drivers/clocksource/
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    
    Trivial conflicts:
            arch/arm/mach-tegra/board-dt-tegra20.c
            arch/arm/mach-tegra/board-dt-tegra30.c
            drivers/clocksource/Makefile

commit 8f0de0d62f29e47f5142737dad7561f108f69e92
Author: Santosh Shilimkar <santosh.shilimkar@ti.com>
Date:   Thu Jan 31 21:02:00 2013 +0530

    ARM: OMAP2+: Get rid of custom OMAP_32K_TIMER_HZ
    
    The timekeeping doesn't depend on HZ value in presence of fine grained
    clocksource and hence there should not be any time drift because of HZ
    value which was chosen to be divisor of 32768.
    
    OMAP has been using HZ = 128 value to avoid any time drift issues
    because of 32768 HZ clock. But with various measurements performed
    with HZ = 100, no time drift is observed and it also proves the
    point about HZ not having impact on time keeping on OMAP.
    
    Very informative thread on this topic is here:
            https://lkml.org/lkml/2013/1/29/435
    
    Special thanks to John Stulz, Arnd Bergmann and Russell King for their
    valuable suggestions.
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Tony Lindgren <tony@atomide.com>
    
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Tested-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit e1d7ef1cc472de30995a50ecb9c7aa3361f985f9
Author: Stephen Warren <swarren@nvidia.com>
Date:   Wed Jan 30 10:49:30 2013 -0700

    clocksource: always define CLOCKSOURCE_OF_DECLARE
    
    This allows clocksource drivers that support both DT and non-DT to
    always invoke macro CLOCKSOURCE_OF_DECLARE(), rather than wrapping
    it in a #ifdef CONFIG_CLKSRC_OF, which simplifies their code.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 8a4da6e36c582ff746191eca85b6c1c068dbfbd6
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Nov 12 14:33:44 2012 +0000

    arm: arch_timer: move core to drivers/clocksource
    
    The core functionality of the arch_timer driver is not directly tied to
    anything under arch/arm, and can be split out.
    
    This patch factors out the core of the arch_timer driver, so it can be
    shared with other architectures. A couple of functions are added so
    that architecture-specific code can interact with the driver without
    needing to touch its internals.
    
    The ARM_ARCH_TIMER config variable is moved out to
    drivers/clocksource/Kconfig, existing uses in arch/arm are replaced with
    HAVE_ARM_ARCH_TIMER, which selects it.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>

commit b8e243431fa11f542a0fd94e939543bcb7d236ee
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Nov 14 09:50:19 2012 +0000

    arm: arch_timer: standardise counter reading
    
    We're currently inconsistent with respect to our accesses to the
    physical and virtual counters, mixing and matching the two.
    
    This patch introduces and uses a function pointer for accessing the
    correct counter based on whether we're using physical or virtual
    interrupts. All current accesses to the counter accessors are redirected
    through it.
    
    When the driver is moved out to drivers/clocksource, there's the
    possibility that code called before the timer code is initialised will
    attempt to call arch_timer_read_counter (e.g. sched_clock for AArch64).
    To avoid having to have to check whether the timer has been initialised
    either in arch_timer_read_counter or one of it's callers, a default
    implementation is assigned that simply returns 0.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Santosh Shilimkar <santosh.shilimkar@ti.com>

commit 5d292ebf4bc62107f298de2dbabe9c4ef17753fd
Merge: c1353ef200fc c1b724f6659a
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Jan 29 09:51:31 2013 -0800

    Merge tag 'bcm2835-for-3.9-cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/swarren/linux-rpi into next/cleanup
    
    From Stephen Warren:
    ARM: bcm2835: cleanup
    
    This pull request simply converts the bcm2835 clocksource driver to use
    the recently added CLKSRC_OF feature.
    
    The branch is based on v3.8-rc3, followed by a merge of arm-soc's
    timer/cleanup branch.
    
    * tag 'bcm2835-for-3.9-cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/swarren/linux-rpi:
      ARM: bcm2835: make use of CLKSRC_OF
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 7bcdd8d5e31db4f49ae52580e86723c376ee0999
Merge: 96e61b8e34ea f8060f5446b1
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Jan 28 13:36:23 2013 -0800

    Merge branch 'depends/cleanup' into next/drivers
    
    * depends/cleanup: (375 commits)
      ARM: at91: fix board-rm9200-dt after sys_timer conversion
      clocksource: use clockevents_config_and_register() where possible
      ARM: use clockevents_config_and_register() where possible
      clockevents: export clockevents_config_and_register for module use
      timer: vt8500: Move timer code to drivers/clocksource
      irqchip: Move ARM vic.h to include/linux/irqchip/arm-vic.h
      ARM: picoxcell: use common irqchip_init function
      ARM: spear: use common irqchip_init function
      irqchip: Move ARM VIC to drivers/irqchip
      ARM: samsung: remove unused tick.h
      ARM: remove unneeded vic.h includes
      ARM: remove mach .handle_irq for VIC users
      ARM: VIC: set handle_arch_irq in VIC initialization
      ARM: VIC: shrink down vic.h
      irqchip: Move ARM gic.h to include/linux/irqchip/arm-gic.h
      ARM: use common irqchip_init for GIC init
      irqchip: Move ARM GIC to drivers/irqchip
      ARM: remove mach .handle_irq for GIC users
      ARM: GIC: set handle_arch_irq in GIC initialization
      ARM: GIC: remove direct use of gic_raise_softirq
      ...

commit 37340866fb659f955489bd0742788135156a4d3c
Author: Hiroshi Doyu <hdoyu@nvidia.com>
Date:   Mon Dec 17 13:35:23 2012 +0200

    clocksource: tegra: cosmetic: Fix error message
    
    Add missing \n.
    
    Signed-off-by: Hiroshi Doyu <hdoyu@nvidia.com>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

commit 1711b1e10224dbebc885b7bf7ca2f03f51ff9f4a
Author: Stephen Warren <swarren@nvidia.com>
Date:   Tue Oct 23 11:52:53 2012 -0600

    ARM: tegra: move timer.c to drivers/clocksource/
    
    Move arch/arm/mach-tegra/timer.c to drivers/clocksource/tegra20_timer.c
    so that the code is co-located with other clocksource drivers, and to
    reduce the size of the mach-tegra directory.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

commit f2f6c2556dcc432e50003bc8fa4d62d95906f149
Author: Prashant Gaikwad <pgaikwad@nvidia.com>
Date:   Fri Jan 4 12:30:52 2013 +0530

    clk: add common of_clk_init() function
    
    Modify of_clk_init function so that it will determine which
    driver to initialize based on device tree instead of each driver
    registering to it.
    
    Based on a similar patch for drivers/irqchip by Thomas Petazzoni and
    drivers/clocksource by Stephen Warren.
    
    Signed-off-by: Prashant Gaikwad <pgaikwad@nvidia.com>
    Tested-by: Tony Prisk <linux@prisktech.co.nz>
    Tested-by: Pawel Moll <pawel.moll@arm.com>
    Tested-by: Rob Herring <rob.herring@calxeda.com>
    Tested-by: Josh Cartwright <josh.cartwright@ni.com>
    Reviewed-by: Josh Cartwright <josh.cartwright@ni.com>
    Acked-by: Maxime Ripard <maxime.ripard@anandra.org>
    Signed-off-by: Mike Turquette <mturquette@linaro.org>
    [mturquette@linaro.org: merge conflict from missing CLKSRC_OF_TABLES()]
    
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

commit 034bf091b7a5f02e63409b0b5b6dad1101d70144
Author: Pantelis Antoniou <panto@antoniou-consulting.com>
Date:   Tue Jan 8 15:31:42 2013 +0200

    ARM: OMAP2+: DT node Timer iteration fix
    
    The iterator correctly handles of_node_put() calls.
    Remove it before continue'ing the loop.
    Without this patch you get the following with
    CONFIG_OF_DYNAMIC set:
    
    ERROR: Bad of_node_put() on /ocp/timer@44e31000!
    [<c001329c>] (unwind_backtrace+0x0/0xe0) from [<c03dd8f0>] (of_node_release+0x2c/0xa0)!
    [<c03dd8f0>] (of_node_release+0x2c/0xa0) from [<c03ddea0>] (of_find_matching_node_and_match+0x78/0x90)!
    [<c03ddea0>] (of_find_matching_node_and_match+0x78/0x90) from [<c06d349c>] (omap_get_timer_dt+0x78/0x90)!
    [<c06d349c>] (omap_get_timer_dt+0x78/0x90) from [<c06d3664>] (omap_dm_timer_init_one.clone.2+0x34/0x2bc)!
    [<c06d3664>] (omap_dm_timer_init_one.clone.2+0x34/0x2bc) from [<c06d3a2c>] (omap2_gptimer_clocksource_init.clone.4+0x24/0xa8)!
    [<c06d3a2c>] (omap2_gptimer_clocksource_init.clone.4+0x24/0xa8) from [<c06cca58>] (time_init+0x20/0x30)!
    [<c06cca58>] (time_init+0x20/0x30) from [<c06c9690>] (start_kernel+0x1a8/0x2fc)!
    
    Signed-off-by: Pantelis Antoniou <panto@antoniou-consulting.com>
    Acked-by: Jon Hunter <jon-hunter@ti.com>
    [tony@atomide.com: updated description per Jon]
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 28a63b67b3d52e40826d82425307e8f067551106
Author: Yi Zou <yi.zou@intel.com>
Date:   Mon Dec 10 17:04:00 2012 -0800

    target/tcm_fc: fix the lockdep warning due to inconsistent lock state
    
    commit 9f4ad44b264f8bb61ffdd607148215566568430d upstream.
    
    The lockdep warning below is in theory correct but it will be in really weird
    rare situation that ends up that deadlock since the tcm fc session is hashed
    based the rport id. Nonetheless, the complaining below is about rcu callback
    that does the transport_deregister_session() is happening in softirq, where
    transport_register_session() that happens earlier is not. This triggers the
    lockdep warning below. So, just fix this to make lockdep happy by disabling
    the soft irq before calling transport_register_session() in ft_prli.
    
    BTW, this was found in FCoE VN2VN over two VMs, couple of create and destroy
    would get this triggered.
    
    v1: was enforcing register to be in softirq context which was not righ. See,
    http://www.spinics.net/lists/target-devel/msg03614.html
    
    v2: following comments from Roland&Nick (thanks), it seems we don't have to
    do transport_deregister_session() in rcu callback, so move it into ft_sess_free()
    but still do kfree() of the corresponding ft_sess struct in rcu callback to
    make sure the ft_sess is not freed till the rcu callback.
    
    ...
    [ 1328.370592] scsi2 : FCoE Driver
    [ 1328.383429] fcoe: No FDMI support.
    [ 1328.384509] host2: libfc: Link up on port (000000)
    [ 1328.934229] host2: Assigned Port ID 00a292
    [ 1357.232132] host2: rport 00a393: Remove port
    [ 1357.232568] host2: rport 00a393: Port sending LOGO from Ready state
    [ 1357.233692] host2: rport 00a393: Delete port
    [ 1357.234472] host2: rport 00a393: work event 3
    [ 1357.234969] host2: rport 00a393: callback ev 3
    [ 1357.235979] host2: rport 00a393: Received a LOGO response closed
    [ 1357.236706] host2: rport 00a393: work delete
    [ 1357.237481]
    [ 1357.237631] =================================
    [ 1357.238064] [ INFO: inconsistent lock state ]
    [ 1357.238450] 3.7.0-rc7-yikvm+ #3 Tainted: G           O
    [ 1357.238450] ---------------------------------
    [ 1357.238450] inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    [ 1357.238450] ksoftirqd/0/3 [HC0[0]:SC1[1]:HE0:SE0] takes:
    [ 1357.238450]  (&(&se_tpg->session_lock)->rlock){+.?...}, at: [<ffffffffa01eacd4>] transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450] {SOFTIRQ-ON-W} state was registered at:
    [ 1357.238450]   [<ffffffff810834f5>] mark_held_locks+0x6d/0x95
    [ 1357.238450]   [<ffffffff8108364a>] trace_hardirqs_on_caller+0x12d/0x197
    [ 1357.238450]   [<ffffffff810836c1>] trace_hardirqs_on+0xd/0xf
    [ 1357.238450]   [<ffffffff8149caba>] _raw_spin_unlock_irq+0x2d/0x45
    [ 1357.238450]   [<ffffffffa01e8d10>] __transport_register_session+0xb8/0x122 [target_core_mod]
    [ 1357.238450]   [<ffffffffa01e8dbe>] transport_register_session+0x44/0x5a [target_core_mod]
    [ 1357.238450]   [<ffffffffa018e32c>] ft_prli+0x1e3/0x275 [tcm_fc]
    [ 1357.238450]   [<ffffffffa0160e8d>] fc_rport_recv_req+0x95e/0xdc5 [libfc]
    [ 1357.238450]   [<ffffffffa015be88>] fc_lport_recv_els_req+0xc4/0xd5 [libfc]
    [ 1357.238450]   [<ffffffffa015c778>] fc_lport_recv_req+0x12f/0x18f [libfc]
    [ 1357.238450]   [<ffffffffa015a6d7>] fc_exch_recv+0x8ba/0x981 [libfc]
    [ 1357.238450]   [<ffffffffa0176d7a>] fcoe_percpu_receive_thread+0x47a/0x4e2 [fcoe]
    [ 1357.238450]   [<ffffffff810549f1>] kthread+0xb1/0xb9
    [ 1357.238450]   [<ffffffff814a40ec>] ret_from_fork+0x7c/0xb0
    [ 1357.238450] irq event stamp: 275411
    [ 1357.238450] hardirqs last  enabled at (275410): [<ffffffff810bb6a0>] rcu_process_callbacks+0x229/0x42a
    [ 1357.238450] hardirqs last disabled at (275411): [<ffffffff8149c2f7>] _raw_spin_lock_irqsave+0x22/0x8e
    [ 1357.238450] softirqs last  enabled at (275394): [<ffffffff8103d669>] __do_softirq+0x246/0x26f
    [ 1357.238450] softirqs last disabled at (275399): [<ffffffff8103d6bb>] run_ksoftirqd+0x29/0x62
    [ 1357.238450]
    [ 1357.238450] other info that might help us debug this:
    [ 1357.238450]  Possible unsafe locking scenario:
    [ 1357.238450]
    [ 1357.238450]        CPU0
    [ 1357.238450]        ----
    [ 1357.238450]   lock(&(&se_tpg->session_lock)->rlock);
    [ 1357.238450]   <Interrupt>
    [ 1357.238450]     lock(&(&se_tpg->session_lock)->rlock);
    [ 1357.238450]
    [ 1357.238450]  *** DEADLOCK ***
    [ 1357.238450]
    [ 1357.238450] no locks held by ksoftirqd/0/3.
    [ 1357.238450]
    [ 1357.238450] stack backtrace:
    [ 1357.238450] Pid: 3, comm: ksoftirqd/0 Tainted: G           O 3.7.0-rc7-yikvm+ #3
    [ 1357.238450] Call Trace:
    [ 1357.238450]  [<ffffffff8149399a>] print_usage_bug+0x1f5/0x206
    [ 1357.238450]  [<ffffffff8100da59>] ? save_stack_trace+0x2c/0x49
    [ 1357.238450]  [<ffffffff81082aae>] ? print_irq_inversion_bug.part.14+0x1ae/0x1ae
    [ 1357.238450]  [<ffffffff81083336>] mark_lock+0x106/0x258
    [ 1357.238450]  [<ffffffff81084e34>] __lock_acquire+0x2e7/0xe53
    [ 1357.238450]  [<ffffffff8102903d>] ? pvclock_clocksource_read+0x48/0xb4
    [ 1357.238450]  [<ffffffff810ba6a3>] ? rcu_process_gp_end+0xc0/0xc9
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff81085ef1>] lock_acquire+0x119/0x143
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff8149c329>] _raw_spin_lock_irqsave+0x54/0x8e
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffffa01eacd4>] transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff810bb6a0>] ? rcu_process_callbacks+0x229/0x42a
    [ 1357.238450]  [<ffffffffa018ddc5>] ft_sess_rcu_free+0x17/0x24 [tcm_fc]
    [ 1357.238450]  [<ffffffffa018ddae>] ? ft_sess_free+0x1b/0x1b [tcm_fc]
    [ 1357.238450]  [<ffffffff810bb6d7>] rcu_process_callbacks+0x260/0x42a
    [ 1357.238450]  [<ffffffff8103d55d>] __do_softirq+0x13a/0x26f
    [ 1357.238450]  [<ffffffff8149b34e>] ? __schedule+0x65f/0x68e
    [ 1357.238450]  [<ffffffff8103d6bb>] run_ksoftirqd+0x29/0x62
    [ 1357.238450]  [<ffffffff8105c83c>] smpboot_thread_fn+0x1a5/0x1aa
    [ 1357.238450]  [<ffffffff8105c697>] ? smpboot_unregister_percpu_thread+0x47/0x47
    [ 1357.238450]  [<ffffffff810549f1>] kthread+0xb1/0xb9
    [ 1357.238450]  [<ffffffff8149b49d>] ? wait_for_common+0xbb/0x10a
    [ 1357.238450]  [<ffffffff81054940>] ? __init_kthread_worker+0x59/0x59
    [ 1357.238450]  [<ffffffff814a40ec>] ret_from_fork+0x7c/0xb0
    [ 1357.238450]  [<ffffffff81054940>] ? __init_kthread_worker+0x59/0x59
    [ 1417.440099]  rport-2:0-0: blocked FC remote port time out: removing rport
    
    Signed-off-by: Yi Zou <yi.zou@intel.com>
    Cc: Open-FCoE <devel@open-fcoe.org>
    Cc: Nicholas A. Bellinger <nab@risingtidesystems.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3930216ba48431031d13f7ef757363852040a058
Author: Yi Zou <yi.zou@intel.com>
Date:   Mon Dec 10 17:04:00 2012 -0800

    target/tcm_fc: fix the lockdep warning due to inconsistent lock state
    
    commit 9f4ad44b264f8bb61ffdd607148215566568430d upstream.
    
    The lockdep warning below is in theory correct but it will be in really weird
    rare situation that ends up that deadlock since the tcm fc session is hashed
    based the rport id. Nonetheless, the complaining below is about rcu callback
    that does the transport_deregister_session() is happening in softirq, where
    transport_register_session() that happens earlier is not. This triggers the
    lockdep warning below. So, just fix this to make lockdep happy by disabling
    the soft irq before calling transport_register_session() in ft_prli.
    
    BTW, this was found in FCoE VN2VN over two VMs, couple of create and destroy
    would get this triggered.
    
    v1: was enforcing register to be in softirq context which was not righ. See,
    http://www.spinics.net/lists/target-devel/msg03614.html
    
    v2: following comments from Roland&Nick (thanks), it seems we don't have to
    do transport_deregister_session() in rcu callback, so move it into ft_sess_free()
    but still do kfree() of the corresponding ft_sess struct in rcu callback to
    make sure the ft_sess is not freed till the rcu callback.
    
    ...
    [ 1328.370592] scsi2 : FCoE Driver
    [ 1328.383429] fcoe: No FDMI support.
    [ 1328.384509] host2: libfc: Link up on port (000000)
    [ 1328.934229] host2: Assigned Port ID 00a292
    [ 1357.232132] host2: rport 00a393: Remove port
    [ 1357.232568] host2: rport 00a393: Port sending LOGO from Ready state
    [ 1357.233692] host2: rport 00a393: Delete port
    [ 1357.234472] host2: rport 00a393: work event 3
    [ 1357.234969] host2: rport 00a393: callback ev 3
    [ 1357.235979] host2: rport 00a393: Received a LOGO response closed
    [ 1357.236706] host2: rport 00a393: work delete
    [ 1357.237481]
    [ 1357.237631] =================================
    [ 1357.238064] [ INFO: inconsistent lock state ]
    [ 1357.238450] 3.7.0-rc7-yikvm+ #3 Tainted: G           O
    [ 1357.238450] ---------------------------------
    [ 1357.238450] inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    [ 1357.238450] ksoftirqd/0/3 [HC0[0]:SC1[1]:HE0:SE0] takes:
    [ 1357.238450]  (&(&se_tpg->session_lock)->rlock){+.?...}, at: [<ffffffffa01eacd4>] transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450] {SOFTIRQ-ON-W} state was registered at:
    [ 1357.238450]   [<ffffffff810834f5>] mark_held_locks+0x6d/0x95
    [ 1357.238450]   [<ffffffff8108364a>] trace_hardirqs_on_caller+0x12d/0x197
    [ 1357.238450]   [<ffffffff810836c1>] trace_hardirqs_on+0xd/0xf
    [ 1357.238450]   [<ffffffff8149caba>] _raw_spin_unlock_irq+0x2d/0x45
    [ 1357.238450]   [<ffffffffa01e8d10>] __transport_register_session+0xb8/0x122 [target_core_mod]
    [ 1357.238450]   [<ffffffffa01e8dbe>] transport_register_session+0x44/0x5a [target_core_mod]
    [ 1357.238450]   [<ffffffffa018e32c>] ft_prli+0x1e3/0x275 [tcm_fc]
    [ 1357.238450]   [<ffffffffa0160e8d>] fc_rport_recv_req+0x95e/0xdc5 [libfc]
    [ 1357.238450]   [<ffffffffa015be88>] fc_lport_recv_els_req+0xc4/0xd5 [libfc]
    [ 1357.238450]   [<ffffffffa015c778>] fc_lport_recv_req+0x12f/0x18f [libfc]
    [ 1357.238450]   [<ffffffffa015a6d7>] fc_exch_recv+0x8ba/0x981 [libfc]
    [ 1357.238450]   [<ffffffffa0176d7a>] fcoe_percpu_receive_thread+0x47a/0x4e2 [fcoe]
    [ 1357.238450]   [<ffffffff810549f1>] kthread+0xb1/0xb9
    [ 1357.238450]   [<ffffffff814a40ec>] ret_from_fork+0x7c/0xb0
    [ 1357.238450] irq event stamp: 275411
    [ 1357.238450] hardirqs last  enabled at (275410): [<ffffffff810bb6a0>] rcu_process_callbacks+0x229/0x42a
    [ 1357.238450] hardirqs last disabled at (275411): [<ffffffff8149c2f7>] _raw_spin_lock_irqsave+0x22/0x8e
    [ 1357.238450] softirqs last  enabled at (275394): [<ffffffff8103d669>] __do_softirq+0x246/0x26f
    [ 1357.238450] softirqs last disabled at (275399): [<ffffffff8103d6bb>] run_ksoftirqd+0x29/0x62
    [ 1357.238450]
    [ 1357.238450] other info that might help us debug this:
    [ 1357.238450]  Possible unsafe locking scenario:
    [ 1357.238450]
    [ 1357.238450]        CPU0
    [ 1357.238450]        ----
    [ 1357.238450]   lock(&(&se_tpg->session_lock)->rlock);
    [ 1357.238450]   <Interrupt>
    [ 1357.238450]     lock(&(&se_tpg->session_lock)->rlock);
    [ 1357.238450]
    [ 1357.238450]  *** DEADLOCK ***
    [ 1357.238450]
    [ 1357.238450] no locks held by ksoftirqd/0/3.
    [ 1357.238450]
    [ 1357.238450] stack backtrace:
    [ 1357.238450] Pid: 3, comm: ksoftirqd/0 Tainted: G           O 3.7.0-rc7-yikvm+ #3
    [ 1357.238450] Call Trace:
    [ 1357.238450]  [<ffffffff8149399a>] print_usage_bug+0x1f5/0x206
    [ 1357.238450]  [<ffffffff8100da59>] ? save_stack_trace+0x2c/0x49
    [ 1357.238450]  [<ffffffff81082aae>] ? print_irq_inversion_bug.part.14+0x1ae/0x1ae
    [ 1357.238450]  [<ffffffff81083336>] mark_lock+0x106/0x258
    [ 1357.238450]  [<ffffffff81084e34>] __lock_acquire+0x2e7/0xe53
    [ 1357.238450]  [<ffffffff8102903d>] ? pvclock_clocksource_read+0x48/0xb4
    [ 1357.238450]  [<ffffffff810ba6a3>] ? rcu_process_gp_end+0xc0/0xc9
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff81085ef1>] lock_acquire+0x119/0x143
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff8149c329>] _raw_spin_lock_irqsave+0x54/0x8e
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffffa01eacd4>] transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff810bb6a0>] ? rcu_process_callbacks+0x229/0x42a
    [ 1357.238450]  [<ffffffffa018ddc5>] ft_sess_rcu_free+0x17/0x24 [tcm_fc]
    [ 1357.238450]  [<ffffffffa018ddae>] ? ft_sess_free+0x1b/0x1b [tcm_fc]
    [ 1357.238450]  [<ffffffff810bb6d7>] rcu_process_callbacks+0x260/0x42a
    [ 1357.238450]  [<ffffffff8103d55d>] __do_softirq+0x13a/0x26f
    [ 1357.238450]  [<ffffffff8149b34e>] ? __schedule+0x65f/0x68e
    [ 1357.238450]  [<ffffffff8103d6bb>] run_ksoftirqd+0x29/0x62
    [ 1357.238450]  [<ffffffff8105c83c>] smpboot_thread_fn+0x1a5/0x1aa
    [ 1357.238450]  [<ffffffff8105c697>] ? smpboot_unregister_percpu_thread+0x47/0x47
    [ 1357.238450]  [<ffffffff810549f1>] kthread+0xb1/0xb9
    [ 1357.238450]  [<ffffffff8149b49d>] ? wait_for_common+0xbb/0x10a
    [ 1357.238450]  [<ffffffff81054940>] ? __init_kthread_worker+0x59/0x59
    [ 1357.238450]  [<ffffffff814a40ec>] ret_from_fork+0x7c/0xb0
    [ 1357.238450]  [<ffffffff81054940>] ? __init_kthread_worker+0x59/0x59
    [ 1417.440099]  rport-2:0-0: blocked FC remote port time out: removing rport
    
    Signed-off-by: Yi Zou <yi.zou@intel.com>
    Cc: Open-FCoE <devel@open-fcoe.org>
    Cc: Nicholas A. Bellinger <nab@risingtidesystems.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52ae560ee055f41b4631db337c509040cf1d5109
Author: Yi Zou <yi.zou@intel.com>
Date:   Mon Dec 10 17:04:00 2012 -0800

    target/tcm_fc: fix the lockdep warning due to inconsistent lock state
    
    commit 9f4ad44b264f8bb61ffdd607148215566568430d upstream.
    
    The lockdep warning below is in theory correct but it will be in really weird
    rare situation that ends up that deadlock since the tcm fc session is hashed
    based the rport id. Nonetheless, the complaining below is about rcu callback
    that does the transport_deregister_session() is happening in softirq, where
    transport_register_session() that happens earlier is not. This triggers the
    lockdep warning below. So, just fix this to make lockdep happy by disabling
    the soft irq before calling transport_register_session() in ft_prli.
    
    BTW, this was found in FCoE VN2VN over two VMs, couple of create and destroy
    would get this triggered.
    
    v1: was enforcing register to be in softirq context which was not righ. See,
    http://www.spinics.net/lists/target-devel/msg03614.html
    
    v2: following comments from Roland&Nick (thanks), it seems we don't have to
    do transport_deregister_session() in rcu callback, so move it into ft_sess_free()
    but still do kfree() of the corresponding ft_sess struct in rcu callback to
    make sure the ft_sess is not freed till the rcu callback.
    
    ...
    [ 1328.370592] scsi2 : FCoE Driver
    [ 1328.383429] fcoe: No FDMI support.
    [ 1328.384509] host2: libfc: Link up on port (000000)
    [ 1328.934229] host2: Assigned Port ID 00a292
    [ 1357.232132] host2: rport 00a393: Remove port
    [ 1357.232568] host2: rport 00a393: Port sending LOGO from Ready state
    [ 1357.233692] host2: rport 00a393: Delete port
    [ 1357.234472] host2: rport 00a393: work event 3
    [ 1357.234969] host2: rport 00a393: callback ev 3
    [ 1357.235979] host2: rport 00a393: Received a LOGO response closed
    [ 1357.236706] host2: rport 00a393: work delete
    [ 1357.237481]
    [ 1357.237631] =================================
    [ 1357.238064] [ INFO: inconsistent lock state ]
    [ 1357.238450] 3.7.0-rc7-yikvm+ #3 Tainted: G           O
    [ 1357.238450] ---------------------------------
    [ 1357.238450] inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    [ 1357.238450] ksoftirqd/0/3 [HC0[0]:SC1[1]:HE0:SE0] takes:
    [ 1357.238450]  (&(&se_tpg->session_lock)->rlock){+.?...}, at: [<ffffffffa01eacd4>] transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450] {SOFTIRQ-ON-W} state was registered at:
    [ 1357.238450]   [<ffffffff810834f5>] mark_held_locks+0x6d/0x95
    [ 1357.238450]   [<ffffffff8108364a>] trace_hardirqs_on_caller+0x12d/0x197
    [ 1357.238450]   [<ffffffff810836c1>] trace_hardirqs_on+0xd/0xf
    [ 1357.238450]   [<ffffffff8149caba>] _raw_spin_unlock_irq+0x2d/0x45
    [ 1357.238450]   [<ffffffffa01e8d10>] __transport_register_session+0xb8/0x122 [target_core_mod]
    [ 1357.238450]   [<ffffffffa01e8dbe>] transport_register_session+0x44/0x5a [target_core_mod]
    [ 1357.238450]   [<ffffffffa018e32c>] ft_prli+0x1e3/0x275 [tcm_fc]
    [ 1357.238450]   [<ffffffffa0160e8d>] fc_rport_recv_req+0x95e/0xdc5 [libfc]
    [ 1357.238450]   [<ffffffffa015be88>] fc_lport_recv_els_req+0xc4/0xd5 [libfc]
    [ 1357.238450]   [<ffffffffa015c778>] fc_lport_recv_req+0x12f/0x18f [libfc]
    [ 1357.238450]   [<ffffffffa015a6d7>] fc_exch_recv+0x8ba/0x981 [libfc]
    [ 1357.238450]   [<ffffffffa0176d7a>] fcoe_percpu_receive_thread+0x47a/0x4e2 [fcoe]
    [ 1357.238450]   [<ffffffff810549f1>] kthread+0xb1/0xb9
    [ 1357.238450]   [<ffffffff814a40ec>] ret_from_fork+0x7c/0xb0
    [ 1357.238450] irq event stamp: 275411
    [ 1357.238450] hardirqs last  enabled at (275410): [<ffffffff810bb6a0>] rcu_process_callbacks+0x229/0x42a
    [ 1357.238450] hardirqs last disabled at (275411): [<ffffffff8149c2f7>] _raw_spin_lock_irqsave+0x22/0x8e
    [ 1357.238450] softirqs last  enabled at (275394): [<ffffffff8103d669>] __do_softirq+0x246/0x26f
    [ 1357.238450] softirqs last disabled at (275399): [<ffffffff8103d6bb>] run_ksoftirqd+0x29/0x62
    [ 1357.238450]
    [ 1357.238450] other info that might help us debug this:
    [ 1357.238450]  Possible unsafe locking scenario:
    [ 1357.238450]
    [ 1357.238450]        CPU0
    [ 1357.238450]        ----
    [ 1357.238450]   lock(&(&se_tpg->session_lock)->rlock);
    [ 1357.238450]   <Interrupt>
    [ 1357.238450]     lock(&(&se_tpg->session_lock)->rlock);
    [ 1357.238450]
    [ 1357.238450]  *** DEADLOCK ***
    [ 1357.238450]
    [ 1357.238450] no locks held by ksoftirqd/0/3.
    [ 1357.238450]
    [ 1357.238450] stack backtrace:
    [ 1357.238450] Pid: 3, comm: ksoftirqd/0 Tainted: G           O 3.7.0-rc7-yikvm+ #3
    [ 1357.238450] Call Trace:
    [ 1357.238450]  [<ffffffff8149399a>] print_usage_bug+0x1f5/0x206
    [ 1357.238450]  [<ffffffff8100da59>] ? save_stack_trace+0x2c/0x49
    [ 1357.238450]  [<ffffffff81082aae>] ? print_irq_inversion_bug.part.14+0x1ae/0x1ae
    [ 1357.238450]  [<ffffffff81083336>] mark_lock+0x106/0x258
    [ 1357.238450]  [<ffffffff81084e34>] __lock_acquire+0x2e7/0xe53
    [ 1357.238450]  [<ffffffff8102903d>] ? pvclock_clocksource_read+0x48/0xb4
    [ 1357.238450]  [<ffffffff810ba6a3>] ? rcu_process_gp_end+0xc0/0xc9
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff81085ef1>] lock_acquire+0x119/0x143
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff8149c329>] _raw_spin_lock_irqsave+0x54/0x8e
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffffa01eacd4>] transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff810bb6a0>] ? rcu_process_callbacks+0x229/0x42a
    [ 1357.238450]  [<ffffffffa018ddc5>] ft_sess_rcu_free+0x17/0x24 [tcm_fc]
    [ 1357.238450]  [<ffffffffa018ddae>] ? ft_sess_free+0x1b/0x1b [tcm_fc]
    [ 1357.238450]  [<ffffffff810bb6d7>] rcu_process_callbacks+0x260/0x42a
    [ 1357.238450]  [<ffffffff8103d55d>] __do_softirq+0x13a/0x26f
    [ 1357.238450]  [<ffffffff8149b34e>] ? __schedule+0x65f/0x68e
    [ 1357.238450]  [<ffffffff8103d6bb>] run_ksoftirqd+0x29/0x62
    [ 1357.238450]  [<ffffffff8105c83c>] smpboot_thread_fn+0x1a5/0x1aa
    [ 1357.238450]  [<ffffffff8105c697>] ? smpboot_unregister_percpu_thread+0x47/0x47
    [ 1357.238450]  [<ffffffff810549f1>] kthread+0xb1/0xb9
    [ 1357.238450]  [<ffffffff8149b49d>] ? wait_for_common+0xbb/0x10a
    [ 1357.238450]  [<ffffffff81054940>] ? __init_kthread_worker+0x59/0x59
    [ 1357.238450]  [<ffffffff814a40ec>] ret_from_fork+0x7c/0xb0
    [ 1357.238450]  [<ffffffff81054940>] ? __init_kthread_worker+0x59/0x59
    [ 1417.440099]  rport-2:0-0: blocked FC remote port time out: removing rport
    
    Signed-off-by: Yi Zou <yi.zou@intel.com>
    Cc: Open-FCoE <devel@open-fcoe.org>
    Cc: Nicholas A. Bellinger <nab@risingtidesystems.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1b724f6659a7e9e32f8fcf6409d053e1b7bccad
Author: Stephen Warren <swarren@wwwdotorg.org>
Date:   Thu Jan 3 20:23:13 2013 -0700

    ARM: bcm2835: make use of CLKSRC_OF
    
    Using CLKSRC_OF enables deletion of the SoC-specific header
    bcm2835_timer.h, replacing the custom function bcm2835_timer_init() with
    the standardized automatic clocksource_of_init().
    
    Signed-off-by: Stephen Warren <swarren@wwwdotorg.org>

commit 175dbc1eeadbdcf5f04d3a61fdc0ede4335c45c8
Merge: 8d84981e3958 ff7ec345f0ec
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Jan 14 14:13:40 2013 -0800

    Merge tag 'vt8500/timer' of git://server.prisktech.co.nz/git/linuxwmt into next/cleanup
    
    From Tony Prisk:
    Move arch-vt8500/timer.c to drivers/clocksource/vt8500-timer.c
    
    * tag 'vt8500/timer' of git://server.prisktech.co.nz/git/linuxwmt:
      timer: vt8500: Move timer code to drivers/clocksource
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 8d84981e395850aab31c3f2ca7e2738e03f671d7
Merge: 00c82d644056 77cc982f6a3b
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Jan 14 10:20:02 2013 -0800

    Merge branch 'clocksource/cleanup' into next/cleanup
    
    Clockevent cleanup series from Shawn Guo.
    
    Resolved move/change conflict in mach-pxa/time.c due to the sys_timer
    cleanup.
    
    * clocksource/cleanup:
      clocksource: use clockevents_config_and_register() where possible
      ARM: use clockevents_config_and_register() where possible
      clockevents: export clockevents_config_and_register for module use
      + sync to Linux 3.8-rc3
    
    Signed-off-by: Olof Johansson <olof@lixom.net>
    
    Conflicts:
            arch/arm/mach-pxa/time.c

commit 77cc982f6a3b33a5aa058ad3b20cda8866db2948
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Sat Jan 12 11:50:06 2013 +0000

    clocksource: use clockevents_config_and_register() where possible
    
    The clockevent core is able to figure out the best mult and shift,
    calculate min_delta_ns and max_delta_ns, with the necessary info passed
    into clockevents_config_and_register().  Use this combined configure
    and register function where possible to make the codes less error prone
    and gain some positive diff stat.
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Cc: Andres Salomon <dilinger@queued.net>
    Cc: Nicolas Ferre <nicolas.ferre@atmel.com>
    Acked-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit ff7ec345f0ece9ddbb28538b70ba0c7f0acc17dc
Author: Tony Prisk <linux@prisktech.co.nz>
Date:   Mon Jan 14 17:58:21 2013 +1300

    timer: vt8500: Move timer code to drivers/clocksource
    
    This patch moves arch-vt8500/timer.c into drivers/clocksource and
    updates the necessary Kconfig/Makefile options.
    
    Signed-off-by: Tony Prisk <linux@prisktech.co.nz>

commit 96e61b8e34ea4982ce57319c19ab73e9e5d74165
Merge: d1c3ed669a2d ec6691239373
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Jan 8 15:08:49 2013 -0800

    Merge tag 'ux500-cpufreq-for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-stericsson into next/drivers
    
    From Linus Walleij:
    These are cpufreq updates for the ux500
    - Updates to the ux500 cpufreq driver
    - Support for delay timers in the MTU clksrc
    - Consequential updates to the cpufreq driver
    
    * tag 'ux500-cpufreq-for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-stericsson:
      cpufreq: db8500: set CPUFREQ_CONST_LOOPS
      clocksource: nomadik-mtu: support timer-based delay
      cpufreq: dbx500: Update file header
      cpufreq: dbx500: Minor code cleanup
      cpufreq: dbx500: Move clk_get to probe
      mfd: db8500: Update cpufreq device name
      cpufreq: Give driver used for dbx500 family a more generic name
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 981302783e891482d767ce90b04ed37159d2ebf8
Merge: d1c3ed669a2d ae278a935f08
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Jan 8 05:53:33 2013 -0800

    Merge tag 'swarren-for-3.9-arm-timer-rework' of git://git.kernel.org/pub/scm/linux/kernel/git/swarren/linux-tegra into next/cleanup
    
    From Stephen Warren:
    ARM/...: timer and clock events cleanup, and remove struct sys_timer
    
    This branch contains a number of cleanups and unifications to various
    timer- clock-events- and ARM timer code. The main points are:
    
    1) Convert arch_gettimeoffset to a pointer, so that architectures with
       multiple timer implementations can simply set this standard pointer
       rather than maintaining their own arch-specific pointers for the
       same purpose. Various architectures are converted to using this new
       feature.
    
    2) Conversion of ARM timer implementations to use clock_event_devices's
       suspend/resume operations, rather than the ARM-specific sys_timer
       versions. Thus, the ARM code begins to use more common infra-structure
       rather than arch-specific code.
    
    3) Removal of ARM's struct sys_timer completely, now that everything uses
       common code.
    
    4) Introduction of drivers/clocksource/clksrc-of.c, which allows ARM clock
       source implementations to be moved into drivers/clocksource, with the
       need to add SoC-specific header files for each timer initialization
       function; instead, all enabled implementations are registered into a
       table which a single core function iterates over, and calls the
       relevant initialization functions based on device tree. At least the
       Tegra and BCM2835 clocksource implementations will use this feature in
       the 3.9 kernel cycle.
    
    * tag 'swarren-for-3.9-arm-timer-rework' of git://git.kernel.org/pub/scm/linux/kernel/git/swarren/linux-tegra:
      clocksource: add common of_clksrc_init() function
      ARM: delete struct sys_timer
      ARM: remove struct sys_timer suspend and resume fields
      ARM: samsung: register syscore_ops for timer resume directly
      ARM: ux500: convert timer suspend/resume to clock_event_device
      ARM: sa1100: convert timer suspend/resume to clock_event_device
      ARM: pxa: convert timer suspend/resume to clock_event_device
      ARM: at91: convert timer suspend/resume to clock_event_device
      ARM: set arch_gettimeoffset directly
      m68k: set arch_gettimeoffset directly
      time: convert arch_gettimeoffset to a pointer
      cris: move usec/nsec conversion to do_slow_gettimeoffset
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 6f179b724b1488ead0acc1a04f2adade99ca0736
Author: Fabio Baltieri <fabio.baltieri@linaro.org>
Date:   Tue Dec 4 11:10:44 2012 +0100

    clocksource: nomadik-mtu: support timer-based delay
    
    This patch adds support to use Nomadik MTU for timer-based delay.
    
    Acked-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Fabio Baltieri <fabio.baltieri@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 49569646b2413ee1a4fb7c4537fca058ac22292e
Merge: 5f738967e895 6ae141718e3f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 3 16:17:50 2013 -0800

    Merge tag 'driver-core-3.8-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core
    
    Pull driver core __dev* removal patches - take 3 - from Greg Kroah-Hartman:
     "Here are the remaining __dev* removal patches against the 3.8-rc2
      tree.  All of these patches were previously sent to the subsystem
      maintainers, most of them were picked up and pushed to you, but there
      were a number that fell through the cracks, and new drivers were added
      during the merge window, so this series cleans up the rest of the
      instances of these markings.
    
      Third time's the charm...
    
      Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>"
    
    Fixed up trivial conflict with the pinctrl pull in pinctrl-sirf.c.
    
    * tag 'driver-core-3.8-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core: (54 commits)
      misc: remove __dev* attributes.
      include: remove __dev* attributes.
      Documentation: remove __dev* attributes.
      Drivers: misc: remove __dev* attributes.
      Drivers: block: remove __dev* attributes.
      Drivers: bcma: remove __dev* attributes.
      Drivers: char: remove __dev* attributes.
      Drivers: clocksource: remove __dev* attributes.
      Drivers: ssb: remove __dev* attributes.
      Drivers: dma: remove __dev* attributes.
      Drivers: gpu: remove __dev* attributes.
      Drivers: infinband: remove __dev* attributes.
      Drivers: memory: remove __dev* attributes.
      Drivers: mmc: remove __dev* attributes.
      Drivers: iommu: remove __dev* attributes.
      Drivers: power: remove __dev* attributes.
      Drivers: message: remove __dev* attributes.
      Drivers: macintosh: remove __dev* attributes.
      Drivers: mfd: remove __dev* attributes.
      pstore: remove __dev* attributes.
      ...

commit 1850514b3ebde0f5eeedbe918a7d0d344b752653
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Dec 21 15:11:38 2012 -0800

    Drivers: clocksource: remove __dev* attributes.
    
    CONFIG_HOTPLUG is going away as an option.  As a result, the __dev*
    markings need to be removed.
    
    This change removes the use of __devinit, __devexit_p, __devinitdata,
    __devinitconst, and __devexit from these drivers.
    
    Based on patches originally written by Bill Pemberton, but redone by me
    in order to handle some of the coding style issues better, by hand.
    
    Cc: Bill Pemberton <wfp5p@virginia.edu>
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14f1aeda0684a4c0286065bd1a3a05906825ed32
Author: Yi Zou <yi.zou@intel.com>
Date:   Mon Dec 10 17:04:00 2012 -0800

    target/tcm_fc: fix the lockdep warning due to inconsistent lock state
    
    commit 9f4ad44b264f8bb61ffdd607148215566568430d upstream.
    
    The lockdep warning below is in theory correct but it will be in really weird
    rare situation that ends up that deadlock since the tcm fc session is hashed
    based the rport id. Nonetheless, the complaining below is about rcu callback
    that does the transport_deregister_session() is happening in softirq, where
    transport_register_session() that happens earlier is not. This triggers the
    lockdep warning below. So, just fix this to make lockdep happy by disabling
    the soft irq before calling transport_register_session() in ft_prli.
    
    BTW, this was found in FCoE VN2VN over two VMs, couple of create and destroy
    would get this triggered.
    
    v1: was enforcing register to be in softirq context which was not righ. See,
    http://www.spinics.net/lists/target-devel/msg03614.html
    
    v2: following comments from Roland&Nick (thanks), it seems we don't have to
    do transport_deregister_session() in rcu callback, so move it into ft_sess_free()
    but still do kfree() of the corresponding ft_sess struct in rcu callback to
    make sure the ft_sess is not freed till the rcu callback.
    
    ...
    [ 1328.370592] scsi2 : FCoE Driver
    [ 1328.383429] fcoe: No FDMI support.
    [ 1328.384509] host2: libfc: Link up on port (000000)
    [ 1328.934229] host2: Assigned Port ID 00a292
    [ 1357.232132] host2: rport 00a393: Remove port
    [ 1357.232568] host2: rport 00a393: Port sending LOGO from Ready state
    [ 1357.233692] host2: rport 00a393: Delete port
    [ 1357.234472] host2: rport 00a393: work event 3
    [ 1357.234969] host2: rport 00a393: callback ev 3
    [ 1357.235979] host2: rport 00a393: Received a LOGO response closed
    [ 1357.236706] host2: rport 00a393: work delete
    [ 1357.237481]
    [ 1357.237631] =================================
    [ 1357.238064] [ INFO: inconsistent lock state ]
    [ 1357.238450] 3.7.0-rc7-yikvm+ #3 Tainted: G           O
    [ 1357.238450] ---------------------------------
    [ 1357.238450] inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    [ 1357.238450] ksoftirqd/0/3 [HC0[0]:SC1[1]:HE0:SE0] takes:
    [ 1357.238450]  (&(&se_tpg->session_lock)->rlock){+.?...}, at: [<ffffffffa01eacd4>] transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450] {SOFTIRQ-ON-W} state was registered at:
    [ 1357.238450]   [<ffffffff810834f5>] mark_held_locks+0x6d/0x95
    [ 1357.238450]   [<ffffffff8108364a>] trace_hardirqs_on_caller+0x12d/0x197
    [ 1357.238450]   [<ffffffff810836c1>] trace_hardirqs_on+0xd/0xf
    [ 1357.238450]   [<ffffffff8149caba>] _raw_spin_unlock_irq+0x2d/0x45
    [ 1357.238450]   [<ffffffffa01e8d10>] __transport_register_session+0xb8/0x122 [target_core_mod]
    [ 1357.238450]   [<ffffffffa01e8dbe>] transport_register_session+0x44/0x5a [target_core_mod]
    [ 1357.238450]   [<ffffffffa018e32c>] ft_prli+0x1e3/0x275 [tcm_fc]
    [ 1357.238450]   [<ffffffffa0160e8d>] fc_rport_recv_req+0x95e/0xdc5 [libfc]
    [ 1357.238450]   [<ffffffffa015be88>] fc_lport_recv_els_req+0xc4/0xd5 [libfc]
    [ 1357.238450]   [<ffffffffa015c778>] fc_lport_recv_req+0x12f/0x18f [libfc]
    [ 1357.238450]   [<ffffffffa015a6d7>] fc_exch_recv+0x8ba/0x981 [libfc]
    [ 1357.238450]   [<ffffffffa0176d7a>] fcoe_percpu_receive_thread+0x47a/0x4e2 [fcoe]
    [ 1357.238450]   [<ffffffff810549f1>] kthread+0xb1/0xb9
    [ 1357.238450]   [<ffffffff814a40ec>] ret_from_fork+0x7c/0xb0
    [ 1357.238450] irq event stamp: 275411
    [ 1357.238450] hardirqs last  enabled at (275410): [<ffffffff810bb6a0>] rcu_process_callbacks+0x229/0x42a
    [ 1357.238450] hardirqs last disabled at (275411): [<ffffffff8149c2f7>] _raw_spin_lock_irqsave+0x22/0x8e
    [ 1357.238450] softirqs last  enabled at (275394): [<ffffffff8103d669>] __do_softirq+0x246/0x26f
    [ 1357.238450] softirqs last disabled at (275399): [<ffffffff8103d6bb>] run_ksoftirqd+0x29/0x62
    [ 1357.238450]
    [ 1357.238450] other info that might help us debug this:
    [ 1357.238450]  Possible unsafe locking scenario:
    [ 1357.238450]
    [ 1357.238450]        CPU0
    [ 1357.238450]        ----
    [ 1357.238450]   lock(&(&se_tpg->session_lock)->rlock);
    [ 1357.238450]   <Interrupt>
    [ 1357.238450]     lock(&(&se_tpg->session_lock)->rlock);
    [ 1357.238450]
    [ 1357.238450]  *** DEADLOCK ***
    [ 1357.238450]
    [ 1357.238450] no locks held by ksoftirqd/0/3.
    [ 1357.238450]
    [ 1357.238450] stack backtrace:
    [ 1357.238450] Pid: 3, comm: ksoftirqd/0 Tainted: G           O 3.7.0-rc7-yikvm+ #3
    [ 1357.238450] Call Trace:
    [ 1357.238450]  [<ffffffff8149399a>] print_usage_bug+0x1f5/0x206
    [ 1357.238450]  [<ffffffff8100da59>] ? save_stack_trace+0x2c/0x49
    [ 1357.238450]  [<ffffffff81082aae>] ? print_irq_inversion_bug.part.14+0x1ae/0x1ae
    [ 1357.238450]  [<ffffffff81083336>] mark_lock+0x106/0x258
    [ 1357.238450]  [<ffffffff81084e34>] __lock_acquire+0x2e7/0xe53
    [ 1357.238450]  [<ffffffff8102903d>] ? pvclock_clocksource_read+0x48/0xb4
    [ 1357.238450]  [<ffffffff810ba6a3>] ? rcu_process_gp_end+0xc0/0xc9
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff81085ef1>] lock_acquire+0x119/0x143
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff8149c329>] _raw_spin_lock_irqsave+0x54/0x8e
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffffa01eacd4>] transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff810bb6a0>] ? rcu_process_callbacks+0x229/0x42a
    [ 1357.238450]  [<ffffffffa018ddc5>] ft_sess_rcu_free+0x17/0x24 [tcm_fc]
    [ 1357.238450]  [<ffffffffa018ddae>] ? ft_sess_free+0x1b/0x1b [tcm_fc]
    [ 1357.238450]  [<ffffffff810bb6d7>] rcu_process_callbacks+0x260/0x42a
    [ 1357.238450]  [<ffffffff8103d55d>] __do_softirq+0x13a/0x26f
    [ 1357.238450]  [<ffffffff8149b34e>] ? __schedule+0x65f/0x68e
    [ 1357.238450]  [<ffffffff8103d6bb>] run_ksoftirqd+0x29/0x62
    [ 1357.238450]  [<ffffffff8105c83c>] smpboot_thread_fn+0x1a5/0x1aa
    [ 1357.238450]  [<ffffffff8105c697>] ? smpboot_unregister_percpu_thread+0x47/0x47
    [ 1357.238450]  [<ffffffff810549f1>] kthread+0xb1/0xb9
    [ 1357.238450]  [<ffffffff8149b49d>] ? wait_for_common+0xbb/0x10a
    [ 1357.238450]  [<ffffffff81054940>] ? __init_kthread_worker+0x59/0x59
    [ 1357.238450]  [<ffffffff814a40ec>] ret_from_fork+0x7c/0xb0
    [ 1357.238450]  [<ffffffff81054940>] ? __init_kthread_worker+0x59/0x59
    [ 1417.440099]  rport-2:0-0: blocked FC remote port time out: removing rport
    
    Signed-off-by: Yi Zou <yi.zou@intel.com>
    Cc: Open-FCoE <devel@open-fcoe.org>
    Cc: Nicholas A. Bellinger <nab@risingtidesystems.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ae278a935f086775e8ae31a8ec9f7224ea25ea3c
Author: Stephen Warren <swarren@nvidia.com>
Date:   Mon Nov 19 16:41:20 2012 -0700

    clocksource: add common of_clksrc_init() function
    
    It is desirable to move all clocksource drivers to drivers/clocksource,
    yet each requires its own initialization function. We'd rather not
    pollute <linux/> with a header for each function. Instead, create a
    single of_clksrc_init() function which will determine which clocksource
    driver to initialize based on device tree.
    
    Based on a similar patch for drivers/irqchip by Thomas Petazzoni.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

commit 6ccc432f705f1cbf150355b6936b335c87a9accd
Author: Paul Walmsley <paul@pwsan.com>
Date:   Mon Dec 10 11:48:44 2012 -0700

    ARM: OMAP: 32k counter: resolve sparse warnings
    
    Commit 1fe97c8f6a1de67a5f56e029a818903d5bed8017 ("ARM: OMAP: Make OMAP
    clocksource source selection using kernel param") results in a new warning
    from sparse:
    
    arch/arm/plat-omap/counter_32k.c:86:12: warning: symbol 'omap_init_clocksource_32k' was not declared. Should it be static?
    
    This second version fixes this warning by including <plat/counter-32k.h>,
    at Tony's request.
    
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Cc: Vaibhav Hiremath <hvaibhav@ti.com>
    Cc: Felipe Balbi <balbi@ti.com>
    Cc: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Cc: Kevin Hilman <khilman@ti.com>
    Cc: Tony Lindgren <tony@atomide.com>

commit 6bb27d7349db51b50c40534710fe164ca0d58902
Author: Stephen Warren <swarren@nvidia.com>
Date:   Thu Nov 8 12:40:59 2012 -0700

    ARM: delete struct sys_timer
    
    Now that the only field in struct sys_timer is .init, delete the struct,
    and replace the machine descriptor .timer field with the initialization
    function itself.
    
    This will enable moving timer drivers into drivers/clocksource without
    having to place a public prototype of each struct sys_timer object into
    include/linux; the intent is to create a single of_clocksource_init()
    function that determines which timer driver to initialize by scanning
    the device dtree, much like the proposed irqchip_init() at:
    http://www.spinics.net/lists/arm-kernel/msg203686.html
    
    Includes mach-omap2 fixes from Igor Grinberg.
    
    Tested-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

commit 7b1f62076bba10786d2118006ae68ac120cd6c56
Author: Stephen Warren <swarren@nvidia.com>
Date:   Wed Nov 7 17:58:54 2012 -0700

    time: convert arch_gettimeoffset to a pointer
    
    Currently, whenever CONFIG_ARCH_USES_GETTIMEOFFSET is enabled, each
    arch core provides a single implementation of arch_gettimeoffset(). In
    many cases, different sub-architectures, different machines, or
    different timer providers exist, and so the arch ends up implementing
    arch_gettimeoffset() as a call-through-pointer anyway. Examples are
    ARM, Cris, M68K, and it's arguable that the remaining architectures,
    M32R and Blackfin, should be doing this anyway.
    
    Modify arch_gettimeoffset so that it itself is a function pointer, which
    the arch initializes. This will allow later changes to move the
    initialization of this function into individual machine support or timer
    drivers. This is particularly useful for code in drivers/clocksource
    which should rely on an arch-independant mechanism to register their
    implementation of arch_gettimeoffset().
    
    This patch also converts the Cris architecture to set arch_gettimeoffset
    directly to the final implementation in time_init(), because Cris already
    had separate time_init() functions per sub-architecture. M68K and ARM
    are converted to set arch_gettimeoffset to the final implementation in
    later patches, because they already have function pointers in place for
    this purpose.
    
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Mike Frysinger <vapier@gentoo.org>
    Cc: Mikael Starvik <starvik@axis.com>
    Cc: Hirokazu Takata <takata@linux-m32r.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Acked-by: Jesper Nilsson <jesper.nilsson@axis.com>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

commit 09378d7c21a806d5ddb75ebcae242d98cea30e44
Author: Wanlong Gao <wanlong.gao@gmail.com>
Date:   Wed Jun 1 22:37:43 2011 +0800

    xtensa:fix the incompatible pointer type warning in time.c
    
    Fix the definition of the function ccount_read to be compatible
    to the member read of the structure clocksource.
    
    Signed-off-by: Wanlong Gao <wanlong.gao@gmail.com>
    Signed-off-by: Chris Zankel <chris@zankel.net>

commit e0c3e27ce19fcc81156ba49c91d83a676144a103
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Tue Nov 27 15:24:12 2012 -0600

    ARM: AM335x: Fix warning in timer.c
    
    When compiling the kernel with configuration options ...
    
     # CONFIG_ARCH_OMAP2 is not set
     # CONFIG_ARCH_OMAP3 is not set
     # CONFIG_ARCH_OMAP4 is not set
     # CONFIG_SOC_OMAP5 is not set
     CONFIG_SOC_AM33XX=y
    
     ... the following build warning is seen.
    
      CC      arch/arm/mach-omap2/timer.o
      arch/arm/mach-omap2/timer.c:395:19: warning: ‘omap2_sync32k_clocksource_init’
            defined but not used [-Wunused-function]
    
    This issue was introduced by commit 6f80b3b (ARM: OMAP2+: timer: remove
    CONFIG_OMAP_32K_TIMER) where the omap2_sync32k_clocksource_init() is no
    longer referenced by the timer initialisation function for the AM335x
    device as it has no 32k-sync timer.
    
    Fix this by adding the "__maybe_unused" compiler directive to the
    omap2_sync32k_clocksource_init() function to indicate that this function
    may be used for certain configurations.
    
    Cc: Igor Grinberg <grinberg@compulab.co.il>
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>

commit b8edf848e9119bab9d999b9ca80d8520641810f2
Merge: db5b0ae00712 3f54db784a6a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 13 10:57:16 2012 -0800

    Merge tag 'multiplatform' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC multiplatform conversion patches from Olof Johansson:
     "Here are more patches in the progression towards multiplatform, sparse
      irq conversions in particular.
    
      Tegra has a handful of cleanups and general groundwork, but is not
      quite there yet on full enablement.
    
      Platforms that are enabled through this branch are VT8500 and Zynq.
      Note that i.MX was converted in one of the earlier cleanup branches as
      well (before we started a separate topic for multiplatform).  And both
      new platforms for this merge window, sunxi and bcm, were merged with
      multiplatform support enabled."
    
    Fix up conflicts mostly as per Olof.
    
    * tag 'multiplatform' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (29 commits)
      ARM: zynq: Remove all unused mach headers
      ARM: zynq: add support for ARCH_MULTIPLATFORM
      ARM: zynq: make use of debug_ll_io_init()
      ARM: zynq: remove TTC early mapping
      ARM: tegra: move debug-macro.S to include/debug
      ARM: tegra: don't include iomap.h from debug-macro.S
      ARM: tegra: decouple uncompress.h and debug-macro.S
      ARM: tegra: simplify DEBUG_LL UART selection options
      ARM: tegra: select SPARSE_IRQ
      ARM: tegra: enhance timer.c to get IO address from device tree
      ARM: tegra: enhance timer.c to get IRQ info from device tree
      ARM: timer: fix checkpatch warnings
      ARM: tegra: add TWD to device tree
      ARM: tegra: define DT bindings for and instantiate RTC
      ARM: tegra: define DT bindings for and instantiate timer
      clocksource/mtu-nomadik: use apb_pclk
      clk: ux500: Register mtu apb_pclocks
      ARM: plat-nomadik: convert platforms to SPARSE_IRQ
      mfd/db8500-prcmu: use the irq_domain_add_simple()
      mfd/ab8500-core: use irq_domain_add_simple()
      ...

commit 9f4ad44b264f8bb61ffdd607148215566568430d
Author: Yi Zou <yi.zou@intel.com>
Date:   Mon Dec 10 17:04:00 2012 -0800

    target/tcm_fc: fix the lockdep warning due to inconsistent lock state
    
    The lockdep warning below is in theory correct but it will be in really weird
    rare situation that ends up that deadlock since the tcm fc session is hashed
    based the rport id. Nonetheless, the complaining below is about rcu callback
    that does the transport_deregister_session() is happening in softirq, where
    transport_register_session() that happens earlier is not. This triggers the
    lockdep warning below. So, just fix this to make lockdep happy by disabling
    the soft irq before calling transport_register_session() in ft_prli.
    
    BTW, this was found in FCoE VN2VN over two VMs, couple of create and destroy
    would get this triggered.
    
    v1: was enforcing register to be in softirq context which was not righ. See,
    http://www.spinics.net/lists/target-devel/msg03614.html
    
    v2: following comments from Roland&Nick (thanks), it seems we don't have to
    do transport_deregister_session() in rcu callback, so move it into ft_sess_free()
    but still do kfree() of the corresponding ft_sess struct in rcu callback to
    make sure the ft_sess is not freed till the rcu callback.
    
    ...
    [ 1328.370592] scsi2 : FCoE Driver
    [ 1328.383429] fcoe: No FDMI support.
    [ 1328.384509] host2: libfc: Link up on port (000000)
    [ 1328.934229] host2: Assigned Port ID 00a292
    [ 1357.232132] host2: rport 00a393: Remove port
    [ 1357.232568] host2: rport 00a393: Port sending LOGO from Ready state
    [ 1357.233692] host2: rport 00a393: Delete port
    [ 1357.234472] host2: rport 00a393: work event 3
    [ 1357.234969] host2: rport 00a393: callback ev 3
    [ 1357.235979] host2: rport 00a393: Received a LOGO response closed
    [ 1357.236706] host2: rport 00a393: work delete
    [ 1357.237481]
    [ 1357.237631] =================================
    [ 1357.238064] [ INFO: inconsistent lock state ]
    [ 1357.238450] 3.7.0-rc7-yikvm+ #3 Tainted: G           O
    [ 1357.238450] ---------------------------------
    [ 1357.238450] inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    [ 1357.238450] ksoftirqd/0/3 [HC0[0]:SC1[1]:HE0:SE0] takes:
    [ 1357.238450]  (&(&se_tpg->session_lock)->rlock){+.?...}, at: [<ffffffffa01eacd4>] transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450] {SOFTIRQ-ON-W} state was registered at:
    [ 1357.238450]   [<ffffffff810834f5>] mark_held_locks+0x6d/0x95
    [ 1357.238450]   [<ffffffff8108364a>] trace_hardirqs_on_caller+0x12d/0x197
    [ 1357.238450]   [<ffffffff810836c1>] trace_hardirqs_on+0xd/0xf
    [ 1357.238450]   [<ffffffff8149caba>] _raw_spin_unlock_irq+0x2d/0x45
    [ 1357.238450]   [<ffffffffa01e8d10>] __transport_register_session+0xb8/0x122 [target_core_mod]
    [ 1357.238450]   [<ffffffffa01e8dbe>] transport_register_session+0x44/0x5a [target_core_mod]
    [ 1357.238450]   [<ffffffffa018e32c>] ft_prli+0x1e3/0x275 [tcm_fc]
    [ 1357.238450]   [<ffffffffa0160e8d>] fc_rport_recv_req+0x95e/0xdc5 [libfc]
    [ 1357.238450]   [<ffffffffa015be88>] fc_lport_recv_els_req+0xc4/0xd5 [libfc]
    [ 1357.238450]   [<ffffffffa015c778>] fc_lport_recv_req+0x12f/0x18f [libfc]
    [ 1357.238450]   [<ffffffffa015a6d7>] fc_exch_recv+0x8ba/0x981 [libfc]
    [ 1357.238450]   [<ffffffffa0176d7a>] fcoe_percpu_receive_thread+0x47a/0x4e2 [fcoe]
    [ 1357.238450]   [<ffffffff810549f1>] kthread+0xb1/0xb9
    [ 1357.238450]   [<ffffffff814a40ec>] ret_from_fork+0x7c/0xb0
    [ 1357.238450] irq event stamp: 275411
    [ 1357.238450] hardirqs last  enabled at (275410): [<ffffffff810bb6a0>] rcu_process_callbacks+0x229/0x42a
    [ 1357.238450] hardirqs last disabled at (275411): [<ffffffff8149c2f7>] _raw_spin_lock_irqsave+0x22/0x8e
    [ 1357.238450] softirqs last  enabled at (275394): [<ffffffff8103d669>] __do_softirq+0x246/0x26f
    [ 1357.238450] softirqs last disabled at (275399): [<ffffffff8103d6bb>] run_ksoftirqd+0x29/0x62
    [ 1357.238450]
    [ 1357.238450] other info that might help us debug this:
    [ 1357.238450]  Possible unsafe locking scenario:
    [ 1357.238450]
    [ 1357.238450]        CPU0
    [ 1357.238450]        ----
    [ 1357.238450]   lock(&(&se_tpg->session_lock)->rlock);
    [ 1357.238450]   <Interrupt>
    [ 1357.238450]     lock(&(&se_tpg->session_lock)->rlock);
    [ 1357.238450]
    [ 1357.238450]  *** DEADLOCK ***
    [ 1357.238450]
    [ 1357.238450] no locks held by ksoftirqd/0/3.
    [ 1357.238450]
    [ 1357.238450] stack backtrace:
    [ 1357.238450] Pid: 3, comm: ksoftirqd/0 Tainted: G           O 3.7.0-rc7-yikvm+ #3
    [ 1357.238450] Call Trace:
    [ 1357.238450]  [<ffffffff8149399a>] print_usage_bug+0x1f5/0x206
    [ 1357.238450]  [<ffffffff8100da59>] ? save_stack_trace+0x2c/0x49
    [ 1357.238450]  [<ffffffff81082aae>] ? print_irq_inversion_bug.part.14+0x1ae/0x1ae
    [ 1357.238450]  [<ffffffff81083336>] mark_lock+0x106/0x258
    [ 1357.238450]  [<ffffffff81084e34>] __lock_acquire+0x2e7/0xe53
    [ 1357.238450]  [<ffffffff8102903d>] ? pvclock_clocksource_read+0x48/0xb4
    [ 1357.238450]  [<ffffffff810ba6a3>] ? rcu_process_gp_end+0xc0/0xc9
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff81085ef1>] lock_acquire+0x119/0x143
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff8149c329>] _raw_spin_lock_irqsave+0x54/0x8e
    [ 1357.238450]  [<ffffffffa01eacd4>] ? transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffffa01eacd4>] transport_deregister_session+0x41/0x148 [target_core_mod]
    [ 1357.238450]  [<ffffffff810bb6a0>] ? rcu_process_callbacks+0x229/0x42a
    [ 1357.238450]  [<ffffffffa018ddc5>] ft_sess_rcu_free+0x17/0x24 [tcm_fc]
    [ 1357.238450]  [<ffffffffa018ddae>] ? ft_sess_free+0x1b/0x1b [tcm_fc]
    [ 1357.238450]  [<ffffffff810bb6d7>] rcu_process_callbacks+0x260/0x42a
    [ 1357.238450]  [<ffffffff8103d55d>] __do_softirq+0x13a/0x26f
    [ 1357.238450]  [<ffffffff8149b34e>] ? __schedule+0x65f/0x68e
    [ 1357.238450]  [<ffffffff8103d6bb>] run_ksoftirqd+0x29/0x62
    [ 1357.238450]  [<ffffffff8105c83c>] smpboot_thread_fn+0x1a5/0x1aa
    [ 1357.238450]  [<ffffffff8105c697>] ? smpboot_unregister_percpu_thread+0x47/0x47
    [ 1357.238450]  [<ffffffff810549f1>] kthread+0xb1/0xb9
    [ 1357.238450]  [<ffffffff8149b49d>] ? wait_for_common+0xbb/0x10a
    [ 1357.238450]  [<ffffffff81054940>] ? __init_kthread_worker+0x59/0x59
    [ 1357.238450]  [<ffffffff814a40ec>] ret_from_fork+0x7c/0xb0
    [ 1357.238450]  [<ffffffff81054940>] ? __init_kthread_worker+0x59/0x59
    [ 1417.440099]  rport-2:0-0: blocked FC remote port time out: removing rport
    
    Signed-off-by: Yi Zou <yi.zou@intel.com>
    Cc: Open-FCoE <devel@open-fcoe.org>
    Cc: Nicholas A. Bellinger <nab@risingtidesystems.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit d027db132b395dabfac208e52a7e510e441bb9d2
Merge: d01e4afdbb65 5faf7cbb848d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 12 12:05:15 2012 -0800

    Merge tag 'soc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC updates from Olof Johansson:
     "This contains the bulk of new SoC development for this merge window.
    
      Two new platforms have been added, the sunxi platforms (Allwinner A1x
      SoCs) by Maxime Ripard, and a generic Broadcom platform for a new
      series of ARMv7 platforms from them, where the hope is that we can
      keep the platform code generic enough to have them all share one mach
      directory.  The new Broadcom platform is contributed by Christian
      Daudt.
    
      Highbank has grown support for Calxeda's next generation of hardware,
      ECX-2000.
    
      clps711x has seen a lot of cleanup from Alexander Shiyan, and he's
      also taken on maintainership of the platform.
    
      Beyond this there has been a bunch of work from a number of people on
      converting more platforms to IRQ domains, pinctrl conversion, cleanup
      and general feature enablement across most of the active platforms."
    
    Fix up trivial conflicts as per Olof.
    
    * tag 'soc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (174 commits)
      mfd: vexpress-sysreg: Remove LEDs code
      irqchip: irq-sunxi: Add terminating entry for sunxi_irq_dt_ids
      clocksource: sunxi_timer: Add terminating entry for sunxi_timer_dt_ids
      irq: versatile: delete dangling variable
      ARM: sunxi: add missing include for mdelay()
      ARM: EXYNOS: Avoid early use of of_machine_is_compatible()
      ARM: dts: add node for PL330 MDMA1 controller for exynos4
      ARM: EXYNOS: Add support for secondary CPU bring-up on Exynos4412
      ARM: EXYNOS: add UART3 to DEBUG_LL ports
      ARM: S3C24XX: Add clkdev entry for camif-upll clock
      ARM: SAMSUNG: Add s3c24xx/s3c64xx CAMIF GPIO setup helpers
      ARM: sunxi: Add missing sun4i.dtsi file
      pinctrl: samsung: Do not initialise statics to 0
      ARM i.MX6: remove gate_mask from pllv3
      ARM i.MX6: Fix ethernet PLL clocks
      ARM i.MX6: rename PLLs according to datasheet
      ARM i.MX6: Add pwm support
      ARM i.MX51: Add pwm support
      ARM i.MX53: Add pwm support
      ARM: mx5: Replace clk_register_clkdev with clock DT lookup
      ...

commit 97ebe8f55ae99059c0ad3d3be5c0417647f5e3e0
Merge: d07e43d70eef d19766ec5221
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 12 07:49:02 2012 -0800

    Merge tag 'arm64-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/cmarinas/linux-aarch64
    
    Pull ARM64 updates from Catalin Marinas:
    
     - Generic execve, kernel_thread, fork/vfork/clone.
    
     - Preparatory patches for KVM support (initialising EL2 mode for later
       installing KVM support, hypervisor stub).
    
     - Signal handling corner case fix (alternative signal stack set up for
       a SEGV handler, which is raised in response to RLIMIT_STACK being
       reached).
    
     - Sub-nanosecond timer error fix.
    
    * tag 'arm64-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/cmarinas/linux-aarch64: (30 commits)
      arm64: Update the MAINTAINERS entry
      arm64: compat for clock_adjtime(2) is miswired
      arm64: move FP-SIMD save/restore code to a macro
      arm64: hyp: initialize vttbr_el2 to zero
      arm64: add hypervisor stub
      arm64: record boot mode when entering the kernel
      arm64: move vector entry macro to assembler.h
      arm64: add AArch32 execution modes to ptrace.h
      arm64: expand register mapping between AArch32 and AArch64
      arm64: generic timer: use virtual counter instead of physical at EL0
      arm64: vdso: defer shifting of nanosecond component of timespec
      arm64: vdso: rework __do_get_tspec register allocation and return shift
      arm64: vdso: check sequence counter even for coarse realtime operations
      arm64: vdso: fix clocksource mask when extracting bottom 56 bits
      ARM64: Remove incorrect Kconfig symbol HAVE_SPARSE_IRQ
      Documentation: Fixes a word in Documentation/arm64/memory.txt
      arm64: Make !dirty ptes read-only
      arm64: Convert empty flush_cache_{mm,page} functions to static inline
      arm64: signal: let the compiler inline compat_get_sigframe
      arm64: signal: return struct rt_sigframe from get_sigframe
      ...
    
    Conflicts:
            arch/arm64/include/asm/unistd32.h

commit b64c5fda3868cb29d5dae0909561aa7d93fb7330
Merge: f57d54bab696 9c3f9e281697
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 11 18:22:46 2012 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull core timer changes from Ingo Molnar:
     "It contains continued generic-NOHZ work by Frederic and smaller
      cleanups."
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      time: Kill xtime_lock, replacing it with jiffies_lock
      clocksource: arm_generic: use this_cpu_ptr per-cpu helper
      clocksource: arm_generic: use integer math helpers
      time/jiffies: Make clocksource_jiffies static
      clocksource: clean up parse_pmtmr()
      tick: Correct the comments for tick_sched_timer()
      tick: Conditionally build nohz specific code in tick handler
      tick: Consolidate tick handling for high and low res handlers
      tick: Consolidate timekeeping handling code

commit a5559a3336205eaa7c8302fcbe9da1e35f2e5a3a
Merge: 6e202df7bdb5 ff33657288bf
Author: Olof Johansson <olof@lixom.net>
Date:   Fri Dec 7 16:29:05 2012 -0800

    Merge tag 'sunxi-fixes-for-3.8' of git://github.com/mripard/linux into next/soc
    
    From Maxime Ripard:
    Fixes in sunXi related drivers for 3.8
    
    * tag 'sunxi-fixes-for-3.8' of git://github.com/mripard/linux:
      irqchip: irq-sunxi: Add terminating entry for sunxi_irq_dt_ids
      clocksource: sunxi_timer: Add terminating entry for sunxi_timer_dt_ids

commit 1f75ff0a3d63606c1345e316e88a903fd43ca8be
Author: Will Deacon <will.deacon@arm.com>
Date:   Thu Nov 29 22:48:31 2012 +0000

    arm64: generic timer: use virtual counter instead of physical at EL0
    
    We want to use the virtual counter at EL0, as the physical counter
    may not track the current clocksource for guests running under a
    hypervisor.
    
    This patch updates the vdso and generic timer driver to use the virtual
    counter. The kernel EL2 entry code is also updated to ensure that the
    virtual offset is initialised to zero.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

commit d91fb5c2677db90460611fce72e6a0af8f6c2a73
Author: Will Deacon <will.deacon@arm.com>
Date:   Thu Nov 29 22:19:01 2012 +0000

    arm64: vdso: rework __do_get_tspec register allocation and return shift
    
    In preparation for sub-ns precision in the vdso timespec maths, change
    the __do_get_tspec register allocation so that we return the clocksource
    shift value instead of the unused xtime tspec.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

commit 251db45336c8fb5fd0c36f71aabc6950e427110f
Author: Will Deacon <will.deacon@arm.com>
Date:   Fri Nov 30 18:34:25 2012 +0000

    arm64: vdso: fix clocksource mask when extracting bottom 56 bits
    
    The generic timer clocksource has 56 bits of precision and as such must
    be masked appropriately after we have read it. The current mask
    generated by a movn instruction is off by 4 bits, so we accidentally
    include the top 4 bits in the final value.
    
    This patch fixes the broken mask.
    
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

commit 3703af46fcc330d72b9b0165a2a6988833e9df4e
Author: Axel Lin <axel.lin@ingics.com>
Date:   Sun Dec 2 23:08:19 2012 +0800

    clocksource: sunxi_timer: Add terminating entry for sunxi_timer_dt_ids
    
    The of_device_id table is supposed to be zero-terminated.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>

commit 2edb769d246e6b549ba1c5e9b283bfd058584cbb
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Wed Nov 21 16:27:00 2012 +0000

    iio:ad7793: Add support for the ad7798 and ad7799
    
    The ad7798 and ad7799 are similar to the ad7792 and ad7793 but are missing some
    features like the temperature sensor, being able to use an external clocksource
    and a few other things. This patch adds a new 'flags' fields to the chip_info
    struct which allows to specify which features a certain chip variant supports.
    The setup code will then ignore any platform data fields which are related to
    non supported features.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

commit 5b7897db00bd66a42c626012f51cd3b1d5e6bee5
Author: Doug Anderson <dianders@chromium.org>
Date:   Tue Nov 27 11:53:14 2012 -0800

    ARM: EXYNOS: Avoid early use of of_machine_is_compatible()
    
    The recent commit "ARM: EXYNOS: add support for EXYNOS5440 SoC" broke
    support for exynos5250 because of_machine_is_compatible() was used too
    early in the boot process.  It also probably meant that the exynos5440
    failed to use the proper iotable.  Switch to use
    of_flat_dt_is_compatible() in both of these cases.
    
    The failure I was seeing in exynos5250 because of this was:
      Division by zero in kernel.
      [<80015ed4>] (unwind_backtrace+0x0/0xec) from [<8045c7a4>] (dump_stack+0x20/0x24)
      [<8045c7a4>] (dump_stack+0x20/0x24) from [<80012990>] (__div0+0x20/0x28)
      [<80012990>] (__div0+0x20/0x28) from [<8021ab04>] (Ldiv0_64+0x8/0x18)
      [<8021ab04>] (Ldiv0_64+0x8/0x18) from [<80068560>] (__clocksource_updatefreq_scale+0x54/0x134)
      [<80068560>] (__clocksource_updatefreq_scale+0x54/0x134) from [<8006865c>] (__clocksource_register_scale+0x1c/0x54)
      [<8006865c>] (__clocksource_register_scale+0x1c/0x54) from [<80612a18>] (exynos_timer_init+0x100/0x1e8)
      [<80612a18>] (exynos_timer_init+0x100/0x1e8) from [<8060d184>] (time_init+0x28/0x38)
      [<8060d184>] (time_init+0x28/0x38) from [<8060a754>] (start_kernel+0x1e0/0x3c8)
      [<8060a754>] (start_kernel+0x1e0/0x3c8) from [<40008078>] (0x40008078)
    
    Signed-off-by: Doug Anderson <dianders@chromium.org>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    [olofj: fixed two build errors, one missing include and one !CONFIG_OF failure]
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 16e8d74d2da9920f874b10a3d979fb25c01f518f
Author: Marcelo Tosatti <mtosatti@redhat.com>
Date:   Tue Nov 27 23:29:00 2012 -0200

    KVM: x86: notifier for clocksource changes
    
    Register a notifier for clocksource change event. In case
    the host switches to clock other than TSC, disable master
    clock usage.
    
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>

commit 6f80b3bb8a0ae4ae376dbdc69acf1fca8b4e2c9c
Author: Igor Grinberg <grinberg@compulab.co.il>
Date:   Tue Nov 20 09:17:15 2012 +0200

    ARM: OMAP2+: timer: remove CONFIG_OMAP_32K_TIMER
    
    CONFIG_OMAP_32K_TIMER is kind of standing on the single zImage way.
    Make OMAP2+ timer code independant from the CONFIG_OMAP_32K_TIMER
    setting.
    To remove the dependancy, several conversions/additions had to be done:
    1) Timer initialization functions are named by the platform
       name and the clock source in use.
       This also makes it possible to define and use the GPTIMER as the
       clock source instead of the 32K timer on platforms that do not have
       the 32K timer ip block or the 32K timer is not wired on the board.
       Currently, the the timer is chosen in the machine_desc structure on
       per board basis. Later, DT should be used to choose the timer.
    2) Settings under the CONFIG_OMAP_32K_TIMER option are used as defaults
       and those under !CONFIG_OMAP_32K_TIMER are removed.
       This removes the CONFIG_OMAP_32K_TIMER on OMAP2+ timer code.
    3) Since we have all the timers defined inside machine_desc structure
       and we no longer need the fallback to gp_timer clock source in case
       32k_timer clock source is unavailable (namely on AM33xx), we no
       longer need the #ifdef around omap2_sync32k_clocksource_init()
       function. Remove the #ifdef CONFIG_OMAP_32K_TIMER around the
       omap2_sync32k_clocksource_init() function.
    
    Signed-off-by: Igor Grinberg <grinberg@compulab.co.il>
    Cc: Jon Hunter <jon-hunter@ti.com>
    Cc: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Cc: Vaibhav Hiremath <hvaibhav@ti.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Reviewed-by: Jon Hunter <jon-hunter@ti.com>

commit 5ffd785402c295328d3866d9f8630152f51d332a
Merge: 8ac49e0485bb 1b106699647b
Author: Olof Johansson <olof@lixom.net>
Date:   Tue Nov 20 22:14:59 2012 -0800

    Merge tag 'tags/sunxi-support-for-3.8' of git://github.com/mripard/linux into next/soc
    
    From Maxime Ripard:
    Allwinner SoC support for 3.8
    
    * tag 'tags/sunxi-support-for-3.8' of git://github.com/mripard/linux:
      ARM: sunxi: Add entry to MAINTAINERS
      ARM: sunxi: Add device tree for the A13 and the Olinuxino board
      ARM: sunxi: Add earlyprintk support
      ARM: sunxi: Add basic support for Allwinner A1x SoCs
      irqchip: sunxi: Add irq controller driver
      clocksource: sunxi: Add Allwinner A1X Timer Driver
      clk: sunxi: Add dummy fixed rate clock for Allwinner A1X SoCs
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 307c2bf467e3682c6df1b8186365224fd2d581d3
Author: Gregory CLEMENT <gregory.clement@bootlin.com>
Date:   Sat Nov 17 15:22:25 2012 +0100

    clocksource: convert time-armada-370-xp to clk framework
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Tested-by Gregory CLEMENT <gregory.clement@free-electrons.com>

commit b2ac5d7549710173ea0217bf8c7b3f71da5220d4
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Mon Nov 12 15:07:50 2012 +0100

    clocksource: sunxi: Add Allwinner A1X Timer Driver
    
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: John Stultz <johnstul@us.ibm.com>

commit 3a04931e3b6230926ebe200192545a8d952d787d
Author: Stephen Warren <swarren@nvidia.com>
Date:   Tue Oct 23 11:40:25 2012 -0600

    ARM: tegra: enhance timer.c to get IO address from device tree
    
    Modify Tegra's timer code to parse the IO address from device tree,
    hence removing the dependency on <mach/iomap.h>. This will allow the
    driver to be moved to drivers/clocksource/.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

commit 794c1539ab391e1278bec0d69015d9b4e75bdaf0
Merge: f75ed2d39562 16defa668d00
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Nov 16 17:14:37 2012 +0100

    Merge tag 'mtu-clk-for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-stericsson into next/multiplatform
    
    From Linus Walleij <linus.walleij@linaro.org>:
    
    This tag contains two MTU patches based on top of the ux500 sparse IRQ
    commit to avoid merge clashes.
    
    * tag 'mtu-clk-for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-stericsson:
      clocksource/mtu-nomadik: use apb_pclk
      clk: ux500: Register mtu apb_pclocks
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 16defa668d009a762e23d55ce6ecf5ae483dfe10
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Wed Oct 24 14:13:41 2012 +0200

    clocksource/mtu-nomadik: use apb_pclk
    
    After improving the clock tree we need to make sure the the
    MTU timer explicitly grabs and enables it silicon clock
    (pclk).
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Mike Turquette <mturquette@ti.com>
    Signed-off-by: Linus Walleij <linus.walleij@stericsson.com>

commit 47c8c91b2d60006df22146effe79ac4cdafd9205
Author: Shan Wei <davidshan@tencent.com>
Date:   Tue Nov 13 09:53:14 2012 +0800

    clocksource: arm_generic: use this_cpu_ptr per-cpu helper
    
    Utilize this_cpu_ptr() instead of per_cpu_ptr(...,smp_processor_id())
    
    Signed-off-by: Shan Wei <davidshan@tencent.com>
    Reviewed-by: Christoph Lameter <cl@linux.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 980097b36074596c76c1367a9e7b70ec8583d55b
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Oct 29 15:24:18 2012 +0100

    clocksource: arm_generic: use integer math helpers
    
    This will make the two crucial integer divisions in the generic
    ARM arch timer used for ARMv8 use the kernel DIV_ROUND_CLOSEST()
    helper inline from <linux/kernel.h> so they get more precise.
    
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit f95a985781e9e986992351c971af7f7e46e06ed5
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Thu Oct 18 11:34:41 2012 +0200

    time/jiffies: Make clocksource_jiffies static
    
    Commit f1b8274 ("clocksource: Cleanup clocksource selection") removed all
    external references to clocksource_jiffies so there is no need to have the
    symbol globally visible.
    
    Fixes the following sparse warning:
      CHECK   kernel/time/jiffies.c kernel/time/jiffies.c:61:20: warning: symbol 'clocksource_jiffies' was not declared. Should it be static?
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 60e3bf14d4e2a9fcc11c2fc33f572bfafa8ece92
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Oct 20 07:46:02 2012 +0300

    clocksource: clean up parse_pmtmr()
    
    I changed the strict_strtoul() to kstrtouint().  That has the check
    for UINT_MAX built in to it so the ifdefs can be removed.  Also
    I changed a printk() to pr_info().
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit b1538832191d59e29b1077e64cf416a7617b45bc
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Fri Sep 28 11:43:30 2012 -0500

    ARM: OMAP: Remove __omap_dm_timer_set_source function
    
    The __omap_dm_timer_set_source() function is only used by the system timer
    (clock-events and clock-source) code for OMAP2+ devices. Therefore, we can
    remove this code from the dmtimer driver and move it to the system timer
    code for OMAP2+ devices.
    
    The current __omap_dm_timer_set_source() function calls clk_disable() before
    calling clk_set_parent() and clk_enable() afterwards. We can avoid these calls
    to clk_disable/enable by moving the calls to omap_hwmod_setup_one() and
    omap_hwmod_enable() to after the call to clk_set_parent() in
    omap_dm_timer_init_one().
    
    The function omap_hwmod_setup_one() will enable the timers functional clock
    and therefore increment the use-count of the functional clock to 1.
    clk_set_parent() will fail if the use-count is not 0 when called. Hence, if
    omap_hwmod_setup_one() is called before clk_set_parent(), we will need to call
    clk_disable() before calling clk_set_parent() to decrement the use-count.
    Hence, avoid these extra calls to disable and enable the functional clock by
    moving the calls to omap_hwmod_setup_one() and omap_hwmod_enable() to after
    clk_set_parent().
    
    We can also remove the delay from the __omap_dm_timer_set_source() function
    because enabling the clock will now be handled via the HWMOD framework by
    calling omap_hwmod_setup_one(). Therefore, by moving the calls to
    omap_hwmod_setup_one() and omap_hwmod_enable() to after the call to
    clk_set_parent(), we can simply replace __omap_dm_timer_set_source() with
    clk_set_parent().
    
    It should be safe to move these hwmod calls to later in the
    omap_dm_timer_init_one() because other calls to the hwmod layer that occur
    before are just requesting resource information.
    
    Testing includes boot testing on OMAP2420 H4, OMAP3430 SDP and OMAP4430 Blaze
    with the following configurations:
    1. CONFIG_OMAP_32K_TIMER=y
    2. CONFIG_OMAP_32K_TIMER=y and boot parameter "clocksource=gp_timer"
    3. CONFIG_OMAP_32K_TIMER not set
    4. CONFIG_OMAP_32K_TIMER not set and boot parameter "clocksource=gp_timer"
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

commit 694e33a7f42de7dcc8b43c3990c597b19ef9b438
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Thu Oct 18 14:01:25 2012 +0200

    ARM: plat-nomadik: move MTU, kill plat-nomadik
    
    This moves the MTU timer driver from arch/arm/plat-nomadik
    to drivers/clocksource and moves the header file to the
    platform_data directory.
    
    As this moves the last file being compiled to an object out
    of arch/arm/plat-nomadik, we have to "turn off the light"
    and delete the plat-nomadik directory, because it is not
    allowed to have an empty Makefile in a plat-* directory.
    This is probably also a desired side effect of depopulating
    the arch/arm directory of drivers. Luckily we have just
    deleted all the <plat/*> include files prior to this so
    by moving the last one we may delete the directory.
    
    After this all the Ux500 and Nomadik device drivers live
    outside of the arch/arm hierarchy.
    
    Cc: Alessandro Rubini <rubini@unipv.it>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 5c2e88525b5f1cdc72c9eefba72dae13be7e5d20
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Oct 29 16:45:47 2012 -0700

    ARM: OMAP: Remove plat-omap/common.h
    
    Most of the prototypes in plat-omap/common.h are not
    common to omap1 and omap2+, they are local to omap2+
    and should not be in plat-omap/common.h.
    
    The only shared function prototype in this file is
    omap_init_clocksource_32k(), let's put that into
    counter-32k.h.
    
    Note that the new plat/counter-32k.h must not be
    included from drivers, that will break omap2+ build
    for CONFIG_MULTIPLATFORM.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 5d890f591d15d1161131546c2af371178c967734
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Mon Oct 22 16:42:16 2012 -0500

    ALSA: hda: support for wallclock timestamps
    
    Reuse code from clocksource to handle wall clock counter.
    Since wrapparound occurs, the audio timestamp is reinitialized
    to zero on a trigger. Synchronized linked devices will
    start counting from same reference to avoid any drift.
    
    Max buffer time is limited to 178 seconds to make sure
    wall clock counter does not overflow
    
    Wallclock timestamps are disabled on capture streams
    until we figure out how to handle digital inputs.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 60d75eff5b41399b9a367874aef33d9f7355c50f
Author: Igor Grinberg <grinberg@compulab.co.il>
Date:   Tue Aug 28 01:26:14 2012 +0300

    ARM: OMAP: timer: obey the !CONFIG_OMAP_32K_TIMER
    
    commit 45caae74d238ef6583e9402cb8c550cc0b0f7dbd upstream.
    
    Currently, omap2_sync32k_clocksource_init() function initializes the 32K
    timer as the system clock source regardless of the CONFIG_OMAP_32K_TIMER
    setting.
    Fix this by providing a default implementation for
    !CONFIG_OMAP_32K_TIMER case.
    
    Signed-off-by: Igor Grinberg <grinberg@compulab.co.il>
    Reviewed-by: Paul Walmsley <paul@pwsan.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7b5ec998aacd69e22472e12a62f86d803e0033b
Merge: 95360fd63606 7b27fa258c8f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 1 18:55:15 2012 -0700

    Merge tag 'dt2' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM soc device tree updates, take 2 from Olof Johansson:
     "This branch contains mostly a set of changes for device tree bindings
      on Samsung Exynos.  It was staged behind the other branches due to
      dependencies on pincontrol and board changes."
    
    Fix up trivial conflict in drivers/clocksource/Makefile due to earlier
    conflict resolution.
    
    * tag 'dt2' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc:
      ARM: dts: Add nodes for dw_mmc controllers for Samsung EXYNOS5250 platforms
      ARM: EXYNOS: Add AUXDATA support for MSHC controllers
      ARM: EXYNOS: Add support for MSHC controller clocks
      ARM: dts: Enable on-board keys as wakeup source for exynos4210-origen
      ARM: dts: use uart2 for console on smdkv310 and smdk5250
      ARM: dts: Add basic dts file for Samsung Trats board
      ARM: EXYNOS: Add OF compatibility lookups for EXYNOS4 i2c adapters
      ARM: dts: Specify address and size cells for i2c controllers for EXYNOS4
      ARM: dts: Assume status of all optional nodes as disabled for exynos4
      ARM: EXYNOS: Use exynos4 prefix instead of exynos4210 on exynos4-dt
      ARM: dts: Move parts common to EXYNOS4 from exynos4210.dtsi to exynos4.dtsi

commit 6d55d5968a8622f3ea20ec40737aea1cfba6438c
Merge: f7b967bffefe b6e3b5c2fea9
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Oct 1 14:19:17 2012 -0700

    Merge branch 'next/soc' into HEAD
    
    Conflicts:
            arch/arm/mach-ux500/clock.c
            arch/arm/mach-ux500/cpu.c
            drivers/clocksource/Makefile

commit 9429ec96c2718c0d1e3317cf60a87a0405223814
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Thu Aug 16 20:15:05 2012 +0200

    um: Preinclude include/linux/kern_levels.h
    
    The userspace part of UML uses the asm-offsets.h generator mechanism to
    create definitions for UM_KERN_<LEVEL> that match the in-kernel
    KERN_<LEVEL> constant definitions.
    
    As of commit 04d2c8c83d0e3ac5f78aeede51babb3236200112 ("printk: convert
    the format for KERN_<LEVEL> to a 2 byte pattern"), KERN_<LEVEL> is no
    longer expanded to the literal '"<LEVEL>"', but to '"\001" "LEVEL"', i.e.
    it contains two parts.
    
    However, the combo of DEFINE_STR() in
    arch/x86/um/shared/sysdep/kernel-offsets.h and sed-y in Kbuild doesn't
    support string literals consisting of multiple parts. Hence for all
    UM_KERN_<LEVEL> definitions, only the SOH character is retained in the actual
    definition, while the remainder ends up in the comment. E.g. in
    include/generated/asm-offsets.h we get
    
        #define UM_KERN_INFO "\001" /* "6" KERN_INFO */
    
    instead of
    
        #define UM_KERN_INFO "\001" "6" /* KERN_INFO */
    
    This causes spurious '^A' output in some kernel messages:
    
        Calibrating delay loop... 4640.76 BogoMIPS (lpj=23203840)
        pid_max: default: 32768 minimum: 301
        Mount-cache hash table entries: 256
        ^AChecking that host ptys support output SIGIO...Yes
        ^AChecking that host ptys support SIGIO on close...No, enabling workaround
        ^AUsing 2.6 host AIO
        NET: Registered protocol family 16
        bio: create slab <bio-0> at 0
        Switching to clocksource itimer
    
    To fix this:
      - Move the mapping from UM_KERN_<LEVEL> to KERN_<LEVEL> from
        arch/um/include/shared/common-offsets.h to
        arch/um/include/shared/user.h, which is preincluded for all userspace
        parts,
      - Preinclude include/linux/kern_levels.h for all userspace parts, to
        obtain the in-kernel KERN_<LEVEL> constant definitions. This doesn't
        violate the kernel/userspace separation, as include/linux/kern_levels.h
        is self-contained and doesn't expose any other kernel internals.
      - Remove the now unused STR() and DEFINE_STR() macros.
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Richard Weinberger <richard@nod.at>

commit b3c869d35b9b014f63ac0beacd31c57372084d01
Author: John Stultz <john.stultz@linaro.org>
Date:   Tue Sep 4 12:42:27 2012 -0400

    jiffies: Remove compile time assumptions about CLOCK_TICK_RATE
    
    CLOCK_TICK_RATE is used to accurately caclulate exactly how
    a tick will be at a given HZ.
    
    This is useful, because while we'd expect NSEC_PER_SEC/HZ,
    the underlying hardware will have some granularity limit,
    so we won't be able to have exactly HZ ticks per second.
    
    This slight error can cause timekeeping quality problems
    when using the jiffies or other jiffies driven clocksources.
    Thus we currently use compile time CLOCK_TICK_RATE value to
    generate SHIFTED_HZ and NSEC_PER_JIFFIES, which we then use
    to adjust the jiffies clocksource to correct this error.
    
    Unfortunately though, since CLOCK_TICK_RATE is a compile
    time value, and the jiffies clocksource is registered very
    early during boot, there are a number of cases where there
    are different possible hardware timers that have different
    tick rates. This causes problems in cases like ARM where
    there are numerous different types of hardware, each having
    their own compile-time CLOCK_TICK_RATE, making it hard to
    accurately support different hardware with a single kernel.
    
    For the most part, this doesn't matter all that much, as not
    too many systems actually utilize the jiffies or jiffies driven
    clocksource. Usually there are other highres clocksources
    who's granularity error is negligable.
    
    Even so, we have some complicated calcualtions that we do
    everywhere to handle these edge cases.
    
    This patch removes the compile time SHIFTED_HZ value, and
    introduces a register_refined_jiffies() function. This results
    in the default jiffies clock as being assumed a perfect HZ
    freq, and allows archtectures that care about jiffies accuracy
    to call register_refined_jiffies() with the tick rate, specified
    dynamically at boot.
    
    This allows us, where necessary, to not have a compile time
    CLOCK_TICK_RATE constant, simplifies the jiffies code, and
    still provides a way to have an accurate jiffies clock.
    
    NOTE: Since this patch does not add register_refinied_jiffies()
    calls for every arch, it may cause time quality regressions
    in some cases. Its likely these will not be noticable, but
    if they are an issue, adding the following to the end of
    setup_arch() should resolve the regression:
            register_refinied_jiffies(CLOCK_TICK_RATE)
    
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit ee4af5696720bb5b9de2e3b18be42089bed1e638
Author: Simon Arlott <simon@fire.lp0.eu>
Date:   Mon Sep 10 22:38:35 2012 -0600

    ARM: bcm2835: add system timer
    
    The System Timer peripheral provides four 32-bit timer channels and a
    single 64-bit free running counter. Each channel has an output compare
    register, which is compared against the 32 least significant bits of the
    free running counter values, and generates an interrupt.
    
    Timer 3 is used as the Linux timer.
    
    The BCM2835 also contains an SP804-based timer module. However, it
    apparently has significant differences from the standard SP804 IP block,
    and Broadcom's documentation recommends using the system timer instead.
    
    This patch was extracted from git://github.com/lp0/linux.git branch
    rpi-split as of 2012/09/08, and modified as follows:
    
    * s/bcm2708/bcm2835/.
    * Modified device tree vendor prefix.
    * Moved to drivers/clocksource/. This looks like the desired location for
      such code now.
    * Added DT binding docs.
    * Moved struct sys_timer bcm2835_timer into time.c to encapsulate it more.
    * Simplified bcm2835_time_init() to find one matching node and operate on
      it, rather than looping over all matching nodes. This seems more
      consistent with other clocksource code.
    * Simplified bcm2835_time_init() using of_iomap().
    * Renamed struct bcm2835_timer.index to match_mask to better represent its
      purpose.
    * s/printk(PR_INFO/pr_info(/
    
    Signed-off-by: Chris Boot <bootc@bootc.net>
    Signed-off-by: Simon Arlott <simon@fire.lp0.eu>
    Signed-off-by: Dom Cobley <popcornmix@gmail.com>
    Signed-off-by: Dom Cobley <dc4@broadcom.com>
    Signed-off-by: Stephen Warren <swarren@wwwdotorg.org>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

commit 00e8b2613331042bbe0177e5b9bb5c8a654b14ae
Merge: 5698bd757d55 feb70af0e3ac
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Mon Sep 17 20:25:18 2012 +0200

    Merge branch 'pm-timers'
    
    * pm-timers:
      PM: Do not use the syscore flag for runtime PM
      sh: MTU2: Basic runtime PM support
      sh: CMT: Basic runtime PM support
      sh: TMU: Basic runtime PM support
      PM / Domains: Do not measure start time for "irq safe" devices
      PM / Domains: Move syscore flag from subsys data to struct device
      PM / Domains: Rename the always_on device flag to syscore
      PM / Runtime: Allow helpers to be called by early platform drivers
      PM: Reorganize device PM initialization
      sh: MTU2: Introduce clock events suspend/resume routines
      sh: CMT: Introduce clocksource/clock events suspend/resume routines
      sh: TMU: Introduce clocksource/clock events suspend/resume routines
      timekeeping: Add suspend and resume of clock event devices
      PM / Domains: Add power off/on function for system core suspend stage
      PM / Domains: Introduce simplified power on routine for system resume

commit 92fe58f07f6e51185497785aed632d0e676afe6e
Author: Prashant Gaikwad <pgaikwad@nvidia.com>
Date:   Mon Aug 6 11:57:43 2012 +0530

    ARM: tegra: Port tegra to generic clock framework
    
    This patch converts tegra clock code to generic clock framework in following way:
     - Implement clk_ops as required by generic clk framework. (tegraXX_clocks.c)
     - Use platform specific struct clk_tegra in clk_ops implementation instead of struct clk.
     - Initialize all clock data statically. (tegraXX_clocks_data.c)
    
    Legacy framework did not have recalc_rate and is_enabled functions. Implemented these functions.
    Removed init function. It's functionality is splitted into recalc_rate and is_enabled.
    
    Static initialization is used since slab is not up in .init_early and clock
    is needed to be initialized before clockevent/clocksource initialization.
    Macros redefined for clk_tegra.
    
    Also, single struct clk_tegra is used for all type of clocks (PLL, peripheral etc.). This
    is to move quickly to generic common clock framework so that other dependent features will
    not be blocked (such as DT binding).
    
    Enabling COMMON_CLOCK config moved to ARCH_TEGRA since it is enabled for both Tegra20
    and Tegra30.
    
    Signed-off-by: Prashant Gaikwad <pgaikwad@nvidia.com>
    Signed-off-by: Stephen Warren <swarren@nvidia.com>

commit ae2fe0c0cad76973314955f68a26229b621bc3a2
Merge: cd754736097f c7e783d6adc7
Author: Olof Johansson <olof@lixom.net>
Date:   Wed Sep 5 10:39:09 2012 -0700

    Merge tag 'ks8695-time-for-arm-soc' of http://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-stericsson into next/cleanup
    
    This cleans up the ks8695 timer driver and converts
    it to use generic time and clock events.
    
    * tag 'ks8695-time-for-arm-soc' of http://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-stericsson:
      ARM: ks8695: convert to generic time and clocksource
      ARM: ks8695: delete resume hook from timer
      ARM: ks8695: use [readl|writel]_relaxed()
      ARM: ks8695: merge the timer header into the timer driver

commit c7e783d6adc7798307e7063e11f4127117446d5a
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Aug 29 20:27:22 2012 +0200

    ARM: ks8695: convert to generic time and clocksource
    
    Old platforms using ancient gettimeoffset() and other arcane
    APIs are standing in the way of cleaning up the ARM kernel.
    The gettimeoffset() was also broken: it would try to read out
    the timer counter value, while this would not work (the
    counter statically returns the initially programmed value)
    so the implementation would anyway fall back to a homebrew
    version of jiffie calculation.
    
    This is an attempt at blind-coding a generic time and clocksource
    driver for the platform by way of a datasheet and looking at the
    old code.
    
    Tested-by: Greg Ungerer <gerg@snapgear.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 9bb5ec8872312751f992cdac9968805fe03e81aa
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Mon Aug 6 01:43:03 2012 +0200

    sh: CMT: Introduce clocksource/clock events suspend/resume routines
    
    Introduce suspend/resume routines for SH CMT clock event devices and
    modify the suspend/resume routines for SH CMT clock sources such that
    if those devices belong to a PM domain, the generic PM domains
    framework will be notified that the given domain may be turned off
    (during system suspend) or that it has to be turned on (during system
    resume).
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Magnus Damm <damm@opensource.se>

commit eaa49a8cd1f98a6486413d902e7304df026a1fa9
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Mon Aug 6 01:41:20 2012 +0200

    sh: TMU: Introduce clocksource/clock events suspend/resume routines
    
    Introduce suspend/resume routines for SH TMU clock source and
    clock event device such that if those devices belong to a PM domain,
    the generic PM domains framework will be notified that the given
    domain may be turned off (during system suspend) or that it has to
    be turned on (during system resume).
    
    This change allows the A4R domain on SH7372 to be turned off during
    system suspend (tested on the Mackerel board) if the TMU clock source
    and/or clock event device is in use.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Magnus Damm <damm@opensource.se>

commit 45caae74d238ef6583e9402cb8c550cc0b0f7dbd
Author: Igor Grinberg <grinberg@compulab.co.il>
Date:   Tue Aug 28 01:26:14 2012 +0300

    ARM: OMAP: timer: obey the !CONFIG_OMAP_32K_TIMER
    
    Currently, omap2_sync32k_clocksource_init() function initializes the 32K
    timer as the system clock source regardless of the CONFIG_OMAP_32K_TIMER
    setting.
    Fix this by providing a default implementation for
    !CONFIG_OMAP_32K_TIMER case.
    
    Signed-off-by: Igor Grinberg <grinberg@compulab.co.il>
    Reviewed-by: Paul Walmsley <paul@pwsan.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit cf9bfe55f24973a8f40e2c922a7e82cf09e486fd
Author: Jayachandran C <jchandra@broadcom.com>
Date:   Tue Aug 14 18:56:13 2012 +0530

    MIPS: Synchronize MIPS count one CPU at a time
    
    The current implementation of synchronise_count_{master,slave} blocks
    slave CPUs in early boot until all of them come up. This no longer
    works because blocking a CPU with interrupts off after notifying the
    CPU to be online causes problems with the current kernel.
    
    Specifically, after the workqueue changes
    (commit a08489c569dc1 "Pull workqueue changes from Tejun Heo")
    the CPU_ONLINE notification callback workqueue_cpu_up_callback()
    will hang on wait_for_completion(&idle_rebind.done), if the slave
    CPUs are blocked for synchronize_count_slave().
    
    The changes are to update synchronize_count_{master,slave}() to handle
    one CPU at a time and to call synchronise_count_master() in __cpu_up()
    so that the CPU_ONLINE notification goes out only after the COP0 COUNT
    register is synchronized.
    
    [ralf@linux-mips.org: This matter only to those few platforms which are
    using the cp0 counter as their clocksource which are XLP, XLR and MIPS'
    CMP solution.]
    
    Signed-off-by: Jayachandran C <jchandra@broadcom.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/4216/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit a7ea3bbf5d58f4df2265d312f91d5769eabc8144
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Fri Jul 27 14:48:09 2012 -0400

    time/jiffies: Allow CLOCK_TICK_RATE to be undefined
    
    CLOCK_TICK_RATE is a legacy constant that defines the timer
    device's granularity. On hardware with particularly coarse
    granularity, this constant is used to reduce accumulated
    time error when using jiffies as a clocksource, by calculating
    the hardware's actual tick length rather then just assuming
    it is 1sec/HZ.
    
    However, for the most part this is unnecessary, as most modern
    systems don't use jiffies for their clocksource, and their
    tick device is sufficiently fine grained to avoid major error.
    
    Thus, this patch allows an architecture to not define
    CLOCK_TICK_RATE, in which case ACTHZ defaults to (HZ << 8).
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    [ Commit log & intention tweaks ]
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/1343414893-45779-2-git-send-email-john.stultz@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit f01b9b73f57f4f92d39bba0d9aa4a38f318212df
Merge: fde754302781 66314223aa5e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 23 16:31:31 2012 -0700

    Merge tag 'newsoc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull support for three new arm SoC types from Arnd Bergmann:
    
     - The mvebu platform includes Marvell's Armada XP and Armada 370 chips,
       made by the mvebu business unit inside of Marvell.  Since the same
       group also made the older but similar platforms we call "orion5x",
       "kirkwood", "mv78xx0" and "dove", we plan to move all of them into
       the mach-mvebu directory in the future.
    
     - socfpga is Altera's platform based on Cortex-A9 cores and a lot of
       FPGA space.  This is similar to the Xilinx zynq platform we already
       support.  The code is particularly clean, which is helped by the fact
       that the hardware doesn't do much besides the parts that are expected
       to get added in the FPGA.
    
     - The OMAP subarchitecture gains support for the latest generation, the
       OMAP5 based on the new Cortex-A15 core.  Support is rather
       rudimentary for now, but will be extended in the future.
    
    * tag 'newsoc' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (25 commits)
      ARM: socfpga: initial support for Altera's SOCFPGA platform
      arm: mvebu: generate DTBs for supported SoCs
      ARM: mvebu: MPIC: read number of interrupts from control register
      arm: mach-mvebu: add entry to MAINTAINERS
      arm: mach-mvebu: add compilation/configuration change
      arm: mach-mvebu: add defconfig
      arm: mach-mvebu: add documentation for new device tree bindings
      arm: mach-mvebu: add support for Armada 370 and Armada XP with DT
      arm: mach-mvebu: add source files
      arm: mach-mvebu: add header
      clocksource: time-armada-370-xp: Marvell Armada 370/XP SoC timer driver
      ARM: Kconfig update to support additional GPIOs in OMAP5
      ARM: OMAP5: Add the build support
      arm/dts: OMAP5: Add omap5 dts files
      ARM: OMAP5: board-generic: Add device tree support
      ARM: omap2+: board-generic: clean up the irq data from board file
      ARM: OMAP5: Add SMP support
      ARM: OMAP5: Add the WakeupGen IP updates
      ARM: OMAP5: l3: Add l3 error handler support for omap5
      ARM: OMAP5: gpmc: Update gpmc_init()
      ...
    
    Conflicts:
            Documentation/devicetree/bindings/arm/omap/omap.txt
            arch/arm/mach-omap2/Makefile
            drivers/clocksource/Kconfig
            drivers/clocksource/Makefile

commit 1a4120bc101bdc25ec7258937b5071bf34b19cc5
Merge: 2fa379474fe2 35bf8cc74b2b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 23 16:21:23 2012 -0700

    Merge tag 'timer' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull arm-soc timer updates from Arnd Bergmann:
     "This contains two branches dealing with timers, one for the picoxcell
      platform that is now using DT with the platform-independent
      dw_apb_timer driver.  The other change is for the omap-specific
      dmtimer driver."
    
    * tag 'timer' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc:
      clocksource: dw_apb_timer: Add common DTS glue for dw_apb_timer
      ARM: OMAP2+: Simplify dmtimer clock aliases
      ARM: OMAP2+: Move dmtimer clock set function to dmtimer driver
      ARM: OMAP1: Fix dmtimer support
      ARM: OMAP: Add flag to indicate if a timer needs a manual reset
      ARM: OMAP: Remove timer function pointer for context loss counter
      ARM: OMAP: Remove loses_context variable from timer platform data
      ARM: OMAP2+: Fix external clock support for dmtimers
      ARM: OMAP2+: HWMOD: Correct timer device attributes
      ARM: OMAP: Add DMTIMER capability variable to represent timer features
      ARM: OMAP2+: Add dmtimer platform function to reserve systimers
      ARM: OMAP2+: Remove unused max number of timers definition
      ARM: OMAP: Remove unnecessary clk structure

commit 35bf8cc74b2b1dfad18df6d330b271e68ab6e3f5
Merge: 5351da96bd66 cfda590178a1
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Jul 12 17:27:36 2012 +0200

    Merge branch 'picoxcell/timer' into next/timer
    
    Imported from mailing list
    
    * picoxcell/timer:
      clocksource: dw_apb_timer: Add common DTS glue for dw_apb_timer
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit cfda590178a16e2b5edb09e131460b3e64819807
Author: Dinh Nguyen <dinguyen@altera.com>
Date:   Wed Jul 11 15:13:16 2012 -0500

    clocksource: dw_apb_timer: Add common DTS glue for dw_apb_timer
    
    Make a common device tree glue for clocksource/dw_apb_timer.
    Move mach-picoxcell/time.c to be a generic device tree application
    of the dw_apb_timer.
    
    Configure mach-picoxcell to use the dw_apb_timer_of device tree
    implementation in drivers/clocksource.
    
    Signed-off-by: Pavel Machek <pavel@denx.de>
    Signed-off-by: Dinh Nguyen <dinguyen@altera.com>
    Acked-by: Jamie Iles <jamie@jamieiles.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit a613163dff04cbfcb7d66b06ef4a5f65498ee59b
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Jun 11 17:33:12 2012 +0200

    ARM: integrator: convert to common clock
    
    This converts the Integrator platform to use common clock
    and the ICST driver. Since from this point not all ARM
    reference platforms use the clock, we define
    CONFIG_PLAT_VERSATILE_CLOCK and select it for all platforms
    except the Integrator.
    
    Open issue: I could not use the .init_early() field of the
    machine descriptor to initialize the clocks, but had to
    move them to .init_irq(), so presumably .init_early() is
    so early that common clock is not up, and .init_machine()
    is too late since it's needed for the clockevent/clocksource
    initialization. Any suggestions on how to solve this is
    very welcome.
    
    Cc: Russell King <linux@arm.linux.org.uk>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    [mturquette@linaro.org: use 'select' instead of versatile Kconfig]
    Signed-off-by: Mike Turquette <mturquette@linaro.org>

commit 0e3585113f8fe31b7015d52ac94f56c8952626f7
Merge: 229ce6f45bec 39f47d9f437f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jul 10 17:43:22 2012 +0200

    Merge branch 'devel-omap5' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into next/newsoc
    
    From Tony Lindgren <tony@atomide.com>:
    
    This branch contains minimal support for omap5 to boot to a
    console without clock framework support. This branch depends
    on omap-cleanup-part2-for-v3.6.
    
    * 'devel-omap5' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: Kconfig update to support additional GPIOs in OMAP5
      ARM: OMAP5: Add the build support
      arm/dts: OMAP5: Add omap5 dts files
      ARM: OMAP5: board-generic: Add device tree support
      ARM: omap2+: board-generic: clean up the irq data from board file
      ARM: OMAP5: Add SMP support
      ARM: OMAP5: Add the WakeupGen IP updates
      ARM: OMAP5: l3: Add l3 error handler support for omap5
      ARM: OMAP5: gpmc: Update gpmc_init()
      ARM: OMAP5: timer: Add clocksource, clockevent support
      ARM: OMAP5: Add minimal support for OMAP5430 SOC
      ARM: OMAP5: id: Add cpu id for ES versions
      ARM: OMAP: counter-32k: Select the CR register offset using the IP scheme
      ARM: OMAP2+: Move stubbed secure_sram_reserve function to a common.c and call it __weak
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 81ab1f74ef4695b14665dc412cb7ab804801373d
Merge: 6887a4131da3 f3e16ccd03fa
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jul 10 15:49:09 2012 +0200

    Merge branch 'mvebu/newsoc' into next/newsoc
    
    From: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    
    You'll find in this patch set the nineth version of the initial
    support for a new family of ARMv7-compatible Marvell SoCs.
    
    As for the previous releases, both the Armada 370 and the Armada XP
    SoCs are supported in this directory, and we are able to build a
    single kernel image that boots on both SoCs. Both SoCs use the PJ4B
    processor, a Marvell-developed ARM core that implements the ARMv7
    instruction set. We are currently using Marvell evaluation boards for
    both of those SoCs, and the support for those boards is added in this
    patch set.
    
    This patch set, and the support for those SoCs, started as a
    collaborative effort from Marvell engineers (who have done the initial
    development work) and Free Electrons engineers (who are reshaping the
    code for mainline submission, adding device tree support, etc.). This
    effort has also received contributions from Ben Dooks from Codethink.
    
    * mvebu/newsoc:
      ARM: mvebu: MPIC: read number of interrupts from control register
      arm: mach-mvebu: add entry to MAINTAINERS
      arm: mach-mvebu: add compilation/configuration change
      arm: mach-mvebu: add defconfig
      arm: mach-mvebu: add documentation for new device tree bindings
      arm: mach-mvebu: add support for Armada 370 and Armada XP with DT
      arm: mach-mvebu: add source files
      arm: mach-mvebu: add header
      clocksource: time-armada-370-xp: Marvell Armada 370/XP SoC timer driver
    
    Changes from Arnd
    * Pulled from git://github.com/Marvell-Semi/EBU_mainline_public.git mvebu_for-next-V9
    * rebased onto v3.5-rc5 because it was originally based on
      an old arm-soc/for-next branch
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 6fe9cbd1119b3cd2595dabaf25a400eed95b170c
Author: Gregory CLEMENT <gregory.clement@bootlin.com>
Date:   Wed Jun 13 18:58:09 2012 +0200

    clocksource: time-armada-370-xp: Marvell Armada 370/XP SoC timer driver
    
    Timer 0 is used as free-running clocksource, while timer 1 is used as
    clock_event_device.
    
    Signed-off-by: Gregory CLEMENT <gregory.clement@free-electrons.com>
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Signed-off-by: Lior Amsalem <alior@marvell.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Yehuda Yitschak <yehuday@marvell.com>
    Tested-by: Lior Amsalem <alior@marvell.com>
    Acked-by: Andrew Lunn <andrew@lunn.ch>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: John Stultz <johnstul@us.ibm.com>

commit 3169663ac5902f2228ea0eb8cc34eb52cbd4b283
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Wed Jun 6 11:42:36 2012 +0100

    ARM: sa11x0/pxa: convert OS timer registers to IOMEM
    
    Make the OS timer registers have IOMEM like properities so they can
    be passed to readl_relaxed/writel_relaxed() et.al. rather than being
    straight volatile dereferences.  Add linux/io.h includes where
    required.
    
    linux/io.h includes added to arch/arm/mach-sa1100/cpu-sa1100.c,
     arch/arm/mach-sa1100/jornada720_ssp.c, arch/arm/mach-sa1100/leds-lart.c
     drivers/input/touchscreen/jornada720_ts.c, drivers/pcmcia/sa1100_shannon.c
    from Arnd.
    
    This fixes these warnings:
    
    arch/arm/mach-sa1100/time.c: In function 'sa1100_timer_init':
    arch/arm/mach-sa1100/time.c:104: warning: passing argument 1 of 'clocksource_mmio_init' discards qualifiers from pointer target type
    arch/arm/mach-pxa/time.c: In function 'pxa_timer_init':
    arch/arm/mach-pxa/time.c:126: warning: passing argument 1 of 'clocksource_mmio_init' discards qualifiers from pointer target type
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 37b3280de2a7a3feb75e939cadd988d082984566
Author: R Sricharan <r.sricharan@ti.com>
Date:   Wed May 2 13:07:12 2012 +0530

    ARM: OMAP5: timer: Add clocksource, clockevent support
    
    Adding the Initialisaton for clocksource and clockevent device
    on OMAP5 Socs.
    
    Signed-off-by: R Sricharan <r.sricharan@ti.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>

commit 006c7f18449a06027b0165e938c67b3a029813c9
Author: Paul Walmsley <paul@pwsan.com>
Date:   Wed Jul 4 05:22:53 2012 -0600

    ARM: OMAP2+: hwmod code/clockdomain data: fix 32K sync timer
    
    Kevin discovered that commit c8d82ff68fb6873691536cf33021977efbf5593c
    ("ARM: OMAP2/3: hwmod data: Add 32k-sync timer data to hwmod
    database") broke CORE idle on OMAP3.  This prevents device low power
    states.
    
    The root cause is that the 32K sync timer IP block does not support
    smart-idle mode[1], and so the hwmod code keeps the IP block in
    no-idle mode while it is active.  This in turn prevents the WKUP
    clockdomain from transitioning to idle.  There is a hardcoded sleep
    dependency that prevents the CORE_L3 and CORE_CM clockdomains from
    transitioning to idle when the WKUP clockdomain is active[2], so the
    chip cannot enter any device low power states.
    
    It turns out that there is no need to take the 32k sync timer out of
    idle.  The IP block itself probably does not have any native idle
    handling at all, due to its simplicity.  Furthermore, the PRCM will
    never request target idle for this IP block while the kernel is
    running, due to the sleep dependency that prevents the WKUP
    clockdomain from idling while the CORE_L3 clockdomain is active.  So
    we can safely leave the 32k sync timer in target-force-idle mode, even
    while we continue to access it.
    
    This workaround is implemented by defining a new clockdomain flag,
    CLKDM_ACTIVE_WITH_MPU, that indicates that the clockdomain is
    guaranteed to be active whenever the MPU is inactive.  If an IP
    block's main functional clock exists inside this clockdomain, and the
    IP block does not support smart-idle modes, then the hwmod code will
    place the IP block into target force-idle mode even when enabled.  The
    WKUP clockdomains on OMAP3/4 are marked with this flag.  (On OMAP2xxx,
    no OCP header existed on the 32k sync timer.)   Other clockdomains also
    should be marked with this flag, but those changes are deferred until
    a later merge window, to create a minimal fix.
    
    Another theoretically clean fix for this problem would be to implement
    PM runtime-based control for 32k sync timer accesses.  These PM
    runtime calls would need to located in a custom clocksource, since the
    32k sync timer is currently used as an MMIO clocksource.  But in
    practice, there would be little benefit to doing so; and there would
    be some cost, due to the addition of unnecessary lines of code and the
    additional CPU overhead of the PM runtime and hwmod code - unnecessary
    in this case.
    
    Another possible fix would have been to modify the pm34xx.c code to
    force the IP block idle before entering WFI.  But this would not have
    been an acceptable approach: we are trying to remove this type of
    centralized IP block idle control from the PM code.
    
    This patch is a collaboration between Kevin Hilman <khilman@ti.com>
    and Paul Walmsley <paul@pwsan.com>.
    
    Thanks to Vaibhav Hiremath <hvaibhav@ti.com> for providing comments on
    an earlier version of this patch.  Thanks to Tero Kristo
    <t-kristo@ti.com> for identifying a bug in an earlier version of this
    patch.  Thanks to Benoît Cousson <b-cousson@ti.com> for identifying
    some bugs in several versions of this patch and for implementation
    comments.
    
    References:
    
    1. Table 16-96 "REG_32KSYNCNT_SYSCONFIG" of the OMAP34xx TRM Rev. ZU
       (SWPU223U), available from:
       http://www.ti.com/pdfs/wtbu/OMAP34x_ES3.1.x_PUBLIC_TRM_vzU.zip
    
    2. Table 4-72 "Sleep Dependencies" of the OMAP34xx TRM Rev. ZU
       (SWPU223U)
    
    3. ibid.
    
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Vaibhav Hiremath <hvaibhav@ti.com>
    Cc: Benoît Cousson <b-cousson@ti.com>
    Cc: Tero Kristo <t-kristo@ti.com>
    Tested-by: Kevin Hilman <khilman@ti.com>
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Kevin Hilman <khilman@ti.com>

commit b7b4ff764f7bf903e47eebdab661b1c38e791c6d
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Tue Jun 5 12:34:51 2012 -0500

    ARM: OMAP2+: Add dmtimer platform function to reserve systimers
    
    During early boot, one or two dmtimers are reserved by the kernel as system
    timers (for clocksource and clockevents). These timers are marked as reserved
    and the dmtimer driver is notified which timers have been reserved via the
    platform data information.
    
    For OMAP2+ devices the timers reserved may vary depending on device and compile
    flags. Therefore, it is not easy to assume which timers we be reserved for the
    system timers. In order to migrate the dmtimer driver to support device-tree we
    need a way to pass the timers reserved for system timers to the dmtimer driver.
    Using the platform data structure will not work in the same way as it is
    currently used because the platform data structure will be stored statically in
    the dmtimer itself and the platform data will be selected via the device-tree
    match device function (of_match_device).
    
    There are a couple ways to workaround this. One option is to store the system
    timers reserved for the kernel in the device-tree and query them on boot.
    The downside of this approach is that it adds some delay to parse the DT blob
    to search for the system timers. Secondly, for OMAP3 devices we have a
    dependency on compile time flags and the device-tree would not be aware of that
    kernel compile flags and so we would need to address that.
    
    The second option is to add a function to the dmtimer code to reserved the
    system timers during boot and so the dmtimer knows exactly which timers are
    being used for system timers. This also allows us to remove the "reserved"
    member from the timer platform data. This seemed like the simpler approach and
    so was implemented here.
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 790b9d4bb7614252e133d4a99ef18c1734d69163
Merge: c02feeea3dad 380622e9ff56
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jun 13 23:19:34 2012 +0300

    Merge tag 'sh-for-linus' of git://github.com/pmundt/linux-sh
    
    Pull SuperH fixes from Paul Mundt.
    
    * tag 'sh-for-linus' of git://github.com/pmundt/linux-sh:
      sh: Kill off additional asm-generic wrappers.
      sh: Setup CROSS_COMPILE at the top
      sh: Fix up link time defsym warnings.
      sh: use the new generic strnlen_user() function
      sh: switch to generic strncpy_from_user().
      sh: Kill off last dead UBC header
      serial: sh-sci: Make probe fail for ports that exceed the maximum count
      serial: sh-sci: Fix probe error paths
      clocksource: sh_tmu: Use clockevents_config_and_register().
      clocksource: sh_tmu: Convert timer lock to raw spinlock.
      clocksource: sh_mtu2: Convert timer lock to raw spinlock.
      clocksource: sh_cmt: Convert timer lock to raw spinlock.
      bug.h: need linux/kernel.h for TAINT_WARN.
      sh: convert to kbuild asm-generic support.
      sh64: Fix up fallout from generic init_task conversion.
      sh: arch/sh/kernel/process.c needs asm/fpu.h for unlazy_fpu().

commit 3977407e83129f53e43d3ac44be8702f59fa3f77
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Mon Jun 11 17:10:16 2012 +0900

    clocksource: sh_tmu: Use clockevents_config_and_register().
    
    This switches over to the now exported clockevents_config() and
    clockevents_config_and_register() helpers. This knocks off a
    long-standing TMU TODO item.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit c2225a57e596a308424e59abc7e864f866fe4493
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Fri May 25 13:39:09 2012 +0900

    clocksource: sh_tmu: Convert timer lock to raw spinlock.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 50393a92c89c603e2d043c9f0212d3bd66701c86
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Fri May 25 13:38:54 2012 +0900

    clocksource: sh_mtu2: Convert timer lock to raw spinlock.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 7d0c399fe94d4fe572eadc7405654a282e5df63d
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Fri May 25 13:36:43 2012 +0900

    clocksource: sh_cmt: Convert timer lock to raw spinlock.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit c22072bdf053b115a1126658100967dda00b5ecf
Merge: 0640113be25d 62cf20b32aee
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 4 11:25:31 2012 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer updates from Thomas Gleixner:
     "The clocksource driver is pure hardware enablement and the skew option
      is default off, well tested and non dangerous."
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      tick: Move skew_tick option into the HIGH_RES_TIMER section
      clocksource: em_sti: Add DT support
      clocksource: em_sti: Emma Mobile STI driver
      clockevents: Make clockevents_config() a global symbol
      tick: Add tick skew boot option

commit fc0830fe017d02b7b4995b5c402b484b65d9dfc6
Author: Magnus Damm <magnus.damm@gmail.com>
Date:   Wed May 9 23:39:50 2012 +0900

    clocksource: em_sti: Add DT support
    
    Update the em-sti driver to support DT.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Cc: arnd@arndb.de
    Cc: horms@verge.net.au
    Cc: johnstul@us.ibm.com
    Cc: rjw@sisk.pl
    Cc: lethal@linux-sh.org
    Cc: gregkh@linuxfoundation.org
    Cc: olof@lixom.net
    Link: http://lkml.kernel.org/r/20120509143950.27521.7949.sendpatchset@w520
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit b9dbf9517784084ee9496f9f17f9754c1d021a9e
Author: Magnus Damm <magnus.damm@gmail.com>
Date:   Fri May 25 16:03:44 2012 +0900

    clocksource: em_sti: Emma Mobile STI driver
    
    The STI hardware is based on a single 48-bit 32kHz
    counter that together with two individual compare
    registers can generate interrupts. There are no
    timer operating modes selectable which means that
    the timer can not clear on match.
    
    This driver is providing clocksource support for the
    48-bit counter. Clockevents are also supported using
    the same timer in oneshot mode.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Cc: horms@verge.net.au
    Cc: arnd@arndb.de
    Cc: johnstul@us.ibm.com
    Cc: rjw@sisk.pl
    Cc: lethal@linux-sh.org
    Cc: gregkh@linuxfoundation.org
    Cc: olof@lixom.net
    Link: http://lkml.kernel.org/r/20120525070344.23443.69756.sendpatchset@w520
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit b324c67d4800e59171f48d9ddab6cbfb59110482
Merge: 8dca6010d44c 396d81cd0fe1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 22 09:30:52 2012 -0700

    Merge tag 'dt' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull device tree conversions for arm-soc, part 1, from Olof Johansson:
     "The spear3xx, lpc32xx, shmobile and mmp platforms are joining the game
      of booting using device trees, which is a great step forward for them.
      at91 and spear have pretty much completed this process with a huge
      amount of work being put into at91.  The other platforms are
      continuing the process.
    
      We finally start to see the payback on this investment, as new
      machines are getting supported purely by adding a .dts source file
      that can be completely independent of the kernel source."
    
    Fix up trivial conflict in arch/arm/Kconfig
    
    * tag 'dt' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (83 commits)
      ARM: at91: Add ADC driver to at91sam9260/at91sam9g20 dtsi files
      arm/dts: omap4-panda: Add LEDs support
      arm/dts: omap4-sdp: Add LEDs support
      arm/dts: twl4030: Add twl4030-gpio node
      OMAP4: devices: Do not create mcpdm device if the dtb has been provided
      OMAP4: devices: Do not create dmic device if the dtb has been provided
      Documentation: update docs for mmp dt
      ARM: dts: refresh dts file for arch mmp
      ARM: mmp: support pxa910 with device tree
      ARM: mmp: support mmp2 with device tree
      gpio: pxa: parse gpio from DTS file
      ARM: mmp: support DT in timer
      ARM: mmp: support DT in irq
      ARM: mmp: append CONFIG_MACH_MMP2_DT
      ARM: mmp: fix build issue on mmp with device tree
      ARM: ux500: Enable PRCMU Timer 4 (clocksource) for Device Tree
      ARM: ux500: Disable SMSC911x platform code registration when DT is enabled
      ARM: ux500: Fork cpu-db8500 platform_devs for sequential DT enablement
      ARM: ux500: Do not attempt to register non-existent i2c devices on Snowball
      ARM: SPEAr3xx: Correct keyboard data passed from DT
      ...

commit 08c902fccd1753926095c863b01fb88bbec69f30
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jun 16 16:22:08 2011 +0200

    clocksource: Make watchdog robust vs. interruption
    
    commit b5199515c25cca622495eb9c6a8a1d275e775088 upstream.
    
    The clocksource watchdog code is interruptible and it has been
    observed that this can trigger false positives which disable the TSC.
    
    The reason is that an interrupt storm or a long running interrupt
    handler between the read of the watchdog source and the read of the
    TSC brings the two far enough apart that the delta is larger than the
    unstable treshold. Move both reads into a short interrupt disabled
    region to avoid that.
    
    Reported-and-tested-by: Vernon Mauery <vernux@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit cfd2c25155baf95e6e79466320838be17b07c542
Author: Kasper Pedersen <kkp2010@kasperkp.dk>
Date:   Wed Oct 20 15:55:15 2010 -0700

    time: Compensate for rounding on odd-frequency clocksources
    
    commit a386b5af8edda1c742ce9f77891e112eefffc005 upstream.
    
    When the clocksource is not a multiple of HZ, the clock will be off.  For
    acpi_pm, HZ=1000 the error is 127.111 ppm:
    
    The rounding of cycle_interval ends up generating a false error term in
    ntp_error accumulation since xtime_interval is not exactly 1/HZ.  So, we
    subtract out the error caused by the rounding.
    
    This has been visible since 2.6.32-rc2
            commit a092ff0f90cae22b2ac8028ecd2c6f6c1a9e4601
            time: Implement logarithmic time accumulation
    That commit raised NTP_INTERVAL_FREQ and exposed the rounding error.
    
    testing tool: http://n1.taur.dk/permanent/testpmt.c
    Also tested with ntpd and a frequency counter.
    
    Signed-off-by: Kasper Pedersen <kkp2010@kasperkp.dk>
    Acked-by: john stultz <johnstul@us.ibm.com>
    Cc: John Kacur <jkacur@redhat.com>
    Cc: Clark Williams <williams@redhat.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 030caf3f22395d564ee8a4f056a9cb7190a7eed4
Merge: e2e9bbeec90c 1fe97c8f6a1d
Author: Olof Johansson <olof@lixom.net>
Date:   Thu May 10 23:46:06 2012 -0700

    Merge tag 'omap-cleanup-timer-for-v3.5' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into next/cleanup2
    
    Timer changes to make it easier to support various SoCs
    
    By Vaibhav Hiremath
    via Tony Lindgren
    * tag 'omap-cleanup-timer-for-v3.5' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: OMAP: Make OMAP clocksource source selection using kernel param
      ARM: OMAP2+: Replace space with underscore in the name field of system timers
      ARM: OMAP1: Add checks for possible error condition in timer_init

commit 1fe97c8f6a1de67a5f56e029a818903d5bed8017
Author: Vaibhav Hiremath <hvaibhav@ti.com>
Date:   Wed May 9 10:07:05 2012 -0700

    ARM: OMAP: Make OMAP clocksource source selection using kernel param
    
    Current OMAP code supports couple of clocksource options based
    on compilation flag (CONFIG_OMAP_32K_TIMER). The 32KHz sync-timer
    and a gptimer which can run on 32KHz or system clock (e.g 38.4 MHz).
    So there can be 3 options -
    
    1. 32KHz sync-timer
    2. Sys_clock based (e.g 13/19.2/26/38.4 MHz) gptimer
    3. 32KHz based gptimer.
    
    The optional gptimer based clocksource was added so that it can
    give the high precision than sync-timer, so expected usage was 2
    and not 3.
    Unfortunately option 2, clocksource doesn't meet the requirement of
    free-running clock as per clocksource need. It stops in low power states
    when sys_clock is cut. That makes gptimer based clocksource option
    useless for OMAP2/3/4 devices with sys_clock as a clock input.
    So, in order to use option 2, deeper idle state MUST be disabled.
    
    Option 3 will still work but it is no better than 32K sync-timer
    based clocksource.
    
    We must support both sync timer and gptimer based clocksource as
    some OMAP based derivative SoCs like AM33XX does not have the
    sync timer.
    
    Considering above, make sync-timer and gptimer clocksource runtime
    selectable so that both OMAP and AMXXXX continue to use the same code.
    
    And, in order to precisely configure/setup sched_clock for given
    clocksource, decision has to be made early enough in boot sequence.
    
    So, the solution is,
    
    Use standard kernel parameter ("clocksource=") to override
    default 32k_sync-timer, in addition to this, we also use hwmod database
    lookup mechanism, through which at run-time we can identify availability
    of 32k-sync timer on the device, else fall back to gptimer.
    
    Also, moved low-level SoC specific init code to respective files,
    (mach-omap1/timer32k.c and mach-omap2/timer.c)
    
    Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Reviewed-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Acked-by: Kevin Hilman <khilman@ti.com>
    Tested-by: Kevin Hilman <khilman@ti.com>
    Cc: Benoit Cousson <b-cousson@ti.com>
    Cc: Paul Walmsley <paul@pwsan.com>
    Cc: Tarun Kanti DebBarma <tarun.kanti@ti.com>
    Cc: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit f36921bebdf368ac4892f8ed62fb97dd6461d459
Author: Vaibhav Hiremath <hvaibhav@ti.com>
Date:   Wed May 9 10:07:05 2012 -0700

    ARM: OMAP2+: Replace space with underscore in the name field of system timers
    
    Depending on the bootloader, passing command-line arguments
    with spaces may have issues. Some bootloaders doesn't seem
    to pass along the quotes, passing only 'gp' part of the string,
    which leads to wrong override configuration.
    
    The only affected kernel parameter configuration for OMAP family
    is "clocksource=", used to override kernel clocksource.
    
    So this patch changes "gp timer" => "gp_timer", for clockevent,
    clocksource and timer irq_handler.
    
    Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
    Acked-by: Kevin Hilman <khilman@ti.com>
    Tested-by: Kevin Hilman <khilman@ti.com>
    Cc: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Cc: Benoit Cousson <b-cousson@ti.com>
    Cc: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 187999119d93f584209400b052cf092141a33650
Author: Vaibhav Hiremath <hvaibhav@ti.com>
Date:   Wed May 9 10:07:05 2012 -0700

    ARM: OMAP1: Add checks for possible error condition in timer_init
    
    On OMAP1, omap_32k_timer_init() function always returns "true",
    irrespective of whether error occurred while initializing 32k sync
    counter as a kernel clocksource or not and execution will never
    fallback to mpu_timer clocksource init code.
    
    This patch adds check for return value from function
    omap_init_clocksource_32k(), and fallback to omap_mpu_timer_init()
    in case of failure/error from omap_init_clocksource_32k().
    
    Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
    Acked-by: Kevin Hilman <khilman@ti.com>
    Tested-by: Kevin Hilman <khilman@ti.com>
    Cc: Paul Walmsley <paul@pwsan.com>
    Cc: Benoit Cousson <b-cousson@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 70888a4b412abd55c1710e2d36a9a00f4d23f474
Merge: 47fad7c6f8d9 c51423fc067b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed May 2 17:23:08 2012 +0200

    Merge branch 'ux500-devicetree-for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-stericsson into next/dt
    
    From: Linus Walleij <linus.walleij@linaro.org>:
      Four core patches paving the way for device tree enablement
      of the Snowball and ux500 at large by Lee Jones.
    
    * 'ux500-devicetree-for-arm-soc' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-stericsson:
      ARM: ux500: Enable PRCMU Timer 4 (clocksource) for Device Tree
      ARM: ux500: Disable SMSC911x platform code registration when DT is enabled
      ARM: ux500: Fork cpu-db8500 platform_devs for sequential DT enablement
      ARM: ux500: Do not attempt to register non-existent i2c devices on Snowball
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    [olof: rebuilt branch due to drop of an early merge]
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit c51423fc067b00d8c8bd0e4e7bc861bf9050511d
Author: Lee Jones <lee.jones@linaro.org>
Date:   Tue Apr 24 10:04:46 2012 +0100

    ARM: ux500: Enable PRCMU Timer 4 (clocksource) for Device Tree
    
    In dbx500 based devices the PRCMU Timer 4 is used as a clocksource
    and sched_clock. Here we fetch all necessary addressing information
    required for correct PRCMU initialisation from the Device Tree
    instead of using hard-coded values.
    
    CC: Samuel Ortiz <sameo@linux.intel.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 022c03a2d650c641fa0f94dbc9d9ff77f8057678
Author: Marc Zyngier <marc.zyngier@arm.com>
Date:   Wed Jan 11 17:25:17 2012 +0000

    ARM: local timers: Add A15 architected timer support
    
    Add support for the A15 generic timer and clocksource.
    As the timer generates interrupts on a different PPI depending
    on the execution mode (normal or secure), it is possible to
    register two different PPIs.
    
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

commit 3de3d74956e26af0a5647e98f73eaf8efd0d07bd
Author: Lee Jones <lee.jones@linaro.org>
Date:   Tue Apr 24 10:00:15 2012 +0100

    ARM: ux500: Configure the PRCMU Timer for db8500 based devices in DT
    
    This patch adds the information required for successful
    registration of the PRCMU timer 4 (clocksource) driver to the
    db8500 Device Tree include file.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit e9cb1c5a5ba906d01bf49a27460bd357aa6089ab
Author: Nicolas Ferre <nicolas.ferre@atmel.com>
Date:   Mon Mar 26 15:59:32 2012 +0200

    MAINTAINERS: add entry for Atmel timer counter (TC)
    
    Add an entry for the Timer Counter (TC) library and the clocksource
    driver that is using this library.
    
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>

commit 62f082830d63cf753ed0dab16f8d3b2d0ffc7f43
Author: Tkhai Kirill <tkhai@yandex.ru>
Date:   Wed Apr 4 21:49:26 2012 +0200

    sparc32: generic clockevent support
    
    The kernel uses l14 timers as clockevents. l10 timer is used
    as clocksource if platform master_l10_counter isn't constantly
    zero. The clocksource is continuous, so it's possible to use
    high resolution timers. l10 timer is also used as clockevent
    on UP configurations.
    
    This realization is for sun4m, sun4d, sun4c, microsparc-IIep
    and LEON platforms. The appropriate LEON changes was made by
    Konrad Eisele.
    
    In case of sun4m's oneshot mode, profile irq is zeroed in
    smp4m_percpu_timer_interrupt(). It is maybe
    needless (double, triple etc overflow does nothing).
    
    sun4d is able to have oneshot mode too, but I haven't
    any way to test it. So code of its percpu timer handler
    is made as much equal to the current code as possible.
    
    The patch is tested on sun4m box in SMP mode by me,
    and tested by Konrad on leon in up mode (leon smp
    is broken atm - due to other reasons).
    
    Signed-off-by: Tkhai Kirill <tkhai@yandex.ru>
    Tested-by: Konrad Eisele <konrad@gaisler.com> [leon up]
    [sam: revised patch to provide generic support for leon]
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ccb1ec95e924a24906ef01ce6d028a8dc13dc87d
Merge: 4a1d7544fee5 d48fc63f6f3f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 12 15:16:26 2012 -0700

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer fixes from Thomas Gleixner:
     "The itimer removal one is not strictly a fix, but I really wanted to
      avoid a rebase of the urgent ones."
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      Revert "clocksource: Load the ACPI PM clocksource asynchronously"
      clockevents: tTack broadcast device mode change in tick_broadcast_switch_to_oneshot()
      itimer: Use printk_once instead of WARN_ONCE
      nohz: Fix stale jiffies update in tick_nohz_restart()
      tick: Document TICK_ONESHOT config option
      proc: stats: Use arch_idle_time for idle and iowait times if available
      itimer: Schedule silent NULL pointer fixup in setitimer() for removal

commit d48fc63f6f3f485ed5aa9cf019d8e8e3a7d10263
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Apr 11 23:49:16 2012 +0200

    Revert "clocksource: Load the ACPI PM clocksource asynchronously"
    
    This reverts commit b519508298e0292e1771eecf14aaf67755adc39d.
    
    The reason for this revert is that making the frequency verification
    preemptible and interruptible is not working reliably. Michaels
    machine failed to use PM-timer with the message:
    
      PM-Timer running at invalid rate: 113% of normal - aborting.
    
    That's not a surprise as the frequency verification does rely on
    interrupts being disabled. With a async scheduled thread there is no
    guarantee to achieve the same result. Also some driver might fiddle
    with the CTC channel 2 during the verification period, which makes the
    result even more random and unpredictable.
    
    This can be solved by using the same mechanism as we use in the
    deferred TSC validation code, but that only will work if we verified a
    working HPET _BEFORE_ trying to do the PM-Timer lazy validation.
    
    So for now reverting is the safe option.
    
    Bisected-by: Michael Witten <mfwitten@gmail.com>
    Cc: Arjan van de Ven <arjanvandeven@gmail.com>
    Cc: Arjan van de Ven <arjan@infradead.org>
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Len Brown <lenb@kernel.org>
    LKML-Reference: <alpine.LFD.2.02.1204112303270.2542@ionos>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 7564963150c0cf52d3d47add3d422f3ade202699
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Mon Mar 26 23:27:33 2012 +0200

    PM / shmobile: Make MTU2 driver use pm_genpd_dev_always_on()
    
    Commit 57d13370cfaf6017c68981e66ff5b3bf20a2705c upstream.
    
    Make the MTU2 clocksource driver mark its device as "always on"
    using pm_genpd_dev_always_on() to protect it from surprise power
    removals.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Tested-by: Simon Horman <horms@verge.net.au>
    Acked-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77bba980b91a26a942d3d0395eab64ce7fdd5cd0
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Mon Mar 26 23:26:53 2012 +0200

    PM / shmobile: Make CMT driver use pm_genpd_dev_always_on()
    
    Commit 615a445f7f8a077c145e737864ae59a4d8717882 upstream.
    
    Make the CMT clocksource driver mark its device as "always on"
    using pm_genpd_dev_always_on() to protect it from surprise power
    removals.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Tested-by: Simon Horman <horms@verge.net.au>
    Acked-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14dbd9a0e642ff89604ee177cd08c7809b323f1f
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Mon Mar 26 23:26:10 2012 +0200

    PM / shmobile: Make TMU driver use pm_genpd_dev_always_on()
    
    Commit 2ee619f9487c2acc1efdf2c78e68e2bd51b635fa upstream.
    
    Make the TMU clocksource driver mark its device as "always on"
    using pm_genpd_dev_always_on() to protect it from surprise power
    removals and make sh7372_add_standard_devices() add TMU devices on
    sh7372 to the A4R power domain so that their "always on" flags
    are taken into account as appropriate.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Tested-by: Simon Horman <horms@verge.net.au>
    Acked-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcd550745fc54f789c14e7526e0633222c505faa
Merge: 93f378883cec 646783a38982
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 29 14:16:48 2012 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer core updates from Thomas Gleixner.
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      ia64: vsyscall: Add missing paranthesis
      alarmtimer: Don't call rtc_timer_init() when CONFIG_RTC_CLASS=n
      x86: vdso: Put declaration before code
      x86-64: Inline vdso clock_gettime helpers
      x86-64: Simplify and optimize vdso clock_gettime monotonic variants
      kernel-time: fix s/then/than/ spelling errors
      time: remove no_sync_cmos_clock
      time: Avoid scary backtraces when warning of > 11% adj
      alarmtimer: Make sure we initialize the rtctimer
      ntp: Fix leap-second hrtimer livelock
      x86, tsc: Skip refined tsc calibration on systems with reliable TSC
      rtc: Provide flag for rtc devices that don't support UIE
      ia64: vsyscall: Use seqcount instead of seqlock
      x86: vdso: Use seqcount instead of seqlock
      x86: vdso: Remove bogus locking in update_vsyscall_tz()
      time: Remove bogus comments
      time: Fix change_clocksource locking
      time: x86: Fix race switching from vsyscall to non-vsyscall clock

commit 66f03c614c0902ccf7d6160459362a9352f33271
Merge: 34800598b2ee cdc3df6f44f7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 27 16:47:35 2012 -0700

    Merge tag 'dt' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull "ARM: device tree work" from Arnd Bergmann:
     "Most of these patches convert code from using static platform data to
      describing the hardware in the device tree.  This is only the first
      half of the changes for v3.4 because a lot of patches for this topic
      came in the last week before the merge window.
    
      Signed-off-by: Arnd Bergmann <arnd@arndb.de>"
    
    Fix up trivial conflicts in arch/arm/mach-vexpress/{Kconfig,core.h}
    
    * tag 'dt' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc: (86 commits)
      Document: devicetree: add OF documents for arch-mmp
      ARM: dts: append DTS file of pxa168
      ARM: mmp: append OF support on pxa168
      ARM: mmp: enable rtc clk in pxa168
      i2c: pxa: add OF support
      serial: pxa: add OF support
      arm/dts: mt_ventoux: very basic support for TeeJet Mt.Ventoux board
      ARM: OMAP2+: Remove extra ifdefs for board-generic
      ARM: OMAP2+: Fix build error when only ARCH_OMAP2/3 or 4 is selected
      ASoC: DT: Add digital microphone binding to PAZ00 board.
      ARM: dt: Add ARM PMU to tegra*.dtsi
      ARM: at91: at91sam9x5cm/dt: add leds support
      ARM: at91: usb_a9g20/dt: add gpio-keys support
      ARM: at91: at91sam9m10g45ek/dt: add gpio-keys support
      ARM: at91: at91sam9m10g45ek/dt: add leds support
      ARM: at91: usb_a9g20/dt: add leds support
      ARM: at91/pio: add new PIO3 features
      ARM: at91: add sam9_smc.o to at91sam9x5 build
      ARM: at91/tc/clocksource: Add 32 bit variant to Timer Counter
      ARM: at91/tc: add device tree support to atmel_tclib
      ...

commit b0df89868006517417251e02cc4ce5d4b0165885
Merge: 4ba21e868f4b 6c634726352f
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Tue Mar 27 11:30:31 2012 +0100

    Merge branch 'devel-stable' into for-linus
    
    Conflicts:
            arch/arm/Kconfig.debug
            arch/arm/plat-versatile/Kconfig
    Merge fixes:
            arch/arm/mach-integrator/Kconfig
            drivers/clocksource/Kconfig

commit c5c7fb8fbd7cd228132b6e2a17a10f246ffc06ee
Merge: 1b674bf106f5 140f190bc3a3 35f1790e6c6a 513c4ec6e475 42dfc43ee599 b0deca2e0270
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 22 09:28:15 2012 -0700

    Merge branches 'x86-cpu-for-linus', 'x86-boot-for-linus', 'x86-cpufeature-for-linus', 'x86-process-for-linus' and 'x86-uv-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull trivial x86 branches from Ingo Molnar: small one-liners to fix up
    details.
    
    * 'x86-cpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86: Remove some noise from boot log when starting cpus
    
    * 'x86-boot-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86, boot: Fix port argument to inl() function
    
    * 'x86-cpufeature-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86, cpufeature: Add CPU features from Intel document 319433-012A
    
    * 'x86-process-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86_64: Record stack pointer before task execution begins
    
    * 'x86-uv-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/UV: Lower UV rtc clocksource rating

commit 161f7a7161191ab9c2e97f787829ef8dd2b95771
Merge: 2ba68940c893 a078c6d0e628
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 20 10:32:09 2012 -0700

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timer changes for v3.4 from Ingo Molnar
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (32 commits)
      ntp: Fix integer overflow when setting time
      math: Introduce div64_long
      cs5535-clockevt: Allow the MFGPT IRQ to be shared
      cs5535-clockevt: Don't ignore MFGPT on SMP-capable kernels
      x86/time: Eliminate unused irq0_irqs counter
      clocksource: scx200_hrt: Fix the build
      x86/tsc: Reduce the TSC sync check time for core-siblings
      timer: Fix bad idle check on irq entry
      nohz: Remove ts->Einidle checks before restarting the tick
      nohz: Remove update_ts_time_stat from tick_nohz_start_idle
      clockevents: Leave the broadcast device in shutdown mode when not needed
      clocksource: Load the ACPI PM clocksource asynchronously
      clocksource: scx200_hrt: Convert scx200 to use clocksource_register_hz
      clocksource: Get rid of clocksource_calc_mult_shift()
      clocksource: dbx500: convert to clocksource_register_hz()
      clocksource: scx200_hrt:  use pr_<level> instead of printk
      time: Move common updates to a function
      time: Reorder so the hot data is together
      time: Remove most of xtime_lock usage in timekeeping.c
      ntp: Add ntp_lock to replace xtime_locking
      ...

commit 57d13370cfaf6017c68981e66ff5b3bf20a2705c
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Tue Mar 13 22:40:14 2012 +0100

    PM / shmobile: Make MTU2 driver use pm_genpd_dev_always_on()
    
    Make the MTU2 clocksource driver mark its device as "always on"
    using pm_genpd_dev_always_on() to protect it from surprise power
    removals.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Tested-by: Simon Horman <horms@verge.net.au>
    Acked-by: Paul Mundt <lethal@linux-sh.org>
    Cc: stable@vger.kernel.org

commit 615a445f7f8a077c145e737864ae59a4d8717882
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Tue Mar 13 22:40:06 2012 +0100

    PM / shmobile: Make CMT driver use pm_genpd_dev_always_on()
    
    Make the CMT clocksource driver mark its device as "always on"
    using pm_genpd_dev_always_on() to protect it from surprise power
    removals.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Tested-by: Simon Horman <horms@verge.net.au>
    Acked-by: Paul Mundt <lethal@linux-sh.org>
    Cc: stable@vger.kernel.org

commit 2ee619f9487c2acc1efdf2c78e68e2bd51b635fa
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Tue Mar 13 22:40:00 2012 +0100

    PM / shmobile: Make TMU driver use pm_genpd_dev_always_on()
    
    Make the TMU clocksource driver mark its device as "always on"
    using pm_genpd_dev_always_on() to protect it from surprise power
    removals and make sh7372_add_standard_devices() add TMU devices on
    sh7372 to the A4R power domain so that their "always on" flags
    are taken into account as appropriate.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Tested-by: Simon Horman <horms@verge.net.au>
    Acked-by: Paul Mundt <lethal@linux-sh.org>
    Cc: stable@vger.kernel.org

commit f695cf94837de53864180400cbac42cfa370426f
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Mar 14 16:38:15 2012 -0700

    time: Fix change_clocksource locking
    
    change_clocksource() fails to grab locks or call timekeeping_update(),
    which leaves a race window for time inconsistencies.
    
    This adds proper locking and a call to timekeeping_update() to fix this.
    
    CC: Andy Lutomirski <luto@amacapital.net>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit a939e817aa7e199d2fff05a67cb745be32dd5c2d
Author: John Stultz <john.stultz@linaro.org>
Date:   Thu Mar 1 22:11:09 2012 -0800

    time: x86: Fix race switching from vsyscall to non-vsyscall clock
    
    When switching from a vsyscall capable to a non-vsyscall capable
    clocksource, there was a small race, where the last vsyscall
    gettimeofday before the switch might return a invalid time value
    using the new non-vsyscall enabled clocksource values after the
    switch is complete.
    
    This is due to the vsyscall code checking the vclock_mode once
    outside of the seqcount protected section. After it reads the
    vclock mode, it doesn't re-check that the sampled clock data
    that is obtained in the seqcount critical section still matches.
    
    The fix is to sample vclock_mode inside the protected section,
    and as long as it isn't VCLOCK_NONE, return the calculated
    value. If it has changed and is now VCLOCK_NONE, fall back
    to the syscall gettime calculation.
    
    v2:
      * Cleanup checks as suggested by tglx
      * Also fix same issue present in gettimeofday path
    
    CC: Andy Lutomirski <luto@amacapital.net>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 54d0eb4d980994c0743e9a9174ed2697da97f191
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed May 4 18:16:50 2011 -0700

    clocksource: Install completely before selecting
    
    commit e05b2efb82596905ebfe88e8612ee81dec9b6592 upstream.
    
    Christian Hoffmann reported that the command line clocksource override
    with acpi_pm timer fails:
    
     Kernel command line: <SNIP> clocksource=acpi_pm
     hpet clockevent registered
     Switching to clocksource hpet
     Override clocksource acpi_pm is not HRT compatible.
     Cannot switch while in HRT/NOHZ mode.
    
    The watchdog code is what enables CLOCK_SOURCE_VALID_FOR_HRES, but we
    actually end up selecting the clocksource before we enqueue it into
    the watchdog list, so that's why we see the warning and fail to switch
    to acpi_pm timer as requested. That's particularly bad when we want to
    debug timekeeping related problems in early boot.
    
    Put the selection call last.
    
    [PG: 34 doesn't have __clocksource_register_scale, so drop that 1/2]
    
    Reported-by: Christian Hoffmann <email@christianhoffmann.info>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Link: http://lkml.kernel.org/r/%3C1304558210.2943.24.camel%40work-vm%3E
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 0dd6a6edb0124e6c71931ff575b18e15ed6e8603
Author: Zachary Amsden <zamsden@gmail.com>
Date:   Fri Feb 3 15:43:56 2012 -0200

    KVM: Dont mark TSC unstable due to S4 suspend
    
    During a host suspend, TSC may go backwards, which KVM interprets
    as an unstable TSC.  Technically, KVM should not be marking the
    TSC unstable, which causes the TSC clocksource to go bad, but we
    need to be adjusting the TSC offsets in such a case.
    
    Dealing with this issue is a little tricky as the only place we
    can reliably do it is before much of the timekeeping infrastructure
    is up and running.  On top of this, we are not in a KVM thread
    context, so we may not be able to safely access VCPU fields.
    Instead, we compute our best known hardware offset at power-up and
    stash it to be applied to all VCPUs when they actually start running.
    
    Signed-off-by: Zachary Amsden <zamsden@gmail.com>
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
    Signed-off-by: Avi Kivity <avi@redhat.com>

commit 48b3b08e00012382cb52099e509b529305ae0a00
Merge: 6e1d521b9d12 f75622f46794
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Mar 2 13:22:28 2012 +0000

    Merge branch 'at91-3.4-cleanup2+DT' of git://github.com/at91linux/linux-at91 into next/dt
    
    * 'at91-3.4-cleanup2+DT' of git://github.com/at91linux/linux-at91: (22 commits)
      ARM: at91: at91sam9x5cm/dt: add leds support
      ARM: at91: usb_a9g20/dt: add gpio-keys support
      ARM: at91: at91sam9m10g45ek/dt: add gpio-keys support
      ARM: at91: at91sam9m10g45ek/dt: add leds support
      ARM: at91: usb_a9g20/dt: add leds support
      ARM: at91/pio: add new PIO3 features
      ARM: at91: add sam9_smc.o to at91sam9x5 build
      ARM: at91/tc/clocksource: Add 32 bit variant to Timer Counter
      ARM: at91/tc: add device tree support to atmel_tclib
      ARM: at91/tclib: take iomem size from resource
      ARM: at91/pit: add traces in case of error
      ARM: at91: pit add DT support
      ARM: at91: AIC and GPIO IRQ device tree initialization
      ARM: at91/board-dt: remove AIC irq domain from board file
      ARM: at91/gpio: remove the static specification of gpio_chip.base
      ARM: at91/gpio: add .to_irq gpio_chip handler
      ARM: at91/gpio: non-DT builds do not have gpio_chip.of_node field
      ARM: at91/gpio: add irqdomain and DT support
      ARM: at91/gpio: change comments and one variable name
      ARM/USB: at91/ohci-at91: remove the use of irq_to_gpio
      ...

commit 8e315a7b0c082c6743a6636ead5674a2265638d3
Author: Nicolas Ferre <nicolas.ferre@atmel.com>
Date:   Thu Jan 19 18:44:49 2012 +0100

    ARM: at91/tc/clocksource: Add 32 bit variant to Timer Counter
    
    Some SoC have a 32 bit variant of Timer Counter Blocks. We do not
    need the chaining of two 16 bit counters anymore for them.
    
    The SoC nature is deduced from the device tree "compatible" string.
    For non-device-tree configurations, backward compatibility is maintained
    by using the default 16 bit counter configuration.
    
    This patch addresses both the atmel_tclib and its user: tcb_clksrc
    clocksource.
    
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Acked-by: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>

commit 3a61a5dae49bf3d1afb7f75c8acb3607f26565af
Author: Nicolas Ferre <nicolas.ferre@atmel.com>
Date:   Thu Jan 19 10:13:40 2012 +0100

    ARM: at91/tc: add device tree support to atmel_tclib
    
    Device tree support added to atmel_tclib: the generic Timer Counter
    library. This is used by the clocksource/clockevent driver tcb_clksrc.
    
    The current DT enabled platforms are also modified to use it:
    - .dtsi files are modified to add Timer Counter Block entries
    - alias are created to allow identification of each block
    - clkdev lookup tables are added for clocks identification.
    
    Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>
    Acked-by: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
    Acked-by: Grant Likely <grant.likely@secretlab.ca>

commit 645c56a75882830c0ba6e7461f07d099a9c87e69
Author: Paul Walmsley <paul@pwsan.com>
Date:   Fri Feb 24 10:34:32 2012 -0800

    ARM: OMAP2xxx: PM: remove obsolete timer disable code in the suspend path
    
    Remove omap_{read,write}l() from the 24xx PM code.  The clocksource
    code should now handle what this was supposed to do.
    
    Tested on N800 -- but it's hard to say whether this fixes anything.
    OMAP24xx static suspend path is currently broken, and this patch
    doesn't change that.
    
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Cc: Rob Herring <robherring2@gmail.com>
    Acked-by: Kevin Hilman <khilman@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 10ea9d6f5663c3ed51f91cd037b4b9b147273cbb
Author: Ingo Molnar <mingo@elte.hu>
Date:   Wed Feb 22 13:19:37 2012 +0100

    clocksource: scx200_hrt: Fix the build
    
    This commit:
    
      12d6d41276de: clocksource: scx200_hrt: Convert scx200 to use clocksource_register_hz
    
    Breaks the build on x86-32:
    
      drivers/clocksource/scx200_hrt.c: In function ‘init_hrt_clocksource’:
      drivers/clocksource/scx200_hrt.c:95:0: error: unterminated argument list invoking macro "pr_info"
      drivers/clocksource/scx200_hrt.c:84:2: error: ‘pr_info’ undeclared (first use in this function)
    
    It could not possibly have been build tested, because it had this mismerge:
    
            pr_info("enabling scx200 high-res timer (%s MHz +%d ppm)\n",
            printk(KERN_INFO "enabling scx200 high-res timer (%s MHz +%d ppm)\n",
                    mhz27 ? "27":"1", ppm);
    
    Cc: Jim Cromie <jim.cromie@gmail.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/n/tip-jceb26fns5w7tv8edlivhxpa@git.kernel.org
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 8e3657903589f5a5a36a95f660a33e137b3da6f5
Author: Manuel Lauss <manuel.lauss@googlemail.com>
Date:   Tue Dec 20 17:37:29 2011 +0100

    MIPS: Alchemy: Increase minimum timeout for 32kHz timer.
    
    Since a clocksource change post 3.2-rc1, tasks on my DB1500 board
    hang after random amounts of time (from a few minutes to a few hours),
    regardless of load.  Debugging showed that the compare-match register
    value is a few seconds lower than the current counter value.
    
    The minimum value of 8 was initialy determined by a trial-and-error
    approach.  Currently it is sufficient for all Alchemys (without PCI
    apparently), independent of CPU clock;  only the DB1500 and DB1550
    boards experience these timer-related tasks hangs now.
    
    This patch increases the minimum timeout by 1 (to 9 counter ticks)
    which seems sufficient since the systems are still working perfectly
    fine after over 24 hours.
    
    Signed-off-by: Manuel Lauss <manuel.lauss@googlemail.com>
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/3214/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit b0deca2e0270135f797e81bdb0743e50fd1dc58d
Author: Dimitri Sivanich <sivanich@sgi.com>
Date:   Fri Feb 17 08:16:41 2012 -0600

    x86/UV: Lower UV rtc clocksource rating
    
    Lower the rating of the UV rtc clocksource to just below that of
    the tsc, to improve performance.
    
    Reading the tsc clocksource has lower latency than reading the
    rtc, so favor it in situations where it is synchronized and
    stable.  When the tsc is unsynchronized, the rtc needs to be the
    chosen clocksource.
    
    Signed-off-by: Dimitri Sivanich <sivanich@sgi.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Jack Steiner <steiner@sgi.com>
    Link: http://lkml.kernel.org/r/20120217141641.GA28063@sgi.com
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 9b612fa627105af2738d9205554e2a6dc8d32228
Merge: 0a8a2e78b7ee b519508298e0
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Feb 15 20:28:08 2012 +0100

    Merge branch 'fortglx/3.4/clocksource' of git://git.linaro.org/people/jstultz/linux into timers/core

commit a7bf61620831c5578e434429bc7fa0fd0219c40c
Author: Rob Herring <rob.herring@calxeda.com>
Date:   Mon Dec 12 15:29:08 2011 -0600

    ARM: timer-sp: add sched_clock support
    
    Add a sched_clock support for the sp804 timer. The clocksource timer
    can optionally initialize itself as sched_clock timer.
    
    Signed-off-by: Rob Herring <rob.herring@calxeda.com>

commit b519508298e0292e1771eecf14aaf67755adc39d
Author: Arjan van de Ven <arjan@linux.intel.com>
Date:   Mon Jan 30 20:23:30 2012 -0800

    clocksource: Load the ACPI PM clocksource asynchronously
    
    The ACPI clocksource takes quite some time to initialize,
    and this increases the boot time of the kernel for a
    double digit percentage. This while almost all modern
    systems will be using the HPET already anyway.
    
    This patch turns the clocksource loading into an asynchronous
    operation; which means it won't hold up the boot while
    still becoming available normally.
    
    To make this work well, an udelay() had to be turned into an
    usleep_range() so that on UP systems, we yield the CPU to
    regular boot tasks instead of spinning.
    
    CC: John Stultz <johnstul@us.ibm.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Len Brown <lenb@kernel.org>
    
    Signed-off-by: Arjan van de Ven <arjan@linux.intel.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 12d6d41276def096cb3f7dc36f438db9ed6a0a8d
Author: John Stultz <john.stultz@linaro.org>
Date:   Mon Jan 9 16:15:03 2012 -0800

    clocksource: scx200_hrt: Convert scx200 to use clocksource_register_hz
    
    Converts the scx200 clocksource to using clocksource_register_hz.
    
    CC: Jim Cromie <jim.cromie@gmail.com>
    Tested-by: Jim Cromie <jim.cromie@gmail.com>
    Acked-by: Jim Cromie <jim.cromie@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit c7f798e3722610d486e951f04bbc00b6ba124d62
Author: Yong Zhang <yong.zhang0@gmail.com>
Date:   Thu Dec 1 11:25:59 2011 -0800

    clocksource: Get rid of clocksource_calc_mult_shift()
    
    No one is using this, so encourage the use of
    clocksource_register_hz/khz(), and drop this helper.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Yong Zhang <yong.zhang0@gmail.com>
    [jstultz: tweaked commit message]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 13f0f030fb9d52c7fd48f3e6a2fe9ab0123875da
Author: Yong Zhang <yong.zhang0@gmail.com>
Date:   Thu Dec 1 15:20:15 2011 +0800

    clocksource: dbx500: convert to clocksource_register_hz()
    
    Convert clocksource_dbx500_prcmu to use clocksource_register_hz.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Mattias Wallin <mattias.wallin@stericsson.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Yong Zhang <yong.zhang0@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit d976f7626627117c211137cd2aaf8c1656e6627d
Author: Jim Cromie <jim.cromie@gmail.com>
Date:   Thu Jan 26 15:52:15 2012 -0800

    clocksource: scx200_hrt:  use pr_<level> instead of printk
    
    Switch from printk to using pr_<level>.
    
    Signed-off-by: Jim Cromie <jim.cromie@gmail.com>
    [added commit msg & tweaked subject -jstultz]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 36f21f1ce419a552227b32d445e40c2d99286275
Author: Julia Lawall <Julia.Lawall@lip6.fr>
Date:   Thu Jan 12 10:55:15 2012 +0100

    clocksource: cyclone: Add missing iounmap
    
    Add missing iounmap in error handling code, in a case where the function
    already preforms iounmap on some other execution path.
    
    A simplified version of the semantic match that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression e;
    statement S,S1;
    int ret;
    @@
    e = \(ioremap\|ioremap_nocache\)(...)
    ... when != iounmap(e)
    if (<+...e...+>) S
    ... when any
        when != iounmap(e)
    *if (...)
       { ... when != iounmap(e)
         return ...; }
    ... when any
    iounmap(e);
    // </smpl>
    
    Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
    [fixed up subject -jstultz]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit dbc3982ae286e934e71f0b44e78d14844a9ca83b
Author: Vaibhav Hiremath <hvaibhav@ti.com>
Date:   Mon Jan 23 12:18:14 2012 +0530

    ARM: OMAP2+: timer: Fix crash due to wrong arg to __omap_dm_timer_read_counter
    
    Commit 2f0778af (ARM: 7205/2: sched_clock: allow sched_clock to be
    selected at runtime) had a typo for the case when CONFIG_OMAP_32K_TIMER
    is not set.
    
    In dmtimer_read_sched_clock(), wrong argument was getting passed to
    __omap_dm_timer_read_counter() function call; instead of "&clksrc",
    we were passing "clksrc.io_base", which results into kernel crash.
    
    To reproduce kernel crash, just disable the CONFIG_OMAP_32K_TIMER config
    option (and DEBUG_LL) and build/boot the kernel.
    This will use dmtimer as a kernel clocksource and lead to kernel
    crash during boot  -
    
    [    0.000000] OMAP clocksource: GPTIMER2 at 26000000 Hz
    [    0.000000] sched_clock: 32 bits at 26MHz, resolution 38ns, wraps every
    165191ms
    [    0.000000] Unable to handle kernel paging request at virtual address
    00030ef1
    [    0.000000] pgd = c0004000
    [    0.000000] [00030ef1] *pgd=00000000
    [    0.000000] Internal error: Oops: 5 [#1] SMP
    [    0.000000] Modules linked in:
    [    0.000000] CPU: 0    Not tainted  (3.3.0-rc1-11574-g0c76665-dirty #3)
    [    0.000000] PC is at dmtimer_read_sched_clock+0x18/0x4c
    [    0.000000] LR is at update_sched_clock+0x10/0x84
    [    0.000000] pc : [<c00243b8>]    lr : [<c0018684>]    psr: 200001d3
    [    0.000000] sp : c0641f38  ip : c0641e18  fp : 0000000a
    [    0.000000] r10: 151c3303  r9 : 00000026  r8 : 76276259
    [    0.000000] r7 : 00028547  r6 : c065ac80  r5 : 431bde82  r4 : c0655968
    [    0.000000] r3 : 00030ef1  r2 : fb032000  r1 : 00000028  r0 : 00000001
    
    Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
    [tony@atomide.com: updated comments]
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit d3b7737f2b70ed2fb7cef985e70d04fb5dee7b7c
Merge: dc6821e0cfe7 070680218379
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Thu Jan 12 11:53:55 2012 -0500

    Merge commit '070680218379e15c1901f4bf21b98e3cbf12b527' into stable/for-linus-fixes-3.3
    
    * commit '070680218379e15c1901f4bf21b98e3cbf12b527': (50 commits)
      xen-balloon: convert sysdev_class to a regular subsystem
      clocksource: convert sysdev_class to a regular subsystem
      ibm_rtl: convert sysdev_class to a regular subsystem
      edac: convert sysdev_class to a regular subsystem
      rtmutex-tester: convert sysdev_class to a regular subsystem
      driver-core: implement 'sysdev' functionality for regular devices and buses
      kref: fix up the kfree build problems
      kref: Remove the memory barriers
      kref: Implement kref_put in terms of kref_sub
      kref: Inline all functions
      Drivers: hv: Get rid of an unnecessary check in hv.c
      Drivers: hv: Make the vmbus driver unloadable
      Drivers: hv: Fix a memory leak
      Documentation: Update stable address
      MAINTAINERS: stable: Update address
      w1: add fast search for single slave bus
      driver-core: skip uevent generation when nobody is listening
      drivers: hv: Don't OOPS when you cannot init vmbus
      firmware: google: fix gsmi.c build warning
      drivers_base: make argument to platform_device_register_full const
      ...

commit e8cbce976050a9f874a8b07012ddeb9b9eb59603
Merge: b3c37522928b 27fdb577435e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 9 14:40:48 2012 -0800

    Merge tag 'timer' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    timer changes for msm
    
    A very simple series. We used to have more churn in the timer
    area, so this is kept separate. Will probably put this into the
    drivers series next time.
    
    * tag 'timer' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc:
      msm: timer: Use clockevents_config_and_register()
      msm: timer: Setup interrupt after registering clockevent
      msm: timer: Remove SoC specific #ifdefs
      msm: timer: Remove msm_clocks[] and simplify code
      msm: timer: Fix ONESHOT mode interrupts
      msm: timer: Use GPT for clockevents and DGT for clocksource
      msm: timer: Cleanup #includes and #defines
      msm: timer: Tighten #ifdef for local timer support

commit 376613e81ddc68f545fd5c87ffc3ad222b7abe5f
Merge: 0db49b72bce2 0518469d0a32
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jan 6 13:57:44 2012 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86, tsc: Skip TSC synchronization checks for tsc=reliable
      clocksource: Convert tcb_clksrc to use clocksource_register_hz/khz
      clocksource: cris: Convert to clocksource_register_khz
      clocksource: xtensa: Convert to clocksource_register_hz/khz
      clocksource: um: Convert to clocksource_register_hz/khz
      clocksource: parisc: Convert to clocksource_register_hz/khz
      clocksource: m86k: Convert to clocksource_register_hz/khz
      time: x86: Replace LATCH with PIT_LATCH in i8253 clocksource driver
      time: x86: Remove CLOCK_TICK_RATE from acpi_pm clocksource driver
      time: x86: Remove CLOCK_TICK_RATE from mach_timer.h
      time: x86: Remove CLOCK_TICK_RATE from tsc code
      time: Fix spelling mistakes in new comments
      time: fix bogus comment in timekeeping_get_ns_raw

commit cfef0320ead7d707c363b18bb6f13f6c3bda316a
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Jan 2 14:50:15 2012 +0100

    ARM: 7261/1: clocksource/ux500-prcmu: fix sched_clock breakage
    
    commit 2f0778afac79bd8d226225556858a636931eeabc adding
    runtime-selectable sched_clock() forgot to patch this
    driver down in drivers/clocksource, this patch fixes
    the problem.
    
    Reported-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Linus Walleij <linus.walleij@stericsson.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit a2a3dfb8efc5d14cf39358ae0ec1da39667c2e6c
Author: John Stultz <johnstul@us.ibm.com>
Date:   Tue Oct 25 11:46:10 2011 -0700

    clocksource: m86k: Convert to clocksource_register_hz/khz
    
    Updated to merge the valid bits of the two m68k patches.
    
    This converts the m86k clocksources to use clocksource_register_hz/khz
    
    This is untested, so any assistance in testing would be appreciated!
    
    CC: Geert Uytterhoeven <geert@linux-m68k.org>
    CC: Greg Ungerer <gerg@uclinux.org>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

commit 5fbd305dd2b661a243013cf444d2a32bfec2f701
Merge: a205b082189b b1b73d095084
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 20 11:42:38 2011 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      time/clocksource: Fix kernel-doc warnings
      rtc: m41t80: Workaround broken alarm functionality
      rtc: Expire alarms after the time is set.

commit b1b73d095084e754562961c443aa8f6587a55f8e
Author: Kusanagi Kouichi <slash@ac.auone-net.jp>
Date:   Mon Dec 19 18:13:19 2011 +0900

    time/clocksource: Fix kernel-doc warnings
    
    Fix various KernelDoc build warnings.
    
    Signed-off-by: Kusanagi Kouichi <slash@ac.auone-net.jp>
    Cc: John Stultz <johnstul@us.ibm.com>
    Link: http://lkml.kernel.org/r/20111219091320.0D5AF6FC03D@msa105.auone-net.jp
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit d369a5d8fc70710236ae2d06a0e42dce483712df
Author: Kay Sievers <kay.sievers@vrfy.org>
Date:   Wed Dec 14 15:28:51 2011 -0800

    clocksource: convert sysdev_class to a regular subsystem
    
    After all sysdev classes are ported to regular driver core entities, the
    sysdev implementation will be entirely removed from the kernel.
    
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Kay Sievers <kay.sievers@vrfy.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 5a643352d2166077f88180372431ea5e90212b15
Author: Yang Honggang (Joseph) <eagle.rtlinux@gmail.com>
Date:   Thu Dec 1 22:22:41 2011 -0500

    clocksource: Fix bug with max_deferment margin calculation
    
    commit b1f919664d04a8d0ba29cb76673c7ca3325a2006 upstream.
    
    In order to leave a margin of 12.5% we should >> 3 not >> 5.
    
    Signed-off-by: Yang Honggang (Joseph) <eagle.rtlinux@gmail.com>
    [jstultz: Modified commit subject]
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit be80893d309e256fe05a1e55d440bd6188ba2748
Author: John Stultz <john.stultz@linaro.org>
Date:   Mon Oct 31 17:06:35 2011 -0400

    clocksource: Avoid selecting mult values that might overflow when adjusted
    
    commit d65670a78cdbfae94f20a9e05ec705871d7cdf2b upstream.
    
    For some frequencies, the clocks_calc_mult_shift() function will
    unfortunately select mult values very close to 0xffffffff.  This
    has the potential to overflow when NTP adjusts the clock, adding
    to the mult value.
    
    This patch adds a clocksource.maxadj value, which provides
    an approximation of an 11% adjustment(NTP limits adjustments to
    500ppm and the tick adjustment is limited to 10%), which could
    be made to the clocksource.mult value. This is then used to both
    check that the current mult value won't overflow/underflow, as
    well as warning us if the timekeeping_adjust() code pushes over
    that 11% boundary.
    
    v2: Fix max_adjustment calculation, and improve WARN_ONCE
    messages.
    
    v3: Don't warn before maxadj has actually been set
    
    CC: Yong Zhang <yong.zhang0@gmail.com>
    CC: David Daney <ddaney.cavm@gmail.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Chen Jie <chenj@lemote.com>
    CC: zhangfx <zhangfx@lemote.com>
    Reported-by: Chen Jie <chenj@lemote.com>
    Reported-by: zhangfx <zhangfx@lemote.com>
    Tested-by: Yong Zhang <yong.zhang0@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 4078977c46f627f553ed2d8ea047b9bf25dee48d
Author: Yang Honggang (Joseph) <eagle.rtlinux@gmail.com>
Date:   Thu Dec 1 22:22:41 2011 -0500

    clocksource: Fix bug with max_deferment margin calculation
    
    commit b1f919664d04a8d0ba29cb76673c7ca3325a2006 upstream.
    
    In order to leave a margin of 12.5% we should >> 3 not >> 5.
    
    Signed-off-by: Yang Honggang (Joseph) <eagle.rtlinux@gmail.com>
    [jstultz: Modified commit subject]
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 40c043b077c6e377c8440d71563c055d0c4f0f0a
Merge: f14aa871c7e1 de28f25e8244
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 5 16:53:43 2011 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      clockevents: Set noop handler in clockevents_exchange_device()
      tick-broadcast: Stop active broadcast device when replacing it
      clocksource: Fix bug with max_deferment margin calculation
      rtc: Fix some bugs that allowed accumulating time drift in suspend/resume
      rtc: Disable the alarm in the hardware

commit f9b15df466ba923a5832c9121ad8327ccf5483ef
Author: Alessandro Rubini <rubini@gnudd.com>
Date:   Sat Oct 29 00:48:42 2011 +0200

    x86/Kconfig: Cyclone-timer depends on x86-summit
    
    CONFIG_X86_CYCLONE_TIMER depends on CONFIG_X86_32_NON_STANDARD,
    which forces drivers/clocksource/cyclone.c to be compiled. The
    file doesn't do anything unless enabled by
    arch/x86/kernel/apic/summit_32.c
    
    Make CONFIG_X86_CYCLONE_TIMER depend by X86_SUMMIT instead, to
    avoid unnecessary code in other non-standard systems.
    
    Signed-off-by: Alessandro Rubini <rubini@gnudd.com>
    Cc: john stultz <johnstul@us.ibm.com>
    Link: http://lkml.kernel.org/r/20111028224842.GA7582@mail.gnudd.com
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 28a00184be261e3dc152ba0d664a067bbe235b6a
Author: Suresh Siddha <suresh.b.siddha@intel.com>
Date:   Fri Nov 4 15:42:17 2011 -0700

    x86, tsc: Skip TSC synchronization checks for tsc=reliable
    
    tsc=reliable boot parameter is supposed to skip all the TSC
    stablility checks during boot time.
    
    On a 8-socket system where we want to run an experiment with the
    "tsc=reliable" boot option, TSC synchronization checks are not
    getting skipped and marking the TSC as not stable.
    
    Check for tsc_clocksource_reliable (which is set via
    tsc=reliable or for platforms supporting synthetic TSC_RELIABLE
    feature bit etc) and when set, skip the TSC synchronization
    tests during boot.
    
    Signed-off-by: Suresh Siddha <suresh.b.siddha@intel.com>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Tested-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Link: http://lkml.kernel.org/r/1320446537.15071.14.camel@sbsiddha-desk.sc.intel.com
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit b1f919664d04a8d0ba29cb76673c7ca3325a2006
Author: Yang Honggang (Joseph) <eagle.rtlinux@gmail.com>
Date:   Thu Dec 1 22:22:41 2011 -0500

    clocksource: Fix bug with max_deferment margin calculation
    
    In order to leave a margin of 12.5% we should >> 3 not >> 5.
    
    CC: stable@kernel.org
    Signed-off-by: Yang Honggang (Joseph) <eagle.rtlinux@gmail.com>
    [jstultz: Modified commit subject]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit c28800a9c3caaf387d85ac665a25ebe99e480295
Merge: ce8f55c2a0ff 27c9cd7e6016
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Nov 28 08:43:52 2011 -0800

    Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      hrtimer: Fix extra wakeups from __remove_hrtimer()
      timekeeping: add arch_offset hook to ktime_get functions
      clocksource: Avoid selecting mult values that might overflow when adjusted
      time: Improve documentation of timekeeeping_adjust()

commit 2f5893cf42ca10a1eb73bc527e2198847f4d0a79
Author: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
Date:   Sun Oct 16 18:17:09 2011 +0800

    ARM: at91: define CLOCK_TICK_RATE to bogus value except A91X40
    
    We have a clocksource which renders CLOCK_TICK_RATE useless. Define
    it to a bogus value to get rid of some ifdeffery.
    
    use local LATCH for at91rm9200 timer
    
    but keep it for A91X40 as we do not use a clocksource
    
    Signed-off-by: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
    Cc: Nicolas Ferre <nicolas.ferre@atmel.com>

commit 11b8633ada8633991e584951d0027f2741162201
Author: Anton Blanchard <anton@samba.org>
Date:   Wed Nov 23 20:07:19 2011 +0000

    powerpc/time: Use clocksource_register_hz
    
    Use clocksource_register_hz which calculates the shift/mult
    factors for us. Also remove the shift = 22 assumption in
    vsyscall_update - thanks to Paul Mackerras and John Stultz for
    catching that.
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

commit f5a54dd7952e9032785cd1ef0dde72cd61025341
Author: John Stultz <john.stultz@linaro.org>
Date:   Fri May 20 16:45:37 2011 -0700

    clocksource: Convert tcb_clksrc to use clocksource_register_hz/khz
    
    Convert tcb_clksrc to use clocksource_register_hz.
    
    CC: Nikolaus Voss <n.voss@weinmann.de>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Nikolaus Voss <n.voss@weinmann.de>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 027f6ad7bfa97cf8f75e9d81c15256d828eb0809
Author: John Stultz <johnstul@us.ibm.com>
Date:   Tue Oct 19 17:58:48 2010 -0700

    clocksource: cris: Convert to clocksource_register_khz
    
    This converts the cris architecture to use clocksource_register_khz
    
    This is untested, so any help from maintainers would be appreciated.
    
    CC: Mikael Starvik <starvik@axis.com>
    CC: Jesper Nilsson <jesper.nilsson@axis.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit a139723bec122053a94c80596c8b991b860ffb91
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Apr 26 20:25:56 2010 -0700

    clocksource: xtensa: Convert to clocksource_register_hz/khz
    
    This converts the xtensa clocksource to use clocksource_register_hz/khz
    
    This is untested, so any assistance in testing would be appreciated!
    
    CC: Chris Zankel <chris@zankel.net>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 60d687e7d4724a7e8826f6579ca036d4343a5386
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Apr 26 20:25:16 2010 -0700

    clocksource: um: Convert to clocksource_register_hz/khz
    
    This converts the um clocksource to use clocksource_register_hz/khz
    
    This is untested, so any assistance in testing would be appreciated!
    
    CC: Jeff Dike <jdike@addtoit.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 63e496340f07b58925f690451c93171d9b04fe1e
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Apr 26 20:23:50 2010 -0700

    clocksource: parisc: Convert to clocksource_register_hz/khz
    
    This converts the parisc clocksources to use clocksource_register_hz/khz
    
    This is untested, so any assistance in testing would be appreciated!
    
    CC: Kyle McMartin <kyle@mcmartin.ca>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 010f3f1692b22f8ddabdccc6526915e181e49447
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Apr 26 20:21:52 2010 -0700

    clocksource: m86k: Convert to clocksource_register_hz/khz
    
    This converts the m86k clocksources to use clocksource_register_hz/khz
    
    CC: Geert Uytterhoeven <geert@linux-m68k.org>
    CC: Greg Ungerer <gerg@uclinux.org>
    Acked-by: Greg Ungerer <gerg@uclinux.org>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 5f724e84f91550985a9ae3deb6e0dbc8d8396ed7
Author: Deepak Saxena <dsaxena@linaro.org>
Date:   Tue Nov 1 14:25:25 2011 -0700

    time: x86: Replace LATCH with PIT_LATCH in i8253 clocksource driver
    
    The i8253 clockevent & clocksource driver uses PIT_LATCH
    except for two cases where it uses LATCH:
    
    1)
            /* VIA686a test code... reset the latch if count > max + 1 */
            if (count > LATCH) {
    
    LATCH is based on CLOCK_TICK_RATE which is defined as
    PIT_TICK_RATE on x86 so this should just be the later.
    
    2)
            ...
            switch (mode) {
            case CLOCK_EVT_MODE_PERIODIC:
                    /* binary, mode 2, LSB/MSB, ch 0 */
                    outb_p(0x34, PIT_MODE);
                    outb_p(LATCH & 0xff , PIT_CH0); /* LSB */
                    outb_p(LATCH >> 8 , PIT_CH0);           /* MSB */
            ...
    
    MIPS and ARM are the only other arches that use this driver. In
    the MIPS case CLOCK_TICK_RATE is defined as the same value as
    PIT_TICK_RATE. For ARM, the only machine that uses it is
    Footbridge which has a totally bogus CLOCK_TICK_RATE according
    to the comments. Furthermore, the clockevent_i8253_init()
    initializes the clockevent with PIT_TIC_RATE, so there's
    no reason to use the generic LATCH.
    
    This is part of work to remove and depecrate the global
    CLOCK_TICK_RATE symbol.
    
    Signed-off-by: Deepak Saxena <dsaxena@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit cbf1599b3589c6c73999095ca25e9c3f23042e19
Author: Deepak Saxena <dsaxena@linaro.org>
Date:   Tue Nov 1 14:25:01 2011 -0700

    time: x86: Remove CLOCK_TICK_RATE from acpi_pm clocksource driver
    
    The acpi_pm clocksource driver uses CLOCK_TICK_RATE which is
    defined as PIT_TICK_RATE on x86. This patch cleans it up to
    just use the later so that CLOCK_TICK_RATE can be depecrated.
    
    Signed-off-by: Deepak Saxena <dsaxena@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit d65670a78cdbfae94f20a9e05ec705871d7cdf2b
Author: John Stultz <john.stultz@linaro.org>
Date:   Mon Oct 31 17:06:35 2011 -0400

    clocksource: Avoid selecting mult values that might overflow when adjusted
    
    For some frequencies, the clocks_calc_mult_shift() function will
    unfortunately select mult values very close to 0xffffffff.  This
    has the potential to overflow when NTP adjusts the clock, adding
    to the mult value.
    
    This patch adds a clocksource.maxadj value, which provides
    an approximation of an 11% adjustment(NTP limits adjustments to
    500ppm and the tick adjustment is limited to 10%), which could
    be made to the clocksource.mult value. This is then used to both
    check that the current mult value won't overflow/underflow, as
    well as warning us if the timekeeping_adjust() code pushes over
    that 11% boundary.
    
    v2: Fix max_adjustment calculation, and improve WARN_ONCE
    messages.
    
    v3: Don't warn before maxadj has actually been set
    
    CC: Yong Zhang <yong.zhang0@gmail.com>
    CC: David Daney <ddaney.cavm@gmail.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Chen Jie <chenj@lemote.com>
    CC: zhangfx <zhangfx@lemote.com>
    CC: stable@kernel.org
    Reported-by: Chen Jie <chenj@lemote.com>
    Reported-by: zhangfx <zhangfx@lemote.com>
    Tested-by: Yong Zhang <yong.zhang0@gmail.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 2081a6b57fba2717fa4b04fe978abad238e1f9e4
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Tue Nov 8 10:34:08 2011 -0800

    msm: timer: Remove SoC specific #ifdefs
    
    The timer frequency is currently ifdefed in addition to setting
    the DGT clock's divider value on SCORPIONMP targets. Setup the
    frequency dynamically using the existing cpu_is_*() branches and
    assign a custom clocksource read function for 7x01a to get the
    shift out of the generic path.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David Brown <davidb@codeaurora.org>

commit 2a00c1068b2c1ae451e230ef8bd010d7b2f56f54
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Tue Nov 8 10:34:07 2011 -0800

    msm: timer: Remove msm_clocks[] and simplify code
    
    We can simplify the timer code now that we only use the DGT for
    the clocksource and the GPT for the clockevent. Get rid of the
    msm_clocks[] array and propagate the changes throughout the code.
    This reduces the lines of code in this file and improves
    readability.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David Brown <davidb@codeaurora.org>

commit dd15ab814149df65187943c32ca09e4eeaac0047
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Tue Nov 8 10:34:05 2011 -0800

    msm: timer: Use GPT for clockevents and DGT for clocksource
    
    The clocksource shouldn't stop ticking when the clockevent stops.
    This is exactly what happens today with MSM timers. The same
    hardware is used for both the clockevent and the clocksource
    because the ratings of the two are the same.
    
    Fix this by registering a clockevent based on the GPT and a
    clocksource based on the DGT. This removes any other possible
    configuration (e.g. a GPT clocksource and a DGT clockevent) but
    that shouldn't be a big issue since we want higher precision
    timing than high precision scheduling interrupts.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: David Brown <davidb@codeaurora.org>

commit f8723d9144b7bc47a8ab994bad990508c1ab848c
Author: Philipp Hahn <hahn@univention.de>
Date:   Mon Sep 12 12:52:51 2011 -0300

    KVM: x86: Reset tsc_timestamp on TSC writes
    
    There is no upstream commit ID for this patch since it is not a straight
    backport from upstream. It is a fix only relevant to 2.6.32.y.
    
    Since 1d5f066e0b63271b67eac6d3752f8aa96adcbddb from 2.6.37 was
    back-ported to 2.6.32.40 as ad2088cabe0fd7f633f38ba106025d33ed9a2105,
    the following patch is needed to add the needed reset logic to 2.6.32 as
    well.
    
    
    Bug #23257: Reset tsc_timestamp on TSC writes
    
    vcpu->last_guest_tsc is updated in vcpu_enter_guest() and kvm_arch_vcpu_put()
    by getting the last value of the TSC from the guest.
    On reset, the SeaBIOS resets the TSC to 0, which triggers a bug on the next
    call to kvm_write_guest_time(): Since vcpu->hw_clock.tsc_timestamp still
    contains the old value before the reset, "max_kernel_ns = vcpu->last_guest_tsc
    - vcpu->hw_clock.tsc_timestamp" gets negative. Since the variable is u64, it
     gets translated to a large positive value.
    
    [9333.197080]
    vcpu->last_guest_tsc        =209_328_760_015           ←
    vcpu->hv_clock.tsc_timestamp=209_328_708_109
    vcpu->last_kernel_ns        =9_333_179_830_643
    kernel_ns                   =9_333_197_073_429
    max_kernel_ns               =9_333_179_847_943         ←
    
    [9336.910995]
    vcpu->last_guest_tsc        =9_438_510_584             ←
    vcpu->hv_clock.tsc_timestamp=211_080_593_143
    vcpu->last_kernel_ns        =9_333_763_732_907
    kernel_ns                   =9_336_910_990_771
    max_kernel_ns               =6_148_296_831_006_663_830 ←
    
    For completeness, here are the values for my 3 GHz CPU:
    vcpu->hv_clock.tsc_shift         =-1
    vcpu->hv_clock.tsc_to_system_mul =2_863_019_502
    
    This makes the guest kernel crawl very slowly when clocksource=kvmclock is
    used: sleeps take way longer than expected and don't match wall clock any more.
    The times printed with printk() don't match real time and the reboot often
    stalls for long times.
    
    In linux-git this isn't a problem, since on every MSR_IA32_TSC write
    vcpu->arch.hv_clock.tsc_timestamp is reset to 0, which disables above logic.
    The code there is only in arch/x86/kvm/x86.c, since much of the kvm-clock
    related code has been refactured for 2.6.37:
            99e3e30a arch/x86/kvm/x86.c
            (Zachary Amsden            2010-08-19 22:07:17 -1000 1084)
            vcpu->arch.hv_clock.tsc_timestamp = 0;
    
    Signed-off-by: Philipp Hahn <hahn@univention.de>
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit ac5761a650d22dd7dfad4d417463a0981d2da0a4
Merge: 25498e5b3df9 eed1e576507b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 1 20:18:05 2011 -0700

    Merge branch 'next/timer' of git://git.linaro.org/people/arnd/arm-soc
    
    * 'next/timer' of git://git.linaro.org/people/arnd/arm-soc:
      clocksource: fixup ux500 build problems
      ARM: omap: use __devexit_p in dmtimer driver
      ARM: ux500: Reprogram timers upon resume
      ARM: plat-nomadik: timer: Export reset functions
      ARM: plat-nomadik: timer: Add support for periodic timers
      ARM: ux500: Move timer code to separate file
      ARM: ux500: add support for clocksource DBX500 PRCMU
      clocksource: add DBX500 PRCMU Timer support
      ARM: plat-nomadik: MTU sched_clock as an option
      ARM: OMAP: dmtimer: add error handling to export APIs
      ARM: OMAP: dmtimer: low-power mode support
      ARM: OMAP: dmtimer: skip reserved timers
      ARM: OMAP: dmtimer: pm_runtime support
      ARM: OMAP: dmtimer: switch-over to platform device driver
      ARM: OMAP: dmtimer: platform driver
      ARM: OMAP2+: dmtimer: convert to platform devices
      ARM: OMAP1: dmtimer: conversion to platform devices
      ARM: OMAP2+: dmtimer: add device names to flck nodes
      ARM: OMAP: Add support for dmtimer v2 ip

commit 7a707b89202f905bd9f9fbde326933c59a81214c
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sun Jul 3 14:03:12 2011 -0400

    drivers/media: Add module.h to all files using it implicitly
    
    A pending cleanup will mean that module.h won't be implicitly
    everywhere anymore.  Make sure the modular drivers in clocksource
    are actually calling out for <module.h> explicitly in advance.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7deeab5dc414240a341e80f41b5f00620aa9ef98
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sun Jul 3 13:36:22 2011 -0400

    drivers/clocksource: Add module.h to those who were using it implicitly
    
    A pending cleanup will mean that module.h won't be implicitly
    everywhere anymore.  Make sure the modular drivers in clocksource
    are actually calling out for <module.h> explicitly in advance.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8f86a2c3cb90e8bb0733de2d2b0abbe7050bb536
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sun Jul 3 13:39:48 2011 -0400

    hid: Add module.h to fix up implicit users of it
    
    A pending cleanup will mean that module.h won't be implicitly
    everywhere anymore.  Make sure the modular drivers in clocksource
    are actually calling out for <module.h> explicitly in advance.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit cc21fe518a971bb2b0ab8370ec46ea21e84c57ab
Merge: a93f3e9f424f 6f4151c89b7d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 28 05:08:40 2011 -0700

    Merge branch 'x86-hyperv-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    * 'x86-hyperv-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86: Hyper-V: Integrate the clocksource with Hyper-V detection code
    
    Fix up conflicts in drivers/staging/hv/Makefile manually (some of the hv
    code has moved out of staging to drivers/hv/)

commit 39adff5f69d6849ca22353a88058c9f8630528c0
Merge: 8a4a8918ed6e e35f95b36e43
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 26 17:15:03 2011 +0200

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (23 commits)
      time, s390: Get rid of compile warning
      dw_apb_timer: constify clocksource name
      time: Cleanup old CONFIG_GENERIC_TIME references that snuck in
      time: Change jiffies_to_clock_t() argument type to unsigned long
      alarmtimers: Fix error handling
      clocksource: Make watchdog reset lockless
      posix-cpu-timers: Cure SMP accounting oddities
      s390: Use direct ktime path for s390 clockevent device
      clockevents: Add direct ktime programming function
      clockevents: Make minimum delay adjustments configurable
      nohz: Remove "Switched to NOHz mode" debugging messages
      proc: Consider NO_HZ when printing idle and iowait times
      nohz: Make idle/iowait counter update conditional
      nohz: Fix update_ts_time_stat idle accounting
      cputime: Clean up cputime_to_usecs and usecs_to_cputime macros
      alarmtimers: Rework RTC device selection using class interface
      alarmtimers: Add try_to_cancel functionality
      alarmtimers: Add more refined alarm state tracking
      alarmtimers: Remove period from alarm structure
      alarmtimers: Remove interval cap limit hack
      ...

commit a1330228f9eec7e355d41f45c17e1297d681f40d
Author: Jamie Iles <jamie@jamieiles.com>
Date:   Mon Jul 25 16:34:37 2011 +0100

    dw_apb_timer: constify clocksource name
    
    The clocksource name should be const for correctness.
    
    Cc: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Jamie Iles <jamie@jamieiles.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 8a19c4e575cae9c1038305b488430eca4642fa22
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Sep 6 08:08:13 2011 +0100

    ARM: 7081/1: mach-integrator: fix the clocksource
    
    commit bb9ea77846620ed2b37e74c852d72c7a476b248c upstream.
    
    I was intrigued by the fact that the clock stood still on
    the Integrator, but it wasn't strange at all, because the
    timer was set up all wrong and probably has been for a
    while. With this patch the clock starts ticking again:
    make the timer periodic (reload), |= on the divisor bit
    and load the timer before starting it.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit b1e3be0647fec81887e55edbda0c56c0445f7b53
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Mon Oct 3 09:30:20 2011 +0200

    clocksource: fixup ux500 build problems
    
    Based on a patch from Arnd Bergmann this fixes up the build
    problem of assigning a non-existing global when the ux500 PRCMU
    timer is not linked in by passing its base address to the init
    function. We also add a missing <linux/errno.h> inclusion and
    staticize the dummy function.
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 7ed00af7a960031ad00017e3ebcf1d3ef22af498
Author: Mattias Wallin <mattias.wallin@stericsson.com>
Date:   Fri May 27 10:30:34 2011 +0200

    ARM: ux500: add support for clocksource DBX500 PRCMU
    
    This patch adds support for the DBX500 PRCMU clocksource
    to ux500 platforms.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Mattias Wallin <mattias.wallin@stericsson.co>
    Signed-off-by: Jonas Aaberg <jonas.aberg@stericsson.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 489bccea6334514a8e13436f10d0a274777bf17a
Author: Mattias Wallin <mattias.wallin@stericsson.com>
Date:   Fri May 27 10:30:12 2011 +0200

    clocksource: add DBX500 PRCMU Timer support
    
    This patch adds the DBX500 PRCMU Timer driver as a clocksource
    and as sched_clock.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Mattias Wallin <mattias.wallin@stericsson.com>
    Signed-off-by: Jonas Aaberg <jonas.aberg@stericsson.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 38867a28a7dc9d69389990bcd42f6b7c77da3d9d
Merge: 43a964a7bfd1 b71d8429ec36
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Sep 20 14:23:16 2011 -0700

    Merge branch 'fixes' of git://git.linaro.org/people/arnd/arm-soc
    
    * 'fixes' of git://git.linaro.org/people/arnd/arm-soc:
      mach-integrator: fix VGA base regression
      arm/dt: Tegra: Update SDHCI nodes to match bindings
      ARM: EXYNOS4: fix incorrect pad configuration for keypad row lines
      ARM: SAMSUNG: fix to prevent declaring duplicated
      ARM: SAMSUNG: fix watchdog reset issue with clk_get()
      ARM: S3C64XX: Remove un-used code backlight code on SMDK6410
      ARM: EXYNOS4: restart clocksource while system resumes
      ARM: EXYNOS4: Fix routing timer interrupt to offline CPU
      ARM: EXYNOS4: Fix return type of local_timer_setup()
      ARM: EXYNOS4: Fix wrong pll type for vpll
      ARM: Dove: fix second SPI initialization call

commit aa421c13a9e318a75b42d9dd2eb85cc73d8aab6b
Author: Changhwan Youn <chaos.youn@samsung.com>
Date:   Fri Sep 2 14:10:52 2011 +0900

    ARM: EXYNOS4: restart clocksource while system resumes
    
    System resume can't be completed because mct-frc isn't restarted
    after system suspends. This patch restarts mct-frc during system
    resume.
    
    Reported-by: Jongpill Lee <boyko.lee@samsung.com>
    Signed-off-by: Changhwan Youn <chaos.youn@samsung.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 9fb60336253edf73dedc527b2aa2bf32eae0d6da
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Sep 12 13:32:23 2011 +0200

    clocksource: Make watchdog reset lockless
    
    KGDB needs to trylock watchdog_lock when trying to reset the
    clocksource watchdog after the system has been stopped to avoid a
    potential deadlock. When the trylock fails TSC usually becomes
    unstable.
    
    We can be more clever by using an atomic counter and checking it in
    the clocksource_watchdog callback. We restart the watchdog whenever
    the counter is > 0 and only decrement the counter when we ran through
    a full update cycle.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <johnstul@us.ibm.com>
    Acked-by: Jason Wessel <jason.wessel@windriver.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/alpine.LFD.2.02.1109121326280.2723@ionos
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit d9543314ee4b6b276af539cc9fc12c614816c74a
Merge: b6fd41e29dea f1c39625d63c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Sep 12 17:22:31 2011 -0700

    Merge branch 'upstream/bugfix' of git://github.com/jsgf/linux-xen
    
    * 'upstream/bugfix' of git://github.com/jsgf/linux-xen:
      xen: use non-tracing preempt in xen_clocksource_read()

commit d0a77454c70d0449a5f87087deb8f0cb15145e90
Merge: c338bfb5ecf6 6c6d8deb5d95
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Sep 10 17:28:46 2011 -0700

    Merge branch 'fixes' of http://ftp.arm.linux.org.uk/pub/linux/arm/kernel/git-cur/linux-2.6-arm
    
    * 'fixes' of http://ftp.arm.linux.org.uk/pub/linux/arm/kernel/git-cur/linux-2.6-arm:
      ARM: 7088/1: entry: fix wrong parameter name used in do_thumb_abort
      ARM: 7080/1: l2x0: make sure I&D are not locked down on init
      ARM: 7081/1: mach-integrator: fix the clocksource
      NET: am79c961: fix race in link status code
      ARM: 7067/1: mm: keep significant bits in pfn_valid

commit 6f4151c89b7d036c755d8cf74729e09b76fa6676
Author: K. Y. Srinivasan <kys@microsoft.com>
Date:   Wed Sep 7 15:25:10 2011 -0700

    x86: Hyper-V: Integrate the clocksource with Hyper-V detection code
    
    The Hyper-V clocksource driver is best integrated with Hyper-V
    detection code since:
    
      (a) Linux guests running on Hyper-V require it
    
      (b) Integration into that code significanly reduces code size
    
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: gregkh@suse.de
    Cc: devel@linuxdriverproject.org
    Cc: virtualization@lists.osdl.org
    Link: http://lkml.kernel.org/r/1315434310-4827-1-git-send-email-kys@microsoft.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit bb9ea77846620ed2b37e74c852d72c7a476b248c
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Sep 6 08:08:13 2011 +0100

    ARM: 7081/1: mach-integrator: fix the clocksource
    
    I was intrigued by the fact that the clock stood still on
    the Integrator, but it wasn't strange at all, because the
    timer was set up all wrong and probably has been for a
    while. With this patch the clock starts ticking again:
    make the timer periodic (reload), |= on the divisor bit
    and load the timer before starting it.
    
    Cc: stable@kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit c42a2634d8495a764e918a8c4252c100ef23b369
Merge: f9557a447714 21d41f2b3122
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 29 13:34:48 2011 -0700

    Merge branch 'sh-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-3.x
    
    * 'sh-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-3.x:
      sh: fix the compile error in setup-sh7757.c
      serial: sh-sci: report CTS as active for get_mctrl
      sh: Add unaligned memory access for PC relative intructions
      sh: Fix unaligned memory access for branches without delay slots
      sh: Fix up fallout from cpuidle changes.
      serial: sh-sci: console Runtime PM support
      sh: Fix conflicting definitions of ptrace_triggered
      serial: sh-sci: fix DMA build by including dma-mapping.h
      serial: sh-sci: Fix up default regtype probing.
      sh: intc: enable both edges GPIO interrupts on sh7372
      shwdt: fix usage of mod_timer
      clocksource: sh_cmt: wait for CMCNT on init V2

commit f1c39625d63c9f8eba8f036429c10a9cb9e32920
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Wed Aug 24 09:54:24 2011 -0700

    xen: use non-tracing preempt in xen_clocksource_read()
    
    The tracing code used sched_clock() to get tracing timestamps, which
    ends up calling xen_clocksource_read().  xen_clocksource_read() must
    disable preemption, but if preemption tracing is enabled, this results
    in infinite recursion.
    
    I've only noticed this when boot-time tracing tests are enabled, but it
    seems like a generic bug.  It looks like it would also affect
    kvm_clocksource_read().
    
    Reported-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Cc: Avi Kivity <avi@redhat.com>
    Cc: Marcelo Tosatti <mtosatti@redhat.com>

commit c0764b2a4cdc41779460eb8796bc76e4fbddf339
Author: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
Date:   Tue Aug 23 16:35:31 2011 +0200

    at91: at91sam9261.c: fix typo in t2_clk alias for atmel_tcb.0
    
    This was a typo in clockdev declaration for at91sam9261 SoC.
    Fix the kernel hanging when switching clocksource to TC (tcb_clksrc).
    
    Signed-off-by: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
    Acked-by: Remy Bohmer <linux@bohmer.net>
    Acked-by: Nicolas Ferre <nicolas.ferre@atmel.com>

commit c44efbaa0ef3cf53fbf6bb57c33d4f199b15f2da
Merge: ce8a84ef1e4b 696314cf53b7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 12 20:42:02 2011 -0700

    Merge branch 'fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/linux-arm-soc
    
    * 'fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/linux-arm-soc: (32 commits)
      ARM: mmp: Change the way we use timer 0 as clockevent timer.
      ARM: mmp: Switch to using timer 1 as clocksource timer.
      ARM: mmp: Also start timer 1 on boot.
      ARM: pxa168/gplugd: free correct GPIO
      ARM: pxa168/gplugd: get rid of mfp-gplugd.h
      ARM: pxa: fix logic error in PJ4 iWMMXt handling
      mach-sa1100: fix PCI build problem
      omap: timer: Set dmtimer used as clocksource in autoreload mode
      OMAP3: am3517crane: remove NULL board_mux from board file
      arm: mach-omap2: mux: use kstrdup()
      arch:arm:plat-omap:iovmm: remove unused variable 'va'
      Update Nook Color machine 3284 to common Encore name
      am3505/3517: Various platform defines for UART4
      OMAP: hwmod: fix build break on non-OMAP4 multi-OMAP2 builds
      OMAP: Fix linking error in twl-common.c for OMAP2/3/4 only builds
      iMX: Fix build for iMX53
      ARM: mx5: board-cpuimx51.c fixup irq_to_gpio() usage
      OMAP2+: PM: SmartReflex: use put_sync_suspend for IRQ-safe disabling
      OMAP3: beagle: don't touch omap_device internals
      OMAP1: enable GENERIC_IRQ_CHIP
      ...

commit 71c0c341403cb141e3580817947e56a4386db4c8
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Wed Aug 10 02:37:34 2011 +0800

    ARM: mmp: Switch to using timer 1 as clocksource timer.
    
    Signed-off-by: Lennert Buytenhek <buytenh@laptop.org>
    Acked-by: Haojian Zhuang <haojian.zhuang@gmail.com>
    Signed-off-by: Eric Miao <eric.y.miao@gmail.com>

commit 7ce5ae39c46f159aee3b3427844f1491e1ccac74
Author: Lennert Buytenhek <buytenh@wantstofly.org>
Date:   Wed Aug 10 02:36:59 2011 +0800

    ARM: mmp: Also start timer 1 on boot.
    
    Currently, arch-mmp/time.c uses timer 0 both as a clocksource timer
    and as a clockevent timer, the latter by setting up a comparator
    interrupt to match on 'current_time + delta'.  This is problematic
    if delta is small enough, as that can lead to 'current_time + delta'
    already being in the past when comparator setup has finished, leading
    to the requested event not triggering.
    
    As there is also a silicon issue that requires stopping a timer's
    counter while writing to one of its match registers, we'll switch to
    using two separate timers -- timer 0 as clockevent timer, which we'll
    start and stop on every invocation of ->set_next_event(), and timer 1
    as clocksource timer, which will be free-running.
    
    This first patch enables timer 1 on boot, so that we can use it as
    clocksource timer.
    
    Signed-off-by: Lennert Buytenhek <buytenh@laptop.org>
    Acked-by: Haojian Zhuang <haojian.zhuang@gmail.com>
    Signed-off-by: Eric Miao <eric.y.miao@gmail.com>

commit e9d0b97eef235eccc3df9ddb9895b35c53a8aaa2
Author: Hemant Pedanekar <hemantp@ti.com>
Date:   Wed Aug 10 13:19:35 2011 +0000

    omap: timer: Set dmtimer used as clocksource in autoreload mode
    
    If CONFIG_OMAP_32K_TIMER is not selected and dmtimer is used as clocksource, the
    timer stops counting once overflow occurs as it was not set in autoreload mode.
    This results into timekeeping failure: for example, 'sleep 1' at the shell after
    the timer counter overflow would hang.
    
    This patch sets up autoreload when starting the clocksource timer which fixes
    the above issue.
    
    Signed-off-by: Hemant Pedanekar <hemantp@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 1850536b93888e6cc3ee42e63e20e61f35f8b3e2
Merge: ed8f37370d83 d1afa65ca59d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Aug 2 21:16:11 2011 -1000

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/cmetcalf/linux-tile
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/cmetcalf/linux-tile:
      arch/tile/mm/init.c: trivial: use BUG_ON
      arch/tile: remove useless set_fixmap_nocache() macro
      arch/tile: add hypervisor-based character driver for SPI flash ROM
      ioctl-number.txt: add the tile hardwall ioctl range
      tile: use generic-y format for one-line asm-generic headers
      clocksource: tile: convert to use clocksource_register_hz

commit b679fa56258fbe656e5b2f9803fc9918bb703df3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jun 16 16:22:08 2011 +0200

    clocksource: Make watchdog robust vs. interruption
    
    commit b5199515c25cca622495eb9c6a8a1d275e775088 upstream.
    
    The clocksource watchdog code is interruptible and it has been
    observed that this can trigger false positives which disable the TSC.
    
    The reason is that an interrupt storm or a long running interrupt
    handler between the read of the watchdog source and the read of the
    TSC brings the two far enough apart that the delta is larger than the
    unstable treshold. Move both reads into a short interrupt disabled
    region to avoid that.
    
    Reported-and-tested-by: Vernon Mauery <vernux@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Andi Kleen <ak@linux.intel.com>

commit e97ee080621da3c7c393a6f44118e930949e2f9e
Author: Kasper Pedersen <kkp2010@kasperkp.dk>
Date:   Wed Oct 20 15:55:15 2010 -0700

    time: Compensate for rounding on odd-frequency clocksources
    
    commit a386b5af8edda1c742ce9f77891e112eefffc005 upstream.
    
    When the clocksource is not a multiple of HZ, the clock will be off.  For
    acpi_pm, HZ=1000 the error is 127.111 ppm:
    
    The rounding of cycle_interval ends up generating a false error term in
    ntp_error accumulation since xtime_interval is not exactly 1/HZ.  So, we
    subtract out the error caused by the rounding.
    
    This has been visible since 2.6.32-rc2
            commit a092ff0f90cae22b2ac8028ecd2c6f6c1a9e4601
            time: Implement logarithmic time accumulation
    That commit raised NTP_INTERVAL_FREQ and exposed the rounding error.
    
    testing tool: http://n1.taur.dk/permanent/testpmt.c
    Also tested with ntpd and a frequency counter.
    
    Signed-off-by: Kasper Pedersen <kkp2010@kasperkp.dk>
    Acked-by: john stultz <johnstul@us.ibm.com>
    Cc: John Kacur <jkacur@redhat.com>
    Cc: Clark Williams <williams@redhat.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Will Tisdale <willtisdale@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Andi Kleen <ak@linux.intel.com>

commit 5284561b0290f09e1c6c99a18b4bc6f39b5ca4d1
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed May 4 18:16:50 2011 -0700

    clocksource: Install completely before selecting
    
    commit e05b2efb82596905ebfe88e8612ee81dec9b6592 upstream.
    
    Christian Hoffmann reported that the command line clocksource override
    with acpi_pm timer fails:
    
     Kernel command line: <SNIP> clocksource=acpi_pm
     hpet clockevent registered
     Switching to clocksource hpet
     Override clocksource acpi_pm is not HRT compatible.
     Cannot switch while in HRT/NOHZ mode.
    
    The watchdog code is what enables CLOCK_SOURCE_VALID_FOR_HRES, but we
    actually end up selecting the clocksource before we enqueue it into
    the watchdog list, so that's why we see the warning and fail to switch
    to acpi_pm timer as requested. That's particularly bad when we want to
    debug timekeeping related problems in early boot.
    
    Put the selection call last.
    
    Reported-by: Christian Hoffmann <email@christianhoffmann.info>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Link: http://lkml.kernel.org/r/%3C1304558210.2943.24.camel%40work-vm%3E
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit ae4c42e4e4d76d003f8ca551fe1aef93ff9a4b21
Merge: dd58ecba48ed ab2a0e0d1354
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 25 12:38:42 2011 -0700

    Merge branch 'next/cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/linux-arm-soc
    
    * 'next/cleanup' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/linux-arm-soc: (133 commits)
      ARM: EXYNOS4: Change devname for FIMD clkdev
      ARM: S3C64XX: Cleanup mach/regs-fb.h from mach-s3c64xx
      ARM: S5PV210: Cleanup mach/regs-fb.h from mach-s5pv210
      ARM: S5PC100: Cleanup mach/regs-fb.h from mach-s5pc100
      ARM: S3C24XX: Use generic s3c_set_platdata for devices
      ARM: S3C64XX: Use generic s3c_set_platdata for OneNAND
      ARM: SAMSUNG: Use generic s3c_set_platdata for NAND
      ARM: SAMSUNG: Use generic s3c_set_platdata for USB OHCI
      ARM: SAMSUNG: Use generic s3c_set_platdata for HWMON
      ARM: SAMSUNG: Use generic s3c_set_platdata for FB
      ARM: SAMSUNG: Use generic s3c_set_platdata for TS
      ARM: S3C64XX: Add PWM backlight support on SMDK6410
      ARM: S5P64X0: Add PWM backlight support on SMDK6450
      ARM: S5P64X0: Add PWM backlight support on SMDK6440
      ARM: S5PC100: Add PWM backlight support on SMDKC100
      ARM: S5PV210: Add PWM backlight support on SMDKV210
      ARM: EXYNOS4: Add PWM backlight support on SMDKC210
      ARM: EXYNOS4: Add PWM backlight support on SMDKV310
      ARM: SAMSUNG: Create a common infrastructure for PWM backlight support
      clocksource: convert 32-bit down counting clocksource on S5PV210/S5P64X0
      ...
    
    Fix up trivial conflict in arch/arm/mach-imx/mach-scb9328.c

commit 9d0715630ebf7bf70daa5e6d8db0e3061268c61e
Merge: c0c463d34adf 06c3df49521c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 23 10:34:47 2011 -0700

    Merge branch 'timers-clocksource-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-clocksource-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource: apb: Share APB timer code with other platforms

commit 8e204874db000928e37199c2db82b7eb8966cc3c
Merge: 3e0b8df79ddb aafade242ff2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 22 17:05:15 2011 -0700

    Merge branch 'x86-vdso-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'x86-vdso-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      x86-64, vdso: Do not allocate memory for the vDSO
      clocksource: Change __ARCH_HAS_CLOCKSOURCE_DATA to a CONFIG option
      x86, vdso: Drop now wrong comment
      Document the vDSO and add a reference parser
      ia64: Replace clocksource.fsys_mmio with generic arch data
      x86-64: Move vread_tsc and vread_hpet into the vDSO
      clocksource: Replace vread with generic arch data
      x86-64: Add --no-undefined to vDSO build
      x86-64: Allow alternative patching in the vDSO
      x86: Make alternative instruction pointers relative
      x86-64: Improve vsyscall emulation CS and RIP handling
      x86-64: Emulate legacy vsyscalls
      x86-64: Fill unused parts of the vsyscall page with 0xcc
      x86-64: Remove vsyscall number 3 (venosys)
      x86-64: Map the HPET NX
      x86-64: Remove kernel.vsyscall64 sysctl
      x86-64: Give vvars their own page
      x86-64: Document some of entry_64.S
      x86-64: Fix alignment of jiffies variable

commit b731fbbd246e3aba59701bd6112a14ba02bf1c1c
Author: Jonas Bonn <jonas@southpole.se>
Date:   Sat Jun 4 22:18:12 2011 +0300

    OpenRISC: Timekeeping
    
    Implements support for the OpenRISC timer which is a 28 bit cycle counter
    that can be read out of a special purpose register.  This counter is
    used as a both a clock event and clocksource device.
    
    Signed-off-by: Jonas Bonn <jonas@southpole.se>
    Cc: tglx@linutronix.de
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>

commit ae7bd11b471931752e5609094ca0a49386590524
Author: H. Peter Anvin <hpa@zytor.com>
Date:   Thu Jul 21 13:34:05 2011 -0700

    clocksource: Change __ARCH_HAS_CLOCKSOURCE_DATA to a CONFIG option
    
    The machinery for __ARCH_HAS_CLOCKSOURCE_DATA assumed a file in
    asm-generic would be the default for architectures without their own
    file in asm/, but that is not how it works.
    
    Replace it with a Kconfig option instead.
    
    Link: http://lkml.kernel.org/r/4E288AA6.7090804@zytor.com
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>
    Cc: Andy Lutomirski <luto@mit.edu>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Tony Luck <tony.luck@intel.com>

commit 3f7e5e2423f6233f7665d54061ba7761ca90cf52
Author: Magnus Damm <damm@opensource.se>
Date:   Wed Jul 13 07:59:48 2011 +0000

    clocksource: sh_cmt: wait for CMCNT on init V2
    
    Add code to the CMT driver to wait for CMCNT V2. This to let
    the register value settle before starting the timer channel.
    Makes the driver more robust.
    
    Needed for CMT2 on sh7372 and certain CMT channels on sh73a0.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 1bed3b9c71fdf241da2c09a91d39b5302145f7c6
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Fri May 27 20:32:17 2011 +0100

    MIPS: GT64120: Remove useless inclusion of clocksource.h.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 0665ccc4c3f229abe3eabe49f3f99763515cf0af
Author: Chanwoo Choi <cw00.choi@samsung.com>
Date:   Mon Jul 18 15:07:14 2011 +0900

    clocksource: convert 32-bit down counting clocksource on S5PV210/S5P64X0
    
    Convert the S5PV210/S5P64X0 32-bit down-counting clocksource to
    the generic mmio clocksource infrastructure
    
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 900b170af40b4fef54e89f3d48d055f7d8031ae6
Author: Richard Cochran <richardcochran@gmail.com>
Date:   Fri Jul 15 21:33:12 2011 +0200

    ARM: fix regression in IXP4xx clocksource
    
    Commit 234b6ceddb4fc2a4bc5b9a7670f070f6e69e0868
    
       clocksource: convert ARM 32-bit up counting clocksources
    
    broke the build for ixp4xx and made big endian operation impossible.
    This commit restores the original behaviour.
    
    Signed-off-by: Richard Cochran <richard.cochran@omicron.at>
    Signed-off-by: Krzysztof Hałasa <khc@pm.waw.pl>
    [ Thomas says that we might want to have generic BE accessor functions
      to the MMIO clock source, but that hasn't happened yet, so in the
      meantime this seems to be the short-term fix for the particular
      problem - Linus ]
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 574c44fa8fa6262ffd5939789ef51a6e98ed62d7
Author: Andy Lutomirski <luto@mit.edu>
Date:   Wed Jul 13 09:24:15 2011 -0400

    ia64: Replace clocksource.fsys_mmio with generic arch data
    
    Now that clocksource.archdata is available, use it for ia64-specific
    code.
    
    Cc: Clemens Ladisch <clemens@ladisch.de>
    Cc: linux-ia64@vger.kernel.org
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andy Lutomirski <luto@mit.edu>
    Link: http://lkml.kernel.org/r/d31de0ee0842a0e322fb6441571c2b0adb323fa2.1310563276.git.luto@mit.edu
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>

commit 433bd805e5fd2c731b3a9025b034f066272d336e
Author: Andy Lutomirski <luto@mit.edu>
Date:   Wed Jul 13 09:24:13 2011 -0400

    clocksource: Replace vread with generic arch data
    
    The vread field was bloating struct clocksource everywhere except
    x86_64, and I want to change the way this works on x86_64, so let's
    split it out into per-arch data.
    
    Cc: x86@kernel.org
    Cc: Clemens Ladisch <clemens@ladisch.de>
    Cc: linux-ia64@vger.kernel.org
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andy Lutomirski <luto@mit.edu>
    Link: http://lkml.kernel.org/r/3ae5ec76a168eaaae63f08a2a1060b91aa0b7759.1310563276.git.luto@mit.edu
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>

commit 43b951e4185f3132e77e6340d1aed42e90618e4b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jun 16 16:22:08 2011 +0200

    clocksource: Make watchdog robust vs. interruption
    
    commit b5199515c25cca622495eb9c6a8a1d275e775088 upstream.
    
    The clocksource watchdog code is interruptible and it has been
    observed that this can trigger false positives which disable the TSC.
    
    The reason is that an interrupt storm or a long running interrupt
    handler between the read of the watchdog source and the read of the
    TSC brings the two far enough apart that the delta is larger than the
    unstable treshold. Move both reads into a short interrupt disabled
    region to avoid that.
    
    Reported-and-tested-by: Vernon Mauery <vernux@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit b63010f54cdcb456c3a29e242a0769e5b412d785
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jun 16 16:22:08 2011 +0200

    clocksource: Make watchdog robust vs. interruption
    
    commit b5199515c25cca622495eb9c6a8a1d275e775088 upstream.
    
    The clocksource watchdog code is interruptible and it has been
    observed that this can trigger false positives which disable the TSC.
    
    The reason is that an interrupt storm or a long running interrupt
    handler between the read of the watchdog source and the read of the
    TSC brings the two far enough apart that the delta is larger than the
    unstable treshold. Move both reads into a short interrupt disabled
    region to avoid that.
    
    Reported-and-tested-by: Vernon Mauery <vernux@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 354a183f536a8edf6cb80ee3e3f393736e278810
Author: Russell King - ARM Linux <linux@arm.linux.org.uk>
Date:   Sun Jul 10 23:05:34 2011 -0700

    Convert OMAPs 32kHz clocksource implementation to use the generic MMIO
    clocksource support.  This achieves several things:
    
    1. It means we get rid of all these helper functions which frankly should
       never have been necessary.
    2. It means omap_readl() inside these helper functions does not appear in
       ftrace output.
    
    Another plus is that we avoid the overhead of calculating the address to
    read each time, but a minus is that we use readl() which has a barrier.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    [tony@atomide.com: updated to use ioremap]
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 7ef2f804a814c763cfbaacca35aaec38a4641f90
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jun 16 16:22:08 2011 +0200

    clocksource: Make watchdog robust vs. interruption
    
    commit b5199515c25cca622495eb9c6a8a1d275e775088 upstream.
    
    The clocksource watchdog code is interruptible and it has been
    observed that this can trigger false positives which disable the TSC.
    
    The reason is that an interrupt storm or a long running interrupt
    handler between the read of the watchdog source and the read of the
    TSC brings the two far enough apart that the delta is larger than the
    unstable treshold. Move both reads into a short interrupt disabled
    region to avoid that.
    
    Reported-and-tested-by: Vernon Mauery <vernux@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 5a145baa1a499845103cd566ee5fe509e042aa80
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Mon May 9 18:30:14 2011 +0200

    ARM i.MX: define CLOCK_TICK_RATE to bogus value
    
    We have a clocksource which renders CLOCK_TICK_RATE useless. Define
    it to a bogus value to get rid of some ifdeffery.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>

commit e6220bdc9485c5ea972f9e0e6d062a05934bb74b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jun 9 13:08:25 2011 +0000

    i8253: Create common clockevent implementation
    
    arm, mips and x86 implement i8253 based clockevents. All the same code
    copied. Create a common implementation in drivers/clocksource/i8253.c.
    
    About time to rename drivers/clocksource/ to something else.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: John Stultz <john.stultz@linaro.org>
    Link: http://lkml.kernel.org/r/20110609130621.921710458@linutronix.de

commit 06c3df49521c1b112b777cc4946e5de057c814ba
Author: Jamie Iles <jamie@jamieiles.com>
Date:   Mon Jun 6 12:43:07 2011 +0100

    clocksource: apb: Share APB timer code with other platforms
    
    The APB timers are an IP block from Synopsys (DesignWare APB timers)
    and are also found in other systems including ARM SoC's.  This patch
    adds functions for creating clock_event_devices and clocksources from
    APB timers but does not do the resource allocation.  This is handled
    in a higher layer to allow the timers to be created from multiple
    methods such as platform_devices.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Signed-off-by: Jamie Iles <jamie@jamieiles.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit 3d05a3e80c44cb792fc8194fd9abdb431dea5420
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 29 15:54:49 2011 -0700

    omap2+: Use dmtimer macros for clocksource
    
    Use dmtimer macros for clocksource. As with the clockevent,
    this allows us to initialize the rest of dmtimer code later on.
    
    Note that eventually we will be initializing the timesource
    from init_early so sched_clock will work properly for
    CONFIG_PRINTK_TIME.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Kevin Hilman <khilman@ti.com>

commit 11a0186f3ef6aa6a9b8b81f5a501b6063fa47500
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 29 15:54:49 2011 -0700

    omap2+: Reserve clocksource and timesource and initialize dmtimer later
    
    There's no need to initialize the dmtimer framework early.
    Just mark the clocksource and timesource as reserved, and
    initialize dmtimer with an arch_initcall.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Kevin Hilman <khilman@ti.com>

commit 7d328bebd36bd80ade9e15e7bd12349b607aa97b
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Mon Oct 25 16:53:46 2010 -0700

    x86/pvclock: Zero last_value on resume
    
    commit e7a3481c0246c8e45e79c629efd63b168e91fcda upstream.
    
    If the guest domain has been suspend/resumed or migrated, then the
    system clock backing the pvclock clocksource may revert to a smaller
    value (ie, can be non-monotonic across the migration/save-restore).
    
    Make sure we zero last_value in that case so that the domain
    continues to see clock updates.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 73048d1e37649b9cfc45fbc2c51383994354a35f
Author: Kasper Pedersen <kkp2010@kasperkp.dk>
Date:   Wed Oct 20 15:55:15 2010 -0700

    time: Compensate for rounding on odd-frequency clocksources
    
    commit a386b5af8edda1c742ce9f77891e112eefffc005 upstream.
    
    When the clocksource is not a multiple of HZ, the clock will be off.  For
    acpi_pm, HZ=1000 the error is 127.111 ppm:
    
    The rounding of cycle_interval ends up generating a false error term in
    ntp_error accumulation since xtime_interval is not exactly 1/HZ.  So, we
    subtract out the error caused by the rounding.
    
    This has been visible since 2.6.32-rc2
            commit a092ff0f90cae22b2ac8028ecd2c6f6c1a9e4601
            time: Implement logarithmic time accumulation
    That commit raised NTP_INTERVAL_FREQ and exposed the rounding error.
    
    testing tool: http://n1.taur.dk/permanent/testpmt.c
    Also tested with ntpd and a frequency counter.
    
    Signed-off-by: Kasper Pedersen <kkp2010@kasperkp.dk>
    Acked-by: john stultz <johnstul@us.ibm.com>
    Cc: John Kacur <jkacur@redhat.com>
    Cc: Clark Williams <williams@redhat.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit a6d553ac64a6b3dc267eebccca446fd32d2e5e73
Author: Kasper Pedersen <kkp2010@kasperkp.dk>
Date:   Wed Oct 20 15:55:15 2010 -0700

    time: Compensate for rounding on odd-frequency clocksources
    
    commit a386b5af8edda1c742ce9f77891e112eefffc005 upstream.
    
    When the clocksource is not a multiple of HZ, the clock will be off.  For
    acpi_pm, HZ=1000 the error is 127.111 ppm:
    
    The rounding of cycle_interval ends up generating a false error term in
    ntp_error accumulation since xtime_interval is not exactly 1/HZ.  So, we
    subtract out the error caused by the rounding.
    
    This has been visible since 2.6.32-rc2
            commit a092ff0f90cae22b2ac8028ecd2c6f6c1a9e4601
            time: Implement logarithmic time accumulation
    That commit raised NTP_INTERVAL_FREQ and exposed the rounding error.
    
    testing tool: http://n1.taur.dk/permanent/testpmt.c
    Also tested with ntpd and a frequency counter.
    
    Signed-off-by: Kasper Pedersen <kkp2010@kasperkp.dk>
    Acked-by: john stultz <johnstul@us.ibm.com>
    Cc: John Kacur <jkacur@redhat.com>
    Cc: Clark Williams <williams@redhat.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Will Tisdale <willtisdale@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 8816ead9d8e7c2745788e0684797e1912b504f33
Merge: 357ed6b1a110 203db2952bc8 d8ad7d1123a9 b5199515c25c c1f5c54b5734
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jun 19 09:00:18 2011 -0700

    Merge branches 'perf-urgent-for-linus', 'sched-urgent-for-linus', 'timers-urgent-for-linus' and 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'perf-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      tools/perf: Fix static build of perf tool
      tracing: Fix regression in printk_formats file
    
    * 'sched-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      generic-ipi: Fix kexec boot crash by initializing call_single_queue before enabling interrupts
    
    * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource: Make watchdog robust vs. interruption
      timerfd: Fix wakeup of processes when timer is cancelled on clock change
    
    * 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      x86, MAINTAINERS: Add x86 MCE people
      x86, efi: Do not reserve boot services regions within reserved areas

commit b5199515c25cca622495eb9c6a8a1d275e775088
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jun 16 16:22:08 2011 +0200

    clocksource: Make watchdog robust vs. interruption
    
    The clocksource watchdog code is interruptible and it has been
    observed that this can trigger false positives which disable the TSC.
    
    The reason is that an interrupt storm or a long running interrupt
    handler between the read of the watchdog source and the read of the
    TSC brings the two far enough apart that the delta is larger than the
    unstable treshold. Move both reads into a short interrupt disabled
    region to avoid that.
    
    Reported-and-tested-by: Vernon Mauery <vernux@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@kernel.org

commit 7d7975a0e1da7d6e558211b6296a96f1d6bf60ce
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sat Jun 11 00:46:17 2011 +0100

    ARM: footbridge: fix clock event support
    
    4e8d7637 (ARM: footbridge: convert to clockevents/clocksource) did
    not set the cpumask for the clock event device.  This causes boot
    to fail.  Add the necessary initialization.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 15f304b664c0d0a3e76ed3a9ce3615a86908babe
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Wed Jun 1 19:04:59 2011 +0100

    i8253: Consolidate all kernel definitions of i8253_lock
    
    Move them to drivers/clocksource/i8253.c and remove the
    implementations in arch/
    
    [ tglx: Avoid the extra file in lib - folded arch patches in. The
      export will become conditional in a later step ]
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Link: http://lkml.kernel.org/r/20110601180610.221426078@duck.linux-mips.net
    Cc: Russell King <linux@arm.linux.org.uk>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 334955ef964bee9d3b1e20966847eee28cfd05f6
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Wed Jun 1 19:04:57 2011 +0100

    i8253: Create linux/i8253.h and use it in all 8253 related files
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Link: http://lkml.kernel.org/r/20110601180610.054254048@duck.linux-mips.net
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    
     arch/arm/mach-footbridge/isa-timer.c |    2 +-
     arch/mips/cobalt/time.c              |    2 +-
     arch/mips/jazz/irq.c                 |    2 +-
     arch/mips/kernel/i8253.c             |    2 +-
     arch/mips/mti-malta/malta-time.c     |    2 +-
     arch/mips/sgi-ip22/ip22-time.c       |    2 +-
     arch/mips/sni/time.c                 |    2 +-
     arch/x86/kernel/apic/apic.c          |    2 +-
     arch/x86/kernel/apm_32.c             |    2 +-
     arch/x86/kernel/hpet.c               |    2 +-
     arch/x86/kernel/i8253.c              |    2 +-
     arch/x86/kernel/time.c               |    2 +-
     drivers/block/hd.c                   |    2 +-
     drivers/clocksource/i8253.c          |    2 +-
     drivers/input/gameport/gameport.c    |    2 +-
     drivers/input/joystick/analog.c      |    2 +-
     drivers/input/misc/pcspkr.c          |    2 +-
     include/linux/i8253.h                |   11 +++++++++++
     sound/drivers/pcsp/pcsp.h            |    2 +-
     19 files changed, 29 insertions(+), 18 deletions(-)

commit 9425032b77c3a4f066a032bac7f7d08668b6cc3c
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue May 31 22:10:03 2011 +0100

    ARM: 6947/2: mach-u300: fix compilation error in timer
    
    The introduction of the mmio timer accidentally referenced the
    old clocksource struct which does not exist anymore. Fix this by
    using a simple string instead.
    
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 1f3bd0f2ac870c9eb29590f193ee3d94e2d35514
Merge: bb3d6bf1919a a1b2cc50679c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jun 4 07:04:25 2011 +0900

    Merge branch 'sh-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6
    
    * 'sh-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6:
      dmaengine: shdma: fix a regression: initialise DMA channels for memcpy
      dmaengine: shdma: Fix up fallout from runtime PM changes.
      Revert "clocksource: sh_cmt: Runtime PM support"
      Revert "clocksource: sh_tmu: Runtime PM support"
      sh: Fix up asm-generic/ptrace.h fallout.
      sh64: Move from P1SEG to CAC_ADDR for consistent sync.
      sh64: asm/pgtable.h needs asm/mmu.h
      sh: asm/tlb.h needs linux/swap.h
      sh: mark DMA slave ID 0 as invalid
      sh: Update shmin to reflect PIO dependency.
      sh: arch/sh/kernel/process_32.c needs linux/prefetch.h.
      sh: add MMCIF runtime PM support on ecovec
      sh: switch ap325rxa to dynamically manage the platform camera

commit 9f14517bd6f38cf4b48d742a0ac5db9d17edecba
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed Jun 1 00:32:50 2011 -0700

    clocksource: tile: convert to use clocksource_register_hz
    
    Convert tile to use clocksource_register_hz.
    
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>

commit 9436b4abec28a22edd961ae375535d940625f1f2
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue May 31 15:26:42 2011 +0900

    Revert "clocksource: sh_cmt: Runtime PM support"
    
    This reverts commit 01fa68b58492a5d6708a91c1f474b6a099a9509e.
    
    The same note as per the sh_tmu change applies here, too.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit d4905ce38c73964b868037e49a5945e1cf47a7f2
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue May 31 15:23:20 2011 +0900

    Revert "clocksource: sh_tmu: Runtime PM support"
    
    This reverts commit 1b842e91fea9447eff5eb687e28ad61c02f5033e.
    
    There is a fundamental ordering race between the early and late probe
    paths and the runtime PM tie-in that results in __pm_runtime_resume()
    attempting to take a lock that hasn't been initialized yet (which by
    proxy also suggests that pm_runtime_init() hasn't yet been run on the
    device either, making the entire thing unsafe) -- resulting in instant
    death on SMP or on UP with spinlock debugging enabled:
    
             sh_tmu.0: used for clock events
             sh_tmu.0: used for periodic clock events
            BUG: spinlock trylock failure on UP on CPU#0, swapper/0
             lock: 804db198, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
            ...
    
    Revert it for now until the ordering issues can be resolved, or we can get
    some more help from the runtime PM framework to make this possible.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit d2b463135f84d15808163cd15638b108e323d3e7
Author: Andrew Worsley <amworsley@gmail.com>
Date:   Tue May 24 17:13:15 2011 -0700

    init/calibrate.c: fix for critical bogoMIPS intermittent calculation failure
    
    A fix to the TSC (Time Stamp Counter) based bogoMIPS calculation used on
    secondary CPUs which has two faults:
    
    1: Not handling wrapping of the lower 32 bits of the TSC counter on
       32bit kernel - perhaps TSC is not reset by a warm reset?
    
    2: TSC and Jiffies are no incrementing together properly.  Either
       jiffies increment too quickly or Time Stamp Counter isn't incremented
       in during an SMI but the real time clock is and jiffies are
       incremented.
    
    Case 1 can result in a factor of 16 too large a value which makes udelay()
    values too small and can cause mysterious driver errors.  Case 2 appears
    to give smaller 10-15% errors after averaging but enough to cause
    occasional failures on my own board
    
    I have tested this code on my own branch and attach patch suitable for
    current kernel code.  See below for examples of the failures and how the
    fix handles these situations now.
    
    I reported this issue earlier here:
         Intermittent problem with BogoMIPs calculation on Intel AP CPUs -
    http://marc.info/?l=linux-kernel&m=129947246316875&w=4
    
    I suspect this issue has been seen by others but as it is intermittent and
    bogoMIPS for secondary CPUs are no longer printed out it might have been
    difficult to identify this as the cause.  Perhaps these unresolved issues,
    although quite old, might be relevant as possibly this fault has been
    around for a while.  In particular Case 1 may only be relevant to 32bit
    kernels on newer HW (most people run 64bit kernels?).  Case 2 is less
    dramatic since the earlier fix in this area and also intermittent.
    
       Re: bogomips discrepancy on Intel Core2 Quad CPU -
    http://marc.info/?l=linux-kernel&m=118929277524298&w=4
       slow system and bogus bogomips  -
    http://marc.info/?l=linux-kernel&m=116791286716107&w=4
       Re: Re: [RFC-PATCH] clocksource: update lpj if clocksource has -
    http://marc.info/?l=linux-kernel&m=128952775819467&w=4
    
    This issue is masked a little by commit feae3203d711db0a ("timers, init:
    Limit the number of per cpu calibration bootup messages") which only
    prints out the first bogoMIPS value making it much harder to notice other
    values differing.  Perhaps it should be changed to only suppress them when
    they are similar values?
    
    Here are some outputs showing faults occurring and the new code handling
    them properly.  See my earlier message for examples of the original
    failure.
    
        Case 1:   A Time Stamp Counter wrap:
    ...
    Calibrating delay loop (skipped), value calculated using timer
    frequency.. 6332.70 BogoMIPS (lpj=31663540)
    ....
    calibrate_delay_direct() timer_rate_max=31666493
    timer_rate_min=31666151 pre_start=4170369255 pre_end=4202035539
    calibrate_delay_direct() timer_rate_max=2425955274
    timer_rate_min=2425954941 pre_start=4265368533 pre_end=2396356387
    calibrate_delay_direct() ignoring timer_rate as we had a TSC wrap
    around start=4265368581 >=post_end=2396356511
    calibrate_delay_direct() timer_rate_max=31666274
    timer_rate_min=31665942 pre_start=2440373374 pre_end=2472039515
    calibrate_delay_direct() timer_rate_max=31666492
    timer_rate_min=31666160 pre_start=2535372139 pre_end=2567038422
    calibrate_delay_direct() timer_rate_max=31666455
    timer_rate_min=31666207 pre_start=2630371084 pre_end=2662037415
    Calibrating delay using timer specific routine.. 6333.28 BogoMIPS (lpj=31666428)
    Total of 2 processors activated (12665.99 BogoMIPS).
    ....
    
        Case 2:  Some thing (presumably the SMM interrupt?) causing the
    very low increase in TSC counter for the DELAY_CALIBRATION_TICKS
    increase in jiffies
    ...
    Calibrating delay loop (skipped), value calculated using timer
    frequency.. 6333.25 BogoMIPS (lpj=31666270)
    ...
    calibrate_delay_direct() timer_rate_max=31666483
    timer_rate_min=31666074 pre_start=4199536526 pre_end=4231202809
    calibrate_delay_direct() timer_rate_max=864348 timer_rate_min=864016
    pre_start=2405343672 pre_end=2406207897
    calibrate_delay_direct() timer_rate_max=31666483
    timer_rate_min=31666179 pre_start=2469540464 pre_end=2501206823
    calibrate_delay_direct() timer_rate_max=31666511
    timer_rate_min=31666122 pre_start=2564539400 pre_end=2596205712
    calibrate_delay_direct() timer_rate_max=31666084
    timer_rate_min=31665685 pre_start=2659538782 pre_end=2691204657
    calibrate_delay_direct() dropping min bogoMips estimate 1 = 864348
    Calibrating delay using timer specific routine.. 6333.27 BogoMIPS (lpj=31666390)
    Total of 2 processors activated (12666.53 BogoMIPS).
    ...
    
    After 70 boots I saw 2 variations <1% slip through
    
    [akpm@linux-foundation.org: coding-style fixes]
    [akpm@linux-foundation.org: fix straggly printk mess]
    Signed-off-by: Andrew Worsley <amworsley@gmail.com>
    Reviewed-by: Phil Carmody <ext-phil.2.carmody@nokia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d762f4383100c2a87b1a3f2d678cd3b5425655b4
Merge: 5214638384a9 78207ffd0e00
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 23 21:24:07 2011 -0700

    Merge branch 'sh-latest' of git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6
    
    * 'sh-latest' of git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6: (23 commits)
      sh: Ignore R_SH_NONE module relocations.
      SH: SE7751: Fix pcibios_map_platform_irq prototype.
      sh: remove warning and warning_symbol from struct stacktrace_ops
      sh: wire up sys_sendmmsg.
      clocksource: sh_tmu: Runtime PM support
      clocksource: sh_tmu: __clocksource_updatefreq_hz() update
      clocksource: sh_cmt: Runtime PM support
      clocksource: sh_cmt: __clocksource_updatefreq_hz() update
      dmaengine: shdma: synchronize RCU before freeing, simplify spinlock
      dmaengine: shdma: add runtime- and system-level power management
      dmaengine: shdma: fix locking
      sh: sh-sci: sh7377 and sh73a0 build fixes
      sh: cosmetic improvement: use an existing pointer
      serial: sh-sci: suspend/resume wakeup support V2
      serial: sh-sci: Runtime PM support
      sh: select IRQ_FORCED_THREADING.
      sh: intc: Set virtual IRQs as nothread.
      sh: fixup fpu.o compile order
      i2c: add a module alias to the sh-mobile driver
      ALSA: add a module alias to the FSI driver
      ...

commit 42cd71bf1e3a081b3150018bbf448cb6c8a844a5
Merge: f5039935ac68 9a55d9752d8a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 23 15:15:27 2011 -0700

    Merge branch 'for-linus' of master.kernel.org:/home/rmk/linux-2.6-arm
    
    * 'for-linus' of master.kernel.org:/home/rmk/linux-2.6-arm: (137 commits)
      ARM: bcmring: convert to use sp804 clockevents
      ARM: bcmring: convert to sp804 clocksource
      ARM: 6912/1: bcmring: Add clkdev table in init_early
      clockevents: ARM sp804: obtain sp804 timer rate via clks
      clockevents: ARM sp804: allow clockevent name to be specified
      clocksource: ARM sp804: obtain sp804 timer rate via clks
      clocksource: ARM sp804: allow clocksource name to be specified
      clocksource: convert OMAP1 to 32-bit down counting clocksource
      clocksource: convert MXS timrotv2 to 32-bit down counting clocksource
      clocksource: convert SPEAr platforms 16-bit up counting clocksource
      clocksource: convert Integrator/AP 16-bit down counting clocksource
      clocksource: convert W90x900 24-bit down counting clocksource
      clocksource: convert ARM 32-bit down counting clocksources
      clocksource: convert ARM 32-bit up counting clocksources
      clocksource: add common mmio clocksource
      ARM: update sa1100 to reflect PXA updates
      ARM: omap1: convert to using readl/writel instead of volatile struct
      ARM: omap1: delete useless interrupt handler
      ARM: s5p: consolidate selection of timer register
      ARM: 6939/1: fix missing 'cpu_relax()' declaration
      ...

commit ddc5b086804c873d5316de9adcbb7e45feb3c2ee
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed May 4 18:16:50 2011 -0700

    clocksource: Install completely before selecting
    
    commit e05b2efb82596905ebfe88e8612ee81dec9b6592 upstream.
    
    Christian Hoffmann reported that the command line clocksource override
    with acpi_pm timer fails:
    
     Kernel command line: <SNIP> clocksource=acpi_pm
     hpet clockevent registered
     Switching to clocksource hpet
     Override clocksource acpi_pm is not HRT compatible.
     Cannot switch while in HRT/NOHZ mode.
    
    The watchdog code is what enables CLOCK_SOURCE_VALID_FOR_HRES, but we
    actually end up selecting the clocksource before we enqueue it into
    the watchdog list, so that's why we see the warning and fail to switch
    to acpi_pm timer as requested. That's particularly bad when we want to
    debug timekeeping related problems in early boot.
    
    Put the selection call last.
    
    Reported-by: Christian Hoffmann <email@christianhoffmann.info>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Link: http://lkml.kernel.org/r/%3C1304558210.2943.24.camel%40work-vm%3E
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit a83b90b7029a52ca073e4efee437ee74853d32aa
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed May 4 18:16:50 2011 -0700

    clocksource: Install completely before selecting
    
    commit e05b2efb82596905ebfe88e8612ee81dec9b6592 upstream.
    
    Christian Hoffmann reported that the command line clocksource override
    with acpi_pm timer fails:
    
     Kernel command line: <SNIP> clocksource=acpi_pm
     hpet clockevent registered
     Switching to clocksource hpet
     Override clocksource acpi_pm is not HRT compatible.
     Cannot switch while in HRT/NOHZ mode.
    
    The watchdog code is what enables CLOCK_SOURCE_VALID_FOR_HRES, but we
    actually end up selecting the clocksource before we enqueue it into
    the watchdog list, so that's why we see the warning and fail to switch
    to acpi_pm timer as requested. That's particularly bad when we want to
    debug timekeeping related problems in early boot.
    
    Put the selection call last.
    
    Reported-by: Christian Hoffmann <email@christianhoffmann.info>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Link: http://lkml.kernel.org/r/%3C1304558210.2943.24.camel%40work-vm%3E
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 82d63734ea0c7f656b8bf3a885f3626b04eb4180
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Thu May 12 13:43:39 2011 +0100

    ARM: bcmring: convert to sp804 clocksource
    
    bcmring has a set of four sp804 timers incorporated, yet it has its
    own copy of the sp804 code.  Convert its clocksource implementation
    to the standard sp804 support code.
    
    Cc: Jiandong Zheng <jdzheng@broadcom.com>
    Cc: Scott Branden <sbranden@broadcom.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 7ff550de99141cbd3be0129d563cc4554fdde9f6
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Thu May 12 13:31:48 2011 +0100

    clocksource: ARM sp804: obtain sp804 timer rate via clks
    
    This allows platforms to specify the rate of the SP804 clocksource via
    the clk subsystem.  While ARM boards clock these at 1MHz, BCMRing also
    has SP804 timers but are clocked at different rates.
    
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit fb593cf38fc426331275d761fefe13096070f56a
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Thu May 12 12:08:23 2011 +0100

    clocksource: ARM sp804: allow clocksource name to be specified
    
    This allows platforms to specify the clocksource name upon
    registration, which is necessary should they wish to register more
    than one sp804 clocksource.
    
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 933e54a53ccb68543ffb7ea32168ea086c93d09a
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon May 9 09:51:03 2011 +0100

    clocksource: convert OMAP1 to 32-bit down counting clocksource
    
    Convert the OMAP1 32-bit down counting clocksource to the generic
    clocksource infrastructure.
    
    Tested-by: Tony Lindgren <tony@atomide.com>
    Cc: linux-omap@vger.kernel.org
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 5c61ddcfaf98fae4a0ac8077b06a07fb2ba6864a
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 17:21:49 2011 +0100

    clocksource: convert MXS timrotv2 to 32-bit down counting clocksource
    
    Convert the MXS timrotv2 32-bit down counting clocksource to the
    generic clocksource infrastructure.
    
    Cc: Sascha Hauer <kernel@pengutronix.de>
    Acked-by: Shawn Guo <shawn.guo@freescale.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit d6e15d78537d2483bff05f0ee5b5cec6c4678fd5
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 17:10:14 2011 +0100

    clocksource: convert SPEAr platforms 16-bit up counting clocksource
    
    Convert SPEAr platforms 16-bit up counting clocksource, which requires
    a 16-bit register access read rather than 32-bit.
    
    Acked-by: Viresh Kumar <viresh.kumar@st.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit c5039f52329ff796d7fea9024e5615abee02dbfb
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 15:35:22 2011 +0100

    clocksource: convert Integrator/AP 16-bit down counting clocksource
    
    Convert the Integrator/AP 16-bit down-counting clocksource to the
    generic clocksource infrastructure.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 6fa5d5f764469daf3c4d21f94cbc1839b3857bbd
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 15:34:39 2011 +0100

    clocksource: convert W90x900 24-bit down counting clocksource
    
    Convert the W90x900 24-bit down-counting clocksource to the generic
    mmio clocksource infrastructure
    
    Acked-by: Wan ZongShun <mcuos.com@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit bfe45e0be88d8a2e408226d473bff60da4a97d1f
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 15:33:30 2011 +0100

    clocksource: convert ARM 32-bit down counting clocksources
    
    Convert SP804, MXC, Nomadik and Orion 32-bit down-counting clocksources
    to generic mmio clocksource infrastructure.
    
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Sascha Hauer <kernel@pengutronix.de>
    Cc: Alessandro Rubini <rubini@unipv.it>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: Lennert Buytenhek <kernel@wantstofly.org>
    Acked-by: Nicolas Pitre <nico@fluxnic.net>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 234b6ceddb4fc2a4bc5b9a7670f070f6e69e0868
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 14:09:47 2011 +0100

    clocksource: convert ARM 32-bit up counting clocksources
    
    Convert ixp4xx, lpc32xx, mxc, netx, pxa, sa1100, tcc8k, tegra and u300
    to use the generic mmio clocksource recently introduced.
    
    Cc: Imre Kaloz <kaloz@openwrt.org>
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Acked-by: Eric Miao <eric.y.miao@gmail.com>
    Acked-by: "Hans J. Koch" <hjk@hansjkoch.de>
    Acked-by: Colin Cross <ccross@android.com>
    Cc: Erik Gilling <konkers@android.com>
    Cc: Olof Johansson <olof@lixom.net>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Acked-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 442c8176d2efa468577738e3a99a6e051f6e8e55
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 14:06:52 2011 +0100

    clocksource: add common mmio clocksource
    
    Add a generic mmio clocksource, covering both 32-bit and 16-bit register
    access sizes, for up or down counters.  This can be used to easily
    create clocksources for simple counter-based implementations.
    
    Cc: Alessandro Rubini <rubini@unipv.it>
    Cc: Colin Cross <ccross@android.com>
    Cc: Eric Miao <eric.y.miao@gmail.com>
    Cc: Erik Gilling <konkers@android.com>
    Acked-by: "Hans J. Koch" <hjk@hansjkoch.de>
    Cc: Imre Kaloz <kaloz@openwrt.org>
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Cc: Kukjin Kim <kgene.kim@samsung.com>
    Cc: Lennert Buytenhek <kernel@wantstofly.org>
    Cc: Linus Walleij <linus.walleij@stericsson.com>
    Cc: linux-omap@vger.kernel.org
    Acked-by: Nicolas Pitre <nico@fluxnic.net>
    Cc: Olof Johansson <olof@lixom.net>
    Tested-by: Sascha Hauer <s.hauer@pengutronix.de>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@st.com>
    Cc: Wan ZongShun <mcuos.com@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 29d668d260a5a022eaad1cc91fea08d02deb45b1
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon May 9 08:57:10 2011 +0100

    ARM: omap1: delete useless interrupt handler
    
    The OMAP1 clocksource interrupt handler just increments a variable
    which otherwise isn't used, so this seems to be unnecessary.  Tony
    Lindgren confirms, so lets remove it.
    
    Acked-by: Kevin Hilman <khilman@ti.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Cc: linux-omap@vger.kernel.org
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 1b842e91fea9447eff5eb687e28ad61c02f5033e
Author: Magnus Damm <damm@opensource.se>
Date:   Mon Apr 25 22:40:26 2011 +0900

    clocksource: sh_tmu: Runtime PM support
    
    Add Runtime PM support to the TMU driver.
    
    The hardware device is enabled as long as the clocksource
    or the clockevent portion of the driver is used.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 0aeac458d9ebea5f0dc483e2d3f2c06bfa520c02
Author: Magnus Damm <damm@opensource.se>
Date:   Mon Apr 25 22:38:37 2011 +0900

    clocksource: sh_tmu: __clocksource_updatefreq_hz() update
    
    This patch updates the clocksource part of the TMU driver
    to make use of the __clocksource_updatefreq_hz() function.
    
    Without this patch the old code uses clocksource_register()
    together with a hack that assumes a never changing clock rate
    (see clk_enable(), clk_get_rate() and clk_disable()).
    
    The patch uses clocksource_register_hz() with 1 Hz as initial
    value, then lets the ->enable() callback update the value
    with __clocksource_updatefreq_hz() once the struct clk has
    been enabled and the frequency is stable.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 01fa68b58492a5d6708a91c1f474b6a099a9509e
Author: Magnus Damm <damm@opensource.se>
Date:   Mon Apr 25 22:36:10 2011 +0900

    clocksource: sh_cmt: Runtime PM support
    
    Add Runtime PM support to the CMT driver.
    
    The hardware device is enabled as long as the clocksource
    or the clockevent portion of the driver is used.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 3593f5fe40a13badf6921ccbc3378b02fbf6a532
Author: Magnus Damm <damm@opensource.se>
Date:   Mon Apr 25 22:32:11 2011 +0900

    clocksource: sh_cmt: __clocksource_updatefreq_hz() update
    
    This patch updates the clocksource part of the CMT driver
    to make use of the __clocksource_updatefreq_hz() function.
    
    Without this patch the old code uses clocksource_register()
    together with a hack that assumes a never changing clock rate
    (see clk_enable(), clk_get_rate() and clk_disable()).
    
    The patch uses clocksource_register_hz() with 1 Hz as initial
    value, then lets the ->enable() callback update the value
    with __clocksource_updatefreq_hz() once the struct clk has
    been enabled and the frequency is stable.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit f8c47371b566131cf60263ce8fe7a593da151387
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed May 4 18:16:50 2011 -0700

    clocksource: Install completely before selecting
    
    commit e05b2efb82596905ebfe88e8612ee81dec9b6592 upstream.
    
    Christian Hoffmann reported that the command line clocksource override
    with acpi_pm timer fails:
    
     Kernel command line: <SNIP> clocksource=acpi_pm
     hpet clockevent registered
     Switching to clocksource hpet
     Override clocksource acpi_pm is not HRT compatible.
     Cannot switch while in HRT/NOHZ mode.
    
    The watchdog code is what enables CLOCK_SOURCE_VALID_FOR_HRES, but we
    actually end up selecting the clocksource before we enqueue it into
    the watchdog list, so that's why we see the warning and fail to switch
    to acpi_pm timer as requested. That's particularly bad when we want to
    debug timekeeping related problems in early boot.
    
    Put the selection call last.
    
    Reported-by: Christian Hoffmann <email@christianhoffmann.info>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Link: http://lkml.kernel.org/r/%3C1304558210.2943.24.camel%40work-vm%3E
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 102dc1bae12a20214c9ee2d33a7402dc5175e30d
Merge: 91444f47b2a0 bbe7b8bef48c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 20 13:38:28 2011 -0700

    Merge branch 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      MAINTAINERS: Add drivers/clocksource to TIMEKEEPING
      clockevents/source: Use u64 to make 32bit happy

commit bbe7b8bef48c567f5ff3f6041c1fb011292e8f12
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri May 20 11:38:24 2011 +0200

    MAINTAINERS: Add drivers/clocksource to TIMEKEEPING
    
    It's not a random dump ground and we care about it.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ralf Baechle <ralf@linux-mips.org>

commit 7e6628e4bcb3b3546c625ec63ca724f28ab14f0c
Merge: 0f1bdc1815c4 ab0e08f15d23
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 19 17:44:40 2011 -0700

    Merge branch 'timers-clockevents-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-clockevents-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      x86: hpet: Cleanup the clockevents init and register code
      x86: Convert PIT to clockevents_config_and_register()
      clockevents: Provide interface to reconfigure an active clock event device
      clockevents: Provide combined configure and register function
      clockevents: Restructure clock_event_device members
      clocksource: Get rid of the hardcoded 5 seconds sleep time limit
      clocksource: Restructure clocksource struct members

commit 0f1bdc1815c4cb29b3cd71a7091b478e426faa0b
Merge: 80fe02b5daf1 a18f22a968de
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 19 17:44:13 2011 -0700

    Merge branch 'timers-clocksource-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-clocksource-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource: convert mips to generic i8253 clocksource
      clocksource: convert x86 to generic i8253 clocksource
      clocksource: convert footbridge to generic i8253 clocksource
      clocksource: add common i8253 PIT clocksource
      blackfin: convert to clocksource_register_hz
      mips: convert to clocksource_register_hz/khz
      sparc: convert to clocksource_register_hz/khz
      alpha: convert to clocksource_register_hz
      microblaze: convert to clocksource_register_hz/khz
      ia64: convert to clocksource_register_hz/khz
      x86: Convert remaining x86 clocksources to clocksource_register_hz/khz
      Make clocksource name const

commit 724ed53e8ac2c5278af8955673049714c1073464
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 18 21:33:40 2011 +0000

    clocksource: Get rid of the hardcoded 5 seconds sleep time limit
    
    Slow clocksources can have a way longer sleep time than 5 seconds and
    even fast ones can easily cope with 600 seconds and still maintain
    proper accuracy.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Reviewed-by: Ingo Molnar <mingo@elte.hu>
    Link: http://lkml.kernel.org/r/%3C20110518210136.109811585%40linutronix.de%3E

commit 369db4c9524b7487faf1ff89646eee396c1363e1
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 18 21:33:40 2011 +0000

    clocksource: Restructure clocksource struct members
    
    Group the hot path members of struct clocksource together so we have a
    better cache line footprint. Make it cacheline aligned.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Reviewed-by: Ingo Molnar <mingo@elte.hu>
    Link: http://lkml.kernel.org/r/%3C20110518210136.003081882%40linutronix.de%3E

commit a085963a2757b9ab0a7ec1cf4a14aa85935c1e2a
Merge: c1d10d18c542 07f4beb0b5bb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 17 08:02:04 2011 -0700

    Merge branch 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      tick: Clear broadcast active bit when switching to oneshot
      rtc: mc13xxx: Don't call rtc_device_register while holding lock
      rtc: rp5c01: Initialize drvdata before registering device
      rtc: pcap: Initialize drvdata before registering device
      rtc: msm6242: Initialize drvdata before registering device
      rtc: max8998: Initialize drvdata before registering device
      rtc: max8925: Initialize drvdata before registering device
      rtc: m41t80: Initialize clientdata before registering device
      rtc: ds1286: Initialize drvdata before registering device
      rtc: ep93xx: Initialize drvdata before registering device
      rtc: davinci: Initialize drvdata before registering device
      rtc: mxc: Initialize drvdata before registering device
      clocksource: Install completely before selecting

commit a18f22a968de17b29f2310cdb7ba69163e65ec15
Merge: a1c57e0fec53 798778b8653f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat May 14 12:06:36 2011 +0200

    Merge branch 'consolidate-clksrc-i8253' of master.kernel.org:~rmk/linux-2.6-arm into timers/clocksource
    
    Conflicts:
            arch/ia64/kernel/cyclone.c
            arch/mips/kernel/i8253.c
            arch/x86/kernel/i8253.c
    
    Reason: Resolve conflicts so further cleanups do not conflict further
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 798778b8653f64b7b2162ac70eca10367cff6ce8
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 19:03:03 2011 +0100

    clocksource: convert mips to generic i8253 clocksource
    
    Convert MIPS i8253 clocksource code to use generic i8253 clocksource.
    
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 82491451dd25a3abe8496ddbd04ddb3f77d285c2
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 18:55:19 2011 +0100

    clocksource: convert x86 to generic i8253 clocksource
    
    Convert x86 i8253 clocksource code to use generic i8253 clocksource.
    
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 8c414ff3f4dcdde228c6a668385218290d73a265
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 18:50:20 2011 +0100

    clocksource: convert footbridge to generic i8253 clocksource
    
    Convert the footbridge isa-timer code to use generic i8253 clocksource.
    
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 89c0b8e2520e12d69dafc663dfbd39f8180438ea
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun May 8 18:47:58 2011 +0100

    clocksource: add common i8253 PIT clocksource
    
    This is based upon both arch/arm/mach-footbridge/isa-timer.c and
    arch/x86/kernel/i8253.c.
    
    Acked-by: John Stultz <john.stultz@linaro.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit ddb503b42960792f3be580f98959add669241a04
Merge: 298eaaad0edc 90b57f35164a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 13 17:29:03 2011 -0700

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mattst88/alpha-2.6
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mattst88/alpha-2.6:
      alpha: Wire up syscalls new to 2.6.39
      alpha: convert to clocksource_register_hz

commit f550806a7fbca06b487238442546aceb7ecbb0c9
Author: John Stultz <johnstul@us.ibm.com>
Date:   Tue Feb 15 22:34:49 2011 -0800

    alpha: convert to clocksource_register_hz
    
    Converts alpha to use clocksource_register_hz.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    CC: Richard Henderson <rth@twiddle.net>
    CC: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Matt Turner <mattst88@gmail.com>

commit e05b2efb82596905ebfe88e8612ee81dec9b6592
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed May 4 18:16:50 2011 -0700

    clocksource: Install completely before selecting
    
    Christian Hoffmann reported that the command line clocksource override
    with acpi_pm timer fails:
    
     Kernel command line: <SNIP> clocksource=acpi_pm
     hpet clockevent registered
     Switching to clocksource hpet
     Override clocksource acpi_pm is not HRT compatible.
     Cannot switch while in HRT/NOHZ mode.
    
    The watchdog code is what enables CLOCK_SOURCE_VALID_FOR_HRES, but we
    actually end up selecting the clocksource before we enqueue it into
    the watchdog list, so that's why we see the warning and fail to switch
    to acpi_pm timer as requested. That's particularly bad when we want to
    debug timekeeping related problems in early boot.
    
    Put the selection call last.
    
    Reported-by: Christian Hoffmann <email@christianhoffmann.info>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: stable@kernel.org # 32...
    Link: http://lkml.kernel.org/r/%3C1304558210.2943.24.camel%40work-vm%3E
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit ac9a0f1a28f560f2c65ee6e2ae5b750fac9f14cb
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Mon Oct 25 16:53:46 2010 -0700

    x86/pvclock: Zero last_value on resume
    
    commit e7a3481c0246c8e45e79c629efd63b168e91fcda upstream.
    
    If the guest domain has been suspend/resumed or migrated, then the
    system clock backing the pvclock clocksource may revert to a smaller
    value (ie, can be non-monotonic across the migration/save-restore).
    
    Make sure we zero last_value in that case so that the domain
    continues to see clock updates.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Andi Kleen <ak@linux.intel.com>

commit f2e0bf2181e4117fa7319be2c9249df968ad9096
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Mar 28 11:25:40 2011 +0200

    arm: footbridge: Make cksrc_dc21285_disable() void
    
    This clocksource function needs to be void.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 132a10e37130f769046d68fa36306c940c981869
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Mon Oct 25 16:53:46 2010 -0700

    x86/pvclock: Zero last_value on resume
    
    commit e7a3481c0246c8e45e79c629efd63b168e91fcda upstream.
    
    If the guest domain has been suspend/resumed or migrated, then the
    system clock backing the pvclock clocksource may revert to a smaller
    value (ie, can be non-monotonic across the migration/save-restore).
    
    Make sure we zero last_value in that case so that the domain
    continues to see clock updates.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 2c1d2470c0c0992fae2cc0e04921f9e02a670a00
Merge: 664322a44752 ddb7d1e975d2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Mar 18 22:31:05 2011 -0700

    Merge branch 'fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/linux-2.6-mn10300
    
    * 'fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/linux-2.6-mn10300:
      MN10300: Clear ASB2364 peripheral interrupt masks before enabling interrupts
      MN10300: Fix the ASB2364 gdbport UART register defs
      MN10300: Fix ASB2364 FPGA register defs
      MN10300: Select GENERIC_HARDIRQS_NO_DEPRECATED
      MN10300: Select HAVE_GENERIC_HARDIRQS rather than GENERIC_HARDIRQS
      MN10300: Convert ASB2364 FPGA irq_chip to new functions
      MN10300: Convert ipi irq_chip to new functions
      MN10300: Convert serial irq_chip to new functions
      MN10300: Convert cpu irq_chips to new functions
      MN10300: Remove unused mn10300_intc_* functions
      MN10300: Remove stale irq_chip.end - V2
      MN10300: Use clockevents_calc_mult_shift()
      MN10300: Use clocksource_register_hz()
      MN10300: Remove stale code

commit 817890ba15df44181bc9c2bf7527cb066ebae06f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Mar 18 16:52:50 2011 +0000

    MN10300: Use clocksource_register_hz()
    
    clocksource_register_hz() calculates the shift/mult pair for the
    clocksource. Remove the mn10300 duplicate implementation.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Koichi Yasutake <yasutake.koichi@jp.panasonic.com>
    Cc: Mark Salter <msalter@redhat.com>
    Signed-off-by: David Howells <dhowells@redhat.com>

commit 73a173a4117419892bd436e85a00a53aa22ad118
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Mar 18 16:42:06 2011 +0000

    MN10300: Remove stale code
    
    mn10300 implements clocksource and clockevents and selects them
    unconditionally in Kconfig. Remove the stale code which seems to be a
    leftover of the conversion. Cleanup the configuration switches as well.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Koichi Yasutake <yasutake.koichi@jp.panasonic.com>
    Cc: Mark Salter <msalter@redhat.com>
    Signed-off-by: David Howells <dhowells@redhat.com>

commit b04d0a90908cdb733e490486287e1ba8c568ffb0
Merge: 054cfaacf888 c816be7b5f24
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 16 20:41:28 2011 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/sparc-next-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/sparc-next-2.6: (33 commits)
      sparc32: Fix might-be-used-uninitialized warning in do_sparc_fault().
      sparc: Fix .size directive for do_int_load
      sparc64: Fix build errors with gcc-4.6.0
      sparc32,sun4m: percpu and global register definitions moved to irq.h
      sparc32: introduce build_device_irq
      sparc32: introduce sparc_irq_config
      sparc32: fix build with leon or floppy enabled
      sparc: convert to clocksource_register_hz/khz
      sparc64: Sharpen address space randomization calculations.
      sparc32: irq_32.c cleanup
      sparc32, sun4d: add comment in empty statement in sun4d_request_irq()
      sparc32,sun4d: drop unused code in sun4d_distribute_irqs()
      sparc32,sun4d: irq, smp files cleanup
      sparc32,sun4m: irq, smp files cleanup
      sparc32,sun4c: irq file cleanup
      sparc32: add irq + smp declarations to headers
      sparc32: remove tick14.c
      sparc32/leon: FPU-FSR only available when FPU present
      SPARC/LEON: power down instruction different of different LEONs
      sparc32: added U-Boot build target: uImage
      ...

commit 81043e811191b5ccc1e6c170ed26f4ac8388834f
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed Feb 23 13:08:21 2011 -0800

    sparc: convert to clocksource_register_hz/khz
    
    This converts the sparc clocksources to use clocksource_register_hz/khz
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ccc46e29a63c88aa9ac72aac86ff0cfd5c627a11
Author: Haojian Zhuang <haojian.zhuang@marvell.com>
Date:   Wed Nov 24 11:54:23 2010 +0800

    ARM: pxa: auto compute shift and mult of timer
    
    Use auto-computed shift and mult of timer with new API
    clocksource_calc_mult_shift()/clockevents_calc_mult_shift().
    
    Signed-off-by: Haojian Zhuang <haojian.zhuang@marvell.com>
    Cc: Nicolas Pitre <nico@fluxnic.net>
    Signed-off-by: Eric Miao <eric.y.miao@gmail.com>

commit 30fe76437bc2463b25e9a64ff1b28f293e3f3413
Author: Jaecheol Lee <jc.lee@samsung.com>
Date:   Wed Mar 9 08:22:31 2011 +0900

    ARM: EXYNOS4: Update HRT for supporting PM
    
    This patch updates HRT driver for supporting PM.
    The resume function of PWM4 timer which is used clocksource is needed
    when kernel is resuming for restarting.
    
    Signed-off-by: Jaecheol Lee <jc.lee@samsung.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 20780fcc4091897797979985868b1572dc7d78d9
Author: Sangbeom Kim <sbkim73@samsung.com>
Date:   Sat Mar 12 08:02:12 2011 +0900

    ARM: S5P: Update machine of S5P64X0 and S5PV210 for HRT
    
    This patch adds support HRT for machines of S5P64X0 and S5PV210.
    Basically, PWM Timer3 is used for clockevent and PWM Timer4 is
    used for clocksource. Since PWM Timer3 is used for other purpose,
    PWM Timer2 is used on SMDKV210.
    
    Signed-off-by: Sangbeom Kim <sbkim73@samsung.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit 95b90afec301f050f72740e8696f7cce8a37db5a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Mar 4 17:36:23 2011 -0800

    pps: make pps_gen_parport depend on BROKEN
    
    This driver causes hard lockups, when the active clock soure is jiffies.
    
    The reason is that it loops with interrupts disabled waiting for a
    timestamp to be reached by polling getnstimeofday().  Though with a
    jiffies clocksource, when that code runs on the same CPU which is
    responsible for updating jiffies, then we loop in circles for ever
    simply because the timer interrupt cannot update jiffies.  So both UP
    and SMP can be affected.
    
    There is no easy fix for that problem so make it depend on BROKEN for
    now.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Alexander Gordeev <lasaine@lvk.cs.msu.su>
    Cc: Rodolfo Giometti <giometti@linux.it>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 595b62a8acfb289a5d2fcc70464ba0995b55fdd7
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Mon Oct 25 16:53:46 2010 -0700

    x86/pvclock: Zero last_value on resume
    
    commit e7a3481c0246c8e45e79c629efd63b168e91fcda upstream.
    
    If the guest domain has been suspend/resumed or migrated, then the
    system clock backing the pvclock clocksource may revert to a smaller
    value (ie, can be non-monotonic across the migration/save-restore).
    
    Make sure we zero last_value in that case so that the domain
    continues to see clock updates.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 4f427634b127f5fdc4e9fd2e5780f0a6caef936b
Merge: 7f233dee2149 02fa9f0451ac
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Feb 28 17:57:30 2011 -0800

    Merge branch 'omap-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap-2.6
    
    * 'omap-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap-2.6:
      omap4: prcm: Fix the CPUx clockdomain offsets
      OMAP2+: clocksource: fix crash on boot when !CONFIG_OMAP_32K_TIMER
      OMAP2/3: clock: fix fint calculation for DPLL_FREQSEL
      OMAP2+: mailbox: fix lookups for multiple mailboxes
      OMAP2420: mailbox: fix IVA vs DSP IRQ numbering
      mach-omap2: smartreflex: world-writable debugfs voltage files
      mach-omap2: pm: world-writable debugfs timer files
      mach-omap2: mux: world-writable debugfs files

commit a2debdbd1ad896a410019c9cf30785cad15930fc
Author: Paul Walmsley <paul@pwsan.com>
Date:   Wed Feb 23 00:14:07 2011 -0700

    OMAP2+: hwmod: add ability to setup individual hwmods
    
    Add omap_hwmod_setup_one(), which is intended for use early in boot to
    selectively setup the hwmods needed for system clocksources and
    clockevents, and any other hwmod that is needed in early boot.
    omap_hwmod_setup_all() can then be called later in the boot process.
    The point is to minimize the amount of code that needs to be run
    early.
    
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Cc: Benoît Cousson <b-cousson@ti.com>
    Cc: Kevin Hilman <khilman@ti.com>
    Cc: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Cc: Tony Lindgren <tony@atomide.com>

commit 48d54f3fd20b435311f295b3bca3570096a2ac83
Author: Paul Walmsley <paul@pwsan.com>
Date:   Wed Feb 23 00:14:07 2011 -0700

    OMAP2+: hwmod: ignore attempts to re-setup a hwmod
    
    Previously, if a hwmod had already been set up, and the code attempted
    to set up the hwmod again, an error would be returned.  This is not
    really useful behavior if we wish to allow the OMAP core code to setup
    the hwmods needed for the Linux clocksources and clockevents before
    the rest of the hwmods are setup.  So, instead of generating errors,
    just ignore the attempt to re-setup the hwmod.
    
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Cc: Benoît Cousson <b-cousson@ti.com>
    Cc: Kevin Hilman <khilman@ti.com>

commit bac1a0f0bbf0b11b23fe714826f29fc9aeb35855
Author: Paul Walmsley <paul@pwsan.com>
Date:   Wed Feb 23 00:14:06 2011 -0700

    OMAP2+: hwmod: allow multiple calls to omap_hwmod_init()
    
    There's no longer any reason why we should prevent multiple
    calls to omap_hwmod_init().  It is now simply used to register an
    array of hwmods.
    
    This should allow a subset of hwmods (e.g., hwmods
    handling the system clocksource and clockevents) to be registered
    earlier than the remaining mass of hwmods.
    
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Cc: Benoît Cousson <b-cousson@ti.com>
    Cc: Kevin Hilman <khilman@ti.com>

commit cbc9438075ca9dee3f39a2e7310f81c304b40359
Author: Paul Walmsley <paul@pwsan.com>
Date:   Tue Feb 22 19:59:49 2011 -0700

    OMAP2+: clocksource: fix crash on boot when !CONFIG_OMAP_32K_TIMER
    
    
    OMAP2+ kernels built without CONFIG_OMAP_32K_TIMER crash on boot after the
    2.6.38 sched_clock changes:
    
    [    0.000000] OMAP clockevent source: GPTIMER1 at 13000000 Hz
    [    0.000000] Unable to handle kernel NULL pointer dereference at virtual address 00000000
    [    0.000000] pgd = c0004000
    [    0.000000] [00000000] *pgd=00000000
    [    0.000000] Internal error: Oops: 80000005 [#1] SMP
    [    0.000000] last sysfs file:
    [    0.000000] Modules linked in:
    [    0.000000] CPU: 0    Not tainted  (2.6.38-rc5-00057-g04aa67d #152)
    [    0.000000] PC is at 0x0
    [    0.000000] LR is at sched_clock_poll+0x2c/0x3c
    
    Without CONFIG_OMAP_32K_TIMER, the kernel has an clockevent and
    clocksource resolution about three orders of magnitude higher than
    with CONFIG_OMAP_32K_TIMER set.  The tradeoff is that the lowest
    power consumption states are not available.
    
    Fix by calling init_sched_clock() from the GPTIMER clocksource init code.
    
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit a1c57e0fec53defe745e64417eacdbd3618c3e66
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Apr 26 20:20:07 2010 -0700

    blackfin: convert to clocksource_register_hz
    
    This converts the blackfin clocksource to use clocksource_register_hz.
    
    CC: Mike Frysinger <vapier@gentoo.org>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 75c4fd8c7862f37eeae5c80f33bbe4dce97571d4
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Apr 26 20:23:11 2010 -0700

    mips: convert to clocksource_register_hz/khz
    
    This converts the mips clocksources to use clocksource_register_hz/khz
    
    CC: Ralf Baechle <ralf@linux-mips.org>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 39280742efb00ab61ad62486c737fdd3e980c30f
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Apr 26 20:24:37 2010 -0700

    sparc: convert to clocksource_register_hz/khz
    
    This converts the sparc clocksources to use clocksource_register_hz/khz
    
    CC: "David S. Miller" <davem@davemloft.net>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 7861434fe9b5c9dad1bbb1f674cded95950e778e
Author: John Stultz <johnstul@us.ibm.com>
Date:   Tue Oct 19 17:49:07 2010 -0700

    alpha: convert to clocksource_register_hz
    
    Converts alpha to use clocksource_register_hz.
    
    CC: Richard Henderson <rth@twiddle.net>
    CC: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
    CC: Matt Turner <mattst88@gmail.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit b8f39f7dfe12d4c8402c493a24fbf1e21d086771
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Apr 26 20:22:23 2010 -0700

    microblaze: convert to clocksource_register_hz/khz
    
    This converts the microblaze clocksources to use clocksource_register_hz/khz
    
    CC: Michal Simek <monstr@monstr.eu>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Michal Simek <monstr@monstr.eu>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit d60c3041778c11f564969fb62b337df68232ee80
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Apr 26 20:20:47 2010 -0700

    ia64: convert to clocksource_register_hz/khz
    
    This converts the ia64 clocksources to use clocksource_register_hz/khz
    
    CC: Tony Luck <tony.luck@intel.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Tony Luck <tony.luck@intel.com> [clocksource_itc path]
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit b01cc1b0eae0dea19257b29347116505fbedf679
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Apr 26 19:03:05 2010 -0700

    x86: Convert remaining x86 clocksources to clocksource_register_hz/khz
    
    This converts the remaining x86 clocksources to use
    clocksource_register_hz/khz.
    
    CC: jacob.jun.pan@intel.com
    CC: Glauber Costa <glommer@redhat.com>
    CC: Dimitri Sivanich <sivanich@sgi.com>
    CC: Rusty Russell <rusty@rustcorp.com.au>
    CC: Jeremy Fitzhardinge <jeremy@xensource.com>
    CC: Chris McDermott <lcm@us.ibm.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> [xen]
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 36d8593ec74dc04d3bd7c1c897a7b7cfbd0b0dc6
Author: Russell King - ARM Linux <linux@arm.linux.org.uk>
Date:   Sat Feb 19 15:34:50 2011 +0000

    Make clocksource name const
    
    As nothing should be writing to the clocksource name string, make the
    clocksource name pointer const.  Build-tested on ARM Versatile Express.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 5df91509d324d44cfb11e55d9cb02fe18b53b045
Author: jacob.jun.pan@linux.intel.com <jacob.jun.pan@linux.intel.com>
Date:   Fri Feb 18 13:42:54 2011 -0800

    x86: mrst: Remove apb timer read workaround
    
    APB timer current count was unreliable in the earlier silicon, which
    could result in time going backwards. This problem has been fixed in
    the current silicon stepping. This patch removes the workaround which
    was used to check and prevent timer rolling back when APB timer is
    used as clocksource device.
    
    The workaround code was also flawed by potential race condition
    around the cached read value last_read. Though a fix can be done
    by assigning last_read to a local variable at the beginning of
    apbt_read_clocksource(), but this is not necessary anymore.
    
    [ tglx: A sane timer on an Intel chip - I can't believe it ]
    
    Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Cc: Arjan van de Ven <arjan@linux.intel.com>
    Cc: Alan Cox <alan@linux.intel.com>
    LKML-Reference: <1298065374-25532-1-git-send-email-jacob.jun.pan@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 4e8d76373c9fd7a1c1b401fc97ba01c0ecbb888f
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Fri Jan 28 21:00:39 2011 +0000

    ARM: footbridge: convert to clockevents/clocksource
    
    The Footbridge platforms have some reasonable timers in the host bridge,
    which we use for most footbridge-based platforms.  However, NetWinder's
    clock these using a spread-spectrum clock which makes them too unstable
    for time keeping.  So we have to rely on the PIT.
    
    Convert both Footbridge timers and PIT timers to use the clocksource
    and clockevent infrastructure.  Tested on Netwinder.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit fbad1ea94159a71bc0f68b00e57ae803606af9fb
Author: Torben Hohn <torbenh@gmx.de>
Date:   Thu Jan 27 15:59:00 2011 +0100

    time: Move get_jiffies_64 to kernel/time/jiffies.c
    
    Move the jiffies access functions to the jiffies clocksource code.
    
    [ tglx: Add missing include ]
    
    Signed-off-by: Torben Hohn <torbenh@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: johnstul@us.ibm.com
    Cc: yong.zhang0@gmail.com
    Cc: hch@infradead.org
    LKML-Reference: <20110127145900.23248.73352.stgit@localhost>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 1817dc0370873caff77b924b53ae489edaf9b1e2
Author: Voss, Nikolaus <N.Voss@weinmann.de>
Date:   Tue Jan 25 15:07:29 2011 -0800

    drivers/clocksource/tcb_clksrc.c: fix init sequence
    
    setup_irq() was called before clockevents_register_device() which is
    needed by the irq handler.  Bug was reproducible by restarting the
    kernel using kexec (reliable crash).
    
    Signed-off-by: Nikolaus Voss <n.voss@weinmann.de>
    Cc: David Brownell <dbrownell@users.sourceforge.net>
    Cc: Haavard Skinnemoen <hskinnemoen@atmel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 34686fe689bf62d34af5379240caf7c446607ead
Merge: 500d85ce39e4 4fb699b408b5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jan 25 05:29:49 2011 +1000

    Merge branch 'omap-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap-2.6
    
    * 'omap-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap-2.6:
      omap: DMA: clear interrupt status correctly
      OMAP3: Devkit8000: Fix tps65930 pullup/pulldown configuration
      arm: omap3: cm-t3517: minor comment fix
      arm: omap3: cm-t3517: rtc fix
      omap1: Fix sched_clock implementation when both MPU timer and 32K timer are used
      omap1: Fix booting for 15xx and 730 with omap1_defconfig
      omap1: Fix sched_clock for the MPU timer
      OMAP: PRCM: remove duplicated headers
      OMAP4: clockdomain: bypass unimplemented wake-up dependency functions on OMAP4
      OMAP: counter_32k: init clocksource as part of machine timer init

commit d8328f3b85f34c0dc5866f10bf6e7842fb511d62
Author: Paul Walmsley <paul@pwsan.com>
Date:   Sat Jan 15 21:32:01 2011 -0700

    OMAP: counter_32k: init clocksource as part of machine timer init
    
    After commit dc548fbbd2ecd0fc3b02301d551e5f8e19ae58fd ("ARM: omap: convert
    sched_clock() to use new infrastructure"), OMAPs that use the 32KiHz
    "synchronization timer" as their clocksource crash during boot:
    
    [    0.000000] OMAP clockevent source: GPTIMER1 at 32768 Hz
    [    0.000000] Unable to handle kernel NULL pointer dereference at virtual address 00000000
    [    0.000000] pgd = c0004000
    [    0.000000] [00000000] *pgd=00000000
    [    0.000000] Internal error: Oops: 80000005 [#1] SMP
    [    0.000000] last sysfs file:
    [    0.000000] Modules linked in:
    [    0.000000] CPU: 0    Tainted: G        W    (2.6.37-07734-g2467802 #7)
    [    0.000000] PC is at 0x0
    [    0.000000] LR is at sched_clock_poll+0x2c/0x3c
    [    0.000000] pc : [<00000000>]    lr : [<c0060b74>]    psr: 600001d3
    [    0.000000] sp : c058bfd0  ip : c058a000  fp : 00000000
    [    0.000000] r10: 00000000  r9 : 411fc092  r8 : 800330c8
    [    0.000000] r7 : c05a08e0  r6 : c0034c48  r5 : c05ffc40  r4 : c0034c4c
    [    0.000000] r3 : c05ffe6c  r2 : c05a0bc0  r1 : c059f098  r0 : 00000000
    [    0.000000] Flags: nZCv  IRQs off  FIQs off  Mode SVC_32  ISA ARM  Segment kernel
    [    0.000000] Control: 10c53c7f  Table: 8000404a  DAC: 00000017
    
    This is due to the recent ARM init_sched_clock() changes and the late
    initialization of the counter_32k clock source.  More information here:
    
       http://marc.info/?l=linux-omap&m=129513468605208&w=2
    
    Fix by initializing the counter_32k clocksource during the machine timer
    initialization.
    
    Reported-by: Russell King <rmk+kernel@arm.linux.org.uk>
    Tested-by: Thomas Weber <weber@corscience.de>
    Signed-off-by: Paul Walmsley <paul@pwsan.com>

commit 2a86cb7c2b1e9eb98b36d0a3cf4444d8851968b1
Merge: 8a0eebf66e3b c975ffadd144
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 13 12:06:58 2011 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/egtvedt/avr32-2.6
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/egtvedt/avr32-2.6:
      avr32: update default configuration files for Atmel boards
      avr32: Convert to clocksource_register_hz
      avr32: make architecture sys_clone prototype match asm-generic prototype
      avr32: use syscall prototypes from asm-generic instead of arch
      avr32: disable kprobes for all default configurations
      avr32: boards: setup: use IS_ERR() instead of NULL check

commit 1e2de47cddc70ae973cf468e2f2954b4ae80f4e3
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Nov 1 13:12:27 2010 -0700

    avr32: Convert to clocksource_register_hz
    
    This converts the avr32 clocksource to use clocksource_register_hz.
    
    This is untested, so any assistance in testing would be appreciated!
    
    CC: Hans-Christian Egtvedt <hans-christian.egtvedt@atmel.com>
    CC: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 94790ec25fdd51dc4126cc176f2e104f80f87fcb
Author: Jeff Ohlstein <johlstei@codeaurora.org>
Date:   Thu Dec 2 12:05:12 2010 -0800

    msm: timer: SMP timer support for msm
    
    The msm provides timer hardware that is private to each core. Each
    timer has separate counter and match registers, so we create separate
    clock_event_devices for each core. For the global clocksource, use
    cpu 0's counter.
    
    Signed-off-by: Jeff Ohlstein <johlstei@codeaurora.org>
    Signed-off-by: David Brown <davidb@codeaurora.org>

commit dda5f0a372873bca5f0b1d1866d7784dffd8b675
Merge: 65b2074f84be 88606e80da0e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 6 10:42:43 2011 -0800

    Merge branch 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      MAINTAINERS: Update timer related entries
      timers: Use this_cpu_read
      timerqueue: Make timerqueue_getnext() static inline
      hrtimer: fix timerqueue conversion flub
      hrtimers: Convert hrtimers to use timerlist infrastructure
      timers: Fixup allmodconfig build issue
      timers: Rename timerlist infrastructure to timerqueue
      timers: Introduce timerlist infrastructure.
      hrtimer: Remove stale comment on curr_timer
      timer: Warn when del_timer_sync() is called in hardirq context
      timer: Del_timer_sync() can be used in softirq context
      timer: Make try_to_del_timer_sync() the same on SMP and UP
      posix-timers: Annotate lock_timer()
      timer: Permit statically-declared work with deferrable timers
      time: Use ARRAY_SIZE macro in timecompare.c
      timer: Initialize the field slack of timer_list
      timer_list: Remove alignment padding on 64 bit when CONFIG_TIMER_STATS
      time: Compensate for rounding on odd-frequency clocksources
    
    Fix up trivial conflict in MAINTAINERS

commit 5e06b6492e53ab2a4e467763a9ee9f70b032c301
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Wed Dec 15 19:19:25 2010 +0000

    ARM: ensure all sched_clock() implementations are notrace marked
    
    ftrace requires sched_clock() to be notrace.  Ensure that all
    implementations are so marked.  Also make sure that they include
    linux/sched.h
    
    Also ensure OMAP clocksource read functions are marked notrace as
    they're used for sched_clock() too.
    
    Tested-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Tested-by: Will Deacon <will.deacon@arm.com>
    Tested-by: Mikael Pettersson <mikpe@it.uu.se>
    Tested-by: Eric Miao <eric.y.miao@gmail.com>
    Tested-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 684e94cbcb5add60356d124166e40feb2174f0f1
Author: Colin Cross <ccross@android.com>
Date:   Wed Nov 17 16:20:15 2010 -0800

    ARM: tegra: timer: Separate clocksource and sched_clock
    
    tegra_clocksource_read should not use cnt32_to_63, wrapping is
    already handled in the clocksource code.  Move the cnt32_to_63
    into the sched_clock function, and replace the use of clocksource
    mult and shift with a multiplication by 1000 to convert us to ns.
    
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Acked-by: Linus Walleij <linus.walleij@stericsson.com>
    Tested-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Colin Cross <ccross@android.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 11e718a6535c0c7a375b24c3ad60a98b988090c8
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:21:52 2010 +0000

    ARM: realview/versatile: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Tested-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 2218543fe0c40ce36fa165c5003072cc8b236c34
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:21:41 2010 +0000

    ARM: stmp: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 1d0ac3cdf3d31ba84499c3a914aa2b54eecbf2af
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:21:33 2010 +0000

    ARM: orion: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Acked-by: Nicolas Pitre <nico@fluxnic.net>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit e0387320c32d4b9852e6436233274003e82318a6
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:21:21 2010 +0000

    ARM: spear: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Acked-by: Viresh Kumar <viresh.kumar@st.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 8492fd28987732e42f33a3711299927e8905d448
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:20:49 2010 +0000

    ARM: nomadik: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Acked-by: Linus Walleij <linus.walleij@stericsson.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 509e1f0fd7627a5b8d2da9e8c2b4ab1c2743c5f6
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:20:35 2010 +0000

    ARM: mxc: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Acked-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit d28b116b9239b603f790a5ed6f0c5fe329561b49
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:20:23 2010 +0000

    ARM: iop: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 894cf56b1a64b65360086c2c890c2ae7f257793f
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:20:06 2010 +0000

    ARM: nuc: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Acked-by: Wan zongshun <mcuos.com@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit da797478c1ba05a858c7719a02ce0856a5bb69ce
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:19:55 2010 +0000

    ARM: U300: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Acked-by: Linus Walleij <linus.walleij@stericsson.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 6b46340a18e7552656097119d121b4b42049dde1
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:19:44 2010 +0000

    ARM: tcc8k: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 2c760b5b52a56e8b92c384dc9611e23fd4980d03
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:19:35 2010 +0000

    ARM: SA11x0: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 71c874529904818a2888a650425369e0842ff28d
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:19:22 2010 +0000

    ARM: s5pv310: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit f62ae0ce4369effc432ea25df09c88d7aa08965e
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:19:11 2010 +0000

    ARM: PXA: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Tested-by: Eric Miao <eric.y.miao@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 8437c25e78c3af2b31bf6c8942494e34e267f446
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:18:44 2010 +0000

    ARM: omap: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Tested-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit b460ddbbe29a45cc13e3f13314ec9aed7e9412f2
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:18:32 2010 +0000

    ARM: ns9xxx: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 4f9272bfe8fca7e6d9e2f44eb78fd2c3ecdf9a0e
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:18:21 2010 +0000

    ARM: netx: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit ff9c9772480f06bc7164217b93ebb99fc088539f
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:18:12 2010 +0000

    ARM: MSM: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Tested-By: Jeff Ohlstein <johlstei@codeaurora.org>
    Acked-by: David Brown <davidb@codeaurora.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 5975f496e07e0f1e396939308b815f99907440ea
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:18:04 2010 +0000

    ARM: mmp: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 594cbf2f4ceaaacc706eb1302ff139a61092ec6f
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:17:52 2010 +0000

    ARM: lpc32xx: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit b7c7c50adcf0d9c901542c5db8d795fe226bb454
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:17:40 2010 +0000

    ARM: ixp4xx: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Tested-by: Mikael Pettersson <mikpe@it.uu.se>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 08963dab7c6b0ba6a687cb008299eabbbeff7282
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:17:24 2010 +0000

    ARM: integrator: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 7c044be50d4bdc33e039a65956b8a927feecaaa3
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:17:12 2010 +0000

    ARM: davinci: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Acked-by: Kevin Hilman <khilman@deeprootsystems.com>
    Tested-by: Kevin Hilman <khilman@deeprootsystems.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 6eda51192fb1c767f792e92c67b9a4fd73c1fcba
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:16:39 2010 +0000

    ARM: bcmring: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Acked-By: Scott Branden <sbranden@broadcom.com>
    Acked-By: Jiandong Zheng <jdzheng@broadcom.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 5010f3db952b19cd353d1e90838818922d995697
Author: Magnus Damm <damm@opensource.se>
Date:   Tue Dec 21 08:40:59 2010 +0000

    ARM: mach-shmobile: sh73a0 TMU support
    
    Add support for 2 TMU timer channels on sh73a0.
    
    One timer channel is used for clocksource and
    the other is used for clockevents. All channels
    in the same TMU block share MSTP bit as usual.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 9e0afb9437c68be62085d74407b169732108a929
Merge: 7aeb3be341cc 65ada547d68d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 20 09:53:50 2010 -0800

    Merge branch 'sh-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6
    
    * 'sh-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6:
      clocksource: sh_cmt: Remove nested spinlock fix

commit 4e472096fa4ef751e7ea90e304d971843a1e350d
Author: Shawn Guo <shawn.guo@freescale.com>
Date:   Sat Dec 18 21:39:30 2010 +0800

    ARM: mxs: Add timer support
    
    There are 2 versions of the timrot on Freescale MXS-based SoCs.
    The v1 on MX23 only gets 16 bits counter, while v2 on MX28
    extends the counter to 32 bits.
    
    The implementation uses two timers, one for clock_event and
    another for clocksource. MX28 uses timrot 0 and 1, while MX23
    uses 0 and 2.
    
    Signed-off-by: Shawn Guo <shawn.guo@freescale.com>
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>

commit 132b16325fae0742a02075894af16197e83febe8
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Mon Dec 13 13:14:55 2010 +0000

    ARM: AT91: update clock source registration
    
    In d7e81c2 (clocksource: Add clocksource_register_hz/khz interface) new
    interfaces were added which simplify (and optimize) the selection of the
    divisor shift/mult constants.  Switch over to using this new interface.
    
    Acked-by: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 65ada547d68dc075aa06df92fe325bff07cbc606
Author: Takashi YOSHII <takashi.yoshii.zj@renesas.com>
Date:   Fri Dec 17 07:25:09 2010 +0000

    clocksource: sh_cmt: Remove nested spinlock fix
    
    There are control flow that sh_cmt_set_next() does double
    spin-lock. The callers sh_cmt_{start,stop}() already have
    lock. But another callers sh_cmt_clock_event_{start,next}()
    does not.
    
    Now sh_cmt_set_next() does not lock by itself. All the
    callers should hold spin-lock before calling it.
    
    [damm@opensource.se: use __sh_cmt_set_next() to simplify code]
    [damm@opensource.se: added stable, suitable for v2.6.35 + v2.6.36]
    Cc: stable@kernel.org
    Signed-off-by: Takashi YOSHII <takashi.yoshii.zj@renesas.com>
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 364a1246522f99cbe58040e99af007ada31034ed
Author: Heiko Schocher <hs@denx.de>
Date:   Mon Nov 22 21:30:33 2010 +0000

    powerpc/time: printk time stamp init not correct
    
    problem:
    
    I see sometimes on my mpc5200 based board such printk timing
    information:
    
    [    0.000000] NR_IRQS:512 nr_irqs:512 16
    [    0.000000] MPC52xx PIC is up and running!
    [    0.000000] clocksource: timebase mult[79364d9] shift[22] registered
    [    0.000000] console [ttyPSC0] enabled
    [  130.300633] pid_max: default: 32768 minimum: 301
    [  130.305647] Mount-cache hash table entries: 512
    [  130.315818] NET: Registered protocol family 16
    
    reason:
    if the tbu not starts from 0 when linux boots, boot_tb
    maybe could not store the real 64 bit tbu value, because
    boot_tp is only a 32 bit unsigned long.
    
    solution:
    change boot_tb to u64
    
    [BenH: Made it u64 instead of unsigned long long]
    
    Signed-off-by: Heiko Schocher <hs@denx.de>
    cc: Wolfgang Denk <wd@denx.de>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

commit 08ec0c58fb8a05d3191d5cb6f5d6f81adb419798
Author: John Stultz <johnstul@us.ibm.com>
Date:   Tue Jul 27 17:00:00 2010 -0700

    x86: Improve TSC calibration using a delayed workqueue
    
    Boot to boot the TSC calibration may vary by quite a large amount.
    
    While normal variance of 50-100ppm can easily be seen, the quick
    calibration code only requires 500ppm accuracy, which is the limit
    of what NTP can correct for.
    
    This can cause problems for systems being used as NTP servers, as
    every time they reboot it can take hours for them to calculate the
    new drift error caused by the calibration.
    
    The classic trade-off here is calibration accuracy vs slow boot times,
    as during the calibration nothing else can run.
    
    This patch uses a delayed workqueue  to calibrate the TSC over the
    period of a second. This allows very accurate calibration (in my
    tests only varying by 1khz or 0.4ppm boot to boot). Additionally this
    refined calibration step does not block the boot process, and only
    delays the TSC clocksoure registration by a few seconds in early boot.
    If the refined calibration strays 1% from the early boot calibration
    value, the system will fall back to already calculated early boot
    calibration.
    
    Credit to Andi Kleen who suggested using a timer quite awhile back,
    but I dismissed it thinking the timer calibration would be done after
    the clocksource was registered (which would break things). Forgive
    me for my short-sightedness.
    
    This patch has worked very well in my testing, but TSC hardware is
    quite varied so it would probably be good to get some extended
    testing, possibly pushing inclusion out to 2.6.39.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    LKML-Reference: <1289003985-29060-1-git-send-email-johnstul@us.ibm.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Ingo Molnar <mingo@elte.hu>
    CC: Martin Schwidefsky <schwidefsky@de.ibm.com>
    CC: Clark Williams <williams@redhat.com>
    CC: Andi Kleen <andi@firstfloor.org>

commit e7a3481c0246c8e45e79c629efd63b168e91fcda
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Mon Oct 25 16:53:46 2010 -0700

    x86/pvclock: Zero last_value on resume
    
    If the guest domain has been suspend/resumed or migrated, then the
    system clock backing the pvclock clocksource may revert to a smaller
    value (ie, can be non-monotonic across the migration/save-restore).
    
    Make sure we zero last_value in that case so that the domain
    continues to see clock updates.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 5f2b0ba4d94b3ac23cbc4b7f675d98eb677a760a
Author: Don Zickus <dzickus@redhat.com>
Date:   Fri Nov 12 11:22:23 2010 -0500

    x86, nmi_watchdog: Remove the old nmi_watchdog
    
    Now that we have a new nmi_watchdog that is more generic and
    sits on top of the perf subsystem, we really do not need the old
    nmi_watchdog any more.
    
    In addition, the old nmi_watchdog doesn't really work if you are
    using the default clocksource, hpet.  The old nmi_watchdog code
    relied on local apic interrupts to determine if the cpu is still
    alive.  With hpet as the clocksource, these interrupts don't
    increment any more and the old nmi_watchdog triggers false
    postives.
    
    This piece removes the old nmi_watchdog code and stubs out any
    variables and functions calls.  The stubs are the same ones used
    by the new nmi_watchdog code, so it should be well tested.
    
    Signed-off-by: Don Zickus <dzickus@redhat.com>
    Cc: fweisbec@gmail.com
    Cc: gorcunov@openvz.org
    LKML-Reference: <1289578944-28564-2-git-send-email-dzickus@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit c0f62edd400115e54c52692c1dc6f5bf58ea0ba6
Merge: e4dd65496f6d 4ee7a6c2d1e8 17f52ed7358d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 29 18:57:04 2010 -0700

    Merge branches 'msm-fixes' and 'msm-video' of git://codeaurora.org/quic/kernel/dwalker/linux-msm
    
    * 'msm-fixes' of git://codeaurora.org/quic/kernel/dwalker/linux-msm:
      msm: Kconfig: drop unused config options
      msm: fix compile failure when no debug uart is selected
      msm: fix debug-macro.S build failure
      msm: timer: Decrease shift on timer clocksource
      arm: mach-msm: fix error handling in msm_iommu_probe()
      msm: fix Kconfig target board selection
      msm: fix compile failure on struct membank node member
    
    * 'msm-video' of git://codeaurora.org/quic/kernel/dwalker/linux-msm:
      drivers/video/msm/mddi.c: Remove multiple KERN_<level> uses
      drivers: msm: video: add dev_set_name call
      drivers: video: msm: fix hang on disable_irq

commit 6f9419619ef6de9d7781c1a312cf6099e5b44789
Author: Jeff Ohlstein <johlstei@codeaurora.org>
Date:   Thu Oct 21 02:25:45 2010 -0700

    msm: timer: Decrease shift on timer clocksource
    
    The shift of 24 causes the shift and multiply operation to sometimes
    overflow, resulting in incorrect timer values and poor performance.
    
    Signed-off-by: Jeff Ohlstein <johlstei@codeaurora.org>
    Signed-off-by: Daniel Walker <dwalker@codeaurora.org>

commit a386b5af8edda1c742ce9f77891e112eefffc005
Author: Kasper Pedersen <kkp2010@kasperkp.dk>
Date:   Wed Oct 20 15:55:15 2010 -0700

    time: Compensate for rounding on odd-frequency clocksources
    
    When the clocksource is not a multiple of HZ, the clock will be off.  For
    acpi_pm, HZ=1000 the error is 127.111 ppm:
    
    The rounding of cycle_interval ends up generating a false error term in
    ntp_error accumulation since xtime_interval is not exactly 1/HZ.  So, we
    subtract out the error caused by the rounding.
    
    This has been visible since 2.6.32-rc2
            commit a092ff0f90cae22b2ac8028ecd2c6f6c1a9e4601
            time: Implement logarithmic time accumulation
    That commit raised NTP_INTERVAL_FREQ and exposed the rounding error.
    
    testing tool: http://n1.taur.dk/permanent/testpmt.c
    Also tested with ntpd and a frequency counter.
    
    Signed-off-by: Kasper Pedersen <kkp2010@kasperkp.dk>
    Acked-by: john stultz <johnstul@us.ibm.com>
    Cc: John Kacur <jkacur@redhat.com>
    Cc: Clark Williams <williams@redhat.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 69717607f028d7d4f4b355afb86556f3dd9363fc
Author: Michal Simek <monstr@monstr.eu>
Date:   Fri Aug 6 14:13:13 2010 +0200

    microblaze: Report if only one timer is used
    
    Kernel needs two timers because of clocksource and clockevent.
    It is better to show warning message directly on early
    console if available. If it isn't available kernel log buffer
    contains it.
    
    Signed-off-by: Michal Simek <monstr@monstr.eu>

commit aa218dafd7b37ba92fcfdd6d5c8d459772f88042
Author: Paul Walmsley <paul@pwsan.com>
Date:   Fri Oct 8 11:40:19 2010 -0600

    OMAP: split plat-omap/common.c
    
    Split plat-omap/common.c into three pieces:
    
    1. the 32KiHz sync timer and clocksource code, which now lives in
       plat-omap/counter_32k.c;
    
    2. the OMAP2+ common code, which has been moved to mach-omap2/common.c;
    
    3. and the remainder of the OMAP-wide common code, which includes the
       deprecated ATAGs code and a deprecated video RAM reservation function.
    
    The primary motivation for doing this is to move the OMAP2+-specific parts
    into an OMAP2+-specific file, so that build breakage related to the
    System Control Module code can be resolved.
    
    Benoît Cousson <b-cousson@ti.com> suggested a new filename and found
    some bugs in the counter_32k.c comments - thanks Benoît.
    
    Signed-off-by: Paul Walmsley <paul@pwsan.com>
    Cc: Benoît Cousson <b-cousson@ti.com>

commit cdaf9a2f280b25dd2fb1e04da5d3899411766e1b
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Tue Oct 5 11:29:28 2010 +0100

    ARM: fix section mismatch warnings in Versatile Express
    
    WARNING: vmlinux.o(.text+0xbf30): Section mismatch in reference from the function v2m_timer_init() to the function .init.text:sp804_clocksource_init()
    The function v2m_timer_init() references
    the function __init sp804_clocksource_init().
    This is often because v2m_timer_init lacks a __init
    annotation or the annotation of sp804_clocksource_init is wrong.
    
    WARNING: vmlinux.o(.text+0xbf3c): Section mismatch in reference from the function v2m_timer_init() to the function .init.text:sp804_clockevents_init()
    The function v2m_timer_init() references
    the function __init sp804_clockevents_init().
    This is often because v2m_timer_init lacks a __init
    annotation or the annotation of sp804_clockevents_init is wrong.
    
    WARNING: vmlinux.o(.text+0xc524): Section mismatch in reference from the function ct_ca9x4_init() to the function .init.text:l2x0_init()
    The function ct_ca9x4_init() references
    the function __init l2x0_init().
    This is often because ct_ca9x4_init lacks a __init
    annotation or the annotation of l2x0_init is wrong.
    
    WARNING: vmlinux.o(.text+0xc530): Section mismatch in reference from the function ct_ca9x4_init() to the function .init.text:clkdev_add_table()
    The function ct_ca9x4_init() references
    the function __init clkdev_add_table().
    This is often because ct_ca9x4_init lacks a __init
    annotation or the annotation of clkdev_add_table is wrong.
    
    WARNING: vmlinux.o(.text+0xc578): Section mismatch in reference from the function ct_ca9x4_init() to the (unknown reference) .init.data:(unknown)
    The function ct_ca9x4_init() references
    the (unknown reference) __initdata (unknown).
    This is often because ct_ca9x4_init lacks a __initdata
    annotation or the annotation of (unknown) is wrong.
    
    Fix these by making ct_ca9x4_init() and v2m_timer_init() both __init.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit cc760d4a8859a02aeb777d508a276d4b1e726eed
Author: Aurelien Jarno <aurelien@aurel32.net>
Date:   Mon May 31 21:45:48 2010 +0000

    clocksource: sh_tmu: compute mult and shift before registration
    
    commit 66f49121ffa41a19c59965b31b046d8368fec3c7 upstream.
    
    Since commit 98962465ed9e6ea99c38e0af63fe1dcb5a79dc25 ("nohz: Prevent
    clocksource wrapping during idle"), the CPU of an R2D board never goes
    to idle. This commit assumes that mult and shift are assigned before
    the clocksource is registered. As a consequence the safe maximum sleep
    time is negative and the CPU never goes into idle.
    
    This patch fixes the problem by moving mult and shift initialization
    from sh_tmu_clocksource_enable() to sh_tmu_register_clocksource().
    
    Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 3de7b517dfacf1deb0690dbac28f917643e49975
Author: Hans J. Koch <hjk@linutronix.de>
Date:   Fri Sep 17 18:17:42 2010 +0200

    ARM: Add TCC8xxx system timer
    
    Add the system timer using clockevents with the internal TC32 timer.
    This also adds a clocksource using the same timer.
    
    Signed-off-by: "Hans J. Koch" <hjk@linutronix.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 7a1b29a82ba76427de791098c095ce31dab9333d
Merge: d7824370e263 a5854dd7f30c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Aug 15 17:31:43 2010 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/cmetcalf/linux-tile
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/cmetcalf/linux-tile:
      arch/tile: don't validate CROSS_COMPILE needlessly
      arch/tile: export only COMMAND_LINE_SIZE to userspace.
      arch/tile: rename ARCH_KMALLOC_MINALIGN to ARCH_DMA_MINALIGN
      arch/tile: Rename the hweight() implementations to __arch_hweight()
      arch/tile: extend syscall ABI to set r1 on return as well.
      arch/tile: Various cleanups.
      arch/tile: support backtracing on TILE-Gx
      arch/tile: Fix a couple of issues with the COMPAT code for TILE-Gx.
      arch/tile: Use separate, better minsec values for clocksource and sched_clock.
      arch/tile: correct a bug in freeing bootmem by VA for the optional second initrd.
      arch: tile: mm: pgtable.c: Removed duplicated #include
      arch: tile: kernel/proc.c Removed duplicated #include
      Add fanotify syscalls to <asm-generic/unistd.h>.
      arch/tile: support new kunmap_atomic() naming convention.
      tile: remove unused ISA_DMA_THRESHOLD define
    
    Conflicts in arch/tile/configs/tile_defconfig (pick the mainline version
    with the reduced defconfig).

commit 411643192e5ba25993b5221326abac6d96df4ad0
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Mon Jul 12 11:49:59 2010 -0700

    xen: drop xen_sched_clock in favour of using plain wallclock time
    
    commit 8a22b9996b001c88f2bfb54c6de6a05fc39e177a upstream.
    
    xen_sched_clock only counts unstolen time.  In principle this should
    be useful to the Linux scheduler so that it knows how much time a process
    actually consumed.  But in practice this doesn't work very well as the
    scheduler expects the sched_clock time to be synchronized between
    cpus.  It also uses sched_clock to measure the time a task spends
    sleeping, in which case "unstolen time" isn't meaningful.
    
    So just use plain xen_clocksource_read to return wallclock nanoseconds
    for sched_clock.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 749dc6f252b57d5cb9c1f4c1c4aafe4c92a28207
Author: Chris Metcalf <cmetcalf@tilera.com>
Date:   Fri Aug 13 08:24:22 2010 -0400

    arch/tile: Use separate, better minsec values for clocksource and sched_clock.
    
    We were using the same 5-sec minsec for the clocksource and sched_clock
    that we were using for the clock_event_device.  For the clock_event_device
    that's exactly right since it has a short maximum countdown time.
    But for sched_clock we want to avoid wraparound when converting from
    ticks to nsec over a much longer window, so we force a shift of 10.
    And for clocksource it seems dodgy to use a 5-sec minsec as well, so we
    copy some other platforms and force a shift of 22.
    
    Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>

commit a1e0ea5d94314a56340859097442673890b04ef5
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Mon Jul 12 11:49:59 2010 -0700

    xen: drop xen_sched_clock in favour of using plain wallclock time
    
    commit 8a22b9996b001c88f2bfb54c6de6a05fc39e177a upstream.
    
    xen_sched_clock only counts unstolen time.  In principle this should
    be useful to the Linux scheduler so that it knows how much time a process
    actually consumed.  But in practice this doesn't work very well as the
    scheduler expects the sched_clock time to be synchronized between
    cpus.  It also uses sched_clock to measure the time a task spends
    sleeping, in which case "unstolen time" isn't meaningful.
    
    So just use plain xen_clocksource_read to return wallclock nanoseconds
    for sched_clock.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 9967f081f3086b6556d79f7a6f317fdcf7a313d6
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Mon Jul 12 11:49:59 2010 -0700

    xen: drop xen_sched_clock in favour of using plain wallclock time
    
    commit 8a22b9996b001c88f2bfb54c6de6a05fc39e177a upstream.
    
    xen_sched_clock only counts unstolen time.  In principle this should
    be useful to the Linux scheduler so that it knows how much time a process
    actually consumed.  But in practice this doesn't work very well as the
    scheduler expects the sched_clock time to be synchronized between
    cpus.  It also uses sched_clock to measure the time a task spends
    sleeping, in which case "unstolen time" isn't meaningful.
    
    So just use plain xen_clocksource_read to return wallclock nanoseconds
    for sched_clock.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 9c55fad24be2f417233f5ea3959ade85756fda5f
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Mon Jul 12 11:49:59 2010 -0700

    xen: drop xen_sched_clock in favour of using plain wallclock time
    
    commit 8a22b9996b001c88f2bfb54c6de6a05fc39e177a upstream.
    
    xen_sched_clock only counts unstolen time.  In principle this should
    be useful to the Linux scheduler so that it knows how much time a process
    actually consumed.  But in practice this doesn't work very well as the
    scheduler expects the sched_clock time to be synchronized between
    cpus.  It also uses sched_clock to measure the time a task spends
    sleeping, in which case "unstolen time" isn't meaningful.
    
    So just use plain xen_clocksource_read to return wallclock nanoseconds
    for sched_clock.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit b62ad9ab181a67207a4c8c373461b587c4861a68
Merge: af390084359a b29230769e34
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 6 13:18:29 2010 -0700

    Merge branch 'timers-timekeeping-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-timekeeping-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      um: Fix read_persistent_clock fallout
      kgdb: Do not access xtime directly
      powerpc: Clean up obsolete code relating to decrementer and timebase
      powerpc: Rework VDSO gettimeofday to prevent time going backwards
      clocksource: Add __clocksource_updatefreq_hz/khz methods
      x86: Convert common clocksources to use clocksource_register_hz/khz
      timekeeping: Make xtime and wall_to_monotonic static
      hrtimer: Cleanup direct access to wall_to_monotonic
      um: Convert to use read_persistent_clock
      timkeeping: Fix update_vsyscall to provide wall_to_monotonic offset
      powerpc: Cleanup xtime usage
      powerpc: Simplify update_vsyscall
      time: Kill off CONFIG_GENERIC_TIME
      time: Implement timespec_add
      x86: Fix vtime/file timestamp inconsistencies
    
    Trivial conflicts in Documentation/feature-removal-schedule.txt
    
    Much less trivial conflicts in arch/powerpc/kernel/time.c resolved as
    per Thomas' earlier merge commit 47916be4e28c ("Merge branch
    'powerpc.cherry-picks' into timers/clocksource")

commit db7a1535d2dcf91115ba0fb940b1902c05305843
Merge: ab265d5cdde7 7cc88fdcff3c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 5 13:45:50 2010 -0700

    Merge branch 'upstream/xen' of git://git.kernel.org/pub/scm/linux/kernel/git/jeremy/xen
    
    * 'upstream/xen' of git://git.kernel.org/pub/scm/linux/kernel/git/jeremy/xen: (23 commits)
      xen/panic: use xen_reboot and fix smp_send_stop
      Xen: register panic notifier to take crashes of xen guests on panic
      xen: support large numbers of CPUs with vcpu info placement
      xen: drop xen_sched_clock in favour of using plain wallclock time
      pvops: do not notify callers from register_xenstore_notifier
      Introduce CONFIG_XEN_PVHVM compile option
      blkfront: do not create a PV cdrom device if xen_hvm_guest
      support multiple .discard.* sections to avoid section type conflicts
      xen/pvhvm: fix build problem when !CONFIG_XEN
      xenfs: enable for HVM domains too
      x86: Call HVMOP_pagetable_dying on exit_mmap.
      x86: Unplug emulated disks and nics.
      x86: Use xen_vcpuop_clockevent, xen_clocksource and xen wallclock.
      implement O_NONBLOCK for /proc/xen/xenbus
      xen: Fix find_unbound_irq in presence of ioapic irqs.
      xen: Add suspend/resume support for PV on HVM guests.
      xen: Xen PCI platform device driver.
      x86/xen: event channels delivery on HVM.
      x86: early PV on HVM features initialization.
      xen: Add support for HVM hypercalls.
      ...

commit b200eff6d16cf53dfaf14eb6f1934890d2db2237
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Sat Jun 19 04:08:10 2010 +0000

    MIPS: JZ4740: Add clocksource/clockevent support.
    
    Add clocksource and clockevent support for the timer/counter unit on
    JZ4740 SoCs.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/1397/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 544a7324198972716d486e04e77bc2622e12245b
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Sat Jun 19 04:08:09 2010 +0000

    MIPS: JZ4740: Add timer support
    
    Add support for the timer/counter unit on a JZ4740 SoC.  This code is used
    as a common base for the JZ4740 clocksource/clockevent implementation and
    PWM support.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/1396/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit cfca3a619baeaba3a0037fef5da48108e9c0bb1c
Author: Changhwan Youn <chaos.youn@samsung.com>
Date:   Mon Jul 26 21:13:08 2010 +0900

    ARM: S5PV310: Add Timer support
    
    This patch adds timer support for S5PV310.  Until now, all S5P SoCs
    use CONFIG_ARCH_USES_GETTIMEOFFSET macro as a default configuration.
    Instead,S5PV310 implements clocksource and clock_event_device to
    support the high resolution timer and tickless system.
    
    Signed-off-by: Changhwan Youn <chaos.youn@samsung.com>
    Signed-off-by: Hyuk Lee <hyuk1.lee@samsung.com>
    Signed-off-by: Kukjin Kim <kgene.kim@samsung.com>

commit ca50a5f39041497253c6362f2ba4da1b56d3e6cb
Merge: a70ce4b6064b ca65f9fc0c44
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Wed Aug 4 14:49:16 2010 -0700

    Merge branch 'upstream/pvhvm' into upstream/xen
    
    * upstream/pvhvm:
      Introduce CONFIG_XEN_PVHVM compile option
      blkfront: do not create a PV cdrom device if xen_hvm_guest
      support multiple .discard.* sections to avoid section type conflicts
      xen/pvhvm: fix build problem when !CONFIG_XEN
      xenfs: enable for HVM domains too
      x86: Call HVMOP_pagetable_dying on exit_mmap.
      x86: Unplug emulated disks and nics.
      x86: Use xen_vcpuop_clockevent, xen_clocksource and xen wallclock.
      xen: Fix find_unbound_irq in presence of ioapic irqs.
      xen: Add suspend/resume support for PV on HVM guests.
      xen: Xen PCI platform device driver.
      x86/xen: event channels delivery on HVM.
      x86: early PV on HVM features initialization.
      xen: Add support for HVM hypercalls.
    
    Conflicts:
            arch/x86/xen/enlighten.c
            arch/x86/xen/time.c

commit 8a22b9996b001c88f2bfb54c6de6a05fc39e177a
Author: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
Date:   Mon Jul 12 11:49:59 2010 -0700

    xen: drop xen_sched_clock in favour of using plain wallclock time
    
    xen_sched_clock only counts unstolen time.  In principle this should
    be useful to the Linux scheduler so that it knows how much time a process
    actually consumed.  But in practice this doesn't work very well as the
    scheduler expects the sched_clock time to be synchronized between
    cpus.  It also uses sched_clock to measure the time a task spends
    sleeping, in which case "unstolen time" isn't meaningful.
    
    So just use plain xen_clocksource_read to return wallclock nanoseconds
    for sched_clock.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>

commit 60dbd6633178a8625ed71329da0167c6d50c559c
Author: Jesper Nilsson <jesper.nilsson@axis.com>
Date:   Fri Jul 30 17:33:07 2010 +0200

    CRIS: GENERIC_TIME fixes
    
    GENERIC_TIME was not functional for CRIS, giving random backward
    time jumps.
    
    For CRISv32 implement a new clocksource using the free running counter
    and ditch the arch_gettimeoffset.
    
    The random time jumps still existed, but turned out to be the write_seqlock
    which was missing around our do_timer() call.
    
    So switch over to GENERIC_TIME using the clocksource for CRISv32.
    
    CRISv10 doesn't have the free running counter needed for the
    clocksource trick, but we can still use GENERIC_TIME with
    arch_gettimeoffset.
    
    Unfortunately, there were problems in using the prescaler register
    to timer0 for the gettimeoffset calculation, so it is now ignored,
    making our resolution worse by the tune of 40usec (0.4%) worst case.
    
    At the same time, clean up some formatting and use NSEC_PER_SEC
    instead of 1000000000.
    
    Signed-off-by: Jesper Nilsson <jesper.nilsson@axis.com>

commit 38409d726bc6413d39f082f60bc803f52d8b5849
Author: Magnus Damm <damm@opensource.se>
Date:   Mon Aug 2 09:24:05 2010 +0000

    clocksource: sh_cmt: Rate calculation fix
    
    Fix the rate calculation in the CMT driver.
    Without this fix the clocksource runs way
    too fast and we get a divide-by-zero error.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 43809473b9d5fa9f82bf64ddeb3c21fe1140ef0e
Author: Magnus Damm <damm@opensource.se>
Date:   Wed Aug 4 04:31:38 2010 +0000

    clocksource: sh_cmt: One-off clockevent fix V2
    
    Fix a one-off error in the CMT driver V2. The match register
    should be programmed with the period minus one.
    
    Many thanks to Eiraku-san for tracking down this issue.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 47916be4e28c3d6fdb97dd8fb887d1d9b3145b9d
Merge: 852db46d55e8 d75d68cfef49
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jul 28 21:49:22 2010 +0200

    Merge branch 'powerpc.cherry-picks' into timers/clocksource
    
    Conflicts:
            arch/powerpc/kernel/time.c
    
    Reason: The powerpc next tree contains two commits which conflict with
    the timekeeping changes:
    
    8fd63a9e powerpc: Rework VDSO gettimeofday to prevent time going backwards
    c1aa687d powerpc: Clean up obsolete code relating to decrementer and timebase
    
    John Stultz identified them and provided the conflict resolution.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 852db46d55e85b475a72e665ca08d3317769ceef
Author: John Stultz <johnstul@us.ibm.com>
Date:   Tue Jul 13 17:56:28 2010 -0700

    clocksource: Add __clocksource_updatefreq_hz/khz methods
    
    To properly handle clocksources that change frequencies
    at the clocksource->enable() point, this patch adds
    a method that will update the clocksource's mult/shift and
    max_idle_ns values.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    LKML-Reference: <1279068988-21864-12-git-send-email-johnstul@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit f12a15be63d1de9a35971f35f06b73088fa25c3a
Author: John Stultz <johnstul@us.ibm.com>
Date:   Tue Jul 13 17:56:27 2010 -0700

    x86: Convert common clocksources to use clocksource_register_hz/khz
    
    This converts the most common of the x86 clocksources over to use
    clocksource_register_hz/khz.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    LKML-Reference: <1279068988-21864-11-git-send-email-johnstul@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 592913ecb87a9e06f98ddb55b298f1a66bf94c6b
Author: John Stultz <johnstul@us.ibm.com>
Date:   Tue Jul 13 17:56:20 2010 -0700

    time: Kill off CONFIG_GENERIC_TIME
    
    Now that all arches have been converted over to use generic time via
    clocksources or arch_gettimeoffset(), we can remove the GENERIC_TIME
    config option and simplify the generic code.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    LKML-Reference: <1279068988-21864-4-git-send-email-johnstul@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 409771d258e9dd71c30f3c9520fd2b796ffc40f0
Author: Stefano Stabellini <stefano.stabellini@eu.citrix.com>
Date:   Fri May 14 12:48:19 2010 +0100

    x86: Use xen_vcpuop_clockevent, xen_clocksource and xen wallclock.
    
    Use xen_vcpuop_clockevent instead of hpet and APIC timers as main
    clockevent device on all vcpus, use the xen wallclock time as wallclock
    instead of rtc and use xen_clocksource as clocksource.
    The pv clock algorithm needs to work correctly for the xen_clocksource
    and xen wallclock to be usable, only modern Xen versions offer a
    reliable pv clock in HVM guests (XENFEAT_hvm_safe_pvclock).
    
    Using the hpet as clocksource means a VMEXIT every time we read/write to
    the hpet mmio addresses, pvclock give us a better rating without
    VMEXITs. Same goes for the xen wallclock and xen_vcpuop_clockevent
    
    Signed-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com>
    Signed-off-by: Don Dutile <ddutile@redhat.com>
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>

commit dc899971a1b7754f6171e6f1232365b864f96eef
Author: Ky Srinivasan <ksrinivasan@novell.com>
Date:   Thu May 20 12:54:06 2010 -0600

    Staging: hyperv: add clocksource driver
    
    This patch is a clocksource implementation suitable for guests hosted on
    HyperV.  Time keeping in Linux guests hosted on HyperV is unstable. This
    clocksource driver fixes the problem. This driver uses the hyperv
    detection code integrated into the kernel.
    
    Signed-off-by: K. Y. Srinivasan <ksrinivasan@novell.com>
    Cc: Hank Janssen <hjanssen@microsoft.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 478fc4e6d2e1622d991619583463eb4def24de60
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Wed Jun 2 17:10:44 2010 +0900

    clocksource: sh_cmt: compute mult and shift before registration
    
    commit f4d7c3565c1692c54d9152b52090fe73f0029e37 upstream.
    
    Based on the sh_tmu change in 66f49121ffa41a19c59965b31b046d8368fec3c7
    ("clocksource: sh_tmu: compute mult and shift before registration").
    The same issues impact the sh_cmt driver, so we take the same approach
    here.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit a214985570a6290d46800fe235f49b2989bfd784
Author: Aurelien Jarno <aurelien@aurel32.net>
Date:   Mon May 31 21:45:48 2010 +0000

    clocksource: sh_tmu: compute mult and shift before registration
    
    commit 66f49121ffa41a19c59965b31b046d8368fec3c7 upstream.
    
    Since commit 98962465ed9e6ea99c38e0af63fe1dcb5a79dc25 ("nohz: Prevent
    clocksource wrapping during idle"), the CPU of an R2D board never goes
    to idle. This commit assumes that mult and shift are assigned before
    the clocksource is registered. As a consequence the safe maximum sleep
    time is negative and the CPU never goes into idle.
    
    This patch fixes the problem by moving mult and shift initialization
    from sh_tmu_clocksource_enable() to sh_tmu_register_clocksource().
    
    Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 3a1b0323750fa3189736699afdc1452ba3325dae
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Wed Jun 2 17:10:44 2010 +0900

    clocksource: sh_cmt: compute mult and shift before registration
    
    commit f4d7c3565c1692c54d9152b52090fe73f0029e37 upstream.
    
    Based on the sh_tmu change in 66f49121ffa41a19c59965b31b046d8368fec3c7
    ("clocksource: sh_tmu: compute mult and shift before registration").
    The same issues impact the sh_cmt driver, so we take the same approach
    here.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 9fd38047c3d6da1fa9c22281dde730f8d124036d
Author: Aurelien Jarno <aurelien@aurel32.net>
Date:   Mon May 31 21:45:48 2010 +0000

    clocksource: sh_tmu: compute mult and shift before registration
    
    commit 66f49121ffa41a19c59965b31b046d8368fec3c7 upstream.
    
    Since commit 98962465ed9e6ea99c38e0af63fe1dcb5a79dc25 ("nohz: Prevent
    clocksource wrapping during idle"), the CPU of an R2D board never goes
    to idle. This commit assumes that mult and shift are assigned before
    the clocksource is registered. As a consequence the safe maximum sleep
    time is negative and the CPU never goes into idle.
    
    This patch fixes the problem by moving mult and shift initialization
    from sh_tmu_clocksource_enable() to sh_tmu_register_clocksource().
    
    Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 98c26ee126baf7360a58391d2ebd152501aeb0cd
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Wed Jun 2 17:10:44 2010 +0900

    clocksource: sh_cmt: compute mult and shift before registration
    
    commit f4d7c3565c1692c54d9152b52090fe73f0029e37 upstream.
    
    Based on the sh_tmu change in 66f49121ffa41a19c59965b31b046d8368fec3c7
    ("clocksource: sh_tmu: compute mult and shift before registration").
    The same issues impact the sh_cmt driver, so we take the same approach
    here.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit bf2937695fe2330bfd8933a2310e7bdd2581dc2e
Merge: 1a5f20fe197f 5967d33ce8a0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jun 27 08:18:20 2010 -0700

    Merge branch 'sh/for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6
    
    * 'sh/for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6:
      clocksource: sh_cmt: Fix up bogus shift value.
      arch/sh/mm: Eliminate a double lock
      sh: Fix up IORESOURCE_PCI_FIXED usage in pcibios_fixup_device_resources().
      sh: remove duplicated #include

commit 5967d33ce8a030f01a716fc0b25fcb03744a5fda
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue Jun 22 16:41:31 2010 +0900

    clocksource: sh_cmt: Fix up bogus shift value.
    
    The previous CMT fixup accidentally copied in the TMU shift value, reset
    this back to its original value while preserving the TMU fix.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 999fd1ab344dabd9c985b638bf4c29495b8e4619
Merge: 9a9620db07b2 ac422f944319
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 4 15:42:09 2010 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6: (23 commits)
      sh: Make intc messages consistent via pr_fmt.
      sh: make sure static declaration on ms7724se
      sh: make sure static declaration on mach-migor
      sh: make sure static declaration on mach-ecovec24
      sh: make sure static declaration on mach-ap325rxa
      clocksource: sh_cmt: compute mult and shift before registration
      clocksource: sh_tmu: compute mult and shift before registration
      sh: PIO disabling for x3proto and urquell.
      sh: mach-sdk7786: conditionally disable PIO support.
      sh: support for platforms without PIO.
      usb: r8a66597-hcd pio to mmio accessor conversion.
      usb: gadget: r8a66597-udc pio to mmio accessor conversion.
      usb: gadget: m66592-udc pio to mmio accessor conversion.
      sh: add romImage MMCIF boot for sh7724 and Ecovec V2
      sh: add boot code to MMCIF driver header
      sh: prepare MMCIF driver header file
      sh: allow romImage data between head.S and the zero page
      sh: Add support MMCIF for ecovec
      sh: remove duplicated #include
      input: serio: disable i8042 for non-cayman sh platforms.
      ...

commit f4d7c3565c1692c54d9152b52090fe73f0029e37
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Wed Jun 2 17:10:44 2010 +0900

    clocksource: sh_cmt: compute mult and shift before registration
    
    Based on the sh_tmu change in 66f49121ffa41a19c59965b31b046d8368fec3c7
    ("clocksource: sh_tmu: compute mult and shift before registration").
    The same issues impact the sh_cmt driver, so we take the same approach
    here.
    
    Cc: stable@kernel.org
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 66f49121ffa41a19c59965b31b046d8368fec3c7
Author: Aurelien Jarno <aurelien@aurel32.net>
Date:   Mon May 31 21:45:48 2010 +0000

    clocksource: sh_tmu: compute mult and shift before registration
    
    Since commit 98962465ed9e6ea99c38e0af63fe1dcb5a79dc25 ("nohz: Prevent
    clocksource wrapping during idle"), the CPU of an R2D board never goes
    to idle. This commit assumes that mult and shift are assigned before
    the clocksource is registered. As a consequence the safe maximum sleep
    time is negative and the CPU never goes into idle.
    
    This patch fixes the problem by moving mult and shift initialization
    from sh_tmu_clocksource_enable() to sh_tmu_register_clocksource().
    
    Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
    Cc: stable@kernel.org
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit ce7d0226198aac42ed311dd2783232adc16b296d
Merge: b142ebb61cd3 a75f5f0f0a36
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 25 16:53:16 2010 -0700

    Merge branch 'alpha-next' of git://git.kernel.org/pub/scm/linux/kernel/git/mattst88/alpha-2.6
    
    * 'alpha-next' of git://git.kernel.org/pub/scm/linux/kernel/git/mattst88/alpha-2.6:
      alpha: simplify and optimize sched_find_first_bit
      alpha: invoke oom-killer from page fault
      Convert alpha to use clocksources instead of arch_gettimeoffset

commit 9ce34c8f4466608bc67630a42d04f4aaf0443d9b
Author: John Stultz <johnstul@us.ibm.com>
Date:   Fri Mar 19 12:23:57 2010 -0400

    Convert alpha to use clocksources instead of arch_gettimeoffset
    
    Alpha has a tsc like rpcc counter that it uses to manage time.
    This can be converted to an actual clocksource instead of utilizing
    the arch_gettimeoffset method that is really only there for legacy
    systems with no continuous counter.
    
    Further cleanups could be made if alpha converted to the clockevent
    model.
    
    CC: Thomas Gleixner <tglx@linutronix.de>
    CC: Richard Henderson <rth@twiddle.net>
    Acked-by: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
    Tested-by: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
    Signed-off-by: Matt Turner <mattst88@gmail.com>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>

commit 164d44fd92e79d5bce54d0d62df9f856f7b23925
Merge: 5bfec46baa3a d7e81c269db8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 19 17:11:10 2010 -0700

    Merge branch 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource: Add clocksource_register_hz/khz interface
      posix-cpu-timers: Optimize run_posix_cpu_timers()
      time: Remove xtime_cache
      mqueue: Convert message queue timeout to use hrtimers
      hrtimers: Provide schedule_hrtimeout for CLOCK_REALTIME
      timers: Introduce the concept of timer slack for legacy timers
      ntp: Remove tickadj
      ntp: Make time_adjust static
      time: Add xtime, wall_to_monotonic to feature-removal-schedule
      timer: Try to survive timer callback preempt_count leak
      timer: Split out timer function call
      timer: Print function name for timer callbacks modifying preemption count
      time: Clean up warp_clock()
      cpu-timers: Avoid iterating over all threads in fastpath_timer_check()
      cpu-timers: Change SIGEV_NONE timer implementation
      cpu-timers: Return correct previous timer reload value
      cpu-timers: Cleanup arm_timer()
      cpu-timers: Simplify RLIMIT_CPU handling

commit d7e81c269db899b800e0963dc4aceece1f82a680
Author: John Stultz <johnstul@us.ibm.com>
Date:   Fri May 7 18:07:38 2010 -0700

    clocksource: Add clocksource_register_hz/khz interface
    
    How to pick good mult/shift pairs has always been difficult to
    describe to folks writing clocksource drivers, since it requires
    careful tradeoffs in adjustment accuracy vs overflow limits.
    
    Now, with the clocks_calc_mult_shift function, its much
    easier. However, not many clocksources have converted to using that
    function, and there is still the issue of the max interval length
    assumption being made by each clocksource driver independently.
    
    So this patch simplifies the registration process by having
    clocksources be registered with a hz/khz value and the registration
    function taking care of setting mult/shift.
    
    This should take most of the confusion out of writing a clocksource
    driver.
    
    Additionally it also keeps the shift size tradeoff (more accuracy vs
    longer possible nohz times) centralized so the timekeeping core can
    keep track of the assumptions being made.
    
    [ tglx: Coding style and comments fixed ]
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    LKML-Reference: <1273280858-30143-1-git-send-email-johnstul@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 861248d177145fc5861507e4607fec89fd0a0462
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Fri Jan 15 22:12:46 2010 +0000

    ARM: Integrator: pass 'khz' to integrator_time_init
    
    This is now what the clocksource/clockevent initialization functions
    want, so give them the timer tick rate directly.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 2decb12e3ebec556520dd92178572449af8ed617
Author: Aaro Koskinen <aaro.koskinen@nokia.com>
Date:   Wed Apr 7 09:57:22 2010 +0000

    omap: fix clocksource_32k to start from zero
    
    When the 32k sync timer is used for sched_clock(), it should count
    time from the kernel boot (clocksource init) instead of the last HW
    reset. Otherwise printk.time values will jump suddenly during the boot:
    
            [    0.000000] calling  omap2_clk_arch_init+0x0/0x138 @ 1
            [    0.000000] initcall omap2_clk_arch_init+0x0/0x138 returned -22 after 0 usecs
            [    0.000000] initcall omap2_clk_arch_init+0x0/0x138 returned with error code -22
            [    0.000000] calling  omap_init_clocksource_32k+0x0/0x98 @ 1
            [  508.697937] initcall omap_init_clocksource_32k+0x0/0x98 returned 0 after 0 usecs
            [  508.697967] calling  omap_init_devices+0x0/0x38 @ 1
            [  508.698425] initcall omap_init_devices+0x0/0x38 returned 0 after 0 usecs
    
    This will confuse tools such as scripts/bootgraph.pl.
    
    Signed-off-by: Aaro Koskinen <aaro.koskinen@nokia.com>
    Acked-by: Kevin Hilman <khilman@deeprootsystems.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 63634c86365b530af5026d409fd403801abe1e75
Merge: fb1ae635772d 75392dd3041b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 7 11:03:06 2010 -0700

    Merge branch 'davinci-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/khilman/linux-davinci
    
    * 'davinci-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/khilman/linux-davinci:
      davinci: fix compile warning: <mach/da8xx.h>: #include <linux/platform_device.h>
      davinci: DM365: fix duplicate default IRQ priorities
      davinci: edma: clear events in edma_start()
      davinci: da8xx/omap-l1: fix build error when CONFIG_DAVINCI_MUX is undefined
      davinci: timers: don't enable timer until clocksource is initialized

commit d99c3871148cb643cffe138e9427b7a743aca367
Author: Kevin Hilman <khilman@deeprootsystems.com>
Date:   Thu Mar 11 14:57:35 2010 -0800

    davinci: timers: don't enable timer until clocksource is initialized
    
    On da830, when the same timer is used for clocksource and clockevent,
    the timer can be started before the clockevent is
    registered/initialzed.  This creates a window where a timer
    interrupt might fire before the clockevent handler has been
    setup and causes a crash.
    
    This patch moves the actual enable/start of the timer after
    the clockevent has ben registered.
    
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

commit 9e6776b6653afe1df9b362d4667a82070a1dd5f1
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Mar 1 12:34:43 2010 -0800

    timekeeping: Prevent oops when GENERIC_TIME=n
    
    commit ad6759fbf35d104dbf573cd6f4c6784ad6823f7e upstream.
    
    Aaro Koskinen reported an issue in kernel.org bugzilla #15366, where
    on non-GENERIC_TIME systems, accessing
    /sys/devices/system/clocksource/clocksource0/current_clocksource
    results in an oops.
    
    It seems the timekeeper/clocksource rework missed initializing the
    curr_clocksource value in the !GENERIC_TIME case.
    
    Thanks to Aaro for reporting and diagnosing the issue as well as
    testing the fix!
    
    Reported-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    LKML-Reference: <1267475683.4216.61.camel@localhost.localdomain>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 74b176077272028d0a88eddd59e630abc37cd475
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Mar 1 12:34:43 2010 -0800

    timekeeping: Prevent oops when GENERIC_TIME=n
    
    commit ad6759fbf35d104dbf573cd6f4c6784ad6823f7e upstream.
    
    Aaro Koskinen reported an issue in kernel.org bugzilla #15366, where
    on non-GENERIC_TIME systems, accessing
    /sys/devices/system/clocksource/clocksource0/current_clocksource
    results in an oops.
    
    It seems the timekeeper/clocksource rework missed initializing the
    curr_clocksource value in the !GENERIC_TIME case.
    
    Thanks to Aaro for reporting and diagnosing the issue as well as
    testing the fix!
    
    Reported-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    LKML-Reference: <1267475683.4216.61.camel@localhost.localdomain>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit c2a25e819717ea34e8f682d67a3fa76f4893395b
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Mon Mar 29 16:55:43 2010 +0900

    clocksource: Deprecate clock string across the SH drivers.
    
    We want to get rid of the clock string from platform data entirely,
    depending on the clkdev-based clock lookup to do the right thing for us
    instead.
    
    This converts all of the SH drivers to request their associated function
    clocks directly, and if there is no match for that then we fall back on
    the legacy lookup while warning about it. After all of the outstanding
    CPUs have been converted to clkdev lookups the clock string will be
    killed off completely.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 95a8ed004d1cb82742012dbd44b41ab0780a59d7
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Thu Feb 25 16:37:46 2010 +0900

    clocksource: Fix up a registration/IRQ race in the sh drivers.
    
    commit da64c2a8dee66ca03f4f3e15d84be7bedf73db3d upstream.
    
    All of the SH clocksource drivers follow the scheme that the IRQ is setup
    prior to registering the clockevent. The interrupt handler in the
    clockevent cases looks to the event handler function pointer being filled
    in by the registration code, permitting us to get in to situations where
    asserted IRQs step in to the handler before registration has had a chance
    to complete and hitting a NULL pointer deref.
    
    In practice this is not an issue for most platforms, but some of them
    with fairly special loaders (or that are chain-loading from another
    kernel) may enter in to this situation. This fixes up the oops reported
    by Rafael on hp6xx.
    
    Reported-and-tested-by: Rafael Ignacio Zurita <rafaelignacio.zurita@gmail.com>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit ad10d8be3c5b7fce739d6b4c70ab712ac34d743a
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Thu Feb 25 16:37:46 2010 +0900

    clocksource: Fix up a registration/IRQ race in the sh drivers.
    
    commit da64c2a8dee66ca03f4f3e15d84be7bedf73db3d upstream.
    
    All of the SH clocksource drivers follow the scheme that the IRQ is setup
    prior to registering the clockevent. The interrupt handler in the
    clockevent cases looks to the event handler function pointer being filled
    in by the registration code, permitting us to get in to situations where
    asserted IRQs step in to the handler before registration has had a chance
    to complete and hitting a NULL pointer deref.
    
    In practice this is not an issue for most platforms, but some of them
    with fairly special loaders (or that are chain-loading from another
    kernel) may enter in to this situation. This fixes up the oops reported
    by Rafael on hp6xx.
    
    Reported-and-tested-by: Rafael Ignacio Zurita <rafaelignacio.zurita@gmail.com>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 214a607a4f5bf5a14dab0304ba350cdaf3916795
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Wed Mar 10 16:26:25 2010 +0900

    clocksource: Use dev_name() universally across the SH drivers.
    
    There is no need to copy in the name from the sh timer config now that
    dev_name() is available early. We prefer the dev_name() variant for
    consistent naming.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 322aafa6645a48c3b7837ca7385f126ab78127fd
Merge: dd04265b028c c7bbf52aa4fa
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Mar 7 15:59:39 2010 -0800

    Merge branch 'x86-mrst-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'x86-mrst-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip: (30 commits)
      x86, mrst: Fix whitespace breakage in apb_timer.c
      x86, mrst: Fix APB timer per cpu clockevent
      x86, mrst: Remove X86_MRST dependency on PCI_IOAPIC
      x86, olpc: Use pci subarch init for OLPC
      x86, pci: Add arch_init to x86_init abstraction
      x86, mrst: Add Kconfig dependencies for Moorestown
      x86, pci: Exclude Moorestown PCI code if CONFIG_X86_MRST=n
      x86, numaq: Make CONFIG_X86_NUMAQ depend on CONFIG_PCI
      x86, pci: Add sanity check for PCI fixed bar probing
      x86, legacy_irq: Remove duplicate vector assigment
      x86, legacy_irq: Remove left over nr_legacy_irqs
      x86, mrst: Platform clock setup code
      x86, apbt: Moorestown APB system timer driver
      x86, mrst: Add vrtc platform data setup code
      x86, mrst: Add platform timer info parsing code
      x86, mrst: Fill in PCI functions in x86_init layer
      x86, mrst: Add dummy legacy pic to platform setup
      x86/PCI: Moorestown PCI support
      x86, ioapic: Add dummy ioapic functions
      x86, ioapic: Early enable ioapic for timer irq
      ...
    
    Fixed up semantic conflict of new clocksources due to commit
    17622339af25 ("clocksource: add argument to resume callback").

commit 9c8f05c2837b06bb2739e85204c0d34009fb6494
Author: Randy Dunlap <randy.dunlap@oracle.com>
Date:   Fri Mar 5 13:42:35 2010 -0800

    MFGPT: move clocksource menu
    
    Move the CS5535 MFGPT hrtimer kconfig option to be with the other MFGPT
    options.  This makes it easier to find and also removes it from the main
    "Device Drivers" menu, where it should not have been.
    
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    Acked-by: Andres Salomon <dilinger@collabora.co.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit ad6759fbf35d104dbf573cd6f4c6784ad6823f7e
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Mar 1 12:34:43 2010 -0800

    timekeeping: Prevent oops when GENERIC_TIME=n
    
    Aaro Koskinen reported an issue in kernel.org bugzilla #15366, where
    on non-GENERIC_TIME systems, accessing
    /sys/devices/system/clocksource/clocksource0/current_clocksource
    results in an oops.
    
    It seems the timekeeper/clocksource rework missed initializing the
    curr_clocksource value in the !GENERIC_TIME case.
    
    Thanks to Aaro for reporting and diagnosing the issue as well as
    testing the fix!
    
    Reported-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: stable@kernel.org
    LKML-Reference: <1267475683.4216.61.camel@localhost.localdomain>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit e56425b135a8892d1e71ad5bb605d12c10efeb32
Merge: 786f8ba2e944 6622e670b26f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 1 08:48:25 2010 -0800

    Merge branch 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      posix-timers.c: Don't export local functions
      clocksource: start CMT at clocksource resume
      clocksource: add suspend callback
      clocksource: add argument to resume callback
      ntp: Cleanup xtime references in ntp.c
      ntp: Make time_esterror and time_maxerror static

commit 64d497f55379b1e320a08ec2426468d96f5642ec
Merge: 37d400848497 b5f5fe80fa98
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Feb 26 16:54:27 2010 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6: (187 commits)
      sh: remove dead LED code for migo-r and ms7724se
      sh: ecovec build fix for CONFIG_I2C=n
      sh: ecovec r-standby support
      sh: ms7724se r-standby support
      sh: SH-Mobile R-standby register save/restore
      clocksource: Fix up a registration/IRQ race in the sh drivers.
      sh: ms7724: modify scan_timing for KEYSC
      sh: ms7724: Add sh_sir support
      sh: mach-ecovec24: Add sh_sir support
      sh: wire up SET/GET_UNALIGN_CTL.
      sh: allow alignment fault mode to be configured at kernel boot.
      sh: sh7724: Update FSI/SPU2 clock
      sh: always enable sh7724 vpu_clk and set to 166MHz on Ecovec
      sh: add sh7724 kick callback to clk_div4_table
      sh: introduce struct clk_div4_table
      sh: clock-cpg div4 set_rate() shift fix
      sh: Turn on speculative return for SH7785 and SH7786
      sh: Merge legacy and dynamic PMB modes.
      sh: Use uncached I/O helpers in PMB setup.
      sh: Provide uncached I/O helpers.
      ...

commit da64c2a8dee66ca03f4f3e15d84be7bedf73db3d
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Thu Feb 25 16:37:46 2010 +0900

    clocksource: Fix up a registration/IRQ race in the sh drivers.
    
    All of the SH clocksource drivers follow the scheme that the IRQ is setup
    prior to registering the clockevent. The interrupt handler in the
    clockevent cases looks to the event handler function pointer being filled
    in by the registration code, permitting us to get in to situations where
    asserted IRQs step in to the handler before registration has had a chance
    to complete and hitting a NULL pointer deref.
    
    In practice this is not an issue for most platforms, but some of them
    with fairly special loaders (or that are chain-loading from another
    kernel) may enter in to this situation. This fixes up the oops reported
    by Rafael on hp6xx.
    
    Reported-and-tested-by: Rafael Ignacio Zurita <rafaelignacio.zurita@gmail.com>
    Cc: stable@kernel.org
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit bb24c4716185f6e116c440462c65c1f56649183b
Author: Jacob Pan <jacob.jun.pan@intel.com>
Date:   Wed Sep 2 07:37:17 2009 -0700

    x86, apbt: Moorestown APB system timer driver
    
    Moorestown platform does not have PIT or HPET platform timers.  Instead it
    has a bank of eight APB timers.  The number of available timers to the os
    is exposed via SFI mtmr tables.  All APB timer interrupts are routed via
    ioapic rtes and delivered as MSI.
    Currently, we use timer 0 and 1 for per cpu clockevent devices, timer 2
    for clocksource.
    
    Signed-off-by: Jacob Pan <jacob.jun.pan@intel.com>
    LKML-Reference: <43F901BD926A4E43B106BF17856F0755A318D2D2@orsmsx508.amr.corp.intel.com>
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>

commit 115079aad949cba31755eb4e2576edba7fddfdbc
Author: Jens Rottmann <JRottmann@LiPPERTEmbedded.de>
Date:   Mon Feb 22 12:44:20 2010 -0800

    geode-mfgpt: restore previous behavior for selecting IRQ
    
    geode-mfgpt: restore previous behavior for selecting IRQ
    
    The MFGPT IRQ used to be, in order of decreasing priority,
     * IRQ supplied by the user as a boot-time parameter,
     * IRQ previously set by the BIOS or another driver,
     * default IRQ given at compile time.
    
    Return to this behavior, which got broken when splitting the
    MFGPT/clocksource driver for 2.6.33-rc1.
    
    Signed-off-by: Jens Rottmann <JRottmann@LiPPERTEmbedded.de>
    Acked-by: Andres Salomon <dilinger@collabora.co.uk>
    Cc: Jordan Crouse <jordan.crouse@amd.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: john stultz <johnstul@us.ibm.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 359e2f2722ef7b5d5b3d1472409a5daf8a6954d5
Author: Aaro Koskinen <aaro.koskinen@iki.fi>
Date:   Mon Feb 1 18:24:58 2010 +0200

    clocksource: fix compilation if no GENERIC_TIME
    
    commit a362c638bdf052bf424bce7645d39b101090f6ba upstream
    
    Commit a9238ce3bb0fda6e760780b702c6cbd3793087d3 broke compilation on
    platforms that do not implement GENERIC_TIME (e.g. iop32x):
    
      kernel/time/clocksource.c: In function 'clocksource_register':
      kernel/time/clocksource.c:556: error: implicit declaration of function 'clocksource_max_deferment'
    
    Provide the implementation of clocksource_max_deferment() also for
    such platforms.
    
    Signed-off-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit c81628848af8a01f103acc8166299c698898a8f4
Author: Magnus Damm <damm@opensource.se>
Date:   Tue Feb 2 14:41:40 2010 -0800

    clocksource: start CMT at clocksource resume
    
    Add code to start the CMT timer on clocksource resume.  While at it handle
    the suspend case as well.  Remove the platform device specific suspend
    calls.
    
    This makes sure the timer is started during sysdev_resume().  Without this
    patch the clocksource may be read as suspended, this after sysdev resume
    but before platform device resume.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit c54a42b19fbaae4e9f212322ecca25a6bc95c1ba
Author: Magnus Damm <damm@opensource.se>
Date:   Tue Feb 2 14:41:41 2010 -0800

    clocksource: add suspend callback
    
    Add a clocksource suspend callback.  This callback can be used by the
    clocksource driver to shutdown and perform any kind of late suspend
    activities even though the clocksource driver itself is a non-sysdev
    driver.
    
    One example where this is useful is to fix the sh_cmt.c platform driver
    that today suspends using the platform bus and shuts down the clocksource
    too early.
    
    With this callback in place the sh_cmt driver will suspend using the
    clocksource and clockevent hooks and leave the platform device pm
    callbacks unused.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 17622339af2536b32cf29699ddd4ba0fe79a61d5
Author: Magnus Damm <damm@opensource.se>
Date:   Tue Feb 2 14:41:39 2010 -0800

    clocksource: add argument to resume callback
    
    Pass the clocksource as an argument to the clocksource resume callback.
    Needed so we can point out which CMT channel the sh_cmt.c driver shall
    resume.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit bdd846678387d1313f689c9d341bd9743c9aa451
Merge: 935cc9323ac3 7b7422a566aa
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Feb 1 10:44:06 2010 -0800

    Merge branch 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource: Prevent potential kgdb dead lock

commit a9238ce3bb0fda6e760780b702c6cbd3793087d3
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Tue Aug 18 12:45:10 2009 -0500

    nohz: Prevent clocksource wrapping during idle
    
    commit 98962465ed9e6ea99c38e0af63fe1dcb5a79dc25 upstream.
    
    The dynamic tick allows the kernel to sleep for periods longer than a
    single tick, but it does not limit the sleep time currently. In the
    worst case the kernel could sleep longer than the wrap around time of
    the time keeping clock source which would result in losing track of
    time.
    
    Prevent this by limiting it to the safe maximum sleep time of the
    current time keeping clock source. The value is calculated when the
    clock source is registered.
    
    [ tglx: simplified the code a bit and massaged the commit msg ]
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    LKML-Reference: <1250617512-23567-2-git-send-email-jon-hunter@ti.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit e00d9d4b1796dae3adf6e39c9a766e760dd1c796
Author: Mikael Pettersson <mikpe@it.uu.se>
Date:   Sat Jan 9 13:03:59 2010 +0100

    ARM: 5869/1: ixp4xx: implement sched_clock()
    
    Add a better sched_clock() to the ixp4xx platform,
    implemented via its clocksource support.
    
    This is based on the sched_clock() I implemented for
    the IOP platform. Tested on a ds101 ixp420 machine.
    
    Signed-off-by: Mikael Pettersson <mikpe@it.uu.se>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 7b7422a566aa0dc1e582ce263d4c7ff4a772700a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 26 12:51:10 2010 +0100

    clocksource: Prevent potential kgdb dead lock
    
    commit 0f8e8ef7 (clocksource: Simplify clocksource watchdog resume
    logic) introduced a potential kgdb dead lock. When the kernel is
    stopped by kgdb inside code which holds watchdog_lock then kgdb dead
    locks in clocksource_resume_watchdog().
    
    clocksource_resume_watchdog() is called from kbdg via
    clocksource_touch_watchdog() to avoid that the clock source watchdog
    marks TSC unstable after the kernel has been stopped.
    
    Solve this by replacing spin_lock with a spin_trylock and just return
    in case the lock is held. Not resetting the watchdog might result in
    TSC becoming marked unstable, but that's an acceptable penalty for
    using kgdb.
    
    The timekeeping is anyway easily screwed up by kgdb when the system
    uses either jiffies or a clock source which wraps in short intervals
    (e.g. pm_timer wraps about every 4.6s), so we really do not have to
    worry about that occasional TSC marked unstable side effect.
    
    The second caller of clocksource_resume_watchdog() is
    clocksource_resume(). The trylock is safe here as well because the
    system is UP at this point, interrupts are disabled and nothing else
    can hold watchdog_lock().
    
    Reported-by: Jason Wessel <jason.wessel@windriver.com>
    LKML-Reference: <1264480000-6997-4-git-send-email-jason.wessel@windriver.com>
    Cc: kgdb-bugreport@lists.sourceforge.net
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 355e8e8d1b0779fccb6ca1351fb73c71985e22b2
Author: John Stultz <johnstul@us.ibm.com>
Date:   Fri Jan 15 17:01:09 2010 -0800

    m68knommu: fix invalid flags on coldfire pit clocksource
    
    The m68knommu coldfire pit clocksource looks like it was incorrectly
    marked as a continuous clocksource.  Running with it marked as a
    continuous clocksource could cause hangs when the system switches to
    highres mode or enables nohz.
    
    This patch removes the CLOCK_SOURCE_IS_CONTINUOUS flag on the coldfire pit
    clocksource.  This will disallow systems using this clocksource from
    entering oneshot mode (disabling highres timers and nohz).
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Acked-by: Greg Ungerer <gerg@snapgear.com>
    Cc: Steven King <sfking@fdwdc.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 3e7b484354c8f60c12119c1c5174ef354696c30d
Author: Stefan Roese <sr@denx.de>
Date:   Mon Jan 11 22:28:54 2010 +0000

    powerpc: Fix decrementer setup on 1GHz boards
    
    We noticed that recent kernels didn't boot on our 1GHz Canyonlands 460EX
    boards anymore. As it seems, patch 8d165db1 [powerpc: Improve
    decrementer accuracy] introduced this problem. The routine div_sc()
    overflows with shift = 32 resulting in this incorrect setup:
    
    time_init: decrementer frequency = 1000.000012 MHz
    time_init: processor frequency   = 1000.000012 MHz
    clocksource: timebase mult[400000] shift[22] registered
    clockevent: decrementer mult[33] shift[32] cpu[0]
    
    This patch now introduces a local div_dc64() version of this function
    so that this overflow doesn't happen anymore.
    
    Signed-off-by: Stefan Roese <sr@denx.de>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Detlev Zundel <dzu@denx.de>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

commit 1dc238632bbb4283ba2c789b2aeadb1a2743eb4f
Author: David VomLehn <dvomlehn@cisco.com>
Date:   Mon Dec 21 17:43:42 2009 -0800

    MIPS: PowerTV: Remove extra r4k_clockevent_init() call
    
    A call to r4k_clocksource_init() was added to plat_time_init(), but
    when init_mips_clock_source() calls the same function, boot fails in
    clockevents_register_device(). This patch removes the extraneous call.
    
    Signed-off-by: David VomLehn <dvomlehn@cisco.com>
    Patchwork: http://patchwork.linux-mips.org/patch/803/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 525995d77ca08dfc2ba6f8e606f93694271dbd66
Merge: e4bdda1bc312 64a2b168023b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 16 10:52:35 2009 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/vapier/blackfin
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/vapier/blackfin: (88 commits)
      Blackfin: Convert BUG() to use unreachable()
      Blackfin: define __NR_recvmmsg
      Blackfin: drop duplicate sched_clock
      Blackfin: NOMPU: skip DMA ICPLB hole when it is redundant
      Blackfin: MPU: add missing __init markings
      Blackfin: add support for TIF_NOTIFY_RESUME
      Blackfin: kgdb_test: clean up code a bit
      Blackfin: convert kgdbtest to proc_fops
      Blackfin: convert cyc2ns() to clocksource_cyc2ns()
      Blackfin: ip0x: pull in asm/portmux.h for P_xxx defines
      Blackfin: drop unused ax88180 resources
      Blackfin: bf537-stamp: add ADF702x network driver resources
      Blackfin: bf537-stamp: add CAN resources
      Blackfin: bf537-stamp: add AD5258 i2c address
      Blackfin: bf537-stamp: add adau1761 i2c address
      Blackfin: bf537-stamp: add adau1371 i2c address
      Blackfin: bf537-stamp: add ADP8870 resources
      Blackfin: bf537-stamp: kill AD714x board-specific Kconfigs
      Blackfin: bf537-stamp: update ADP5520 resources
      Blackfin: bf537-stamp: add ADXL346 orientation sensing support
      ...

commit c768a943fd8f41f5f7ed33c91d50818b301f5635
Author: Mike Frysinger <vapier@gentoo.org>
Date:   Fri Dec 4 03:32:11 2009 +0000

    Blackfin: convert cyc2ns() to clocksource_cyc2ns()
    
    The former no longer exists.
    
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>

commit f7036d649c88ad14b482b2787ffb1063c8a719d7
Author: Yi Li <yi.li@analog.com>
Date:   Tue Sep 15 02:08:50 2009 +0000

    Blackfin: fix gptimer0 clock source compile warning
    
    Some of the clocksource prototypes were updated, but the gptimer0 func was
    missed in the process.  Not a big issue as the argument is ignored, but we
    should fix the compile warning anyways.
    
    Signed-off-by: Yi Li <yi.li@analog.com>
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>

commit 60d8ce2cd6c283132928c11f3fd57ff4187287e0
Merge: 849e8dea099a feae3203d711
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 8 19:27:08 2009 -0800

    Merge branch 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      timers, init: Limit the number of per cpu calibration bootup messages
      posix-cpu-timers: optimize and document timer_create callback
      clockevents: Add missing include to pacify sparse
      x86: vmiclock: Fix printk format
      x86: Fix printk format due to variable type change
      sparc: fix printk for change of variable type
      clocksource/events: Fix fallout of generic code changes
      nohz: Allow 32-bit machines to sleep for more than 2.15 seconds
      nohz: Track last do_timer() cpu
      nohz: Prevent clocksource wrapping during idle
      nohz: Type cast printk argument
      mips: Use generic mult/shift factor calculation for clocks
      clocksource: Provide a generic mult/shift factor calculation
      clockevents: Use u32 for mult and shift factors
      nohz: Introduce arch_needs_cpu
      nohz: Reuse ktime in sub-functions of tick_check_idle.
      time: Remove xtime_cache
      time: Implement logarithmic time accumulation

commit 4646575daf21f544fc2f7e8d90d8c488948fcc7c
Merge: 86ed4aa457f9 581f202bcd60
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 8 13:38:21 2009 -0800

    Merge branch 'x86-uv-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'x86-uv-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      x86: UV RTC: Always enable RTC clocksource
      x86: UV RTC: Rename generic_interrupt to x86_platform_ipi
      x86: UV RTC: Clean up error handling
      x86: UV RTC: Add clocksource only boot option
      x86: UV RTC: Fix early expiry handling

commit 581f202bcd60acbc3af1f5faa429e570c512f8a3
Author: Dimitri Sivanich <sivanich@sgi.com>
Date:   Fri Nov 20 15:48:26 2009 -0600

    x86: UV RTC: Always enable RTC clocksource
    
    Always enable the RTC clocksource on UV systems.
    
    Signed-off-by: Dimitri Sivanich <sivanich@sgi.com>
    LKML-Reference: <20091120214826.GA20016@sgi.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit a362c638bdf052bf424bce7645d39b101090f6ba
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Nov 14 00:26:34 2009 +0100

    clocksource/events: Fix fallout of generic code changes
    
    powerpc grew a new warning due to the type change of clockevent->mult.
    
    The architectures which use parts of the generic time keeping
    infrastructure tripped over my wrong assumption that
    clocksource_register is only used when GENERIC_TIME=y.
    
    I should have looked and also I should have known better. These
    renitent Gaul villages are racking my nerves. Some serious deprecating
    is due.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 27185016b806d5a1181ff501cae120582b2b27dd
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Nov 12 22:12:06 2009 +0100

    nohz: Track last do_timer() cpu
    
    The previous patch which limits the sleep time to the maximum
    deferment time of the time keeping clocksource has some limitations on
    SMP machines: if all CPUs are idle then for all CPUs the maximum sleep
    time is limited.
    
    Solve this by keeping track of which cpu had the do_timer() duty
    assigned last and limit the sleep time only for this cpu.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    LKML-Reference: <new-submission>
    Cc: Jon Hunter <jon-hunter@ti.com>
    Cc: John Stultz <johnstul@us.ibm.com>

commit 98962465ed9e6ea99c38e0af63fe1dcb5a79dc25
Author: Jon Hunter <jon-hunter@ti.com>
Date:   Tue Aug 18 12:45:10 2009 -0500

    nohz: Prevent clocksource wrapping during idle
    
    The dynamic tick allows the kernel to sleep for periods longer than a
    single tick, but it does not limit the sleep time currently. In the
    worst case the kernel could sleep longer than the wrap around time of
    the time keeping clock source which would result in losing track of
    time.
    
    Prevent this by limiting it to the safe maximum sleep time of the
    current time keeping clock source. The value is calculated when the
    clock source is registered.
    
    [ tglx: simplified the code a bit and massaged the commit msg ]
    
    Signed-off-by: Jon Hunter <jon-hunter@ti.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    LKML-Reference: <1250617512-23567-2-git-send-email-jon-hunter@ti.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 7d2f944a2b836c69a9d260a0a5f0d1720d57fdff
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Nov 11 14:05:29 2009 +0000

    clocksource: Provide a generic mult/shift factor calculation
    
    MIPS has two functions to calculcate the mult/shift factors for clock
    sources and clock events at run time. ARM needs such functions as
    well.
    
    Implement a function which calculates the mult/shift factors based on
    the frequencies to which and from which is converted. The function
    also has a parameter to specify the minimum conversion range in
    seconds. This range is guaranteed not to produce a 64bit overflow when
    a value is multiplied with the calculated mult factor. The larger the
    conversion range the less becomes the conversion accuracy.
    
    Provide two inline wrappers which handle clock events and clock
    sources. For clock events the "from" frequency is nano seconds per
    second which corresponds to 1GHz and "to" is the device frequency. For
    clock sources "from" is the device frequency and "to" is nano seconds
    per second.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Mikael Pettersson <mikpe@it.uu.se>
    Acked-by: Ralf Baechle <ralf@linux-mips.org>
    Acked-by: Linus Walleij <linus.walleij@stericsson.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    LKML-Reference: <20091111134229.766673305@linutronix.de>

commit 3586e0a9a4a5f19110627d6ba81ada32a358467d
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Nov 11 19:06:30 2009 -0800

    clocksource/timecompare: Fix symbol exports to be GPL'd.
    
    Noticed by Thomas GLeixner.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 345a32296b1f9f6121379e0240915e0e2be2dbf5
Author: Mikael Pettersson <mikpe@it.uu.se>
Date:   Thu Oct 29 11:46:56 2009 -0700

    iop: implement sched_clock()
    
    This adds a better sched_clock() to the IOP platform,
    implemented using its new clocksource support.
    
    Tested on n2100, compile-tested for all plat-iop machines.
    
    [dan.j.williams@intel.com: allow early cp6 access]
    Signed-off-by: Mikael Pettersson <mikpe@it.uu.se>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

commit a91549a8f27e63e0e537fe1c20d4845581de894f
Author: Mikael Pettersson <mikpe@it.uu.se>
Date:   Thu Oct 29 11:46:54 2009 -0700

    iop: clocksource support
    
    This updates the IOP platform to expose the free-running
    timer 1 as a clocksource object. This timer is now also
    properly initialised, which requires a new write_tcr1()
    function from the mach-specific code. Apart from the
    explicit initialisation, there is no functional change
    in how timer 1 is programmed.
    
    Tested on n2100, compile-tested for all plat-iop machines.
    
    Signed-off-by: Mikael Pettersson <mikpe@it.uu.se>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

commit 8c28de4d011f37b2893ecfcec9a985c0e9bd786f
Author: Dimitri Sivanich <sivanich@sgi.com>
Date:   Wed Oct 14 09:18:48 2009 -0500

    x86: UV RTC: Add clocksource only boot option
    
    Add clocksource only boot option for UV RTC.
    
    Signed-off-by: Dimitri Sivanich <sivanich@sgi.com>
    LKML-Reference: <20091014141848.GC11048@sgi.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 112a62ddb32952943517bd170f0eeb26a6f0738f
Author: John Stultz <johnstul@us.ibm.com>
Date:   Thu Oct 8 13:31:45 2009 -0700

    PIT fixes to unbreak suspend/resume (bug #14222)
    
    Resolved differently upstream in commit 8cab02dc3c58a12235c6d463ce684dded9696848
    
    Ondrej Zary reported a suspend/resume hang with 2.6.31 in bug #14222.
    
    http://bugzilla.kernel.org/show_bug.cgi?id=14222
    
    The hang was bisected to c7121843685de2bf7f3afd3ae1d6a146010bf1fc
    however, that was really just the last straw that caused the issue.
    
    The problem was that on suspend, the PIT is removed as a clocksource,
    and was using the mult value essentially as a is_enabled() flag. The
    mult adjustments done in the commit above caused that usage to break,
    causing bad list manipulation and the oops.
    
    Further, on resume, the PIT clocksource is never restored, causing the
    system to run in a degraded mode with jiffies as the clocksource.
    
    This issue has since been resolved in 2.6.32-rc by commit
    8cab02dc3c58a12235c6d463ce684dded9696848 which removes the clocksource
    disabling on suspend. Testing shows no issues there.
    
    So the following patch rectifies the situation for 2.6.31 users of the
    PIT clocksource that use suspend and resume (which is probably not that
    many).
    
    Many thanks to Ondrej for helping narrow down what was happening, what
    caused it, and verifying the fix.
    
    ---------------
    
    Avoid using the unprotected clocksource.mult value as an "is_registered"
    flag, instead us an explicit flag variable. This avoids possible list
    corruption if the clocksource is double-unregistered.
    
    Also re-register the PIT clocksource on resume so folks don't have to
    use jiffies after suspend.
    
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 3ce4d0a0f7184d5fe17747841f628adac60ed262
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Dec 1 18:34:41 2008 -0800

    time: catch xtime_nsec underflows and fix them
    
    commit 6c9bacb41c10ba84ff68f238e234d96f35fb64f7 upstream.
    
    Impact: fix time warp bug
    
    Alex Shi, along with Yanmin Zhang have been noticing occasional time
    inconsistencies recently. Through their great diagnosis, they found that
    the xtime_nsec value used in update_wall_time was occasionally going
    negative. After looking through the code for awhile, I realized we have
    the possibility for an underflow when three conditions are met in
    update_wall_time():
    
      1) We have accumulated a second's worth of nanoseconds, so we
         incremented xtime.tv_sec and appropriately decrement xtime_nsec.
         (This doesn't cause xtime_nsec to go negative, but it can cause it
          to be small).
    
      2) The remaining offset value is large, but just slightly less then
         cycle_interval.
    
      3) clocksource_adjust() is speeding up the clock, causing a
         corrective amount (compensating for the increase in the multiplier
         being multiplied against the unaccumulated offset value) to be
         subtracted from xtime_nsec.
    
    This can cause xtime_nsec to underflow.
    
    Unfortunately, since we notify the NTP subsystem via second_overflow()
    whenever we accumulate a full second, and this effects the error
    accumulation that has already occured, we cannot simply revert the
    accumulated second from xtime nor move the second accumulation to after
    the clocksource_adjust call without a change in behavior.
    
    This leaves us with (at least) two options:
    
    1) Simply return from clocksource_adjust() without making a change if we
       notice the adjustment would cause xtime_nsec to go negative.
    
    This would work, but I'm concerned that if a large adjustment was needed
    (due to the error being large), it may be possible to get stuck with an
    ever increasing error that becomes too large to correct (since it may
    always force xtime_nsec negative). This may just be paranoia on my part.
    
    2) Catch xtime_nsec if it is negative, then add back the amount its
       negative to both xtime_nsec and the error.
    
    This second method is consistent with how we've handled earlier rounding
    issues, and also has the benefit that the error being added is always in
    the oposite direction also always equal or smaller then the correction
    being applied. So the risk of a corner case where things get out of
    control is lessened.
    
    This patch fixes bug 11970, as tested by Yanmin Zhang
    http://bugzilla.kernel.org/show_bug.cgi?id=11970
    
    Reported-by: alex.shi@intel.com
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Acked-by: Yanmin Zhang <yanmin_zhang@linux.intel.com>
    Tested-by: Yanmin Zhang <yanmin_zhang@linux.intel.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit a037a79dceaf717409fbf42f4ad209b9c15f435c
Merge: 90d5ffc729e9 d25ef8b86e6a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 2 16:20:43 2009 -0700

    Merge master.kernel.org:/home/rmk/linux-2.6-arm
    
    * master.kernel.org:/home/rmk/linux-2.6-arm: (25 commits)
      ARM: 5728/1: Proper prefetch abort handling on ARMv6 and ARMv7
      ARM: 5727/1: Pass IFSR register to do_PrefetchAbort()
      ARM: 5740/1: fix valid_phys_addr_range() range check
      ARM: 5739/1: ARM: allow empty ATAG_CORE
      ARM: 5735/1: sa1111: CodingStyle cleanups
      ARM: 5738/1: Correct TCM documentation
      ARM: 5734/1: arm: fix compilation of entry-common.S for older CPUs
      ARM: 5733/1: fix bcmring compile error
      ARM: 5732/1: remove redundant include file
      ARM: 5731/2: Fix U300 generic GPIO, remove ifdefs from MMCI v3
      ARM: Ensure do_cache_op takes mmap_sem
      ARM: Fix __cpuexit section mismatch warnings
      ARM: Don't allow highmem on SMP platforms without h/w TLB ops broadcast
      ARM: includecheck fix: mach-davinci, board-dm365-evm.c
      ARM: Remove unused CONFIG SA1100_H3XXX
      ARM: Fix warning: unused variable 'highmem'
      ARM: Fix warning: #warning syscall migrate_pages not implemented
      ARM: Fix SA11x0 clocksource warning
      ARM: Fix SA1100 Neponset serial section mismatch
      ARM: Fix SA1100 Assabet/Neponset PCMCIA section mismatch warnings
      ...

commit fac28e6df9b5fdfa0cf6b99eae022609dd1108d5
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sun Sep 27 17:32:47 2009 +0100

    ARM: Fix SA11x0 clocksource warning
    
    8e19608 missed updating SA11x0, and thus:
    
    arch/arm/mach-sa1100/time.c:88: warning: initialization from incompatible pointer type
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 179b9145d58eb7158d4053a8308b9fc4608a6d6b
Merge: 4187e7e9f129 89133f935081
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Sep 26 10:14:41 2009 -0700

    Merge branch 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource: Resume clocksource without taking the clocksource mutex

commit 89133f93508137231251543d1732da638e6022e1
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Thu Sep 24 17:29:52 2009 +0200

    clocksource: Resume clocksource without taking the clocksource mutex
    
    git commit 75c5158f70c065b9 converted the clocksource spinlock to a
    mutex. This causes the following BUG:
    
    BUG: sleeping function called from invalid context at
    kernel/mutex.c:280 in_atomic(): 0, irqs_disabled(): 1, pid: 2473,
    name: pm-suspend 2 locks held by pm-suspend/2473:
     #0:  (&buffer->mutex){......}, at: [<ffffffff8115ab13>]
    sysfs_write_file+0x3c/0x137
     #1:  (pm_mutex){......}, at: [<ffffffff810865b5>]
    enter_state+0x39/0x130 Pid: 2473, comm: pm-suspend Not tainted 2.6.31
    #1 Call Trace:
     [<ffffffff810792f0>] ? __debug_show_held_locks+0x22/0x24
     [<ffffffff8104a2ef>] __might_sleep+0x107/0x10b
     [<ffffffff8141fca9>] mutex_lock_nested+0x25/0x43
     [<ffffffff81073537>] clocksource_resume+0x1c/0x60
     [<ffffffff81072902>] timekeeping_resume+0x1e/0x1c8
     [<ffffffff812aee62>] __sysdev_resume+0x25/0xcf
     [<ffffffff812aef79>] sysdev_resume+0x6d/0xae
     [<ffffffff810864f8>] suspend_devices_and_enter+0x12b/0x1af
     [<ffffffff8108665b>] enter_state+0xdf/0x130
     [<ffffffff81085dc3>] state_store+0xb6/0xd3
     [<ffffffff81204c73>] kobj_attr_store+0x17/0x19
     [<ffffffff8115abd2>] sysfs_write_file+0xfb/0x137
     [<ffffffff811057d2>] vfs_write+0xae/0x10b
     [<ffffffff81208392>] ? __up_read+0x1a/0x7f
     [<ffffffff811058ef>] sys_write+0x4a/0x6e
     [<ffffffff81011b82>] system_call_fastpath+0x16/0x1b
    
    clocksource_resume is called early in the resume process, there is
    only one cpu, no processes are running and the interrupts are
    disabled. It is therefore possible to resume the clocksources
    without taking the clocksource mutex.
    
    Reported-by: Xiaotian Feng <xtfeng@gmail.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Tested-by: Michal Schmidt <mschmidt@redhat.com>
    Cc: Xiaotian Feng <xtfeng@gmail.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    LKML-Reference: <20090924172952.49697825@mschwide.boeblingen.de.ibm.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 4f543fa41e78bd366123424a3378f2f4918c0f33
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Sep 21 17:04:00 2009 -0700

    alpha: convert to use arch_gettimeoffset()
    
    Converts alpha to use GENERIC_TIME via the arch_getoffset()
    infrastructure, reducing the amount of arch specific code we need to
    maintain.
    
    I suspect the alpha arch could even be further improved to provide and
    rpcc() based clocksource, but not having the hardware, I don't feel
    comfortable attempting the more complicated conversion (but I'd be glad to
    help if anyone else is interested).
    
    [akpm@linux-foundation.org: fix build]
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Richard Henderson <rth@twiddle.net>
    Cc: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit ceb69a899f0819bce825083bd487c6afacc0d1b4
Author: Mikael Pettersson <mikpe@it.uu.se>
Date:   Fri Sep 11 00:59:07 2009 +0200

    ixp4xx: timer and clocks cleanups
    
    This patch does a few simple cleanups of the ixp4xx timer
    and clocksource/clockevent code in mach-ixp4xx/common.c:
    
    - ixp4xx_clocksource_init() is static and always returns 0,
      which is ignored by its only caller: make it return void
    - ixp4xx_clockevent_init(): ditto
    - ixp4xx_get_cycles() is only referenced locally: make it static
    - use the ixp4xx_timer_irq.dev_id field to pass &clockevent_ixp4xx
      to ixp4xx_timer_interrupt() via its dev_id parameter, allowing
      the code in ixp4xx_timer_interrupt() to be smaller and faster
    
    Tested on an ixp420 machine (ds101).
    
    Signed-off-by: Mikael Pettersson <mikpe@it.uu.se>
    Signed-off-by: Krzysztof Hałasa <khc@pm.waw.pl>

commit a2ca00ea9398265a26eabb358bba83c8b75c463d
Author: Linus Walleij <linus.walleij@stericsson.com>
Date:   Thu Sep 17 13:10:50 2009 +0100

    ARM: 5704/1: U300 sched_clock implementation v2
    
    This adds the long debated sched_clock() override for the weak
    in-kernel jiffybased sched_clock(). The implementation is more or
    less identical to the one used in arch/arm/plat-omap/common.c
    and at last attempt to merge this the merge was postponed at the
    request of Peter Zijlstra due to pending discussions regarding
    generalized clocksource-based sched_clock() implementations by
    adding a flag to the clocksource. However that discussion ended
    up with the generic code needing to be rewritten and Paul Mundt
    see no reason not to proceed with this for the time being as it
    can be easily converted once the generic code is in place.
    
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: Linus Walleij <linus.walleij@stericsson.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit a03fdb7612874834d6847107198712d18b5242c7
Merge: 202c4675c55d 12e09337fe23
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Sep 18 09:15:24 2009 -0700

    Merge branch 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip: (34 commits)
      time: Prevent 32 bit overflow with set_normalized_timespec()
      clocksource: Delay clocksource down rating to late boot
      clocksource: clocksource_select must be called with mutex locked
      clocksource: Resolve cpu hotplug dead lock with TSC unstable, fix crash
      timers: Drop a function prototype
      clocksource: Resolve cpu hotplug dead lock with TSC unstable
      timer.c: Fix S/390 comments
      timekeeping: Fix invalid getboottime() value
      timekeeping: Fix up read_persistent_clock() breakage on sh
      timekeeping: Increase granularity of read_persistent_clock(), build fix
      time: Introduce CLOCK_REALTIME_COARSE
      x86: Do not unregister PIT clocksource on PIT oneshot setup/shutdown
      clocksource: Avoid clocksource watchdog circular locking dependency
      clocksource: Protect the watchdog rating changes with clocksource_mutex
      clocksource: Call clocksource_change_rating() outside of watchdog_lock
      timekeeping: Introduce read_boot_clock
      timekeeping: Increase granularity of read_persistent_clock()
      timekeeping: Update clocksource with stop_machine
      timekeeping: Add timekeeper read_clock helper functions
      timekeeping: Move NTP adjusted clock multiplier to struct timekeeper
      ...
    
    Fix trivial conflict due to MIPS lemote -> loongson renaming.

commit abf5940dad78dde95edd7f6ba6e329cd10a92a5c
Merge: 66bc4a6f34a9 5bf9cbef9972
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Sep 17 09:53:04 2009 -0700

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/vapier/blackfin
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/vapier/blackfin: (75 commits)
      Blackfin: update ftrace for latest toolchain
      Blackfin: fix elf_fpregset_t definition
      Blackfin: unify cache init functions
      Blackfin: swap clocksource ratings for gptimer/cycles
      Blackfin: update ftrace_push_return_trace() breakage
      Blackfin: update cm board resources
      Blackfin: cm-bf537u: split board from cm-bf537e
      Blackfin: bf538-ezkit: add SPI IRQ resources
      Blackfin: increase default async timings for parallel flashes
      Blackfin: add ICPLB coverage for async banks
      Blackfin: use KERN_ALERT in all kgdb_test output
      Blackfin: fix BF54x SPI CS resources
      Blackfin: fix typo in isram_write()
      Blackfin: bf537-stamp: add adp5588 gpio resources
      Blackfin: add some isram-driver self tests
      Blackfin: workaround anomaly 05000283
      Blackfin: fix spelling in a few comments
      Blackfin: use raw_smp_processor_id() in exception code
      Blackfin: remove useless duplicated assignment in gpio code
      Blackfin: Fix link errors with binutils 2.19 and GCC 4.3
      ...

commit e78feaaeeb9bbf78f961917d72d692802ac110e8
Author: Graf Yang <graf.yang@analog.com>
Date:   Mon Sep 14 04:41:00 2009 +0000

    Blackfin: swap clocksource ratings for gptimer/cycles
    
    The cycles clocksource is a higher resolution than the gptimer one, so
    make sure the ratings field reflects this.
    
    Signed-off-by: Graf Yang <graf.yang@analog.com>
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>

commit 54a6bc0b071c50150bc6d1da16c2cd9a963e288c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Sep 14 19:49:02 2009 +0200

    clocksource: Delay clocksource down rating to late boot
    
    The down rating of clock sources in the early boot process via the
    clock source watchdog mechanism can happen way before the per cpu
    event queues are initialized. This leads to a boot crash on x86 when
    the TSC is marked unstable in the SMP bring up.
    
    The selection of a clock source for time keeping happens in the late
    boot process so we can safely delay the list manipulation until
    clocksource_done_booting() is called.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    LKML-Reference: <new-submission>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit e6c733050faa93ce616bfedccd279ab12cffdd7b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Sep 14 19:51:11 2009 +0200

    clocksource: clocksource_select must be called with mutex locked
    
    The callers of clocksource_select must hold clocksource_mutex to
    protect the clocksource_list.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    LKML-Reference: <new-submission>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit f79e0258ea1f04d63db499479b5fb855dff6dbc5
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Sep 11 15:33:05 2009 +0200

    clocksource: Resolve cpu hotplug dead lock with TSC unstable, fix crash
    
    The watchdog timer is started after the watchdog clocksource
    and at least one watched clocksource have been registered. The
    clocksource work element watchdog_work is initialized just
    before the clocksource timer is started. This is too late for
    the clocksource_mark_unstable call from native_cpu_up. To fix
    this use a static initializer for watchdog_work.
    
    This resolves a boot crash reported by multiple people.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Jens Axboe <jens.axboe@oracle.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    LKML-Reference: <20090911153305.3fe9a361@skybase>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 637e7e864103a7a68c1ce43ada27dfc25c0d113f
Author: Steven Rostedt <srostedt@redhat.com>
Date:   Fri Sep 11 13:55:35 2009 -0400

    tracing: add lock depth to entries
    
    This patch adds the lock depth of the big kernel lock to the generic
    entry header. This way we can see the depth of the lock and help
    in removing the BKL.
    
    Example:
    
     #                  _------=> CPU#
     #                 / _-----=> irqs-off
     #                | / _----=> need-resched
     #                || / _---=> hardirq/softirq
     #                ||| / _--=> preempt-depth
     #                |||| /_--=> lock-depth
     #                |||||/     delay
     #  cmd     pid   |||||| time  |   caller
     #     \   /      ||||||   \   |   /
       <idle>-0       2.N..3 5902255250us+: lock_acquire: read rcu_read_lock
       <idle>-0       2.N..3 5902255253us+: lock_release: rcu_read_lock
       <idle>-0       2dN..3 5902255257us+: lock_acquire: xtime_lock
       <idle>-0       2dN..4 5902255259us : lock_acquire: clocksource_lock
       <idle>-0       2dN..4 5902255261us+: lock_release: clocksource_lock
    
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

commit 7285dd7fd375763bfb8ab1ac9cf3f1206f503c16
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Aug 28 20:25:24 2009 +0200

    clocksource: Resolve cpu hotplug dead lock with TSC unstable
    
    Martin Schwidefsky analyzed it:
    To register a clocksource the clocksource_mutex is acquired and if
    necessary timekeeping_notify is called to install the clocksource as
    the timekeeper clock. timekeeping_notify uses stop_machine which needs
    to take cpu_add_remove_lock mutex.
    Starting a new cpu is done with the cpu_add_remove_lock mutex held.
    native_cpu_up checks the tsc of the new cpu and if the tsc is no good
    clocksource_change_rating is called. Which needs the clocksource_mutex
    and the deadlock is complete.
    
    The solution is to replace the TSC via the clocksource watchdog
    mechanism. Mark the TSC as unstable and schedule the watchdog work so
    it gets removed in the watchdog thread context.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    LKML-Reference: <new-submission>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: John Stultz <johnstul@us.ibm.com>

commit da15cfdae03351c689736f8d142618592e3cebc3
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed Aug 19 19:13:34 2009 -0700

    time: Introduce CLOCK_REALTIME_COARSE
    
    After talking with some application writers who want very fast, but not
    fine-grained timestamps, I decided to try to implement new clock_ids
    to clock_gettime(): CLOCK_REALTIME_COARSE and CLOCK_MONOTONIC_COARSE
    which returns the time at the last tick. This is very fast as we don't
    have to access any hardware (which can be very painful if you're using
    something like the acpi_pm clocksource), and we can even use the vdso
    clock_gettime() method to avoid the syscall. The only trade off is you
    only get low-res tick grained time resolution.
    
    This isn't a new idea, I know Ingo has a patch in the -rt tree that made
    the vsyscall gettimeofday() return coarse grained time when the
    vsyscall64 sysctrl was set to 2. However this affects all applications
    on a system.
    
    With this method, applications can choose the proper speed/granularity
    trade-off for themselves.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: nikolag@ca.ibm.com
    Cc: Darren Hart <dvhltc@us.ibm.com>
    Cc: arjan@infradead.org
    Cc: jonathan@jonmasters.org
    LKML-Reference: <1250734414.6897.5.camel@localhost.localdomain>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 8cab02dc3c58a12235c6d463ce684dded9696848
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Aug 20 18:19:45 2009 +0200

    x86: Do not unregister PIT clocksource on PIT oneshot setup/shutdown
    
    This basically reverts commit 1a0c009ac (x86: unregister PIT
    clocksource when PIT is disabled) because the problem which was tried
    to address with that patch has been solved by commit 3f68535ada
    (clocksource: sanity check sysfs clocksource changes).
    
    The problem addressed by the original patch is that PIT could be
    selected as clocksource after the system switched the PIT off or set
    the PIT into one shot mode which would result in complete timekeeping
    wreckage.
    
    Now with the sysfs sanity check in place PIT cannot be selected again
    when the system is in oneshot mode. The system will not switch to one
    shot mode as long as PIT is installed because PIT is not suitable for
    one shot.
    
    The shutdown case which happens when the lapic timer is installed is
    covered by the fact that init_pit_clocksource() is called after the
    lapic timer take over and then does not install the PIT clocksource
    at all.
    
    We should have done the sanity checks back then, but ...
    
    This also solves the locking problem which was reported vs. the
    clocksource rework.
    
    LKML-Reference: <new-submission>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 01548f4d3e8e94caf323a4f664eb347fd34a34ab
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Tue Aug 18 17:09:42 2009 +0200

    clocksource: Avoid clocksource watchdog circular locking dependency
    
    stop_machine from a multithreaded workqueue is not allowed because
    of a circular locking dependency between cpu_down and the workqueue
    execution. Use a kernel thread to do the clocksource downgrade.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: john stultz <johnstul@us.ibm.com>
    LKML-Reference: <20090818170942.3ab80c91@skybase>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit d0981a1b21a03866c8da7f44e35e389c2e0d6061
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Aug 19 11:26:09 2009 +0200

    clocksource: Protect the watchdog rating changes with clocksource_mutex
    
    Martin pointed out that commit 6ea41d2529 (clocksource: Call
    clocksource_change_rating() outside of watchdog_lock) has a
    theoretical reference count problem. The calls to
    clocksource_change_rating() are now done outside of the clocksource
    mutex and outside of the watchdog lock. A concurrent
    clocksource_unregister() could remove the clock.
    
    Split out the code which changes the rating from
    clocksource_change_rating() into __clocksource_change_rating().
    
    Protect the clocksource_watchdog_work() code sequence with the
    clocksource_mutex() and call __clocksource_change_rating().
    
    LKML-Reference: <alpine.LFD.2.00.0908171038420.2782@localhost.localdomain>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 278a6752e869b0f4a03ce5ac0588b31b50712903
Author: Leo Chen <leochen@broadcom.com>
Date:   Fri Aug 7 19:58:26 2009 +0100

    ARM: 5644/1: add bcmring core.c, clock.c, clock.h
    
    add core.c, clock.c, and clock.h in mach-bcmring
    
    implement timer init, clocksource init, amba device init
    implement clock set/get enable/disable API
    add dummy clkdev.h
    
    Signed-off-by: Leo Chen <leochen@broadcom.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 58b5369e6eb6c889b540a99aa95562a66b25acf1
Author: wanzongshun <mcuos.com@gmail.com>
Date:   Fri Aug 14 15:36:44 2009 +0100

    ARM: 5674/1: Add clocksource/clockevent support for w90p910 platform
    
    Add clocksource/clockevent support for w90p910 platform.
    
    Signed-off-by: Wan ZongShun <mcuos.com@gmail.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 6ea41d252f35465a2308a4038a323b6b07de06f6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Aug 15 13:20:42 2009 +0200

    clocksource: Call clocksource_change_rating() outside of watchdog_lock
    
    The changes to the watchdog logic introduced a lock inversion between
    watchdog_lock and clocksource_mutex. Change the rating outside of
    watchdog_lock to avoid it.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 75c5158f70c065b9704b924503d96e8297838f79
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Aug 14 15:47:30 2009 +0200

    timekeeping: Update clocksource with stop_machine
    
    update_wall_time calls change_clocksource HZ times per second to check
    if a new clock source is available. In close to 100% of all calls
    there is no new clock. Replace the tick based check by an update done
    with stop_machine.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    LKML-Reference: <20090814134810.711836357@de.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 0a54419836254a27baecd9037103171bcbabaf67
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Aug 14 15:47:28 2009 +0200

    timekeeping: Move NTP adjusted clock multiplier to struct timekeeper
    
    The clocksource structure has two multipliers, the unmodified multiplier
    clock->mult_orig and the NTP corrected multiplier clock->mult. The NTP
    multiplier is misplaced in the struct clocksource, this is private
    information of the timekeeping code. Add the mult field to the struct
    timekeeper to contain the NTP corrected value, keep the unmodifed
    multiplier in clock->mult and remove clock->mult_orig.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    LKML-Reference: <20090814134810.149047645@de.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 155ec60226ae0ae2aadaa57c951a58a359331030
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Aug 14 15:47:26 2009 +0200

    timekeeping: Introduce struct timekeeper
    
    Add struct timekeeper to keep the internal values timekeeping.c needs
    in regard to the currently selected clock source. This moves the
    timekeeping intervals, xtime_nsec and the ntp error value from struct
    clocksource to struct timekeeper. The raw_time is removed from the
    clocksource as well. It gets treated like xtime as a global variable.
    Eventually xtime raw_time should be moved to struct timekeeper.
    
    [ tglx: minor cleanup ]
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    LKML-Reference: <20090814134809.613209842@de.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit c55c87c892c1875deace0c8fc28787335277fdf2
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Aug 14 15:47:25 2009 +0200

    clocksource: Move watchdog downgrade to a work queue thread
    
    Move the downgrade of an unstable clocksource from the timer interrupt
    context into the process context of a work queue thread. This is
    needed to be able to do the clocksource switch with stop_machine.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    LKML-Reference: <20090814134809.354926067@de.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit fb63a0ebe615fba9de8c75ea44ded999d1e24c65
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Aug 14 15:47:24 2009 +0200

    clocksource: Refactor clocksource watchdog
    
    Refactor clocksource watchdog code to make it more readable. Add
    clocksource_dequeue_watchdog to remove a clocksource from the watchdog
    list when it is unregistered.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    LKML-Reference: <20090814134809.110881699@de.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 0f8e8ef7c204988246da5a42d576b7fa5277a8e4
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Aug 14 15:47:23 2009 +0200

    clocksource: Simplify clocksource watchdog resume logic
    
    To resume the clocksource watchdog just remove the CLOCK_SOURCE_WATCHDOG
    bit from the watched clocksource.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    LKML-Reference: <20090814134808.880925790@de.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 8cf4e750f8459d51c2e8a035a201da4bf7aa996a
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Aug 14 15:47:22 2009 +0200

    clocksource: Delay clocksource watchdog highres enablement
    
    The clocksource watchdog marks a clock as highres capable before it
    checked the deviation from the watchdog clocksource even for a single
    time. Make sure that the deviation is at least checked once before
    doing the switch to highres mode.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    LKML-Reference: <20090814134808.627795883@de.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit f1b82746c1e93daf24e1ab9bfbd39bcdb2e7018b
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Aug 14 15:47:21 2009 +0200

    clocksource: Cleanup clocksource selection
    
    If a non high-resolution clocksource is first set as override clock
    and then registered it becomes active even if the system is in one-shot
    mode. Move the override check from sysfs_override_clocksource to the
    clocksource selection. That fixes the bug and simplifies the code. The
    check in clocksource_register for double registration of the same
    clocksource is removed without replacement.
    
    To find the initial clocksource a new weak function in jiffies.c is
    defined that returns the jiffies clocksource. The architecture code
    can then override the weak function with a more suitable clocksource,
    e.g. the TOD clock on s390.
    
    [ tglx: Folded in a fix from John Stultz ]
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    LKML-Reference: <20090814134808.388024160@de.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 1be396794897f80bfc8774719ba60309a9e3d374
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Aug 14 15:47:20 2009 +0200

    timekeeping: Move reset of cycle_last for tsc clocksource to tsc
    
    change_clocksource resets the cycle_last value to zero then sets it to
    a value read from the clocksource. The reset to zero is required only
    for the TSC clocksource to make the read_tsc function work after a
    resume. The reason is that the TSC read function uses cycle_last to
    detect backwards going TSCs. In the resume case cycle_last contains
    the TSC value from the last update before the suspend. On resume the
    TSC starts counting from 0 again and would trip over the cycle_last
    comparison.
    
    This is subtle and surprising. Move the reset to a resume function in
    the tsc code.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    LKML-Reference: <20090814134808.142191175@de.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit a0f7d48bfb95a4c5172a2756dbc4b82afc8e9ae4
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Fri Aug 14 15:47:19 2009 +0200

    timekeeping: Remove clocksource inline functions
    
    The three inline functions clocksource_read, clocksource_enable and
    clocksource_disable are simple wrappers of an indirect call plus the
    copy from and to the mult_orig value. The functions are exclusively
    used by the timekeeping code which has intimate knowledge of the
    clocksource anyway. Therefore remove the inline functions. No
    functional change.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Daniel Walker <dwalker@fifo99.com>
    LKML-Reference: <20090814134807.903108946@de.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 6eb80e00bff341dd09a7ec8b9dba6da8410448bf
Merge: d27d4e2a6609 c7121843685d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 31 12:09:57 2009 -0700

    Merge branch 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource: Save mult_orig in clocksource_disable()

commit c7121843685de2bf7f3afd3ae1d6a146010bf1fc
Author: Magnus Damm <magnus.damm@gmail.com>
Date:   Tue Jul 28 14:09:55 2009 -0700

    clocksource: Save mult_orig in clocksource_disable()
    
    To fix the common case where ->enable() does not set up
    mult, make sure mult_orig is saved in mult on disable.
    
    Also add comments to explain why we do this.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Cc: johnstul@us.ibm.com
    Cc: lethal@linux-sh.org
    Cc: akpm@linux-foundation.org
    LKML-Reference: <20090618152432.10136.9932.sendpatchset@rx1.opensource.se>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit c57c3743784e08d8ceaaea928a8c84ad8b403aed
Merge: 5b26776bd925 79ef2bb01445
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 22 10:11:47 2009 -0700

    Merge branch 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource: Prevent NULL pointer dereference
      timer: Avoid reading uninitialized data

commit 79ef2bb01445400def20c7993b27fbcad27ca95f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Jul 19 17:09:12 2009 +0200

    clocksource: Prevent NULL pointer dereference
    
    Writing a zero length string to sys/.../current_clocksource will cause
    a NULL pointer dereference if the clock events system is in one shot
    (highres or nohz) mode.
    
    Pointed-out-by: Dan Carpenter <error27@gmail.com>
    LKML-Reference: <alpine.DEB.2.00.0907191545580.12306@bicker>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 951ed4d36b77ba9fe1ea08fc3c59d8bb6c9bda32
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Tue Jul 7 11:27:28 2009 +0200

    timekeeping: optimized ktime_get[_ts] for GENERIC_TIME=y
    
    The generic ktime_get function defined in kernel/hrtimer.c is suboptimial
    for GENERIC_TIME=y:
    
     0)               |  ktime_get() {
     0)               |    ktime_get_ts() {
     0)               |      getnstimeofday() {
     0)               |        read_tod_clock() {
     0)   0.601 us    |        }
     0)   1.938 us    |      }
     0)               |      set_normalized_timespec() {
     0)   0.602 us    |      }
     0)   4.375 us    |    }
     0)   5.523 us    |  }
    
    Overall there are two read_seqbegin/read_seqretry loops and a lot of
    unnecessary struct timespec calculations. ktime_get returns a nano second
    value which is the sum of xtime, wall_to_monotonic and the nano second
    delta from the clock source.
    
    ktime_get can be optimized for GENERIC_TIME=y. The new version only calls
    clocksource_read:
    
     0)               |  ktime_get() {
     0)               |    read_tod_clock() {
     0)   0.610 us    |    }
     0)   1.977 us    |  }
    
    It uses a single read_seqbegin/readseqretry loop and just adds everthing
    to a nano second value.
    
    ktime_get_ts is optimized in a similar fashion.
    
    [ tglx: added WARN_ON(timekeeping_suspended) as in getnstimeofday() ]
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Acked-by: john stultz <johnstul@us.ibm.com>
    LKML-Reference: <20090707112728.3005244d@skybase>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit dfbf9511155d3584b8747c935216077f46eb9a4f
Author: Andreas Mohr <andi@lisas.de>
Date:   Sun Jul 5 13:55:46 2009 +0200

    ALSA: azt3328: large codec cleanup, add I2S port etc.
    
    - fully separate codec I/O port handling, enabling the use of a single
      function each for all codecs (playback, capture, I2S out)
    - add a new separate pcm for I2S out port (UNTESTED, no I2S DAC
      available yet)
    - switch gameport to low frequency while idle, to try to reduce noise/power
    - improve snd_azf3328_codec_setdmaa() calculation
    - minor variable type cleanup (u16, bool etc.)
    - add some doc updates (help those lost Windows users, debug help, ...)
    
    Note that due to the large cleanup aspect of the codec I/O change,
    I was able to fit everything including all improvements into the
    same binary size!! (a measly 10 bytes more or so)
    
    This should now be the almost last patch to this driver
    (minus some possible kernel clocksource patch and x86_64 fixes or so).
    I just felt like taking a break from the usual stuff and wanted to
    get this driver's structure finished, and it's rather clean now...
    
    Tested, working and checkpatch.pl:ed on 2.6.30-rc5,
    applies cleanly to 2.6.30 proper.
    
    Signed-off-by: Andreas Mohr <andi@lisas.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit ebc30a0f67a4d6a9470556f4311478b3b04c2b1f
Author: Coly Li <coly.li@suse.de>
Date:   Thu Apr 30 22:43:46 2009 +0000

    parisc: add parameter to read_cr16()
    
    This patch modifies parameter of au1x_counter1_read() from 'void' to 'struct
    clocksource *cs', which fixes compile warning for incompatible parameter type.
    
    Signed-off-by: Coly Li <coly.li@suse.de>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Kyle McMartin <kyle@mcmartin.ca>

commit 5a475ce4692f668b2615ae4ea1365c7c2d93f1dd
Merge: d960eea974f5 1c6a307a5466
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 1 11:46:30 2009 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6:
      sh: LCDC dcache flush for deferred io
      sh: Fix compiler error and include the definition of IS_ERR_VALUE
      sh: re-add LCDC fbdev support to the Migo-R defconfig
      sh: fix se7724 ceu names
      sh: ms7724se: Enable sh_eth in defconfig.
      arch/sh/boards/mach-se/7206/io.c: Remove unnecessary semicolons
      sh: ms7724se: Add sh_eth support
      nommu: provide follow_pfn().
      sh: Kill off unused DEBUG_BOOTMEM symbol.
      perf_counter tools: add cpu_relax()/rmb() definitions for sh.
      sh64: Hook up page fault events for software perf counters.
      sh: Hook up page fault events for software perf counters.
      sh: make set_perf_counter_pending() static inline.
      clocksource: sh_tmu: Make undefined TCOR behaviour less undefined.

commit a70c352a37671fe1ebcbd317b439aa4760f4ccb7
Author: Pekka Enberg <penberg@cs.helsinki.fi>
Date:   Wed Jul 1 11:51:18 2009 +0300

    xen: Use kcalloc() in xen_init_IRQ()
    
    The init_IRQ() function is now called with slab allocator initialized.
    Therefore, we must not use the bootmem allocator in xen_init_IRQ().
    
    Fixes the following boot-time warning:
    
      ------------[ cut here ]------------
      WARNING: at mm/bootmem.c:535 alloc_arch_preferred_bootmem+0x27/0x45()
      Modules linked in:
      Pid: 0, comm: swapper Not tainted 2.6.30 #1
      Call Trace:
       [<ffffffff8102d6e3>] ? warn_slowpath_common+0x73/0xb0
       [<ffffffff810210d9>] ? pvclock_clocksource_read+0x49/0x90
       [<ffffffff812e522f>] ? alloc_arch_preferred_bootmem+0x27/0x45
       [<ffffffff812e5761>] ? ___alloc_bootmem_nopanic+0x39/0xc9
       [<ffffffff812e57fa>] ? ___alloc_bootmem+0x9/0x2f
       [<ffffffff812e9e21>] ? xen_init_IRQ+0x25/0x61
       [<ffffffff812d69ee>] ? start_kernel+0x1b5/0x29e
      ---[ end trace 4eaa2a86a8e2da22 ]---
    
    Acked-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Tested-by: Christian Kujau <lists@nerdbynature.de>
    Reported-by: Christian Kujau <lists@nerdbynature.de>
    Signed-off-by: Pekka Enberg <penberg@cs.helsinki.fi>
    Cc: lists@nerdbynature.de
    Cc: jeremy.fitzhardinge@citrix.com
    LKML-Reference: <1246438278.22417.28.camel@penberg-laptop>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 6f4b67b8ff707147e14ee71045ab25aa286520f2
Author: Shin-ichiro KAWASAKI <kawasaki@juno.dti.ne.jp>
Date:   Sun Jun 21 10:56:22 2009 +0000

    clocksource: sh_tmu: Make undefined TCOR behaviour less undefined.
    
    Avoid undocumented vague TMU behavior when zero value is set to TCOR.
    
    This primarily fixes up issues encountered under qemu with a zero-length
    period, while the hardware itself is fairly ambivalent one way or the
    other.
    
    Signed-off-by: Shin-ichiro KAWASAKI <kawasaki@juno.dti.ne.jp>
    Acked-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit a43da03ca4719276b9601730627d20b2a71fb6ba
Author: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
Date:   Fri Apr 24 00:10:36 2009 +0900

    MIPS: TXx9: micro optimization for clocksource and clock_event
    
    Use container structure for clocksource, clock_event_device and hold a
    pointer to txx9_tmr_reg in it.
    
    This saves a few instructions in clocksource and clock_event handlers.
    
    Signed-off-by: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 3f27c0d2a469673e0f1efc8004b6f42428aa5b94
Merge: 9aaa630503f2 cd6d95d8449b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 15 09:58:33 2009 -0700

    Merge branch 'timers-for-linus-clocksource' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-for-linus-clocksource' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource: prevent selection of low resolution clocksourse also for nohz=on
      clocksource: sanity check sysfs clocksource changes

commit e7fad451f06e21e74b6051c5ad4917e37460be3a
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Sun Jun 14 21:18:24 2009 +0900

    clocksource: Drop unused irqaction.mask from SH drivers.
    
    The irqaction.mask is legacy code that is wholly unused and going away,
    so simply drop its use in the SH drivers completely.
    
    Fixes up build failures in -next.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 6fe32a468521d45edc35d92cdc05cd74e930426a
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Sun Jun 14 20:02:30 2009 +0900

    sh: Bump the earlytimer probe devices up.
    
    Presently the earlytimer probe handles the clockevents driver, which
    requires that the clockevents driver be registered first. This bumps it
    up by 1 to include the clocksource device, which can be safely ignored
    if it doesn't exist, as we will simply error out on that path and defer
    to the jiffies clocksource.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit cd6d95d8449b7c9f415f26041e9ae173d387b6bd
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jun 12 11:29:27 2009 +0200

    clocksource: prevent selection of low resolution clocksourse also for nohz=on
    
    commit 3f68535adad (clocksource: sanity check sysfs clocksource
    changes) prevents selection of non high resolution capable
    clocksources when high resolution mode is active, but did not take
    into account that the same rules apply for highres=off nohz=on.
    
    Check the tick device mode instead of hrtimer_hres_active() to verify
    whether the system needs to be protected from a switch to jiffies or
    other non highres capable clock sources.
    
    Reported-by: Luming Yu <luming.yu@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 3f68535adad8dd89499505a65fb25d0e02d118cc
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed Jan 21 22:53:22 2009 -0700

    clocksource: sanity check sysfs clocksource changes
    
    Thomas, Andrew and Ingo pointed out that we don't have any safety checks
    in the clocksource sysfs entries to make sure sysadmins don't try to
    change the clocksource to a non high-res timer capable clocksource (such
    as jiffies) when high-res timers (HRT) is enabled.  Doing so will likely
    hang a system.
    
    Correct this by filtering non HRT clocksources from available_clocksources
    and not accepting non HRT clocksources with HRT enabled.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 8a3269fc21cc4405d80b362139c078cf655a505a
Author: Stefan Agner <stefan@agner.ch>
Date:   Tue May 12 10:30:41 2009 -0700

    [ARM] orion: sched_clock implementation for orion platforms
    
    sched_clock implementation for orion platform. Its realized using
    free-running clocksource timer, which provides a resolution of 7.5ns
    (depending on tclk). It's derived from PXA's sched_clock implementation.
    
    [ nico: renamed orion2ns to tclk2ns, fixed max value in the comment ]
    
    Signed-off-by: Stefan Agner <stefan.agner@yahoo.com>
    Signed-off-by: Nicolas Pitre <nico@marvell.com>

commit 3abd5acfff0111809463bcfd7236a1bdf09e4e2d
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Wed Apr 15 12:41:54 2009 -0700

    davinci: Add compare register support to timer code
    
    The Timer64p timer has 8 compare registers that can
    be used to generate interrupts when the timer value
    matches the compare reg's value.  They do not disturb
    the timer itself.  This can be useful when there is
    only one timer available for both clock events and
    clocksource.
    
    When enabled, the clocksource remains a continuous
    32-bit counter but the clock event will no longer
    support periodic interrupts.  Instead only oneshot
    timers will be supported and implemented by setting
    the compare register to the current timer value plus
    the period that the clock event subsystem is requesting.
    
    Compare registers support is enabled automatically
    when the following conditions are met:
    1) The same timer is being used for clock events
       and clocksource.
    2) The timer is the bottom half (32 bits) of the
       64-bit timer (hardware limitation).
    3) The the compare register offset and irq are
       not zero.
    
    Since the timer is always running, there is a hardware
    race in timer32_config() between reading the current
    timer value, and adding the period to the current
    timer value and writing the compare register.
    Testing on a da830 evm board with the timer clocked
    at 24 MHz and the processor clocked at 300 MHz,
    showed the number of counter ticks to do this ranged
    from 20-53 (~1-2.2 usecs) but usually around 41 ticks.
    This includes some artifacts from collecting the
    information.  So, the minimum period should be
    at least 5 usecs to be safe.
    
    There is also an non-critical lower limit that
    the period should be since there is no point in
    setting an event that is much shorter than the
    time it takes to set the event, and get & handle
    the timer interrupt for that event.  There can
    also be all sorts of delays from activities
    occuring elsewhere in the system (including
    hardware activitis like cache & TLB management).
    These are virtually impossible to quantify so a
    minimum period of 50 usecs was chosen.  That will
    certianly be enough to avoid the actual hardware
    race but hopefully not large enough to cause
    unreasonably course-grained timers.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

commit f64691b3ab795268072e76ddb89290b6277cdf33
Author: Mark A. Greer <mgreer@mvista.com>
Date:   Wed Apr 15 12:40:11 2009 -0700

    davinci: Add base address and timer flexibility
    
    The davinci timer code currently hardcodes the timer register
    base addresses, the timer irq numbers, and the timers to use
    for clock events and clocksource.  This won't work for some
    a new SoC so put those values into the soc_info structure
    and set them up in the SoC-specific files.
    
    Signed-off-by: Mark A. Greer <mgreer@mvista.com>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

commit f5c81a327015844eb91087dd102648b5d984f33c
Author: Coly Li <coly.li@suse.de>
Date:   Thu Apr 23 03:04:45 2009 +0800

    [ARM] pxa: add parameter to clksrc_read() for pxa168/910
    
    This patch modifies parameter of clksrc_read() from 'void' to
    'struct clocksource *cs', which fixes compile warning for
    incompatible parameter type.
    
    Signed-off-by: Coly Li <coly.li@suse.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Eric Miao <eric.miao@marvell.com>

commit a0bf284bfedd6dc95bbee7ebf5ccf3b5f753a008
Author: Len Brown <len.brown@intel.com>
Date:   Fri May 15 01:29:31 2009 -0400

    ACPI: Idle C-states disabled by max_cstate should not disable the TSC
    
    Processor idle power states C2 and C3 stop the TSC on many machines.
    Linux recognizes this situation and marks the TSC as unstable:
    
    Marking TSC unstable due to TSC halts in idle
    
    But if those same machines are booted with "processor.max_cstate=1",
    then there is no need to validate C2 and C3, and no need to
    disable the TSC, which can be reliably used as a clocksource.
    
    Signed-off-by: Len Brown <len.brown@intel.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>

commit c48f2295a96d12c1c57d4655890af9984d3c061c
Merge: 5732c468495e 5d81b83d03eb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 14 19:19:43 2009 -0700

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus: (38 commits)
      MIPS: Sibyte: Fix locking in set_irq_affinity
      MIPS: Use force_sig when handling address errors.
      MIPS: Cavium: Add struct clocksource * argument to octeon_cvmcount_read()
      MIPS: Rewrite <asm/div64.h> to work with gcc 4.4.0.
      MIPS: Fix highmem.
      MIPS: Fix sign-extension bug in 32-bit kernel on 32-bit hardware.
      MIPS: MSP71xx: Remove the RAMROOT functions
      MIPS: Use -mno-check-zero-division
      MIPS: Set compiler options only after the compiler prefix has ben set.
      MIPS: IP27: Get rid of #ident.  Gcc 4.4.0 doesn't like it.
      MIPS: uaccess: Switch lock annotations to might_fault().
      MIPS: MSP71xx: Resolve use of non-existent GPIO routines in msp71xx reset
      MIPS: MSP71xx: Resolve multiple definition of plat_timer_setup
      MIPS: Make uaccess.h slightly more sparse friendly.
      MIPS: Make access_ok() sideeffect proof.
      MIPS: IP27: Fix clash with NMI_OFFSET from hardirq.h
      MIPS: Alchemy: Timer build fix
      MIPS: Kconfig: Delete duplicate definition of RWSEM_GENERIC_SPINLOCK.
      MIPS: Cavium: Add support for 8k and 32k page sizes.
      MIPS: TXx9: Fix possible overflow in clock calculations
      ...

commit d0ce9a5a47113eec041a0972a0b86134b8fd2828
Author: Coly Li <coly.li@suse.de>
Date:   Thu Apr 23 03:06:06 2009 +0800

    MIPS: Cavium: Add struct clocksource * argument to octeon_cvmcount_read()
    
    This patch modifies parameter of octeon_cvmcount_read() from 'void' to
    'struct clocksource *cs', which fixes compile warning for incompatible
    parameter type.
    
    Signed-off-by: Coly Li <coly.li@suse.de>
    Cc: David Daney <ddaney@caviumnetworks.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Reviewed-by: David Daney <ddaney@caviumnetworks.com>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 2b23a8826a60268ec52302729911dd7ac6b10776
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 10:21:11 2009 +0000

    sh: CMT platform data for sh7720/sh7721
    
    This patch adds CMT platform data for sh7720 and sh7721.
    All 5 32-bit CMT channels unfortunately share a single IRQ.
    Both clockevent and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 4a1a5a2f60ceabc026ba28cdbf81d7d47603b480
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 10:17:52 2009 +0000

    sh: TMU platform data for sh7720/sh7721
    
    This patch adds TMU platform data for sh7720 and sh7721.
    Both clockevent and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit e5ad00896a381937326ac55fc173630fe731d041
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 10:15:30 2009 +0000

    sh: TMU platform data for sh7710/sh7712
    
    This patch adds TMU platform data for sh7710 and sh7712.
    Both clockevent and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit c8a9011bce6c43f4988cbcf1db8fc31433e69964
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 10:04:49 2009 +0000

    sh: TMU platform data for sh7706/sh7707/sh7708/sh7709
    
    Add TMU platform data for sh7706/sh7707/sh7708/sh7709.
    Both clockevent and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit acd664ab54a449a7257dcb3c7ef9cd1e310b4c4f
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 10:01:01 2009 +0000

    sh: TMU platform data for sh7705
    
    This patch adds TMU platform data for sh7705. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 6a3501b63d30643120566cc1efba5acd0e64b12d
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 09:50:46 2009 +0000

    sh: TMU platform data for sh7724
    
    This patch adds TMU platform data for sh7724. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit f2710ebcd0a0404ccca3bbad68fd3639fe87ba6f
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 09:48:21 2009 +0000

    sh: TMU platform data for sh7366
    
    This patch adds TMU platform data for sh7366. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit e37677a429a67cb45004b060ea3376e500bc73c4
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 09:39:06 2009 +0000

    sh: TMU platform data for sh7343
    
    This patch adds TMU platform data for sh7343. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 5f8a29ba39d52b2eaaed907b3cb3016b949a8f9b
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 09:28:25 2009 +0000

    sh: TMU platform data for sh4-202
    
    This patch adds TMU platform data for sh4-202. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit f251935e02e89aa203e0729bfd727175018cec6f
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 09:20:08 2009 +0000

    sh: TMU platform data for sh7770
    
    This patch adds TMU platform data for sh7770. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 0ee8b4d7c7d39d9a9913e27686ef786642c3ccbb
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue May 12 09:13:59 2009 +0000

    sh: TMU platform data for sh7763
    
    This patch adds TMU platform data for sh7763. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit ccc195655fb25d7d967b278c4a4725dc5e7a6bf4
Author: Magnus Damm <damm@igel.co.jp>
Date:   Mon May 11 11:37:16 2009 +0000

    sh: TMU platform data for sh7780
    
    This patch adds TMU platform data for sh7780. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit c42f32dca3855d8f867387ec6993d9b62516a00e
Author: Magnus Damm <damm@igel.co.jp>
Date:   Mon May 11 09:06:24 2009 +0000

    sh: TMU platform data for sh7760
    
    This patch adds TMU platform data for sh7760. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 03f408f1aad8d0f5eb6380732bffc0f72b250fa7
Author: Magnus Damm <damm@igel.co.jp>
Date:   Mon May 11 08:54:54 2009 +0000

    sh: TMU platform data for sh775x
    
    This patch adds TMU platform data for sh775x. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 780f98ff1fa9cfcab177f6b5ab09b11321f1e5c8
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Mon May 11 12:15:14 2009 +0900

    sh: Account for INITIAL_JIFFIES when using jiffies clocksource.
    
    In the case where we fall back on the generic jiffies clocksource,
    INITIAL_JIFFIES needs to be accounted for so that printk times aren't
    completely skewed.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 1fff7d359d6cc49bb9a276134bd7d90366f74110
Author: John Stultz <johnstul@us.ibm.com>
Date:   Fri May 1 13:10:25 2009 -0700

    clockevents: prevent endless loop in tick_handle_periodic()
    
    commit 74a03b69d1b5ce00a568e142ca97e76b7f5239c6 upstream.
    
    tick_handle_periodic() can lock up hard when a one shot clock event
    device is used in combination with jiffies clocksource.
    
    Avoid an endless loop issue by requiring that a highres valid
    clocksource be installed before we call tick_periodic() in a loop when
    using ONESHOT mode. The result is we will only increment jiffies once
    per interrupt until a continuous hardware clocksource is available.
    
    Without this, we can run into a endless loop, where each cycle through
    the loop, jiffies is updated which increments time by tick_period or
    more (due to clock steering), which can cause the event programming to
    think the next event was before the newly incremented time and fail
    causing tick_periodic() to be called again and the whole process loops
    forever.
    
    [ Impact: prevent hard lock up ]
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 2ee201a9d57df7a12e228c6a9b06a15014231b72
Author: John Stultz <johnstul@us.ibm.com>
Date:   Fri May 1 13:10:25 2009 -0700

    clockevents: prevent endless loop in tick_handle_periodic()
    
    commit 74a03b69d1b5ce00a568e142ca97e76b7f5239c6 upstream.
    
    tick_handle_periodic() can lock up hard when a one shot clock event
    device is used in combination with jiffies clocksource.
    
    Avoid an endless loop issue by requiring that a highres valid
    clocksource be installed before we call tick_periodic() in a loop when
    using ONESHOT mode. The result is we will only increment jiffies once
    per interrupt until a continuous hardware clocksource is available.
    
    Without this, we can run into a endless loop, where each cycle through
    the loop, jiffies is updated which increments time by tick_period or
    more (due to clock steering), which can cause the event programming to
    think the next event was before the newly incremented time and fail
    causing tick_periodic() to be called again and the whole process loops
    forever.
    
    [ Impact: prevent hard lock up ]
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit c3d480ded1584dc17f6e82f49af4155380a51dda
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Fri May 8 21:57:04 2009 +0900

    sh: TMU platform data for SH7786.
    
    Wires up all 12 TMU channels, with TMU0 and 1 used as clockevent and
    clocksource respectively.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 47dd6f4439811c6c83d9abf2f364bcb6d2684640
Author: Magnus Damm <damm@igel.co.jp>
Date:   Fri May 8 08:32:18 2009 +0000

    sh: TMU platform data for sh7723
    
    This patch adds TMU platform data for sh7723. Both clockevent
    and clocksource support is enabled. While at it, adjust the
    CMT clocksource rating to prioritize the TMU.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 583d1d549ff107500481461cec0325189c5349ec
Author: Magnus Damm <damm@igel.co.jp>
Date:   Fri May 8 08:27:19 2009 +0000

    sh: enable TMU clocksource on sh7722
    
    This patch enables the TMU clocksource on sh7722.
    To prioritize TMU over CMT we also adjust the CMT
    clock source rating.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit e367592cc93ac653e7bc0bebbc9bb713a77e2696
Author: Magnus Damm <damm@igel.co.jp>
Date:   Thu May 7 10:55:37 2009 +0000

    sh: TMU platform data for sh7785
    
    This patch adds TMU platform data for sh7785. Both clockevent
    and clocksource support is enabled.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit d1fcc0a8db5e47c1abaa783a3e83dbf5f2184969
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Sun May 3 18:05:42 2009 +0900

    clocksource: sh_mtu2/cmt_register() should be static.
    
    Neither of these need to be exported, so just make them static.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit d43a41bf8b504a1d9f0b4ce7e17d803f4ef39d84
Author: Magnus Damm <damm@igel.co.jp>
Date:   Fri May 1 06:58:52 2009 +0000

    sh: TMU platform data for sh7722
    
    This patch adds TMU platform data for sh7722. Only clockevent
    mode is enabled for now, clocksource requires this patch:
    "clocksource: setup mult_orig in clocksource_enable()"
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 9570ef20423b549757aa484ad388f9a7d5bdc4d9
Author: Magnus Damm <damm@igel.co.jp>
Date:   Fri May 1 06:51:00 2009 +0000

    clocksource: SuperH TMU Timer driver
    
    This patch adds a TMU driver for the SuperH architecture.
    
    The TMU driver is a platform driver with early platform
    support to allow using a TMU channel as clockevent or
    clocksource during system bootup or later.
    
    Clocksource or clockevent can be selected.
    Both periodic and oneshot clockevents are supported.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit d5ed4c2e5ce9f5f6fd6a5a39ee1196a1f8a46eed
Author: Magnus Damm <damm@igel.co.jp>
Date:   Thu Apr 30 07:02:49 2009 +0000

    clocksource: SuperH MTU2 Timer driver
    
    This patch adds a MTU2 driver for the SuperH architecture.
    
    The MTU2 driver is a platform driver with early platform
    support to allow using a MTU2 channel as only clockevent
    during system bootup.
    
    Clocksource on sh2a is currently unsupported due to code
    generation issues with 64-bit math, so at this point only
    periodic clockevent support is in place.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 66fdc951720406deb3b0f17094cb16ec623f525d
Merge: f425752fc66a 7d27558c4138
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Sun May 3 17:24:55 2009 +0900

    Merge branch 'timers/clocksource' of git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-tip

commit cf9796ba9125e991f27b20dd984a23d52857bcbd
Author: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
Date:   Wed Mar 18 17:06:21 2009 +0530

    kprobes: Fix locking imbalance in kretprobes
    
    commit f02b8624fedca39886b0eef770dca70c2f0749b3 upstream.
    
    Fix locking imbalance in kretprobes:
    
    =====================================
    [ BUG: bad unlock balance detected! ]
    -------------------------------------
    kthreadd/2 is trying to release lock (&rp->lock) at:
    [<c06b3080>] pre_handler_kretprobe+0xea/0xf4
    but there are no more locks to release!
    
    other info that might help us debug this:
    1 lock held by kthreadd/2:
     #0:  (rcu_read_lock){..--}, at: [<c06b2b24>] __atomic_notifier_call_chain+0x0/0x5a
    
    stack backtrace:
    Pid: 2, comm: kthreadd Not tainted 2.6.29-rc8 #1
    Call Trace:
     [<c06ae498>] ? printk+0xf/0x17
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044ce6c>] print_unlock_inbalance_bug+0xc3/0xce
     [<c0444d4b>] ? clocksource_read+0x7/0xa
     [<c04450a4>] ? getnstimeofday+0x5f/0xf6
     [<c044a9ca>] ? register_lock_class+0x17/0x293
     [<c044b72c>] ? mark_lock+0x1e/0x30b
     [<c0448956>] ? tick_dev_program_event+0x4a/0xbc
     [<c0498100>] ? __slab_alloc+0xa5/0x415
     [<c06b2fbe>] ? pre_handler_kretprobe+0x28/0xf4
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044cf1b>] lock_release_non_nested+0xa4/0x1a5
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044d15d>] lock_release+0x141/0x166
     [<c06b07dd>] _spin_unlock_irqrestore+0x19/0x50
     [<c06b3080>] pre_handler_kretprobe+0xea/0xf4
     [<c06b20b5>] kprobe_exceptions_notify+0x1c9/0x43e
     [<c06b2b02>] notifier_call_chain+0x26/0x48
     [<c06b2b5b>] __atomic_notifier_call_chain+0x37/0x5a
     [<c06b2b24>] ? __atomic_notifier_call_chain+0x0/0x5a
     [<c06b2b8a>] atomic_notifier_call_chain+0xc/0xe
     [<c0442d0d>] notify_die+0x2d/0x2f
     [<c06b0f9c>] do_int3+0x1f/0x71
     [<c06b0e84>] int3+0x2c/0x34
     [<c042d476>] ? do_fork+0x1/0x288
     [<c040221b>] ? kernel_thread+0x71/0x79
     [<c043ed1b>] ? kthread+0x0/0x60
     [<c043ed1b>] ? kthread+0x0/0x60
     [<c04040b8>] ? kernel_thread_helper+0x0/0x10
     [<c043ec7f>] kthreadd+0xac/0x148
     [<c043ebd3>] ? kthreadd+0x0/0x148
     [<c04040bf>] kernel_thread_helper+0x7/0x10
    
    Signed-off-by: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
    Tested-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Cc: Masami Hiramatsu <mhiramat@redhat.com>
    Cc: Jim Keniston <jkenisto@us.ibm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    LKML-Reference: <20090318113621.GB4129@in.ibm.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit e2627e220fe64f2a7e501b512719e7b7be73466b
Author: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
Date:   Wed Mar 18 17:06:21 2009 +0530

    kprobes: Fix locking imbalance in kretprobes
    
    commit f02b8624fedca39886b0eef770dca70c2f0749b3 upstream.
    
    Fix locking imbalance in kretprobes:
    
    =====================================
    [ BUG: bad unlock balance detected! ]
    -------------------------------------
    kthreadd/2 is trying to release lock (&rp->lock) at:
    [<c06b3080>] pre_handler_kretprobe+0xea/0xf4
    but there are no more locks to release!
    
    other info that might help us debug this:
    1 lock held by kthreadd/2:
     #0:  (rcu_read_lock){..--}, at: [<c06b2b24>] __atomic_notifier_call_chain+0x0/0x5a
    
    stack backtrace:
    Pid: 2, comm: kthreadd Not tainted 2.6.29-rc8 #1
    Call Trace:
     [<c06ae498>] ? printk+0xf/0x17
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044ce6c>] print_unlock_inbalance_bug+0xc3/0xce
     [<c0444d4b>] ? clocksource_read+0x7/0xa
     [<c04450a4>] ? getnstimeofday+0x5f/0xf6
     [<c044a9ca>] ? register_lock_class+0x17/0x293
     [<c044b72c>] ? mark_lock+0x1e/0x30b
     [<c0448956>] ? tick_dev_program_event+0x4a/0xbc
     [<c0498100>] ? __slab_alloc+0xa5/0x415
     [<c06b2fbe>] ? pre_handler_kretprobe+0x28/0xf4
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044cf1b>] lock_release_non_nested+0xa4/0x1a5
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044d15d>] lock_release+0x141/0x166
     [<c06b07dd>] _spin_unlock_irqrestore+0x19/0x50
     [<c06b3080>] pre_handler_kretprobe+0xea/0xf4
     [<c06b20b5>] kprobe_exceptions_notify+0x1c9/0x43e
     [<c06b2b02>] notifier_call_chain+0x26/0x48
     [<c06b2b5b>] __atomic_notifier_call_chain+0x37/0x5a
     [<c06b2b24>] ? __atomic_notifier_call_chain+0x0/0x5a
     [<c06b2b8a>] atomic_notifier_call_chain+0xc/0xe
     [<c0442d0d>] notify_die+0x2d/0x2f
     [<c06b0f9c>] do_int3+0x1f/0x71
     [<c06b0e84>] int3+0x2c/0x34
     [<c042d476>] ? do_fork+0x1/0x288
     [<c040221b>] ? kernel_thread+0x71/0x79
     [<c043ed1b>] ? kthread+0x0/0x60
     [<c043ed1b>] ? kthread+0x0/0x60
     [<c04040b8>] ? kernel_thread_helper+0x0/0x10
     [<c043ec7f>] kthreadd+0xac/0x148
     [<c043ebd3>] ? kthreadd+0x0/0x148
     [<c04040bf>] kernel_thread_helper+0x7/0x10
    
    Signed-off-by: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
    Tested-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Cc: Masami Hiramatsu <mhiramat@redhat.com>
    Cc: Jim Keniston <jkenisto@us.ibm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    LKML-Reference: <20090318113621.GB4129@in.ibm.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit c81fc2c331b8514ad112054cd2d87e6ec132286b
Author: Magnus Damm <magnus.damm@gmail.com>
Date:   Fri May 1 14:52:47 2009 +0900

    clockevent: export register_device and delta2ns
    
    Export the following symbols using EXPORT_SYMBOL_GPL:
     - clockevent_delta2ns
     - clockevents_register_device
    
    This allows us to build SuperH clockevent and clocksource
    drivers as modules, see drivers/clocksource/sh_*.c
    
    [ Impact: allow modular build of clockevent drivers ]
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    LKML-Reference: <20090501055247.8286.64067.sendpatchset@rx1.opensource.se>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 7d27558c4138ac6b3684dea35c2f4379b940a7dd
Author: John Stultz <johnstul@us.ibm.com>
Date:   Fri May 1 13:10:26 2009 -0700

    timekeeping: create arch_gettimeoffset infrastructure
    
    Some arches don't supply their own clocksource. This is mainly the
    case in architectures that get their inter-tick times by reading the
    counter on their interval timer.  Since these timers wrap every tick,
    they're not really useful as clocksources.  Wrapping them to act like
    one is possible but not very efficient. So we provide a callout these
    arches can implement for use with the jiffies clocksource to provide
    finer then tick granular time.
    
    [ Impact: ease the migration to generic time keeping ]
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit a25cbd045a2ffc42787d4dbcbb9c7118f5f42732
Author: Magnus Damm <magnus.damm@gmail.com>
Date:   Fri May 1 14:45:46 2009 +0900

    clocksource: setup mult_orig in clocksource_enable()
    
    Setup clocksource mult_orig in clocksource_enable().
    
    Clocksource drivers can save power by using keeping the
    device clock disabled while the clocksource is unused.
    
    In practice this means that the enable() and disable()
    callbacks perform clk_enable() and clk_disable().
    
    The enable() callback may also use clk_get_rate() to get
    the clock rate from the clock framework. This information
    can then be used to calculate the shift and mult variables.
    
    Currently the mult_orig variable is setup from mult at
    registration time only. This is conflicting with the above
    case since the clock is disabled and the mult variable is
    not yet calculated at the time of registration.
    
    Moving the mult_orig setup code to clocksource_enable()
    allows us to both handle the common case with no enable()
    callback and the mult-changed-after-enable() case.
    
    [ Impact: allow dynamic clock source usage ]
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    LKML-Reference: <20090501054546.8193.10688.sendpatchset@rx1.opensource.se>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 74a03b69d1b5ce00a568e142ca97e76b7f5239c6
Author: John Stultz <johnstul@us.ibm.com>
Date:   Fri May 1 13:10:25 2009 -0700

    clockevents: prevent endless loop in tick_handle_periodic()
    
    tick_handle_periodic() can lock up hard when a one shot clock event
    device is used in combination with jiffies clocksource.
    
    Avoid an endless loop issue by requiring that a highres valid
    clocksource be installed before we call tick_periodic() in a loop when
    using ONESHOT mode. The result is we will only increment jiffies once
    per interrupt until a continuous hardware clocksource is available.
    
    Without this, we can run into a endless loop, where each cycle through
    the loop, jiffies is updated which increments time by tick_period or
    more (due to clock steering), which can cause the event programming to
    think the next event was before the newly incremented time and fail
    causing tick_periodic() to be called again and the whole process loops
    forever.
    
    [ Impact: prevent hard lock up ]
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@kernel.org

commit 3014f47460ecfb13d4169daae51f26a20bacfa17
Author: Magnus Damm <damm@igel.co.jp>
Date:   Wed Apr 29 14:50:37 2009 +0000

    clocksource: sh_cmt 16-bit fixes
    
    This patch contains various fixes for 16-bit cmt hardware.
    With this applied periodic clockevents work fine on sh7203.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit bb3cee2b35d2b9edab71997bd06040ff37483e08
Author: Linus Walleij <linus.walleij@stericsson.com>
Date:   Thu Apr 23 10:22:13 2009 +0100

    [ARM] 5473/1: U300 core machine support
    
    This adds core support for the ST-Ericsson U300 series
    platforms: U300, U330, U335 and U365. Supports memory
    mappings, interrupt controller, system timer (clocksource
    and clockevents), and binds to the existing drivers for
    the PrimeCells used in this design: PL190 (VIC), PL180
    (MMC/SD host) and PL011 (UART). This is intented to serve
    as starting point for our mainling work, more patches to
    follow.
    
    Signed-off-by: Linus Walleij <linus.walleij@stericsson.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 5b644c7a218702668d7b610994e7dcbc3d4705d3
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue Apr 28 08:17:54 2009 +0000

    clocksource: improve sh_cmt clocksource overflow handling
    
    This patch improves the sh_cmt clocksource handling.
    
    Currently the counter value is ignored in the case of
    overflow. With this patch the overflow flag is read
    before and after reading the counter, removing any
    counter value and overflow flag mismatch issues.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 3b3e59f78d3bf0e0818a9b759484138d4300a72e
Author: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
Date:   Sun Apr 5 18:20:22 2009 +0000

    kprobes: Fix locking imbalance in kretprobes
    
    upstream commit: f02b8624fedca39886b0eef770dca70c2f0749b3
    
    Fix locking imbalance in kretprobes:
    
    =====================================
    [ BUG: bad unlock balance detected! ]
    -------------------------------------
    kthreadd/2 is trying to release lock (&rp->lock) at:
    [<c06b3080>] pre_handler_kretprobe+0xea/0xf4
    but there are no more locks to release!
    
    other info that might help us debug this:
    1 lock held by kthreadd/2:
     #0:  (rcu_read_lock){..--}, at: [<c06b2b24>] __atomic_notifier_call_chain+0x0/0x5a
    
    stack backtrace:
    Pid: 2, comm: kthreadd Not tainted 2.6.29-rc8 #1
    Call Trace:
     [<c06ae498>] ? printk+0xf/0x17
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044ce6c>] print_unlock_inbalance_bug+0xc3/0xce
     [<c0444d4b>] ? clocksource_read+0x7/0xa
     [<c04450a4>] ? getnstimeofday+0x5f/0xf6
     [<c044a9ca>] ? register_lock_class+0x17/0x293
     [<c044b72c>] ? mark_lock+0x1e/0x30b
     [<c0448956>] ? tick_dev_program_event+0x4a/0xbc
     [<c0498100>] ? __slab_alloc+0xa5/0x415
     [<c06b2fbe>] ? pre_handler_kretprobe+0x28/0xf4
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044cf1b>] lock_release_non_nested+0xa4/0x1a5
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044d15d>] lock_release+0x141/0x166
     [<c06b07dd>] _spin_unlock_irqrestore+0x19/0x50
     [<c06b3080>] pre_handler_kretprobe+0xea/0xf4
     [<c06b20b5>] kprobe_exceptions_notify+0x1c9/0x43e
     [<c06b2b02>] notifier_call_chain+0x26/0x48
     [<c06b2b5b>] __atomic_notifier_call_chain+0x37/0x5a
     [<c06b2b24>] ? __atomic_notifier_call_chain+0x0/0x5a
     [<c06b2b8a>] atomic_notifier_call_chain+0xc/0xe
     [<c0442d0d>] notify_die+0x2d/0x2f
     [<c06b0f9c>] do_int3+0x1f/0x71
     [<c06b0e84>] int3+0x2c/0x34
     [<c042d476>] ? do_fork+0x1/0x288
     [<c040221b>] ? kernel_thread+0x71/0x79
     [<c043ed1b>] ? kthread+0x0/0x60
     [<c043ed1b>] ? kthread+0x0/0x60
     [<c04040b8>] ? kernel_thread_helper+0x0/0x10
     [<c043ec7f>] kthreadd+0xac/0x148
     [<c043ebd3>] ? kthreadd+0x0/0x148
     [<c04040bf>] kernel_thread_helper+0x7/0x10
    
    Signed-off-by: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
    Tested-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Cc: Masami Hiramatsu <mhiramat@redhat.com>
    Cc: Jim Keniston <jkenisto@us.ibm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: <stable@kernel.org> [2.6.29.x, 2.6.28.x, 2.6.27.x]
    LKML-Reference: <20090318113621.GB4129@in.ibm.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>

commit f461ddea0af8b98e2b7940eba9c693b0ee44d64a
Author: Len Brown <len.brown@intel.com>
Date:   Thu Apr 23 18:59:43 2009 -0400

    ACPI/hpet: prevent boot hang when hpet=force used on ICH-4M
    
    Linux tells ICH4 users that they can (manually) invoke
    "hpet=force" to enable the undocumented ICH-4M HPET.
    The HPET becomes available for both clocksource and clockevents.
    
    But as of ff69f2bba67bd45514923aaedbf40fe351787c59
    (acpi: fix of pmtimer overflow that make Cx states time incorrect)
    the HPET may be used via clocksource for idle accounting, and
    hpet=force on an ICH4 box hangs boot.
    
    It turns out that touching the MMIO HPET withing
    the ARB_DIS part of C3 will hang the hardware.
    
    The fix is to simply move the timer access outside
    the ARB_DIS region.  This is a no-op on modern hardware
    because ARB_DIS is no longer used.
    
    http://bugzilla.kernel.org/show_bug.cgi?id=13087
    
    Acked-by: Venkatesh Pallipadi <venkatesh.pallipadi@intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit f57f2fe2a39338c47b67fbd564a9d3b7587bcbee
Author: Coly Li <coly.li@suse.de>
Date:   Thu Apr 23 03:05:31 2009 +0800

    microblaze: add parameter to microblaze_read()
    
    This patch modifies parameter of microblaze_read() from 'void' to 'struct
    clocksource *cs', which fixes compile warning for incompatible parameter type.
    
    Signed-off-by: Coly Li <coly.li@suse.de>
    Cc: Michal Simek <monstr@monstr.eu>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Michal Simek <monstr@monstr.eu>

commit c5428e950ad42640f00092949fd17e356dfdeafa
Author: Coly Li <coly.li@suse.de>
Date:   Wed Apr 22 23:21:56 2009 +0800

    uv_time: add parameter to uv_read_rtc()
    
    uv_read_rtc() is referenced by read member of struct clocksource clocksource_uv.
    In include/linux/clocksource.h, read of struct clocksource is declared as:
    cycle_t (*read)(struct clocksource *cs)
    
    This got introduced recently in:
    
       8e19608: clocksource: pass clocksource to read() callback
    
    But arch/x86/kernel/uv_time.c was not properly converted by that pach.
    
    This patch adds a dummy parameter (struct clocksource type) to uv_read_rtc() to
    fix the incompatible reference in clocksource_uv, and add a NULL parameter in
    all places where uv_read_rtc() gets called.
    
    [ Impact: cleanup, address compiler warning ]
    
    Signed-off-by: Coly Li <coly.li@suse.de>
    Cc: Dimitri Sivanich <sivanich@sgi.com>
    Cc: Magnus Damm <damm@igel.co.jp>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Hugh Dickins <hugh@veritas.com>
    LKML-Reference: <49EF3614.1050806@suse.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: Dimitri Sivanich <sivanich@sgi.com>

commit 19bdc9d061bcb71efd2b53083d96b59bbe1a1751
Author: Magnus Damm <damm@igel.co.jp>
Date:   Fri Apr 17 05:26:31 2009 +0000

    clocksource: sh_cmt clocksource support
    
    Add clocksource support to the sh_cmt driver. With this in
    place we can do tickless with a single CMT channel.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 4614e6adafa2c5e6c3a9c245af2807fa7bc5117a
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue Apr 21 12:24:02 2009 -0700

    clocksource: add enable() and disable() callbacks
    
    Add enable() and disable() callbacks for clocksources.
    
    This allows us to put unused clocksources in power save mode.  The
    functions clocksource_enable() and clocksource_disable() wrap the
    callbacks and are inserted in the timekeeping code to enable before use
    and disable after switching to a new clocksource.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8e19608e8b5c001e4a66ce482edc474f05fb7355
Author: Magnus Damm <damm@igel.co.jp>
Date:   Tue Apr 21 12:24:00 2009 -0700

    clocksource: pass clocksource to read() callback
    
    Pass clocksource pointer to the read() callback for clocksources.  This
    allows us to share the callback between multiple instances.
    
    [hugh@veritas.com: fix powerpc build of clocksource pass clocksource mods]
    [akpm@linux-foundation.org: cleanup]
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Hugh Dickins <hugh@veritas.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e475eedb09ee9a0fd855f3e923aa9af31c17d141
Author: Magnus Damm <damm@igel.co.jp>
Date:   Wed Apr 15 10:50:04 2009 +0000

    clocksource: sh_cmt earlytimer support
    
    Add Early Platform Driver support to the sh_cmt driver
    using the earlytimer class.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 45e36c1666aa6c8b0c538abcf984b336184d8c3f
Merge: 87fc94d54b63 68b42d1b548b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Apr 5 11:15:54 2009 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/lethal/sh-2.6: (23 commits)
      sh: sh7785lcr: Map whole PCI address space.
      sh: Fix up DSP context save/restore.
      sh: Fix up number of on-chip DMA channels on SH7091.
      sh: update defconfigs.
      sh: Kill off broken direct-mapped cache mode.
      sh: Wire up ARCH_HAS_DEFAULT_IDLE for cpuidle.
      sh: Add a command line option for disabling I/O trapping.
      sh: Select ARCH_HIBERNATION_POSSIBLE.
      sh: migor: Fix up CEU use flags.
      input: migor_ts: add wakeup support
      rtc: rtc-sh: use set_irq_wake()
      input: sh_keysc: use enable/disable_irq_wake()
      sh: intc: set_irq_wake() support
      sh: intc: install enable, disable and shutdown callbacks
      clocksource: sh_cmt: use remove_irq() and remove clockevent workaround
      sh: ap325 and Migo-R use new sh_mobile_ceu_info flags
      sh: Fix up -Wformat-security whining.
      sh: ap325rxa: Add ov772x support, again.
      sh: Sanitize asm/mmu.h for assembly use.
      sh: Tidy up sh7786 pinmux table.
      ...

commit 4e76c5ccd5ac9bd003467d3bb0f49b18572dd4cd
Merge: b983471794e5 65127d28e312
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 3 15:15:25 2009 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/czankel/xtensa-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/czankel/xtensa-2.6: (21 commits)
      xtensa: we don't need to include asm/io.h
      xtensa: only build platform or variant if they contain a Makefile
      xtensa: make startup code discardable
      xtensa: ccount clocksource
      xtensa: remove platform rtc hooks
      xtensa: use generic sched_clock()
      xtensa: platform: s6105
      xtensa: let platform override KERNELOFFSET
      xtensa: s6000 variant
      xtensa: s6000 variant core definitions
      xtensa: variant irq set callbacks
      xtensa: variant-specific code
      xtensa: nommu support
      xtensa: add flat support
      xtensa: enforce slab alignment to maximum register width
      xtensa: cope with ram beginning at higher addresses
      xtensa: don't make bootmem bitmap larger than required
      xtensa: fix init_bootmem_node() argument order
      xtensa: use correct stack pointer for stack traces
      xtensa: beat Kconfig into shape
      ...

commit fcc8f0f81f249d61cd600bf2b9ca904bdaea0857
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Wed Mar 4 21:39:12 2009 +0100

    xtensa: ccount clocksource
    
    Switch to GENERIC_TIME by using the ccount register as a clock source.
    
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Chris Zankel <chris@zankel.net>

commit 3093e78ebab100ada1c724c9f751d9da39602a97
Author: Magnus Damm <damm@igel.co.jp>
Date:   Wed Apr 1 14:11:07 2009 +0000

    clocksource: sh_cmt: use remove_irq() and remove clockevent workaround
    
    Update the sh_cmt driver to make use of recent irq and clockevent changes:
     - use remove_irq() together with setup_irq()
     - remove mult workaround since WARN_ON() now has been moved
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit f02b8624fedca39886b0eef770dca70c2f0749b3
Author: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
Date:   Wed Mar 18 17:06:21 2009 +0530

    kprobes: Fix locking imbalance in kretprobes
    
    Fix locking imbalance in kretprobes:
    
    =====================================
    [ BUG: bad unlock balance detected! ]
    -------------------------------------
    kthreadd/2 is trying to release lock (&rp->lock) at:
    [<c06b3080>] pre_handler_kretprobe+0xea/0xf4
    but there are no more locks to release!
    
    other info that might help us debug this:
    1 lock held by kthreadd/2:
     #0:  (rcu_read_lock){..--}, at: [<c06b2b24>] __atomic_notifier_call_chain+0x0/0x5a
    
    stack backtrace:
    Pid: 2, comm: kthreadd Not tainted 2.6.29-rc8 #1
    Call Trace:
     [<c06ae498>] ? printk+0xf/0x17
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044ce6c>] print_unlock_inbalance_bug+0xc3/0xce
     [<c0444d4b>] ? clocksource_read+0x7/0xa
     [<c04450a4>] ? getnstimeofday+0x5f/0xf6
     [<c044a9ca>] ? register_lock_class+0x17/0x293
     [<c044b72c>] ? mark_lock+0x1e/0x30b
     [<c0448956>] ? tick_dev_program_event+0x4a/0xbc
     [<c0498100>] ? __slab_alloc+0xa5/0x415
     [<c06b2fbe>] ? pre_handler_kretprobe+0x28/0xf4
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044cf1b>] lock_release_non_nested+0xa4/0x1a5
     [<c06b3080>] ? pre_handler_kretprobe+0xea/0xf4
     [<c044d15d>] lock_release+0x141/0x166
     [<c06b07dd>] _spin_unlock_irqrestore+0x19/0x50
     [<c06b3080>] pre_handler_kretprobe+0xea/0xf4
     [<c06b20b5>] kprobe_exceptions_notify+0x1c9/0x43e
     [<c06b2b02>] notifier_call_chain+0x26/0x48
     [<c06b2b5b>] __atomic_notifier_call_chain+0x37/0x5a
     [<c06b2b24>] ? __atomic_notifier_call_chain+0x0/0x5a
     [<c06b2b8a>] atomic_notifier_call_chain+0xc/0xe
     [<c0442d0d>] notify_die+0x2d/0x2f
     [<c06b0f9c>] do_int3+0x1f/0x71
     [<c06b0e84>] int3+0x2c/0x34
     [<c042d476>] ? do_fork+0x1/0x288
     [<c040221b>] ? kernel_thread+0x71/0x79
     [<c043ed1b>] ? kthread+0x0/0x60
     [<c043ed1b>] ? kthread+0x0/0x60
     [<c04040b8>] ? kernel_thread_helper+0x0/0x10
     [<c043ec7f>] kthreadd+0xac/0x148
     [<c043ebd3>] ? kthreadd+0x0/0x148
     [<c04040bf>] kernel_thread_helper+0x7/0x10
    
    Signed-off-by: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
    Tested-by: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Cc: Masami Hiramatsu <mhiramat@redhat.com>
    Cc: Jim Keniston <jkenisto@us.ibm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: <stable@kernel.org> [2.6.29.x, 2.6.28.x, 2.6.27.x]
    LKML-Reference: <20090318113621.GB4129@in.ibm.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 490362003457f8d387f6f6e73e3a7efbf56c3314
Author: Frederic Weisbecker <fweisbec@gmail.com>
Date:   Tue Mar 17 22:38:58 2009 +0100

    tracing/ftrace: stop {irqs, preempt}soff tracers when tracing is stopped
    
    Impact: fix a selftest warning
    
    In some cases, it's possible to see the following warning on irqsoff
    tracer selftest:
    
    [    4.640003] Testing tracer irqsoff: <4>------------[ cut here ]------------
    [    4.653562] WARNING: at kernel/trace/trace.c:458 update_max_tr_single+0x9a/0xc4()
    [    4.660000] Hardware name: System Product Name
    [    4.660000] Modules linked in:
    [    4.660000] Pid: 301, comm: kstop/1 Not tainted 2.6.29-rc8-tip #35837
    [    4.660000] Call Trace:
    [    4.660000]  [<4014b588>] warn_slowpath+0x79/0x8f
    [    4.660000]  [<402d6949>] ? put_dec+0x64/0x6b
    [    4.660000]  [<40162b56>] ? getnstimeofday+0x58/0xdd
    [    4.660000]  [<40162210>] ? clocksource_read+0x3/0xf
    [    4.660000]  [<4015eb44>] ? ktime_set+0x8/0x34
    [    4.660000]  [<4014101a>] ? balance_runtime+0x8/0x56
    [    4.660000]  [<405f6f11>] ? _spin_lock+0x3/0x10
    [    4.660000]  [<4011f643>] ? ftrace_call+0x5/0x8
    [    4.660000]  [<4015d0f1>] ? task_cputime_zero+0x3/0x27
    [    4.660000]  [<40190ee7>] ? cpupri_set+0x90/0xcb
    [    4.660000]  [<405f7208>] ? _spin_lock_irqsave+0x22/0x34
    [    4.660000]  [<40190f12>] ? cpupri_set+0xbb/0xcb
    [    4.660000]  [<405f7151>] ? _spin_unlock_irqrestore+0x23/0x35
    [    4.660000]  [<4018493f>] ? ring_buffer_reset_cpu+0x27/0x51
    [    4.660000]  [<405f7208>] ? _spin_lock_irqsave+0x22/0x34
    [    4.660000]  [<40184962>] ? ring_buffer_reset_cpu+0x4a/0x51
    [    4.660000]  [<405f7151>] ? _spin_unlock_irqrestore+0x23/0x35
    [    4.660000]  [<4018cc29>] ? trace_hardirqs_off+0x1a/0x1c
    [    4.660000]  [<405f7151>] ? _spin_unlock_irqrestore+0x23/0x35
    [    4.660000]  [<40184962>] ? ring_buffer_reset_cpu+0x4a/0x51
    [    4.660000]  [<401850f3>] ? cpumask_next+0x15/0x18
    [    4.660000]  [<4018a41f>] update_max_tr_single+0x9a/0xc4
    [    4.660000]  [<4014e5fe>] ? exit_notify+0x16/0xf2
    [    4.660000]  [<4018cd13>] check_critical_timing+0xcc/0x11e
    [    4.660000]  [<4014e5fe>] ? exit_notify+0x16/0xf2
    [    4.660000]  [<4014e5fe>] ? exit_notify+0x16/0xf2
    [    4.660000]  [<4018cdf1>] stop_critical_timing+0x8c/0x9f
    [    4.660000]  [<4014e5c4>] ? forget_original_parent+0xac/0xd0
    [    4.660000]  [<4018ce3a>] trace_hardirqs_on+0x1a/0x1c
    [    4.660000]  [<4014e5c4>] forget_original_parent+0xac/0xd0
    [    4.660000]  [<4014e5fe>] exit_notify+0x16/0xf2
    [    4.660000]  [<4014e8a5>] do_exit+0x1cb/0x225
    [    4.660000]  [<4015c72b>] ? kthread+0x0/0x69
    [    4.660000]  [<4011f61d>] kernel_thread_helper+0xd/0x10
    [    4.660000] ---[ end trace a7919e7f17c0a725 ]---
    [    4.660164] .. no entries found ..FAILED!
    
    During the selftest of irqsoff tracer, we do that:
    
            /* disable interrupts for a bit */
            local_irq_disable();
            udelay(100);
            local_irq_enable();
            /* stop the tracing. */
            tracing_stop();
            /* check both trace buffers */
            ret = trace_test_buffer(tr, NULL);
    
    If a callsite performs a new max delay with irqs off just after
    tracing_stop, update_max_tr_single() -> ring_buffer_swap_cpu()
    will be called with the buffers disabled by tracing_stop(), hence
    the warning, then ring_buffer_swap_cpu() return -EAGAIN and
    update_max_tr_single() complains.
    
    Fix it by also stopping the tracer before stopping the tracing globally.
    A similar situation can happen with preemptoff and preemptirqsoff tracers
    where we apply the same fix.
    
    Reported-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Acked-by: Steven Rostedt <rostedt@goodmis.org>
    LKML-Reference: <1237325938-5240-1-git-send-email-fweisbec@gmail.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 96fa432160ed7498b6c7b8b83eb89df9e265412e
Author: Alok N Kataria <akataria@vmware.com>
Date:   Wed Feb 18 12:33:55 2009 -0800

    x86, vmi: TSC going backwards check in vmi clocksource
    
    commit 48ffc70b675aa7798a52a2e92e20f6cce9140b3d upstream.
    
    Impact: fix time warps under vmware
    
    Similar to the check for TSC going backwards in the TSC clocksource,
    we also need this check for VMI clocksource.
    
    Signed-off-by: Alok N Kataria <akataria@vmware.com>
    Cc: Zachary Amsden <zach@vmware.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 66cc276065e87ae25cbf657a49930d12ed8a6810
Author: Alok N Kataria <akataria@vmware.com>
Date:   Wed Feb 18 12:33:55 2009 -0800

    x86, vmi: TSC going backwards check in vmi clocksource
    
    commit 48ffc70b675aa7798a52a2e92e20f6cce9140b3d upstream.
    
    Impact: fix time warps under vmware
    
    Similar to the check for TSC going backwards in the TSC clocksource,
    we also need this check for VMI clocksource.
    
    Signed-off-by: Alok N Kataria <akataria@vmware.com>
    Cc: Zachary Amsden <zach@vmware.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 5ab5ab34498f94d60884c4ccea890601e429042e
Author: Dimitri Sivanich <sivanich@sgi.com>
Date:   Wed Mar 4 12:59:18 2009 -0600

    x86: UV, SGI RTC: add UV RTC clocksource/clockevents
    
    This patch provides a high resolution clock/timer source using the
    SGI UV system-wide synchronized RTC clock/timer hardware.
    
    Signed-off-by: Dimitri Sivanich <sivanich@sgi.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: john stultz <johnstul@us.ibm.com>
    LKML-Reference: <20090304185918.GC24419@sgi.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 80ea3bac3a47bc73efa334d0dd57099d0ff14216
Author: Aaro Koskinen <Aaro.Koskinen@nokia.com>
Date:   Wed Mar 4 10:07:41 2009 -0800

    ARM: OMAP: sched_clock() corrected
    
    After my OMAP3 board has been running for a while, I'm seeing weird
    latency traces like this:
    
          sh-1574    0d.h2  153us : do_timer (tick_do_update_jiffies64)
          sh-1574    0d.h2  153us : update_wall_time (do_timer)
          sh-1574    0d.h2  153us!: omap_32k_read (update_wall_time)
          sh-1574    0d.h2 1883us : update_xtime_cache (update_wall_time)
          sh-1574    0d.h2 1883us : clocksource_get_next (update_wall_time)
          sh-1574    0d.h2 1883us+: _spin_lock_irqsave (clocksource_get_next)
    
    and after a while:
    
          sh-17818   0d.h3  153us : do_timer (tick_do_update_jiffies64)
          sh-17818   0d.h3  153us : update_wall_time (do_timer)
          sh-17818   0d.h3  153us!: omap_32k_read (update_wall_time)
          sh-17818   0d.h3 1915us : update_xtime_cache (update_wall_time)
          sh-17818   0d.h3 1915us+: clocksource_get_next (update_wall_time)
          sh-17818   0d.h3 1945us : _spin_lock_irqsave (clocksource_get_next)
    
    Turns out that sched_clock() is using cyc2ns(), which returns NTP
    adjusted time. The sched_clock() frequency should not be adjusted. The
    patch deletes omap_32k_ticks_to_nsecs() and rewrites sched_clock()
    to do the conversion using the constant multiplier.
    
    Signed-off-by: Aaro Koskinen <Aaro.Koskinen@nokia.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit be71cb5b526709b8e42c707dc9e8c5b034ac8d1c
Merge: b5482d475c6e 07a66d7c53a5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Feb 20 18:03:07 2009 -0800

    Merge branch 'x86-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'x86-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      x86: use the right protections for split-up pagetables
      x86, vmi: TSC going backwards check in vmi clocksource

commit fdb17aeb28aaad3eae5ef57e70cb287d34d1049d
Author: Alok Kataria <akataria@vmware.com>
Date:   Fri Feb 20 10:23:18 2009 -0800

    x86, vmi: TSC going backwards check in vmi clocksource, cleanup
    
    clean up vmi_read_cycles to use max()
    
    Reported-b: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Alok N Kataria <akataria@vmware.com>
    Cc: Zach Amsden <zach@vmware.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 48ffc70b675aa7798a52a2e92e20f6cce9140b3d
Author: Alok N Kataria <akataria@vmware.com>
Date:   Wed Feb 18 12:33:55 2009 -0800

    x86, vmi: TSC going backwards check in vmi clocksource
    
    Impact: fix time warps under vmware
    
    Similar to the check for TSC going backwards in the TSC clocksource,
    we also need this check for VMI clocksource.
    
    Signed-off-by: Alok N Kataria <akataria@vmware.com>
    Cc: Zachary Amsden <zach@vmware.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: stable@kernel.org

commit a038a353c3de4040d8445ec568acebdac144436f
Author: Patrick Ohly <patrick.ohly@intel.com>
Date:   Thu Feb 12 05:03:34 2009 +0000

    clocksource: allow usage independent of timekeeping.c
    
    So far struct clocksource acted as the interface between time/timekeeping.c
    and hardware. This patch generalizes the concept so that a similar
    interface can also be used in other contexts. For that it introduces
    new structures and related functions *without* touching the existing
    struct clocksource.
    
    The reasons for adding these new structures to clocksource.[ch] are
    * the APIs are clearly related
    * struct clocksource could be cleaned up to use the new structs
    * avoids proliferation of files with similar names (timesource.h?
      timecounter.h?)
    
    As outlined in the discussion with John Stultz, this patch adds
    * struct cyclecounter: stateless API to hardware which counts clock cycles
    * struct timecounter: stateful utility code built on a cyclecounter which
      provides a nanosecond counter
    * only the function to read the nanosecond counter; deltas are used internally
      and not exposed to users of timecounter
    
    The code does no locking of the shared state. It must be called at least
    as often as the cycle counter wraps around to detect these wrap arounds.
    Both is the responsibility of the timecounter user.
    
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Patrick Ohly <patrick.ohly@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c161e40f45d32b48f8facbee17720e708607002f
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Thu Jan 29 18:11:25 2009 +0900

    sh: Don't enable GENERIC_TIME for the CMT clockevent driver yet.
    
    GENERIC_TIME still depends on the clocksource bits being there, which is
    presently not supported. This allows the CMT clockevent driver to be used
    alongside alternate system timers that do not yet provide a clocksource
    of their own (MTU2 and so on in the case of SH-2A).
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 3fb1b6ad0679ad671bd496712b2a088550ee86b2
Author: Magnus Damm <damm@igel.co.jp>
Date:   Thu Jan 22 09:55:59 2009 +0000

    sh: CMT clockevent platform driver
    
    SuperH CMT clockevent driver.
    
    Both 16-bit and 32-bit CMT versions are supported, but only 32-bit
    is tested. This driver contains support for both clockevents and
    clocksources, but no unregistration is supported at this point.
    
    Works fine as clock source and/or event in periodic or oneshot mode.
    Tested on sh7722 and sh7723, but should work with any cpu/architecture.
    
    This version is lacking clocksource and early platform driver support
    for now - this to minimize the amount of dependencies.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 955c0778723501cc16fec40501cd54b7e72d3e74
Author: Magnus Damm <damm@igel.co.jp>
Date:   Thu Jan 22 09:55:31 2009 +0000

    sh: rework clocksource and sched_clock
    
    Rework and simplify the sched_clock and clocksource code. Instead
    of registering the clocksource in a shared file we move it into the
    tmu driver. Also, add code to handle sched_clock in the case of no
    clocksource.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 474f010c78f1d28555971937c1e61688823cb4d1
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Wed Aug 20 16:37:28 2008 -0700

    clocksource: introduce clocksource_forward_now()
    
    commit 9a055117d3d9cb562f83f8d4cd88772761f4cab0 upstream.
    
    To keep the raw monotonic patch simple first introduce
    clocksource_forward_now(), which takes care of the offset since the last
    update_wall_time() call and adds it to the clock, so there is no need
    anymore to deal with it explicitly at various places, which need to make
    significant changes to the clock.
    
    This is also gets rid of the timekeeping_suspend_nsecs, instead of
    waiting until resume, the value is accumulated during suspend. In the end
    there is only a single user of __get_nsec_offset() left, so I integrated
    it back to getnstimeofday().
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 9219a3b9889dbc7dae68e472f239672ff48860b0
Merge: 23ead7291269 cde15b5927fe
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 12 16:25:35 2009 -0800

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus: (37 commits)
      MIPS: Only write c0_framemask on CPUs which have this register.
      MIPS: Alchemy: new userspace suspend interface for development boards.
      MIPS: Alchemy: dbdma suspend/resume support.
      MIPS: Alchemy: Fix up PM code on Au1550/Au1200
      MIPS: Alchemy: move calc_clock function.
      MIPS: Alchemy: RTC counter clocksource / clockevent support.
      MIPS: make cp0 counter clocksource/event usable as fallback.
      MIPS: Alchemy: remove cpu_table.
      MIPS: Alchemy: remove get/set_au1x00_lcd_clock().
      MIPS: Print irq handler description
      MIPS: Alchemy: pb1200: update CPLD cascade irq handler.
      MIPS: Alchemy: update core interrupt code.
      MIPS: Alchemy: move commandline mangling out of common code
      MIPS: Alchemy: devboards: consolidate files
      MIPS: Alchemy: Move development board code to common subdirectory
      MIPS: Add Cavium OCTEON to arch/mips/Kconfig
      MIPS: Add defconfig for Cavium OCTEON.
      MIPS: Adjust the dma-common.c platform hooks.
      MIPS: Add Cavium OCTEON slot into proper tlb category.
      MIPS:  Compute branch returns for Cavium OCTEON specific branch instructions.
      ...

commit 0c694de12b54fa96b9555e07603f567906ce21c8
Author: Manuel Lauss <mano@roarinelk.homelinux.net>
Date:   Sun Dec 21 09:26:23 2008 +0100

    MIPS: Alchemy: RTC counter clocksource / clockevent support.
    
    Add support for the 32 kHz counter1 (RTC) as clocksource / clockevent
    device.  As a nice side effect, this also enables use of the 'wait'
    instruction for runtime idle power savings.
    
    If the counters aren't enabled/working properly, fall back on the
    cp0 counter clock code.
    
    Signed-off-by: Manuel Lauss <mano@roarinelk.homelinux.net>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 779e7d41ad004946603da139da99ba775f74cb1c
Author: Manuel Lauss <mano@roarinelk.homelinux.net>
Date:   Sun Dec 21 09:26:22 2008 +0100

    MIPS: make cp0 counter clocksource/event usable as fallback.
    
    The current mips clock build infrastructure lets a system only use
    either the MIPS cp0 counter or a SoC specific timer as a clocksource /
    clockevent device.
    
    This patch renames the core cp0 counter clocksource / clockevent functions
    from mips_* to r4k_* and updates the wrappers in asm-mips/time.h to
    call these renamed functions instead.
    
    Chips which can detect whether it is safe to use a chip-specific timer
    can now fall back on the cp0 counter if necessary and possible
    (e.g. Alchemy with a follow-on patch).
    
    Existing behaviour is not changed in any way.
    
    Signed-off-by: Manuel Lauss <mano@roarinelk.homelinux.net>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit bb758e9637e5ddcff84a97177415499ae1fed498
Merge: 5f34fe1cfc1b 32e8d18683ad
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 30 16:16:21 2008 -0800

    Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      hrtimers: fix warning in kernel/hrtimer.c
      x86: make sure we really have an hpet mapping before using it
      x86: enable HPET on Fujitsu u9200
      linux/timex.h: cleanup for userspace
      posix-timers: simplify de_thread()->exit_itimers() path
      posix-timers: check ->it_signal instead of ->it_pid to validate the timer
      posix-timers: use "struct pid*" instead of "struct task_struct*"
      nohz: suppress needless timer reprogramming
      clocksource, acpi_pm.c: put acpi_pm_read_slow() under CONFIG_PCI
      nohz: no softirq pending warnings for offline cpus
      hrtimer: removing all ur callback modes, fix
      hrtimer: removing all ur callback modes, fix hotplug
      hrtimer: removing all ur callback modes
      x86: correct link to HPET timer specification
      rtc-cmos: export second NVRAM bank
    
    Fixed up conflicts in sound/drivers/pcsp/pcsp.c and sound/core/hrtimer.c
    manually.

commit 32e8d18683adb322c994d1a0fe02d66380991f45
Merge: 4a6908a3a050 0a57b783018a 39c04b552403 b2e3c0adec91 001474491fab c29541b24fb2 8187926bdae9 a5a64498c194
Author: Ingo Molnar <mingo@elte.hu>
Date:   Thu Dec 25 18:02:25 2008 +0100

    Merge branches 'timers/clocksource', 'timers/hpet', 'timers/hrtimers', 'timers/nohz', 'timers/ntp', 'timers/posixtimers' and 'timers/rtc' into timers/core

commit 3d44cc3e01ee1b40317f79ed54324e25c4f848df
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Dec 20 21:27:34 2008 +0100

    Null pointer deref with hrtimer_try_to_cancel()
    
    Impact: Prevent kernel crash with posix timer clockid CLOCK_MONOTONIC_RAW
    
    commit 2d42244ae71d6c7b0884b5664cf2eda30fb2ae68 (clocksource:
    introduce CLOCK_MONOTONIC_RAW) introduced a new clockid, which is only
    available to read out the raw not NTP adjusted system time.
    
    The above commit did not prevent that a posix timer can be created
    with that clockid. The timer_create() syscall succeeds and initializes
    the timer to a non existing hrtimer base. When the timer is deleted
    either by timer_delete() or by the exit() cleanup the kernel crashes.
    
    Prevent the creation of timers for CLOCK_MONOTONIC_RAW by setting the
    posix clock function to no_timer_create which returns an error code.
    
    Reported-and-tested-by: Eric Sesterhenn <snakebyte@gmx.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 40fb17152c50a69dc304dd632131c2f41281ce44
Author: Venki Pallipadi <venkatesh.pallipadi@intel.com>
Date:   Mon Nov 17 16:11:37 2008 -0800

    x86: support always running TSC on Intel CPUs
    
    Impact: reward non-stop TSCs with good TSC-based clocksources, etc.
    
    Add support for CPUID_0x80000007_Bit8 on Intel CPUs as well. This bit means
    that the TSC is invariant with C/P/T states and always runs at constant
    frequency.
    
    With Intel CPUs, we have 3 classes
    * CPUs where TSC runs at constant rate and does not stop n C-states
    * CPUs where TSC runs at constant rate, but will stop in deep C-states
    * CPUs where TSC rate will vary based on P/T-states and TSC will stop in deep
      C-states.
    
    To cover these 3, one feature bit (CONSTANT_TSC) is not enough. So, add a
    second bit (NONSTOP_TSC). CONSTANT_TSC indicates that the TSC runs at
    constant frequency irrespective of P/T-states, and NONSTOP_TSC indicates
    that TSC does not stop in deep C-states.
    
    CPUID_0x8000000_Bit8 indicates both these feature bit can be set.
    We still have CONSTANT_TSC _set_ and NONSTOP_TSC _not_set_ on some older Intel
    CPUs, based on model checks. We can use TSC on such CPUs for time, as long as
    those CPUs do not support/enter deep C-states.
    
    Signed-off-by: Venkatesh Pallipadi <venkatesh.pallipadi@intel.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 0a57b783018a77ca16097198844438bdff4d012e
Author: Bjorn Helgaas <bjorn.helgaas@hp.com>
Date:   Mon Dec 1 14:18:12 2008 -0800

    clocksource, acpi_pm.c: put acpi_pm_read_slow() under CONFIG_PCI
    
    acpi_pm_read_slow() is only used when CONFIG_PCI=y, so move the definition
    inside the ifdef.
    
    Otherwise this causes a "defined but not used" warning when building with
    CONFIG_ACPI=y and CONFIG_PCI=n (that's not supported yet, but it could
    be).
    
    Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com>
    Cc: mingo@elte.hu
    Cc: johnstul@us.ibm.com
    Cc: akpm@linux-foundation.org
    Cc: bjorn.helgaas@hp.com
    Cc: lenb@kernel.org
    Cc: linux@dominikbrodowski.net
    Cc: tglx@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Dominik Brodowski <linux@dominikbrodowski.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Len Brown <lenb@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

commit 24e7857677fe3cb87f1dd7fa1418a73795e9f4c5
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Dec 9 21:57:22 2008 +0100

    netx: Use a cpp symbol for the clocksource timer number
    
    instead of hardcoding the same value each time.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Sascha Hauer <s.hauer@pengutronix.de>

commit 6c9bacb41c10ba84ff68f238e234d96f35fb64f7
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Dec 1 18:34:41 2008 -0800

    time: catch xtime_nsec underflows and fix them
    
    Impact: fix time warp bug
    
    Alex Shi, along with Yanmin Zhang have been noticing occasional time
    inconsistencies recently. Through their great diagnosis, they found that
    the xtime_nsec value used in update_wall_time was occasionally going
    negative. After looking through the code for awhile, I realized we have
    the possibility for an underflow when three conditions are met in
    update_wall_time():
    
      1) We have accumulated a second's worth of nanoseconds, so we
         incremented xtime.tv_sec and appropriately decrement xtime_nsec.
         (This doesn't cause xtime_nsec to go negative, but it can cause it
          to be small).
    
      2) The remaining offset value is large, but just slightly less then
         cycle_interval.
    
      3) clocksource_adjust() is speeding up the clock, causing a
         corrective amount (compensating for the increase in the multiplier
         being multiplied against the unaccumulated offset value) to be
         subtracted from xtime_nsec.
    
    This can cause xtime_nsec to underflow.
    
    Unfortunately, since we notify the NTP subsystem via second_overflow()
    whenever we accumulate a full second, and this effects the error
    accumulation that has already occured, we cannot simply revert the
    accumulated second from xtime nor move the second accumulation to after
    the clocksource_adjust call without a change in behavior.
    
    This leaves us with (at least) two options:
    
    1) Simply return from clocksource_adjust() without making a change if we
       notice the adjustment would cause xtime_nsec to go negative.
    
    This would work, but I'm concerned that if a large adjustment was needed
    (due to the error being large), it may be possible to get stuck with an
    ever increasing error that becomes too large to correct (since it may
    always force xtime_nsec negative). This may just be paranoia on my part.
    
    2) Catch xtime_nsec if it is negative, then add back the amount its
       negative to both xtime_nsec and the error.
    
    This second method is consistent with how we've handled earlier rounding
    issues, and also has the benefit that the error being added is always in
    the oposite direction also always equal or smaller then the correction
    being applied. So the risk of a corner case where things get out of
    control is lessened.
    
    This patch fixes bug 11970, as tested by Yanmin Zhang
    http://bugzilla.kernel.org/show_bug.cgi?id=11970
    
    Reported-by: alex.shi@intel.com
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Acked-by: "Zhang, Yanmin" <yanmin_zhang@linux.intel.com>
    Tested-by: "Zhang, Yanmin" <yanmin_zhang@linux.intel.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 4a6186696e7f15b3ea4dafcdb64ee0703e0e4487
Author: Dave Hansen <dave@linux.vnet.ibm.com>
Date:   Mon Nov 24 12:02:35 2008 +0000

    powerpc: Fix boot freeze on machine with empty memory node
    
    I got a bug report about a distro kernel not booting on a particular
    machine.  It would freeze during boot:
    
    > ...
    > Could not find start_pfn for node 1
    > [boot]0015 Setup Done
    > Built 2 zonelists in Node order, mobility grouping on.  Total pages: 123783
    > Policy zone: DMA
    > Kernel command line:
    > [boot]0020 XICS Init
    > [boot]0021 XICS Done
    > PID hash table entries: 4096 (order: 12, 32768 bytes)
    > clocksource: timebase mult[7d0000] shift[22] registered
    > Console: colour dummy device 80x25
    > console handover: boot [udbg0] -> real [hvc0]
    > Dentry cache hash table entries: 1048576 (order: 7, 8388608 bytes)
    > Inode-cache hash table entries: 524288 (order: 6, 4194304 bytes)
    > freeing bootmem node 0
    
    I've reproduced this on 2.6.27.7.  It is caused by commit
    8f64e1f2d1e09267ac926e15090fd505c1c0cbcb ("powerpc: Reserve in bootmem
    lmb reserved regions that cross NUMA nodes").
    
    The problem is that Jon took a loop which was (in pseudocode):
    
            for_each_node(nid)
                    NODE_DATA(nid) = careful_alloc(nid);
                    setup_bootmem(nid);
                    reserve_node_bootmem(nid);
    
    and broke it up into:
    
            for_each_node(nid)
                    NODE_DATA(nid) = careful_alloc(nid);
                    setup_bootmem(nid);
            for_each_node(nid)
                    reserve_node_bootmem(nid);
    
    The issue comes in when the 'careful_alloc()' is called on a node with
    no memory.  It falls back to using bootmem from a previously-initialized
    node.  But, bootmem has not yet been reserved when Jon's patch is
    applied.  It gives back bogus memory (0xc000000000000000) and pukes
    later in boot.
    
    The following patch collapses the loop back together.  It also breaks
    the mark_reserved_regions_for_nid() code out into a function and adds
    some comments.  I think a huge part of introducing this bug is because
    for loop was too long and hard to read.
    
    The actual bug fix here is the:
    
    +               if (end_pfn <= node->node_start_pfn ||
    +                   start_pfn >= node_end_pfn)
    +                       continue;
    
    Signed-off-by: Dave Hansen <dave@linux.vnet.ibm.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

commit 0231022cc32d5f2e7f3c06b75691dda0ad6aec33
Author: Frederic Weisbecker <fweisbec@gmail.com>
Date:   Mon Nov 17 03:22:41 2008 +0100

    tracing/function-return-tracer: add the overrun field
    
    Impact: help to find the better depth of trace
    
    We decided to arbitrary define the depth of function return trace as
    "20". Perhaps this is not enough. To help finding an optimal depth, we
    measure now the overrun: the number of functions that have been missed
    for the current thread. By default this is not displayed, we have to
    do set a particular flag on the return tracer: echo overrun >
    /debug/tracing/trace_options And the overrun will be printed on the
    right.
    
    As the trace shows below, the current 20 depth is not enough.
    
    update_wall_time+0x37f/0x8c0 -> update_xtime_cache (345 ns) (Overruns: 2838)
    update_wall_time+0x384/0x8c0 -> clocksource_get_next (1141 ns) (Overruns: 2838)
    do_timer+0x23/0x100 -> update_wall_time (3882 ns) (Overruns: 2838)
    tick_do_update_jiffies64+0xbf/0x160 -> do_timer (5339 ns) (Overruns: 2838)
    tick_sched_timer+0x6a/0xf0 -> tick_do_update_jiffies64 (7209 ns) (Overruns: 2838)
    vgacon_set_cursor_size+0x98/0x120 -> native_io_delay (2613 ns) (Overruns: 274)
    vgacon_cursor+0x16e/0x1d0 -> vgacon_set_cursor_size (33151 ns) (Overruns: 274)
    set_cursor+0x5f/0x80 -> vgacon_cursor (36432 ns) (Overruns: 274)
    con_flush_chars+0x34/0x40 -> set_cursor (38790 ns) (Overruns: 274)
    release_console_sem+0x1ec/0x230 -> up (721 ns) (Overruns: 274)
    release_console_sem+0x225/0x230 -> wake_up_klogd (316 ns) (Overruns: 274)
    con_flush_chars+0x39/0x40 -> release_console_sem (2996 ns) (Overruns: 274)
    con_write+0x22/0x30 -> con_flush_chars (46067 ns) (Overruns: 274)
    n_tty_write+0x1cc/0x360 -> con_write (292670 ns) (Overruns: 274)
    smp_apic_timer_interrupt+0x2a/0x90 -> native_apic_mem_write (330 ns) (Overruns: 274)
    irq_enter+0x17/0x70 -> idle_cpu (413 ns) (Overruns: 274)
    smp_apic_timer_interrupt+0x2f/0x90 -> irq_enter (1525 ns) (Overruns: 274)
    ktime_get_ts+0x40/0x70 -> getnstimeofday (465 ns) (Overruns: 274)
    ktime_get_ts+0x60/0x70 -> set_normalized_timespec (436 ns) (Overruns: 274)
    ktime_get+0x16/0x30 -> ktime_get_ts (2501 ns) (Overruns: 274)
    hrtimer_interrupt+0x77/0x1a0 -> ktime_get (3439 ns) (Overruns: 274)
    
    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Acked-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 1f0d69a9fc815db82f15722bf05227190b1d714d
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Wed Nov 12 00:14:39 2008 -0500

    tracing: profile likely and unlikely annotations
    
    Impact: new unlikely/likely profiler
    
    Andrew Morton recently suggested having an in-kernel way to profile
    likely and unlikely macros. This patch achieves that goal.
    
    When configured, every(*) likely and unlikely macro gets a counter attached
    to it. When the condition is hit, the hit and misses of that condition
    are recorded. These numbers can later be retrieved by:
    
      /debugfs/tracing/profile_likely    - All likely markers
      /debugfs/tracing/profile_unlikely  - All unlikely markers.
    
    # cat /debug/tracing/profile_unlikely | head
     correct incorrect  %        Function                  File              Line
     ------- ---------  -        --------                  ----              ----
        2167        0   0 do_arch_prctl                  process_64.c         832
           0        0   0 do_arch_prctl                  process_64.c         804
        2670        0   0 IS_ERR                         err.h                34
       71230     5693   7 __switch_to                    process_64.c         673
       76919        0   0 __switch_to                    process_64.c         639
       43184    33743  43 __switch_to                    process_64.c         624
       12740    64181  83 __switch_to                    process_64.c         594
       12740    64174  83 __switch_to                    process_64.c         590
    
    # cat /debug/tracing/profile_unlikely | \
      awk '{ if ($3 > 25) print $0; }' |head -20
       44963    35259  43 __switch_to                    process_64.c         624
       12762    67454  84 __switch_to                    process_64.c         594
       12762    67447  84 __switch_to                    process_64.c         590
        1478      595  28 syscall_get_error              syscall.h            51
           0     2821 100 syscall_trace_leave            ptrace.c             1567
           0        1 100 native_smp_prepare_cpus        smpboot.c            1237
       86338   265881  75 calc_delta_fair                sched_fair.c         408
      210410   108540  34 calc_delta_mine                sched.c              1267
           0    54550 100 sched_info_queued              sched_stats.h        222
       51899    66435  56 pick_next_task_fair            sched_fair.c         1422
           6       10  62 yield_task_fair                sched_fair.c         982
        7325     2692  26 rt_policy                      sched.c              144
           0     1270 100 pre_schedule_rt                sched_rt.c           1261
        1268    48073  97 pick_next_task_rt              sched_rt.c           884
           0    45181 100 sched_info_dequeued            sched_stats.h        177
           0       15 100 sched_move_task                sched.c              8700
           0       15 100 sched_move_task                sched.c              8690
       53167    33217  38 schedule                       sched.c              4457
           0    80208 100 sched_info_switch              sched_stats.h        270
       30585    49631  61 context_switch                 sched.c              2619
    
    # cat /debug/tracing/profile_likely | awk '{ if ($3 > 25) print $0; }'
       39900    36577  47 pick_next_task                 sched.c              4397
       20824    15233  42 switch_mm                      mmu_context_64.h     18
           0        7 100 __cancel_work_timer            workqueue.c          560
         617    66484  99 clocksource_adjust             timekeeping.c        456
           0   346340 100 audit_syscall_exit             auditsc.c            1570
          38   347350  99 audit_get_context              auditsc.c            732
           0   345244 100 audit_syscall_entry            auditsc.c            1541
          38     1017  96 audit_free                     auditsc.c            1446
           0     1090 100 audit_alloc                    auditsc.c            862
        2618     1090  29 audit_alloc                    auditsc.c            858
           0        6 100 move_masked_irq                migration.c          9
           1      198  99 probe_sched_wakeup             trace_sched_switch.c 58
           2        2  50 probe_wakeup                   trace_sched_wakeup.c 227
           0        2 100 probe_wakeup_sched_switch      trace_sched_wakeup.c 144
        4514     2090  31 __grab_cache_page              filemap.c            2149
       12882   228786  94 mapping_unevictable            pagemap.h            50
           4       11  73 __flush_cpu_slab               slub.c               1466
      627757   330451  34 slab_free                      slub.c               1731
        2959    61245  95 dentry_lru_del_init            dcache.c             153
         946     1217  56 load_elf_binary                binfmt_elf.c         904
         102       82  44 disk_put_part                  genhd.h              206
           1        1  50 dst_gc_task                    dst.c                82
           0       19 100 tcp_mss_split_point            tcp_output.c         1126
    
    As you can see by the above, there's a bit of work to do in rethinking
    the use of some unlikelys and likelys. Note: the unlikely case had 71 hits
    that were more than 25%.
    
    Note:  After submitting my first version of this patch, Andrew Morton
      showed me a version written by Daniel Walker, where I picked up
      the following ideas from:
    
      1)  Using __builtin_constant_p to avoid profiling fixed values.
      2)  Using __FILE__ instead of instruction pointers.
      3)  Using the preprocessor to stop all profiling of likely
           annotations from vsyscall_64.c.
    
    Thanks to Andrew Morton, Arjan van de Ven, Theodore Tso and Ingo Molnar
    for their feed back on this patch.
    
    (*) Not ever unlikely is recorded, those that are used by vsyscalls
     (a few of them) had to have profiling disabled.
    
    Signed-off-by: Steven Rostedt <srostedt@redhat.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Theodore Tso <tytso@mit.edu>
    Cc: Arjan van de Ven <arjan@infradead.org>
    Cc: Steven Rostedt <srostedt@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 74239072830ef3f1398edeb1bc1076fc330fd4a2
Author: Frederic Weisbecker <fweisbec@gmail.com>
Date:   Tue Nov 11 23:24:42 2008 +0100

    tracing/fastboot: Use the ring-buffer timestamp for initcall entries
    
    Impact: Split the boot tracer entries in two parts: call and return
    
    Now that we are using the sched tracer from the boot tracer, we want
    to use the same timestamp than the ring-buffer to have consistent time
    captures between sched events and initcall events.
    
    So we get rid of the old time capture by the boot tracer and split the
    initcall events in two parts: call and return. This way we have the
    ring buffer timestamp of both.
    
    An example trace:
    
    [   27.904149584] calling  net_ns_init+0x0/0x1c0 @ 1
    [   27.904429624] initcall net_ns_init+0x0/0x1c0 returned 0 after 0 msecs
    [   27.904575926] calling  reboot_init+0x0/0x20 @ 1
    [   27.904655399] initcall reboot_init+0x0/0x20 returned 0 after 0 msecs
    [   27.904800228] calling  sysctl_init+0x0/0x30 @ 1
    [   27.905142914] initcall sysctl_init+0x0/0x30 returned 0 after 0 msecs
    [   27.905287211] calling  ksysfs_init+0x0/0xb0 @ 1
     ##### CPU 0 buffer started ####
                init-1     [000]    27.905395:      1:120:R   + [001]    11:115:S
     ##### CPU 1 buffer started ####
              <idle>-0     [001]    27.905425:      0:140:R ==> [001]    11:115:R
                init-1     [000]    27.905426:      1:120:D ==> [000]     0:140:R
              <idle>-0     [000]    27.905431:      0:140:R   + [000]     4:115:S
              <idle>-0     [000]    27.905451:      0:140:R ==> [000]     4:115:R
         ksoftirqd/0-4     [000]    27.905456:      4:115:S ==> [000]     0:140:R
               udevd-11    [001]    27.905458:     11:115:R   + [001]    14:115:R
              <idle>-0     [000]    27.905459:      0:140:R   + [000]     4:115:S
              <idle>-0     [000]    27.905462:      0:140:R ==> [000]     4:115:R
               udevd-11    [001]    27.905462:     11:115:R ==> [001]    14:115:R
         ksoftirqd/0-4     [000]    27.905467:      4:115:S ==> [000]     0:140:R
              <idle>-0     [000]    27.905470:      0:140:R   + [000]     4:115:S
              <idle>-0     [000]    27.905473:      0:140:R ==> [000]     4:115:R
         ksoftirqd/0-4     [000]    27.905476:      4:115:S ==> [000]     0:140:R
              <idle>-0     [000]    27.905479:      0:140:R   + [000]     4:115:S
              <idle>-0     [000]    27.905482:      0:140:R ==> [000]     4:115:R
         ksoftirqd/0-4     [000]    27.905486:      4:115:S ==> [000]     0:140:R
               udevd-14    [001]    27.905499:     14:120:X ==> [001]    11:115:R
               udevd-11    [001]    27.905506:     11:115:R   + [000]     1:120:D
              <idle>-0     [000]    27.905515:      0:140:R ==> [000]     1:120:R
               udevd-11    [001]    27.905517:     11:115:S ==> [001]     0:140:R
    [   27.905557107] initcall ksysfs_init+0x0/0xb0 returned 0 after 3906 msecs
    [   27.905705736] calling  init_jiffies_clocksource+0x0/0x10 @ 1
    [   27.905779239] initcall init_jiffies_clocksource+0x0/0x10 returned 0 after 0 msecs
    [   27.906769814] calling  pm_init+0x0/0x30 @ 1
    [   27.906853627] initcall pm_init+0x0/0x30 returned 0 after 0 msecs
    [   27.906997803] calling  pm_disk_init+0x0/0x20 @ 1
    [   27.907076946] initcall pm_disk_init+0x0/0x20 returned 0 after 0 msecs
    [   27.907222556] calling  swsusp_header_init+0x0/0x30 @ 1
    [   27.907294325] initcall swsusp_header_init+0x0/0x30 returned 0 after 0 msecs
    [   27.907439620] calling  stop_machine_init+0x0/0x50 @ 1
                init-1     [000]    27.907485:      1:120:R   + [000]     2:115:S
                init-1     [000]    27.907490:      1:120:D ==> [000]     2:115:R
            kthreadd-2     [000]    27.907507:      2:115:R   + [001]    15:115:R
              <idle>-0     [001]    27.907517:      0:140:R ==> [001]    15:115:R
            kthreadd-2     [000]    27.907517:      2:115:D ==> [000]     0:140:R
              <idle>-0     [000]    27.907521:      0:140:R   + [000]     4:115:S
              <idle>-0     [000]    27.907524:      0:140:R ==> [000]     4:115:R
               udevd-15    [001]    27.907527:     15:115:D   + [000]     2:115:D
         ksoftirqd/0-4     [000]    27.907537:      4:115:S ==> [000]     2:115:R
               udevd-15    [001]    27.907537:     15:115:D ==> [001]     0:140:R
            kthreadd-2     [000]    27.907546:      2:115:R   + [000]     1:120:D
            kthreadd-2     [000]    27.907550:      2:115:S ==> [000]     1:120:R
                init-1     [000]    27.907584:      1:120:R   + [000]    15:  0:D
                init-1     [000]    27.907589:      1:120:R   + [000]     2:115:S
                init-1     [000]    27.907593:      1:120:D ==> [000]    15:  0:R
               udevd-15    [000]    27.907601:     15:  0:S ==> [000]     2:115:R
     ##### CPU 0 buffer started ####
            kthreadd-2     [000]    27.907616:      2:115:R   + [001]    16:115:R
     ##### CPU 1 buffer started ####
              <idle>-0     [001]    27.907620:      0:140:R ==> [001]    16:115:R
            kthreadd-2     [000]    27.907621:      2:115:D ==> [000]     0:140:R
               udevd-16    [001]    27.907625:     16:115:D   + [000]     2:115:D
              <idle>-0     [000]    27.907628:      0:140:R   + [000]     4:115:S
               udevd-16    [001]    27.907629:     16:115:D ==> [001]     0:140:R
              <idle>-0     [000]    27.907631:      0:140:R ==> [000]     4:115:R
         ksoftirqd/0-4     [000]    27.907636:      4:115:S ==> [000]     2:115:R
            kthreadd-2     [000]    27.907644:      2:115:R   + [000]     1:120:D
            kthreadd-2     [000]    27.907647:      2:115:S ==> [000]     1:120:R
                init-1     [000]    27.907657:      1:120:R   + [001]    16:  0:D
              <idle>-0     [001]    27.907666:      0:140:R ==> [001]    16:  0:R
    [   27.907703862] initcall stop_machine_init+0x0/0x50 returned 0 after 0 msecs
    [   27.907850704] calling  filelock_init+0x0/0x30 @ 1
    [   27.907926573] initcall filelock_init+0x0/0x30 returned 0 after 0 msecs
    [   27.908071327] calling  init_script_binfmt+0x0/0x10 @ 1
    [   27.908165195] initcall init_script_binfmt+0x0/0x10 returned 0 after 0 msecs
    [   27.908309461] calling  init_elf_binfmt+0x0/0x10 @ 1
    
    Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
    Acked-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 5d5254f0d3b9bebc47d97e357374c0ad0c291a7d
Author: Gautham R Shenoy <ego@in.ibm.com>
Date:   Sat Oct 25 10:22:38 2008 +0530

    timers: handle HRTIMER_CB_IRQSAFE_UNLOCKED correctly from softirq context
    
    Impact: fix incorrect locking triggered during hotplug-intense stress-tests
    
    While migrating the the CB_IRQSAFE_UNLOCKED timers during a cpu-offline,
    we queue them on the cb_pending list, so that they won't go
    stale.
    
    Thus, when the callbacks of the timers run from the softirq context,
    they could run into potential deadlocks, since these callbacks
    assume that they're running with irq's disabled, thereby annoying
    lockdep!
    
    Fix this by emulating hardirq context while running these callbacks from
    the hrtimer softirq.
    
    =================================
    [ INFO: inconsistent lock state ]
    2.6.27 #2
    --------------------------------
    inconsistent {in-hardirq-W} -> {hardirq-on-W} usage.
    ksoftirqd/0/4 [HC0[0]:SC1[1]:HE1:SE0] takes:
     (&rq->lock){++..}, at: [<c011db84>] sched_rt_period_timer+0x9e/0x1fc
    {in-hardirq-W} state was registered at:
      [<c014103c>] __lock_acquire+0x549/0x121e
      [<c0107890>] native_sched_clock+0x88/0x99
      [<c013aa12>] clocksource_get_next+0x39/0x3f
      [<c0139abc>] update_wall_time+0x616/0x7df
      [<c0141d6b>] lock_acquire+0x5a/0x74
      [<c0121724>] scheduler_tick+0x3a/0x18d
      [<c047ed45>] _spin_lock+0x1c/0x45
      [<c0121724>] scheduler_tick+0x3a/0x18d
      [<c0121724>] scheduler_tick+0x3a/0x18d
      [<c012c436>] update_process_times+0x3a/0x44
      [<c013c044>] tick_periodic+0x63/0x6d
      [<c013c062>] tick_handle_periodic+0x14/0x5e
      [<c010568c>] timer_interrupt+0x44/0x4a
      [<c0150c9f>] handle_IRQ_event+0x13/0x3d
      [<c0151c14>] handle_level_irq+0x79/0xbd
      [<c0105634>] do_IRQ+0x69/0x7d
      [<c01041e4>] common_interrupt+0x28/0x30
      [<c047007b>] aac_probe_one+0x1a3/0x3f3
      [<c047ec2d>] _spin_unlock_irqrestore+0x36/0x39
      [<c01512b4>] setup_irq+0x1be/0x1f9
      [<c065d70b>] start_kernel+0x259/0x2c5
      [<ffffffff>] 0xffffffff
    irq event stamp: 50102
    hardirqs last  enabled at (50102): [<c047ebf4>] _spin_unlock_irq+0x20/0x23
    hardirqs last disabled at (50101): [<c047edc2>] _spin_lock_irq+0xa/0x4b
    softirqs last  enabled at (50088): [<c0128ba6>] do_softirq+0x37/0x4d
    softirqs last disabled at (50099): [<c0128ba6>] do_softirq+0x37/0x4d
    
    other info that might help us debug this:
    no locks held by ksoftirqd/0/4.
    
    stack backtrace:
    Pid: 4, comm: ksoftirqd/0 Not tainted 2.6.27 #2
     [<c013f6cb>] print_usage_bug+0x13e/0x147
     [<c013fef5>] mark_lock+0x493/0x797
     [<c01410b1>] __lock_acquire+0x5be/0x121e
     [<c0141d6b>] lock_acquire+0x5a/0x74
     [<c011db84>] sched_rt_period_timer+0x9e/0x1fc
     [<c047ed45>] _spin_lock+0x1c/0x45
     [<c011db84>] sched_rt_period_timer+0x9e/0x1fc
     [<c011db84>] sched_rt_period_timer+0x9e/0x1fc
     [<c01210fd>] finish_task_switch+0x41/0xbd
     [<c0107890>] native_sched_clock+0x88/0x99
     [<c011dae6>] sched_rt_period_timer+0x0/0x1fc
     [<c0136dda>] run_hrtimer_pending+0x54/0xe5
     [<c011dae6>] sched_rt_period_timer+0x0/0x1fc
     [<c0128afb>] __do_softirq+0x7b/0xef
     [<c0128ba6>] do_softirq+0x37/0x4d
     [<c0128c12>] ksoftirqd+0x56/0xc5
     [<c0128bbc>] ksoftirqd+0x0/0xc5
     [<c0134649>] kthread+0x38/0x5d
     [<c0134611>] kthread+0x0/0x5d
     [<c0104477>] kernel_thread_helper+0x7/0x10
     =======================
    
    Signed-off-by: Gautham R Shenoy <ego@in.ibm.com>
    Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Acked-by: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 395628ef4ea12ff0748099f145363b5e33c69acb
Author: Alok Kataria <akataria@vmware.com>
Date:   Fri Oct 24 17:22:01 2008 -0700

    x86: Skip verification by the watchdog for TSC clocksource.
    
    Impact: Changes timekeeping on Vmware (or with tsc=reliable).
    
    This is achieved by resetting the CLOCKSOURCE_MUST_VERIFY flag.
    
    We add a tsc=reliable commandline option to enable this.
    This enables legacy hardware without HPET, LAPIC, or ACPI timers
    to enter high-resolution timer mode.
    
    Along with that have extended this to be used in virtualization environement
    too. Now we also set this flag if the X86_FEATURE_TSC_RELIABLE bit is set.
    
    This is important since there is a wrap-around problem with the acpi_pm timer.
    The acpi_pm counter is just 24bits and this can overflow in ~4 seconds. With
    the NO_HZ kernels in virtualized environment, there can be situations when
    the guest is descheduled for longer duration, as a result we may miss the wrap
    of the acpi counter. When TSC is used as a clocksource and acpi_pm timer is
    being used as the watchdog clocksource this error in acpi_pm results in TSC
    being marked as unstable, and essentially results in time dropping in chunks
    of 4 seconds whenever this wrap is missed. Since the virtualized TSC is
    reliable on VMware, we should always use the TSCs clocksource on VMware, so
    we skip the verfication at runtime, by checking for the feature bit.
    
    Since we reset the flag for mgeode systems too, i have combined
    the mgeode case with the feature bit check.
    
    Signed-off-by: Jeff Hansen <jhansen@cardaccess-inc.com>
    Signed-off-by: Alok N Kataria <akataria@vmware.com>
    Signed-off-by: Dan Hecht <dhecht@vmware.com>
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>

commit eca0cd028bdf0f6aaceb0d023e9c7501079a7dda
Author: Alok Kataria <akataria@vmware.com>
Date:   Fri Oct 31 12:01:58 2008 -0700

    x86: Add a synthetic TSC_RELIABLE feature bit.
    
    Impact: Changes timebase calibration on Vmware.
    
    Use the synthetic TSC_RELIABLE bit to workaround virtualization anomalies.
    
    Virtual TSCs can be kept nearly in sync, but because the virtual TSC
    offset is set by software, it's not perfect.  So, the TSC
    synchronization test can fail. Even then the TSC can be used as a
    clocksource since the VMware platform exports a reliable TSC to the
    guest for timekeeping purposes. Use this bit to check if we need to
    skip the TSC sync checks.
    
    Along with this also set the CONSTANT_TSC bit when on VMware, since we
    still want to use TSC as clocksource on VM running over hardware which
    has unsynchronized TSC's (opteron's), since the hypervisor will take
    care of providing consistent TSC to the guest.
    
    Signed-off-by: Alok N Kataria <akataria@vmware.com>
    Signed-off-by: Dan Hecht <dhecht@vmware.com>
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>

commit c465a76af658b443075d6efee1c3131257643020
Merge: 2d42244ae71d 1b02469088ac fb02fbc14d17 d40e944c25fb 1508487e7f16 322acf6585f3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Oct 20 13:14:06 2008 +0200

    Merge branches 'timers/clocksource', 'timers/hrtimers', 'timers/nohz', 'timers/ntp', 'timers/posixtimers' and 'timers/debug' into v28-timers-for-linus

commit 0f4d3fd8ac76122675de900d67a470306647374b
Author: David Brownell <dbrownell@users.sourceforge.net>
Date:   Wed Oct 15 22:03:00 2008 -0700

    legacy rtc: remove needless/confusing HPET_RTC_IRQ option
    
    HPET_RTC_IRQ is no longer needed; HPET_EMULATE_RTC suffices and is more
    correct.  (http://bugzilla.kernel.org/show_bug.cgi?id=11111)
    
    Note that when using the legacy RTC driver, platforms don't really do a
    dynamic switch between HPET and non-HPET modes based on whether HPET
    hardware actually exists ...  only rtc-cmos (using the new RTC framework)
    currently switches that way.
    
    So this reflects bitrot in that legacy code, for x86/ia64: kernels with
    HPET support configured (e.g.  for a clocksource) can't get IRQs from the
    legacy RTC driver unless they really have HPET hardware.  (The obvious
    workaround is to not use the legacy RTC driver on those platforms when you
    configure HPET ...  unless you know the target really has a HPET.)
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e5a81b629ea8feb9e7530cfac35cfb41c45facf3
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Wed Aug 27 23:31:01 2008 -0400

    ftrace: add stack tracer
    
    This is another tracer using the ftrace infrastructure, that examines
    at each function call the size of the stack. If the stack use is greater
    than the previous max it is recorded.
    
    You can always see (and set) the max stack size seen. By setting it
    to zero will start the recording again. The backtrace is also available.
    
    For example:
    
    # cat /debug/tracing/stack_max_size
    1856
    
    # cat /debug/tracing/stack_trace
    [<c027764d>] stack_trace_call+0x8f/0x101
    [<c021b966>] ftrace_call+0x5/0x8
    [<c02553cc>] clocksource_get_next+0x12/0x48
    [<c02542a5>] update_wall_time+0x538/0x6d1
    [<c0245913>] do_timer+0x23/0xb0
    [<c0257657>] tick_do_update_jiffies64+0xd9/0xf1
    [<c02576b9>] tick_sched_timer+0x4a/0xad
    [<c0250fe6>] __run_hrtimer+0x3e/0x75
    [<c02518ed>] hrtimer_interrupt+0xf1/0x154
    [<c022c870>] smp_apic_timer_interrupt+0x71/0x84
    [<c021b7e9>] apic_timer_interrupt+0x2d/0x34
    [<c0238597>] finish_task_switch+0x29/0xa0
    [<c05abd13>] schedule+0x765/0x7be
    [<c05abfca>] schedule_timeout+0x1b/0x90
    [<c05ab4d4>] wait_for_common+0xab/0x101
    [<c05ab5ac>] wait_for_completion+0x12/0x14
    [<c033cfc3>] blk_execute_rq+0x84/0x99
    [<c0402470>] scsi_execute+0xc2/0x105
    [<c040250a>] scsi_execute_req+0x57/0x7f
    [<c043afe0>] sr_test_unit_ready+0x3e/0x97
    [<c043bbd6>] sr_media_change+0x43/0x205
    [<c046b59f>] media_changed+0x48/0x77
    [<c046b5ff>] cdrom_media_changed+0x31/0x37
    [<c043b091>] sr_block_media_changed+0x16/0x18
    [<c02b9e69>] check_disk_change+0x1b/0x63
    [<c046f4c3>] cdrom_open+0x7a1/0x806
    [<c043b148>] sr_block_open+0x78/0x8d
    [<c02ba4c0>] do_open+0x90/0x257
    [<c02ba869>] blkdev_open+0x2d/0x56
    [<c0296a1f>] __dentry_open+0x14d/0x23c
    [<c0296b32>] nameidata_to_filp+0x24/0x38
    [<c02a1c68>] do_filp_open+0x347/0x626
    [<c02967ef>] do_sys_open+0x47/0xbc
    [<c02968b0>] sys_open+0x23/0x2b
    [<c021aadd>] sysenter_do_call+0x12/0x26
    
    I've tested this on both x86_64 and i386.
    
    Signed-off-by: Steven Rostedt <srostedt@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 902f2ac9da7975a5a04fc835860f2a7096c481d3
Merge: 06d4a22be3af 2344abbcbdb8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Sep 19 16:16:50 2008 -0700

    Merge branch 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clockevents: make device shutdown robust
      clocksource, acpi_pm.c: fix check for monotonicity
      clockevents: remove WARN_ON which was used to gather information

commit d8ada0a2cd11c991d8193a3f7d37f1806c93c4a0
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Sep 11 23:39:11 2008 -0700

    sparc64: Fix sparse warnings in kernel/time.c
    
    1) Using "clock" as a local variable shadows a global variable of
       the same name declared in linux/clocksource.h
    
    2) rtc_cmos_resource should be static
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f1926ce63b996b42772b39e4b47bb4ef4ba748b4
Author: Dominik Brodowski <linux@dominikbrodowski.net>
Date:   Thu Sep 11 11:09:49 2008 +0200

    clocksource, acpi_pm.c: fix check for monotonicity
    
    Actually check the monotonicity of the ACPI PMTMR ten times, only delay for
    0.9 miliseconds at most, and bail out early if some problem is determined.
    
    Reported-by: Jochen Voß <jochen.voss@googlemail.com>
    Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit f5325225658737e6c9cb8e24373e2c281a90be2a
Merge: 4747832b56a9 4ab6a2191131
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Sep 6 19:33:26 2008 -0700

    Merge branch 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource, acpi_pm.c: check for monotonicity
      clocksource, acpi_pm.c: use proper read function also in errata mode
      ntp: fix calculation of the next jiffie to trigger RTC sync
      x86: HPET: read back compare register before reading counter
      x86: HPET fix moronic 32/64bit thinko
      clockevents: broadcast fixup possible waiters
      HPET: make minimum reprogramming delta useful
      clockevents: prevent endless loop lockup
      clockevents: prevent multiple init/shutdown
      clockevents: enforce reprogram in oneshot setup
      clockevents: prevent endless loop in periodic broadcast handler
      clockevents: prevent clockevent event_handler ending up handler_noop

commit 4ab6a219113197425ac112e35e1ec8062c69888e
Author: Dominik Brodowski <linux@dominikbrodowski.net>
Date:   Fri Sep 5 14:05:35 2008 -0700

    clocksource, acpi_pm.c: check for monotonicity
    
    The current check for monotonicity is way too weak: Andreas Mohr reports (
    http://lkml.org/lkml/2008/8/10/77 ) that on one of his test systems the
    current check only triggers in 50% of all cases, leading to catastrophic
    timer behaviour.  To fix this issue, expand the check for monotonicity by
    doing ten consecutive tests instead of one.
    
    Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit dfdf748a61a21b7397b9f57c83de722de71dc56a
Author: Dominik Brodowski <linux@dominikbrodowski.net>
Date:   Fri Sep 5 14:05:33 2008 -0700

    clocksource, acpi_pm.c: use proper read function also in errata mode
    
    On all hardware (some Intel ICH4, PIIX4 and PIIX4E chipsets) affected by a
    hardware errata there's about a 4.2% chance that initialization of the
    ACPI PMTMR fails.  On those chipsets, we need to read out the timer value
    at least three times to get a correct result, for every once in a while
    (i.e.  within a 3 ns window every 69.8 ns) the read returns a bogus
    result.  During normal operation we work around this issue, but during
    initialization reading a bogus value may lead to -EINVAL even though the
    hardware is usable.
    
    Thanks to Andreas Mohr for spotting this issue.
    
    Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit f76fd327a8b32d3ad5b51639faf6f54d18be0981
Author: Gerrit Renker <gerrit@erg.abdn.ac.uk>
Date:   Thu Sep 4 07:30:19 2008 +0200

    dccp ccid-3: Runtime verification of timer resolution
    
    The DCCP base time resolution is 10 microseconds (RFC 4340, 13.1 ... 13.3).
    
    Using a timer with a lower resolution was found to trigger the following
    bug warnings/problems on high-speed networks (e.g. local loopback):
     * RTT samples are rounded down to 0 if below resolution;
     * in some cases, negative RTT samples were observed;
     * the CCID-3 feedback timer complains that the feedback interval is 0,
       since the feedback interval is in the order of 1 RTT or less and RTT
       measurement rounded this down to 0;
    On an Intel computer this will for instance happen when using a
    boot-time parameter of "clocksource=jiffies".
    
    The following system log messages were observed:
      11:24:00 kernel: BUG: delta (0) <= 0 at ccid3_hc_rx_send_feedback()
      11:26:12 kernel: BUG: delta (0) <= 0 at ccid3_hc_rx_send_feedback()
      11:26:30 kernel: dccp_sample_rtt: unusable RTT sample 0, using min
      11:26:30 last message repeated 5 times
    
    This patch defines a global constant for the time resolution, adds this in
    timer.c, and checks the available clock resolution at CCID-3 module load time.
    
    When the resolution is worse than 10 microseconds, module loading exits with
    a message "socket type not supported".
    
    Signed-off-by: Gerrit Renker <gerrit@erg.abdn.ac.uk>

commit ee7686bc043921a488d9bf89fe93241c5457a74e
Author: Jeremy Fitzhardinge <jeremy@goop.org>
Date:   Thu Aug 21 13:17:56 2008 -0700

    x86: build fix in "xen spinlock updates and performance measurements"
    
    Ingo Molnar wrote:
    > -tip testing found this build failure:
    >
    >  arch/x86/xen/spinlock.c: In function ‘spin_time_start’:
    >  arch/x86/xen/spinlock.c:60: error: implicit declaration of function ‘xen_clocksource_read’
    >
    > i've excluded these new commits for now from tip/master - could you
    > please send a delta fix against tip/x86/xen?
    
    Make xen_clocksource_read non-static.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 2d42244ae71d6c7b0884b5664cf2eda30fb2ae68
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed Aug 20 16:37:30 2008 -0700

    clocksource: introduce CLOCK_MONOTONIC_RAW
    
    In talking with Josip Loncaric, and his work on clock synchronization (see
    btime.sf.net), he mentioned that for really close synchronization, it is
    useful to have access to "hardware time", that is a notion of time that is
    not in any way adjusted by the clock slewing done to keep close time sync.
    
    Part of the issue is if we are using the kernel's ntp adjusted
    representation of time in order to measure how we should correct time, we
    can run into what Paul McKenney aptly described as "Painting a road using
    the lines we're painting as the guide".
    
    I had been thinking of a similar problem, and was trying to come up with a
    way to give users access to a purely hardware based time representation
    that avoided users having to know the underlying frequency and mask values
    needed to deal with the wide variety of possible underlying hardware
    counters.
    
    My solution is to introduce CLOCK_MONOTONIC_RAW.  This exposes a
    nanosecond based time value, that increments starting at bootup and has no
    frequency adjustments made to it what so ever.
    
    The time is accessed from userspace via the posix_clock_gettime() syscall,
    passing CLOCK_MONOTONIC_RAW as the clock_id.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 9a055117d3d9cb562f83f8d4cd88772761f4cab0
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Wed Aug 20 16:37:28 2008 -0700

    clocksource: introduce clocksource_forward_now()
    
    To keep the raw monotonic patch simple first introduce
    clocksource_forward_now(), which takes care of the offset since the last
    update_wall_time() call and adds it to the clock, so there is no need
    anymore to deal with it explicitly at various places, which need to make
    significant changes to the clock.
    
    This is also gets rid of the timekeeping_suspend_nsecs, instead of
    waiting until resume, the value is accumulated during suspend. In the end
    there is only a single user of __get_nsec_offset() left, so I integrated
    it back to getnstimeofday().
    
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 1aa5dfb751d275ae7117d3b73ac423b4a46f2a73
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed Aug 20 16:37:28 2008 -0700

    clocksource: keep track of original clocksource frequency
    
    The clocksource frequency is represented by
    clocksource->mult/2^(clocksource->shift).  Currently, when NTP makes
    adjustments to the clock frequency, they are made directly to the mult
    value.
    
    This has the drawback that once changed, we cannot know what the orignal
    mult value was, or how much adjustment has been applied.
    
    This property causes problems in calculating proper ntp intervals when
    switching back and forth between clocksources.
    
    This patch separates the current mult value into a mult and mult_orig
    pair.  The mult_orig value stays constant, while the ntp clocksource
    adjustments are done only to the mult value.
    
    This allows for correct ntp interval calculation and additionally lays the
    groundwork for a new notion of time, what I'm calling the monotonic-raw
    time, which is introduced in a following patch.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit ee974e01e5ef2914036f08c8e41d1a3fa8bfc9d9
Author: David Howells <dhowells@redhat.com>
Date:   Wed Aug 20 16:37:26 2008 -0700

    clocksource: check range
    
    Check that the value being passed to parse_pmtmr() does not exceed the
    limits of pmtmr_ioport.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 0473b7992943ee7b182aa4afeb602ba5d37d36e0
Merge: 9e94cd325bb8 2fdc86901d2a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Aug 16 17:14:07 2008 -0700

    Merge branch 'x86-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'x86-fixes-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip: (32 commits)
      x86: add MAP_STACK mmap flag
      x86: fix section mismatch warning - spp_getpage()
      x86: change init_gdt to update the gdt via write_gdt, rather than a direct write.
      x86-64: fix overlap of modules and fixmap areas
      x86, geode-mfgpt: check IRQ before using MFGPT as clocksource
      x86, acpi: cleanup, temp_stack is used only when CONFIG_SMP is set
      x86: fix spin_is_contended()
      x86, nmi: clean UP NMI watchdog failure message
      x86, NMI: fix watchdog failure message
      x86: fix /proc/meminfo DirectMap
      x86: fix readb() et al compile error with gcc-3.2.3
      arch/x86/Kconfig: clean up, experimental adjustement
      x86: invalidate caches before going into suspend
      x86, perfctr: don't use CCCR_OVF_PMI1 on Pentium 4Ds
      x86, AMD IOMMU: initialize dma_ops after sysfs registration
      x86m AMD IOMMU: cleanup: replace LOW_U32 macro with generic lower_32_bits
      x86, AMD IOMMU: initialize device table properly
      x86, AMD IOMMU: use status bit instead of memory write-back for completion wait
      x86: silence mmconfig printk
      x86, msr: fix NULL pointer deref due to msr_open on nonexistent CPUs
      ...

commit 0d5cdc97e242a5589e5dca23277675f4b4482490
Author: Jens Rottmann <JRottmann@LiPPERTEmbedded.de>
Date:   Mon Aug 4 14:40:16 2008 +0200

    x86, geode-mfgpt: check IRQ before using MFGPT as clocksource
    
    Adds a simple IRQ autodetection to the AMD Geode MFGPT driver, and more
    importantly, adds some checks, if IRQs can actually be received on the
    chosen line.  This fixes cases where MFGPT is selected as clocksource
    though not producing any ticks, so the kernel simply starves during
    boot.
    
    Signed-off-by: Jens Rottmann <JRottmann@LiPPERTEmbedded.de>
    Cc: Andres Salomon <dilinger@debian.org>
    Cc: linux-geode@bombadil.infradead.org
    Cc: Jordan Crouse <jordan.crouse@amd.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 4c1cfab1e0f9a41246cfdcca78f3700fb67f0a5c
Author: Adrian Bunk <bunk@kernel.org>
Date:   Wed Jun 18 03:36:50 2008 +0300

    sh/kernel/ cleanups
    
    This patch contains the following cleanups:
    - make the following needlessly global code static:
      - cf-enabler.c: cf_init()
      - cpu/clock.c: __clk_enable()
      - cpu/clock.c: __clk_disable()
      - process_32.c: default_idle()
      - time_32.c: struct clocksource_sh
      - timers/timer-tmu.c: struct tmu_timer_ops
    - remove the following unused functions (no CONFIG_BLK_DEV_FD on sh):
      - process_{32,64}.c: disable_hlt()
      - process_{32,64}.c: enable_hlt()
    
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 2b9a69861c39ae4c232385def833816acc07a0a4
Author: Sebastian Siewior <bigeasy@linutronix.de>
Date:   Mon Apr 28 11:43:04 2008 +0200

    m68knommu: MCF5307 PIT GENERIC_CLOCKEVENTS support
    
    The PIT code has been changed in order to suppport GENERIC_CLOCKEVENTS.
    The priority of the PIT clocksource has been decreased in favor of the
    DMA timer.
    
    pit_cycles_per_jiffy become a constant (PIT_CYCLES_PER_JIFFY) because it
    is known at compile time and does not change afterwards.
    
    Signed-off-by: Benedikt Spranger <b.spranger@linutronix.de>
    Signed-off-by: Sebastian Siewior <bigeasy@linutronix.de>
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

commit 14351760e314b8a9720804b11c6bd11d0c0b1258
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 15 11:01:39 2008 -0700

    Fix printk format warning in clocksource/acpi_pm.c
    
    For real, this time.  The earlier attempt just moved the warning around.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7dc9719682ce8c46215bc9a1bdc7ee0c38ada94b
Merge: 4c2a997c34c0 900cfa46191a 857f3fd7a496 de32a2434f7c 81d50bb254ed
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Jul 14 18:09:05 2008 +0200

    Merge commit '900cfa46191a7d87cf1891924cb90499287fd235'; branches 'timers/nohz', 'timers/clocksource' and 'timers/posixtimers' into timers/for-linus

commit 38032f72601deac7aab00691c79e83d09b204e2a
Author: Randy Dunlap <randy.dunlap@oracle.com>
Date:   Fri Jul 11 12:57:31 2008 -0700

    acpi_pm clccksource: fix printk format warning
    
    Fix printk format warning in acpi_pm clocksource:
    
    linux-next-20080711/drivers/clocksource/acpi_pm.c:231: warning: format '%04lx' expects type 'long unsigned int', but argument 2 has type 'u32'
    
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    Cc: akpm <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 3d0decc4f49e8645cd6369b02ed076bebd3d61ad
Author: Ingo Molnar <mingo@elte.hu>
Date:   Fri Jul 11 15:09:15 2008 +0200

    x86: fix tsc unification buglet with ftrace and stackprotector
    
    Yinghai Lu reported crashes on 64-bit x86:
    
     BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
     IP: [<ffffffff80253b17>] hrtick_start_fair+0x89/0x173
     [...]
    
    And with a long session of debugging and a lot of difficulty, tracked it down
    to this commit:
    
     --------------->
     8fbbc4b45ce3e4c0eeb15004c79c72b6896a79c2 is first bad commit
     commit 8fbbc4b45ce3e4c0eeb15004c79c72b6896a79c2
     Author: Alok Kataria <akataria@vmware.com>
     Date:   Tue Jul 1 11:43:34 2008 -0700
    
         x86: merge tsc_init and clocksource code
     <--------------
    
    The problem is that the TSC unification missed these Makefile rules
    in arch/x86/kernel/Makefile:
    
      # Do not profile debug and lowlevel utilities
      CFLAGS_REMOVE_tsc_64.o = -pg
      CFLAGS_REMOVE_tsc_32.o = -pg
      ...
      CFLAGS_tsc_64.o         := $(nostackp)
      ...
    
    which rules make sure that various instrumentation and debugging
    facilities are disabled for code that might end up in a VDSO - such as
    the TSC code.
    
    Reported-and-bisected-by: Yinghai Lu <yhlu.kernel@gmail.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    
    Conflicts:
    
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 8fbbc4b45ce3e4c0eeb15004c79c72b6896a79c2
Author: Alok Kataria <akataria@vmware.com>
Date:   Tue Jul 1 11:43:34 2008 -0700

    x86: merge tsc_init and clocksource code
    
    Unify the clocksource code.
    Unify the tsc_init code.
    
    Signed-off-by: Alok N Kataria <akataria@vmware.com>
    Signed-off-by: Dan Hecht <dhecht@vmware.com>
    Cc: Dan Hecht <dhecht@vmware.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 919c0d14ae93073a3957c018a6d86ceb1e2e454b
Merge: de08341a0ef7 6b1ed9086592
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jun 24 18:09:06 2008 -0700

    Merge branch 'kvm-updates-2.6.26' of git://git.kernel.org/pub/scm/linux/kernel/git/avi/kvm
    
    * 'kvm-updates-2.6.26' of git://git.kernel.org/pub/scm/linux/kernel/git/avi/kvm:
      KVM: Remove now unused structs from kvm_para.h
      x86: KVM guest: Use the paravirt clocksource structs and functions
      KVM: Make kvm host use the paravirt clocksource structs
      x86: Make xen use the paravirt clocksource structs and functions
      x86: Add structs and functions for paravirt clocksource
      KVM: VMX: Fix host msr corruption with preemption enabled
      KVM: ioapic: fix lost interrupt when changing a device's irq
      KVM: MMU: Fix oops on guest userspace access to guest pagetable
      KVM: MMU: large page update_pte issue with non-PAE 32-bit guests (resend)
      KVM: MMU: Fix rmap_write_protect() hugepage iteration bug
      KVM: close timer injection race window in __vcpu_run
      KVM: Fix race between timer migration and vcpu migration

commit f6e16d5ad463d15f285666f588cfe49495c692d9
Author: Gerd Hoffmann <kraxel@redhat.com>
Date:   Tue Jun 3 16:17:32 2008 +0200

    x86: KVM guest: Use the paravirt clocksource structs and functions
    
    This patch updates the kvm host code to use the pvclock structs
    and functions, thereby making it compatible with Xen.
    
    The patch also fixes an initialization bug: on SMP systems the
    per-cpu has two different locations early at boot and after CPU
    bringup.  kvmclock must take that in account when registering the
    physical address within the host.
    
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Avi Kivity <avi@qumranet.com>

commit 50d0a0f987b83a8dadb1134d834e35ec410392b5
Author: Gerd Hoffmann <kraxel@redhat.com>
Date:   Tue Jun 3 16:17:31 2008 +0200

    KVM: Make kvm host use the paravirt clocksource structs
    
    This patch updates the kvm host code to use the pvclock structs.
    It also makes the paravirt clock compatible with Xen.
    
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Avi Kivity <avi@qumranet.com>

commit 1c7b67f7576c4ca2a344379a4a29eec8fe8e7935
Author: Gerd Hoffmann <kraxel@redhat.com>
Date:   Tue Jun 3 16:17:30 2008 +0200

    x86: Make xen use the paravirt clocksource structs and functions
    
    This patch updates the xen guest to use the pvclock structs
    and helper functions.
    
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Acked-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Avi Kivity <avi@qumranet.com>

commit 7af192c954017499ec163bc9dbaaee2e593d7ef2
Author: Gerd Hoffmann <kraxel@redhat.com>
Date:   Tue Jun 3 16:17:29 2008 +0200

    x86: Add structs and functions for paravirt clocksource
    
    This patch adds structs for the paravirt clocksource ABI
    used by both xen and kvm (pvclock-abi.h).
    
    It also adds some helper functions to read system time and
    wall clock time from a paravirtual clocksource (pvclock.[ch]).
    They are based on the xen code.  They are enabled using
    CONFIG_PARAVIRT_CLOCK.
    
    Subsequent patches of this series will put the code in use.
    
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Acked-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Avi Kivity <avi@qumranet.com>

commit df17b1d990fc214f033c5588e58216ec941591e0
Author: Mikael Pettersson <mikpe@it.uu.se>
Date:   Sun Jun 15 02:19:56 2008 +0200

    x86, 32-bit: fix boot failure on TSC-less processors
    
    Booting 2.6.26-rc6 on my 486 DX/4 fails with a "BUG: Int 6"
    (invalid opcode) and a kernel halt immediately after the
    kernel has been uncompressed. The BUG shows EIP pointing
    to an rdtsc instruction in native_read_tsc(), invoked from
    native_sched_clock().
    
    (This error occurs so early that not even the serial console
    can capture it.)
    
    A bisection showed that this bug first occurs in 2.6.26-rc3-git7,
    via commit 9ccc906c97e34fd91dc6aaf5b69b52d824386910:
    
    >x86: distangle user disabled TSC from unstable
    >
    >tsc_enabled is set to 0 from the command line switch "notsc" and from
    >the mark_tsc_unstable code. Seperate those functionalities and replace
    >tsc_enable with tsc_disable. This makes also the native_sched_clock()
    >decision when to use TSC understandable.
    >
    >Preparatory patch to solve the sched_clock() issue on 32 bit.
    >
    >Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    
    The core reason for this bug is that native_sched_clock() gets
    called before tsc_init().
    
    Before the commit above, tsc_32.c used a "tsc_enabled" variable
    which defaulted to 0 == disabled, and which only got enabled late
    in tsc_init(). Thus early calls to native_sched_clock() would skip
    the TSC and use jiffies instead.
    
    After the commit above, tsc_32.c uses a "tsc_disabled" variable
    which defaults to 0, meaning that the TSC is Ok to use. Early calls
    to native_sched_clock() now erroneously try to use the TSC on
    !cpu_has_tsc processors, leading to invalid opcode exceptions.
    
    My proposed fix is to initialise tsc_disabled to a "soft disabled"
    state distinct from the hard disabled state set up by the "notsc"
    kernel option. This fixes the native_sched_clock() problem. It also
    allows tsc_init() to be simplified: instead of setting tsc_disabled = 1
    on every error return, we just set tsc_disabled = 0 once when all
    checks have succeeded.
    
    I've verified that this lets my 486 boot again. I've also verified
    that a Core2 machine still uses the TSC as clocksource after the patch.
    
    Signed-off-by: Mikael Pettersson <mikpe@it.uu.se>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 359cdd3f866b6219a6729e313faf2221397f3278
Author: Jeremy Fitzhardinge <jeremy@goop.org>
Date:   Mon May 26 23:31:28 2008 +0100

    xen: maintain clock offset over save/restore
    
    Hook into the device model to make sure that timekeeping's resume handler
    is called.  This deals with our clocksource's non-monotonicity over the
    save/restore.  Explicitly call clock_has_changed() to make sure that
    all the timers get retriggered properly.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit cad0e458d17c643c20c1d38f45a1d26125e6a622
Author: Mike Travis <travis@sgi.com>
Date:   Mon May 12 21:21:13 2008 +0200

    clocksource/events: use performance variant for_each_cpu_mask_nr
    
    Change references from for_each_cpu_mask to for_each_cpu_mask_nr
    where appropriate
    
    Reviewed-by: Paul Jackson <pj@sgi.com>
    Reviewed-by: Christoph Lameter <clameter@sgi.com>
    Signed-off-by: Mike Travis <travis@sgi.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit f70c5253b41444fd2779e1f76bfe25811d9b8c23
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sun Apr 20 12:22:36 2008 +0100

    [RTC] remove references to asm/mach/time.h
    
    asm/mach/time.h is the ARM header file for setting up kernel ticker
    timekeeping (be that the old jiffy interrupt or the new clocksource.)
    RTC drivers have no business using this header file, and in fact do
    not require it.
    
    Build tested on at91sam9rl, omap and s3c2410 configurations.
    
    Acked-by: Alessandro Zummo <a.zummo@towertech.it>
    Acked-by: Andrew Victor <linux@maxim.org.za>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 1c21a2937b1f342a8f5d580203c3396557d53b6e
Author: Michael Ellerman <michael@ellerman.id.au>
Date:   Thu May 8 14:27:19 2008 +1000

    [POWERPC] Fix sparse warnings in arch/powerpc/kernel
    
    Make a few things static in lparcfg.c
    Make init and exit routines static in rtas_flash.c
    Make things static in rtas_pci.c
    Make some functions static in rtas.c
    Make fops static in rtas-proc.c
    Remove unneeded extern for do_gtod in smp.c
    Make clocksource_init() static in time.c
    Make last_tick_len and ticklen_to_xs static in time.c
    Move the declaration of the pvr per-cpu into smp.h
    Make kexec_smp_down() and kexec_stack static in machine_kexec_64.c
    Don't return void in arch_teardown_msi_irqs() in msi.c
    Move declaration of GregorianDay()into asm/time.h
    
    Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

commit 6fd592daae2182adc47f405e20d07f34f52d07dd
Author: Carlos R. Mafra <crmafra2@gmail.com>
Date:   Mon May 5 20:11:22 2008 -0300

    x86: clean up computation of HPET .mult variables
    
    While reading through the HPET code I realized that the
    computation of .mult variables could be done with less
    lines of code, resulting in a 1.6% text size saving
    for hpet.o
    
    So I propose the following patch, which applies against
    today's Linus -git tree.
    
    >From 0c6507e400e9ca5f7f14331e18f8c12baf75a9d3 Mon Sep 17 00:00:00 2001
    From: Carlos R. Mafra <crmafra@ift.unesp.br>
    Date: Mon, 5 May 2008 19:38:53 -0300
    
    The computation of clocksource_hpet.mult
    
           tmp = (u64)hpet_period << HPET_SHIFT;
           do_div(tmp, FSEC_PER_NSEC);
           clocksource_hpet.mult = (u32)tmp;
    
    can be streamlined if we note that it is equal to
    
           clocksource_hpet.mult = div_sc(hpet_period, FSEC_PER_NSEC, HPET_SHIFT);
    
    Furthermore, the computation of hpet_clockevent.mult
    
           uint64_t hpet_freq;
    
           hpet_freq = 1000000000000000ULL;
           do_div(hpet_freq, hpet_period);
           hpet_clockevent.mult = div_sc((unsigned long) hpet_freq,
                                         NSEC_PER_SEC, hpet_clockevent.shift);
    
    can also be streamlined with the observation that hpet_period and hpet_freq are
    inverse to each other (in proper units).
    
    So instead of computing hpet_freq and using (schematically)
    div_sc(hpet_freq, 10^9, shift) we use the trick of calling with the
    arguments in reverse order, div_sc(10^6, hpet_period, shift).
    
    The different power of ten is due to frequency being in Hertz (1/sec)
    and the period being in units of femtosecond. Explicitly,
    
    mult = (hpet_freq * 2^shift)/10^9    (before)
    mult = (10^6 * 2^shift)/hpet_period  (after)
    
    because hpet_freq = 10^15/hpet_period.
    
    The comments in the code are also updated to reflect the changes.
    
    As a result,
    
       text    data     bss     dec     hex filename
       2957     425      92    3474     d92 arch/x86/kernel/hpet.o
       3006     425      92    3523     dc3 arch/x86/kernel/hpet.o.old
    
    a 1.6% reduction in text size.
    
    Signed-off-by: Carlos R. Mafra <crmafra@ift.unesp.br>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 205bee6ad804d7034773b5978c74dde495df2301
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Sun Apr 20 13:57:26 2008 +0100

    [ARM] dyntick: Remove obsolete and unused ARM dyntick support
    
    dyntick is superseded by the clocksource/clockevent infrastructure,
    using the NO_HZ configuration option.  No one implements dyntick on
    ARM anymore, so it's pointless keeping it around.  Remove dyntick
    support.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit b01273f120a390363ceb27bd0ccc60ddf1fb936d
Author: Adrian Bunk <bunk@kernel.org>
Date:   Sun May 4 19:58:54 2008 +0300

    [MIPS] markeins: build fix
    
    This patch fixes the following build errror caused by
    commit 7dffa3c673fbcf835cd7be80bb4aec8ad3f51168
    (ntp: handle leap second via timer):
    
    <--  snip  -->
    
    ...
      CC      arch/mips/emma2rh/markeins/setup.o
    /home/bunk/linux/kernel-2.6/git/linux-2.6/arch/mips/emma2rh/markeins/setup.c:79: error: conflicting types for 'clock'
    /home/bunk/linux/kernel-2.6/git/linux-2.6/include/linux/clocksource.h:96: error: previous declaration of 'clock' was here
    make[2]: *** [arch/mips/emma2rh/markeins/setup.o] Error 1
    
    <--  snip  -->
    
    [Ralf: reformated to 80 colums after the fix and marked emma2rh_clock as
    __initdata]
    
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit afa26be86b65a7183ceac29bdf1f51d6fc6932f0
Merge: 269f21344b23 4f95f81a4862
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 3 13:51:10 2008 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/tglx/linux-2.6-hrt
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/tglx/linux-2.6-hrt:
      clocksource: allow read access to available/current_clocksource
      clocksource: Fix permissions for available_clocksource
      hrtimer: remove duplicate helper function

commit 4f95f81a48623982879f4fa80c641933444afd18
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Sat May 3 14:23:14 2008 +0200

    clocksource: allow read access to available/current_clocksource
    
    There is no harm, when users can read the info and we ask often enough
    during debugging for this kind of information.
    
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 4359a023a8c3b247b348c310bf510b23f3c1ab64
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Fri May 2 12:49:40 2008 +0200

    clocksource: Fix permissions for available_clocksource
    
    File permissions for
    /sys/devices/system/clocksource/clocksource0/available_clocksource
    are 600 which allows write access. But this is in fact a read only
    file. So change permissions to 400.
    
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit e31a94ed371c70855eb30b77c490d6d85dd4da26
Merge: 9d9ad4b51d2b fcbd3b4b92ef
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 28 10:51:43 2008 -0700

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus: (45 commits)
      [MIPS] Pb1200/DBAu1200: move platform code to its proper place
      [MIPS] Fix handling of trap and breakpoint instructions
      [MIPS] Pb1200: do register SMC 91C111
      [MIPS] DBAu1200: fix bad SMC 91C111 resource size
      [NET] Kconfig: Rename MIKROTIK_RB500 -> MIKROTIK_RB532
      [MIPS] IP27: Fix build bug due to missing include
      [MIPS] Fix some sparse warnings on traps.c and irq-msc01.c
      [MIPS] cevt-gt641xx: Kill unnecessary include
      [MIPS] DS1287: Add clockevent driver
      [MIPS] add DECstation I/O ASIC clocksource
      [MIPS] rbtx4938: minor cleanup
      [MIPS] Alchemy: kill unused PCI_IRQ_TABLE_LOOKUP macro
      [MIPS] rbtx4938: misc cleanups
      [MIPS] jmr3927: use generic txx9 gpio
      [MIPS] rbhma4500: use generic txx9 gpio
      [MIPS] generic txx9 gpio support
      [MIPS] make fallback gpio.h gpiolib-friendly
      [MIPS] unexport null_perf_irq() and make it static
      [MIPS] unexport rtc_mips_set_time()
      [MIPS] unexport copy_from_user_page()
      ...

commit 4247417d8457b326ede001cb74af8570b5aa302b
Author: Yoichi Yuasa <yoichi_yuasa@tripeaks.co.jp>
Date:   Thu Apr 24 09:48:40 2008 +0900

    [MIPS] add DECstation I/O ASIC clocksource
    
    Add DECstation I/O ASIC clocksource
    
    Signed-off-by: Yoichi Yuasa <yoichi_yuasa@tripeaks.co.jp>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 790c73f6289a204f858ffdcbe4a2b38e91657ec6
Author: Glauber de Oliveira Costa <gcosta@redhat.com>
Date:   Fri Feb 15 17:52:48 2008 -0200

    x86: KVM guest: paravirtualized clocksource
    
    This is the guest part of kvm clock implementation
    It does not do tsc-only timing, as tsc can have deltas
    between cpus, and it did not seem worthy to me to keep
    adjusting them.
    
    We do use it, however, for fine-grained adjustment.
    
    Other than that, time comes from the host.
    
    [randy dunlap: add missing include]
    [randy dunlap: disallow on Voyager or Visual WS]
    
    Signed-off-by: Glauber de Oliveira Costa <gcosta@redhat.com>
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    Signed-off-by: Avi Kivity <avi@qumranet.com>

commit 18068523d3a0b41fcee5b53cdb437a0ab4d65e4b
Author: Glauber de Oliveira Costa <gcosta@redhat.com>
Date:   Fri Feb 15 17:52:47 2008 -0200

    KVM: paravirtualized clocksource: host part
    
    This is the host part of kvm clocksource implementation. As it does
    not include clockevents, it is a fairly simple implementation. We
    only have to register a per-vcpu area, and start writing to it periodically.
    
    The area is binary compatible with xen, as we use the same shadow_info
    structure.
    
    [marcelo: fix bad_page on MSR_KVM_SYSTEM_TIME]
    [avi: save full value of the msr, even if enable bit is clear]
    [avi: clear previous value of time_page]
    
    Signed-off-by: Glauber de Oliveira Costa <gcosta@redhat.com>
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
    Signed-off-by: Avi Kivity <avi@qumranet.com>

commit b82287587ef9917afbea5fcbf7aa63424b6f3719
Merge: 2a8a2719be13 5afca33a4378
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 26 09:44:32 2008 -0700

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-x86-misc
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-x86-misc: (28 commits)
      x86: section mismatch fixes, #3
      x86: section mismatch fixes, #2
      x86: pgtable_32.h - prototype and section mismatch fixes
      x86: unlock_ExtINT_logic() - fix section mismatch warnings
      x86: uniq_ioapic_id - fix section mismatch warning
      x86: trampoline_32.S - switch to .cpuinit.data
      x86: use get_bios_ebda()
      x86: remove duplicate get_bios_ebda() from rio.h
      x86: get_bios_ebda() requires asm/io.h
      x86: use cpumask function for present, possible, and online cpus
      x86: cleanup div_sc() usage
      x86: cleanup clocksource_hz2mult usage
      x86: remove unnecessary memset and NULL check after alloc_bootmem()
      x86: use bitmap library for pin_programmed
      x86: use MP_intsrc_info()
      x86: use BUILD_BUG_ON() for the size of struct intel_mp_floating
      x86_64 ia32 ptrace: convert to compat_arch_ptrace
      x86_64 ia32 ptrace: use compat_ptrace_request for siginfo
      x86 signals: lift set_fs
      x86 signals: lift flags diddling code
      ...

commit d454157b113718a92ba5accc03cee64c7e081483
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Sat Apr 19 23:55:15 2008 +0900

    x86: cleanup clocksource_hz2mult usage
    
    Remove the magic number in the second argument of clocksource_hz2mult()
    
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit c3823c479e1f86a0adc7bb76fcfded67b042afc3
Merge: 5dfeaef89559 ed3fa7c9510c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 21 15:44:57 2008 -0700

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/hskinnemoen/avr32-2.6
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/hskinnemoen/avr32-2.6: (25 commits)
      avr32: Add hardware power-down function call
      avr32: add include/asm-avr32/serial.h
      avr32: don't offer PARPORT_PC
      avr32: don't offer CONFIG_GEN_RTC
      avr32: don't offer CONFIG_RTC
      add include/asm-avr32/xor.h
      avr32: Remove two unused #defines from mm/init.c
      avr32: Implement set_rate(), set_parent() and mode() for pll1
      avr32: Generic clockevents support
      avr32: Move sleep code into mach-at32ap
      avr32: Use constants from sysreg.h in asm.h
      avr32: Delete mostly unused header asm/intc.h
      avr32: start clocksource cleanup
      avr32: pass i2c board info through at32_add_device_twi
      avr32: cleanup - use _AC macro to define PAGE_SIZE
      Generate raw keyboard codes for AVR32 architecture
      atmel_usba_udc: Add support for AT91CAP9 UDPHS
      atmel_usba_udc: Add missing kfree() in usba_udc_remove()
      atmel_usba_udc: move endpoint declarations into platform data.
      atmel_usba_udc: Kill GPIO_PIN_NONE
      ...

commit e723ff666a5da8f7fda4e36ebfeafac2175a5c6e
Author: David Brownell <david-b@pacbell.net>
Date:   Thu Feb 14 11:24:02 2008 -0800

    avr32: Generic clockevents support
    
    This combines three patches from David Brownell:
      * avr32: tclib support
      * avr32: simplify clocksources
      * avr32: Turn count/compare into a oneshot clockevent device
    
    Register both TC blocks (instead of just the first one) so that
    the AT32/AT91 tclib code will pick them up (instead of just the
    avr32-only PIT-style clocksource).
    
    Rename the first one and its resources appropriately.
    
    More cleanups to the cycle counter clocksource code
    
     - Disable all the weak symbol magic; remove the AVR32-only TCB-based
       clocksource code (source and header).
    
     - Mark the __init code properly.
    
     - Don't forget to report IRQF_TIMER.
    
     - Make the system work properly with this clocksource, by preventing
       use of the CPU "idle" sleep state in the idle loop when it's used.
    
    Package the avr32 count/compare timekeeping support as a oneshot
    clockevent device, so it supports NO_HZ and high res timers.
    This means it also supports plugging in other clockevent devices
    and clocksources.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Haavard Skinnemoen <hskinnemoen@atmel.com>

commit 62c6df62f9575cffd673bfc395270e6896a12a60
Author: David Brownell <david-b@pacbell.net>
Date:   Tue Feb 12 14:45:49 2008 -0800

    avr32: start clocksource cleanup
    
    Start cleaning up the AVR32 clocksource mess, starting with the cycle
    counter clocksource:  remove unneeded pseudo-RTC (just inline that
    call to mktime) and associated build warning, and unused sysdev.
    
    Add comment about the problem using the cycle counter register,
    and adjust the clocksource rating accordingly.  Later patches can
    make this usable again (by disabling use of the idle state and
    providing a proper clocksource without the weak binding hacks)
    and move towards TCB-based clockevent support (including high
    resolution timers) that's shared between AT91 and AVR32.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Haavard Skinnemoen <hskinnemoen@atmel.com>

commit d8bb6f4c1670c8324e4135c61ef07486f7f17379
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Apr 1 19:45:18 2008 +0200

    x86: tsc prevent time going backwards
    
    We already catch most of the TSC problems by sanity checks, but there
    is a subtle bug which has been in the code forever. This can cause
    time jumps in the range of hours.
    
    This was reported in:
         http://lkml.org/lkml/2007/8/23/96
    and
         http://lkml.org/lkml/2008/3/31/23
    
    I was able to reproduce the problem with a gettimeofday loop test on a
    dual core and a quad core machine which both have sychronized
    TSCs. The TSCs seems not to be perfectly in sync though, but the
    kernel is not able to detect the slight delta in the sync check. Still
    there exists an extremly small window where this delta can be observed
    with a real big time jump. So far I was only able to reproduce this
    with the vsyscall gettimeofday implementation, but in theory this
    might be observable with the syscall based version as well.
    
    CPU 0 updates the clock source variables under xtime/vyscall lock and
    CPU1, where the TSC is slighty behind CPU0, is reading the time right
    after the seqlock was unlocked.
    
    The clocksource reference data was updated with the TSC from CPU0 and
    the value which is read from TSC on CPU1 is less than the reference
    data. This results in a huge delta value due to the unsigned
    subtraction of the TSC value and the reference value. This algorithm
    can not be changed due to the support of wrapping clock sources like
    pm timer.
    
    The huge delta is converted to nanoseconds and added to xtime, which
    is then observable by the caller. The next gettimeofday call on CPU1
    will show the correct time again as now the TSC has advanced above the
    reference value.
    
    To prevent this TSC specific wreckage we need to compare the TSC value
    against the reference value and return the latter when it is larger
    than the actual TSC value.
    
    I pondered to mark the TSC unstable when the readout is smaller than
    the reference value, but this would render an otherwise good and fast
    clocksource unusable without a real good reason.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit e8f696e9daa00e52b9c7ad1822fcda354d0baabd
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Mar 26 18:35:10 2008 +0000

    NOHZ: reevaluate idle sleep length after add_timer_on()
    
    upstream commit: 06d8308c61e54346585b2691c13ee3f90cb6fb2f
    
    add_timer_on() can add a timer on a CPU which is currently in a long
    idle sleep, but the timer wheel is not reevaluated by the nohz code on
    that CPU. So a timer can be delayed for quite a long time. This
    triggered a false positive in the clocksource watchdog code.
    
    To avoid this we need to wake up the idle CPU and enforce the
    reevaluation of the timer wheel for the next timer event.
    
    Add a function, which checks a given CPU for idle state, marks the
    idle task with NEED_RESCHED and sends a reschedule IPI to notify the
    other CPU of the change in the timer wheel.
    
    Call this function from add_timer_on().
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Acked-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>
    --
     include/linux/sched.h |    6 ++++++
     kernel/sched.c        |   43 +++++++++++++++++++++++++++++++++++++++++++
     kernel/timer.c        |   10 +++++++++-
     3 files changed, 58 insertions(+), 1 deletion(-)

commit 73e3e6481f56b3b5b618671a8d32b19a35f84316
Merge: 4adeaaf51ebc 6993fc5bbc5d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 18 08:37:41 2008 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/tglx/linux-2.6-hrt
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/tglx/linux-2.6-hrt:
      clocksource: make clocksource watchdog cycle through online CPUs
      Documentation: move timer related documentation to a single place
      clockevents: optimise tick_nohz_stop_sched_tick() a bit
      locking: remove unused double_spin_lock()
      hrtimers: simplify lockdep handling
      timers: simplify lockdep handling
      posix-timers: fix shadowed variables
      timer_list: add annotations to workqueue.c
      hrtimer: use nanosleep specific restart_block fields
      hrtimer: add nanosleep specific restart_block member

commit 9732b6112343df2872518ec6701c8ef729310a05
Merge: 9e9abecfc0ff 1a9a3e76dde1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 18 08:37:01 2008 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/mingo/linux-2.6-kgdb
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/mingo/linux-2.6-kgdb:
      kgdb: always use icache flush for sw breakpoints
      kgdb: fix SMP NMI kgdb_handle_exception exit race
      kgdb: documentation fixes
      kgdb: allow static kgdbts boot configuration
      kgdb: add documentation
      kgdb: Kconfig fix
      kgdb: add kgdb internal test suite
      kgdb: fix several kgdb regressions
      kgdb: kgdboc pl011 I/O module
      kgdb: fix optional arch functions and probe_kernel_*
      kgdb: add x86 HW breakpoints
      kgdb: print breakpoint removed on exception
      kgdb: clocksource watchdog
      kgdb: fix NMI hangs
      kgdb: fix kgdboc dynamic module configuration
      kgdb: document parameters
      x86: kgdb support
      consoles: polling support, kgdboc
      kgdb: core
      uaccess: add probe_kernel_write()

commit 7c3078b637882303b1dcf6a16229d0e35f6b60a5
Author: Jason Wessel <jason.wessel@windriver.com>
Date:   Fri Feb 15 14:55:54 2008 -0600

    kgdb: clocksource watchdog
    
    In order to not trip the clocksource watchdog, kgdb must touch the
    clocksource watchdog on the return to normal system run state.
    
    Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit ad48ce74f70a201c4c1cf3b4e8f6b6203a2e4a8d
Author: Andrew Victor <linux@maxim.org.za>
Date:   Wed Apr 16 20:43:49 2008 +0100

    [ARM] 4989/1: [AT91] SAM9 ClockSource / ClockEvents
    
    Update AT91SAM9/CAP9 PIT driver to use generic time and clockevent
    infrastructure:
    
     - Clocksource gives sub-microsecond timestamp precision, assuming
     memory is clocked at over 16 MHz.  It's less than a 32 bit counter,
     unless it's is also generating IRQs.
    
     - Clockevent device supports periodic mode only; no oneshot
     support from this hardware.  No IRQs generated unless it's the
     active clocksource.
    
    Later, another timer (probably from a TC module) can provide a oneshot
    clockevent device to get NO_HZ and High-Res-Timer behavior.
    
    This also updates the timekeeping to use the actual master clock rate
    on the system, instead of compile-time <asm/arch/timex.h> constants
    matching what Atmel's EK boards use.  (Product boards may well differ!)
    
    Plus cleanup:  rename "*_timer*" symbols to "*_pit*" (there are other
    timers, but only one PIT); shorter lines; remove needless CPP stuff;
    make several symbols static; etc.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Andrew Victor <linux@maxim.org.za>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 6993fc5bbc5d63ccd55985b39c34417e430e75e9
Author: Andi Kleen <ak@suse.de>
Date:   Wed Jan 30 13:30:02 2008 +0100

    clocksource: make clocksource watchdog cycle through online CPUs
    
    This way it checks if the clocks are synchronized between CPUs too.
    This might be able to detect slowly drifting TSCs which only
    go wrong over longer time.
    
    Signed-off-by: Andi Kleen <ak@suse.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 73e87e02ec484ac459c4be262ab76960b89dc019
Author: Oliver Hartkopp <oliver@hartkopp.net>
Date:   Tue Apr 15 19:29:14 2008 -0700

    CAN: use hrtimers in can-bcm protocol
    
    Make use of hrtimers to support high resolution capabilities, when
    provided by the system clocksource.
    
    The conversion to hrtimers additionally discovered and solved an
    unlikely race condition that has been reproduced under (unrealistic)
    massive receive load, which can only be produced on vcan software devices.
    
    [ Fix printf format warnings on 64-bit -DaveM ]
    
    Signed-off-by: Oliver Hartkopp <oliver@hartkopp.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit caa97963a5d9042af15728bcd22ee5a8900dc0e9
Author: Kevin Hilman <khilman@mvista.com>
Date:   Wed Dec 12 18:25:56 2007 -0800

    ARM: OMAP: TimerMPU: Remove unused cycles-to-nsec conversions
    
    These are no longer used and similar conversions are provided
    by the clocksource/clockevent code.
    
    Signed-off-by: Kevin Hilman <khilman@mvista.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit f258b0c6fa6ca653c7f4e6e2846dbb7ed3af3446
Author: Kevin Hilman <khilman@mvista.com>
Date:   Mon Nov 12 23:24:03 2007 -0800

    ARM: OMAP: Timer32K: Move 32k-based sched_clock() to common code
    
    Since 32k timer code is moving to OMAP1 specific dir, move the
    32k-based sched_clock() into common code where it is based on the 32k
    sync counter and can be used even when using MPU timer.
    
    While moving, change the ticks-to-nsecs conversion to use the helper
    functions provided by clocksource.h.
    
    Also removed the unused ticks_to_usec, leaving only ticks_to_nsec.
    
    Signed-off-by: Kevin Hilman <khilman@mvista.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 5a3a388fbefac3705dfcde16c93fc81e6fd9378f
Author: Kevin Hilman <khilman@mvista.com>
Date:   Mon Nov 12 23:24:02 2007 -0800

    ARM: OMAP: Timer32K: Re-organize duplicated 32k-timer code
    
    On OMAP2/3, the gp-timer code can be used for a 32kHz timer simply by
    setting the source to be the 32k clock instead of sys_clk.
    
    This patch uses the mach-omap2/timer-gp.c code for 32kHz timer on
    OMAP2, moving the logic into mach-omap2/timer-gp.c, and not using
    plat-omap/timer32k.c which, for OMAP2, is redundant with the timer-gp
    code.
    
    Also, if CONFIG_OMAP_32K_TIMER is enabled, the gptimer-based
    clocksource is not used.  Instead the default 32k sync counter is used
    as the clocksource (see the clocksource in plat-omap/common.c.)  This
    is important for sleep/suspend so there is a valid counter during
    sleep.  Note that the suspend/sleep code needs fixing to check for
    overflows of this counter.
    
    In addition, the OMAP2/3 details are removed from timer32k.c leaving
    that with only OMAP1 specifics.  A follow-up patch will move it from
    plat-omap common code to mach-omap1.
    
    Signed-off-by: Kevin Hilman <khilman@mvista.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 47001d603375f857a7fab0e9c095d964a1ea0039
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Apr 1 19:45:18 2008 +0200

    x86: tsc prevent time going backwards
    
    We already catch most of the TSC problems by sanity checks, but there
    is a subtle bug which has been in the code for ever. This can cause
    time jumps in the range of hours.
    
    This was reported in:
         http://lkml.org/lkml/2007/8/23/96
    and
         http://lkml.org/lkml/2008/3/31/23
    
    I was able to reproduce the problem with a gettimeofday loop test on a
    dual core and a quad core machine which both have sychronized
    TSCs. The TSCs seems not to be perfectly in sync though, but the
    kernel is not able to detect the slight delta in the sync check. Still
    there exists an extremly small window where this delta can be observed
    with a real big time jump. So far I was only able to reproduce this
    with the vsyscall gettimeofday implementation, but in theory this
    might be observable with the syscall based version as well.
    
    CPU 0 updates the clock source variables under xtime/vyscall lock and
    CPU1, where the TSC is slighty behind CPU0, is reading the time right
    after the seqlock was unlocked.
    
    The clocksource reference data was updated with the TSC from CPU0 and
    the value which is read from TSC on CPU1 is less than the reference
    data. This results in a huge delta value due to the unsigned
    subtraction of the TSC value and the reference value. This algorithm
    can not be changed due to the support of wrapping clock sources like
    pm timer.
    
    The huge delta is converted to nanoseconds and added to xtime, which
    is then observable by the caller. The next gettimeofday call on CPU1
    will show the correct time again as now the TSC has advanced above the
    reference value.
    
    To prevent this TSC specific wreckage we need to compare the TSC value
    against the reference value and return the latter when it is larger
    than the actual TSC value.
    
    I pondered to mark the TSC unstable when the readout is smaller than
    the reference value, but this would render an otherwise good and fast
    clocksource unusable without a real good reason.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 61434392f797cf89872bda87dff8b3395edf4108
Merge: 0e45adb8f537 f9e8b7826080
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 1 11:31:31 2008 -0700

    Merge branch 'upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/ralf/upstream-linus
    
    * 'upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/ralf/upstream-linus:
      [MIPS] XSS1500: Fix compilation
      [MIPS] Bigsur: make defconfig more useful.
      [MIPS] Alchemy: work around clock misdetection on early Au1000
      [MIPS] Add missing 4KEC TLB refill handler
      [MIPS] BCM1480: Fix PCI/HT IO access
      [MIPS] Fix the installation condition of MIPS clocksource
      [MIPS] Check for GCC r10k-cache-barrier support
      [MIPS] I8253: Export i2853_lock to modules.
      [MIPS] VPE loader: Check result of memory allocation.

commit 447cdf2628b59aa513a42785450b348dced26d8a
Author: Yoichi Yuasa <yoichi_yuasa@tripeaks.co.jp>
Date:   Wed Mar 12 23:50:02 2008 +0900

    [MIPS] Fix the installation condition of MIPS clocksource
    
    Signed-off-by: Yoichi Yuasa <yoichi_yuasa@tripeaks.co.jp>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 8f404faa72f4e458e7bd81ac75ce55ae829e953d
Merge: 729eb528c7e1 06d8308c61e5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 26 11:29:35 2008 -0700

    Merge branch 'master' of git://git.kernel.org/pub/scm/linux/kernel/git/tglx/linux-2.6-hrt
    
    * 'master' of git://git.kernel.org/pub/scm/linux/kernel/git/tglx/linux-2.6-hrt:
      NOHZ: reevaluate idle sleep length after add_timer_on()
      clocksource: revert: use init_timer_deferrable for clocksource_watchdog

commit 06d8308c61e54346585b2691c13ee3f90cb6fb2f
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sat Mar 22 09:20:24 2008 +0100

    NOHZ: reevaluate idle sleep length after add_timer_on()
    
    add_timer_on() can add a timer on a CPU which is currently in a long
    idle sleep, but the timer wheel is not reevaluated by the nohz code on
    that CPU. So a timer can be delayed for quite a long time. This
    triggered a false positive in the clocksource watchdog code.
    
    To avoid this we need to wake up the idle CPU and enforce the
    reevaluation of the timer wheel for the next timer event.
    
    Add a function, which checks a given CPU for idle state, marks the
    idle task with NEED_RESCHED and sends a reschedule IPI to notify the
    other CPU of the change in the timer wheel.
    
    Call this function from add_timer_on().
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Acked-by: Ingo Molnar <mingo@elte.hu>
    Cc: stable@kernel.org
    
    --
     include/linux/sched.h |    6 ++++++
     kernel/sched.c        |   43 +++++++++++++++++++++++++++++++++++++++++++
     kernel/timer.c        |   10 +++++++++-
     3 files changed, 58 insertions(+), 1 deletion(-)

commit 898a19de1502649877091b398229026b4142c0e2
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Mar 25 09:01:51 2008 +0100

    clocksource: revert: use init_timer_deferrable for clocksource_watchdog
    
    Revert
    
    commit 1077f5a917b7c630231037826b344b2f7f5b903f
    Author: Parag Warudkar <parag.warudkar@gmail.com>
    Date:   Wed Jan 30 13:30:01 2008 +0100
    
        clocksource.c: use init_timer_deferrable for clocksource_watchdog
    
        clocksource_watchdog can use a deferrable timer - reduces wakeups from
        idle per second.
    
    The watchdog timer needs to run with the specified interval. Otherwise
    it will miss the possible wrap of the watchdog clocksource.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@kernel.org

commit 96bcf458cbc71fc08f4d10e0b5bf1b18702b2344
Author: Zbigniew Luszpinski <zbiggy@o2.pl>
Date:   Wed Mar 19 15:51:50 2008 +0100

    x86: hpet clock enable quirk on nVidia nForce 430
    
    this patch allows hpet=force on nVidia nForce 430 southbridge.
    This patch was tested by me on my old Asus A8N-VM CSM (where bios does not
    support hpet and does not advertise it via acpi entry). My nForce430 version:
    lspci -nn | grep LPC
    00:0a.0 ISA bridge [0601]: nVidia Corporation MCP51 LPC Bridge [10de:0260]
    (rev a2)
    
    Kernel 2.6.24.3 after patching and using hpet=force reports this:
    dmesg | grep -i hpet
    Kernel command line: root=/dev/sda8 ro vga=773 video=vesafb:mtrr:4,ywrap
    vt.default_utf8=0 hpet=force
    Force enabled HPET at base address 0xfed00000
    hpet clockevent registered
    Time: hpet clocksource has been installed.
    
    grep -i hpet /proc/timer_list
    Clock Event Device: hpet
     set_next_event: hpet_legacy_next_event
     set_mode:       hpet_legacy_set_mode
    
    grep Clock /proc/timer_list (before patching)
    Clock Event Device: pit
    Clock Event Device: lapic
    
    grep Clock /proc/timer_list (after patching)
    Clock Event Device: hpet
    Clock Event Device: lapic
    
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 3150e63df41450a795bbd0bd98a8e70da74e0285
Author: Andrew Morton <akpm@linux-foundation.org>
Date:   Wed Mar 19 17:01:08 2008 -0700

    revert "clocksource: make clocksource watchdog cycle through online CPUs"
    
    Revert commit 1ada5cba6a0318f90e45b38557e7b5206a9cba38 ("clocksource:
    make clocksource watchdog cycle through online CPUs") due to the
    regression reported by Gabriel C at
    
            http://lkml.org/lkml/2008/2/24/281
    
    (short vesion: it makes TSC be marked as always unstable on his
    machine).
    
    Cc: Andi Kleen <ak@suse.de>
    Acked-by: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Robert Hancock <hancockr@shaw.ca>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Cc: Gabriel C <nix.or.die@googlemail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 299601cfc0aabbabf82fca50652b7290cce7eb00
Merge: 0509ad5e1a7d 69e634f1e27c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 12 13:04:11 2008 -0700

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus:
      [MIPS] Clocksource: Only install r4k counter as clocksource if present.
      [MIPS] Lasat: fix LASAT_CASCADE_IRQ
      [MIPS] Delete leftovers of old pcspeaker support.
      [MIPS] BCM1480: Init pci controller io_map_base
      [MIPS] Yosemite: Fix a few more section reference bugs.
      [MIPS] Fix yosemite build error
      [MIPS] Fix loads of section missmatches
      [MIPS] IP27: Tighten up CPU description to fix warnings.
      [MIPS] Fix plat_ioremap for JMR3927
      [MIPS] Export __ucmpdi2 to modules.
      [MIPS] Fix typo in comment
      [MIPS] Use KBUILD_DEFCONFIG
      [MIPS] Allow 48Hz to be selected if CONFIG_SYS_SUPPORTS_ARBIT_HZ is set.
      [MIPS] Added missing cases for rdhwr emulation
      [MIPS] Alchemy: Fix ids in Alchemy db dma device table

commit 69e634f1e27c8e5b954ea4be2d05dd744cabc0bc
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Wed Mar 12 13:58:10 2008 +0000

    [MIPS] Clocksource: Only install r4k counter as clocksource if present.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 3fabc55f34b72720e8a10aa442bd3415a211edb3
Author: Rusty Russell <rusty@rustcorp.com.au>
Date:   Tue Mar 11 09:35:56 2008 -0500

    lguest: Sanitize the lguest clock.
    
    Now the TSC code handles a zero return from calculate_cpu_khz(),
    lguest can simply pass through the value it gets from the Host: if
    non-zero, all the normal TSC code applies.
    
    Otherwise (or if the Host really doesn't support TSC), the clocksource
    code will fall back to the slower but reasonable lguest clock.
    
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

commit 10a398d04c4a1fc395840f4d040493375f562302
Author: Roman Zippel <zippel@linux-m68k.org>
Date:   Tue Mar 4 15:14:26 2008 -0800

    time: remove obsolete CLOCK_TICK_ADJUST
    
    The first version of the ntp_interval/tick_length inconsistent usage patch was
    recently merged as bbe4d18ac2e058c56adb0cd71f49d9ed3216a405
    
    http://git.kernel.org/gitweb.cgi?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=bbe4d18ac2e058c56adb0cd71f49d9ed3216a405
    
    While the fix did greatly improve the situation, it was correctly pointed out
    by Roman that it does have a small bug: If the users change clocksources after
    the system has been running and NTP has made corrections, the correctoins made
    against the old clocksource will be applied against the new clocksource,
    causing error.
    
    The second attempt, which corrects the issue in the NTP_INTERVAL_LENGTH
    definition has also made it up-stream as commit
    e13a2e61dd5152f5499d2003470acf9c838eab84
    
    http://git.kernel.org/gitweb.cgi?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=e13a2e61dd5152f5499d2003470acf9c838eab84
    
    Roman has correctly pointed out that CLOCK_TICK_ADJUST is calculated
    based on the PIT's frequency, and isn't really relevant to non-PIT
    driven clocksources (that is, clocksources other then jiffies and pit).
    
    This patch reverts both of those changes, and simply removes
    CLOCK_TICK_ADJUST.
    
    This does remove the granularity error correction for users of PIT and Jiffies
    clocksource users, but the granularity error but for the majority of users, it
    should be within the 500ppm range NTP can accommodate for.
    
    For systems that have granularity errors greater then 500ppm, the
    "ntp_tick_adj=" boot option can be used to compensate.
    
    [johnstul@us.ibm.com: provided changelog]
    [mattilinnanvuori@yahoo.com: maek ntp_tick_adj static]
    Signed-off-by: Roman Zippel <zippel@linux-m68k.org>
    Acked-by: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Matti Linnanvuori <mattilinnanvuori@yahoo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: mingo@elte.hu
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 4d243f92e48a7913938f48fa9ebea5239168bb11
Author: David Brownell <david-b@pacbell.net>
Date:   Fri Feb 22 17:28:37 2008 -0800

    atmel_tc clocksource/clockevent code
    
    Clocksource and clockevent device based on the Atmel TC blocks.
    
    The clockevent device handles both periodic and oneshot modes, so this
    enables NO_HZ and high res timers on some platforms that previously
    couldn't use those mechanisms.
    
    This works on both AVR32 and AT91 chips, given relevant patches for
    tclib support (always) and clockevents (or else this will only look
    like a higher precision clocksource).  It's an updated and modularized
    version of an AT91-only patch that has circulated for some time now.
    
    Changes relative to the original patch:
      * Update to use new tclib API
      * Replace open-coded do-while loop using goto with a real do-while loop
      * Minor irq handler optimization: Load register base address from
        dev_id instead of a global variable.
      * Aggressively turn off clocks when the clockevent isn't being used
      * Include the clockevent code on AT91RM9200 as well. The rating is
        lower than the System Timer, so the clock will usually stay off.
      * Don't assume that the number of clocks is always equal to the
        number of irqs.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Signed-off-by: Haavard Skinnemoen <hskinnemoen@atmel.com>

commit e13a2e61dd5152f5499d2003470acf9c838eab84
Author: John Stultz <johnstul@us.ibm.com>
Date:   Sun Feb 10 10:48:03 2008 +0100

    ntp: correct inconsistent interval/tick_length usage
    
    clocksource initialization and error accumulation.  This corrects a 280ppm
    drift seen on some systems using acpi_pm, and affects other clocksources as
    well (likely to a lesser degree).
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 818c357802e2791880057fe752dc9ce9e210f772
Author: Li Zefan <lizf@cn.fujitsu.com>
Date:   Fri Feb 8 04:19:23 2008 -0800

    clocksource: remove redundant code
    
    Flag CLOCK_SOURCE_WATCHDOG is cleared twice.  Note clocksource_change_rating()
    won't do anyting with the cs flag.
    
    Signed-off-by: Li Zefan <lizf@cn.fujitsu.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5e2cb1018a8a583b83d56c80f46507da6f3f2b57
Author: Miao Xie <miaox@cn.fujitsu.com>
Date:   Wed Feb 6 01:36:53 2008 -0800

    time: fix sysfs_show_{available,current}_clocksources() buffer overflow problem
    
    I found that there is a buffer overflow problem in the following code.
    
    Version:        2.6.24-rc2,
    File:           kernel/time/clocksource.c:417-432
    --------------------------------------------------------------------
    static ssize_t
    sysfs_show_available_clocksources(struct sys_device *dev, char *buf)
    {
            struct clocksource *src;
            char *curr = buf;
    
            spin_lock_irq(&clocksource_lock);
            list_for_each_entry(src, &clocksource_list, list) {
                    curr += sprintf(curr, "%s ", src->name);
            }
            spin_unlock_irq(&clocksource_lock);
    
            curr += sprintf(curr, "\n");
    
            return curr - buf;
    }
    -----------------------------------------------------------------------
    
    sysfs_show_current_clocksources() also has the same problem though in practice
    the size of current clocksource's name won't exceed PAGE_SIZE.
    
    I fix the bug by using snprintf according to the specification of the kernel
    (Version:2.6.24-rc2,File:Documentation/filesystems/sysfs.txt)
    
    Fix sysfs_show_available_clocksources() and sysfs_show_current_clocksources()
    buffer overflow problem with snprintf().
    
    Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
    Cc: WANG Cong <xiyou.wangcong@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 9ef9dc69d4167276c04590d67ee55de8380bc1ad
Merge: 2c8296f8cf0e 0d899e1b0000
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Feb 4 15:29:53 2008 -0800

    Merge branch 'for-linus' of master.kernel.org:/home/rmk/linux-2.6-arm
    
    * 'for-linus' of master.kernel.org:/home/rmk/linux-2.6-arm: (44 commits)
      [ARM] 4822/1: RealView: Change the REALVIEW_MPCORE configuration option
      [ARM] 4821/1: RealView: Remove the platform dependencies from localtimer.c
      [ARM] 4820/1: RealView: Select the timer IRQ at run-time
      [ARM] 4819/1: RealView: Fix entry-macro.S to work with multiple platforms
      [ARM] 4818/1: RealView: Add core-tile detection
      [ARM] 4817/1: RealView: Move the AMBA resource definitions to realview_eb.c
      [ARM] 4816/1: RealView: Move the platform-specific definitions into board-eb.h
      [ARM] 4815/1: RealView: Add clockevents suport for the local timers
      [ARM] 4814/1: RealView: Add broadcasting clockevents support for ARM11MPCore
      [ARM] 4813/1: Add SMP helper functions for clockevents support
      [ARM] 4812/1: RealView: clockevents support for the RealView platforms
      [ARM] 4811/1: RealView: clocksource support for the RealView platforms
      [ARM] 4736/1: Export atags to userspace and allow kexec to use customised atags
      [ARM] 4798/1: pcm027: fix missing header file
      [ARM] 4803/1: pxa: fix building issue of poodle.c caused by patch 4737/1
      [ARM] 4801/1: pxa: fix building issues of missing pxa2xx-regs.h
      [ARM] pxa: introduce sysdev for pxa3xx static memory controller
      [ARM] pxa: add preliminary suspend/resume code for pxa3xx
      [ARM] pxa: introduce sysdev for GPIO register saving/restoring
      [ARM] pxa: introduce sysdev for IRQ register saving/restoring
      ...

commit 0d899e1b0000ddf78a75d7dcf9a9029d6f7f8091
Merge: a78de2f704a0 43816bcb7262 85e6c7a7dbdb 4cd9d6f774c7 c9a28fa7b9ac 41579f49da23
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Mon Feb 4 17:54:39 2008 +0000

    Merge branches 'at91', 'ixp', 'master', 'misc', 'pxa' and 'realview' into devel
    
    * at91:
      [ARM] 4802/1: Fix typo and remove vague comment
      [ARM] 4660/3: at91: allow selecting UART for early kernel messages
      [ARM] 4739/1: at91sam9263: make gpio bank C and D irqs work
    
    * ixp:
      [ARM] 4809/2: ixp4xx: Merge dsmg600-power.c into dsmg600-setup.c
      [ARM] 4808/2: ixp4xx: Merge nas100d-power.c into nas100d-setup.c
      [ARM] 4807/2: ixp4xx: Merge nslu2-power.c into nslu2-setup.c
      [ARM] 4806/1: ixp4xx: Ethernet support for the nslu2 and nas100d boards
      [ARM] 4805/1: ixp4xx: Use leds-gpio driver instead of IXP4XX-GPIO-LED driver
      [ARM] 4715/2: Ethernet support for IXDP425 boards
      [ARM] 4714/2: Headers for IXP4xx built-in Ethernet and WAN drivers
      [ARM] 4713/3: Adds drivers for IXP4xx QMgr and NPE features
      [ARM] 4712/2: Adds functions to read and write IXP4xx "feature" bits
      [ARM] 4774/2: ixp4xx: Register dsmg600 rtc i2c_board_info
      [ARM] 4773/2: ixp4xx: Register nas100d rtc i2c_board_info
      [ARM] 4772/2: ixp4xx: Register nslu2 rtc i2c_board_info
      [ARM] 4769/2: ixp4xx: Button updates for the dsmg600 board
      [ARM] 4768/2: ixp4xx: Button and LED updates for the nas100d board
      [ARM] 4767/2: ixp4xx: Add bitops.h include to io.h
      [ARM] 4766/2: ixp4xx: Update ixp4xx_defconfig, enabling all supported boards
    
    * master:
      [ARM] 4810/1: - Fix 'section mismatch' building warnings
      [ARM] xtime_seqlock: fix more ARM machines for xtime deadlocking
      [ARM] 21285 serial: fix build error
    
    * misc:
      [ARM] 4736/1: Export atags to userspace and allow kexec to use customised atags
    
    * pxa:
      [ARM] 4798/1: pcm027: fix missing header file
      [ARM] 4803/1: pxa: fix building issue of poodle.c caused by patch 4737/1
      [ARM] 4801/1: pxa: fix building issues of missing pxa2xx-regs.h
      [ARM] pxa: introduce sysdev for pxa3xx static memory controller
      [ARM] pxa: add preliminary suspend/resume code for pxa3xx
      [ARM] pxa: introduce sysdev for GPIO register saving/restoring
      [ARM] pxa: introduce sysdev for IRQ register saving/restoring
      [ARM] pxa: fix the warning of undeclared "struct pxaohci_platform_data"
      [ARM] pxa: change set_kset_name() to direct name assignment for MFP sysclass
    
    * realview:
      [ARM] 4822/1: RealView: Change the REALVIEW_MPCORE configuration option
      [ARM] 4821/1: RealView: Remove the platform dependencies from localtimer.c
      [ARM] 4820/1: RealView: Select the timer IRQ at run-time
      [ARM] 4819/1: RealView: Fix entry-macro.S to work with multiple platforms
      [ARM] 4818/1: RealView: Add core-tile detection
      [ARM] 4817/1: RealView: Move the AMBA resource definitions to realview_eb.c
      [ARM] 4816/1: RealView: Move the platform-specific definitions into board-eb.h
      [ARM] 4815/1: RealView: Add clockevents suport for the local timers
      [ARM] 4814/1: RealView: Add broadcasting clockevents support for ARM11MPCore
      [ARM] 4813/1: Add SMP helper functions for clockevents support
      [ARM] 4812/1: RealView: clockevents support for the RealView platforms
      [ARM] 4811/1: RealView: clocksource support for the RealView platforms

commit 85802afeb010502471f64dccf9839f60995c8579
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Mon Feb 4 17:24:54 2008 +0100

    [ARM] 4811/1: RealView: clocksource support for the RealView platforms
    
    The patch updates the RealView platform code to use the generic
    clocksource infrastructure for basic time keeping. Based on the
    Versatile implementation by Kevin Hilman.
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit dff244af014144e4ac87dfc5b6e450dc8832710e
Author: Alistair John Strachan <alistair@devzero.co.uk>
Date:   Wed Jan 30 13:33:39 2008 +0100

    x86: force enable HPET on (some?) ICH9 boards
    
    Some consumer ICH9 boards (such as the Abit IP35 Pro) do not provide a BIOS
    option for enabling the HPET. The same ICH workaround used for 6,7,8 can be
    applied to 9. Here I enable the only PCI id that was visible on my system.
    
    I have confirmed the HPETs work both from userspace and as a clocksource for
    the running kernel (2.6.24 here) after applying this patch.
    
     Force enabled HPET at base address 0xfed00000
     hpet clockevent registered
     hpet0: at MMIO 0xfed00000, IRQs 2, 8, 0, 0
     hpet0: 4 64-bit timers, 14318180 Hz
    
    Signed-off-by: Alistair John Strachan <alistair@devzero.co.uk>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 4e87173eacfd0d798aeeba14026893797826bc93
Author: Glauber de Oliveira Costa <gcosta@redhat.com>
Date:   Wed Jan 30 13:31:03 2008 +0100

    x86: split get_cycles_sync
    
    This patch splits get_cycles_sync() into  __get_cycles_sync(),
    and the rdtscll part. Paravirt guests cannot issue rdtscl directly,
    as it involves a function call in vdso area.
    
    So, using the __get_cycles_sync() base, we introduce vget_cycles_sync,
    which then calls the native version of rdtscll. Ideally, however, a guest
    should define its own clocksource, together with a vread function
    
    Signed-off-by: Glauber de Oliveira Costa <gcosta@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit bbe4d18ac2e058c56adb0cd71f49d9ed3216a405
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed Jan 30 13:30:03 2008 +0100

    NTP: correct inconsistent ntp interval/tick_length usage
    
    I recently noticed on one of my boxes that when synched with an NTP
    server, the drift value reported for the system was ~283ppm. While in
    some cases, clock hardware can be that bad, it struck me as unusual as
    the system was using the acpi_pm clocksource, which is one of the more
    trustworthy and accurate clocksources on x86 hardware.
    
    I brought up another system and let it sync to the same NTP server, and
    I noticed a similar 280some ppm drift.
    
    In looking at the code, I found that the acpi_pm's constant frequency
    was being computed correctly at boot-up, however once the system was up,
    even without the ntp daemon running, the clocksource's frequency was
    being modified by the clocksource_adjust() function.
    
    Digging deeper, I realized that in the code that keeps track of how much
    the clocksource is skewing from the ntp desired time, we were using
    different lengths to establish how long an time interval was.
    
    The clocksource was being setup with the following interval:
            NTP_INTERVAL_LENGTH = NSEC_PER_SEC/NTP_INTERVAL_FREQ
    
    While the ntp code was using the tick_length_base value:
            tick_length_base ~= (tick_usec * NSEC_PER_USEC * USER_HZ)
                                            /NTP_INTERVAL_FREQ
    
    The subtle difference is:
            (tick_usec * NSEC_PER_USEC * USER_HZ) != NSEC_PER_SEC
    
    This difference in calculation was causing the clocksource correction
    code to apply a correction factor to the clocksource so the two
    intervals were the same, however this results in the actual frequency of
    the clocksource to be made incorrect. I believe this difference would
    affect all clocksources, although to differing degrees depending on the
    clocksource resolution.
    
    The issue was introduced when my HZ free ntp patch landed in 2.6.21-rc1,
    so my apologies for the mistake, and for not noticing it until now.
    
    The following patch, corrects the clocksource's initialization code so
    it uses the same interval length as the code in ntp.c. After applying
    this patch, the drift value for the same system went from ~283ppm to
    only 2.635ppm.
    
    I believe this patch to be good, however it does affect all arches and
    I've only tested on x86, so some caution is advised. I do think it would
    be a likely candidate for a stable 2.6.24.x release.
    
    Any thoughts or feedback would be appreciated.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 1a0c009ac53de4a7664a1239936f0bc258133156
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jan 30 13:30:03 2008 +0100

    x86: unregister PIT clocksource when PIT is disabled
    
    The following scenario might leave PIT as a disfunctional clock source:
    
        PIT is registered as clocksource
        PM_TIMER is registered as clocksource and enables highres/dyntick mode
        PIT is switched to oneshot mode
        -> now the readout of PIT is bogus, but the user might select PIT
        via the sysfs override, which would break the box as the time
        readout is unusable.
    
    Unregister the PIT clocksource when the PIT clock event device is switched
    into shutdown / oneshot mode.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 4713e22ce81eb8b3353e16435362eb3d0ec95640
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jan 30 13:30:02 2008 +0100

    clocksource: add unregister function to disable unusable clocksources
    
    On x86 the PIT might become an unusable clocksource. Add an unregister
    function to provide a possibilty to remove the PIT from the list of
    available clock sources.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 316da3b3fc8efa9a5d2c99e0d449f01ff38c6aba
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jan 30 13:30:02 2008 +0100

    x86: restrict PIT clocksource usage
    
    PIT clocksource is registered unconditionally even when HPET is enabled
    or when PIT is replaced by the local APIC timer. In both cases PIT can
    not be used as it is stopped and the readout would be stale.
    
    Prevent registering PIT in those cases.
    
    patch depends on:
    
      x86: offer is_hpet_enabled() on !CONFIG_HPET_TIMER too
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 1ada5cba6a0318f90e45b38557e7b5206a9cba38
Author: Andi Kleen <ak@suse.de>
Date:   Wed Jan 30 13:30:02 2008 +0100

    clocksource: make clocksource watchdog cycle through online CPUs
    
    This way it checks if the clocks are synchronized between CPUs too.
    This might be able to detect slowly drifting TSCs which only
    go wrong over longer time.
    
    Signed-off-by: Andi Kleen <ak@suse.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 1077f5a917b7c630231037826b344b2f7f5b903f
Author: Parag Warudkar <parag.warudkar@gmail.com>
Date:   Wed Jan 30 13:30:01 2008 +0100

    clocksource.c: use init_timer_deferrable for clocksource_watchdog
    
    clocksource_watchdog can use a deferrable timer - reduces wakeups from
    idle per second.
    
    Signed-off-by: Parag Warudkar <parag.warudkar@gmail.com>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 1d76c2622813fbc692b0d323028cfef9ee36051a
Author: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
Date:   Wed Jan 30 13:30:01 2008 +0100

    clocksource: make CLOCKSOURCE_MASK bullet-proof
    
    Signed-off-by: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 9900485893c004245cbaeef050fe6ba5453a5925
Author: Vitaly Wool <vitalywool@gmail.com>
Date:   Sat Jan 12 16:03:40 2008 +0300

    [MIPS] pnx8xxx: clocksource cleanups
    
    Signed-off-by: Vitaly Wool <vitalywool@gmail.com>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 19ef9309273d26cb005cb23e6a370353dca91099
Author: Ingo Molnar <mingo@elte.hu>
Date:   Fri Jan 25 21:08:34 2008 +0100

    printk: use ktime_get()
    
    printk timestamps: use ktime_get().
    
    Some platforms have a functioning clocksource function only after
    they are done with early bootup, so delay this until out of
    SYSTEM_BOOTING state.
    
    it's also inherently safe now, as any bugs in this area will be
    caught by the printk recursion checks.
    
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 22fb53c943b0ad4f86639bccb7ad8753be8ce435
Merge: 8dab63761219 e452e94e21e8
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Fri Jan 11 11:48:00 2008 -0800

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus:
      [MIPS] Replace 40c7869b693b18412491fdcff64682215b739f9e kludge
      [MIPS] Lasat: Fix built in separate object directory.
      [MIPS] Malta: Fix software reset on big endian
      [MIPS] pnx8xxx: move to clocksource
      [MIPS] Wrong CONFIG option prevents setup of DMA zone.

commit 1b1c5f0d96eb05cf6cd4702dabf4e003eded08c2
Author: Vitaly Wool <vitalywool@gmail.com>
Date:   Thu Jan 10 17:10:05 2008 +0300

    [MIPS] pnx8xxx: move to clocksource
    
    This patch converts PNX8XXX system timer to clocksource restoring PNX8550
    support back to live.
    
    Signed-off-by: Vitaly Wool <vitalywool@gmail.com>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit ce202cbb9e0b623671e8ecb3d53afdd42b8e458f
Author: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
Date:   Fri Jan 4 23:38:31 2008 +0100

    [MIPS] Assume R4000/R4400 newer than 3.0 don't have the mfc0 count bug
    
    This seems as reasonable assumption and gets some SNI machines to work
    which currently must rely on the cp0 counter as clocksource.
    
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 552d2f841e3f0f45eac86ff93e230db0b0a67a99
Merge: 09cfd9298605 b1e3afa001db
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Mon Nov 26 19:05:19 2007 -0800

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus:
      [MIPS] vpe: Add missing "space"
      [MIPS] Compliment va_start() with va_end().
      [MIPS] IP22: Fix broken eeprom access by using __raw_readl/__raw_writel
      [MIPS] IP22: Fix broken EISA interrupt setup by switching to generic i8259
      [MIPS] 64-bit Sibyte kernels need DMA32.
      [MIPS] Only build r4k clocksource for systems that work ok with it.
      [MIPS] Handle R4000/R4400 mfc0 from count register.
      [MIPS] Fix possible hang in LL/SC futex loops.
      [MIPS] Fix context DSP context / TLS pointer switching bug for new threads.
      [MIPS] IP32: More interrupt renumbering fixes.
      [MIPS] time: MIPSsim's plat_time_init doesn't need to be irq safe.
      [MIPS] time: Fix negated condition in cevt-r4k driver.
      [MIPS] Fix pcspeaker build.

commit 940f6b48a130e0a33cb8bd397dd0e277166470ad
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Sat Nov 24 22:33:28 2007 +0000

    [MIPS] Only build r4k clocksource for systems that work ok with it.
    
    In particular as-is it's not suited for multicore and mutiprocessors
    systems where there is on guarantee that the counter are synchronized
    or running from the same clock at all.  This broke Sibyte and probably
    others since the "[MIPS] Handle R4000/R4400 mfc0 from count register."
    commit.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 5aa85c9fc49a6ce44dc10a42e2011bbde9dc445a
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Wed Nov 21 16:39:44 2007 +0000

    [MIPS] Handle R4000/R4400 mfc0 from count register.
    
    The R4000 and R4400 have an errata where if the cp0 count register is read
    in the exact moment when it matches the compare register no interrupt will
    be generated.
    
    This bug may be triggered if the cp0 count register is being used as
    clocksource and the compare interrupt as clockevent.  So a simple
    workaround is to avoid using the compare for both facilities on the
    affected CPUs.
    
    This is different from the workaround suggested in the old errata documents;
    at some opportunity probably the official version should be implemented
    and tested.  Another thing to find out is which processor versions
    exactly are affected.  I only have errata documents upto R4400 V3.0
    available so for the moment the code treats all R4000 and R4400 as broken.
    
    This is potencially a problem for some machines that have no other decent
    clocksource available; this workaround will cause them to fall back to
    another clocksource, worst case the "jiffies" source.

commit 40787d0099676c9923e31fbdb90422d5c97cdcd5
Merge: 3c72f526dfe2 72e510654c81
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Thu Nov 15 16:08:49 2007 -0800

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus:
      [MIPS] N32 needs to use the compat version of sys_nfsservctl.
      [MIPS] irq_cpu: use handle_percpu_irq handler to avoid dropping interrupts.
      [MIPS] Sibyte: Fix name of clocksource.
      [MIPS] SNI: s/achknowledge/acknowledge/
      [MIPS] Makefile: Fix canonical system names
      [MIPS] vpe: handle halting TCs in an errata safe way.
      [MIPS] Sibyte: Stop timers before programming next even.
      [MIPS] Sibyte: Increase minimum oneshot timer interval to two ticks.
      [MIPS] Lasat: Fix overlap of interrupt number ranges.
      [MIPS] SNI PCIT CPLUS: workaround for b0rked irq wiring of onboard PCI bus 1
      [MIPS] Fix shadow register support.
      [MIPS] Change get_cycles to always return 0.
      [MIPS] Fix typo in R3000 TRACE_IRQFLAGS code
      [MIPS] Sibyte: Replace use of removed IO_SPACE_BASE with IOADDR.
      [MIPS] iounmap if in vr41xx_pciu_init() pci clock is over 33MHz
      [MIPS] BCM1480: Remove duplicate acknowledge of timer interrupt.
      [MIPS] Sibyte: pin timer interrupt to their cores.
      [MIPS] Qemu: Add early printk, your friend in a cold night.
      [MIPS] Convert reference to mem_map to pfn_to_page().
      [MIPS] Sibyte: resurrect old cache hack.

commit f99f2cc9363a08cdbd6cfbe3f29234e3235d05e8
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Tue Nov 13 00:35:13 2007 +0000

    [MIPS] Sibyte: Fix name of clocksource.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit c11eef21aa119a41fa210b9693f2346997885bcf
Merge: 221d46841b93 d2cb0e6ecbe0
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Mon Nov 5 11:39:25 2007 -0800

    Merge branch 'for-linus' of git://git390.osdl.marist.edu/pub/scm/linux-2.6
    
    * 'for-linus' of git://git390.osdl.marist.edu/pub/scm/linux-2.6:
      [S390] tod clock: announce clocksource as perfect
      [S390] Rename "idle_time" attribute to "idle_time_us".
      [S390] Fix priority mistakes in drivers/s390/cio/cmf.c
      [S390] Fix memory detection.
      [S390] Fix compile on !CONFIG_SMP.
      [S390] device_schedule_callback() for dcssblk.
      [S390] Fix smsgiucv init on no iucv machines
      [S390] cio: use INIT_WORK to initialize struct work.

commit d2cb0e6ecbe0ef93ab36631cd17ec6cf92b69c5a
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Mon Nov 5 11:10:14 2007 +0100

    [S390] tod clock: announce clocksource as perfect
    
    The Time of Day clock is the standard time source for s390. It is
    - monotonic
    - allows very fast reading
    - architecture guarantees at least microsecond stepping
    - available as part of the architecture
    
    We should announce the rate of tod as 400 to be in sync with the
    description found in clocksource.h:
    "400-499:Perfect The ideal clocksource. A must-use where available."
    
    This change will prefer tod over less reliable clock sources.
    
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit d9eec1a5d6ae54b0f7562ffe07008a33ac39e8fe
Author: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
Date:   Wed Oct 31 01:21:03 2007 +0900

    [MIPS] time: Code cleanups
    
    * Do not include unnecessary headers.
    * Do not mention time.README.
    * Do not mention mips_timer_ack.
    * Make clocksource_mips static.  It is now dedicated to c0_timer.
    * Initialize clocksource_mips.read statically.
    * Remove null_hpt_read.
    * Remove an argument of plat_timer_setup.  It is just a placeholder.
    
    Signed-off-by: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 82798a17ad40df827d465329a20ace80497f9b32
Merge: db8185360d91 1a3b7920fe55
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Mon Oct 29 14:06:55 2007 -0700

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus: (34 commits)
      [MIPS] tb0219: Update copyright message.
      [MIPS] MT: Fix bug in multithreaded kernels.
      [MIPS] Alchemy: Remove CONFIG_TS_AU1X00_ADS7846 from defconfigs.
      Author: Ralf Baechle <ralf@linux-mips.org>
      [MIPS] sb1250: Enable GenBus IDE in defconfig.
      [MIPS] vmlinux.ld.S: correctly indent .data section
      [MIPS] c-r3k: Implement flush_cache_range()
      [MIPS] Store sign-extend register values for PTRACE_GETREGS
      [MIPS] Alchemy: Register platform devices
      [MIPS] Add len and addr validation for MAP_FIXED mappings.
      [MIPS] IRIX: Fix off-by-one error in signal compat code.
      [MIPS] time: Replace plat_timer_setup with modern APIs.
      [MIPS] time: Fix cut'n'paste bug in Sibyte clockevent driver.
      [MIPS] time: Make c0_compare_int_usable faster
      [MIPS] time: Fix cevt-r4k.c for 64-bit kernel
      [MIPS] Sibyte: Delete {sb1250,bcm1480}_steal_irq().
      [MIPS] txx9tmr clockevent/clocksource driver
      [MIPS] Add mips_hpt_frequency check to mips_clockevent_init().
      [MIPS] IP32: Fixes after interrupt renumbering.
      [MIPS] IP27: Fix slice logic to work for arbitrary number of slices.
      ...

commit 229f773ef4ee852ad7bfbe8e1238a2c35b2baa6f
Author: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
Date:   Thu Oct 25 01:34:09 2007 +0900

    [MIPS] txx9tmr clockevent/clocksource driver
    
    Convert jmr3927_clock_event_device to more generic
    txx9tmr_clock_event_device which supports one-shot mode.  The
    txx9tmr_clock_event_device can be used for TX49 too if the cp0 timer
    interrupt was not available.
    
    Convert jmr3927_hpt_read to txx9_clocksource driver which does not
    depends jiffies anymore.  The txx9_clocksource itself can be used for
    TX49, but normally TX49 uses higher precision clocksource_mips.
    
    Signed-off-by: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit f10f114f199dbcb9e1d6b5a0b36a34acf93f6179
Merge: 0c326331c8b1 dab969c00b8b
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Mon Oct 22 19:21:08 2007 -0700

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus:
      [MIPS] time: Make c0_compare_int_usable more bullet proof
      [MIPS] Kbuild: Use the new cc-cross-prefix feature.
      [MIPS] Fix include wrapper symbol to something sane.
      [MIPS] Malta: Delete dead code.
      [MIPS] time: Add GT641xx timer0 clockevent driver
      [MIPS] time: SMP-proofing of Sibyte clockevent/clocksource code.
      [MIPS] time: SMP/NUMA-proofing of IP27 HUB RT timer code.
      [MIPS] time: Fix calculation in clockevent_set_clock()

commit d04533650f64fe3367e180f3e488d92205152cd3
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Mon Oct 22 10:38:44 2007 +0100

    [MIPS] time: SMP-proofing of Sibyte clockevent/clocksource code.
    
    The BCM148 has 4 cores but there are also just 4 generic timers available
    so use the ZBbus cycle counter instead of it.  In addition the ZBbus
    counter also offers a much higher resolution and 64-bit counting so I'm
    considering a later complete conversion to it once I figure out if all
    members of the Sibyte SOC family support it - the docs seem to agree but
    the headers files seem to disagree ...
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 0a4908e19fd016d60403fc76cf38b2d08d21e2d2
Merge: 2843483d2eb0 6f75aaa72af1
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Fri Oct 19 12:01:22 2007 -0700

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus:
      [MIPS] Delete totally outdated Documentation/mips/time.README
      [MIPS] Kill duplicated setup_irq() for cp0 timer
      [MIPS] Sibyte: Finish conversion to modern time APIs.
      [MIPS] time: Helpers to compute clocksource/event shift and mult values.
      [MIPS] SMTC: Build fix.
      [MIPS] time: Delete dead code.
      [MIPS] MIPSsim: Strip defconfig file to the bones.

commit 2e1975868ac9d41211fcaa6f2c5e44c4e7ff9e5b
Author: Matthias Kaehlcke <matthias.kaehlcke@gmail.com>
Date:   Thu Oct 18 23:39:58 2007 -0700

    kernel/time/clocksource.c: Use list_for_each_entry instead of list_for_each
    
    kernel/time/clocksource.c: Convert list_for_each to
    list_for_each_entry in clocksource_resume(),
    sysfs_override_clocksource() and show_available_clocksources()
    
    Signed-off-by: Matthias Kaehlcke <matthias.kaehlcke@gmail.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 93c846f9047f392fc2335668a5234edfbddb7cdc
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Fri Oct 19 08:13:08 2007 +0100

    [MIPS] time: Helpers to compute clocksource/event shift and mult values.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 730e844d57693f464c7f9954a0f7102414164c3f
Author: Kyle McMartin <kyle@mcmartin.ca>
Date:   Thu Oct 18 00:03:45 2007 -0700

    [PARISC] Kill pointless variable use in time.c
    
    Clean up a pointless use of a variable in update_cr16_clocksource. It just
    looks silly.
    
    Signed-off-by: Kyle McMartin <kyle@mcmartin.ca>

commit 791a644a8d73a9b95515f074afbb3caa0a9964fa
Author: Jeff Dike <jdike@addtoit.com>
Date:   Tue Oct 16 01:27:25 2007 -0700

    uml: clocksource support
    
    Add clocksource support.
    
    Signed-off-by: Jeff Dike <jdike@linux.intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cef5975d453bbc1bbf29ceb7d80749feebc22a74
Author: Uwe Kleine-König <ukleinek@informatik.uni-freiburg.de>
Date:   Sun Sep 30 20:35:48 2007 +0100

    [ARM] 4592/1: ns9xxx: clocksource driver
    
    Signed-off-by: Uwe Kleine-König <ukleinek@informatik.uni-freiburg.de>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 5e802dfab7bbbee1e63607a3e6d1ceb78ec4ceeb
Author: David Brownell <david-b@pacbell.net>
Date:   Tue Jul 31 01:41:26 2007 +0100

    [ARM] 4539/1: clocksource and clockevents for at91rm9200
    
    GENERIC_TIME and GENERIC_CLOCKEVENTS support for the at91rm9200.
    
     - Oneshot mode (used for NO_HZ and high res timers) uses the
       alarm to emulate a real oneshot timer; the trickiest bit is
       how to avoid some lowlevel races.  Thanks to Remy Bohmer for
       various fixes to this code.
    
     - Tighten up periodic mode support using the PIT.
    
     - Streamline reads of the 32KHz counter.  Thanks to Marc Pignat
       for some testing results: the CRTR register has *very* odd
       behavior.  The reread appears to work around stranger glitches
       than just getting an old clock value (which would quickly
       self-correct).
    
     - Remove the rounding-up of tick_usec to 10.009 msec (32KiHz/100),
       since that no longer acts correct (time increases too fast).
    
    Note that the at91sam9 and at91x40 chips need other solutions,
    since they don't have the same system timer module.
    
    Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
    Acked-by: Bill Gatliff <bgat@billgatliff.com>
    Acked-by:Remy Bohmer <linux@bohmer.net>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 0190dae54de62fbb9ced75d134015266987eb6b8
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Oct 12 23:04:06 2007 +0200

    i386: prepare sharing the PIT code
    
    PIT clock events work already and the PIT handling is the same for
    i386 and x86_64. x86_64 does not support PIT as a clock source, so
    disable the PIT clocksource for x86_64.
    
    Use the i386 i8253.h include file for x86_64 as well to share the
    exports and the PIT constants.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Arjan van de Ven <arjan@linux.intel.com>

commit f5e0e93faf8421083853b2d7a217267f49e27cc3
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Oct 12 23:04:06 2007 +0200

    i386: prepare sharing the PIT code
    
    PIT clock events work already and the PIT handling is the same for
    i386 and x86_64. x86_64 does not support PIT as a clock source, so
    disable the PIT clocksource for x86_64.
    
    Prepare i8253.h to be shared with x8664
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Arjan van de Ven <arjan@linux.intel.com>

commit 89b2bbd69b89b4c5efdc112a88d72419bdeb8dfc
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Oct 12 23:04:06 2007 +0200

    x86_64: Select clocksource watchdog in Kconfig
    
    TSC must be verified by a continous and reliable clocksource to
    allow high resolution timers and or dynamic ticks.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Arjan van de Ven <arjan@linux.intel.com>

commit d865bea4dace1d42995a6cf552bc4863842623f4
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Thu Oct 11 23:46:10 2007 +0100

    [MIPS] i8253 PIT clocksource and clockevent drivers
    
    Derived from the i386 variant with a few x86 complexities chopped off.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 87b2335d6ef97e19ca19dbbb523673680a029e3f
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Thu Oct 11 23:46:10 2007 +0100

    [MIPS] IP27: Add clocksource drivers
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit cdec12aebe1b10aa58bebaa05bb697843154f7f9
Author: Paul Mackerras <paulus@samba.org>
Date:   Thu Oct 11 21:46:45 2007 +1000

    [POWERPC] Make clockevents work on PPC601 processors
    
    In testing the new clocksource and clockevent code on a PPC601
    processor, I discovered that the clockevent multiplier value for the
    decrementer clockevent was overflowing.  Because the RTCL register in
    the 601 effectively counts at 1GHz (it doesn't actually, but it
    increases by 128 every 128ns), and the shift value was 32, that meant
    the multiplier value had to be 2^32, which won't fit in an unsigned
    long on 32-bit.  The same problem would arise on any platform where
    the timebase frequency was 1GHz or more (not that we actually have any
    such machines today).
    
    This fixes it by reducing the shift value to 16.  Doing the
    calculations with a resolution of 2^-16 nanoseconds (15 femtoseconds)
    should be quite adequate.  :)
    
    Signed-off-by: Paul Mackerras <paulus@samba.org>

commit 4a4cfe3836916e12282ceb5c4bdd799dc71af567
Author: Tony Breeds <tony@bakeyournoodle.com>
Date:   Sat Sep 22 07:35:52 2007 +1000

    [POWERPC] Implement generic time of day clocksource for powerpc
    
    Signed-off-by: Tony Breeds <tony@bakeyournoodle.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

commit 3dffec45c2742961dd27f55aba426cb9cf3f0dcd
Author: S.Çağlar Onur <caglar@pardus.org.tr>
Date:   Wed Sep 26 12:15:33 2007 +0300

    Silent drivers/char/hpet.c build warnings on i386
    
    Following patch silents;
    
    ...
    drivers/char/hpet.c:72: warning: 'clocksource_hpet' defined but not used
    drivers/char/hpet.c:81: warning: 'hpet_clocksource' defined but not used
    ...
    
    build warnings on i386, they appeared after commit 3b2b64fd311c92f2137eb7cee7025794cd854057
    
    Signed-off-by: S.Çağlar Onur <caglar@pardus.org.tr>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    --
     drivers/char/hpet.c |    3 +++
     1 files changed, 3 insertions(+), 0 deletions(-)

commit 3b2b64fd311c92f2137eb7cee7025794cd854057
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Fri Aug 31 20:13:57 2007 -0700

    Do not use the ia64 clocksource on non-ia64 architectures
    
    The HPET clocksource in drivers/char/hpet.c was written as generic code
    for ia64, but it is not yet ready to replace the native HPET clocksource
    implementations that the i386/x86-64 architectures use.
    
    On x86[-64], trying to register this clocksource results in potentially
    multiple hpet-based clocksources being registered, and if the ia64 one
    is chosen on x86_64 some users have experienced hangs.
    
    Eventually all three architectures may end up using the same code, but
    that is not the case right now.
    
    Cc: John Stultz <johnstul@us.ibm.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Paolo Ornati <ornati@fastwebnet.it>
    Cc: Bob Picco <bob.picco@hp.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 37250097e1b730c30da1790e354c0da65e617043
Author: Rusty Russell <rusty@rustcorp.com.au>
Date:   Thu Aug 9 20:52:35 2007 +1000

    Fix non-TSC guest clocksource lockup
    
    lguest uses a host-supplied wallclock-based clocksource when the TSC
    is not reliable.  As this is already in nanoseconds, I naively used a
    multiplier of 1 and a shift of 0.
    
    But update_wall_time() in its infinite wisdom decides to adjust the
    clock a little (where does it think it's getting a more accurate time
    from?)
    
    It will happily tweak the multiplier... to 0, then -1.
    
    So the "fix" is to use a shift of 22 like everyone else, and a
    multiplier of 1 << 22.
    
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit b718f91c14604e4ab5cdfe8d3baff8111425ea7d
Author: Christoph Lameter <clameter@sgi.com>
Date:   Wed Aug 1 13:49:45 2007 -0700

    [IA64] ITC: Reduce rating for ITC clock if ITCs are drifty
    
    Make sure to reduce the rating of the ITC clock if ITCs are drifty. If they
    are drifting then we have not synchronized the ITC values, nor are we doing
    the jitter compensation (useless since drift may increase the differentials
    arbitrarily).
    
    Without this patch it is possible that the ITC clock becomes selected as
    the system clock on systems with drifty ITCs which will result in
    nanosleep hanging.
    
    One can still select the itc clock manually on such systems via
    
    clocksource=itc
    
    (Produces nice hangs on SGI Altix.)
    
    Signed-off-by: Christoph Lameter <clameter@sgi.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>

commit 40d485753423b87239cc16b6c8141ef8792324d9
Author: Christoph Lameter <clameter@sgi.com>
Date:   Wed Aug 1 12:37:17 2007 -0700

    [IA64] SN2: Fix up sn2_rtc clock
    
    If the sn2_rtc clock is present then it is a must have since sn2_rtc
    provides a synchronized time source on Altix systems. So elevate
    the priority to 450. Otherwise the ITC would take precendence. Altix
    systems currently do not boot because the ITC clocksource is broken. It
    seems to assume that ITCs are synchronized and as a result nanosleep
    hangs (may be fixed in a different patch).
    
    While we are at it: Remove the sn2_mc definition. The sn2_rtc has a fixed
    address. No point in reading the address from memory. Removing it avoids
    touching one cacheline.
    
    Signed-off-by: Christoph Lameter <clameter@sgi.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>

commit c51aea80a9fbb423b49d432e89e515257bb2b983
Author: Adrian Bunk <bunk@stusta.de>
Date:   Mon Jul 23 18:43:54 2007 -0700

    include/asm-xtensa/io.h must #include <asm/page.h>
    
      CC      kernel/time/clocksource.o
    In file included from
    /home/bunk/linux/kernel-2.6/linux-2.6.22-rc6-mm1/include/linux/clocksource.h:18,
                     from
    /home/bunk/linux/kernel-2.6/linux-2.6.22-rc6-mm1/kernel/time/clocksource.c:27:
    include2/asm/io.h: In function 'virt_to_phys':
    include2/asm/io.h:46: error: implicit declaration of function '__pa'
    include2/asm/io.h: In function 'phys_to_virt':
    include2/asm/io.h:51: error: implicit declaration of function '__va'
    include2/asm/io.h:51: warning: return makes pointer from integer without a cast
    make[3]: *** [kernel/time/clocksource.o] Error 1
    
    Signed-off-by: Adrian Bunk <bunk@stusta.de>
    Cc: Christian Zankel <chris@zankel.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit efa7e8673c78cc6de2d6c367eb6f50449c57ed90
Merge: 02d6112cd7d7 bd807f9c5b90
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Fri Jul 20 12:02:20 2007 -0700

    Merge branch 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/aegl/linux-2.6
    
    * 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/aegl/linux-2.6:
      [IA64] Prevent people from directly including <asm/rwsem.h>.
      [IA64] remove time interpolator
      [IA64] Convert to generic timekeeping/clocksource
      [IA64] refresh some config files for 64K pagesize
      [IA64] Delete iosapic_free_rte()
      [IA64] fallocate system call
      [IA64] Enable percpu vector domain for IA64_DIG
      [IA64] Enable percpu vector domain for IA64_GENERIC
      [IA64] Support irq migration across domain
      [IA64] Add support for vector domain
      [IA64] Add mapping table between irq and vector
      [IA64] Check if irq is sharable
      [IA64] Fix invalid irq vector assumption for iosapic
      [IA64] Use dynamic irq for iosapic interrupts
      [IA64] Use per iosapic lock for indirect iosapic register access
      [IA64] Cleanup lock order in iosapic_register_intr
      [IA64] Remove duplicated members in iosapic_rte_info
      [IA64] Remove block structure for locking in iosapic.c

commit c36c282b88963d0957368a443168588e62301fda
Merge: f4fbfb0dda55 1f564ad6d418
Author: Tony Luck <tony.luck@intel.com>
Date:   Fri Jul 20 11:26:47 2007 -0700

    Pull ia64-clocksource into release branch

commit 0aa366f351d044703e25c8425e508170e80d83b1
Author: Tony Luck <tony.luck@intel.com>
Date:   Fri Jul 20 11:22:30 2007 -0700

    [IA64] Convert to generic timekeeping/clocksource
    
    This is a merge of Peter Keilty's initial patch (which was
    revived by Bob Picco) for this with Hidetoshi Seto's fixes
    and scaling improvements.
    
    Acked-by: Bob Picco <bob.picco@hp.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>

commit 71120f183bff04ba4f7ba3cc554202061912d548
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 19 01:49:16 2007 -0700

    timekeeping: fixup shadow variable argument
    
    clocksource_adjust() has a clock argument, which shadows the file global clock
    variable.  Fix this up.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 15c84731d647c34d1491793fa6be96f5de3432eb
Author: Jeremy Fitzhardinge <jeremy@xensource.com>
Date:   Tue Jul 17 18:37:05 2007 -0700

    xen: time implementation
    
    Xen maintains a base clock which measures nanoseconds since system
    boot.  This is provided to guests via a shared page which contains a
    base time in ns, a tsc timestamp at that point and tsc frequency
    parameters.  Guests can compute the current time by reading the tsc
    and using it to extrapolate the current time from the basetime.  The
    hypervisor makes sure that the frequency parameters are updated
    regularly, paricularly if the tsc changes rate or stops.
    
    This is implemented as a clocksource, so the interface to the rest of
    the kernel is a simple clocksource which simply returns the current
    time directly in nanoseconds.
    
    Xen also provides a simple timer mechanism, which allows a timeout to
    be set in the future.  When that time arrives, a timer event is sent
    to the guest.  There are two timer interfaces:
     - An old one which also delivers a stream of (unused) ticks at 100Hz,
       and on the same event, the actual timer events.  The 100Hz ticks
       cause a lot of spurious wakeups, but are basically harmless.
     - The new timer interface doesn't have the 100Hz ticks, and can also
       fail if the specified time is in the past.
    
    This code presents the Xen timer as a clockevent driver, and uses the
    new interface by preference.
    
    Signed-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>

commit 3d6ac9843175c1d29c075794519cb045b52e46c2
Author: Randy Dunlap <randy.dunlap@oracle.com>
Date:   Wed May 23 13:58:16 2007 -0700

    document clocksources
    
    Document the available clocksources per platform and move clocksource= into
    the correct (alpha) location in the file.
    
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f34ddce1302d548244c499b2905ab2fe999610c6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 9 02:35:15 2007 -0700

    [PATCH] clocksource: fix resume logic
    
    We need to make sure that the clocksources are resumed, when timekeeping is
    resumed.  The current resume logic does not guarantee this.
    
    Add a resume function pointer to the clocksource struct, so clocksource
    drivers which need to reinitialize the clocksource can provide a resume
    function.
    
    Add a resume function, which calls the maybe available clocksource resume
    functions and resets the watchdog function, so a stable TSC can be used
    accross suspend/resume.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Andi Kleen <ak@suse.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>

commit 8f89441b37536fea92b1ed7004e5e2dda011473d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue May 15 01:41:32 2007 -0700

    clocksource: fix lock order in the resume path
    
    lockdep complains about the lock nesting of clocksource and watchdog lock
    in the resume path.
    
    Change the resume marker to a bit operation and remove the lock from this
    path.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d10ff3fb62bd38415c0f7be3d75d107e1f67e59a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 14 11:10:02 2007 +0200

    timekeeping fix patch got mis-applied
    
    The time keeping code move to kernel/time/timekeeping.c broke the
    clocksource resume logic patch, which got applied to the old file by a
    fuzzy application.  Fix it up and move the clocksource_resume() call to
    the appropriate place.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    [ tssk, tssk, everybody should use --fuzz=0 ]
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f2c60ed038dedcc43a0eb3ef4e0602741ba90384
Merge: cabca0cb0d0e 3f2d560e9029
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Fri May 11 09:59:50 2007 -0700

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus: (28 commits)
      [MIPS] Rework cobalt_board_id
      [MIPS] Use RTC_CMOS for Cobalt
      [MIPS] Use platform_device for Cobalt UART
      [MIPS] Separate Alchemy processor based boards config
      [MIPS] Fix build error in atomic64_cmpxchg
      [MIPS] Run checksyscalls for N32 and O32 ABI
      [MIPS] tlbex: use __maybe_unused
      [MIPS] excite: use __maybe_unused
      [MIPS] Add extern cobalt_board_id
      [MIPS] Remove unused CONFIG_TOSHIBA_BOARDS
      [MIPS] Rename tb0229_defconfig to tb0219_defconfig
      [MIPS] Update tb0229_defconfig; add CONFIG_GPIO_TB0219.
      [MIPS] Add minimum defconfig for RBHMA4200
      [MIPS] SB1: Build fix.
      [MIPS] Drop __devinit tag from allocate_irqno() and free_irqno()
      [MIPS] clocksource: use CLOCKSOURCE_MASK() macro
      [MIPS] Remove LIMITED_DMA support
      [MIPS] Remove Momenco Jaguar ATX support
      [MIPS] Remove Momenco Ocelot G support
      [MIPS] FPU hazard handling
      ...

commit 55d0b4e3f6526daf1cc7449028bf5d4c304a6a69
Author: Franck Bui-Huu <fbuihuu@gmail.com>
Date:   Fri May 4 17:36:44 2007 +0200

    [MIPS] clocksource: use CLOCKSOURCE_MASK() macro
    
    Signed-off-by: Franck Bui-Huu <fbuihuu@gmail.com>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit d84c4124c4b6611301b402e8611b7e36de3bd351
Merge: 932c37c375cc a3cf4ea8729a
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Wed May 9 13:08:20 2007 -0700

    Merge master.kernel.org:/pub/scm/linux/kernel/git/lethal/sh-2.6
    
    * master.kernel.org:/pub/scm/linux/kernel/git/lethal/sh-2.6:
      sh: Fix stacktrace simplification fallout.
      sh: SH7760 DMABRG support.
      sh: clockevent/clocksource/hrtimers/nohz TMU support.
      sh: Truncate MAX_ACTIVE_REGIONS for the common case.
      rtc: rtc-sh: Fix rtc_dev pointer for rtc_update_irq().
      sh: Convert to common die chain.
      sh: Wire up utimensat syscall.
      sh: landisk mv_nr_irqs definition.
      sh: Fixup ndelay() xloops calculation for alternate HZ.
      sh: Add 32-bit opcode feature CPU flag.
      sh: Fix PC adjustments for varying opcode length.
      sh: Support for SH-2A 32-bit opcodes.
      sh: Kill off redundant __div64_32 symbol export.
      sh: Share exception vector table for SH-3/4.
      sh: Always define TRAPA_BUG_OPCODE.
      sh: __GFP_REPEAT for pte allocations, too.
      rtc: rtc-sh: Fix up dev_dbg() warnings.
      sh: generic quicklist support.

commit b52f52a093bb1e841e014c2087b5bee7162da413
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed May 9 02:35:15 2007 -0700

    clocksource: fix resume logic
    
    We need to make sure that the clocksources are resumed, when timekeeping is
    resumed.  The current resume logic does not guarantee this.
    
    Add a resume function pointer to the clocksource struct, so clocksource
    drivers which need to reinitialize the clocksource can provide a resume
    function.
    
    Add a resume function, which calls the maybe available clocksource resume
    functions and resets the watchdog function, so a stable TSC can be used
    accross suspend/resume.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Andi Kleen <ak@suse.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 35c35d1afa8f9afe01d922ff9668a14c5d879b02
Author: Daniel Walker <dwalker@mvista.com>
Date:   Wed May 9 02:33:40 2007 -0700

    clocksource: spelling error in watchdog code
    
    There's more that need fixing, and fix my own subject spelling error too.
    
    Signed-off-by: Daniel Walker <dwalker@mvista.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 57be2b484a417bffae66359b9b89e7239480b729
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Wed May 9 17:33:24 2007 +0900

    sh: clockevent/clocksource/hrtimers/nohz TMU support.
    
    This adds basic support for clockevents and clocksources,
    presently only implemented for TMU-based systems (which
    are the majority of SH-3 and SH-4 systems).
    
    The old NO_IDLE_HZ implementation is also dropped completely,
    the only users of this were on TMU-based systems anyways.
    
    More work needs to be done to generalize the TMU handling,
    in that the current implementation is rather tied to the
    notion of TMU0 and TMU1 utilization.
    
    Additionally, as more SH timers switch over to this scheme,
    we'll be able to gut most of the remaining system timer
    infrastructure that existed before.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 329c8d84ca1946c037d9859dc251b56d8b1b4630
Author: Eric Dumazet <dada1@cosmosbay.com>
Date:   Tue May 8 00:27:57 2007 -0700

    time: SMP friendly alignment of struct clocksource
    
    struct clocksource is a critical data structure.
    
    Most of its fields are read only, some of them are heavily modified at each
    timer interrupt.
    
    It makes sense to separate those fields and make sure they all share one
    cache line, or at least the minimum for machines with small cache lines.
    
    [akpm@linux-foundation.org: build fix]
    Signed-off-by: Eric Dumazet <dada1@cosmosbay.com>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e0bb8643974397a8d36670e06e6a54bb84f3289f
Author: Zachary Amsden <zach@vmware.com>
Date:   Wed May 2 19:27:16 2007 +0200

    [PATCH] i386: Convert VMI timer to use clock events
    
    Convert VMI timer to use clock events, making it properly able to use the NO_HZ
    infrastructure.  On UP systems, with no local APIC, we just continue to route
    these events through the PIT.  On systems with a local APIC, or SMP, we provide
    a single source interrupt chip which creates the local timer IRQ.  It actually
    gets delivered by the APIC hardware, but we don't want to use the same local
    APIC clocksource processing, so we create our own handler here.
    
    Signed-off-by: Zachary Amsden <zach@vmware.com>
    Signed-off-by: Andi Kleen <ak@suse.de>
    CC: Dan Hecht <dhecht@vmware.com>
    CC: Ingo Molnar <mingo@elte.hu>
    CC: Thomas Gleixner <tglx@linutronix.de>

commit c8118c6c07f2edfd697aaa0b93e08c3b65a5a675
Author: Eric Dumazet <dada1@cosmosbay.com>
Date:   Wed May 2 19:27:11 2007 +0200

    [PATCH] x86-64: vsyscall_gtod_data diet and vgettimeofday() fix
    
    Current vsyscall_gtod_data is large (3 or 4 cache lines dirtied at timer
    interrupt). We can shrink it to exactly 64 bytes (1 cache line on AMD64)
    
    Instead of copying a whole struct clocksource, we copy only needed fields.
    
    I deleted an unused field : offset_base
    
    This patch fixes one oddity in vgettimeofday(): It can returns a timeval with
    tv_usec = 1000000. Maybe not a bug, but why not doing the right thing ?
    
    Signed-off-by: Eric Dumazet <dada1@cosmosbay.com>
    Signed-off-by: Andi Kleen <ak@suse.de>

commit 5a90cf205c922707ffed2d8f87cefd942e96b0ba
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed May 2 19:27:08 2007 +0200

    [PATCH] x86: Log reason why TSC was marked unstable
    
    Change mark_tsc_unstable() so it takes a string argument, which holds the
    reason the TSC was marked unstable.
    
    This is then displayed the first time mark_tsc_unstable is called.
    
    This should help us better debug why the TSC was marked unstable on certain
    systems and allow us to make sure we're not being overly paranoid when
    throwing out this troublesome clocksource.
    
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andi Kleen <ak@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Andi Kleen <ak@suse.de>

commit 112f48716d9f292c92a033cff9e3ce7405ed4280
Author: David S. Miller <davem@sunset.davemloft.net>
Date:   Mon Mar 5 15:28:37 2007 -0800

    [SPARC64]: Add clocksource/clockevents support.
    
    I'd like to thank John Stul and others for helping
    me along the way.
    
    A lot of cleanups fell out of this.  For example, the get_compare()
    tick_op was totally unused, so was deleted.  And the most often used
    tick_op members were grouped together for cache-friendlyness.
    
    The sparc64 TSC is given to the kernel as a one-shot timer.
    
    tick_ops->init_timer() simply turns off the privileged bit in
    the tick register (when possible), and disables the interrupt
    by setting bit 63 in the compare register.  The ->disable_irq()
    op also sets this bit.
    
    tick_ops->add_compare() is changed to:
    
    1) Add the given delta to "tick" not to "compare"
    2) Return a boolean which, if true, means that the tick
       value read after writing the compare value was found
       to have incremented past the initial tick value.  This
       mirrors logic used in the HPET driver's ->next_event()
       method.
    
    Each tick_ops implementation also now provides a name string.
    And we feed this into the clocksource and clockevents layers.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 641b9e0e8b7f96425da6ce98f3361e3af0baee29
Author: Patrick McHardy <kaber@trash.net>
Date:   Fri Mar 16 01:18:42 2007 -0700

    [NET_SCHED]: Use ktime as clocksource
    
    Get rid of the manual clock source selection mess and use ktime. Also
    use a scalar representation, which allows to clean up pkt_sched.h a bit
    more and results in less ktime_to_ns() calls in most cases.
    
    The PSCHED_US2JIFFIE/PSCHED_JIFFIE2US macros are implemented quite
    inefficient by this patch, following patches will convert all qdiscs
    to hrtimers and get rid of them entirely.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 075192ae807579448afcc0833bd349ccce057825
Author: Kevin Hilman <khilman@mvista.com>
Date:   Thu Mar 8 20:32:19 2007 +0100

    [ARM] 4262/1: OMAP: clocksource and clockevent support
    
    Update OMAP1 to enable support for hrtimers and dynticks by using new clocksource and clockevent infrastructure.
    
    Signed-off-by: Kevin Hilman <khilman@mvista.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit b49c87c2a5059af14b68ee5f596ac0e9c93678bb
Author: Kevin Hilman <khilman@mvista.com>
Date:   Thu Mar 8 20:25:13 2007 +0100

    [ARM] 4260/1: clocksource support for Versatile platform
    
    Update Versatile to use new clocksource infrastructure for basic timekeeping.
    
    Signed-off-by: Kevin Hilman <khilman@mvista.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 98de9e3ba23422b5c45b91c93aec1cb1e17514dc
Author: John Stultz <johnstul@us.ibm.com>
Date:   Wed Apr 4 19:08:24 2007 -0700

    [PATCH] fix jiffies clocksource inittime
    
    In debugging a problem w/ the -rt tree, I noticed that on systems that mark
    the tsc as unstable before it is registered, the TSC would still be
    selected and used for a short period of time.  Digging in it looks to be a
    result of the mix of the clocksource list changes and my clocksource
    initialization changes.
    
    With the -rt tree, using a bad TSC, even for a short period of time can
    results in a hang at boot.  I was not able to reproduce this hang w/
    mainline, but I'm not completely certain that someone won't trip on it.
    
    This patch resolves the issue by initializing the jiffies clocksource
    earlier so a bad TSC won't get selected just because nothing else is yet
    registered.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Andi Kleen <ak@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1ff100d76ff76477a2ead3aac94d04f2e891f44e
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Mar 26 21:32:19 2007 -0800

    [PATCH] correct slow acpi_pm rating
    
    On Bob's machine clocksource is selecting PIT over the ACPI PM timer,
    because he has the PIIX4 bug.  That bug drops the ACPI PM timers rating
    to the same as the PIT, so that's why you're getting the PIT.
    
    Realistically, the PIT is much slower then even the triple read ACPI PM,
    so the de-ranking code is probably dropping it too far.
    
    So don't drop ACPI PM quite so low if we see the PIIX4 bug.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Bob Tracy <rct@gherkin.frus.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andi Kleen <ak@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1ffb96c587fa2af0d690dc3548a4a781c477bfb7
Author: Thibaut VARENE <T-Bone@parisc-linux.org>
Date:   Thu Mar 15 12:59:19 2007 +0100

    make elv_register() output atomic
    
    Booting 2.6.21-rc3-g45592145 I noticed the following on one of my
    machines in the bootlog:
    
    io scheduler noop registered<6>Time: jiffies clocksource has been installed.
    
    io scheduler deadline registered (default)
    
    Looking at block/elevator.c, it appears that elv_register() uses two
    consecutive printks in a non-atomic way, leading to the above glitch. The
    attached trivial patch fixes this issue, by using a single printk.
    
    Signed-off-by: Thibaut VARENE <varenet@parisc-linux.org>
    Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

commit 948ac6d71cf868b431adb3139d8dfbd9c4e4a6ca
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Sun Mar 25 14:42:51 2007 +0200

    [PATCH] clocksource: Fix thinko in watchdog selection
    
    The watchdog implementation excludes low res / non continuous
    clocksources from being selected as a watchdog reference
    unintentionally.
    
    Allow using jiffies/PIT as a watchdog reference as long as no better
    clocksource is available. This is necessary to detect TSC breakage on
    systems, which have no pmtimer/hpet.
    
    The main goal of the initial patch (preventing to switch to highres/nohz
    when no reliable fallback clocksource is available) is still guaranteed
    by the checks in clocksource_watchdog().
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5556eaffcc2704d9dca81c80cf3e7cbcc869f680
Author: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date:   Sat Feb 10 01:43:43 2007 -0800

    kernel/time/clocksource.c needs struct task_struct on m68k
    
    kernel/time/clocksource.c needs struct task_struct on m68k.
    
    Because it uses spin_unlock_irq(), which, on m68k, uses hardirq_count(), which
    uses preempt_count(), which needs to dereference struct task_struct, we
    have to include sched.h. Because it would cause a loop inclusion, we
    cannot include sched.h in any other of asm-m68k/system.h,
    linux/thread_info.h, linux/hardirq.h, which leaves this ugly include in
    a C file as the only simple solution.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit f8953856eb8dd62232aee6cacb46993dc2ac4869
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Mar 6 01:42:08 2007 -0800

    [PATCH] highres: do not run the TIMER_SOFTIRQ after switching to highres mode
    
    The TIMER_SOFTIRQ runs the hrtimers during bootup until a usable
    clocksource and clock event sources are registered.  The switch to high
    resolution mode happens inside of the TIMER_SOFTIRQ, but runs the softirq
    afterwards.  That way the tick emulation timer, which was set up in the
    switch to highres might be executed in the softirq context, which is a BUG.
     The rbtree has not to be touched by the softirq after the highres switch.
    
    This BUG was observed by Andres Salomon, who provided the information to
    debug it.
    
    Return early from the softirq, when the switch was sucessful.
    
    [dilinger@debian.org: add debug warning]
    [akpm@linux-foundation.org: make debug warning compile]
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andres Salomon <dilinger@debian.org>
    Acked-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andres Salomon <dilinger@debian.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 6bb74df481223731af6c7e0ff3adb31f6442cfcd
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Mar 5 00:30:50 2007 -0800

    [PATCH] clocksource init adjustments (fix bug #7426)
    
    This patch resolves the issue found here:
    http://bugme.osdl.org/show_bug.cgi?id=7426
    
    The basic summary is:
    Currently we register most of i386/x86_64 clocksources at module_init
    time. Then we enable clocksource selection at late_initcall time. This
    causes some problems for drivers that use gettimeofday for init
    calibration routines (specifically the es1968 driver in this case),
    where durring module_init, the only clocksource available is the low-res
    jiffies clocksource. This may cause slight calibration errors, due to
    the small sampling time used.
    
    It should be noted that drivers that require fine grained time may not
    function on architectures that do not have better then jiffies
    resolution timekeeping (there are a few). However, this does not
    discount the reasonable need for such fine-grained timekeeping at init
    time.
    
    Thus the solution here is to register clocksources earlier (ideally when
    the hardware is being initialized), and then we enable clocksource
    selection at fs_initcall (before device_initcall).
    
    This patch should probably get some testing time in -mm, since
    clocksource selection is one of the most important issues for correct
    timekeeping, and I've only been able to test this on a few of my own
    boxes.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit a9eddc952870d29aa9df96ab862327eb6afa23d9
Author: Zachary Amsden <zach@vmware.com>
Date:   Mon Mar 5 00:30:41 2007 -0800

    [PATCH] vmi: fix nohz compile
    
    More goo from hrtimers integration.  We do compile and run properly with NO_HZ
    enabled.  There was a period when we didn't because of a missing export, but
    that was since fixed.
    
    And with the clocksource code now firmly in place, we can get rid of code that
    fixes up the wallclock, since this is done in the common infrastructure.  This
    actually fixes a timer bug as well, that was caused by do_settimeofday no
    longer being callable with interrupts disabled due to the use of
    on_each_cpu().
    
    Signed-off-by: Zachary Amsden <zach@vmware.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 01363220f5d23ef68276db8974e46a502e43d01d
Author: Kyle McMartin <kyle@mako.i.cabal.ca>
Date:   Mon Feb 26 22:21:22 2007 -0500

    [PARISC] clocksource: Move update_cr16_clocksource later in boot
    
    smp_cpus_done is too early for us... before we even do a device
    inventory! Move update_cr16_clocksource into the tail end of
    processor_probe() and stub it out on CONFIG_SMP=n builds.
    
    Verified that clocksource0 is properly updated to use jiffies
    on an SMP build.
    
    Signed-off-by: Kyle McMartin <kyle@parisc-linux.org>

commit b2a8289a611af409e5621df27227dc3f55ba358b
Author: Kyle McMartin <kyle@mako.i.cabal.ca>
Date:   Mon Feb 26 21:24:56 2007 -0500

    [PARISC] time: clocksource lost update_callback
    
    So move the code to be called by smp_cpus_done, which is
    after we've figured out if there's more than one cpu
    actually present.
    
    Signed-off-by: Kyle McMartin <kyle@parisc-linux.org>

commit 87c8174727c95ab43f5bd2164e78c665c6945e67
Author: Kyle McMartin <kyle@mako.i.cabal.ca>
Date:   Mon Feb 26 20:15:18 2007 -0500

    [PARISC] time: Convert clocksource is_continuous to flag
    
    Signed-off-by: Kyle McMartin <kyle@parisc-linux.org>

commit 00d1f3c31a415bb3701abbd3a2c2aa44cb97116c
Author: Kyle McMartin <kyle@mako.i.cabal.ca>
Date:   Mon Feb 26 20:10:42 2007 -0500

    [PARISC] clocksource_cr16: Use clocksource_change_rating()
    
    Signed-off-by: Kyle McMartin <kyle@parisc-linux.org>

commit 324c7e6545539d2f7736be930d4833deb32b1b95
Author: Helge Deller <deller@gmx.de>
Date:   Wed Jan 3 19:25:37 2007 +0100

    [PARISC] disable cr16 clocksource when multiple CPUs are online
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Kyle McMartin <kyle@parisc-linux.org>

commit 7460ed2844ffad7141e30271c0c3da8336e66014
Author: John Stultz <johnstul@us.ibm.com>
Date:   Fri Feb 16 01:28:21 2007 -0800

    [PATCH] time: x86_64: re-enable vsyscall support for x86_64
    
    Cleanup and re-enable vsyscall gettimeofday using the generic clocksource
    infrastructure.
    
    [akpm@osdl.org: cleanup]
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andi Kleen <ak@muc.de>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1489939f0ab64b96998e04068c516c39afe29654
Author: John Stultz <johnstul@us.ibm.com>
Date:   Fri Feb 16 01:28:20 2007 -0800

    [PATCH] time: x86_64: convert x86_64 to use GENERIC_TIME
    
    This patch converts x86_64 to use the GENERIC_TIME infrastructure and adds
    clocksource structures for both TSC and HPET (ACPI PM is shared w/ i386).
    
    [akpm@osdl.org: fix printk timestamps]
    [akpm@osdl.org: fix printk ckeanups]
    [akpm@osdl.org: hpet build fix]
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andi Kleen <ak@muc.de>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 07190a08eef3666a8687070226c8d403c1d548b7
Author: Marcelo Tosatti <marcelo@kvack.org>
Date:   Fri Feb 16 01:27:44 2007 -0800

    [PATCH] Mark TSC on GeodeLX reliable
    
    The Geode can safely use the TSC for highres, since:
    
    1) Does not support frequency scaling,
    
    2) The TSC _does_ count when the CPU is halted.  Furthermore, the Geode
       supports a mode called "suspension on halt", where Suspend mode (which
       interacts with the power management states) is entered.  TSC counting
       during suspend mode is controlled by bit 8 of the Bus Controller
       Configuration Register #0 (thanks Tom!).
    
    3) no SMP :)
    
    Check if "RTSC counts during suspension" and remove the requirement for
    verification, so the clocksource code can safely select it as an timesource
    for the highres timers subsystem.
    
    Signed-off-by: Marcelo Tosatti <marcelo@kvack.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5d8b34fdcb384161552d01ee8f34af5ff11f9684
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 16 01:27:43 2007 -0800

    [PATCH] clocksource: Add verification (watchdog) helper
    
    The TSC needs to be verified against another clocksource.  Instead of using
    hardwired assumptions of available hardware, provide a generic verification
    mechanism.  The verification uses the best available clocksource and handles
    the usability for high resolution timers / dynticks of the clocksource which
    needs to be verified.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7e69f2b1ead2a4c51c12817f18263ff0e59335a6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 16 01:27:42 2007 -0800

    [PATCH] clocksource: Remove the update callback
    
    The clocksource code allows direct updates of the rating of a given
    clocksource now.  Change TSC unstable tracking to use this interface and
    remove the update callback.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 877fe38029366c19def24359627db8cc24d9fef6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 16 01:27:40 2007 -0800

    [PATCH] clocksource: fixup is_continous changes on MIPS
    
    Fixup the is_contionous replacement by a flag field.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cc02d809cc629f4e90b917aa0f9efea85221ccdb
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 16 01:27:39 2007 -0800

    [PATCH] clocksource: fixup is_continous changes on S390
    
    Fixup the is_contionous replacement by a flag field.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 2693506c41c20362eefb38005ee34dca7ac8dc71
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 16 01:27:38 2007 -0800

    [PATCH] clocksource: fixup is_continous changes on AVR32
    
    Fixup the is_contionous replacement by a flag field.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: Haavard Skinnemoen <hskinnemoen@atmel.com>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c66699a749eb0d84c6ebc3aac659e9f71d1aba14
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 16 01:27:37 2007 -0800

    [PATCH] clocksource: fixup is_continous changes on ARM
    
    Fixup the is_contionous replacement by a flag field.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 73b08d2aa4245806ef1bdd48463e9a0b045c62cf
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 16 01:27:36 2007 -0800

    [PATCH] clocksource: replace is_continuous by a flag field
    
    Using a flag filed allows to encode more than one information into a variable.
    Preparatory patch for the generic clocksource verification.
    
    [mingo@elte.hu: convert vmitime.c to the new clocksource flag]
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 92c7e00254b2d0efc1e36ac3e45474ce1871b6b2
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 16 01:27:33 2007 -0800

    [PATCH] Simplify the registration of clocksources
    
    Enqueue clocksources in rating order to make selection of the clocksource
    easier.  Also check the match with an user override at enqueue time.
    
    Preparatory patch for the generic clocksource verification.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 771ee3b04eaac6184312825eb600b4c598f027a5
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 16 01:27:25 2007 -0800

    [PATCH] Add a function to handle interrupt affinity setting
    
    Provide funtions to:
     - check, whether an interrupt can set the affinity
     - pin the interrupt to a given cpu
    
    Necessary for the ability to setup clocksources more flexible (e.g.  use the
    different HPET channels per CPU)
    
    [akpm@osdl.org: alpha build fix]
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 950f4427c2ddc921164088a20f01304cf231437c
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Feb 16 01:27:24 2007 -0800

    [PATCH] Add irq flag to disable balancing for an interrupt
    
    Add a flag so we can prevent the irq balancing of an interrupt.  Move the
    bits, so we have room for more :)
    
    Necessary for the ability to setup clocksources more flexible (e.g.  use the
    different HPET channels per CPU)
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Cc: john stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit dc29a3657b52ac687970d81d7194cf4238702124
Author: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Date:   Sat Feb 10 01:43:43 2007 -0800

    [PATCH] kernel/time/clocksource.c needs struct task_struct on m68k
    
    kernel/time/clocksource.c needs struct task_struct on m68k.
    
    Because it uses spin_unlock_irq(), which, on m68k, uses hardirq_count(), which
    uses preempt_count(), which needs to dereference struct task_struct, we
    have to include sched.h. Because it would cause a loop inclusion, we
    cannot include sched.h in any other of asm-m68k/system.h,
    linux/thread_info.h, linux/hardirq.h, which leaves this ugly include in
    a C file as the only simple solution.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e05135d1550e73f722ae92909f9c9f44b305e9e2
Merge: 8eefb2b7ad61 e9ccb7992722
Author: Linus Torvalds <torvalds@woody.osdl.org>
Date:   Wed Dec 13 15:58:32 2006 -0800

    Merge branch 'for-linus' of master.kernel.org:/home/rmk/linux-2.6-arm
    
    * 'for-linus' of master.kernel.org:/home/rmk/linux-2.6-arm:
      [ARM] 4017/1: [Jornada7xx] - Updating Jornada720.c
      [ARM] 3992/1: i.MX/MX1 CPU Frequency scaling support
      [ARM] Provide a method to alter the control register
      [ARM] 4016/1: prefetch macro is wrong wrt gcc's "delete-null-pointer-checks"
      [ARM] Remove empty fixup function
      [ARM] 4014/1: include drivers/hid/Kconfig
      [ARM] 4013/1: clocksource driver for netx
      [ARM] 4012/1: Clocksource for pxa
      [ARM] Clean up ioremap code
      [ARM] Unuse another Linux PTE bit
      [ARM] Clean up KERNEL_RAM_ADDR
      [ARM] Add sys_*at syscalls
      [ARM] 4004/1: S3C24XX: UDC remove implict addition of VA to regs
      [ARM] Formalise the ARMv6 processor name string
      [ARM] Handle HWCAP_VFP in VFP support code
      [ARM] 4011/1: AT91SAM9260: Fix compilation with NAND driver
      [ARM] 4010/1: AT91SAM9260-EK board: Prepare for MACB Ethernet support

commit 1a815aed1e03c73fcd0390109c7da9c69dc97490
Author: Sascha Hauer <sascha@saschahauer.de>
Date:   Tue Dec 12 09:23:45 2006 +0100

    [ARM] 4013/1: clocksource driver for netx
    
    Add a clocksource driver for netx systems
    
    Signed-off-by: Luotao Fu <lfu@pengutronix.de>
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit c80204e5d67d1452ac0b761d980f1651dc2c66dc
Author: Sascha Hauer <sascha@saschahauer.de>
Date:   Tue Dec 12 09:21:50 2006 +0100

    [ARM] 4012/1: Clocksource for pxa
    
    Add a clocksource driver for pxa2xx systems
    
    Signed-off-by: Luotao Fu <lfu@pengutronix.de>
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Nicolas Pitre <nico@cam.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit f5f1a24a2caa299bb7d294aee92d7dd3410d9ed7
Author: Daniel Walker <dwalker@mvista.com>
Date:   Sun Dec 10 02:21:33 2006 -0800

    [PATCH] clocksource: small cleanup
    
    Mostly changing alignment.  Just some general cleanup.
    
    [akpm@osdl.org: build fix]
    Signed-off-by: Daniel Walker <dwalker@mvista.com>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 2b0137001de68153203dd3bc20e6d27eb7c9719c
Author: Daniel Walker <dwalker@mvista.com>
Date:   Sun Dec 10 02:21:30 2006 -0800

    [PATCH] clocksource: add usage of CONFIG_SYSFS
    
    Simply adds some ifdefs to remove clocksoure sysfs code when CONFIG_SYSFS
    isn't turn on.
    
    Signed-off-by: Daniel Walker <dwalker@mvista.com>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit ea14fad0d416354a4e9bb1a04f32acba706f9548
Merge: 6ee7e78e7c78 6705cda24fad
Author: Linus Torvalds <torvalds@woody.osdl.org>
Date:   Thu Dec 7 15:40:39 2006 -0800

    Merge branch 'for-linus' of master.kernel.org:/home/rmk/linux-2.6-arm
    
    * 'for-linus' of master.kernel.org:/home/rmk/linux-2.6-arm: (76 commits)
      [ARM] 4002/1: S3C24XX: leave parent IRQs unmasked
      [ARM] 4001/1: S3C24XX: shorten reboot time
      [ARM] 3983/2: remove unused argument to __bug()
      [ARM] 4000/1: Osiris: add third serial port in
      [ARM] 3999/1: RX3715: suspend to RAM support
      [ARM] 3998/1: VR1000: LED platform devices
      [ARM] 3995/1: iop13xx: add iop13xx support
      [ARM] 3968/1: iop13xx: add iop13xx_defconfig
      [ARM] Update mach-types
      [ARM] Allow gcc to optimise arm_add_memory a little more
      [ARM] 3991/1: i.MX/MX1 high resolution time source
      [ARM] 3990/1: i.MX/MX1 more precise PLL decode
      [ARM] 3986/1: H1940: suspend to RAM support
      [ARM] 3985/1: ixp4xx clocksource cleanup
      [ARM] 3984/1: ixp4xx/nslu2: Fix disk LED numbering (take 2)
      [ARM] 3994/1: ixp23xx: fix handling of pci master aborts
      [ARM] 3981/1: sched_clock for PXA2xx
      [ARM] 3980/1: extend the ARM Versatile sched_clock implementation from 32 to 63 bit
      [ARM] 3979/1: extend the SA11x0 sched_clock implementation from 32 to 63 bit period
      [ARM] 3978/1: macro to provide a 63-bit value from a 32-bit hardware counter
      ...

commit f9a8ca1cabf09316d79cab7f04e1390261ff9035
Author: Kevin Hilman <khilman@mvista.com>
Date:   Wed Dec 6 00:45:07 2006 +0100

    [ARM] 3985/1: ixp4xx clocksource cleanup
    
    Rather than using a device_initcall() for the clocksource initialization, just call the init from the sys_timer init function.
    
    Signed-off-by: Kevin Hilman <khilman@mvista.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit fa5cecd111d235819a1d807d43216ae459a0dd6f
Author: Amol Lad <amol@verismonetworks.com>
Date:   Thu Dec 7 02:14:02 2006 +0100

    [PATCH] i386: add missing iounmap in i386 hpet clocksource code
    
    ioremap must be balanced by an iounmap and failing to do so can result
    in a memory leak.
    
    Tested (compilation only):
    - using allmodconfig
    - making sure the files are compiling without any warning/error due to
    new changes
    
    Signed-off-by: Amol Lad <amol@verismonetworks.com>
    Signed-off-by: Andi Kleen <ak@suse.de>

commit c3e59d1e891f6140a346de2b8547e25133c716b0
Merge: b07e3c3a1db0 aa414dff4f7b
Author: Linus Torvalds <torvalds@woody.osdl.org>
Date:   Fri Dec 1 16:44:02 2006 -0800

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus: (31 commits)
      [MIPS] Remove duplicate ISA DMA code for 0 DMA channel case.
      [MIPS] Remove unused definition of cpu_to_lelongp()
      [MIPS] Remove userspace proofing from <asm/bitops.h>.
      [MIPS] Remove old junk left from old atomic_lock.
      [MIPS] Use conditional traps for BUG_ON on MIPS II and better.
      [MIPS] mips HPT cleanup: make clocksource_mips public
      [MIPS] do_IRQ cleanup
      [MIPS] Avoid dupliate D-cache flush on R400C / R4400 SC and MC variants.
      [MIPS] Remove redundant r4k_blast_icache() calls
      [MIPS] Work around bogus gcc warnings.
      [MIPS] Fix double inclusions
      [MIPS] use generic_handle_irq, handle_level_irq, handle_percpu_irq
      [MIPS] IRQ cleanups
      [MIPS] mips hpt cleanup: get rid of mips_hpt_init
      [MIPS] PB1200: Remove duplicate definitions
      [MIPS] Fix alignment hole in struct cache_desc; shrink struct.
      [MIPS] Oprofile: kernel support for the R10000.
      [MIPS] Remove unused R10000 performance counter definitions.
      [MIPS] Add support for kexec
      [MIPS] Don't print presence of WAIT instruction on bootup.
      ...

commit 005985609ff72df3257fde6b29aa9d71342c2a6b
Author: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
Date:   Sun Nov 12 00:10:28 2006 +0900

    [MIPS] mips HPT cleanup: make clocksource_mips public
    
    Make clocksource_mips public and get rid of mips_hpt_read,
    mips_hpt_mask.
    
    Signed-off-by: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 3bc587b9cbf2a72e16b5a960731f08df36ba97fa
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Thu Oct 12 14:41:07 2006 +0200

    [PATCH] __div64_32 for 31 bit.
    
    The clocksource infrastructure introduced with commit
    ad596171ed635c51a9eef829187af100cbf8dcf7 broke 31 bit s390.
    The reason is that the do_div() primitive for 31 bit always
    had a restriction: it could only divide an unsigned 64 bit
    integer by an unsigned 31 bit integer. The clocksource code
    now uses do_div() with a base value that has the most
    significant bit set. The result is that clock->cycle_interval
    has a funny value which causes the linux time to jump around
    like mad.
    The solution is "obvious": implement a proper __div64_32
    function for 31 bit s390.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>

commit 16b7b2ac0148e839da86af8747b6fa4aad43a9b7
Author: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
Date:   Tue Oct 24 00:21:27 2006 +0900

    [MIPS] Fixup migration to GENERIC_TIME
    
    Since we already moved to GENERIC_TIME, we should implement alternatives
    of old do_gettimeoffset routines to get sub-jiffies resolution from
    gettimeofday().  This patch includes:
    
     * MIPS clocksource support (based on works by Manish Lachwani).
     * remove unused gettimeoffset routines and related codes.
     * remove unised 64bit do_div64_32().
     * simplify mips_hpt_init. (no argument needed, __init tag)
     * simplify c0_hpt_timer_init. (no need to write to c0_count)
     * remove some hpt_init routines.
     * mips_hpt_mask variable to specify bitmask of hpt value.
     * convert jmr3927_do_gettimeoffset to jmr3927_hpt_read.
     * convert ip27_do_gettimeoffset to ip27_hpt_read.
     * convert bcm1480_do_gettimeoffset to bcm1480_hpt_read.
     * simplify sb1250 hpt functions. (no need to subtract and shift)
    
    Signed-off-by: Atsushi Nemoto <anemo@mba.ocn.ne.jp>
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 78f32668e64caea8f638b9133da7b97c5aec20d1
Author: Daniel Walker <dwalker@mvista.com>
Date:   Sat Oct 21 10:24:10 2006 -0700

    [PATCH] clocksource: acpi_pm: add another greylist chipset
    
    I have an acpi_pm that goes backwards, but it's not intel.  I tested the
    verified read and my acpi_pm started to function properly.  So I added it
    to the greylist.  I'm assuming that's the right spot.
    
    I also added an unlikely() to the while, cause it seems appropriate.
    
    Signed-off-by: Daniel Walker <dwalker@mvista.com>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Acked-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 3f4a0b917ce72ef47e438d354c433eb645218e87
Author: John Stultz <johnstul@us.ibm.com>
Date:   Tue Oct 17 00:09:32 2006 -0700

    [PATCH] i386 Time: Avoid PIT SMP lockups
    
    Avoid possible PIT livelock issues seen on SMP systems (and reported by
    Andi), by not allowing it as a clocksource on SMP boxes.
    
    However, since the PIT may no longer be present, we have to properly handle
    the cases where SMP systems have TSC skew and fall back from the TSC.
    Since the PIT isn't there, it would "fall back" to the TSC again.  So this
    changes the jiffies rating to 1, and the TSC-bad rating value to 0.
    
    Thus you will get the following behavior priority on i386 systems:
    
    tsc             [if present & stable]
    hpet            [if present]
    cyclone         [if present]
    acpi_pm         [if present]
    pit             [if UP]
    jiffies
    
    Rather then the current more complicated:
    tsc             [if present & stable]
    hpet            [if present]
    cyclone         [if present]
    acpi_pm         [if present]
    pit             [if cpus < 4]
    tsc             [if present & unstable]
    jiffies
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Andi Kleen <ak@suse.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 458821452642fd5dc2377b73cd1323fd4a9653e7
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Wed Oct 4 13:21:45 2006 +0900

    sh: First step at generic timeofday support.
    
    At the moment we wrap GENERIC_TIME around our existing timer API.
    As boards start providing their own clocksources, they're able to
    select GENERIC_TIME accordingly and optimize out most of the timer
    API.
    
    Once the current timers have been reworked as proper clocksource
    drivers, the rest of the place holders for the timer API can go
    away and we can flip on GENERIC_TIME unconditionally.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit ebdea46fecae40c4d7effcd33f40918a37a1df4b
Merge: fecf3404f4ab 250d375d1da4
Author: Linus Torvalds <torvalds@g5.osdl.org>
Date:   Thu Sep 28 14:40:39 2006 -0700

    Merge branch 'devel' of master.kernel.org:/home/rmk/linux-2.6-arm
    
    * 'devel' of master.kernel.org:/home/rmk/linux-2.6-arm: (130 commits)
      [ARM] 3856/1: Add clocksource for Intel IXP4xx platforms
      [ARM] 3855/1: Add generic time support
      [ARM] 3873/1: S3C24XX: Add irq_chip names
      [ARM] 3872/1: S3C24XX: Apply consistant tabbing to irq_chips
      [ARM] 3871/1: S3C24XX: Fix ordering of EINT4..23
      [ARM] nommu: confirms the CR_V bit in nommu mode
      [ARM] nommu: abort handler fixup for !CPU_CP15_MMU cores.
      [ARM] 3870/1: AT91: Start removing static memory mappings
      [ARM] 3869/1: AT91: NAND support for DK and KB9202 boards
      [ARM] 3868/1: AT91 hardware header update
      [ARM] 3867/1: AT91 GPIO update
      [ARM] 3866/1: AT91 clock update
      [ARM] 3865/1: AT91RM9200 header updates
      [ARM] 3862/2: S3C2410 - add basic power management support for AML M5900 series
      [ARM] kthread: switch arch/arm/kernel/apm.c
      [ARM] Off-by-one in arch/arm/common/icst*
      [ARM] 3864/1: Refactore sharpsl_pm
      [ARM] 3863/1: Add Locomo SPI Device
      [ARM] 3847/2:  Convert LOMOMO to use struct device for GPIOs
      [ARM] Use CPU_CACHE_* where possible in asm/cacheflush.h
      ...

commit 84904d0ead0a8c419abd45c7b2ac8d76d50a0d48
Author: Kevin Hilman <khilman@mvista.com>
Date:   Fri Sep 22 00:58:57 2006 +0100

    [ARM] 3856/1: Add clocksource for Intel IXP4xx platforms
    
    Enables the ixp4xx platforms to use Generic time-of-day.
    
    Signed-off-by: Kevin Hilman <khilman@mvista.com>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Deepak Saxena <dsaxena@plexity.net>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 746140c71d537560bbd22c1b148fb21031c30e71
Author: Kevin Hilman <khilman@mvista.com>
Date:   Fri Sep 22 00:16:30 2006 +0100

    [ARM] 3855/1: Add generic time support
    
    This patch adds Generic time-of-day support for the ARM architecture.
    
    The support is currently added using #ifdef's so that it can support
    sub-arches that do not (yet) have a clocksource added.  As sub-arches
    add clocksource support, they should 'select GENERIC_TIME'
    
    Signed-off-by: Deepak Saxena <dsaxena@mvista.com>
    Signed-off-by: Daniel Walker <dwalker@mvista.com>
    
    Signed-off-by: Kevin Hilman <khilman@mvista.com>
    
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit d9f7a745d55527d0d41684b22506a86c4381f7f1
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Thu Sep 28 16:55:39 2006 +0200

    [S390] __div64_32 for 31 bit.
    
    The clocksource infrastructure introduced with commit
    ad596171ed635c51a9eef829187af100cbf8dcf7 broke 31 bit s390.
    The reason is that the do_div() primitive for 31 bit always
    had a restriction: it could only divide an unsigned 64 bit
    integer by an unsigned 31 bit integer. The clocksource code
    now uses do_div() with a base value that has the most
    significant bit set. The result is that clock->cycle_interval
    has a funny value which causes the linux time to jump around
    like mad.
    The solution is "obvious": implement a proper __div64_32
    function for 31 bit s390.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 30f3174d1c506db2c6d2c1dddc9c064e741d6b76
Author: John Stultz <johnstul@us.ibm.com>
Date:   Thu Aug 31 21:27:37 2006 -0700

    [PATCH] Fix faulty HPET clocksource usage (fix for bug #7062)
    
    Apparently some systems export valid HPET addresses, but hpet_enable()
    fails.  Then when the HPET clocksource starts up, it only checks for a
    valid HPET address, and the result is a system where time does not advance.
    
    See http://bugme.osdl.org/show_bug.cgi?id=7062 for details.
    
    This patch just makes sure we better check that the HPET is functional
    before registering the HPET clocksource.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 6ae7440e6b7a46f4c119c60580aa9384c1b463f7
Author: Jim Cromie <jim.cromie@gmail.com>
Date:   Mon Jun 26 00:25:19 2006 -0700

    [PATCH] GTOD: add scx200 HRT clocksource
    
    Add a GTOD clocksource driver based on the Geode SCx200's Hi-Res Timer.
    
    Signed-off-by: Jim Cromie <jim.cromie@gmail.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Cc: john stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 7f9f303aa33c7acc7b4aa9ebea25cbd990bc707b
Author: Jim Cromie <jim.cromie@gmail.com>
Date:   Mon Jun 26 00:25:15 2006 -0700

    [PATCH] generic-time: add macro to simplify/hide mask constants
    
    Add a CLOCKSOURCE_MASK macro to simplify initializing the mask for a struct
    clocksource, and use it to replace literal mask constants in the various
    clocksource drivers.
    
    Signed-off-by: Jim Cromie <jim.cromie@gmail.com>
    Acked-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit a275254975a29c51929ee175b92ac471ac2a0043
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Jun 26 00:25:14 2006 -0700

    [PATCH] time: rename clocksource functions
    
    As suggested by Roman Zippel, change clocksource functions to use
    clocksource_xyz rather then xyz_clocksource to avoid polluting the
    namespace.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Cc: Roman Zippel <zippel@linux-m68k.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 5d0cf410e94b1f1ff852c3f210d22cc6c5a27ffa
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Jun 26 00:25:12 2006 -0700

    [PATCH] Time: i386 Clocksource Drivers
    
    Implement the time sources for i386 (acpi_pm, cyclone, hpet, pit, and tsc).
    With this patch, the conversion of the i386 arch to the generic timekeeping
    code should be complete.
    
    The patch should be fairly straight forward, only adding the new clocksources.
    
    [hirofumi@mail.parknet.co.jp: acpi_pm cleanup]
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Adrian Bunk <bunk@stusta.de>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 61743fe445213b87fb55a389c8d073785323ca3e
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Jun 26 00:25:12 2006 -0700

    [PATCH] Time: i386 Conversion - part 4: Remove Old timer_opts Code
    
    Remove the old timers/timer_opts infrastructure which has been disabled.  It
    is a fairly straightforward set of deletions
    
    Note that this does not provide any i386 clocksources, so you will only have
    the jiffies clocksource.  To get full replacements for the code being removed
    here, the timeofday-clocks-i386 patch will be needed.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 6f84fa2f3edc8902cfed02cd510c7c58334bb9bd
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Jun 26 00:25:11 2006 -0700

    [PATCH] Time: i386 Conversion - part 3: Enable Generic Timekeeping
    
    This converts the i386 arch to use the generic timeofday subsystem.  It
    enabled the GENERIC_TIME option, disables the timer_opts code and other arch
    specific timekeeping code and reworks the delay code.
    
    While this patch enables the generic timekeeping, please note that this patch
    does not provide any i386 clocksource.  Thus only the jiffies clocksource will
    be available.  To get full replacements for the code being disabled here, the
    timeofday-clocks-i386 patch will needed.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit cf3c769b4b0dd1146da84d5cf045dcfe53bd0f13
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Jun 26 00:25:08 2006 -0700

    [PATCH] Time: Introduce arch generic time accessors
    
    Introduces clocksource switching code and the arch generic time accessor
    functions that use the clocksource infrastructure.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 5eb6d20533d14a432df714520939a6181e28f099
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Jun 26 00:25:07 2006 -0700

    [PATCH] Time: Use clocksource abstraction for NTP adjustments
    
    Instead of incrementing xtime by tick_nsec + ntp adjustments, use the
    clocksource abstraction to increment and scale time.  Using the clocksource
    abstraction allows other clocksources to be used consistently in the face of
    late or lost ticks, while preserving the existing behavior via the jiffies
    clocksource.
    
    This removes the need to keep time_phase adjustments as we just use the
    current_tick_length() function as the NTP interface and accumulate time using
    shifted nanoseconds.
    
    The basics of this design was by Roman Zippel, however it is my own
    interpretation and implementation, so the credit should go to him and the
    blame to me.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 260a42309b31cbc54eb4b6b85649e412bcad053f
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Jun 26 00:25:07 2006 -0700

    [PATCH] Time: Let user request precision from current_tick_length()
    
    Change the current_tick_length() function so it takes an argument which
    specifies how much precision to return in shifted nanoseconds.  This provides
    a simple way to convert between NTPs internal nanoseconds shifted by
    (SHIFT_SCALE - 10) to other shifted nanosecond units that are used by the
    clocksource abstraction.
    
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit ad596171ed635c51a9eef829187af100cbf8dcf7
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Jun 26 00:25:06 2006 -0700

    [PATCH] Time: Use clocksource infrastructure for update_wall_time
    
    Modify the update_wall_time function so it increments time using the
    clocksource abstraction instead of jiffies.  Since the only clocksource driver
    currently provided is the jiffies clocksource, this should result in no
    functional change.  Additionally, a timekeeping_init and timekeeping_resume
    function has been added to initialize and maintain some of the new timekeping
    state.
    
    [hirofumi@mail.parknet.co.jp: fixlet]
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 734efb467b31e56c2f9430590a9aa867ecf3eea1
Author: John Stultz <johnstul@us.ibm.com>
Date:   Mon Jun 26 00:25:05 2006 -0700

    [PATCH] Time: Clocksource Infrastructure
    
    This introduces the clocksource management infrastructure.  A clocksource is a
    driver-like architecture generic abstraction of a free-running counter.  This
    code defines the clocksource structure, and provides management code for
    registering, selecting, accessing and scaling clocksources.
    
    Additionally, this includes the trivial jiffies clocksource, a lowest common
    denominator clocksource, provided mainly for use as an example.
    
    [hirofumi@mail.parknet.co.jp: Don't enable IRQ too early]
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
    Signed-off-by: John Stultz <johnstul@us.ibm.com>
    Signed-off-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>
