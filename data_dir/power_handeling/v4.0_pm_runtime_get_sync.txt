commit e0fce1d665d8c6b9195e5d198f32c75f033c20f5
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Wed Dec 14 10:51:18 2022 +0000

    ravb: Fix "failed to switch device to config mode" message during unbind
    
    [ Upstream commit c72a7e42592b2e18d862cf120876070947000d7a ]
    
    This patch fixes the error "ravb 11c20000.ethernet eth0: failed to switch
    device to config mode" during unbind.
    
    We are doing register access after pm_runtime_put_sync().
    
    We usually do cleanup in reverse order of init. Currently in
    remove(), the "pm_runtime_put_sync" is not in reverse order.
    
    Probe
            reset_control_deassert(rstc);
            pm_runtime_enable(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
    
    remove
            pm_runtime_put_sync(&pdev->dev);
            unregister_netdev(ndev);
            ..
            ravb_mdio_release(priv);
            pm_runtime_disable(&pdev->dev);
    
    Consider the call to unregister_netdev()
    unregister_netdev->unregister_netdevice_queue->rollback_registered_many
    that calls the below functions which access the registers after
    pm_runtime_put_sync()
     1) ravb_get_stats
     2) ravb_close
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221214105118.2495313-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7917484c99234439573cf7a62b45fc3f2ec9a710
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:49:40 2022 +0800

    crypto: omap-sham - Use pm_runtime_resume_and_get() in omap_sham_probe()
    
    [ Upstream commit 7bcceb4c9896b1b672b636ae70fe75110d6bf1ad ]
    
    omap_sham_probe() calls pm_runtime_get_sync() and calls
    pm_runtime_put_sync() latter to put usage_counter. However,
    pm_runtime_get_sync() will increment usage_counter even it failed. Fix
    it by replacing it with pm_runtime_resume_and_get() to keep usage
    counter balanced.
    
    Fixes: b359f034c8bf ("crypto: omap-sham - Convert to use pm_runtime API")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5c06dba46128b6d69586ff3903ccf56a6f7ff6c
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    [ Upstream commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015 ]
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f07c85ca1074ce447602022822529f99bc33ef7
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 06:29:55 2022 +0000

    soc: ti: knav_qmss_queue: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    [ Upstream commit 12eeb74925da70eb39d90abead9de9793be3d4c8 ]
    
    Using pm_runtime_resume_and_get is more appropriate for simplifying
    code.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20220418062955.2557949-1-chi.minghao@zte.com.cn
    Stable-dep-of: e961c0f19450 ("soc: ti: knav_qmss_queue: Fix PM disable depth imbalance in knav_queue_probe")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4fd6f3d26740c8906848ee94b552abf87a46985
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Wed Dec 14 10:51:18 2022 +0000

    ravb: Fix "failed to switch device to config mode" message during unbind
    
    [ Upstream commit c72a7e42592b2e18d862cf120876070947000d7a ]
    
    This patch fixes the error "ravb 11c20000.ethernet eth0: failed to switch
    device to config mode" during unbind.
    
    We are doing register access after pm_runtime_put_sync().
    
    We usually do cleanup in reverse order of init. Currently in
    remove(), the "pm_runtime_put_sync" is not in reverse order.
    
    Probe
            reset_control_deassert(rstc);
            pm_runtime_enable(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
    
    remove
            pm_runtime_put_sync(&pdev->dev);
            unregister_netdev(ndev);
            ..
            ravb_mdio_release(priv);
            pm_runtime_disable(&pdev->dev);
    
    Consider the call to unregister_netdev()
    unregister_netdev->unregister_netdevice_queue->rollback_registered_many
    that calls the below functions which access the registers after
    pm_runtime_put_sync()
     1) ravb_get_stats
     2) ravb_close
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221214105118.2495313-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f6d5b02222a721a0b9a9e87cfc1a624522e44b5
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    [ Upstream commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015 ]
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bad408a800023e7489aa501f967ae2f86f96426
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Wed Dec 14 10:51:18 2022 +0000

    ravb: Fix "failed to switch device to config mode" message during unbind
    
    commit c72a7e42592b2e18d862cf120876070947000d7a upstream.
    
    This patch fixes the error "ravb 11c20000.ethernet eth0: failed to switch
    device to config mode" during unbind.
    
    We are doing register access after pm_runtime_put_sync().
    
    We usually do cleanup in reverse order of init. Currently in
    remove(), the "pm_runtime_put_sync" is not in reverse order.
    
    Probe
            reset_control_deassert(rstc);
            pm_runtime_enable(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
    
    remove
            pm_runtime_put_sync(&pdev->dev);
            unregister_netdev(ndev);
            ..
            ravb_mdio_release(priv);
            pm_runtime_disable(&pdev->dev);
    
    Consider the call to unregister_netdev()
    unregister_netdev->unregister_netdevice_queue->rollback_registered_many
    that calls the below functions which access the registers after
    pm_runtime_put_sync()
     1) ravb_get_stats
     2) ravb_close
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221214105118.2495313-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b096f7c29a6d06bd7c1bc6d7c742614c9316352
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    [ Upstream commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015 ]
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5c75efd0a6cc181ae19244685e86f480955ffce
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Wed Dec 14 10:51:18 2022 +0000

    ravb: Fix "failed to switch device to config mode" message during unbind
    
    [ Upstream commit c72a7e42592b2e18d862cf120876070947000d7a ]
    
    This patch fixes the error "ravb 11c20000.ethernet eth0: failed to switch
    device to config mode" during unbind.
    
    We are doing register access after pm_runtime_put_sync().
    
    We usually do cleanup in reverse order of init. Currently in
    remove(), the "pm_runtime_put_sync" is not in reverse order.
    
    Probe
            reset_control_deassert(rstc);
            pm_runtime_enable(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
    
    remove
            pm_runtime_put_sync(&pdev->dev);
            unregister_netdev(ndev);
            ..
            ravb_mdio_release(priv);
            pm_runtime_disable(&pdev->dev);
    
    Consider the call to unregister_netdev()
    unregister_netdev->unregister_netdevice_queue->rollback_registered_many
    that calls the below functions which access the registers after
    pm_runtime_put_sync()
     1) ravb_get_stats
     2) ravb_close
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221214105118.2495313-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09814c669d18d0478ea00aaab71bd3d12006543e
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:49:40 2022 +0800

    crypto: omap-sham - Use pm_runtime_resume_and_get() in omap_sham_probe()
    
    [ Upstream commit 7bcceb4c9896b1b672b636ae70fe75110d6bf1ad ]
    
    omap_sham_probe() calls pm_runtime_get_sync() and calls
    pm_runtime_put_sync() latter to put usage_counter. However,
    pm_runtime_get_sync() will increment usage_counter even it failed. Fix
    it by replacing it with pm_runtime_resume_and_get() to keep usage
    counter balanced.
    
    Fixes: b359f034c8bf ("crypto: omap-sham - Convert to use pm_runtime API")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 110bf15825edf4f20bc4e56aba624297861b06ab
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 22 21:21:07 2022 +0800

    drm/rockchip: lvds: fix PM usage counter unbalance in poweron
    
    [ Upstream commit 4dba27f1a14592ac4cf71c3bc1cc1fd05dea8015 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it by replacing it with the newest pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    Fixes: 34cc0aa25456 ("drm/rockchip: Add support for Rockchip Soc LVDS")
    Fixes: cca1705c3d89 ("drm/rockchip: lvds: Add PX30 support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220922132107.105419-3-zhangqilong3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f870d5863e8e2ec0019a9a237b14dda175f93a31
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    [ Upstream commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015 ]
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e325b4ee414b0d84815873e3015bb486d8ffc573
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 06:29:55 2022 +0000

    soc: ti: knav_qmss_queue: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    [ Upstream commit 12eeb74925da70eb39d90abead9de9793be3d4c8 ]
    
    Using pm_runtime_resume_and_get is more appropriate for simplifying
    code.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20220418062955.2557949-1-chi.minghao@zte.com.cn
    Stable-dep-of: e961c0f19450 ("soc: ti: knav_qmss_queue: Fix PM disable depth imbalance in knav_queue_probe")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb16602140f0acec393b7e37021c95665afd6edc
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Wed Dec 14 10:51:18 2022 +0000

    ravb: Fix "failed to switch device to config mode" message during unbind
    
    [ Upstream commit c72a7e42592b2e18d862cf120876070947000d7a ]
    
    This patch fixes the error "ravb 11c20000.ethernet eth0: failed to switch
    device to config mode" during unbind.
    
    We are doing register access after pm_runtime_put_sync().
    
    We usually do cleanup in reverse order of init. Currently in
    remove(), the "pm_runtime_put_sync" is not in reverse order.
    
    Probe
            reset_control_deassert(rstc);
            pm_runtime_enable(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
    
    remove
            pm_runtime_put_sync(&pdev->dev);
            unregister_netdev(ndev);
            ..
            ravb_mdio_release(priv);
            pm_runtime_disable(&pdev->dev);
    
    Consider the call to unregister_netdev()
    unregister_netdev->unregister_netdevice_queue->rollback_registered_many
    that calls the below functions which access the registers after
    pm_runtime_put_sync()
     1) ravb_get_stats
     2) ravb_close
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221214105118.2495313-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75507a319876aba88932e2c7dab58b6c22d89f6b
Author: Richard Fitzgerald <rf@opensource.cirrus.com>
Date:   Mon Dec 19 13:01:45 2022 +0000

    i2c: designware: Fix unbalanced suspended flag
    
    Ensure that i2c_mark_adapter_suspended() is always balanced by a call to
    i2c_mark_adapter_resumed().
    
    dw_i2c_plat_resume() must always be called, so that
    i2c_mark_adapter_resumed() is called. This is not compatible with
    DPM_FLAG_MAY_SKIP_RESUME, so remove the flag.
    
    Since the controller is always resumed on system resume the
    dw_i2c_plat_complete() callback is redundant and has been removed.
    
    The unbalanced suspended flag was introduced by commit c57813b8b288
    ("i2c: designware: Lock the adapter while setting the suspended flag")
    
    Before that commit, the system and runtime PM used the same functions. The
    DPM_FLAG_MAY_SKIP_RESUME was used to skip the system resume if the driver
    had been in runtime-suspend. If system resume was skipped, the suspended
    flag would be cleared by the next runtime resume. The check of the
    suspended flag was _after_ the call to pm_runtime_get_sync() in
    i2c_dw_xfer(). So either a system resume or a runtime resume would clear
    the flag before it was checked.
    
    Having introduced the unbalanced suspended flag with that commit, a further
    commit 80704a84a9f8
    ("i2c: designware: Use the i2c_mark_adapter_suspended/resumed() helpers")
    
    changed from using a local suspended flag to using the
    i2c_mark_adapter_suspended/resumed() functions. These use a flag that is
    checked by I2C core code before issuing the transfer to the bus driver, so
    there was no opportunity for the bus driver to runtime resume itself before
    the flag check.
    
    Signed-off-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Fixes: c57813b8b288 ("i2c: designware: Lock the adapter while setting the suspended flag")
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 690a864cf0b5717fd0baf8a6d96734ed6e2bbce9
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    [ Upstream commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015 ]
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30e859c14f1f028cea9c07025636629e6c6316ae
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Wed Dec 14 10:51:18 2022 +0000

    ravb: Fix "failed to switch device to config mode" message during unbind
    
    commit c72a7e42592b2e18d862cf120876070947000d7a upstream.
    
    This patch fixes the error "ravb 11c20000.ethernet eth0: failed to switch
    device to config mode" during unbind.
    
    We are doing register access after pm_runtime_put_sync().
    
    We usually do cleanup in reverse order of init. Currently in
    remove(), the "pm_runtime_put_sync" is not in reverse order.
    
    Probe
            reset_control_deassert(rstc);
            pm_runtime_enable(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
    
    remove
            pm_runtime_put_sync(&pdev->dev);
            unregister_netdev(ndev);
            ..
            ravb_mdio_release(priv);
            pm_runtime_disable(&pdev->dev);
    
    Consider the call to unregister_netdev()
    unregister_netdev->unregister_netdevice_queue->rollback_registered_many
    that calls the below functions which access the registers after
    pm_runtime_put_sync()
     1) ravb_get_stats
     2) ravb_close
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221214105118.2495313-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 135b9ed45347ef22fd05e15a891d23c9b33d72f9
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Wed Dec 14 10:51:18 2022 +0000

    ravb: Fix "failed to switch device to config mode" message during unbind
    
    commit c72a7e42592b2e18d862cf120876070947000d7a upstream.
    
    This patch fixes the error "ravb 11c20000.ethernet eth0: failed to switch
    device to config mode" during unbind.
    
    We are doing register access after pm_runtime_put_sync().
    
    We usually do cleanup in reverse order of init. Currently in
    remove(), the "pm_runtime_put_sync" is not in reverse order.
    
    Probe
            reset_control_deassert(rstc);
            pm_runtime_enable(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
    
    remove
            pm_runtime_put_sync(&pdev->dev);
            unregister_netdev(ndev);
            ..
            ravb_mdio_release(priv);
            pm_runtime_disable(&pdev->dev);
    
    Consider the call to unregister_netdev()
    unregister_netdev->unregister_netdevice_queue->rollback_registered_many
    that calls the below functions which access the registers after
    pm_runtime_put_sync()
     1) ravb_get_stats
     2) ravb_close
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221214105118.2495313-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ec50ce315f47b4d0789e7d61e39886a179c6adb
Author: Yuan Can <yuancan@huawei.com>
Date:   Wed Jun 15 06:26:44 2022 +0000

    drm/rockchip: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    [ Upstream commit e3558747ebe15306e6d0b75bd6d211436be4a7d5 ]
    
    Replace pm_runtime_get_sync() with pm_runtime_resume_and_get() to avoid
    device usage counter leak.
    
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220615062644.96837-1-yuancan@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c19ca6553c2d04ab943a4f58747889c234858dd3
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:49:40 2022 +0800

    crypto: omap-sham - Use pm_runtime_resume_and_get() in omap_sham_probe()
    
    [ Upstream commit 7bcceb4c9896b1b672b636ae70fe75110d6bf1ad ]
    
    omap_sham_probe() calls pm_runtime_get_sync() and calls
    pm_runtime_put_sync() latter to put usage_counter. However,
    pm_runtime_get_sync() will increment usage_counter even it failed. Fix
    it by replacing it with pm_runtime_resume_and_get() to keep usage
    counter balanced.
    
    Fixes: b359f034c8bf ("crypto: omap-sham - Convert to use pm_runtime API")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b88b4035b21859e576aa2915e7a5f82e3a661d7e
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Fri Nov 25 02:02:13 2022 +0200

    drm/msm/mdp5: fix reading hw revision on db410c platform
    
    [ Upstream commit 5d8c0417ea62fed3cec7f5daed06a20477efeb39 ]
    
    Since the commit commit c6122688f265 ("drm/msm/mdp5: stop overriding
    drvdata") reading the MDP5 hw revision on db410c will crash the board
    as the MDSS_GDSC is not enabled. Revert a part of the offending commit
    (moving rpm enablement) and set priv->kms earlier. This make it possible
    to use pm_runtime_get_sync() during read_mdp_hw_revision(), which will
    power up both the MDP5 and MDSS devices.
    
    Fixes: c6122688f265 ("drm/msm/mdp5: stop overriding drvdata")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/512985/
    Link: https://lore.kernel.org/r/20221125000213.252115-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12a9b4c4ebd9a0ba856370e088564af83cffd565
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 22 21:21:07 2022 +0800

    drm/rockchip: lvds: fix PM usage counter unbalance in poweron
    
    [ Upstream commit 4dba27f1a14592ac4cf71c3bc1cc1fd05dea8015 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it by replacing it with the newest pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    Fixes: 34cc0aa25456 ("drm/rockchip: Add support for Rockchip Soc LVDS")
    Fixes: cca1705c3d89 ("drm/rockchip: lvds: Add PX30 support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220922132107.105419-3-zhangqilong3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12f45dc266f847daa7262d0a13dc47c1cb1b288c
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    [ Upstream commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015 ]
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6595b6bfe1b6466d1a9adbd2d4f95e38a15c329a
Author: Yuan Can <yuancan@huawei.com>
Date:   Wed Jun 15 06:26:44 2022 +0000

    drm/rockchip: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    [ Upstream commit e3558747ebe15306e6d0b75bd6d211436be4a7d5 ]
    
    Replace pm_runtime_get_sync() with pm_runtime_resume_and_get() to avoid
    device usage counter leak.
    
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220615062644.96837-1-yuancan@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49091a93997793683dcb7c5eecf73fd6aeda2adb
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:49:40 2022 +0800

    crypto: omap-sham - Use pm_runtime_resume_and_get() in omap_sham_probe()
    
    [ Upstream commit 7bcceb4c9896b1b672b636ae70fe75110d6bf1ad ]
    
    omap_sham_probe() calls pm_runtime_get_sync() and calls
    pm_runtime_put_sync() latter to put usage_counter. However,
    pm_runtime_get_sync() will increment usage_counter even it failed. Fix
    it by replacing it with pm_runtime_resume_and_get() to keep usage
    counter balanced.
    
    Fixes: b359f034c8bf ("crypto: omap-sham - Convert to use pm_runtime API")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01b63a1ac7f6c4962485b92a9e8732b3d24faf24
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Fri Nov 25 02:02:13 2022 +0200

    drm/msm/mdp5: fix reading hw revision on db410c platform
    
    [ Upstream commit 5d8c0417ea62fed3cec7f5daed06a20477efeb39 ]
    
    Since the commit commit c6122688f265 ("drm/msm/mdp5: stop overriding
    drvdata") reading the MDP5 hw revision on db410c will crash the board
    as the MDSS_GDSC is not enabled. Revert a part of the offending commit
    (moving rpm enablement) and set priv->kms earlier. This make it possible
    to use pm_runtime_get_sync() during read_mdp_hw_revision(), which will
    power up both the MDP5 and MDSS devices.
    
    Fixes: c6122688f265 ("drm/msm/mdp5: stop overriding drvdata")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/512985/
    Link: https://lore.kernel.org/r/20221125000213.252115-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 589a911980b730feadb9c430bc0747a118b04dd8
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 22 21:21:07 2022 +0800

    drm/rockchip: lvds: fix PM usage counter unbalance in poweron
    
    [ Upstream commit 4dba27f1a14592ac4cf71c3bc1cc1fd05dea8015 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it by replacing it with the newest pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    Fixes: 34cc0aa25456 ("drm/rockchip: Add support for Rockchip Soc LVDS")
    Fixes: cca1705c3d89 ("drm/rockchip: lvds: Add PX30 support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220922132107.105419-3-zhangqilong3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a910d2b8687bd1555a4e5bcc7c35e3fae4bf2e4
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    [ Upstream commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015 ]
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20d363dcd6dc00cf89dddfe38da1b20d921200b8
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:49:40 2022 +0800

    crypto: omap-sham - Use pm_runtime_resume_and_get() in omap_sham_probe()
    
    [ Upstream commit 7bcceb4c9896b1b672b636ae70fe75110d6bf1ad ]
    
    omap_sham_probe() calls pm_runtime_get_sync() and calls
    pm_runtime_put_sync() latter to put usage_counter. However,
    pm_runtime_get_sync() will increment usage_counter even it failed. Fix
    it by replacing it with pm_runtime_resume_and_get() to keep usage
    counter balanced.
    
    Fixes: b359f034c8bf ("crypto: omap-sham - Convert to use pm_runtime API")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6ed73db390319b248b91a6325da1a48ad85e0d1
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 22 21:21:07 2022 +0800

    drm/rockchip: lvds: fix PM usage counter unbalance in poweron
    
    [ Upstream commit 4dba27f1a14592ac4cf71c3bc1cc1fd05dea8015 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it by replacing it with the newest pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    Fixes: 34cc0aa25456 ("drm/rockchip: Add support for Rockchip Soc LVDS")
    Fixes: cca1705c3d89 ("drm/rockchip: lvds: Add PX30 support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220922132107.105419-3-zhangqilong3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77b99b483f82fb122e1ba3abdffce701d5baf28b
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    [ Upstream commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015 ]
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 972f8fc0651e76575854aaecd6d43d30dac667e2
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 06:29:55 2022 +0000

    soc: ti: knav_qmss_queue: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    [ Upstream commit 12eeb74925da70eb39d90abead9de9793be3d4c8 ]
    
    Using pm_runtime_resume_and_get is more appropriate for simplifying
    code.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20220418062955.2557949-1-chi.minghao@zte.com.cn
    Stable-dep-of: e961c0f19450 ("soc: ti: knav_qmss_queue: Fix PM disable depth imbalance in knav_queue_probe")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c72a7e42592b2e18d862cf120876070947000d7a
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Wed Dec 14 10:51:18 2022 +0000

    ravb: Fix "failed to switch device to config mode" message during unbind
    
    This patch fixes the error "ravb 11c20000.ethernet eth0: failed to switch
    device to config mode" during unbind.
    
    We are doing register access after pm_runtime_put_sync().
    
    We usually do cleanup in reverse order of init. Currently in
    remove(), the "pm_runtime_put_sync" is not in reverse order.
    
    Probe
            reset_control_deassert(rstc);
            pm_runtime_enable(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
    
    remove
            pm_runtime_put_sync(&pdev->dev);
            unregister_netdev(ndev);
            ..
            ravb_mdio_release(priv);
            pm_runtime_disable(&pdev->dev);
    
    Consider the call to unregister_netdev()
    unregister_netdev->unregister_netdevice_queue->rollback_registered_many
    that calls the below functions which access the registers after
    pm_runtime_put_sync()
     1) ravb_get_stats
     2) ravb_close
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Link: https://lore.kernel.org/r/20221214105118.2495313-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>

commit 1e4fa020d574768445fca2d9bbfe473ec8bbd224
Merge: a594533df0f6 a34506e08db7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 13 12:32:07 2022 -0800

    Merge tag 'mtd/for-6.2' of git://git.kernel.org/pub/scm/linux/kernel/git/mtd/linux
    
    Pull mtd updates from Miquel Raynal:
     "MTD core changes:
       - Fix refcount error in del_mtd_device()
       - Fix possible resource leak in init_mtd()
       - Set ROOT_DEV for partitions marked as rootfs in DT
       - Describe marking rootfs partitions in the bindings
       - Fix device name leak when register device fails in add_mtd_device()
       - Try to find OF node for every MTD partition
       - simplify (a bit) code find partition-matching dynamic OF node
    
      MTD driver changes:
       - pxa2xx-flash maps: fix memory leak in probe
       - BCM parser: refer to ARCH_BCMBCA instead of ARCH_BCM4908
       - lpddr2_nvm: Fix possible null-ptr-deref
       - inftlcore: fix repeated words in comments
       - lart: remove driver
       - tplink:
          - Add TP-Link SafeLoader partitions table parser and bindings
          - Describe TP-Link SafeLoader parser
          - Describe TP-Link SafeLoader dynamic subpartitions
       - mtdoops:
          - Panic caused mtdoops to call mtdoops_erase function immediately
          - Add mtdoops_erase function and move mtdoops_inc_counter after it
          - Change printk() to counterpart pr_ functions
    
      MTD binding cleanup:
       - Fixed-partitions: Fix 'sercomm,scpart-id' schema
       - Standardize the style in the examples
       - Drop object types when referencing other files
       - Argue in favor of keeping additionalProperties set to true
       - NVMEM-cells:
          - Inherit from MTD partitions
          - Drop range property from example
       - Partitions:
          - Change qcom,smem-part partition type
          - Constrain the list of parsers
       - Physmap: Reuse the generic definitions
       - SPI-NOR: Drop common properties
       - Sunxi-nand: Add an example to validate the bindings
       - Onenand: Mention the expected node name
       - Ingenic: Mark partitions in the controller node as deprecated
       - NAND:
          - Standardize the child node name
          - Drop common properties already defined in generic files
          - nand-chip.yaml should reference mtd.yaml
       - Remove useless file about partitions
       - Clarify all partition subnodes
    
      SPI NOR core changes:
       - Add support for flash reset using the dt reset-gpios property.
       - Update hwcaps.mask to include 8D-8D-8D read and page program ops
         when xSPI profile 1.0 table is defined.
       - Bypass zero erase size in spi_nor_find_best_erase_type().
       - Fix select_uniform_erase to skip 0 erase size
       - Add generic flash driver. If a flash is not found in the flash_info
         array, fall back to the generic flash driver which is described
         solely by the flash's SFDP tables.
       - Fix the number of bytes for the dummy cycles in
         spi_nor_spimem_check_readop().
       - Introduce SPI_NOR_QUAD_PP flag, as PP_1_1_4 is not SFDP
         discoverable.
    
      SPI NOR manufacturer drivers changes:
       - Spansion:
          - use PARSE_SFDP for s28hs512t,
          - add support for s28hl512t, s28hl01gt, and s28hs01gt.
       - Gigadevice: Replace default_init() with post_bfpt() for gd25q256.
       - Micron - ST: Enable locking for mt25qu256a.
       - Winbond: Add support for W25Q512NW-IQ.
       - ISSI: Use PARSE_SFDP and SPI_NOR_QUAD_PP.
    
      Raw NAND core changes:
       - Drop obsolete dependencies on COMPILE_TEST
       - MAINTAINERS: rectify entry for MESON NAND controller bindings
       - Drop EXPORT_SYMBOL_GPL for nanddev_erase()
    
      Raw NAND driver changes:
       - marvell: Enable NFC/DEVBUS arbiter
       - gpmi: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync
       - mpc5121: Replace NO_IRQ by 0
       - lpc32xx_{slc,mlc}:
          - Switch to using pm_ptr()
          - Switch to using gpiod API
       - lpc32xx_mlc: Switch to using pm_ptr()
       - cadence: Support 64-bit slave dma interface
       - rockchip: Describe rk3128-nfc in the bindings
       - brcmnand: Update interrupts description in the bindings
    
      SPI-NAND driver changes:
       - winbond:
          - Add Winbond W25N02KV flash support
          - Fix flash identification"
    
    * tag 'mtd/for-6.2' of git://git.kernel.org/pub/scm/linux/kernel/git/mtd/linux: (76 commits)
      mtd: rawnand: Drop obsolete dependencies on COMPILE_TEST
      mtd: maps: pxa2xx-flash: fix memory leak in probe
      mtd: core: Fix refcount error in del_mtd_device()
      mtd: spi-nor: add SFDP fixups for Quad Page Program
      mtd: spi-nor: issi: is25wp256: Init flash based on SFDP
      mtd: spi-nor: winbond: add support for W25Q512NW-IQ
      mtd: spi-nor: micron-st: Enable locking for mt25qu256a
      mtd: spi-nor: Fix the number of bytes for the dummy cycles
      mtd: spi-nor: gigadevice: gd25q256: replace gd25q256_default_init with gd25q256_post_bfpt
      mtd: spi-nor: Fix formatting in spi_nor_read_raw() kerneldoc comment
      mtd: spi-nor: sysfs: print JEDEC ID for generic flash driver
      mtd: spi-nor: add generic flash driver
      mtd: spi-nor: fix select_uniform_erase to skip 0 erase size
      mtd: spi-nor: move function declaration out of sfdp.h
      mtd: spi-nor: remember full JEDEC flash ID
      mtd: spi-nor: sysfs: hide manufacturer if it is not set
      mtd: spi-nor: hide jedec_id sysfs attribute if not present
      mtd: spi-nor: Check for zero erase size in spi_nor_find_best_erase_type()
      mtd: rawnand: marvell: Enable NFC/DEVBUS arbiter
      mtd: parsers: refer to ARCH_BCMBCA instead of ARCH_BCM4908
      ...

commit 1d46f1ae82494fae60802c1ed09ca5009e1b414c
Merge: 2399401feee2 6408cc05a50a
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Mon Dec 5 15:37:27 2022 +0100

    Merge tag 'nand/for-6.2' into mtd/next
    
    Raw NAND core changes:
    * Drop obsolete dependencies on COMPILE_TEST
    * MAINTAINERS: rectify entry for MESON NAND controller bindings
    * Drop EXPORT_SYMBOL_GPL for nanddev_erase()
    
    Raw NAND driver changes:
    * marvell: Enable NFC/DEVBUS arbiter
    * gpmi: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync
    * mpc5121: Replace NO_IRQ by 0
    * lpc32xx_{slc,mlc}:
      - Switch to using pm_ptr()
      - Switch to using gpiod API
    * lpc32xx_mlc: Switch to using pm_ptr()
    * cadence: Support 64-bit slave dma interface
    * rockchip: Describe rk3128-nfc in the bindings
    * brcmnand: Update interrupts description in the bindings
    
    SPI-NAND driver changes:
    * winbond:
      - Add Winbond W25N02KV flash support
      - Fix flash identification
    
    Fix merge conflict with mtd tree regarding the brcm bindings.
    
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>

commit 7bcceb4c9896b1b672b636ae70fe75110d6bf1ad
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:49:40 2022 +0800

    crypto: omap-sham - Use pm_runtime_resume_and_get() in omap_sham_probe()
    
    omap_sham_probe() calls pm_runtime_get_sync() and calls
    pm_runtime_put_sync() latter to put usage_counter. However,
    pm_runtime_get_sync() will increment usage_counter even it failed. Fix
    it by replacing it with pm_runtime_resume_and_get() to keep usage
    counter balanced.
    
    Fixes: b359f034c8bf ("crypto: omap-sham - Convert to use pm_runtime API")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Acked-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit f9ee20c85b3a3ba0afd3672630ec4f93d339f015
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Nov 24 14:51:50 2022 +0800

    irqchip: gic-pm: Use pm_runtime_resume_and_get() in gic_probe()
    
    gic_probe() calls pm_runtime_get_sync() and added fail path as
    rpm_put to put usage_counter. However, pm_runtime_get_sync()
    will increment usage_counter even it failed. Fix it by replacing it with
    pm_runtime_resume_and_get() to keep usage counter balanced.
    
    Fixes: 9c8edddfc992 ("irqchip/gic: Add platform driver for non-root GICs that require RPM")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20221124065150.22809-1-shangxiaojing@huawei.com

commit 5d8c0417ea62fed3cec7f5daed06a20477efeb39
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Fri Nov 25 02:02:13 2022 +0200

    drm/msm/mdp5: fix reading hw revision on db410c platform
    
    Since the commit commit c6122688f265 ("drm/msm/mdp5: stop overriding
    drvdata") reading the MDP5 hw revision on db410c will crash the board
    as the MDSS_GDSC is not enabled. Revert a part of the offending commit
    (moving rpm enablement) and set priv->kms earlier. This make it possible
    to use pm_runtime_get_sync() during read_mdp_hw_revision(), which will
    power up both the MDP5 and MDSS devices.
    
    Fixes: c6122688f265 ("drm/msm/mdp5: stop overriding drvdata")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Reviewed-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/512985/
    Link: https://lore.kernel.org/r/20221125000213.252115-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>

commit 483af3fe9031d6b720c85e3bf06b788099057b4f
Author: Benjamin Mugnier <benjamin.mugnier@foss.st.com>
Date:   Thu Nov 10 13:41:02 2022 +0000

    media: i2c: st-vgxy61: Fix smatch warnings
    
    Fix some 'vgxy61_write_reg' return vars not being signed int.
    Fix 'expo_long_max' not being initialized.
    Handle 'pm_runtime_get_sync' call that can return 1.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Benjamin Mugnier <benjamin.mugnier@foss.st.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 441f0ec0ae1ef7350fa546e03c12cc93082e11c6
Merge: f80c71f7a868 ce28ab1380e8
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri Nov 4 12:32:11 2022 +1000

    Merge tag 'drm-misc-next-2022-11-03' of git://anongit.freedesktop.org/drm/drm-misc into drm-next
    
    drm-misc-next for 6.2:
    
    UAPI Changes:
    
    Cross-subsystem Changes:
    - dma-buf: locking improvements
    - firmware: New API in the RaspberryPi firmware driver used by vc4
    
    Core Changes:
    - client: Null pointer dereference fix in drm_client_buffer_delete()
    - mm/buddy: Add back random seed log
    - ttm: Convert ttm_resource to use size_t for its size, fix for an
      undefined behaviour
    
    Driver Changes:
    - bridge:
      - adv7511: use dev_err_probe
      - it6505: Fix return value check of pm_runtime_get_sync
    - panel:
      - sitronix: Fixes and clean-ups
    - lcdif: Increase DMA burst size
    - rockchip: runtime_pm improvements
    - vc4: Fix for a regression preventing the use of 4k @ 60Hz, and
      further HDMI rate constraints check.
    - vmwgfx: Cursor improvements
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    
    From: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221103083437.ksrh3hcdvxaof62l@houat

commit 4dba27f1a14592ac4cf71c3bc1cc1fd05dea8015
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 22 21:21:07 2022 +0800

    drm/rockchip: lvds: fix PM usage counter unbalance in poweron
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it by replacing it with the newest pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    Fixes: 34cc0aa25456 ("drm/rockchip: Add support for Rockchip Soc LVDS")
    Fixes: cca1705c3d89 ("drm/rockchip: lvds: Add PX30 support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220922132107.105419-3-zhangqilong3@huawei.com

commit e3558747ebe15306e6d0b75bd6d211436be4a7d5
Author: Yuan Can <yuancan@huawei.com>
Date:   Wed Jun 15 06:26:44 2022 +0000

    drm/rockchip: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Replace pm_runtime_get_sync() with pm_runtime_resume_and_get() to avoid
    device usage counter leak.
    
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220615062644.96837-1-yuancan@huawei.com

commit 3e4a21a29dd924995f1135cd50e8b7e0d023729c
Author: Pin-yen Lin <treapking@chromium.org>
Date:   Thu Oct 27 11:21:49 2022 +0800

    drm/bridge: it6505: Fix return value check for pm_runtime_get_sync
    
    `pm_runtime_get_sync` may return 1 on success. Fix the `if` statement
    here to make the code less confusing, even though additional calls to
    `it6505_poweron` doesn't break anything when it's already powered.
    
    This was reported by Dan Carpenter <dan.carpenter@oracle.com> in
    https://lore.kernel.org/all/Y1fMCs6VnxbDcB41@kili/
    
    Fixes: 10517777d302 ("drm/bridge: it6505: Adapt runtime power management framework")
    Signed-off-by: Pin-yen Lin <treapking@chromium.org>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221027032149.2739912-1-treapking@chromium.org

commit 6d01017247eee3fba399f601b0bcb38e4fb88a72
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jun 2 07:08:36 2022 +0400

    clk: ti: dra7-atl: Fix reference leak in of_dra7_atl_clk_probe
    
    [ Upstream commit 9c59a01caba26ec06fefd6ca1f22d5fd1de57d63 ]
    
    pm_runtime_get_sync() will increment pm usage counter.
    Forgetting to putting operation will result in reference leak.
    Add missing pm_runtime_put_sync in some error paths.
    
    Fixes: 9ac33b0ce81f ("CLK: TI: Driver for DRA7 ATL (Audio Tracking Logic)")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220602030838.52057-1-linmq006@gmail.com
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc39ebf85d0349366b807fe2be848041c8523f03
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jun 2 07:08:36 2022 +0400

    clk: ti: dra7-atl: Fix reference leak in of_dra7_atl_clk_probe
    
    [ Upstream commit 9c59a01caba26ec06fefd6ca1f22d5fd1de57d63 ]
    
    pm_runtime_get_sync() will increment pm usage counter.
    Forgetting to putting operation will result in reference leak.
    Add missing pm_runtime_put_sync in some error paths.
    
    Fixes: 9ac33b0ce81f ("CLK: TI: Driver for DRA7 ATL (Audio Tracking Logic)")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220602030838.52057-1-linmq006@gmail.com
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25fe7b0d596b343e7a5504ba11767115fff8494f
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jun 2 07:08:36 2022 +0400

    clk: ti: dra7-atl: Fix reference leak in of_dra7_atl_clk_probe
    
    [ Upstream commit 9c59a01caba26ec06fefd6ca1f22d5fd1de57d63 ]
    
    pm_runtime_get_sync() will increment pm usage counter.
    Forgetting to putting operation will result in reference leak.
    Add missing pm_runtime_put_sync in some error paths.
    
    Fixes: 9ac33b0ce81f ("CLK: TI: Driver for DRA7 ATL (Audio Tracking Logic)")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220602030838.52057-1-linmq006@gmail.com
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d84f77ef7d57658d7346f8c4797a570aa5e35fa6
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jun 2 07:08:36 2022 +0400

    clk: ti: dra7-atl: Fix reference leak in of_dra7_atl_clk_probe
    
    [ Upstream commit 9c59a01caba26ec06fefd6ca1f22d5fd1de57d63 ]
    
    pm_runtime_get_sync() will increment pm usage counter.
    Forgetting to putting operation will result in reference leak.
    Add missing pm_runtime_put_sync in some error paths.
    
    Fixes: 9ac33b0ce81f ("CLK: TI: Driver for DRA7 ATL (Audio Tracking Logic)")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220602030838.52057-1-linmq006@gmail.com
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27abe45df1dc394c184688d816cbbf2f194d4c6a
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jun 2 07:08:36 2022 +0400

    clk: ti: dra7-atl: Fix reference leak in of_dra7_atl_clk_probe
    
    [ Upstream commit 9c59a01caba26ec06fefd6ca1f22d5fd1de57d63 ]
    
    pm_runtime_get_sync() will increment pm usage counter.
    Forgetting to putting operation will result in reference leak.
    Add missing pm_runtime_put_sync in some error paths.
    
    Fixes: 9ac33b0ce81f ("CLK: TI: Driver for DRA7 ATL (Audio Tracking Logic)")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220602030838.52057-1-linmq006@gmail.com
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3441076f83aace85f5d6ccd9ffb301ac6b874776
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jun 2 07:08:36 2022 +0400

    clk: ti: dra7-atl: Fix reference leak in of_dra7_atl_clk_probe
    
    [ Upstream commit 9c59a01caba26ec06fefd6ca1f22d5fd1de57d63 ]
    
    pm_runtime_get_sync() will increment pm usage counter.
    Forgetting to putting operation will result in reference leak.
    Add missing pm_runtime_put_sync in some error paths.
    
    Fixes: 9ac33b0ce81f ("CLK: TI: Driver for DRA7 ATL (Audio Tracking Logic)")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220602030838.52057-1-linmq006@gmail.com
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9f69663ad571cbd7814dde38e3fcb4876341ed6
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jun 2 07:08:36 2022 +0400

    clk: ti: dra7-atl: Fix reference leak in of_dra7_atl_clk_probe
    
    [ Upstream commit 9c59a01caba26ec06fefd6ca1f22d5fd1de57d63 ]
    
    pm_runtime_get_sync() will increment pm usage counter.
    Forgetting to putting operation will result in reference leak.
    Add missing pm_runtime_put_sync in some error paths.
    
    Fixes: 9ac33b0ce81f ("CLK: TI: Driver for DRA7 ATL (Audio Tracking Logic)")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220602030838.52057-1-linmq006@gmail.com
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1b5d2bed67c60c30d01a89df32152d74cfc8e63
Author: Xu Yang <xu.yang_2@nxp.com>
Date:   Sun Oct 9 23:53:36 2022 +0800

    usb: chipidea: core: handle usb role switch in a common way
    
    Currently, ci_usb_role_switch_set() may be called before system resume
    stage when suspended. Worse yet, ci_hdrc device may stay at RPM_ACTIVE
    state which will cause pm_runtime_get_sync() fail to resume the device.
    In this case, role-switch may unable to complete transition process due
    to not exit from lpm state or due to lack some means after system resume.
    
    Same as ci_cable_notifier(), usb_role_switch could handle its events based
    on ci_hdrc_cable mechanism.
    
    Signed-off-by: Xu Yang <xu.yang_2@nxp.com>
    Link: https://lore.kernel.org/r/20221009155336.766960-1-xu.yang_2@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c01ae99a4e3a0cdf70f7cd758a60a2243eac562c
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jun 2 07:08:36 2022 +0400

    clk: ti: dra7-atl: Fix reference leak in of_dra7_atl_clk_probe
    
    [ Upstream commit 9c59a01caba26ec06fefd6ca1f22d5fd1de57d63 ]
    
    pm_runtime_get_sync() will increment pm usage counter.
    Forgetting to putting operation will result in reference leak.
    Add missing pm_runtime_put_sync in some error paths.
    
    Fixes: 9ac33b0ce81f ("CLK: TI: Driver for DRA7 ATL (Audio Tracking Logic)")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220602030838.52057-1-linmq006@gmail.com
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6621be28248490cbea4a7b7dfb5b15177040ca0f
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Thu Sep 29 15:15:28 2022 +0200

    ASoC: wcd-mbhc-v2: Revert "ASoC: wcd-mbhc-v2: use pm_runtime_resume_and_get()"
    
    [ Upstream commit e18f6bcf8e864ea0e9690691d0d749c662b6a2c7 ]
    
    This reverts commit ddea4bbf287b6028eaa15a185d0693856956ecf2 ("ASoC:
    wcd-mbhc-v2: use pm_runtime_resume_and_get()"), because it introduced
    double runtime PM put if pm_runtime_get_sync() returns -EACCES:
    
      wcd934x-codec wcd934x-codec.3.auto: WCD934X Minor:0x1 Version:0x401
      wcd934x-codec wcd934x-codec.3.auto: Runtime PM usage count underflow!
    
    The commit claimed no changes in functionality except dropping the
    reference on -EACCESS.  This is exactly the change introducing bug
    because function calls unconditionally pm_runtime_put_autosuspend() at
    the end.
    
    Fixes: ddea4bbf287b ("ASoC: wcd-mbhc-v2: use pm_runtime_resume_and_get()")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20220929131528.217502-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78e2d5410a440bc232c2f5eedb6ab0403e9675b6
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 22 23:06:54 2022 +0800

    mtd: rawnand: gpmi: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using the newest pm_runtime_resume_and_get is more appropriate
    for simplifing code here.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20220922150654.117568-1-zhangqilong3@huawei.com

commit eec4ed317dccdef610b54224f45e0e1f4fdb75fb
Merge: 500b717fe36f 29926f1cd353
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Oct 11 10:49:17 2022 -0700

    Merge tag 'fbdev-for-6.1-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/linux-fbdev
    
    Pull fbdev updates from Helge Deller:
     "Here's a fix for the smscufx USB graphics card to prevent a kernel
      crash if it's plugged in/out too fast.
    
      The other patches are mostly small cleanups, fixes in failure paths
      and code removal:
    
       - fix an use-after-free in smscufx USB graphics driver
    
       - add missing pci_disable_device() in tridentfb failure paths
    
       - correctly handle irq detection failure in mb862xx driver
    
       - fix resume code in omapfb/dss
    
       - drop unused code in controlfb, tridentfb, arkfb, imxfb and udlfb
    
       - convert uvesafb to use scnprintf() instead of snprintf()
    
       - convert gbefb to use dev_groups
    
       - add MODULE_DEVICE_TABLE() entry to vga16fb"
    
    * tag 'fbdev-for-6.1-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/linux-fbdev:
      fbdev: mb862xx: Fix check of return value from irq_of_parse_and_map()
      fbdev: vga16fb: Add missing MODULE_DEVICE_TABLE() entry
      fbdev: tridentfb: Fix missing pci_disable_device() in probe and remove
      fbdev: smscufx: Fix use-after-free in ufx_ops_open()
      fbdev: gbefb: Convert to use dev_groups
      fbdev: imxfb: Remove redundant dev_err() call
      fbdev: omapfb/dss: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
      fbdev: uvesafb: Convert snprintf to scnprintf
      fbdev: arkfb: Remove the unused function dac_read_reg()
      fbdev: tridentfb: Remove the unused function shadowmode_off()
      fbdev: controlfb: Remove the unused function VAR_MATCH()
      fbdev: udlfb: Remove redundant initialization to variable identical

commit b0e0706007030d1eb05d25de0359725357fe5be6
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Sep 23 21:38:44 2022 +0800

    fbdev: omapfb/dss: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using the newest pm_runtime_resume_and_get is more appropriate
    for simplifing code here.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Helge Deller <deller@gmx.de>

commit 2bca25eaeba6190efbfcb38ed169bd7ee43b5aaf
Merge: d40c87457314 8e9204cddcc3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Oct 4 19:36:53 2022 -0700

    Merge tag 'spi-v6.1' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi
    
    Pull spi updates from Mark Brown:
     "With the exception of some refactoring to fix long standing issues
      where we weren't handling cache syncs properly for messages which had
      PIO and DMA transfers going to the same page correctly there has been
      no work on the core this time around, and it's also been quite a quiet
      release for the drivers too:
    
       - Fix cache syncs for cases where we have DMA and PIO transfers in
         the same message going to the same page
    
       - Update the fsl_spi driver to use transfer_one() rather than a
         custom transfer function
    
       - Support for configuring transfer speeds with the AMD SPI controller
    
       - Support for a second chip select and 64K erase on Intel SPI
    
       - Support for Microchip coreQSPI, Nuvoton NPCM845, NXP i.MX93, and
         Rockchip RK3128 and RK3588"
    
    * tag 'spi-v6.1' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi: (73 commits)
      spi: Ensure that sg_table won't be used after being freed
      spi: spi-gxp: Use devm_platform_ioremap_resource()
      spi: s3c64xx: Fix large transfers with DMA
      spi: Split transfers larger than max size
      spi: Fix cache corruption due to DMA/PIO overlap
      spi: Save current RX and TX DMA devices
      spi: mt65xx: Add dma max segment size declaration
      spi: migrate mt7621 text bindings to YAML
      spi: renesas,sh-msiof: Add r8a779g0 support
      spi: spi-fsl-qspi: Use devm_platform_ioremap_resource_byname()
      spi: spi-fsl-lpspi: Use devm_platform_get_and_ioremap_resource()
      spi: spi-fsl-dspi: Use devm_platform_get_and_ioremap_resource()
      spi/omap100k:Fix PM disable depth imbalance in omap1_spi100k_probe
      spi: dw: Fix PM disable depth imbalance in dw_spi_bt1_probe
      spi: cadence-quadspi: Fix PM disable depth imbalance in cqspi_probe
      spi: s3c24xx: Switch to use devm_spi_alloc_master()
      spi: xilinx: Switch to use devm_spi_alloc_master()
      spi: img-spfi: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
      spi: aspeed: Remove redundant dev_err call
      spi: spi-mpc52xx: switch to using gpiod API
      ...

commit 0c72dbc96be870e4de8f9707c9a4c6d7a641381c
Author: Peter Ujfalusi <peter.ujfalusi@gmail.com>
Date:   Tue Oct 4 14:51:21 2022 +0300

    Revert "ASoC: soc-component: using pm_runtime_resume_and_get instead of pm_runtime_get_sync"
    
    This reverts commit 08fc2a7448afc1660ec2f1b5c437fcd14155a7ee.
    
    The reverted commit causes the following warnigs:
    Runtime PM usage count underflow!
    
    This is due to the fact that the pm_runtime_resume_and_get() is calling
    pm_runtime_put_noidle() in case of < 0 return value of
    pm_runtime_get_sync() which includes the -EACCES.
    The change is wrong as -EACCES is returned in case of 'nested' get_sync()
    and it is a valid use of PM runtime.
    
    Fixes: 08fc2a7448af ("ASoC: soc-component: using pm_runtime_resume_and_get instead of pm_runtime_get_sync")
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Link: https://lore.kernel.org/r/20221004115121.26180-1-peter.ujfalusi@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit a1f136fd8725243a69681e4e20e29f7b2043ad93
Author: ye xingchen <ye.xingchen@zte.com.cn>
Date:   Tue Aug 2 07:46:43 2022 +0000

    watchdog: rti-wdt:using the pm_runtime_resume_and_get to simplify the code
    
    Using pm_runtime_resume_and_get() to instade of  pm_runtime_get_sync
    and pm_runtime_put_noidle.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: ye xingchen <ye.xingchen@zte.com.cn>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220802074643.1648660-1-ye.xingchen@zte.com.cn
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>

commit 9c59a01caba26ec06fefd6ca1f22d5fd1de57d63
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Thu Jun 2 07:08:36 2022 +0400

    clk: ti: dra7-atl: Fix reference leak in of_dra7_atl_clk_probe
    
    pm_runtime_get_sync() will increment pm usage counter.
    Forgetting to putting operation will result in reference leak.
    Add missing pm_runtime_put_sync in some error paths.
    
    Fixes: 9ac33b0ce81f ("CLK: TI: Driver for DRA7 ATL (Audio Tracking Logic)")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220602030838.52057-1-linmq006@gmail.com
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

commit e18f6bcf8e864ea0e9690691d0d749c662b6a2c7
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Thu Sep 29 15:15:28 2022 +0200

    ASoC: wcd-mbhc-v2: Revert "ASoC: wcd-mbhc-v2: use pm_runtime_resume_and_get()"
    
    This reverts commit ddea4bbf287b6028eaa15a185d0693856956ecf2 ("ASoC:
    wcd-mbhc-v2: use pm_runtime_resume_and_get()"), because it introduced
    double runtime PM put if pm_runtime_get_sync() returns -EACCES:
    
      wcd934x-codec wcd934x-codec.3.auto: WCD934X Minor:0x1 Version:0x401
      wcd934x-codec wcd934x-codec.3.auto: Runtime PM usage count underflow!
    
    The commit claimed no changes in functionality except dropping the
    reference on -EACCESS.  This is exactly the change introducing bug
    because function calls unconditionally pm_runtime_put_autosuspend() at
    the end.
    
    Fixes: ddea4bbf287b ("ASoC: wcd-mbhc-v2: use pm_runtime_resume_and_get()")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20220929131528.217502-1-krzysztof.kozlowski@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit e46e177fd8edfe0c417fcdfad9c733091a27b0fb
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Sep 12 15:20:40 2022 +0200

    i2c: imx: If pm_runtime_get_sync() returned 1 device access is possible
    
    [ Upstream commit 085aacaa73163f4b8a89dec24ecb32cfacd34017 ]
    
    pm_runtime_get_sync() returning 1 also means the device is powered. So
    resetting the chip registers in .remove() is possible and should be
    done.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: d98bdd3a5b50 ("i2c: imx: Make sure to unregister adapter on remove()")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c242dbf2e36f97cbb72366be1cce2068d01d3092
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Sep 12 15:20:40 2022 +0200

    i2c: imx: If pm_runtime_get_sync() returned 1 device access is possible
    
    [ Upstream commit 085aacaa73163f4b8a89dec24ecb32cfacd34017 ]
    
    pm_runtime_get_sync() returning 1 also means the device is powered. So
    resetting the chip registers in .remove() is possible and should be
    done.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: d98bdd3a5b50 ("i2c: imx: Make sure to unregister adapter on remove()")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d583ba79cde72cd98c9fda40203de2d71183bb2
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Thu Sep 16 19:18:52 2021 -0700

    usb: dwc3: gadget: Avoid starting DWC3 gadget during UDC unbind
    
    [ Upstream commit 8217f07a50236779880f13e87f99224cd9117f83 ]
    
    There is a race present where the DWC3 runtime resume runs in parallel
    to the UDC unbind sequence.  This will eventually lead to a possible
    scenario where we are enabling the run/stop bit, without a valid
    composition defined.
    
    Thread#1 (handling UDC unbind):
    usb_gadget_remove_driver()
    -->usb_gadget_disconnect()
      -->dwc3_gadget_pullup(0)
    --> continue UDC unbind sequence
    -->Thread#2 is running in parallel here
    
    Thread#2 (handing next cable connect)
    __dwc3_set_mode()
      -->pm_runtime_get_sync()
        -->dwc3_gadget_resume()
          -->dwc->gadget_driver is NOT NULL yet
          -->dwc3_gadget_run_stop(1)
          --> _dwc3gadget_start()
    ...
    
    Fix this by tracking the pullup disable routine, and avoiding resuming
    of the DWC3 gadget.  Once the UDC is re-binded, that will trigger the
    pullup enable routine, which would handle enabling the DWC3 gadget.
    
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/20210917021852.2037-1-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 040f2dbd2010 ("usb: dwc3: gadget: Avoid duplicate requests to enable Run/Stop")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f58c47c36d3f13c2c7368f9fd12636a22e1101a
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Sep 12 15:20:40 2022 +0200

    i2c: imx: If pm_runtime_get_sync() returned 1 device access is possible
    
    [ Upstream commit 085aacaa73163f4b8a89dec24ecb32cfacd34017 ]
    
    pm_runtime_get_sync() returning 1 also means the device is powered. So
    resetting the chip registers in .remove() is possible and should be
    done.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: d98bdd3a5b50 ("i2c: imx: Make sure to unregister adapter on remove()")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b83692feb09c1817674839f5b0ad68e630f61e51
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Thu Sep 16 19:18:52 2021 -0700

    usb: dwc3: gadget: Avoid starting DWC3 gadget during UDC unbind
    
    [ Upstream commit 8217f07a50236779880f13e87f99224cd9117f83 ]
    
    There is a race present where the DWC3 runtime resume runs in parallel
    to the UDC unbind sequence.  This will eventually lead to a possible
    scenario where we are enabling the run/stop bit, without a valid
    composition defined.
    
    Thread#1 (handling UDC unbind):
    usb_gadget_remove_driver()
    -->usb_gadget_disconnect()
      -->dwc3_gadget_pullup(0)
    --> continue UDC unbind sequence
    -->Thread#2 is running in parallel here
    
    Thread#2 (handing next cable connect)
    __dwc3_set_mode()
      -->pm_runtime_get_sync()
        -->dwc3_gadget_resume()
          -->dwc->gadget_driver is NOT NULL yet
          -->dwc3_gadget_run_stop(1)
          --> _dwc3gadget_start()
    ...
    
    Fix this by tracking the pullup disable routine, and avoiding resuming
    of the DWC3 gadget.  Once the UDC is re-binded, that will trigger the
    pullup enable routine, which would handle enabling the DWC3 gadget.
    
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/20210917021852.2037-1-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 040f2dbd2010 ("usb: dwc3: gadget: Avoid duplicate requests to enable Run/Stop")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e24f90d7617b908b42c41fafd7d4599e1b4970d3
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Thu Sep 16 19:18:52 2021 -0700

    usb: dwc3: gadget: Avoid starting DWC3 gadget during UDC unbind
    
    [ Upstream commit 8217f07a50236779880f13e87f99224cd9117f83 ]
    
    There is a race present where the DWC3 runtime resume runs in parallel
    to the UDC unbind sequence.  This will eventually lead to a possible
    scenario where we are enabling the run/stop bit, without a valid
    composition defined.
    
    Thread#1 (handling UDC unbind):
    usb_gadget_remove_driver()
    -->usb_gadget_disconnect()
      -->dwc3_gadget_pullup(0)
    --> continue UDC unbind sequence
    -->Thread#2 is running in parallel here
    
    Thread#2 (handing next cable connect)
    __dwc3_set_mode()
      -->pm_runtime_get_sync()
        -->dwc3_gadget_resume()
          -->dwc->gadget_driver is NOT NULL yet
          -->dwc3_gadget_run_stop(1)
          --> _dwc3gadget_start()
    ...
    
    Fix this by tracking the pullup disable routine, and avoiding resuming
    of the DWC3 gadget.  Once the UDC is re-binded, that will trigger the
    pullup enable routine, which would handle enabling the DWC3 gadget.
    
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/20210917021852.2037-1-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 040f2dbd2010 ("usb: dwc3: gadget: Avoid duplicate requests to enable Run/Stop")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0cc7c00089bf923259370fefc1d4f48d7252fc5
Merge: 105a36f3694e b7af938f4379
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Sep 25 08:44:46 2022 -0700

    Merge tag 'i2c-for-6.0-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/wsa/linux
    
    Pull i2c fixes from Wolfram Sang:
     "I2C driver bugfixes for mlxbf and imx, a few documentation fixes after
      the rework this cycle, and one hardening for the i2c-mux core"
    
    * tag 'i2c-for-6.0-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/wsa/linux:
      i2c: mux: harden i2c_mux_alloc() against integer overflows
      i2c: mlxbf: Fix frequency calculation
      i2c: mlxbf: prevent stack overflow in mlxbf_i2c_smbus_start_transaction()
      i2c: mlxbf: incorrect base address passed during io write
      Documentation: i2c: fix references to other documents
      MAINTAINERS: remove Nehal Shah from AMD MP2 I2C DRIVER
      i2c: imx: If pm_runtime_get_sync() returned 1 device access is possible

commit ff464745e4576ed8670bc2fc8da27e022f0ea56c
Author: Sun Ke <sunke32@huawei.com>
Date:   Fri Sep 2 10:58:19 2022 +0200

    media: platform: mtk-mdp3: fix PM reference leak in mdp_comp_clock_on()
    
    mdp_comp_clock_on will increase runtime PM usage counter,
    and mdp_comp_clock_off will decrease the runtime PM usage counter.
    so, if mdp_comp_clock_on failed after increment runtime PM usage
    counter, it should decrease it before return a error code.
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    And if failed to enable clk, add pm_runtime_put() to decrease the
    runtime PM usage counter.
    
    Fixes: 61890ccaefaf ("media: platform: mtk-mdp3: add MediaTek MDP3 driver")
    Signed-off-by: Sun Ke <sunke32@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit c79ce0a2824bc987ee4cd19f6a0a4e1eb493a8d8
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 22 23:02:32 2022 +0800

    spi: img-spfi: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using the newest pm_runtime_resume_and_get is more appropriate
    for simplifing code here.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220922150232.115843-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 08fc2a7448afc1660ec2f1b5c437fcd14155a7ee
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Thu Sep 22 22:58:46 2022 +0800

    ASoC: soc-component: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using the newest pm_runtime_resume_and_get is more appropriate
    for simplifing code here.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220922145846.114312-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 672c473576ca5c9f5a40ac848c938e6898a5aac8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Sep 9 13:56:45 2022 +0200

    drm/gma500: Rewrite power management code
    
    Rewrite the power.c code. For some reason this was doing locking +
    refcounting + state (suspended or not) bookkeeping all by itself.
    
    But there is no reason for this, this is all taken care of by
    the runtime-pm core, through pm_runtime_get()/_put().
    
    Besides this not being necessary the DIY code is also quite weird/
    buggy in some places. E.g. power_begin() would manually do a resume
    when not resumed already and force_on=true, followed by a
    pm_runtime_get(), which will cause a call to gma_power_resume() to
    get scheduled which would redo the entire resume again. Which can
    all be replaced by a single pm_runtime_get_sync() call.
    
    Note that this is just a cleanup, this does not actually fix
    the (disabled through #if 0) runtime-pm support. It does now call
    pm_runtime_enable(), but only after doing a pm_runtime_get() at
    probe-time, so the device is never runtime suspended.
    
    Doing this permanent get() + enable() instead of not calling
    enable() at all is necessary for the pm_runtime_get_if_in_use() call
    in gma_power_begin() to work properly.
    
    Note this also removes the gma_power_is_on() call a check like this
    without actually holding a reference is always racy, so it is a bad
    idea (and therefor has no pm_runtime_foo() equivalent).
    
    The 2 code paths which were using gma_power_is_on() are actually both
    guaranteed to only run when the device is powered-on so the 2 checks
    can simply be dropped.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220909115646.99920-6-hdegoede@redhat.com

commit 085aacaa73163f4b8a89dec24ecb32cfacd34017
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Sep 12 15:20:40 2022 +0200

    i2c: imx: If pm_runtime_get_sync() returned 1 device access is possible
    
    pm_runtime_get_sync() returning 1 also means the device is powered. So
    resetting the chip registers in .remove() is possible and should be
    done.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: d98bdd3a5b50 ("i2c: imx: Make sure to unregister adapter on remove()")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit aa6e96cb21658496f21ea5db10ae49bbc79f5801
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Jul 21 22:40:54 2022 +0200

    dmaengine: sprd: Cleanup in .remove() after pm_runtime_get_sync() failed
    
    [ Upstream commit 1e42f82cbec7b2cc4873751e7791e6611901c5fc ]
    
    It's not allowed to quit remove early without cleaning up completely.
    Otherwise this results in resource leaks that probably yield graver
    problems later. Here for example some tasklets might survive the lifetime
    of the sprd-dma device and access sdev which is freed after .remove()
    returns.
    
    As none of the device freeing requires an active device, just ignore the
    return value of pm_runtime_get_sync().
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Baolin Wang <baolin.wang7@gmail.com>
    Link: https://lore.kernel.org/r/20220721204054.323602-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1fc64bf4526d790953948ebaeb9cf84d9a604a6
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Jul 21 22:40:54 2022 +0200

    dmaengine: sprd: Cleanup in .remove() after pm_runtime_get_sync() failed
    
    [ Upstream commit 1e42f82cbec7b2cc4873751e7791e6611901c5fc ]
    
    It's not allowed to quit remove early without cleaning up completely.
    Otherwise this results in resource leaks that probably yield graver
    problems later. Here for example some tasklets might survive the lifetime
    of the sprd-dma device and access sdev which is freed after .remove()
    returns.
    
    As none of the device freeing requires an active device, just ignore the
    return value of pm_runtime_get_sync().
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Baolin Wang <baolin.wang7@gmail.com>
    Link: https://lore.kernel.org/r/20220721204054.323602-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f43a72d4da91a96f106122322df40b274a6b205d
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Jul 21 22:40:54 2022 +0200

    dmaengine: sprd: Cleanup in .remove() after pm_runtime_get_sync() failed
    
    [ Upstream commit 1e42f82cbec7b2cc4873751e7791e6611901c5fc ]
    
    It's not allowed to quit remove early without cleaning up completely.
    Otherwise this results in resource leaks that probably yield graver
    problems later. Here for example some tasklets might survive the lifetime
    of the sprd-dma device and access sdev which is freed after .remove()
    returns.
    
    As none of the device freeing requires an active device, just ignore the
    return value of pm_runtime_get_sync().
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Baolin Wang <baolin.wang7@gmail.com>
    Link: https://lore.kernel.org/r/20220721204054.323602-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0bf3dcfb0396a502c2cc659320a7bda0c22c7e8e
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Jul 21 22:40:54 2022 +0200

    dmaengine: sprd: Cleanup in .remove() after pm_runtime_get_sync() failed
    
    [ Upstream commit 1e42f82cbec7b2cc4873751e7791e6611901c5fc ]
    
    It's not allowed to quit remove early without cleaning up completely.
    Otherwise this results in resource leaks that probably yield graver
    problems later. Here for example some tasklets might survive the lifetime
    of the sprd-dma device and access sdev which is freed after .remove()
    returns.
    
    As none of the device freeing requires an active device, just ignore the
    return value of pm_runtime_get_sync().
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Baolin Wang <baolin.wang7@gmail.com>
    Link: https://lore.kernel.org/r/20220721204054.323602-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 613d8b44e91b83be2cfca6f69f587634795903c4
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Jul 21 22:40:54 2022 +0200

    dmaengine: sprd: Cleanup in .remove() after pm_runtime_get_sync() failed
    
    [ Upstream commit 1e42f82cbec7b2cc4873751e7791e6611901c5fc ]
    
    It's not allowed to quit remove early without cleaning up completely.
    Otherwise this results in resource leaks that probably yield graver
    problems later. Here for example some tasklets might survive the lifetime
    of the sprd-dma device and access sdev which is freed after .remove()
    returns.
    
    As none of the device freeing requires an active device, just ignore the
    return value of pm_runtime_get_sync().
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Baolin Wang <baolin.wang7@gmail.com>
    Link: https://lore.kernel.org/r/20220721204054.323602-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7433d2fda2f0d1fcbfc72d3b36f908ad94aebf6d
Author: ye xingchen <ye.xingchen@zte.com.cn>
Date:   Tue Aug 2 07:48:20 2022 +0000

    crypto: sun8i-ce - using the pm_runtime_resume_and_get to simplify the code
    
    Using pm_runtime_resume_and_get() to instade of  pm_runtime_get_sync
    and pm_runtime_put_noidle.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: ye xingchen <ye.xingchen@zte.com.cn>
    Acked-by: Jernej Skrabec <jernej.skrabec@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 9e786e19303d3f2f1440d117c8649c38e6253b29
Author: Peter Wang <peter.wang@mediatek.com>
Date:   Wed Jul 27 11:05:26 2022 +0800

    scsi: ufs: core: Correct ufshcd_shutdown() flow
    
    commit 00511d2abf5708ad05dd5d1c36adb2468d274698 upstream.
    
    After ufshcd_wl_shutdown() set device power off and link off,
    ufshcd_shutdown() could turn off clock/power. Also remove
    pm_runtime_get_sync.
    
    The reason why it is safe to remove pm_runtime_get_sync() is because:
    
     - ufshcd_wl_shutdown() -> pm_runtime_get_sync() will resume hba->dev too.
    
     - device resume(turn on clk/power) is not required, even if device is in
       RPM_SUSPENDED.
    
    Link: https://lore.kernel.org/r/20220727030526.31022-1-peter.wang@mediatek.com
    Fixes: b294ff3e3449 ("scsi: ufs: core: Enable power management for wlun")
    Cc: <stable@vger.kernel.org> # 5.15.x
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Peter Wang <peter.wang@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2be585bc9acc1d2b99538778c4f3ccd0c28fff8
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed Jul 6 20:52:53 2022 +0800

    drm/bridge: anx7625: Fix NULL pointer crash when using edp-panel
    
    [ Upstream commit dfb02eb6bdf84697dbadd69a7df12db612ce4ed0 ]
    
    Move devm_of_dp_aux_populate_ep_devices() after pm runtime and i2c setup
    to avoid NULL pointer crash.
    
    edp-panel probe (generic_edp_panel_probe) calls pm_runtime_get_sync() to
    read EDID. At this time, bridge should have pm runtime enabled and i2c
    clients ready.
    
    Fixes: adca62ec370c ("drm/bridge: anx7625: Support reading edid through aux channel")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Reviewed-by: Xin Ji <xji@analogixsemi.com>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220706125254.2474095-4-hsinyi@chromium.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f02f24599057efdec08324f93087bf08d3b456f
Author: Peter Wang <peter.wang@mediatek.com>
Date:   Wed Jul 27 11:05:26 2022 +0800

    scsi: ufs: core: Correct ufshcd_shutdown() flow
    
    commit 00511d2abf5708ad05dd5d1c36adb2468d274698 upstream.
    
    After ufshcd_wl_shutdown() set device power off and link off,
    ufshcd_shutdown() could turn off clock/power. Also remove
    pm_runtime_get_sync.
    
    The reason why it is safe to remove pm_runtime_get_sync() is because:
    
     - ufshcd_wl_shutdown() -> pm_runtime_get_sync() will resume hba->dev too.
    
     - device resume(turn on clk/power) is not required, even if device is in
       RPM_SUSPENDED.
    
    Link: https://lore.kernel.org/r/20220727030526.31022-1-peter.wang@mediatek.com
    Fixes: b294ff3e3449 ("scsi: ufs: core: Enable power management for wlun")
    Cc: <stable@vger.kernel.org> # 5.15.x
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Peter Wang <peter.wang@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7977fcdf9b7895a3026bff5b2aa85e7307566af9
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed Jul 6 20:52:53 2022 +0800

    drm/bridge: anx7625: Fix NULL pointer crash when using edp-panel
    
    [ Upstream commit dfb02eb6bdf84697dbadd69a7df12db612ce4ed0 ]
    
    Move devm_of_dp_aux_populate_ep_devices() after pm runtime and i2c setup
    to avoid NULL pointer crash.
    
    edp-panel probe (generic_edp_panel_probe) calls pm_runtime_get_sync() to
    read EDID. At this time, bridge should have pm runtime enabled and i2c
    clients ready.
    
    Fixes: adca62ec370c ("drm/bridge: anx7625: Support reading edid through aux channel")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Reviewed-by: Xin Ji <xji@analogixsemi.com>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220706125254.2474095-4-hsinyi@chromium.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5183d66c4f42da0384d827240166b4344f2dd90
Author: Peter Wang <peter.wang@mediatek.com>
Date:   Wed Jul 27 11:05:26 2022 +0800

    scsi: ufs: core: Correct ufshcd_shutdown() flow
    
    commit 00511d2abf5708ad05dd5d1c36adb2468d274698 upstream.
    
    After ufshcd_wl_shutdown() set device power off and link off,
    ufshcd_shutdown() could turn off clock/power. Also remove
    pm_runtime_get_sync.
    
    The reason why it is safe to remove pm_runtime_get_sync() is because:
    
     - ufshcd_wl_shutdown() -> pm_runtime_get_sync() will resume hba->dev too.
    
     - device resume(turn on clk/power) is not required, even if device is in
       RPM_SUSPENDED.
    
    Link: https://lore.kernel.org/r/20220727030526.31022-1-peter.wang@mediatek.com
    Fixes: b294ff3e3449 ("scsi: ufs: core: Enable power management for wlun")
    Cc: <stable@vger.kernel.org> # 5.15.x
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Peter Wang <peter.wang@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d5d353bed32dc3ea52e2619e0d1c60b17133b91
Merge: c72687614b36 8447d0e75099
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 8 15:16:29 2022 -0700

    Merge tag 'rproc-v5.20' of git://git.kernel.org/pub/scm/linux/kernel/git/remoteproc/linux
    
    Pull remoteproc updates from Bjorn Andersson:
     "This introduces support for the remoteproc on Mediatek MT8188, and
      enables caches for MT8186 SCP. It adds support for PRU cores found on
      the TI K3 AM62x SoCs.
    
      It moves the recovery work after a firmware crash to an unbound
      workqueue, to allow recovery to happen in parallel.
    
      A new DMA API is introduced to release dma_mem for a device.
    
      It adds support a panic handler for the Qualcomm modem remoteproc,
      with the goal of having caches flushed in memory dumps for post-mortem
      debugging and it introduces a mechanism to wait for the modem firmware
      on SM8450 to decrypt part of its memory for post-mortem debugging.
    
      Qualcomm sysmon is restricted to only inform remote processors about
      peers that are actually running, to avoid a race where Linux tries to
      notify a recovering remote processor about its peers new state. A
      mechanism for waiting for the sysmon connection to be established is
      also introduced, to avoid out-of-sync updates for rapidly restarting
      remote processors.
    
      A number of Devicetree binding cleanups and conversions to YAML are
      introduced, to facilitate Devicetree validation. Lastly it introduces
      a number of smaller fixes and cleanups in the core and a few different
      drivers"
    
    * tag 'rproc-v5.20' of git://git.kernel.org/pub/scm/linux/kernel/git/remoteproc/linux: (42 commits)
      remoteproc: qcom_q6v5_pas: Do not fail if regulators are not found
      drivers/remoteproc: fix repeated words in comments
      remoteproc: Directly use ida_alloc()/free()
      remoteproc: Use unbounded workqueue for recovery work
      remoteproc: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
      remoteproc: qcom_q6v5_pas: Deal silently with optional px and cx regulators
      remoteproc: sysmon: Send sysmon state only for running rprocs
      remoteproc: sysmon: Wait for SSCTL service to come up
      remoteproc: qcom: q6v5: Set q6 state to offline on receiving wdog irq
      remoteproc: qcom: pas: Check if coredump is enabled
      remoteproc: qcom: pas: Mark devices as wakeup capable
      remoteproc: qcom: pas: Mark va as io memory
      remoteproc: qcom: pas: Add decrypt shutdown support for modem
      remoteproc: qcom: q6v5-mss: add powerdomains to MSM8996 config
      remoteproc: qcom_q6v5: Introduce panic handler for MSS
      remoteproc: qcom_q6v5_mss: Update MBA log info
      remoteproc: qcom: correct kerneldoc
      remoteproc: qcom_q6v5_mss: map/unmap metadata region before/after use
      remoteproc: qcom: using pm_runtime_resume_and_get to simplify the code
      remoteproc: mediatek: Support MT8188 SCP
      ...

commit 3466f49dd0dd9d30fe1e916b49fca1f4f99a3b66
Merge: 92ceebf920aa cdab30b44518
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 8 10:27:51 2022 -0700

    Merge tag 'hwlock-v5.20' of git://git.kernel.org/pub/scm/linux/kernel/git/remoteproc/linux
    
    Pull hwspinlock updates from Bjorn Andersson:
     "This removes the need for representing the Qualcomm SFPB mutex using
      an intermediate syscon node and it clean up the pm_runtime_get_sync()
      usage in the OMAP hwspinlock driver"
    
    * tag 'hwlock-v5.20' of git://git.kernel.org/pub/scm/linux/kernel/git/remoteproc/linux:
      hwspinlock: qcom: Add support for mmio usage to sfpb-mutex
      hwspinlock: using pm_runtime_resume_and_get instead of pm_runtime_get_sync

commit 31be1d0fbd950395701d9fd47d8fb1f99c996f61
Merge: 36001a2fa6cc a1873f837f9e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 4 18:44:38 2022 -0700

    Merge tag 'dmaengine-6.0-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/vkoul/dmaengine
    
    Pull dmaengine updates from Vinod Koul:
     "New support / Core:
    
       - Remove DMA_MEMCPY_SG for lack of users
    
       - Tegra 234 dmaengine support
    
       - Mediatek MT8365 dma support
    
       - Apple ADMAC driver
    
      Updates:
    
       - Yaml conversion for ST-Ericsson DMA40 binding and Freescale edma
    
       - rz-dmac updates and device_synchronize support
    
       - Bunch of typo in comments fixes in drivers
    
       - multithread support in sf-pdma driver"
    
    * tag 'dmaengine-6.0-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/vkoul/dmaengine: (50 commits)
      dmaengine: mediatek: mtk-hsdma: Fix typo 'the the' in comment
      dmaengine: axi-dmac: check cache coherency register
      dmaengine: sh: rz-dmac: Add device_synchronize callback
      dmaengine: sprd: Cleanup in .remove() after pm_runtime_get_sync() failed
      dmaengine: tegra: Add terminate() for Tegra234
      dt-bindings: dmaengine: Add compatible for Tegra234
      dmaengine: xilinx: use strscpy to replace strlcpy
      dmaengine: imx-sdma: Add FIFO stride support for multi FIFO script
      dmaengine: idxd: Correct IAX operation code names
      dmaengine: imx-dma: Cast of_device_get_match_data() with (uintptr_t)
      dmaengine: dw-axi-dmac: ignore interrupt if no descriptor
      dmaengine: dw-axi-dmac: do not print NULL LLI during error
      dmaengine: altera-msgdma: Fixed some inconsistent function name descriptions
      dmaengine: imx-sdma: Add missing struct documentation
      dmaengine: sf-pdma: Add multithread support for a DMA channel
      dt-bindings: dma: dw-axi-dmac: extend the number of interrupts
      dmaengine: dmatest: use strscpy to replace strlcpy
      dmaengine: ste_dma40: fix typo in comment
      dmaengine: jz4780: fix typo in comment
      dmaengine: s3c24xx: fix typo in comment
      ...

commit 00511d2abf5708ad05dd5d1c36adb2468d274698
Author: Peter Wang <peter.wang@mediatek.com>
Date:   Wed Jul 27 11:05:26 2022 +0800

    scsi: ufs: core: Correct ufshcd_shutdown() flow
    
    After ufshcd_wl_shutdown() set device power off and link off,
    ufshcd_shutdown() could turn off clock/power. Also remove
    pm_runtime_get_sync.
    
    The reason why it is safe to remove pm_runtime_get_sync() is because:
    
     - ufshcd_wl_shutdown() -> pm_runtime_get_sync() will resume hba->dev too.
    
     - device resume(turn on clk/power) is not required, even if device is in
       RPM_SUSPENDED.
    
    Link: https://lore.kernel.org/r/20220727030526.31022-1-peter.wang@mediatek.com
    Fixes: b294ff3e3449 ("scsi: ufs: core: Enable power management for wlun")
    Cc: <stable@vger.kernel.org> # 5.15.x
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Peter Wang <peter.wang@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 1e42f82cbec7b2cc4873751e7791e6611901c5fc
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Thu Jul 21 22:40:54 2022 +0200

    dmaengine: sprd: Cleanup in .remove() after pm_runtime_get_sync() failed
    
    It's not allowed to quit remove early without cleaning up completely.
    Otherwise this results in resource leaks that probably yield graver
    problems later. Here for example some tasklets might survive the lifetime
    of the sprd-dma device and access sdev which is freed after .remove()
    returns.
    
    As none of the device freeing requires an active device, just ignore the
    return value of pm_runtime_get_sync().
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Baolin Wang <baolin.wang7@gmail.com>
    Link: https://lore.kernel.org/r/20220721204054.323602-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 5df66302f03f87ae8953785a882d78e911f00c55
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Wed Jun 29 12:48:41 2022 +0300

    serial: 8250: Fix PM usage_count for console handover
    
    commit f9b11229b79c0fb2100b5bb4628a101b1d37fbf6 upstream.
    
    When console is enabled, univ8250_console_setup() calls
    serial8250_console_setup() before .dev is set to uart_port. Therefore,
    it will not call pm_runtime_get_sync(). Later, when the actual driver
    is going to take over univ8250_console_exit() is called. As .dev is
    already set, serial8250_console_exit() makes pm_runtime_put_sync() call
    with usage count being zero triggering PM usage count warning
    (extra debug for univ8250_console_setup(), univ8250_console_exit(), and
    serial8250_register_ports()):
    
    [    0.068987] univ8250_console_setup ttyS0 nodev
    [    0.499670] printk: console [ttyS0] enabled
    [    0.717955] printk: console [ttyS0] printing thread started
    [    1.960163] serial8250_register_ports assigned dev for ttyS0
    [    1.976830] printk: console [ttyS0] disabled
    [    1.976888] printk: console [ttyS0] printing thread stopped
    [    1.977073] univ8250_console_exit ttyS0 usage:0
    [    1.977075] serial8250 serial8250: Runtime PM usage count underflow!
    [    1.977429] dw-apb-uart.6: ttyS0 at MMIO 0x4010006000 (irq = 33, base_baud = 115200) is a 16550A
    [    1.977812] univ8250_console_setup ttyS0 usage:2
    [    1.978167] printk: console [ttyS0] printing thread started
    [    1.978203] printk: console [ttyS0] enabled
    
    To fix the issue, call pm_runtime_get_sync() in
    serial8250_register_ports() as soon as .dev is set for an uart_port
    if it has console enabled.
    
    This problem became apparent only recently because 82586a721595 ("PM:
    runtime: Avoid device usage count underflows") added the warning
    printout. I confirmed this problem also occurs with v5.18 (w/o the
    warning printout, obviously).
    
    Fixes: bedb404e91bb ("serial: 8250_port: Don't use power management for kernel console")
    Cc: stable <stable@kernel.org>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/b4f428e9-491f-daf2-2232-819928dc276e@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 190ce5cdc55d1b66ea582ac2be6fd5a72e3cc486
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Wed Jun 29 12:48:41 2022 +0300

    serial: 8250: Fix PM usage_count for console handover
    
    commit f9b11229b79c0fb2100b5bb4628a101b1d37fbf6 upstream.
    
    When console is enabled, univ8250_console_setup() calls
    serial8250_console_setup() before .dev is set to uart_port. Therefore,
    it will not call pm_runtime_get_sync(). Later, when the actual driver
    is going to take over univ8250_console_exit() is called. As .dev is
    already set, serial8250_console_exit() makes pm_runtime_put_sync() call
    with usage count being zero triggering PM usage count warning
    (extra debug for univ8250_console_setup(), univ8250_console_exit(), and
    serial8250_register_ports()):
    
    [    0.068987] univ8250_console_setup ttyS0 nodev
    [    0.499670] printk: console [ttyS0] enabled
    [    0.717955] printk: console [ttyS0] printing thread started
    [    1.960163] serial8250_register_ports assigned dev for ttyS0
    [    1.976830] printk: console [ttyS0] disabled
    [    1.976888] printk: console [ttyS0] printing thread stopped
    [    1.977073] univ8250_console_exit ttyS0 usage:0
    [    1.977075] serial8250 serial8250: Runtime PM usage count underflow!
    [    1.977429] dw-apb-uart.6: ttyS0 at MMIO 0x4010006000 (irq = 33, base_baud = 115200) is a 16550A
    [    1.977812] univ8250_console_setup ttyS0 usage:2
    [    1.978167] printk: console [ttyS0] printing thread started
    [    1.978203] printk: console [ttyS0] enabled
    
    To fix the issue, call pm_runtime_get_sync() in
    serial8250_register_ports() as soon as .dev is set for an uart_port
    if it has console enabled.
    
    This problem became apparent only recently because 82586a721595 ("PM:
    runtime: Avoid device usage count underflows") added the warning
    printout. I confirmed this problem also occurs with v5.18 (w/o the
    warning printout, obviously).
    
    Fixes: bedb404e91bb ("serial: 8250_port: Don't use power management for kernel console")
    Cc: stable <stable@kernel.org>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/b4f428e9-491f-daf2-2232-819928dc276e@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9cb6fabc90102f9e61fe35bd0160db88f4f53b4
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Wed Jun 29 12:48:41 2022 +0300

    serial: 8250: Fix PM usage_count for console handover
    
    commit f9b11229b79c0fb2100b5bb4628a101b1d37fbf6 upstream.
    
    When console is enabled, univ8250_console_setup() calls
    serial8250_console_setup() before .dev is set to uart_port. Therefore,
    it will not call pm_runtime_get_sync(). Later, when the actual driver
    is going to take over univ8250_console_exit() is called. As .dev is
    already set, serial8250_console_exit() makes pm_runtime_put_sync() call
    with usage count being zero triggering PM usage count warning
    (extra debug for univ8250_console_setup(), univ8250_console_exit(), and
    serial8250_register_ports()):
    
    [    0.068987] univ8250_console_setup ttyS0 nodev
    [    0.499670] printk: console [ttyS0] enabled
    [    0.717955] printk: console [ttyS0] printing thread started
    [    1.960163] serial8250_register_ports assigned dev for ttyS0
    [    1.976830] printk: console [ttyS0] disabled
    [    1.976888] printk: console [ttyS0] printing thread stopped
    [    1.977073] univ8250_console_exit ttyS0 usage:0
    [    1.977075] serial8250 serial8250: Runtime PM usage count underflow!
    [    1.977429] dw-apb-uart.6: ttyS0 at MMIO 0x4010006000 (irq = 33, base_baud = 115200) is a 16550A
    [    1.977812] univ8250_console_setup ttyS0 usage:2
    [    1.978167] printk: console [ttyS0] printing thread started
    [    1.978203] printk: console [ttyS0] enabled
    
    To fix the issue, call pm_runtime_get_sync() in
    serial8250_register_ports() as soon as .dev is set for an uart_port
    if it has console enabled.
    
    This problem became apparent only recently because 82586a721595 ("PM:
    runtime: Avoid device usage count underflows") added the warning
    printout. I confirmed this problem also occurs with v5.18 (w/o the
    warning printout, obviously).
    
    Fixes: bedb404e91bb ("serial: 8250_port: Don't use power management for kernel console")
    Cc: stable <stable@kernel.org>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/b4f428e9-491f-daf2-2232-819928dc276e@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60349fd52ecbb8b14545ff25aba2f2e230c4d618
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 11 01:36:56 2022 +0000

    remoteproc: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20220411013656.2517150-1-chi.minghao@zte.com.cn

commit 8672e79d98bc702084f65ef6d118333bd73f09a2
Author: ran jianping <ran.jianping@zte.com.cn>
Date:   Thu Apr 28 06:45:45 2022 +0000

    remoteproc: qcom: using pm_runtime_resume_and_get to simplify the code
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: ran jianping <ran.jianping@zte.com.cn>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20220428064545.3850057-1-ran.jianping@zte.com.cn

commit cfbb3c82d82177238dfca92feae93103bfd714f7
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jun 30 21:16:41 2022 +0200

    PM: runtime: Fix supplier device management during consumer probe
    
    commit 887371066039011144b4a94af97d9328df6869a2 upstream.
    
    Because pm_runtime_get_suppliers() bumps up the rpm_active counter
    of each device link to a supplier of the given device in addition
    to bumping up the supplier's PM-runtime usage counter, a runtime
    suspend of the consumer device may case the latter to go down to 0
    when pm_runtime_put_suppliers() is running on a remote CPU.  If that
    happens after pm_runtime_put_suppliers() has released power.lock for
    the consumer device, and a runtime resume of that device takes place
    immediately after it, before pm_runtime_put() is called for the
    supplier, that pm_runtime_put() call may cause the supplier to be
    suspended even though the consumer is active.
    
    To prevent that from happening, modify pm_runtime_get_suppliers() to
    call pm_runtime_get_sync() for the given device's suppliers without
    touching the rpm_active counters of the involved device links
    Accordingly, modify pm_runtime_put_suppliers() to call pm_runtime_put()
    for the given device's suppliers without looking at the rpm_active
    counters of the device links at hand.  [This is analogous to what
    happened before commit 4c06c4e6cf63 ("driver core: Fix possible
    supplier PM-usage counter imbalance").]
    
    Since pm_runtime_get_suppliers() sets supplier_preactivated for each
    device link where the supplier's PM-runtime usage counter has been
    incremented and pm_runtime_put_suppliers() calls pm_runtime_put() for
    the suppliers whose device links have supplier_preactivated set, the
    PM-runtime usage counter is balanced for each supplier and this is
    independent of the runtime suspend and resume of the consumer device.
    
    However, in case a device link with DL_FLAG_PM_RUNTIME set is dropped
    during the consumer device probe, so pm_runtime_get_suppliers() bumps
    up the supplier's PM-runtime usage counter, but it cannot be dropped by
    pm_runtime_put_suppliers(), make device_link_release_fn() take care of
    that.
    
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Reported-by: Peter Wang <peter.wang@mediatek.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Peter Wang <peter.wang@mediatek.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fda0f59a3aa41e0b724301747802e6ebeddae42a
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Wed May 18 16:52:36 2022 +0100

    media: ov7251: Fix multiple problems in s_stream callback
    
    The s_stream callback had several issues:
    
    - If pm_runtime_get_sync() fails, the usage_count is not put.
    
    - The sensor wasn't suspended if s_stream(subdev, 1) failed.
    
    Fix this.
    
    Fixes: ("media: i2c: Add pm_runtime support to ov7251")
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit dfb02eb6bdf84697dbadd69a7df12db612ce4ed0
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed Jul 6 20:52:53 2022 +0800

    drm/bridge: anx7625: Fix NULL pointer crash when using edp-panel
    
    Move devm_of_dp_aux_populate_ep_devices() after pm runtime and i2c setup
    to avoid NULL pointer crash.
    
    edp-panel probe (generic_edp_panel_probe) calls pm_runtime_get_sync() to
    read EDID. At this time, bridge should have pm runtime enabled and i2c
    clients ready.
    
    Fixes: adca62ec370c ("drm/bridge: anx7625: Support reading edid through aux channel")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Reviewed-by: Xin Ji <xji@analogixsemi.com>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220706125254.2474095-4-hsinyi@chromium.org

commit 887371066039011144b4a94af97d9328df6869a2
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jun 30 21:16:41 2022 +0200

    PM: runtime: Fix supplier device management during consumer probe
    
    Because pm_runtime_get_suppliers() bumps up the rpm_active counter
    of each device link to a supplier of the given device in addition
    to bumping up the supplier's PM-runtime usage counter, a runtime
    suspend of the consumer device may case the latter to go down to 0
    when pm_runtime_put_suppliers() is running on a remote CPU.  If that
    happens after pm_runtime_put_suppliers() has released power.lock for
    the consumer device, and a runtime resume of that device takes place
    immediately after it, before pm_runtime_put() is called for the
    supplier, that pm_runtime_put() call may cause the supplier to be
    suspended even though the consumer is active.
    
    To prevent that from happening, modify pm_runtime_get_suppliers() to
    call pm_runtime_get_sync() for the given device's suppliers without
    touching the rpm_active counters of the involved device links
    Accordingly, modify pm_runtime_put_suppliers() to call pm_runtime_put()
    for the given device's suppliers without looking at the rpm_active
    counters of the device links at hand.  [This is analogous to what
    happened before commit 4c06c4e6cf63 ("driver core: Fix possible
    supplier PM-usage counter imbalance").]
    
    Since pm_runtime_get_suppliers() sets supplier_preactivated for each
    device link where the supplier's PM-runtime usage counter has been
    incremented and pm_runtime_put_suppliers() calls pm_runtime_put() for
    the suppliers whose device links have supplier_preactivated set, the
    PM-runtime usage counter is balanced for each supplier and this is
    independent of the runtime suspend and resume of the consumer device.
    
    However, in case a device link with DL_FLAG_PM_RUNTIME set is dropped
    during the consumer device probe, so pm_runtime_get_suppliers() bumps
    up the supplier's PM-runtime usage counter, but it cannot be dropped by
    pm_runtime_put_suppliers(), make device_link_release_fn() take care of
    that.
    
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Reported-by: Peter Wang <peter.wang@mediatek.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Peter Wang <peter.wang@mediatek.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+

commit f9b11229b79c0fb2100b5bb4628a101b1d37fbf6
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Wed Jun 29 12:48:41 2022 +0300

    serial: 8250: Fix PM usage_count for console handover
    
    When console is enabled, univ8250_console_setup() calls
    serial8250_console_setup() before .dev is set to uart_port. Therefore,
    it will not call pm_runtime_get_sync(). Later, when the actual driver
    is going to take over univ8250_console_exit() is called. As .dev is
    already set, serial8250_console_exit() makes pm_runtime_put_sync() call
    with usage count being zero triggering PM usage count warning
    (extra debug for univ8250_console_setup(), univ8250_console_exit(), and
    serial8250_register_ports()):
    
    [    0.068987] univ8250_console_setup ttyS0 nodev
    [    0.499670] printk: console [ttyS0] enabled
    [    0.717955] printk: console [ttyS0] printing thread started
    [    1.960163] serial8250_register_ports assigned dev for ttyS0
    [    1.976830] printk: console [ttyS0] disabled
    [    1.976888] printk: console [ttyS0] printing thread stopped
    [    1.977073] univ8250_console_exit ttyS0 usage:0
    [    1.977075] serial8250 serial8250: Runtime PM usage count underflow!
    [    1.977429] dw-apb-uart.6: ttyS0 at MMIO 0x4010006000 (irq = 33, base_baud = 115200) is a 16550A
    [    1.977812] univ8250_console_setup ttyS0 usage:2
    [    1.978167] printk: console [ttyS0] printing thread started
    [    1.978203] printk: console [ttyS0] enabled
    
    To fix the issue, call pm_runtime_get_sync() in
    serial8250_register_ports() as soon as .dev is set for an uart_port
    if it has console enabled.
    
    This problem became apparent only recently because 82586a721595 ("PM:
    runtime: Avoid device usage count underflows") added the warning
    printout. I confirmed this problem also occurs with v5.18 (w/o the
    warning printout, obviously).
    
    Fixes: bedb404e91bb ("serial: 8250_port: Don't use power management for kernel console")
    Cc: stable <stable@kernel.org>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/b4f428e9-491f-daf2-2232-819928dc276e@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e0ec034dbcbc3ec2e6a4bdd6a0fbab8766d3ecd
Merge: bd10b0dafdcf cecc81d6a5de
Author: Mark Brown <broonie@kernel.org>
Date:   Tue Jun 28 11:30:10 2022 +0100

    ASoC: use pm_runtime_resume_and_get() when possible
    
    Merge series from Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>:
    
    After a set of SOF-specific changes, this patchset correct problematic
    uses of pm_runtime_get_sync() in ASoC, or simplifies the flow with no
    functional changes. Two patches for Intel platforms also add a test on
    resume success.
    
    Additional changes were initially suggested to completely remove the
    use of pm_runtime_get_sync(). These changes were dropped since they
    are way too invasive, specifically in cases where the return values
    were not tested, which would lead to duplicate pm_runtime_put(). The
    remaining uses of pm_runtime_get_sync() cannot really be blindly
    modified without context and knowledge of each driver.

commit cecc81d6a5deb094bdbc6a1d7f2c014ba9b71cf8
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Thu Jun 16 17:04:27 2022 -0500

    ASoC: ti: davinci-mcasp: use pm_runtime_resume_and_get()
    
    The use of pm_runtime_get_sync() is buggy with no use of put_noidle on
    error.
    
    Use pm_runtime_resume_and_get() instead.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Acked-by: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/20220616220427.136036-12-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 05b71fb2a5014d2430ff6c5678db021c67afa9ec
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Thu Jun 16 17:04:26 2022 -0500

    ASoC: tas2552: use pm_runtime_resume_and_get()
    
    The use of pm_runtime_get_sync() is buggy with no use of put_noidle() on
    error.
    
    Use pm_runtime_resume_and_get() instead.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/20220616220427.136036-11-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 38bc4ac431684498126f9baa3a530e5a132f0173
Merge: cbe232ab07ab 1e9124df8be0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 24 11:43:49 2022 -0700

    Merge tag 'drm-fixes-2022-06-24' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "Fixes for this week, bit larger than normal, but I think the last
      couple have been quieter, and it's only rc4.
    
      There are a lot of small msm fixes, and a slightly larger set of vc4
      fixes. The vc4 fixes clean up a lot of crashes around the rPI4
      hardware differences from earlier ones, and problems in the page flip
      and modeset code which assumed earlier hw, so I thought it would be
      okay to keep them in.
    
      Otherwise, it's a few amdgpu, i915, sun4i and a panel quirk.
    
      amdgpu:
       - Adjust GTT size logic
       - eDP fix for RMB
       - DCN 3.15 fix
       - DP training fix
       - Color encoding fix for DCN2+
    
      sun4i:
       - multiple suspend fixes
    
      vc4:
       - rework driver split for rpi4, fixes mulitple crashers.
    
      panel:
       - quirk for Aya Neo Next
    
      i915:
       - Revert low voltage SKU check removal to fix display issues
       - Apply PLL DCO fraction workaround for ADL-S
       - Don't show engine classes not present in client fdinfo
    
      msm:
       - Workaround for parade DSI bridge power sequencing
       - Fix for multi-planar YUV format offsets
       - Limiting WB modes to max sspp linewidth
       - Fixing the supported rotations to add 180 back for IGT
       - Fix to handle pm_runtime_get_sync() errors to avoid unclocked
         access in the bind() path for dpu driver
       - Fix the irq_free() without request issue which was a being hit
         frequently in CI.
       - Fix to add minimum ICC vote in the msm_mdss pm_resume path to
         address bootup splats
       - Fix to avoid dereferencing without checking in WB encoder
       - Fix to avoid crash during suspend in DP driver by ensuring
         interrupt mask bits are updated
       - Remove unused code from dpu_encoder_virt_atomic_check()
       - Fix to remove redundant init of dsc variable
       - Fix to ensure mmap offset is initialized to avoid memory corruption
         from unpin/evict
       - Fix double runpm disable in probe-defer path
       - VMA fenced-unpin fixes
       - Fix for WB max-width
       - Fix for rare dp resolution change issue"
    
    * tag 'drm-fixes-2022-06-24' of git://anongit.freedesktop.org/drm/drm: (41 commits)
      amd/display/dc: Fix COLOR_ENCODING and COLOR_RANGE doing nothing for DCN20+
      drm/amd/display: Fix typo in override_lane_settings
      drm/amd/display: Fix DC warning at driver load
      drm/amd: Revert "drm/amd/display: keep eDP Vdd on when eDP stream is already enabled"
      drm/amdgpu: Adjust logic around GTT size (v3)
      drm/sun4i: Return if frontend is not present
      drm/vc4: fix error code in vc4_check_tex_size()
      drm/sun4i: Add DMA mask and segment size
      drm/vc4: hdmi: Fixed possible integer overflow
      drm/i915/display: Re-add check for low voltage sku for max dp source rate
      drm/i915/fdinfo: Don't show engine classes not present
      drm/i915: Implement w/a 22010492432 for adl-s
      drm: panel-orientation-quirks: Add quirk for Aya Neo Next
      drm/msm/dp: force link training for display resolution change
      drm/msm/dpu: limit wb modes based on max_mixer_width
      drm/msm/dp: check core_initialized before disable interrupts at dp_display_unbind()
      drm/msm/mdp4: Fix refcount leak in mdp4_modeset_init_intf
      drm/msm: Don't overwrite hw fence in hw_init
      drm/msm: Drop update_fences()
      drm/vc4: Warn if some v3d code is run on BCM2711
      ...

commit 1e9124df8be0a43e4e9a10c5d1140d6ca8e50132
Merge: 08d27daaaa9e a6e2af64a79a
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri Jun 24 10:11:26 2022 +1000

    Merge tag 'drm-msm-fixes-2022-06-20' of https://gitlab.freedesktop.org/drm/msm into drm-fixes
    
    Fixes for v5.19-rc4
    
    - Workaround for parade DSI bridge power sequencing
    - Fix for multi-planar YUV format offsets
    - Limiting WB modes to max sspp linewidth
    - Fixing the supported rotations to add 180 back for IGT
    - Fix to handle pm_runtime_get_sync() errors to avoid unclocked access
      in the bind() path for dpu driver
    - Fix the irq_free() without request issue which was a being hit frequently
      in CI.
    - Fix to add minimum ICC vote in the msm_mdss pm_resume path to address
      bootup splats
    - Fix to avoid dereferencing without checking in WB encoder
    - Fix to avoid crash during suspend in DP driver by ensuring interrupt
      mask bits are updated
    - Remove unused code from dpu_encoder_virt_atomic_check()
    - Fix to remove redundant init of dsc variable
    - Fix to ensure mmap offset is initialized to avoid memory corruption
      from unpin/evict
    - Fix double runpm disable in probe-defer path
    - VMA fenced-unpin fixes
    - Fix for WB max-width
    - Fix for rare dp resolution change issue
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    From: Rob Clark <robdclark@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/CAF6AEGvdsOF1-+WfTWyEyu33XPcvxOCU00G-dz7EF2J+fdyUHg@mail.gmail.com

commit e87c65aeb46ca4f5b7dc08531200bcb8a426c62e
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Thu Jun 16 17:29:09 2022 -0500

    ALSA: x86: intel_hdmi_audio: enable pm_runtime and set autosuspend delay
    
    The existing code uses pm_runtime_get_sync/put_autosuspend, but
    pm_runtime was not explicitly enabled. The autosuspend delay was not
    set either, the value is set to 5s since HDMI is rather painful to
    resume.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Link: https://lore.kernel.org/r/20220616222910.136854-2-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 952e309f377a3db83f0150fee761d87776be8957
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Tue Apr 12 07:08:23 2022 +0000

    watchdog: rti-wdt: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit b3ac0c58fa8934926360268f3d89ec7680644d7b ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 2d63908bdbfb ("watchdog: Add K3 RTI watchdog support")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220412070824.23708-1-linmq006@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 205b1545cc56d689ddae26488a7f85d699704c01
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Wed Apr 27 07:56:19 2022 +0800

    soundwire: qcom: return error when pm_runtime_get_sync fails
    
    [ Upstream commit f6ee6c8499226eb158ca30457d346511f5e329ce ]
    
    For some reason there's a missing error return in two places.
    
    Fixes: 74e79da9fd46a ("soundwire: qcom: add runtime pm support")
    Fixes: 04d46a7b38375 ("soundwire: qcom: add in-band wake up interrupt support")
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20220426235623.4253-2-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a635239cd5484d8f2e702713ccc49ec82aa7594
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Fri Feb 25 17:53:16 2022 +0000

    watchdog: rzg2l_wdt: Fix 'BUG: Invalid wait context'
    
    [ Upstream commit e4cf89596c1f1e33309556699f910ced4abbaf44 ]
    
    This patch fixes the issue 'BUG: Invalid wait context' during restart()
    callback by using clk_prepare_enable() instead of pm_runtime_get_sync()
    for turning on the clocks during restart.
    
    This issue is noticed when testing with renesas_defconfig.
    
    [   42.213802] reboot: Restarting system
    [   42.217860]
    [   42.219364] =============================
    [   42.223368] [ BUG: Invalid wait context ]
    [   42.227372] 5.17.0-rc5-arm64-renesas-00002-g10393723e35e #522 Not tainted
    [   42.234153] -----------------------------
    [   42.238155] systemd-shutdow/1 is trying to lock:
    [   42.242766] ffff00000a650828 (&genpd->mlock){+.+.}-{3:3}, at: genpd_lock_mtx+0x14/0x20
    [   42.250709] other info that might help us debug this:
    [   42.255753] context-{4:4}
    [   42.258368] 2 locks held by systemd-shutdow/1:
    [   42.262806]  #0: ffff80000944e1c8 (system_transition_mutex#2){+.+.}-{3:3}, at: __do_sys_reboot+0xd0/0x250
    [   42.272388]  #1: ffff8000094c4e40 (rcu_read_lock){....}-{1:2}, at: atomic_notifier_call_chain+0x0/0x150
    [   42.281795] stack backtrace:
    [   42.284672] CPU: 0 PID: 1 Comm: systemd-shutdow Not tainted 5.17.0-rc5-arm64-renesas-00002-g10393723e35e #522
    [   42.294577] Hardware name: Renesas SMARC EVK based on r9a07g044c2 (DT)
    [   42.301096] Call trace:
    [   42.303538]  dump_backtrace+0xcc/0xd8
    [   42.307203]  show_stack+0x14/0x30
    [   42.310517]  dump_stack_lvl+0x88/0xb0
    [   42.314180]  dump_stack+0x14/0x2c
    [   42.317492]  __lock_acquire+0x1b24/0x1b50
    [   42.321502]  lock_acquire+0x120/0x3a8
    [   42.325162]  __mutex_lock+0x84/0x8f8
    [   42.328737]  mutex_lock_nested+0x30/0x58
    [   42.332658]  genpd_lock_mtx+0x14/0x20
    [   42.336319]  genpd_runtime_resume+0xc4/0x228
    [   42.340587]  __rpm_callback+0x44/0x170
    [   42.344337]  rpm_callback+0x64/0x70
    [   42.347824]  rpm_resume+0x4e0/0x6b8
    [   42.351310]  __pm_runtime_resume+0x50/0x78
    [   42.355404]  rzg2l_wdt_restart+0x28/0x68
    [   42.359329]  watchdog_restart_notifier+0x1c/0x30
    [   42.363943]  atomic_notifier_call_chain+0x94/0x150
    [   42.368732]  do_kernel_restart+0x24/0x30
    [   42.372652]  machine_restart+0x44/0x70
    [   42.376399]  kernel_restart+0x3c/0x60
    [   42.380058]  __do_sys_reboot+0x228/0x250
    [   42.383977]  __arm64_sys_reboot+0x20/0x28
    [   42.387983]  invoke_syscall+0x40/0xf8
    
    Fixes: 2cbc5cd0b55fa2 ("watchdog: Add Watchdog Timer driver for RZ/G2L")
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220225175320.11041-4-biju.das.jz@bp.renesas.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75b7b7f22292f98b67c43426e30c2a86c28f66ad
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:52 2022 +0000

    usb: dwc3: pci: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit a03e2ddab8e735e2cc315609b297b300e9cc60d2 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 8eed00b237a28 ("usb: dwc3: pci: Runtime resume child device from wq")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062652.10575-1-zhengyongjun3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62bcab8ca85b089dd454803e5b005461cd5745ec
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Tue Apr 12 07:08:23 2022 +0000

    watchdog: rti-wdt: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit b3ac0c58fa8934926360268f3d89ec7680644d7b ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 2d63908bdbfb ("watchdog: Add K3 RTI watchdog support")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220412070824.23708-1-linmq006@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6505541e5298cea2b79da68ee626f583f8e18784
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Fri Feb 25 17:53:16 2022 +0000

    watchdog: rzg2l_wdt: Fix 'BUG: Invalid wait context'
    
    [ Upstream commit e4cf89596c1f1e33309556699f910ced4abbaf44 ]
    
    This patch fixes the issue 'BUG: Invalid wait context' during restart()
    callback by using clk_prepare_enable() instead of pm_runtime_get_sync()
    for turning on the clocks during restart.
    
    This issue is noticed when testing with renesas_defconfig.
    
    [   42.213802] reboot: Restarting system
    [   42.217860]
    [   42.219364] =============================
    [   42.223368] [ BUG: Invalid wait context ]
    [   42.227372] 5.17.0-rc5-arm64-renesas-00002-g10393723e35e #522 Not tainted
    [   42.234153] -----------------------------
    [   42.238155] systemd-shutdow/1 is trying to lock:
    [   42.242766] ffff00000a650828 (&genpd->mlock){+.+.}-{3:3}, at: genpd_lock_mtx+0x14/0x20
    [   42.250709] other info that might help us debug this:
    [   42.255753] context-{4:4}
    [   42.258368] 2 locks held by systemd-shutdow/1:
    [   42.262806]  #0: ffff80000944e1c8 (system_transition_mutex#2){+.+.}-{3:3}, at: __do_sys_reboot+0xd0/0x250
    [   42.272388]  #1: ffff8000094c4e40 (rcu_read_lock){....}-{1:2}, at: atomic_notifier_call_chain+0x0/0x150
    [   42.281795] stack backtrace:
    [   42.284672] CPU: 0 PID: 1 Comm: systemd-shutdow Not tainted 5.17.0-rc5-arm64-renesas-00002-g10393723e35e #522
    [   42.294577] Hardware name: Renesas SMARC EVK based on r9a07g044c2 (DT)
    [   42.301096] Call trace:
    [   42.303538]  dump_backtrace+0xcc/0xd8
    [   42.307203]  show_stack+0x14/0x30
    [   42.310517]  dump_stack_lvl+0x88/0xb0
    [   42.314180]  dump_stack+0x14/0x2c
    [   42.317492]  __lock_acquire+0x1b24/0x1b50
    [   42.321502]  lock_acquire+0x120/0x3a8
    [   42.325162]  __mutex_lock+0x84/0x8f8
    [   42.328737]  mutex_lock_nested+0x30/0x58
    [   42.332658]  genpd_lock_mtx+0x14/0x20
    [   42.336319]  genpd_runtime_resume+0xc4/0x228
    [   42.340587]  __rpm_callback+0x44/0x170
    [   42.344337]  rpm_callback+0x64/0x70
    [   42.347824]  rpm_resume+0x4e0/0x6b8
    [   42.351310]  __pm_runtime_resume+0x50/0x78
    [   42.355404]  rzg2l_wdt_restart+0x28/0x68
    [   42.359329]  watchdog_restart_notifier+0x1c/0x30
    [   42.363943]  atomic_notifier_call_chain+0x94/0x150
    [   42.368732]  do_kernel_restart+0x24/0x30
    [   42.372652]  machine_restart+0x44/0x70
    [   42.376399]  kernel_restart+0x3c/0x60
    [   42.380058]  __do_sys_reboot+0x228/0x250
    [   42.383977]  __arm64_sys_reboot+0x20/0x28
    [   42.387983]  invoke_syscall+0x40/0xf8
    
    Fixes: 2cbc5cd0b55fa2 ("watchdog: Add Watchdog Timer driver for RZ/G2L")
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220225175320.11041-4-biju.das.jz@bp.renesas.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24ce123abe7a789fe8b25696d858f2c6bea34718
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:52 2022 +0000

    usb: dwc3: pci: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit a03e2ddab8e735e2cc315609b297b300e9cc60d2 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 8eed00b237a28 ("usb: dwc3: pci: Runtime resume child device from wq")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062652.10575-1-zhengyongjun3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5487a135c903b6aca59ca3a6c0f26fd46edc7fcb
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Tue Apr 12 07:08:23 2022 +0000

    watchdog: rti-wdt: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit b3ac0c58fa8934926360268f3d89ec7680644d7b ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 2d63908bdbfb ("watchdog: Add K3 RTI watchdog support")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220412070824.23708-1-linmq006@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8eb1ea6e839adc7441c8000e51dabb794283cea
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:52 2022 +0000

    usb: dwc3: pci: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit a03e2ddab8e735e2cc315609b297b300e9cc60d2 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 8eed00b237a28 ("usb: dwc3: pci: Runtime resume child device from wq")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062652.10575-1-zhengyongjun3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3354f2046ccae8a8c941511dfc22f03a859500c
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Tue Apr 12 07:08:23 2022 +0000

    watchdog: rti-wdt: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit b3ac0c58fa8934926360268f3d89ec7680644d7b ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 2d63908bdbfb ("watchdog: Add K3 RTI watchdog support")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220412070824.23708-1-linmq006@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a1bf8e5ad61f54ba2a52dd3bab1e9f94cdc0ff6
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:52 2022 +0000

    usb: dwc3: pci: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit a03e2ddab8e735e2cc315609b297b300e9cc60d2 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 8eed00b237a28 ("usb: dwc3: pci: Runtime resume child device from wq")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062652.10575-1-zhengyongjun3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ad7b3d9f83818ccb8308876f8b6565257a505ee
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:52 2022 +0000

    usb: dwc3: pci: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit a03e2ddab8e735e2cc315609b297b300e9cc60d2 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 8eed00b237a28 ("usb: dwc3: pci: Runtime resume child device from wq")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062652.10575-1-zhengyongjun3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7f0fd6f2566bd174a074f6a0b77f5d8167b78ba
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:41 2022 +0000

    spi: img-spfi: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit cc470d55343056d6b2a5c32e10e0aad06f324078 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062641.10486-1-zhengyongjun3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a307df3bfa8dcd800b4dad2a7aa4896737663f12
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:52 2022 +0000

    usb: dwc3: pci: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit a03e2ddab8e735e2cc315609b297b300e9cc60d2 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 8eed00b237a28 ("usb: dwc3: pci: Runtime resume child device from wq")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062652.10575-1-zhengyongjun3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e663ce18cafc55338da57daf2f756bef43d967e1
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:41 2022 +0000

    spi: img-spfi: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit cc470d55343056d6b2a5c32e10e0aad06f324078 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062641.10486-1-zhengyongjun3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 863f3c2a796d21d02606ea7ab537291aaa2b1164
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:41 2022 +0000

    spi: img-spfi: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit cc470d55343056d6b2a5c32e10e0aad06f324078 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062641.10486-1-zhengyongjun3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48711a93604ad5995fee2cb9e50b39655252bbc1
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:41 2022 +0000

    spi: img-spfi: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit cc470d55343056d6b2a5c32e10e0aad06f324078 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062641.10486-1-zhengyongjun3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7b6c95c3ef37d7a0b28e62391bccfefdabd7a18
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri Jun 10 10:12:45 2022 +0300

    ASoC: SOF: ipc3-dtrace: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace the pm_runtime_get_sync() and
    pm_runtime_put_noidle() pattern.
    
    No functional changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Link: https://lore.kernel.org/r/20220610071245.26576-1-peter.ujfalusi@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 02fbf7197d30bab755f9e53c6ed156c24f63cf8b
Author: Abhinav Kumar <quic_abhinavk@quicinc.com>
Date:   Wed May 18 15:34:07 2022 -0700

    drm/msm/dpu: handle pm_runtime_get_sync() errors in bind path
    
    [ Upstream commit 64b22a0da12adb571c01edd671ee43634ebd7e41 ]
    
    If there are errors while trying to enable the pm in the
    bind path, it will lead to unclocked access of hw revision
    register thereby crashing the device.
    
    This will not address why the pm_runtime_get_sync() fails
    but at the very least we should be able to prevent the
    crash by handling the error and bailing out earlier.
    
    changes in v2:
            - use pm_runtime_resume_and_get() instead of
              pm_runtime_get_sync()
    
    Fixes: 25fdd5933e4c ("drm/msm: Add SDM845 DPU support")
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Rob Clark <robdclark@gmail.com>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Patchwork: https://patchwork.freedesktop.org/patch/486721/
    Link: https://lore.kernel.org/r/20220518223407.26147-1-quic_abhinavk@quicinc.com
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85f5a5278b574d9dd827980d8a3c3613b9b9316a
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:41 2022 +0000

    spi: img-spfi: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit cc470d55343056d6b2a5c32e10e0aad06f324078 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062641.10486-1-zhengyongjun3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6a97cae14a4e5eb37775a8c00e40e30027b788c
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 09:03:52 2022 +0000

    scsi: ufs: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    [ Upstream commit 75b8715e20a20bc7b4844835e4035543a2674200 ]
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync() and
    pm_runtime_put_noidle(). This change is just to simplify the code, no
    actual functional changes.
    
    Link: https://lore.kernel.org/r/20220420090353.2588804-1-chi.minghao@zte.com.cn
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97dd217191cd2f1c58446ca320f6ce6fc241bfe9
Author: Abhinav Kumar <quic_abhinavk@quicinc.com>
Date:   Wed May 18 15:34:07 2022 -0700

    drm/msm/dpu: handle pm_runtime_get_sync() errors in bind path
    
    [ Upstream commit 64b22a0da12adb571c01edd671ee43634ebd7e41 ]
    
    If there are errors while trying to enable the pm in the
    bind path, it will lead to unclocked access of hw revision
    register thereby crashing the device.
    
    This will not address why the pm_runtime_get_sync() fails
    but at the very least we should be able to prevent the
    crash by handling the error and bailing out earlier.
    
    changes in v2:
            - use pm_runtime_resume_and_get() instead of
              pm_runtime_get_sync()
    
    Fixes: 25fdd5933e4c ("drm/msm: Add SDM845 DPU support")
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Rob Clark <robdclark@gmail.com>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Patchwork: https://patchwork.freedesktop.org/patch/486721/
    Link: https://lore.kernel.org/r/20220518223407.26147-1-quic_abhinavk@quicinc.com
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit feff1b08e199ebc80b4ec0cfb6e98e6f5b13f0c8
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:41 2022 +0000

    spi: img-spfi: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit cc470d55343056d6b2a5c32e10e0aad06f324078 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062641.10486-1-zhengyongjun3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8cc58ee0bcbdf0b5653ee082b93368a2d8ba918f
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 09:03:52 2022 +0000

    scsi: ufs: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    [ Upstream commit 75b8715e20a20bc7b4844835e4035543a2674200 ]
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync() and
    pm_runtime_put_noidle(). This change is just to simplify the code, no
    actual functional changes.
    
    Link: https://lore.kernel.org/r/20220420090353.2588804-1-chi.minghao@zte.com.cn
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1bcaea4afcab09f8fc8fad5d0babf9e245b7e39
Author: Abhinav Kumar <quic_abhinavk@quicinc.com>
Date:   Wed May 18 15:34:07 2022 -0700

    drm/msm/dpu: handle pm_runtime_get_sync() errors in bind path
    
    [ Upstream commit 64b22a0da12adb571c01edd671ee43634ebd7e41 ]
    
    If there are errors while trying to enable the pm in the
    bind path, it will lead to unclocked access of hw revision
    register thereby crashing the device.
    
    This will not address why the pm_runtime_get_sync() fails
    but at the very least we should be able to prevent the
    crash by handling the error and bailing out earlier.
    
    changes in v2:
            - use pm_runtime_resume_and_get() instead of
              pm_runtime_get_sync()
    
    Fixes: 25fdd5933e4c ("drm/msm: Add SDM845 DPU support")
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Rob Clark <robdclark@gmail.com>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Patchwork: https://patchwork.freedesktop.org/patch/486721/
    Link: https://lore.kernel.org/r/20220518223407.26147-1-quic_abhinavk@quicinc.com
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ba2bb87e9e9bc8ed930d18027d200cd767d5b23
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:41 2022 +0000

    spi: img-spfi: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit cc470d55343056d6b2a5c32e10e0aad06f324078 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062641.10486-1-zhengyongjun3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ab08d7c16531311f80a70e0637e60429af9710f
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 09:03:52 2022 +0000

    scsi: ufs: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    [ Upstream commit 75b8715e20a20bc7b4844835e4035543a2674200 ]
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync() and
    pm_runtime_put_noidle(). This change is just to simplify the code, no
    actual functional changes.
    
    Link: https://lore.kernel.org/r/20220420090353.2588804-1-chi.minghao@zte.com.cn
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffbcfb1688f6141f5286e6f41501fe9fb7af788a
Author: Abhinav Kumar <quic_abhinavk@quicinc.com>
Date:   Wed May 18 15:34:07 2022 -0700

    drm/msm/dpu: handle pm_runtime_get_sync() errors in bind path
    
    [ Upstream commit 64b22a0da12adb571c01edd671ee43634ebd7e41 ]
    
    If there are errors while trying to enable the pm in the
    bind path, it will lead to unclocked access of hw revision
    register thereby crashing the device.
    
    This will not address why the pm_runtime_get_sync() fails
    but at the very least we should be able to prevent the
    crash by handling the error and bailing out earlier.
    
    changes in v2:
            - use pm_runtime_resume_and_get() instead of
              pm_runtime_get_sync()
    
    Fixes: 25fdd5933e4c ("drm/msm: Add SDM845 DPU support")
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Rob Clark <robdclark@gmail.com>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Patchwork: https://patchwork.freedesktop.org/patch/486721/
    Link: https://lore.kernel.org/r/20220518223407.26147-1-quic_abhinavk@quicinc.com
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 172789fd9532ce34e12ae1f03608bb0475272adb
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:41 2022 +0000

    spi: img-spfi: Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit cc470d55343056d6b2a5c32e10e0aad06f324078 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062641.10486-1-zhengyongjun3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1869f9bfafe1166340205f94c56467bbc7ae613f
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 09:03:52 2022 +0000

    scsi: ufs: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    [ Upstream commit 75b8715e20a20bc7b4844835e4035543a2674200 ]
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync() and
    pm_runtime_put_noidle(). This change is just to simplify the code, no
    actual functional changes.
    
    Link: https://lore.kernel.org/r/20220420090353.2588804-1-chi.minghao@zte.com.cn
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab18b7b36a82b1900687c5718f7d46f0d8e77d86
Merge: 50fd82b3a9a9 404204340c0d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 3 09:49:29 2022 -0700

    Merge tag 'drm-next-2022-06-03-1' of git://anongit.freedesktop.org/drm/drm
    
    Pull more drm updates from Dave Airlie:
     "This is mostly regular fixes, msm and amdgpu. There is a tegra patch
      that is bit of prep work for a 5.20 feature to avoid some inter-tree
      syncs, and a couple of late addition amdgpu uAPI changes but best to
      get those in early, and the userspace pieces are ready.
    
      msm:
       - Limiting WB modes to max sspp linewidth
       - Fixing the supported rotations to add 180 back for IGT
       - Fix to handle pm_runtime_get_sync() errors to avoid unclocked
         access in the bind() path for dpu driver
       - Fix the irq_free() without request issue which was a big-time
         hitter in the CI-runs.
    
      amdgpu:
       - Update fdinfo to the common drm format
       - uapi:
           - Add VM_NOALLOC GPUVM attribute to prevent buffers for going
             into the MALL
           - Add AMDGPU_GEM_CREATE_DISCARDABLE flag to create buffers that
             can be discarded on eviction
           - Mesa code which uses these:
               https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/16466
       - Link training fixes
       - DPIA fixes
       - Misc code cleanups
       - Aux fixes
       - Hotplug fixes
       - More FP clean up
       - Misc GFX9/10 fixes
       - Fix a possible memory leak in SMU shutdown
       - SMU 13 updates
       - RAS fixes
       - TMZ fixes
       - GC 11 updates
       - SMU 11 metrics fixes
       - Fix coverage blend mode for overlay plane
       - Note DDR vs LPDDR memory
       - Fuzz fix for CS IOCTL
       - Add new PCI DID
    
      amdkfd:
       - Clean up hive setup
       - Misc fixes
    
      tegra:
       - add some prelim 5.20 work to avoid inter-tree mess"
    
    * tag 'drm-next-2022-06-03-1' of git://anongit.freedesktop.org/drm/drm: (57 commits)
      drm/msm/dpu: Move min BW request and full BW disable back to mdss
      drm/msm/dpu: Fix pointer dereferenced before checking
      drm/msm/dpu: Remove unused code
      drm/msm/disp/dpu1: remove superfluous init
      drm/msm/dp: Always clear mask bits to disable interrupts at dp_ctrl_reset_irq_ctrl()
      gpu: host1x: Add context bus
      drm/amdgpu: add drm-client-id to fdinfo v2
      drm/amdgpu: Convert to common fdinfo format v5
      drm/amdgpu: bump minor version number
      drm/amdgpu: add AMDGPU_VM_NOALLOC v2
      drm/amdgpu: add AMDGPU_GEM_CREATE_DISCARDABLE
      drm/amdgpu: add beige goby PCI ID
      drm/amd/pm: Return auto perf level, if unsupported
      drm/amdkfd: fix typo in comment
      drm/amdgpu/gfx: fix typos in comments
      drm/amdgpu/cs: make commands with 0 chunks illegal behaviour.
      drm/amdgpu: differentiate between LP and non-LP DDR memory
      drm/amdgpu: Resolve pcie_bif RAS recovery bug
      drm/amdgpu: clean up asd on the ta_firmware_header_v2_0
      drm/amdgpu/discovery: validate VCN and SDMA instances
      ...

commit c7993147519ca970ad4af17e0eac9d683e7721b9
Merge: 96752be4d7b4 da50aad6d867
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jun 1 14:13:41 2022 -0700

    Merge tag 'for-v5.19' of git://git.kernel.org/pub/scm/linux/kernel/git/sre/linux-power-supply
    
    Pull power supply and reset updates from Sebastian Reichel:
     "Not much from the power-supply subsystem this time around, since I was
      busy most of the cycle. This also contains some fixes that I
      originally planned to send for 5.18. Apart from this there is nothing
      noteworthy.
    
      Power-supply core:
    
       - init power_supply_info struct to zero
    
      Drivers:
    
       - bq27xxx: expose data for uncalibrated battery
    
       - bq24190-charger: use pm_runtime_resume_and_get
    
       - ab8500_fg: allocate wq in probe
    
       - axp288_fuel_gauge: drop BIOS version from 'T3 MRD' quirk
    
       - axp288_fuel_gauge: modify 'T3 MRD' quirk to also fix 'One Mix 1'"
    
    * tag 'for-v5.19' of git://git.kernel.org/pub/scm/linux/kernel/git/sre/linux-power-supply:
      power: supply: bq24190_charger: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
      power: supply: bq27xxx: expose battery data when CI=1
      power: supply: ab8500_fg: Allocate wq in probe
      power: supply: axp288_fuel_gauge: Drop BIOS version check from "T3 MRD" DMI quirk
      power: supply: axp288_fuel_gauge: Fix battery reporting on the One Mix 1
      power: supply: core: Initialize struct to zero

commit 96752be4d7b443e6f1e322428d61f777d7d8bd4d
Merge: 176882156ae6 5d24df3d6908
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jun 1 14:05:16 2022 -0700

    Merge tag 'linux-watchdog-5.19-rc1' of git://www.linux-watchdog.org/linux-watchdog
    
    Pull watchdog updates from Wim Van Sebroeck:
    
     - Add MediaTek MT8186 support
    
     - Add Mediatek MT7986 reset-controller support
    
     - Add i.MX93 support
    
     - Add watchdog driver for Sunplus SP7021
    
     - Add SC8180X and SC8280XP compatibles
    
     - Add Renesas RZ/N1 Watchdog driver and support for RZ/N1
    
     - rzg2l_wdt improvements and fixes
    
     - Several other improvements and fixes
    
    * tag 'linux-watchdog-5.19-rc1' of git://www.linux-watchdog.org/linux-watchdog: (38 commits)
      watchdog: ts4800_wdt: Fix refcount leak in ts4800_wdt_probe
      dt-bindings: watchdog: renesas,wdt: R-Car V3U is R-Car Gen4
      watchdog: Add Renesas RZ/N1 Watchdog driver
      dt-bindings: watchdog: renesas,wdt: Add support for RZ/N1
      watchdog: wdat_wdt: Stop watchdog when uninstalling module
      watchdog: wdat_wdt: Stop watchdog when rebooting the system
      watchdog: wdat_wdt: Using the existing function to check parameter timeout
      dt-bindings: watchdog: da9062: add watchdog timeout mode
      dt-bindings: watchdog: renesas,wdt: Document RZ/G2UL SoC
      watchdog: iTCO_wdt: Using existing macro define covers more scenarios
      watchdog: rti-wdt: Fix pm_runtime_get_sync() error checking
      dt-bindings: watchdog: Add SC8180X and SC8280XP compatibles
      watchdog: rti_wdt: Fix calculation and evaluation of preset heartbeat
      dt-bindings: watchdog: uniphier: Use unevaluatedProperties
      watchdog: sp805: disable watchdog on remove
      watchdog: da9063: optionally disable watchdog during suspend
      dt-bindings: mfd: da9063: watchdog: add suspend disable option
      dt-bindings: watchdog: sunxi: clarify clock support
      dt-bindings: watchdog: sunxi: fix F1C100s compatible
      watchdog: Add watchdog driver for Sunplus SP7021
      ...

commit 433302dd8772fc4fe2b9ddcdb42f6a378317c665
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Sun Apr 24 20:49:01 2022 -0700

    Input: omap4-keypad - switch to using pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220414085710.2541867-1-chi.minghao@zte.com.cn
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

commit 6b0e34a0307e046c0662d7dcaba2a2c9993c4339
Merge: 3cc30140dbe2 71cc785d2955
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 27 15:33:24 2022 -0700

    Merge tag 'clk-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux
    
    Pull clk updates from Stephen Boyd:
     "Mainly driver updates this time around.
    
      There's a single patch to the core clk framework that simplifies a
      runtime PM call. Otherwise the majority of the diff falls to a few SoC
      drivers: Qualcomm, STM32 and MediaTek. Those SoCs gain some new
      hardware support and what comes along with that is quite a few lines
      of data and some clk_ops code.
    
      Beyond the new hardware support we have the usual pile of driver
      updates that add missing clks on already supported SoCs or fix up
      problems like bad clk tree descriptions. It's nice to see that more
      drivers are moving to clk_hw based APIs too.
    
      New Drivers:
       - Add STM32MP13 RCC driver (Reset Clock Controller)
       - MediaTek MT8186 SoC clk support
       - Airoha EN7523 SoC system clocks
       - Clock driver for exynosautov9 SoC
       - Renesas R-Car V4H and RZ/V2M SoCs
       - Renesas RZ/G2UL SoC
       - LPASS clk driver for Qualcomm sc7280 SoC
       - GCC clk driver for Qualcomm SC8280XP SoC
    
      Updates:
       - SDCC uses floor clk ops on Qualcomm MSM8976
       - Add modem reset and fix RPM clks on Qualcomm MSM8976
       - Add the two missing CLKOUT clocks for U8500/DB8500 SoC
       - Mark some clks critical on Ingenic X1000
       - Convert ux500 to clk_hw
       - Move MediaTek driver to clk_hw provider APIs
       - Use i2c driver probe_new to avoid id scans
       - Convert a number of Rockchip dt bindings to YAML
       - Mark hclk_vo critical on Rockchip rk3568
       - Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
       - Various cleanups like memory allocation error checks and plugged
         leaks
       - Allwinner H6 RTC clock support
       - Allwinner H616 32 kHz clock support
       - Add the Universal Flash Storage clock on Renesas R-Car S4-8
       - Add I2C, SSIF-2 (sound), USB, CANFD, OSTM (timer), WDT, SPI Multi
         I/O Bus, RSPI, TSU (thermal), and ADC clocks and resets on Renesas
         RZ/G2UL
       - Add display clock support on Renesas RZ/G2L
       - Add RPC (QSPI/HyperFlash) clocks on Renesas R-Car E3 and D3
       - Add 27 MHz phy PLL ref clock on i.MX
       - Add mcore_booted module parameter to tell kernel M core has already
         booted for i.MX
       - Remove snvs clock on i.MX because it was for secure world only
       - Add dt bindings for i.MX8MN GPT
       - Add DISP2 pixel clock for i.MX8MP
       - Add clkout1/2 for i.MX8MP
       - Fix parent clock of ubs_root_clk for i.MX8MP
       - Implement better RCG parking on Qualcomm SoCs using the shared RCG
         clk ops
       - Kerneldoc fixes
       - Switch Tegra BPMP to determine_rate clk op
       - Add a pointer to dt schema for generic clock bindings"
    
    * tag 'clk-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/clk/linux: (168 commits)
      Revert "clk: qcom: regmap-mux: add pipe clk implementation"
      Revert "clk: qcom: gcc-sc7280: use new clk_regmap_mux_safe_ops for PCIe pipe clocks"
      Revert "clk: qcom: gcc-sm8450: use new clk_regmap_mux_safe_ops for PCIe pipe clocks"
      clk: bcm: rpi: Use correct order for the parameters of devm_kcalloc()
      clk: stm32mp13: add safe mux management
      clk: stm32mp13: add multi mux function
      clk: stm32mp13: add all STM32MP13 kernel clocks
      clk: stm32mp13: add all STM32MP13 peripheral clocks
      clk: stm32mp13: manage secured clocks
      clk: stm32mp13: add composite clock
      clk: stm32mp13: add stm32 divider clock
      clk: stm32mp13: add stm32_gate management
      clk: stm32mp13: add stm32_mux clock management
      clk: stm32: Introduce STM32MP13 RCC drivers (Reset Clock Controller)
      dt-bindings: rcc: stm32: add new compatible for STM32MP13 SoC
      clk: ti: clkctrl: replace usage of found with dedicated list iterator variable
      clk: ti: composite: Prefer kcalloc over open coded arithmetic
      dt-bindings: clock: exynosautov9: correct count of NR_CLK
      clk: mediatek: mt8173: Switch to clk_hw provider APIs
      clk: mediatek: Switch to clk_hw provider APIs
      ...

commit 2518f226c60d8e04d18ba4295500a5b0b8ac7659
Merge: 86c87bea6b42 c4955d9cd2fc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 25 16:18:27 2022 -0700

    Merge tag 'drm-next-2022-05-25' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm updates from Dave Airlie:
     "Intel have enabled DG2 on certain SKUs for laptops, AMD has started
      some new GPU support, msm has user allocated VA controls
    
      dma-buf:
       - add dma_resv_replace_fences
       - add dma_resv_get_singleton
       - make dma_excl_fence private
    
      core:
       - EDID parser refactorings
       - switch drivers to drm_mode_copy/duplicate
       - DRM managed mutex initialization
    
      display-helper:
       - put HDMI, SCDC, HDCP, DSC and DP into new module
    
      gem:
       - rework fence handling
    
      ttm:
       - rework bulk move handling
       - add common debugfs for resource managers
       - convert to kvcalloc
    
      format helpers:
       - support monochrome formats
       - RGB888, RGB565 to XRGB8888 conversions
    
      fbdev:
       - cfb/sys_imageblit fixes
       - pagelist corruption fix
       - create offb platform device
       - deferred io improvements
    
      sysfb:
       - Kconfig rework
       - support for VESA mode selection
    
      bridge:
       - conversions to devm_drm_of_get_bridge
       - conversions to panel_bridge
       - analogix_dp - autosuspend support
       - it66121 - audio support
       - tc358767 - DSI to DPI support
       - icn6211 - PLL/I2C fixes, DT property
       - adv7611 - enable DRM_BRIDGE_OP_HPD
       - anx7625 - fill ELD if no monitor
       - dw_hdmi - add audio support
       - lontium LT9211 support, i.MXMP LDB
       - it6505: Kconfig fix, DPCD set power fix
       - adv7511 - CEC support for ADV7535
    
      panel:
       - ltk035c5444t, B133UAN01, NV3052C panel support
       - DataImage FG040346DSSWBG04 support
       - st7735r - DT bindings fix
       - ssd130x - fixes
    
      i915:
       - DG2 laptop PCI-IDs ("motherboard down")
       - Initial RPL-P PCI IDs
       - compute engine ABI
       - DG2 Tile4 support
       - DG2 CCS clear color compression support
       - DG2 render/media compression formats support
       - ATS-M platform info
       - RPL-S PCI IDs added
       - Bump ADL-P DMC version to v2.16
       - Support static DRRS
       - Support multiple eDP/LVDS native mode refresh rates
       - DP HDR support for HSW+
       - Lots of display refactoring + fixes
       - GuC hwconfig support and query
       - sysfs support for multi-tile
       - fdinfo per-client gpu utilisation
       - add geometry subslices query
       - fix prime mmap with LMEM
       - fix vm open count and remove vma refcounts
       - contiguous allocation fixes
       - steered register write support
       - small PCI BAR enablement
       - GuC error capture support
       - sunset igpu legacy mmap support for newer devices
       - GuC version 70.1.1 support
    
      amdgpu:
       - Initial SoC21 support
       - SMU 13.x enablement
       - SMU 13.0.4 support
       - ttm_eu cleanups
       - USB-C, GPUVM updates
       - TMZ fixes for RV
       - RAS support for VCN
       - PM sysfs code cleanup
       - DC FP rework
       - extend CG/PG flags to 64-bit
       - SI dpm lockdep fix
       - runtime PM fixes
    
      amdkfd:
       - RAS/SVM fixes
       - TLB flush fixes
       - CRIU GWS support
       - ignore bogus MEC signals more efficiently
    
      msm:
       - Fourcc modifier for tiled but not compressed layouts
       - Support for userspace allocated IOVA (GPU virtual address)
       - DPU: DSC (Display Stream Compression) support
       - DP: eDP support
       - DP: conversion to use drm_bridge and drm_bridge_connector
       - Merge DPU1 and MDP5 MDSS driver
       - DPU: writeback support
    
      nouveau:
       - make some structures static
       - make some variables static
       - switch to drm_gem_plane_helper_prepare_fb
    
      radeon:
       - misc fixes/cleanups
    
      mxsfb:
       - rework crtc mode setting
       - LCDIF CRC support
    
      etnaviv:
       - fencing improvements
       - fix address space collisions
       - cleanup MMU reference handling
    
      gma500:
       - GEM/GTT improvements
       - connector handling fixes
    
      komeda:
       - switch to plane reset helper
    
      mediatek:
       - MIPI DSI improvements
    
      omapdrm:
       - GEM improvements
    
      qxl:
       - aarch64 support
    
      vc4:
       - add a CL submission tracepoint
       - HDMI YUV support
       - HDMI/clock improvements
       - drop is_hdmi caching
    
      virtio:
       - remove restriction of non-zero blob types
    
      vmwgfx:
       - support for cursormob and cursorbypass 4
       - fence improvements
    
      tidss:
       - reset DISPC on startup
    
      solomon:
       - SPI support
       - DT improvements
    
      sun4i:
       - allwinner D1 support
       - drop is_hdmi caching
    
      imx:
       - use swap() instead of open-coding
       - use devm_platform_ioremap_resource
       - remove redunant initializations
    
      ast:
       - Displayport support
    
      rockchip:
       - Refactor IOMMU initialisation
       - make some structures static
       - replace drm_detect_hdmi_monitor with drm_display_info.is_hdmi
       - support swapped YUV formats,
       - clock improvements
       - rk3568 support
       - VOP2 support
    
      mediatek:
       - MT8186 support
    
      tegra:
       - debugabillity improvements"
    
    * tag 'drm-next-2022-05-25' of git://anongit.freedesktop.org/drm/drm: (1740 commits)
      drm/i915/dsi: fix VBT send packet port selection for ICL+
      drm/i915/uc: Fix undefined behavior due to shift overflowing the constant
      drm/i915/reg: fix undefined behavior due to shift overflowing the constant
      drm/i915/gt: Fix use of static in macro mismatch
      drm/i915/audio: fix audio code enable/disable pipe logging
      drm/i915: Fix CFI violation with show_dynamic_id()
      drm/i915: Fix 'mixing different enum types' warnings in intel_display_power.c
      drm/i915/gt: Fix build error without CONFIG_PM
      drm/msm/dpu: handle pm_runtime_get_sync() errors in bind path
      drm/msm/dpu: add DRM_MODE_ROTATE_180 back to supported rotations
      drm/msm: don't free the IRQ if it was not requested
      drm/msm/dpu: limit writeback modes according to max_linewidth
      drm/amd: Don't reset dGPUs if the system is going to s2idle
      drm/amdgpu: Unmap legacy queue when MES is enabled
      drm: msm: fix possible memory leak in mdp5_crtc_cursor_set()
      drm/msm: Fix fb plane offset calculation
      drm/msm/a6xx: Fix refcount leak in a6xx_gpu_init
      drm/msm/dsi: don't powerup at modeset time for parade-ps8640
      drm/rockchip: Change register space names in vop2
      dt-bindings: display: rockchip: make reg-names mandatory for VOP2
      ...

commit 016367b4445ee37656d27d5363a8b0f43d73506d
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Thu Mar 17 13:16:13 2022 +0000

    crypto: stm32 - fix reference leak in stm32_crc_remove
    
    [ Upstream commit e9a36feecee0ee5845f2e0656f50f9942dd0bed3 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stm32_crc_remove, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54da6289fb1d7367354702923e802b3ad6925fe3
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Sun Mar 20 21:56:38 2022 -0700

    Input: stmfts - fix reference leak in stmfts_input_open
    
    [ Upstream commit 26623eea0da3476446909af96c980768df07bbd9 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stmfts_input_open, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220317131604.53538-1-zhengyongjun3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 625ff6f49789a971a88a275ab4c1587b445bf598
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Thu Mar 17 13:16:13 2022 +0000

    crypto: stm32 - fix reference leak in stm32_crc_remove
    
    [ Upstream commit e9a36feecee0ee5845f2e0656f50f9942dd0bed3 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stm32_crc_remove, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6ae0d0b7b6b374186db7044a441d0c022ca8fd6
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Sun Mar 20 21:56:38 2022 -0700

    Input: stmfts - fix reference leak in stmfts_input_open
    
    [ Upstream commit 26623eea0da3476446909af96c980768df07bbd9 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stmfts_input_open, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220317131604.53538-1-zhengyongjun3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3d88716a6ce892d3a1fd90d602dded36830ca8d
Merge: 2c29798c5d6f bea0b66efa65 5876ee756c81 8b9d9e9f8e60 0594058b723b 3972b152e3da
Author: Stephen Boyd <sboyd@kernel.org>
Date:   Wed May 25 00:26:52 2022 -0700

    Merge branches 'clk-ux500', 'clk-mtk', 'clk-tegra', 'clk-allwinner' and 'clk-imx' into clk-next
    
     - Convert ux500 to clk_hw
     - Add the two missing CLKOUT clocks for U8500/DB8500 SoC
     - MediaTek MT8186 SoC clk support
     - Move MediaTek driver to clk_hw provider APIs
    
    * clk-ux500:
      clk: ux500: fix a possible off-by-one in u8500_prcc_reset_base()
      clk: ux500: Implement the missing CLKOUT clocks
      clk: ux500: Rewrite PRCMU clocks to use clk_hw_*
      clk: ux500: Drop .is_prepared state from PRCMU clocks
      clk: ux500: Drop .is_enabled state from PRCMU clocks
      dt-bindings: clock: u8500: Add clkout clock bindings
    
    * clk-mtk: (22 commits)
      clk: mediatek: mt8173: Switch to clk_hw provider APIs
      clk: mediatek: Switch to clk_hw provider APIs
      clk: mediatek: Replace 'struct clk' with 'struct clk_hw'
      clk: mediatek: apmixed: Drop error message from clk_register() failure
      clk: mediatek: Make mtk_clk_register_composite() static
      clk: mediatek: use en_mask as a pure div_en_mask
      clk: mediatek: update compatible string for MT7986 ethsys
      clk: mediatek: Add MT8186 ipesys clock support
      clk: mediatek: Add MT8186 mdpsys clock support
      clk: mediatek: Add MT8186 camsys clock support
      clk: mediatek: Add MT8186 vencsys clock support
      clk: mediatek: Add MT8186 vdecsys clock support
      clk: mediatek: Add MT8186 imgsys clock support
      clk: mediatek: Add MT8186 wpesys clock support
      clk: mediatek: Add MT8186 mmsys clock support
      clk: mediatek: Add MT8186 mfgsys clock support
      clk: mediatek: Add MT8186 imp i2c wrapper clock support
      clk: mediatek: Add MT8186 apmixedsys clock support
      clk: mediatek: Add MT8186 infrastructure clock support
      clk: mediatek: Add MT8186 topckgen clock support
      ...
    
    * clk-tegra:
      clk: tegra: Update kerneldoc to match prototypes
      clk: tegra: Replace .round_rate() with .determine_rate()
      clk: tegra: Register clocks from root to leaf
      clk: tegra: Add missing reset deassertion
    
    * clk-allwinner:
      clk: sunxi-ng: h616: Add PLL derived 32KHz clock
      clk: sunxi-ng: h6-r: Add RTC gate clock
    
    * clk-imx:
      clk: imx8mp: fix usb_root_clk parent
      clk: imx8mp: add clkout1/2 support
      clk: imx: scu: Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
      clk: imx8mp: Add DISP2 pixel clock
      clk: imx: scu: fix a potential memory leak in __imx_clk_gpr_scu()
      clk: imx: Add check for kcalloc
      clk: imx8mn: add GPT support
      dt-bindings: imx: add clock bindings for i.MX8MN GPT
      clk: imx: Remove the snvs clock
      clk: imx8m: check mcore_booted before register clk
      clk: imx: add mcore_booted module paratemter
      clk: imx8mq: add 27m phy pll ref clock

commit 2c29798c5d6f5756516881cb45eae9d6ca3d2a80
Merge: 560a3164c9a3 b7fa6242f3e0 c6b61d48b369 5baa12cfc433 13982e866c74
Author: Stephen Boyd <sboyd@kernel.org>
Date:   Wed May 25 00:26:38 2022 -0700

    Merge branches 'clk-ti', 'clk-cleanup', 'clk-airoha', 'clk-i2c-simple' and 'clk-renesas' into clk-next
    
     - Airoha EN7523 SoC system clocks
     - Use i2c driver probe_new to avoid id scans
    
    * clk-ti:
      clk: ti: clkctrl: replace usage of found with dedicated list iterator variable
      clk: ti: composite: Prefer kcalloc over open coded arithmetic
      clk: keystone: syscon-clk: Add support for AM62 epwm-tbclk
      dt-bindings: clock: ehrpwm: Add AM62 specific compatible
    
    * clk-cleanup:
      clk: bcm: rpi: Use correct order for the parameters of devm_kcalloc()
      clk: fixed-rate: Remove redundant if statement
      clk: mux: remove redundant initialization of variable width
      clk: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
      clk: actions: remove redundant assignment after a mask operation
    
    * clk-airoha:
      clk: en7523: fix wrong pointer check in en7523_clk_probe()
      clk: en7523: Add clock driver for Airoha EN7523 SoC
      dt-bindings: Add en7523-scu device tree binding documentation
    
    * clk-i2c-simple:
      clk: renesas-pcie: use simple i2c probe function
      clk: si570: use i2c_match_id and simple i2c probe
      clk: si544: use i2c_match_id and simple i2c probe
      clk: si5351: use i2c_match_id and simple i2c probe
      clk: si5341: use simple i2c probe function
      clk: si514: use simple i2c probe function
      clk: max9485: use simple i2c probe function
      clk: cs2000-cp: use simple i2c probe function
      clk: cdce925: use i2c_match_id and simple i2c probe
      clk: cdce706: use simple i2c probe function
    
    * clk-renesas: (48 commits)
      clk: renesas: r9a09g011: Add eth clock and reset entries
      clk: renesas: Add RZ/V2M support using the rzg2l driver
      clk: renesas: rzg2l: Add support for RZ/V2M reset monitor reg
      clk: renesas: rzg2l: Make use of CLK_MON registers optional
      clk: renesas: rzg2l: Set HIWORD mask for all mux and dividers
      clk: renesas: rzg2l: Add read only versions of the clk macros
      clk: renesas: rzg2l: Move the DEF_MUX array size calc into the macro
      dt-bindings: clock: renesas,rzg2l: Document RZ/V2M SoC
      clk: renesas: r9a07g044: Fix OSTM1 module clock name
      clk: renesas: r9a07g043: Add clock and reset entries for ADC
      clk: renesas: r9a07g043: Add TSU clock and reset entry
      clk: renesas: r9a07g043: Add RSPI clock and reset entries
      clk: renesas: r9a07g043: Add clock and reset entries for SPI Multi I/O Bus Controller
      clk: renesas: r9a07g044: Add DSI clock and reset entries
      clk: renesas: r9a07g044: Add LCDC clock and reset entries
      clk: renesas: r9a07g044: Add M4 Clock support
      clk: renesas: r9a07g044: Add M3 Clock support
      clk: renesas: r9a07g044: Add {M2, M2_DIV2} Clocks support
      clk: renesas: r9a07g044: Add M1 clock support
      clk: renesas: rzg2l: Add DSI divider clk support
      ...

commit 39acee8aea3d02f649fb840bf0d72e3603fc9c83
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Thu Mar 17 13:16:13 2022 +0000

    crypto: stm32 - fix reference leak in stm32_crc_remove
    
    [ Upstream commit e9a36feecee0ee5845f2e0656f50f9942dd0bed3 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stm32_crc_remove, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5565fc538ded8961c9d885ad37200ee72a7bd1a2
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Sun Mar 20 21:56:38 2022 -0700

    Input: stmfts - fix reference leak in stmfts_input_open
    
    [ Upstream commit 26623eea0da3476446909af96c980768df07bbd9 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stmfts_input_open, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220317131604.53538-1-zhengyongjun3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0213894337afa0b5367ea11c6879c27ece556c7
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Thu Mar 17 13:16:13 2022 +0000

    crypto: stm32 - fix reference leak in stm32_crc_remove
    
    [ Upstream commit e9a36feecee0ee5845f2e0656f50f9942dd0bed3 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stm32_crc_remove, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c015cd524424e79b31270bd3dbdac9612c6f7db
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Sun Mar 20 21:56:38 2022 -0700

    Input: stmfts - fix reference leak in stmfts_input_open
    
    [ Upstream commit 26623eea0da3476446909af96c980768df07bbd9 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stmfts_input_open, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220317131604.53538-1-zhengyongjun3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7392675e4ac127bc8e1706dfe604df93d6297197
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Thu Mar 17 13:16:13 2022 +0000

    crypto: stm32 - fix reference leak in stm32_crc_remove
    
    [ Upstream commit e9a36feecee0ee5845f2e0656f50f9942dd0bed3 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stm32_crc_remove, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa16a73d35cfcea7d540bd94a5f643b2d0bdc76d
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Sun Mar 20 21:56:38 2022 -0700

    Input: stmfts - fix reference leak in stmfts_input_open
    
    [ Upstream commit 26623eea0da3476446909af96c980768df07bbd9 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stmfts_input_open, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220317131604.53538-1-zhengyongjun3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79e309c18e3ee87b5ca10f1ef8bddc3122f73e2d
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Sun Mar 20 21:56:38 2022 -0700

    Input: stmfts - fix reference leak in stmfts_input_open
    
    [ Upstream commit 26623eea0da3476446909af96c980768df07bbd9 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stmfts_input_open, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220317131604.53538-1-zhengyongjun3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9512696082bcfd068ce65476c85c5b17511d4df
Author: ran jianping <ran.jianping@zte.com.cn>
Date:   Thu Apr 28 06:42:09 2022 +0000

    mailbox: omap: using pm_runtime_resume_and_get to simplify the code
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: ran jianping <ran.jianping@zte.com.cn>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>

commit 504ff5b00853b05133c9cddfc351548b48cc5bdc
Author: ran jianping <ran.jianping@zte.com.cn>
Date:   Wed Apr 27 05:41:00 2022 +0000

    mailbox:imx: using pm_runtime_resume_and_get
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: ran jianping <ran.jianping@zte.com.cn>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>

commit b3ac0c58fa8934926360268f3d89ec7680644d7b
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Tue Apr 12 07:08:23 2022 +0000

    watchdog: rti-wdt: Fix pm_runtime_get_sync() error checking
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 2d63908bdbfb ("watchdog: Add K3 RTI watchdog support")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220412070824.23708-1-linmq006@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>

commit 03536823589a501eb6601a7d09d77f8e1cbbcdd6
Merge: 66ccd1d16e03 64b22a0da12a
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri May 20 16:34:29 2022 +1000

    Merge tag 'msm-next-5.19-fixes' of https://gitlab.freedesktop.org/abhinavk/msm into drm-next
    
    5.19 fixes for msm-next
    
    - Limiting WB modes to max sspp linewidth
    - Fixing the supported rotations to add 180 back for IGT
    - Fix to handle pm_runtime_get_sync() errors to avoid unclocked access
       in the bind() path for dpu driver
    - Fix the irq_free() without request issue which was a big-time
       hitter in the CI-runs.
    
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    
    From: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/b011d51d-d634-123e-bf5f-27219ee33151@quicinc.com

commit 1a5409facf9ceba401f83925c6d15bae2121d29c
Merge: 947a844bb3eb 64b22a0da12a
Author: Rob Clark <robdclark@chromium.org>
Date:   Thu May 19 11:19:30 2022 -0700

    Merge tag 'msm-next-5.19-fixes' of https://gitlab.freedesktop.org/abhinavk/msm into msm-fixes-staging
    
    5.19 fixes for msm-next
    
    - Limiting WB modes to max sspp linewidth
    - Fixing the supported rotations to add 180 back for IGT
    - Fix to handle pm_runtime_get_sync() errors to avoid unclocked access
      in the bind() path for dpu driver
    - Fix the irq_free() without request issue which was a big-time
      hitter in the CI-runs.
    
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Rob Clark <robdclark@chromium.org>

commit b1378b259c0c0300cf62dd7117bf550edce0f9cc
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Tue May 17 12:37:15 2022 -0500

    ASoC: SOF: sof-client-ipc-flood-test: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace the pm_runtime_get_sync() and
    pm_runtime_put_noidle() pattern.
    
    No functional changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20220517173715.468894-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit fa5602c62544ea5303ce870a9a3318fa7695ffc2
Merge: 46509e7578a2 74da272400b4
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu May 19 16:57:16 2022 +0200

    Merge tag 'soundwire-5.19-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/vkoul/soundwire into char-misc-next
    
    Vinod writes:
    
    soundwire updates for 5.19-rc1
    
     - Support for v1.6.0 Qualcomm controllers
     - Bunch of pm updates by Intel for peripheral attachment and system pm
       etc
    
    * tag 'soundwire-5.19-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/vkoul/soundwire:
      soundwire: qcom: adjust autoenumeration timeout
      soundwire: qcom: use pm_runtime_resume_and_get()
      soundwire: intel: use pm_runtime_resume_and_get()
      soundwire: cadence: use pm_runtime_resume_and_get()
      soundwire: bus: use pm_runtime_resume_and_get()
      soundwire: qcom: return error when pm_runtime_get_sync fails
      soundwire: bus: pm_runtime_request_resume on peripheral attachment
      soundwire: intel: disable WAKEEN in pm_runtime resume
      soundwire: intel: prevent pm_runtime resume prior to system suspend
      soundwire: cadence: recheck device0 attachment after status change
      dt-bindings: soundwire: qcom: Add bindings for audio clock reset control property
      soundwire: qcom: Add compatible name for v1.6.0
      soundwire: stream: Fix error return code in do_bank_switch()
      soundwire: qcom: fix an error message in swrm_wait_for_frame_gen_enabled()

commit 64b22a0da12adb571c01edd671ee43634ebd7e41
Author: Abhinav Kumar <quic_abhinavk@quicinc.com>
Date:   Wed May 18 15:34:07 2022 -0700

    drm/msm/dpu: handle pm_runtime_get_sync() errors in bind path
    
    If there are errors while trying to enable the pm in the
    bind path, it will lead to unclocked access of hw revision
    register thereby crashing the device.
    
    This will not address why the pm_runtime_get_sync() fails
    but at the very least we should be able to prevent the
    crash by handling the error and bailing out earlier.
    
    changes in v2:
            - use pm_runtime_resume_and_get() instead of
              pm_runtime_get_sync()
    
    Fixes: 25fdd5933e4c ("drm/msm: Add SDM845 DPU support")
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Reviewed-by: Rob Clark <robdclark@gmail.com>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Patchwork: https://patchwork.freedesktop.org/patch/486721/
    Link: https://lore.kernel.org/r/20220518223407.26147-1-quic_abhinavk@quicinc.com
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>

commit 3972b152e3da53d46eb3ae5d76c1a2c3856ca1af
Merge: 312310928417 cf7f3f4fa9e5
Author: Stephen Boyd <sboyd@kernel.org>
Date:   Tue May 17 12:44:46 2022 -0700

    Merge tag 'clk-imx-5.19' of git://git.kernel.org/pub/scm/linux/kernel/git/abelvesa/linux into clk-imx
    
    Pull i.MX clk driver updates from Abel Vesa:
    
     - Add 27 MHz phy PLL ref clock
     - Add mcore_booted module parameter to tell kernel M core has already booted
     - Remove snvs clock
     - Add bindings for i.MX8MN GPT
     - Add check for kcalloc
     - Fix for a potential memory leak in __imx_clk_gpr_sync
     - Add DISP2 pixel clock for i.MX8MP
     - Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
     - Add clkout1/2 for i.MX8MP
     - Fix parent clock of ubs_root_clk for i.MX8MP
    
    * tag 'clk-imx-5.19' of git://git.kernel.org/pub/scm/linux/kernel/git/abelvesa/linux:
      clk: imx8mp: fix usb_root_clk parent
      clk: imx8mp: add clkout1/2 support
      clk: imx: scu: Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
      clk: imx8mp: Add DISP2 pixel clock
      clk: imx: scu: fix a potential memory leak in __imx_clk_gpr_scu()
      clk: imx: Add check for kcalloc
      clk: imx8mn: add GPT support
      dt-bindings: imx: add clock bindings for i.MX8MN GPT
      clk: imx: Remove the snvs clock
      clk: imx8m: check mcore_booted before register clk
      clk: imx: add mcore_booted module paratemter
      clk: imx8mq: add 27m phy pll ref clock

commit 517a710ac8fe9cbc48d0ec3ca81377f6ef3b86b7
Author: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
Date:   Tue May 10 12:42:42 2022 +0530

    dmaengine: zynqmp_dma: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    pm_runtime_resume_and_get() automatically handle dev->power.usage_count
    decrement on errors, so prefer using it and also implement it's error
    handling.
    
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Link: https://lore.kernel.org/r/1652166762-18317-4-git-send-email-radhey.shyam.pandey@xilinx.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 1901300bf356a74437117464e19fc5f278f88d9a
Merge: 68edb53a4f4b 2a21f9e6d9a4
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon May 9 23:09:09 2022 +0200

    Merge tag 'ti-driver-soc-for-v5.19' of git://git.kernel.org/pub/scm/linux/kernel/git/ti/linux into arm/drivers
    
    TI Driver updates for v5.19
    
    * wkup_m3: io isolation, voltage scaling, vtt regulator and a debug option to stop m3 in suspend.
    * tisci: support for polled mode for system suspend, reset driver is now enabled for COMPILE_TEST
    * knav, dma.. misc cleanups for IS_ERR, pm_run_time*, and various other fixups.
    
    * tag 'ti-driver-soc-for-v5.19' of git://git.kernel.org/pub/scm/linux/kernel/git/ti/linux:
      soc: ti: wkup_m3_ipc: Add debug option to halt m3 in suspend
      soc: ti: wkup_m3_ipc: Add support for i2c voltage scaling
      soc: ti: wkup_m3_ipc: Add support for IO Isolation
      soc: ti: knav_qmss_queue: Use IS_ERR instead of IS_ERR_OR_NULL when checking knav_queue_open() result
      soc: ti: pm33xx: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
      firmware: ti_sci: Switch transport to polled mode during system suspend
      soc: ti: wkup_m3_ipc: Add support for toggling VTT regulator
      soc: ti: knav_qmss_queue: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync
      soc: ti: knav_dma: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync
      reset: ti-sci: Allow building under COMPILE_TEST
      soc: ti: ti_sci_pm_domains: Check for null return of devm_kcalloc
      soc: ti: omap_prm: Use of_device_get_match_data()
      soc: ti: pruss: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
      soc: ti: replace usage of found with dedicated list iterator variable
      soc: ti: wkup_m3_ipc: fix platform_get_irq.cocci warning
    
    Link: https://lore.kernel.org/r/20220507163424.pvqnwrxpoo73lmp2@debtless
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 517f6e2641a2802dce5a5aa0d18c7d37a35678d2
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Fri Apr 29 17:26:54 2022 +0100

    nvmem: qfprom: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20220429162701.2222-10-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d811779d46b006c37762a419432d1e786a38fc0
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Sat Mar 19 10:38:22 2022 +0800

    usb: xhci: tegra:Fix PM usage reference leak of tegra_xusb_unpowergate_partitions
    
    commit 8771039482d965bdc8cefd972bcabac2b76944a8 upstream.
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 41a7426d25fa ("usb: xhci: tegra: Unlink power domain devices")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220319023822.145641-1-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 576b40690e91dca50ec753c515a8a7fbb1a58849
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Sat Mar 19 10:38:22 2022 +0800

    usb: xhci: tegra:Fix PM usage reference leak of tegra_xusb_unpowergate_partitions
    
    commit 8771039482d965bdc8cefd972bcabac2b76944a8 upstream.
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 41a7426d25fa ("usb: xhci: tegra: Unlink power domain devices")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220319023822.145641-1-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57ed510b0547988c24af5e0507775e69fd94d7a2
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Wed Apr 27 07:56:23 2022 +0800

    soundwire: qcom: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace the pm_runtime_get_sync() and
    pm_runtime_put_noidle() pattern.
    
    No functional changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20220426235623.4253-6-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit fff1fd9c1b42b1d8a9dda8d50553543e5d5f5368
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Wed Apr 27 07:56:22 2022 +0800

    soundwire: intel: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace the pm_runtime_get_sync() and
    pm_runtime_put_noidle() pattern.
    
    No functional changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20220426235623.4253-5-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 915bf27a46bb4e7d330fb384f47853ccd28e5564
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Wed Apr 27 07:56:21 2022 +0800

    soundwire: cadence: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace the pm_runtime_get_sync() and
    pm_runtime_put_noidle() pattern.
    
    No functional changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20220426235623.4253-4-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 443a98e649b469b4e6a2832799853a5764ef9002
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Wed Apr 27 07:56:20 2022 +0800

    soundwire: bus: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace the pm_runtime_get_sync() and
    pm_runtime_put_noidle() pattern.
    
    No functional changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20220426235623.4253-3-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit f6ee6c8499226eb158ca30457d346511f5e329ce
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Wed Apr 27 07:56:19 2022 +0800

    soundwire: qcom: return error when pm_runtime_get_sync fails
    
    For some reason there's a missing error return in two places.
    
    Fixes: 74e79da9fd46a ("soundwire: qcom: add runtime pm support")
    Fixes: 04d46a7b38375 ("soundwire: qcom: add in-band wake up interrupt support")
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20220426235623.4253-2-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit e4cf89596c1f1e33309556699f910ced4abbaf44
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Fri Feb 25 17:53:16 2022 +0000

    watchdog: rzg2l_wdt: Fix 'BUG: Invalid wait context'
    
    This patch fixes the issue 'BUG: Invalid wait context' during restart()
    callback by using clk_prepare_enable() instead of pm_runtime_get_sync()
    for turning on the clocks during restart.
    
    This issue is noticed when testing with renesas_defconfig.
    
    [   42.213802] reboot: Restarting system
    [   42.217860]
    [   42.219364] =============================
    [   42.223368] [ BUG: Invalid wait context ]
    [   42.227372] 5.17.0-rc5-arm64-renesas-00002-g10393723e35e #522 Not tainted
    [   42.234153] -----------------------------
    [   42.238155] systemd-shutdow/1 is trying to lock:
    [   42.242766] ffff00000a650828 (&genpd->mlock){+.+.}-{3:3}, at: genpd_lock_mtx+0x14/0x20
    [   42.250709] other info that might help us debug this:
    [   42.255753] context-{4:4}
    [   42.258368] 2 locks held by systemd-shutdow/1:
    [   42.262806]  #0: ffff80000944e1c8 (system_transition_mutex#2){+.+.}-{3:3}, at: __do_sys_reboot+0xd0/0x250
    [   42.272388]  #1: ffff8000094c4e40 (rcu_read_lock){....}-{1:2}, at: atomic_notifier_call_chain+0x0/0x150
    [   42.281795] stack backtrace:
    [   42.284672] CPU: 0 PID: 1 Comm: systemd-shutdow Not tainted 5.17.0-rc5-arm64-renesas-00002-g10393723e35e #522
    [   42.294577] Hardware name: Renesas SMARC EVK based on r9a07g044c2 (DT)
    [   42.301096] Call trace:
    [   42.303538]  dump_backtrace+0xcc/0xd8
    [   42.307203]  show_stack+0x14/0x30
    [   42.310517]  dump_stack_lvl+0x88/0xb0
    [   42.314180]  dump_stack+0x14/0x2c
    [   42.317492]  __lock_acquire+0x1b24/0x1b50
    [   42.321502]  lock_acquire+0x120/0x3a8
    [   42.325162]  __mutex_lock+0x84/0x8f8
    [   42.328737]  mutex_lock_nested+0x30/0x58
    [   42.332658]  genpd_lock_mtx+0x14/0x20
    [   42.336319]  genpd_runtime_resume+0xc4/0x228
    [   42.340587]  __rpm_callback+0x44/0x170
    [   42.344337]  rpm_callback+0x64/0x70
    [   42.347824]  rpm_resume+0x4e0/0x6b8
    [   42.351310]  __pm_runtime_resume+0x50/0x78
    [   42.355404]  rzg2l_wdt_restart+0x28/0x68
    [   42.359329]  watchdog_restart_notifier+0x1c/0x30
    [   42.363943]  atomic_notifier_call_chain+0x94/0x150
    [   42.368732]  do_kernel_restart+0x24/0x30
    [   42.372652]  machine_restart+0x44/0x70
    [   42.376399]  kernel_restart+0x3c/0x60
    [   42.380058]  __do_sys_reboot+0x228/0x250
    [   42.383977]  __arm64_sys_reboot+0x20/0x28
    [   42.387983]  invoke_syscall+0x40/0xf8
    
    Fixes: 2cbc5cd0b55fa2 ("watchdog: Add Watchdog Timer driver for RZ/G2L")
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20220225175320.11041-4-biju.das.jz@bp.renesas.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>

commit d96a89407e5f682d1cb22569d91784506c784863
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 12 08:30:44 2022 +0000

    power: supply: bq24190_charger: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

commit a181b8d187319bf265a2019ddde856a3d2f107a6
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Thu Apr 14 09:07:27 2022 +0000

    i2c: davinci: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Reviewed-by: Bartosz Golaszewski <brgl@bgdev.pl>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 2b7042500cab7952bdbf4fe4a84de8712b418c36
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 06:30:59 2022 +0000

    soc: ti: pm33xx: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Tony Lindgren <tony@aotmide.com>
    Link: https://lore.kernel.org/r/20220418063059.2558074-1-chi.minghao@zte.com.cn

commit ce4818957fdc5bca57fc2c92b0dfe109d26bcc47
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 11:07:16 2022 +0000

    genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    pm_runtime_resume_and_get() achieves the same and simplifies the code.
    
    [ tglx: Simplify it further by presetting retval ]
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20220418110716.2559453-1-chi.minghao@zte.com.cn

commit bfd594b3acbd2656edcc7742e1270d09c0de9d4d
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Mon Apr 25 09:11:17 2022 +0800

    clk: imx: scu: Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1.
    
    Also, we need to call pm_runtime_put_noidle() when pm_runtime_get_sync()
    fails, so use pm_runtime_resume_and_get() instead. this function
    will handle this.
    
    Fixes: 78edeb080330 ("clk: imx: scu: add runtime pm support")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Reviewed-by: Abel Vesa <abel.vesa@nxp.com>
    Link: https://lore.kernel.org/r/20220425011117.25093-1-linmq006@gmail.com
    Signed-off-by: Abel Vesa <abel.vesa@nxp.com>

commit d3bae86698720f6fc2ca07d3850ec3167a11ec2b
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 03:02:18 2022 +0000

    crypto: sun8i-ce - using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Tested-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Acked-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit ee74fdf0ca74e6a65716400b403285686133a9f8
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 11:05:37 2022 +0000

    crypto: sun8i-ss - using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit d879e9444634e3ef7cc5646fca0892c4f1483a8d
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Tue Apr 26 13:38:07 2022 -0500

    ASoC: Intel: atom: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace the pm_runtime_get_sync() and
    pm_runtime_put_sync() pattern.
    
    No functional changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20220426183807.102442-1-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 02885dd831c043d4804dfc1d2942f2f4ec5fdc18
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Tue Apr 26 13:41:06 2022 -0500

    ASoC: SOF: sof-client-ipc-msg-injector: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace the pm_runtime_get_sync() and
    pm_runtime_put_noidle() pattern.
    
    No functional changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20220426184106.102636-5-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit c106f46e83fd15c34cfa0a68e8218f5cb4844dd3
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Tue Apr 26 13:41:04 2022 -0500

    ASoC: SOF: debug: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace the pm_runtime_get_sync() and
    pm_runtime_put_noidle() pattern.
    
    No functional changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20220426184106.102636-3-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit bf0736e5d4644eb9238a1136625e09126721d2e3
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Tue Apr 26 13:41:03 2022 -0500

    ASoC: SOF: control: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() to replace the pm_runtime_get_sync() and
    pm_runtime_put_noidle() pattern.
    
    No functional changes.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Péter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Link: https://lore.kernel.org/r/20220426184106.102636-2-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 6796aad6e5ca72474498a8ba19a9cf3d0ab60320
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Wed Apr 20 21:50:07 2022 +0800

    drm/vc4: Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
    
    [ Upstream commit 3d0b93d92a2790337aa9d18cb332d02356a24126 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1.
    
    Also, we need to call pm_runtime_put_noidle() when pm_runtime_get_sync()
    fails, so use pm_runtime_resume_and_get() instead. this function
    will handle this.
    
    Fixes: 4078f5757144 ("drm/vc4: Add DSI driver")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220420135008.2757-1-linmq006@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69eeaa611cbdda1bc9ba6254b2046024fd83eb9d
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Sun Apr 17 13:03:31 2022 -0700

    Input: omap4-keypad - fix pm_runtime_get_sync() error checking
    
    [ Upstream commit 81022a170462d38ea10612cb67e8e2c529d58abe ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: f77621cc640a ("Input: omap-keypad - dynamically handle register offsets")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220412070131.19848-1-linmq006@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6db489660841b174faf948c94ae660f83e9e3208
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Sat Mar 19 10:21:42 2022 +0800

    dmaengine: mediatek:Fix PM usage reference leak of mtk_uart_apdma_alloc_chan_resources
    
    [ Upstream commit 545b2baac89b859180e51215468c05d85ea8465a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it:
    1) Replacing it with pm_runtime_resume_and_get to keep usage counter
       balanced.
    2) Add putting operation before returning error.
    
    Fixes:9135408c3ace4 ("dmaengine: mediatek: Add MediaTek UART APDMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220319022142.142709-1-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53c4a9ff225b81dcd005bf48b6467f0f55d6ce02
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Wed Apr 20 21:50:07 2022 +0800

    drm/vc4: Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
    
    [ Upstream commit 3d0b93d92a2790337aa9d18cb332d02356a24126 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1.
    
    Also, we need to call pm_runtime_put_noidle() when pm_runtime_get_sync()
    fails, so use pm_runtime_resume_and_get() instead. this function
    will handle this.
    
    Fixes: 4078f5757144 ("drm/vc4: Add DSI driver")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220420135008.2757-1-linmq006@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0cfae3e0d3a95118b883d4ff577043d211f4f47
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Sun Apr 17 13:03:31 2022 -0700

    Input: omap4-keypad - fix pm_runtime_get_sync() error checking
    
    [ Upstream commit 81022a170462d38ea10612cb67e8e2c529d58abe ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: f77621cc640a ("Input: omap-keypad - dynamically handle register offsets")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220412070131.19848-1-linmq006@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d18fb19c1c8e454c08173c1f9240c6541bd523c1
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Sat Mar 19 10:21:42 2022 +0800

    dmaengine: mediatek:Fix PM usage reference leak of mtk_uart_apdma_alloc_chan_resources
    
    [ Upstream commit 545b2baac89b859180e51215468c05d85ea8465a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it:
    1) Replacing it with pm_runtime_resume_and_get to keep usage counter
       balanced.
    2) Add putting operation before returning error.
    
    Fixes:9135408c3ace4 ("dmaengine: mediatek: Add MediaTek UART APDMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220319022142.142709-1-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a2cef65b32919af7df4df979c5eede5f7825f17
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Wed Apr 20 21:50:07 2022 +0800

    drm/vc4: Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
    
    [ Upstream commit 3d0b93d92a2790337aa9d18cb332d02356a24126 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1.
    
    Also, we need to call pm_runtime_put_noidle() when pm_runtime_get_sync()
    fails, so use pm_runtime_resume_and_get() instead. this function
    will handle this.
    
    Fixes: 4078f5757144 ("drm/vc4: Add DSI driver")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220420135008.2757-1-linmq006@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f714abf28f819849d2fd93a4a8db15cff3f8798e
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Sat Mar 19 10:21:42 2022 +0800

    dmaengine: mediatek:Fix PM usage reference leak of mtk_uart_apdma_alloc_chan_resources
    
    [ Upstream commit 545b2baac89b859180e51215468c05d85ea8465a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it:
    1) Replacing it with pm_runtime_resume_and_get to keep usage counter
       balanced.
    2) Add putting operation before returning error.
    
    Fixes:9135408c3ace4 ("dmaengine: mediatek: Add MediaTek UART APDMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220319022142.142709-1-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0dafb826ed704333f48110062325aa60b6b3655c
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Wed Apr 20 21:50:07 2022 +0800

    drm/vc4: Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
    
    [ Upstream commit 3d0b93d92a2790337aa9d18cb332d02356a24126 ]
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1.
    
    Also, we need to call pm_runtime_put_noidle() when pm_runtime_get_sync()
    fails, so use pm_runtime_resume_and_get() instead. this function
    will handle this.
    
    Fixes: 4078f5757144 ("drm/vc4: Add DSI driver")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220420135008.2757-1-linmq006@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d6271dbbbe5ee53c3233ea5377bb2b823c761be
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Sat Mar 19 10:21:42 2022 +0800

    dmaengine: mediatek:Fix PM usage reference leak of mtk_uart_apdma_alloc_chan_resources
    
    [ Upstream commit 545b2baac89b859180e51215468c05d85ea8465a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it:
    1) Replacing it with pm_runtime_resume_and_get to keep usage counter
       balanced.
    2) Add putting operation before returning error.
    
    Fixes:9135408c3ace4 ("dmaengine: mediatek: Add MediaTek UART APDMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220319022142.142709-1-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75b8715e20a20bc7b4844835e4035543a2674200
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 09:03:52 2022 +0000

    scsi: ufs: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync() and
    pm_runtime_put_noidle(). This change is just to simplify the code, no
    actual functional changes.
    
    Link: https://lore.kernel.org/r/20220420090353.2588804-1-chi.minghao@zte.com.cn
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 1af2fb6283fb82755a6fe819f863e4c3d9772e69
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 09:04:52 2022 +0000

    spi: stm32: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220420090452.2588930-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit b7be05d5e4a3046e245947730cd90d07d09bdcee
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Thu Apr 14 08:56:37 2022 +0000

    spi: spi-cadence-quadspi: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220414085637.2541805-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 1e6f8bd15cf8447a42375b005476e02fc13deb2a
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 11:01:41 2022 +0000

    spi: spi-tegra20-slink: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220418110141.2559019-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 2b8070840e6f48b5406ebe1630a0335843109799
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 11:01:03 2022 +0000

    spi: spi-tegra20-sflash: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220418110103.2558955-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 40b6a137717bb5ca5ccb4e4b051e0d22019cd188
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Thu Apr 14 08:54:33 2022 +0000

    spi: spi-omap2-mcspi: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220414085433.2541670-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 32831bf569e377fc80dc2b1110b72874beb8f4c2
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 09:04:20 2022 +0000

    spi: mxs: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220420090420.2588868-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 7d34ff58f35c82207698f43af79817a05e1342e5
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Thu Apr 14 08:53:42 2022 +0000

    spi: spi-imx: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220414085343.2541608-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit b9db82e5f24932d3a1005ce17b2ef564487c1bca
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Thu Apr 14 08:55:06 2022 +0000

    spi: spi-sprd: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220414085506.2541732-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit e5737cceeee5c085f6f4ea76ae99e67e4ca1bdd5
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Thu Apr 14 08:53:10 2022 +0000

    ASoC: img-i2s-in: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220414085310.2541546-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 9470aa1c46098587270ff34c112d670b58ff5d34
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 03:02:46 2022 +0000

    ASoC: img-parallel-out: using pm_runtime_resume_and_get
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220420030246.2575629-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit b1d1b02594d4599f0d3d5558ba9606a69df6381b
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 03:04:39 2022 +0000

    ASoC: img-spdif-out: using pm_runtime_resume_and_get to simplify the code
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220420030439.2575817-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 6eaaf9bd9b4e3125779b292abd1c00b5baea67dc
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 19 11:07:18 2022 +0000

    ASoC: img-spdif-in: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220419110718.2574674-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit d05040741afef6eb5d4366de7d5b62f700958787
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 03:04:02 2022 +0000

    ASoC: fsl_asrc: using pm_runtime_resume_and_get to simplify the code
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220420030402.2575755-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 13bc32bad7059d6c5671e9d037e6e3ed001cc0f4
Merge: 0fe86b27cbad c18a2a280c07
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 23 09:57:30 2022 -0700

    Merge tag 'drm-fixes-2022-04-23' of git://anongit.freedesktop.org/drm/drm
    
    Pull more drm fixes from Dave Airlie:
     "Maarten was away, so Maxine stepped up and sent me the drm-fixes
      merge, so no point leaving it for another week.
    
      The big change is an OF revert around bridge/panels, it may have some
      driver fallout, but hopefully this revert gets them shook out in the
      next week easier.
    
      Otherwise it's a bunch of locking/refcounts across drivers, a radeon
      dma_resv logic fix and some raspberry pi panel fixes.
    
      panel:
       - revert of patch that broke panel/bridge issues
    
      dma-buf:
       - remove unused header file.
    
      amdgpu:
       - partial revert of locking change
    
      radeon:
       - fix dma_resv logic inversion
    
      panel:
       - pi touchscreen panel init fixes
    
      vc4:
       - build fix
       - runtime pm refcount fix
    
      vmwgfx:
       - refcounting fix"
    
    * tag 'drm-fixes-2022-04-23' of git://anongit.freedesktop.org/drm/drm:
      drm/amdgpu: partial revert "remove ctx->lock" v2
      Revert "drm: of: Lookup if child node has panel or bridge"
      Revert "drm: of: Properly try all possible cases for bridge/panel detection"
      drm/vc4: Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
      drm/vmwgfx: Fix gem refcounting and memory evictions
      drm/vc4: Fix build error when CONFIG_DRM_VC4=y && CONFIG_RASPBERRYPI_FIRMWARE=m
      drm/panel/raspberrypi-touchscreen: Initialise the bridge in prepare
      drm/panel/raspberrypi-touchscreen: Avoid NULL deref if not initialised
      dma-buf-map: remove renamed header file
      drm/radeon: fix logic inversion in radeon_sync_resv

commit 0fe86b27cbad8003e90aa78ebd19c3d8a3eb89a5
Merge: 8467f9e34955 470776c6b034
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 23 09:52:07 2022 -0700

    Merge tag 'input-for-v5.18-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/dtor/input
    
    Pull input fixes from Dmitry Torokhov:
    
     - a new set of keycodes to be used by marine navigation systems
    
     - minor fixes to omap4-keypad and cypress-sf drivers
    
    * tag 'input-for-v5.18-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/dtor/input:
      Input: add Marine Navigation Keycodes
      Input: omap4-keypad - fix pm_runtime_get_sync() error checking
      Input: cypress-sf - register a callback to disable the regulators

commit c94e36908467011d6f793d7667cd0462a8c68710
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 09:02:47 2022 +0000

    wl12xx: scan: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220420090247.2588680-1-chi.minghao@zte.com.cn

commit 54d5ecc1710e4b43a73305bce5d91dc954fbb872
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 09:02:14 2022 +0000

    wl12xx: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220420090214.2588618-1-chi.minghao@zte.com.cn

commit 8e95061b5b9c519891dbe2e519dc3fc1d5f6f4a4
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 13 09:33:56 2022 +0000

    wl18xx: debugfs: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220413093356.2538192-1-chi.minghao@zte.com.cn

commit 45286070e9e782f2f53b5272a227fc879fbda2c8
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 11 01:36:02 2022 +0000

    wil6210: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get() is more appropriate
    for simplifing code.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20220411013602.2517086-1-chi.minghao@zte.com.cn

commit a03e2ddab8e735e2cc315609b297b300e9cc60d2
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:52 2022 +0000

    usb: dwc3: pci: Fix pm_runtime_get_sync() error checking
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: 8eed00b237a28 ("usb: dwc3: pci: Runtime resume child device from wq")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062652.10575-1-zhengyongjun3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e05c7ddfeb23182421972b9074fb8f5aa356cfee
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 09:01:41 2022 +0000

    wlcore: cmd: using pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220420090141.2588553-1-chi.minghao@zte.com.cn

commit 00bfc8964f4349dacc6799fe712de186e9bd8bb8
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 19 11:04:45 2022 +0000

    wlcore: sdio: using pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220419110445.2574424-1-chi.minghao@zte.com.cn

commit d8e11976d8e897ffedca5d1f3b9032156274eceb
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 13 09:39:39 2022 +0000

    wlcore: vendor_cmd: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220413093939.2538825-1-chi.minghao@zte.com.cn

commit 3447eebe6084f3d0919e72eafa1b7d19e3f87580
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 13 09:35:02 2022 +0000

    wlcore: testmode: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220413093502.2538316-1-chi.minghao@zte.com.cn

commit da8e909c99e4525da5ce56814fca5e9cc4a20a63
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 13 09:34:31 2022 +0000

    wlcore: sysfs: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220413093431.2538254-1-chi.minghao@zte.com.cn

commit ab589ac24ee1c00be2ae47aba7ef868394b7fa9c
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 12 09:17:42 2022 +0000

    wlcore: main: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220412091742.2533527-1-chi.minghao@zte.com.cn

commit 3196a605659dcf7ea2a4442edf704aa0edc6e559
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 11:04:55 2022 +0000

    clk: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220418110455.2559264-1-chi.minghao@zte.com.cn
    [sboyd@kernel.org: Drop local ret variable too]
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>

commit 12eeb74925da70eb39d90abead9de9793be3d4c8
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 06:29:55 2022 +0000

    soc: ti: knav_qmss_queue: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate for simplifying
    code.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20220418062955.2557949-1-chi.minghao@zte.com.cn

commit 0e01d176d5788f66dc64a7e61119edb56eb08339
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 10:55:08 2022 +0000

    hwspinlock: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/20220418105508.2558696-1-chi.minghao@zte.com.cn

commit cc470d55343056d6b2a5c32e10e0aad06f324078
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Apr 22 06:26:41 2022 +0000

    spi: img-spfi: Fix pm_runtime_get_sync() error checking
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220422062641.10486-1-zhengyongjun3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit e350dbac3c09a3318f871e0fab255e234408bde4
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 19 11:03:52 2022 +0000

    net: ethernet: ti: am65-cpsw-ethtool: use pm_runtime_resume_and_get
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8771039482d965bdc8cefd972bcabac2b76944a8
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Sat Mar 19 10:38:22 2022 +0800

    usb: xhci: tegra:Fix PM usage reference leak of tegra_xusb_unpowergate_partitions
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 41a7426d25fa ("usb: xhci: tegra: Unlink power domain devices")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220319023822.145641-1-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4facbe3d4426720b65354be1d0f5608c65eebc20
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 06:29:21 2022 +0000

    drivers: net: davinci_mdio: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220418062921.2557884-1-chi.minghao@zte.com.cn
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>

commit 3d0b93d92a2790337aa9d18cb332d02356a24126
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Wed Apr 20 21:50:07 2022 +0800

    drm/vc4: Use pm_runtime_resume_and_get to fix pm_runtime_get_sync() usage
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1.
    
    Also, we need to call pm_runtime_put_noidle() when pm_runtime_get_sync()
    fails, so use pm_runtime_resume_and_get() instead. this function
    will handle this.
    
    Fixes: 4078f5757144 ("drm/vc4: Add DSI driver")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220420135008.2757-1-linmq006@gmail.com

commit b3598fe6d009b2f2144115dfc381615c8b534aec
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 20 03:03:15 2022 +0000

    ASoC: SOF: using pm_runtime_resume_and_get to simplify the code
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20220420030315.2575691-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit e6ec83790593af2d7ad4bae25831baa206780f66
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 19 08:14:49 2022 +0000

    can: flexcan: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Link: https://lore.kernel.org/all/20220419081449.2574026-1-chi.minghao@zte.com.cn
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit dd769f15483cac1895fd219eb17e6f04c9a5548f
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 11:02:26 2022 +0000

    spi: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220418110226.2559081-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit c03ae4876fd54822a22375aa4fc49736a8c3a5d4
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Fri Apr 8 08:09:31 2022 +0000

    spi: spi-ti-qspi: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220408080931.2494356-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 58b1efe2c1722cb47e5b1f49b79a50338428acbf
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 12 07:09:51 2022 +0000

    spi: spi-tegra114: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220412070951.2532157-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 3a2ac5809935e6043dae916bab6cf4741d9dcdeb
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 13 09:36:56 2022 +0000

    spi: spi-cadence-quadspi: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220413093656.2538504-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit bfb5711e2455a239ad64dd5151fb16d195329d46
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 12 07:10:30 2022 +0000

    regulator: stm32-vrefbuf: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220412071030.2532230-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit e65f2fce08fc708e65b544131999bdd933d09164
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 18 11:02:59 2022 +0000

    ASoC: codecs: wm8962: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20220418110259.2559144-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 81022a170462d38ea10612cb67e8e2c529d58abe
Author: Miaoqian Lin <linmq006@gmail.com>
Date:   Sun Apr 17 13:03:31 2022 -0700

    Input: omap4-keypad - fix pm_runtime_get_sync() error checking
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Fixes: f77621cc640a ("Input: omap-keypad - dynamically handle register offsets")
    Signed-off-by: Miaoqian Lin <linmq006@gmail.com>
    Link: https://lore.kernel.org/r/20220412070131.19848-1-linmq006@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

commit d3e3116f253591a473873fab8363ecb998ddde13
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 12 08:29:23 2022 +0000

    soc: ti: knav_dma: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifying code.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Link: https://lore.kernel.org/r/20220412082923.2532649-1-chi.minghao@zte.com.cn

commit 81669e7c6ca44746d869925f337d9bbb0a252fc1
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Thu Apr 14 09:08:00 2022 +0000

    net: ethernet: ti: davinci_emac: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit be52d266d2930f8963e49de68c59be3ca431b98d
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 13 09:38:36 2022 +0000

    net: ethernet: ti: cpsw_priv: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 85648865bb95e3c2b10d22687fc5998cb5ae37cc
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 13 09:38:01 2022 +0000

    net: stmmac: stmmac_main: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c557a9ae4960a8aaede722833e567897f05aa9ef
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Wed Apr 13 09:35:29 2022 +0000

    net: ethernet: ti: cpsw_new: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ff13c90d7f7ab606b37be6d15140d19013d6736c
Author: Yongzhi Liu <lyz_cs@pku.edu.cn>
Date:   Sun Jan 23 23:20:35 2022 -0800

    drm/bridge: Add missing pm_runtime_put_sync
    
    [ Upstream commit 46f47807738441e354873546dde0b000106c068a ]
    
    pm_runtime_get_sync() will increase the rumtime PM counter
    even when it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error. Besides, a matching decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Yongzhi Liu <lyz_cs@pku.edu.cn>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1643008835-73961-1-git-send-email-lyz_cs@pku.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 792533e54cd6e89191798ccd1abd590c62b9077e
Author: Yongzhi Liu <lyz_cs@pku.edu.cn>
Date:   Sun Jan 23 23:20:35 2022 -0800

    drm/bridge: Add missing pm_runtime_put_sync
    
    [ Upstream commit 46f47807738441e354873546dde0b000106c068a ]
    
    pm_runtime_get_sync() will increase the rumtime PM counter
    even when it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error. Besides, a matching decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Yongzhi Liu <lyz_cs@pku.edu.cn>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1643008835-73961-1-git-send-email-lyz_cs@pku.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9df80dc738926a2ea4bd1ce5993c3d0f4b0e855c
Author: Yongzhi Liu <lyz_cs@pku.edu.cn>
Date:   Sun Jan 23 23:20:35 2022 -0800

    drm/bridge: Add missing pm_runtime_put_sync
    
    [ Upstream commit 46f47807738441e354873546dde0b000106c068a ]
    
    pm_runtime_get_sync() will increase the rumtime PM counter
    even when it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error. Besides, a matching decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Yongzhi Liu <lyz_cs@pku.edu.cn>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1643008835-73961-1-git-send-email-lyz_cs@pku.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2240514cb6441641111ac1fabab03e9df9972d7f
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 12 09:05:15 2022 +0000

    net: ethernet: ti: am65-cpsw-nuss: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2e5b3d4cb16e0be22f714475849bd14435b72583
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 12 08:28:47 2022 +0000

    net: ethernet: ti: cpsw: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Link: https://lore.kernel.org/r/20220412082847.2532584-1-chi.minghao@zte.com.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit c6cf1fafb65dda10f3babcec76991cbc304d02b9
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 12 07:09:06 2022 +0000

    spi: spi-stm32-qspi: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Reviewed-by: Patrice Chotard <patrice.chotard@foss.st.com>
    Link: https://lore.kernel.org/r/20220412070906.2532091-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit c721905c54d913db0102973dbcdfb48d91146a2d
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Tue Apr 12 08:30:00 2022 +0000

    ASoC: fsl: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Acked-by: Shengjiu Wang <shengjiu.wang@gmail.com>
    Link: https://lore.kernel.org/r/20220412083000.2532711-1-chi.minghao@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit b2268fd81c18302ed3443db09b7f06d52e6dcf03
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Fri Apr 8 08:12:05 2022 +0000

    wlcore: debugfs: use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20220408081205.2494512-1-chi.minghao@zte.com.cn

commit 545b2baac89b859180e51215468c05d85ea8465a
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Sat Mar 19 10:21:42 2022 +0800

    dmaengine: mediatek:Fix PM usage reference leak of mtk_uart_apdma_alloc_chan_resources
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    We fix it:
    1) Replacing it with pm_runtime_resume_and_get to keep usage counter
       balanced.
    2) Add putting operation before returning error.
    
    Fixes:9135408c3ace4 ("dmaengine: mediatek: Add MediaTek UART APDMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220319022142.142709-1-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit b66bfc131c69bd9a5ed3ae90be4cf47ec46c1526
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Mon Apr 11 01:38:12 2022 +0000

    net/cadence: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Reviewed-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Link: https://lore.kernel.org/r/20220411013812.2517212-1-chi.minghao@zte.com.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit e2d0acd40c876ad0cd3e8805adcf2325b910360c
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Fri Apr 8 08:12:50 2022 +0000

    net: stmmac: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Link: https://lore.kernel.org/r/20220408081250.2494588-1-chi.minghao@zte.com.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit f25d2b2b554133b935e72c61deb40d82287a6f75
Author: Minghao Chi <chi.minghao@zte.com.cn>
Date:   Fri Apr 8 08:08:53 2022 +0000

    soc: ti: pruss: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Reported-by: Zeal Robot <zealci@zte.com.cn>
    Signed-off-by: Minghao Chi <chi.minghao@zte.com.cn>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Dave Gerlach <d-gerlach@ti.com>
    Link: https://lore.kernel.org/r/20220408080853.2494292-1-chi.minghao@zte.com.cn

commit 7b7a03d8b5f885ee037b26eb068008daaa15bfd9
Author: Mohan Kumar <mkumard@nvidia.com>
Date:   Tue Mar 29 21:29:40 2022 +0530

    ALSA: hda: Avoid unsol event during RPM suspending
    
    commit 6ddc2f749621d5d45ca03edc9f0616bcda136d29 upstream.
    
    There is a corner case with unsol event handling during codec runtime
    suspending state. When the codec runtime suspend call initiated, the
    codec->in_pm atomic variable would be 0, currently the codec runtime
    suspend function calls snd_hdac_enter_pm() which will just increments
    the codec->in_pm atomic variable. Consider unsol event happened just
    after this step and before snd_hdac_leave_pm() in the codec runtime
    suspend function. The snd_hdac_power_up_pm() in the unsol event
    flow in hdmi_present_sense_via_verbs() function would just increment
    the codec->in_pm atomic variable without calling pm_runtime_get_sync
    function.
    
    As codec runtime suspend flow is already in progress and in parallel
    unsol event is also accessing the codec verbs, as soon as codec
    suspend flow completes and clocks are  switched off before completing
    the unsol event handling as both functions doesn't wait for each other.
    This will result in below errors
    
    [  589.428020] tegra-hda 3510000.hda: azx_get_response timeout, switching
    to polling mode: last cmd=0x505f2f57
    [  589.428344] tegra-hda 3510000.hda: spurious response 0x80000074:0x5,
    last cmd=0x505f2f57
    [  589.428547] tegra-hda 3510000.hda: spurious response 0x80000065:0x5,
    last cmd=0x505f2f57
    
    To avoid this, the unsol event flow should not perform any codec verb
    related operations during RPM_SUSPENDING state.
    
    Signed-off-by: Mohan Kumar <mkumard@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220329155940.26331-1-mkumard@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 585dc196a08fccdcd1b7fcf473cf566b34c4b840
Author: Sondhauß, Jan <Jan.Sondhauss@wago.com>
Date:   Wed Mar 23 08:47:33 2022 +0000

    drivers: ethernet: cpsw: fix panic when interrupt coaleceing is set via ethtool
    
    [ Upstream commit 2844e2434385819f674d1fb4130c308c50ba681e ]
    
    cpsw_ethtool_begin directly returns the result of pm_runtime_get_sync
    when successful.
    pm_runtime_get_sync returns -error code on failure and 0 on successful
    resume but also 1 when the device is already active. So the common case
    for cpsw_ethtool_begin is to return 1. That leads to inconsistent calls
    to pm_runtime_put in the call-chain so that pm_runtime_put is called
    one too many times and as result leaving the cpsw dev behind suspended.
    
    The suspended cpsw dev leads to an access violation later on by
    different parts of the cpsw driver.
    
    Fix this by calling the return-friendly pm_runtime_resume_and_get
    function.
    
    Fixes: d43c65b05b84 ("ethtool: runtime-resume netdev parent in ethnl_ops_begin")
    Signed-off-by: Jan Sondhauss <jan.sondhauss@wago.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Link: https://lore.kernel.org/r/20220323084725.65864-1-jan.sondhauss@wago.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9f37a956de130682c4bce388c773eeb9fdbfc0d
Author: Mohan Kumar <mkumard@nvidia.com>
Date:   Tue Mar 29 21:29:40 2022 +0530

    ALSA: hda: Avoid unsol event during RPM suspending
    
    commit 6ddc2f749621d5d45ca03edc9f0616bcda136d29 upstream.
    
    There is a corner case with unsol event handling during codec runtime
    suspending state. When the codec runtime suspend call initiated, the
    codec->in_pm atomic variable would be 0, currently the codec runtime
    suspend function calls snd_hdac_enter_pm() which will just increments
    the codec->in_pm atomic variable. Consider unsol event happened just
    after this step and before snd_hdac_leave_pm() in the codec runtime
    suspend function. The snd_hdac_power_up_pm() in the unsol event
    flow in hdmi_present_sense_via_verbs() function would just increment
    the codec->in_pm atomic variable without calling pm_runtime_get_sync
    function.
    
    As codec runtime suspend flow is already in progress and in parallel
    unsol event is also accessing the codec verbs, as soon as codec
    suspend flow completes and clocks are  switched off before completing
    the unsol event handling as both functions doesn't wait for each other.
    This will result in below errors
    
    [  589.428020] tegra-hda 3510000.hda: azx_get_response timeout, switching
    to polling mode: last cmd=0x505f2f57
    [  589.428344] tegra-hda 3510000.hda: spurious response 0x80000074:0x5,
    last cmd=0x505f2f57
    [  589.428547] tegra-hda 3510000.hda: spurious response 0x80000065:0x5,
    last cmd=0x505f2f57
    
    To avoid this, the unsol event flow should not perform any codec verb
    related operations during RPM_SUSPENDING state.
    
    Signed-off-by: Mohan Kumar <mkumard@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220329155940.26331-1-mkumard@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 459080fab12b23c0526026e5cedbf3fabb5457cc
Author: Sondhauß, Jan <Jan.Sondhauss@wago.com>
Date:   Wed Mar 23 08:47:33 2022 +0000

    drivers: ethernet: cpsw: fix panic when interrupt coaleceing is set via ethtool
    
    [ Upstream commit 2844e2434385819f674d1fb4130c308c50ba681e ]
    
    cpsw_ethtool_begin directly returns the result of pm_runtime_get_sync
    when successful.
    pm_runtime_get_sync returns -error code on failure and 0 on successful
    resume but also 1 when the device is already active. So the common case
    for cpsw_ethtool_begin is to return 1. That leads to inconsistent calls
    to pm_runtime_put in the call-chain so that pm_runtime_put is called
    one too many times and as result leaving the cpsw dev behind suspended.
    
    The suspended cpsw dev leads to an access violation later on by
    different parts of the cpsw driver.
    
    Fix this by calling the return-friendly pm_runtime_resume_and_get
    function.
    
    Fixes: d43c65b05b84 ("ethtool: runtime-resume netdev parent in ethnl_ops_begin")
    Signed-off-by: Jan Sondhauss <jan.sondhauss@wago.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Link: https://lore.kernel.org/r/20220323084725.65864-1-jan.sondhauss@wago.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e5510219111607b1f1875ab3c3f0485ba3c381c
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Tue Mar 15 10:54:15 2022 +0800

    ASoC: rockchip: Fix PM usage reference of rockchip_i2s_tdm_resume
    
    [ Upstream commit cc5d8ac95663a5813c696008bc524b794d471215 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes:081068fd64140 ("ASoC: rockchip: add support for i2s-tdm controller")
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220315025415.2593762-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b64730286724789d68e980666ecf094460c6ea6
Author: Mohan Kumar <mkumard@nvidia.com>
Date:   Tue Mar 29 21:29:40 2022 +0530

    ALSA: hda: Avoid unsol event during RPM suspending
    
    commit 6ddc2f749621d5d45ca03edc9f0616bcda136d29 upstream.
    
    There is a corner case with unsol event handling during codec runtime
    suspending state. When the codec runtime suspend call initiated, the
    codec->in_pm atomic variable would be 0, currently the codec runtime
    suspend function calls snd_hdac_enter_pm() which will just increments
    the codec->in_pm atomic variable. Consider unsol event happened just
    after this step and before snd_hdac_leave_pm() in the codec runtime
    suspend function. The snd_hdac_power_up_pm() in the unsol event
    flow in hdmi_present_sense_via_verbs() function would just increment
    the codec->in_pm atomic variable without calling pm_runtime_get_sync
    function.
    
    As codec runtime suspend flow is already in progress and in parallel
    unsol event is also accessing the codec verbs, as soon as codec
    suspend flow completes and clocks are  switched off before completing
    the unsol event handling as both functions doesn't wait for each other.
    This will result in below errors
    
    [  589.428020] tegra-hda 3510000.hda: azx_get_response timeout, switching
    to polling mode: last cmd=0x505f2f57
    [  589.428344] tegra-hda 3510000.hda: spurious response 0x80000074:0x5,
    last cmd=0x505f2f57
    [  589.428547] tegra-hda 3510000.hda: spurious response 0x80000065:0x5,
    last cmd=0x505f2f57
    
    To avoid this, the unsol event flow should not perform any codec verb
    related operations during RPM_SUSPENDING state.
    
    Signed-off-by: Mohan Kumar <mkumard@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220329155940.26331-1-mkumard@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30ad11bff021a94aff6dab1ec9236fdfd884fbff
Author: Sondhauß, Jan <Jan.Sondhauss@wago.com>
Date:   Wed Mar 23 08:47:33 2022 +0000

    drivers: ethernet: cpsw: fix panic when interrupt coaleceing is set via ethtool
    
    [ Upstream commit 2844e2434385819f674d1fb4130c308c50ba681e ]
    
    cpsw_ethtool_begin directly returns the result of pm_runtime_get_sync
    when successful.
    pm_runtime_get_sync returns -error code on failure and 0 on successful
    resume but also 1 when the device is already active. So the common case
    for cpsw_ethtool_begin is to return 1. That leads to inconsistent calls
    to pm_runtime_put in the call-chain so that pm_runtime_put is called
    one too many times and as result leaving the cpsw dev behind suspended.
    
    The suspended cpsw dev leads to an access violation later on by
    different parts of the cpsw driver.
    
    Fix this by calling the return-friendly pm_runtime_resume_and_get
    function.
    
    Fixes: d43c65b05b84 ("ethtool: runtime-resume netdev parent in ethnl_ops_begin")
    Signed-off-by: Jan Sondhauss <jan.sondhauss@wago.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Link: https://lore.kernel.org/r/20220323084725.65864-1-jan.sondhauss@wago.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c1834aac759ddfd0f17c9f38db1b30adc8eb4e8
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Tue Mar 15 10:54:15 2022 +0800

    ASoC: rockchip: Fix PM usage reference of rockchip_i2s_tdm_resume
    
    [ Upstream commit cc5d8ac95663a5813c696008bc524b794d471215 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes:081068fd64140 ("ASoC: rockchip: add support for i2s-tdm controller")
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220315025415.2593762-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8371afda9469d69351bfb5b4ec6c756793d2a4a
Author: Mohan Kumar <mkumard@nvidia.com>
Date:   Tue Mar 29 21:29:40 2022 +0530

    ALSA: hda: Avoid unsol event during RPM suspending
    
    commit 6ddc2f749621d5d45ca03edc9f0616bcda136d29 upstream.
    
    There is a corner case with unsol event handling during codec runtime
    suspending state. When the codec runtime suspend call initiated, the
    codec->in_pm atomic variable would be 0, currently the codec runtime
    suspend function calls snd_hdac_enter_pm() which will just increments
    the codec->in_pm atomic variable. Consider unsol event happened just
    after this step and before snd_hdac_leave_pm() in the codec runtime
    suspend function. The snd_hdac_power_up_pm() in the unsol event
    flow in hdmi_present_sense_via_verbs() function would just increment
    the codec->in_pm atomic variable without calling pm_runtime_get_sync
    function.
    
    As codec runtime suspend flow is already in progress and in parallel
    unsol event is also accessing the codec verbs, as soon as codec
    suspend flow completes and clocks are  switched off before completing
    the unsol event handling as both functions doesn't wait for each other.
    This will result in below errors
    
    [  589.428020] tegra-hda 3510000.hda: azx_get_response timeout, switching
    to polling mode: last cmd=0x505f2f57
    [  589.428344] tegra-hda 3510000.hda: spurious response 0x80000074:0x5,
    last cmd=0x505f2f57
    [  589.428547] tegra-hda 3510000.hda: spurious response 0x80000065:0x5,
    last cmd=0x505f2f57
    
    To avoid this, the unsol event flow should not perform any codec verb
    related operations during RPM_SUSPENDING state.
    
    Signed-off-by: Mohan Kumar <mkumard@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220329155940.26331-1-mkumard@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ddc2f749621d5d45ca03edc9f0616bcda136d29
Author: Mohan Kumar <mkumard@nvidia.com>
Date:   Tue Mar 29 21:29:40 2022 +0530

    ALSA: hda: Avoid unsol event during RPM suspending
    
    There is a corner case with unsol event handling during codec runtime
    suspending state. When the codec runtime suspend call initiated, the
    codec->in_pm atomic variable would be 0, currently the codec runtime
    suspend function calls snd_hdac_enter_pm() which will just increments
    the codec->in_pm atomic variable. Consider unsol event happened just
    after this step and before snd_hdac_leave_pm() in the codec runtime
    suspend function. The snd_hdac_power_up_pm() in the unsol event
    flow in hdmi_present_sense_via_verbs() function would just increment
    the codec->in_pm atomic variable without calling pm_runtime_get_sync
    function.
    
    As codec runtime suspend flow is already in progress and in parallel
    unsol event is also accessing the codec verbs, as soon as codec
    suspend flow completes and clocks are  switched off before completing
    the unsol event handling as both functions doesn't wait for each other.
    This will result in below errors
    
    [  589.428020] tegra-hda 3510000.hda: azx_get_response timeout, switching
    to polling mode: last cmd=0x505f2f57
    [  589.428344] tegra-hda 3510000.hda: spurious response 0x80000074:0x5,
    last cmd=0x505f2f57
    [  589.428547] tegra-hda 3510000.hda: spurious response 0x80000065:0x5,
    last cmd=0x505f2f57
    
    To avoid this, the unsol event flow should not perform any codec verb
    related operations during RPM_SUSPENDING state.
    
    Signed-off-by: Mohan Kumar <mkumard@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20220329155940.26331-1-mkumard@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit e9a36feecee0ee5845f2e0656f50f9942dd0bed3
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Thu Mar 17 13:16:13 2022 +0000

    crypto: stm32 - fix reference leak in stm32_crc_remove
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stm32_crc_remove, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 182966e1cd74ec0e326cd376de241803ee79741b
Merge: 9c4b86ebf5bf ba2c670ae84b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 23 14:51:35 2022 -0700

    Merge tag 'media/v5.18-1' of git://git.kernel.org/pub/scm/linux/kernel/git/mchehab/linux-media
    
    Pull media updates from Mauro Carvalho Chehab:
    
     - a major reorg at platform Kconfig/Makefile files, organizing them per
       vendor. The other media Kconfig/Makefile files also sorted
    
     - New sensor drivers: hi847, isl7998x, ov08d10
    
     - New Amphion vpu decoder stateful driver
    
     - New Atmel microchip csi2dc driver
    
     - tegra-vde driver promoted from staging
    
     - atomisp: some fixes for it to work on BYT
    
     - imx7-mipi-csis driver promoted from staging and renamed
    
     - camss driver got initial support for VFE hardware version Titan 480
    
     - mtk-vcodec has gained support for MT8192
    
     - lots of driver changes, fixes and improvements
    
    * tag 'media/v5.18-1' of git://git.kernel.org/pub/scm/linux/kernel/git/mchehab/linux-media: (417 commits)
      media: nxp: Restrict VIDEO_IMX_MIPI_CSIS to ARCH_MXC or COMPILE_TEST
      media: amphion: cleanup media device if register it fail
      media: amphion: fix some issues to improve robust
      media: amphion: fix some error related with undefined reference to __divdi3
      media: amphion: fix an issue that using pm_runtime_get_sync incorrectly
      media: vidtv: use vfree() for memory allocated with vzalloc()
      media: m5mols/m5mols.h: document new reset field
      media: pixfmt-yuv-planar.rst: fix PIX_FMT labels
      media: platform: Remove unnecessary print function dev_err()
      media: amphion: Add missing of_node_put() in vpu_core_parse_dt()
      media: mtk-vcodec: Add missing of_node_put() in mtk_vdec_hw_prob_done()
      media: platform: amphion: Fix build error without MAILBOX
      media: spi: Kconfig: Place SPI drivers on a single menu
      media: i2c: Kconfig: move camera drivers to the top
      media: atomisp: fix bad usage at error handling logic
      media: platform: rename mediatek/mtk-jpeg/ to mediatek/jpeg/
      media: media/*/Kconfig: sort entries
      media: Kconfig: cleanup VIDEO_DEV dependencies
      media: platform/*/Kconfig: make manufacturer menus more uniform
      media: platform: Create vendor/{Makefile,Kconfig} files
      ...

commit 2844e2434385819f674d1fb4130c308c50ba681e
Author: Sondhauß, Jan <Jan.Sondhauss@wago.com>
Date:   Wed Mar 23 08:47:33 2022 +0000

    drivers: ethernet: cpsw: fix panic when interrupt coaleceing is set via ethtool
    
    cpsw_ethtool_begin directly returns the result of pm_runtime_get_sync
    when successful.
    pm_runtime_get_sync returns -error code on failure and 0 on successful
    resume but also 1 when the device is already active. So the common case
    for cpsw_ethtool_begin is to return 1. That leads to inconsistent calls
    to pm_runtime_put in the call-chain so that pm_runtime_put is called
    one too many times and as result leaving the cpsw dev behind suspended.
    
    The suspended cpsw dev leads to an access violation later on by
    different parts of the cpsw driver.
    
    Fix this by calling the return-friendly pm_runtime_resume_and_get
    function.
    
    Fixes: d43c65b05b84 ("ethtool: runtime-resume netdev parent in ethnl_ops_begin")
    Signed-off-by: Jan Sondhauss <jan.sondhauss@wago.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Link: https://lore.kernel.org/r/20220323084725.65864-1-jan.sondhauss@wago.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 26623eea0da3476446909af96c980768df07bbd9
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Sun Mar 20 21:56:38 2022 -0700

    Input: stmfts - fix reference leak in stmfts_input_open
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in stmfts_input_open, so we should fix it.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Link: https://lore.kernel.org/r/20220317131604.53538-1-zhengyongjun3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

commit f445014a2291fbee864754dfec8df42e2a44eb91
Author: Ming Qian <ming.qian@nxp.com>
Date:   Thu Mar 10 07:38:56 2022 +0100

    media: amphion: fix an issue that using pm_runtime_get_sync incorrectly
    
    pm_runtime_get_sync() also returns 1 on success.
    The documentation for pm_runtime_get_sync() suggests using
    pm_runtime_resume_and_get() instead
    
    Signed-off-by: Ming Qian <ming.qian@nxp.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit cc5d8ac95663a5813c696008bc524b794d471215
Author: zhangqilong <zhangqilong3@huawei.com>
Date:   Tue Mar 15 10:54:15 2022 +0800

    ASoC: rockchip: Fix PM usage reference of rockchip_i2s_tdm_resume
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes:081068fd64140 ("ASoC: rockchip: add support for i2s-tdm controller")
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20220315025415.2593762-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit c57813b8b288dcb5e158993cfdff31a60bc24955
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Feb 23 14:48:38 2022 +0100

    i2c: designware: Lock the adapter while setting the suspended flag
    
    Lock the adapter while setting the suspended flag, to ensure that other
    locked code always sees the change immediately, rather then possibly using
    a stale value.
    
    This involves splitting the suspend/resume callbacks into separate runtime
    and normal suspend/resume calls. This is necessary because i2c_dw_xfer()
    will get called by the i2c-core with the adapter locked and it in turn
    calls the runtime-resume callback through pm_runtime_get_sync().
    
    So the runtime versions of the suspend/resume callbacks cannot take
    the adapter-lock. Note this patch simply makes the runtime suspend/resume
    callbacks not deal with the suspended flag at all. During runtime the
    pm_runtime_get_sync() from i2c_dw_xfer() will always ensure that the
    adapter is resumed when necessary.
    
    The suspended flag check is only necessary to check proper suspend/resume
    ordering during normal suspend/resume which makes the pm_runtime_get_sync()
    call a no-op.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 46f47807738441e354873546dde0b000106c068a
Author: Yongzhi Liu <lyz_cs@pku.edu.cn>
Date:   Sun Jan 23 23:20:35 2022 -0800

    drm/bridge: Add missing pm_runtime_put_sync
    
    pm_runtime_get_sync() will increase the rumtime PM counter
    even when it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error. Besides, a matching decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Yongzhi Liu <lyz_cs@pku.edu.cn>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1643008835-73961-1-git-send-email-lyz_cs@pku.edu.cn

commit bf8275705565eb0050157d49b3d751bc286289e0
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Mon Jan 17 08:05:07 2022 +0100

    media: mtk-vcodec: Get rid of mtk_smi_larb_get/put
    
    MediaTek IOMMU has already added the device_link between the consumer
    and smi-larb device. If the vcodec devices call the pm_runtime_get_sync,
    the smi-larb's pm_runtime_get_sync also be called automatically.
    
    CC: Irui Wang <irui.wang@mediatek.com>
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Acked-by: Tiffany Lin <tiffany.lin@mediatek.com>
    Reviewed-by: Dafna Hirschfeld <dafna.hirschfeld@collabora.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit ce6c24baaa1f01cb1672298e8d650ca24ee58dc3
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Mon Jan 17 08:05:06 2022 +0100

    media: drm/mediatek: Get rid of mtk_smi_larb_get/put
    
    MediaTek IOMMU has already added the device_link between the consumer
    and smi-larb device. If the drm device calls the pm_runtime_get_sync,
    the smi-larb's pm_runtime_get_sync also be called automatically.
    
    CC: CK Hu <ck.hu@mediatek.com>
    CC: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Acked-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Reviewed-by: Dafna Hirschfeld <dafna.hirschfeld@collabora.com>
    Tested-by: Frank Wunderlich <frank-w@public-files.de> # BPI-R2/MT7623
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 5db12f5d843b32733979d6f809bbb6974b42e90e
Author: Yongqiang Niu <yongqiang.niu@mediatek.com>
Date:   Mon Jan 17 08:05:05 2022 +0100

    media: drm/mediatek: Add pm runtime support for ovl and rdma
    
    Prepare for smi cleaning up "mediatek,larb".
    
    Display use the dispsys device to call pm_rumtime_get_sync before.
    This patch add pm_runtime_xx with ovl and rdma device whose nodes has
    "iommus" property, then display could help pm_runtime_get for smi via
    ovl or rdma device.
    
    (Yong: Use pm_runtime_resume_and_get instead of pm_runtime_get_sync)
    
    CC: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Yongqiang Niu <yongqiang.niu@mediatek.com>
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Acked-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Tested-by: Frank Wunderlich <frank-w@public-files.de> # BPI-R2/MT7623
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 682c3cd8257268a25f46b456e886cc1fe2ad3767
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Mon Jan 17 08:05:04 2022 +0100

    media: mtk-mdp: Get rid of mtk_smi_larb_get/put
    
    MediaTek IOMMU has already added the device_link between the consumer
    and smi-larb device. If the mdp device calls the pm_runtime_get_sync,
    the smi-larb's pm_runtime_get_sync also be called automatically.
    
    CC: Minghsiu Tsai <minghsiu.tsai@mediatek.com>
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Reviewed-by: Houlong Wei <houlong.wei@mediatek.com>
    Reviewed-by: Dafna Hirschfeld <dafna.hirschfeld@collabora.com>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit ba3cd6714aedaa5ee5a11caba3d26e9e02f32f79
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Mon Jan 17 08:05:03 2022 +0100

    media: mtk-jpeg: Get rid of mtk_smi_larb_get/put
    
    MediaTek IOMMU has already added device_link between the consumer
    and smi-larb device. If the jpg device calls the pm_runtime_get_sync,
    the smi-larb's pm_runtime_get_sync also be called automatically.
    
    After removing the larb_get operations, then mtk_jpeg_clk_init is
    also unnecessary. Remove it too.
    
    CC: Xia Jiang <xia.jiang@mediatek.com>
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Acked-by: Rick Chang <rick.chang@mediatek.com>
    Reviewed-by: Dafna Hirschfeld <dafna.hirschfeld@collabora.com>
    Tested-by: Frank Wunderlich <frank-w@public-files.de> # BPI-R2/MT7623
    Acked-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 967d28f8128f45a1f4cdc229fec17f02bd15167f
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Dec 17 10:03:30 2021 +0100

    crypto: omap-aes - Fix broken pm_runtime_and_get() usage
    
    commit c2aec59be093bd44627bc4f6bc67e4614a93a7b6 upstream.
    
    This fix is basically the same as 3d6b661330a7 ("crypto: stm32 -
    Revert broken pm_runtime_resume_and_get changes"), just for the omap
    driver. If the return value isn't used, then pm_runtime_get_sync()
    has to be used for ensuring that the usage count is balanced.
    
    Fixes: 1f34cc4a8da3 ("crypto: omap-aes - Fix PM reference leak on omap-aes.c")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26dc73017ec7626d3660f4761c41a0c2d531c609
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Nov 6 18:44:52 2021 +0100

    PCI: qcom: Fix an error handling path in 'qcom_pcie_probe()'
    
    [ Upstream commit 4e0e90539bb0e6c0ca3768c642df9eed2118a8bb ]
    
    If 'of_device_get_match_data()' fails, previous 'pm_runtime_get_sync()/
    pm_runtime_enable()' should be undone.
    
    To fix it, the easiest is to move this block of code before the memory
    allocations and the pm_runtime_xxx calls.
    
    Link: https://lore.kernel.org/r/4d03c636193f64907c8dacb17fa71ed05fd5f60c.1636220582.git.christophe.jaillet@wanadoo.fr
    Fixes: b89ff410253d ("PCI: qcom: Replace ops with struct pcie_cfg in pcie match data")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f429ce71edb7a32264520d59ee0930f000c9c9c
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Dec 17 10:03:30 2021 +0100

    crypto: omap-aes - Fix broken pm_runtime_and_get() usage
    
    commit c2aec59be093bd44627bc4f6bc67e4614a93a7b6 upstream.
    
    This fix is basically the same as 3d6b661330a7 ("crypto: stm32 -
    Revert broken pm_runtime_resume_and_get changes"), just for the omap
    driver. If the return value isn't used, then pm_runtime_get_sync()
    has to be used for ensuring that the usage count is balanced.
    
    Fixes: 1f34cc4a8da3 ("crypto: omap-aes - Fix PM reference leak on omap-aes.c")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2031e0246e459cea7a01b342b5e4b87de8fc090c
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Dec 17 10:03:30 2021 +0100

    crypto: omap-aes - Fix broken pm_runtime_and_get() usage
    
    commit c2aec59be093bd44627bc4f6bc67e4614a93a7b6 upstream.
    
    This fix is basically the same as 3d6b661330a7 ("crypto: stm32 -
    Revert broken pm_runtime_resume_and_get changes"), just for the omap
    driver. If the return value isn't used, then pm_runtime_get_sync()
    has to be used for ensuring that the usage count is balanced.
    
    Fixes: 1f34cc4a8da3 ("crypto: omap-aes - Fix PM reference leak on omap-aes.c")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c0fd11c9c770f4e620fd54e38def32f9dc10fcc
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Dec 17 10:03:30 2021 +0100

    crypto: omap-aes - Fix broken pm_runtime_and_get() usage
    
    commit c2aec59be093bd44627bc4f6bc67e4614a93a7b6 upstream.
    
    This fix is basically the same as 3d6b661330a7 ("crypto: stm32 -
    Revert broken pm_runtime_resume_and_get changes"), just for the omap
    driver. If the return value isn't used, then pm_runtime_get_sync()
    has to be used for ensuring that the usage count is balanced.
    
    Fixes: 1f34cc4a8da3 ("crypto: omap-aes - Fix PM reference leak on omap-aes.c")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bd8dd0d61f961e6c13cc118d4ebbdba57f8561f
Author: Yongzhi Liu <lyz_cs@pku.edu.cn>
Date:   Tue Jan 18 15:11:51 2022 -0500

    drm/amdgpu: Add missing pm_runtime_put_autosuspend
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, thus a matching decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Yongzhi Liu <lyz_cs@pku.edu.cn>
    Reviewed-by: Lijo Lazar <lijo.lazar@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 46a10fc3a2beddd79dafc3cd800f14bde0844387
Merge: fc9d6952a4bb cfcabbb24d5f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jan 18 09:32:34 2022 +0200

    Merge tag 'rproc-v5.17' of git://git.kernel.org/pub/scm/linux/kernel/git/remoteproc/linux
    
    Pull remoteproc updates from Bjorn Andersson:
     "This introduces support for controlling the Cortex R7 co-processor in
      Renesas Gen3, support for R5F clusters and C71x DSPs on TI J721S2 and
      compute, audio and modem subsystems on Qualcomm SM6350.
    
      It fixes a couple of sparse errors related to memcpy_to/fromio and
      corrects the kerneldoc spelling of "Return:".
    
      The stm32 driver no longer attempts to communicate with the remote
      after the firmware has crashed"
    
    * tag 'rproc-v5.17' of git://git.kernel.org/pub/scm/linux/kernel/git/remoteproc/linux: (22 commits)
      remoteproc: stm32: Improve crash recovery time
      remoteproc: rcar_rproc: Remove trailing semicolon
      remoteproc: rcar_rproc: Fix pm_runtime_get_sync error check
      remoteproc: qcom: pas: Add SM6350 CDSP support
      remoteproc: qcom: pas: Add SM6350 ADSP support
      remoteproc: qcom: pas: Add SM6350 MPSS support
      dt-bindings: remoteproc: qcom: pas: Add SM6350 adsp, cdsp & mpss
      remoteproc: qcom: pas: Add missing power-domain "mxc" for CDSP
      remoteproc: imx_rproc: correct firmware reload
      remoteproc: qcom: pil_info: Don't memcpy_toio more than is provided
      remoteproc: Add Renesas rcar driver
      dt-bindings: remoteproc: Add Renesas R-Car
      remoteproc: Fix remaining wrong return formatting in documentation
      MAINTAINERS: Removing Ohad from remoteproc/rpmsg maintenance
      remoteproc: ingenic: Request IRQ disabled
      remoteproc: k3-r5: Extend support for R5F clusters on J721S2 SoCs
      remoteproc: k3-dsp: Extend support for C71x DSPs on J721S2 SoCs
      dt-bindings: remoteproc: k3-dsp: Update bindings for J721S2 SoCs
      dt-bindings: remoteproc: k3-r5f: Update bindings for J721S2 SoCs
      remoteproc: coredump: Correct argument 2 type for memcpy_fromio
      ...

commit d84ca2217b0065ec0f27a7c34ed073ed6449e213
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sun Apr 25 21:39:19 2021 +0200

    can: mcp251xfd: mcp251xfd_open(): make use of pm_runtime_resume_and_get()
    
    With patch
    
    | dd8088d5a896 PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter
    
    the usual pm_runtime_get_sync() and pm_runtime_put_noidle()
    in-case-of-error dance is no longer needed. Convert the mcp251xfd
    driver to use this function.
    
    Link: https://lore.kernel.org/all/20220105154300.1258636-6-mkl@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit e91aae8efc4eebd33bdebe067ab248c242cc0135
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Fri Oct 22 18:45:05 2021 +0200

    can: mcp251xfd: mcp251xfd_open(): open_candev() first
    
    This patch exchanges the order of open_candev() and
    pm_runtime_get_sync(), so that open_candev() is called first.
    
    A usual reason why open_candev() fails is missing CAN bit rate
    configuration. It makes no sense to resume the device from PM sleep
    first just to put it to sleep if the bit rate is not configured.
    
    Link: https://lore.kernel.org/all/20220105154300.1258636-5-mkl@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit c2aec59be093bd44627bc4f6bc67e4614a93a7b6
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Dec 17 10:03:30 2021 +0100

    crypto: omap-aes - Fix broken pm_runtime_and_get() usage
    
    This fix is basically the same as 3d6b661330a7 ("crypto: stm32 -
    Revert broken pm_runtime_resume_and_get changes"), just for the omap
    driver. If the return value isn't used, then pm_runtime_get_sync()
    has to be used for ensuring that the usage count is balanced.
    
    Fixes: 1f34cc4a8da3 ("crypto: omap-aes - Fix PM reference leak on omap-aes.c")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 0da7ca4c4fd95d70d473dc07488ad94ba3ee9b82
Author: Xiang Chen <chenxiang66@hisilicon.com>
Date:   Mon Dec 20 19:21:32 2021 +0800

    scsi: libsas: Resume host while sending SMP I/Os
    
    When sending SMP I/Os to the host we need to ensure that the host is not
    suspended and can process the commands. This is a better approach than
    replying on the host to resume itself to handle such commands. Use
    pm_runtime_get_sync() and pm_runtime_put_sync() calls for the host when
    executing SMP I/Os.
    
    Link: https://lore.kernel.org/r/1639999298-244569-10-git-send-email-chenxiang66@hisilicon.com
    Reviewed-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Xiang Chen <chenxiang66@hisilicon.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit b0229605b1436438f24d9a97d8ecf220e0ea5900
Author: Julien Massot <julien.massot@iot.bzh>
Date:   Thu Dec 16 17:06:53 2021 +0100

    remoteproc: rcar_rproc: Fix pm_runtime_get_sync error check
    
    pm_runtime_get_sync can also return 1 on success, change
    to use pm_runtime_resume_and_get which return 0 only on
    success.
    
    This bug has been discovered by Dan Carpenter by using Smatch
    static checker.
    
    Fixes: 285892a74f13 ("remoteproc: Add Renesas rcar driver")
    Signed-off-by: Julien Massot <julien.massot@iot.bzh>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    [Fixed blank line between tags]
    Link: https://lore.kernel.org/r/20211216160653.203768-1-julien.massot@iot.bzh
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>

commit 475b17b4a875ef31246c6a038ee60d5ca4982ea5
Author: Allen-KH Cheng <Allen-KH.Cheng@mediatek.com>
Date:   Thu Dec 9 22:08:30 2021 +0200

    ASoC: SOF: Remove pm_runtime_put_autosuspend() for SOF OF device
    
    In SOF OF device, pm_runtime_put_autosuspend() is not
    matching any pm_runtime_get_sync().
    
    This is imbalanced for PM runtime.
    
    Also, for consistency we call pm_runtime_mark_last_busy()
    before enabling PM runtime.
    
    1. Remove pm_runtime_put_autosuspend() in probe_complete
    2. Reorder PM runtime calls int probe_complete
    
    Signed-off-by: Allen-KH Cheng <Allen-KH.Cheng@mediatek.com>
    Reviewed-by: Daniel Baluta <daniel.baluta@nxp.com>
    Reviewed-by: Paul Olaru <paul.olaru@oss.nxp.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Daniel Baluta <daniel.baluta@nxp.com>
    Link: https://lore.kernel.org/r/20211209200830.145005-1-daniel.baluta@oss.nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit d815f7ca8bd7fb67a77916c922113fad9c3e82e4
Author: Alex Elder <elder@linaro.org>
Date:   Mon Nov 22 19:16:40 2021 -0600

    net: ipa: kill ipa_cmd_pipeline_clear()
    
    [ Upstream commit e4e9bfb7c93d7e78aa4ad7e1c411a8df15386062 ]
    
    Calling ipa_cmd_pipeline_clear() after stopping the channel
    underlying the AP<-modem RX endpoint can lead to a deadlock.
    
    This occurs in the ->runtime_suspend device power operation for the
    IPA driver.  While this callback is in progress, any other requests
    for power will block until the callback returns.
    
    Stopping the AP<-modem RX channel does not prevent the modem from
    sending another packet to this endpoint.  If a packet arrives for an
    RX channel when the channel is stopped, an SUSPEND IPA interrupt
    condition will be pending.  Handling an IPA interrupt requires
    power, so ipa_isr_thread() calls pm_runtime_get_sync() first thing.
    
    The problem occurs because a "pipeline clear" command will not
    complete while such a SUSPEND interrupt condition exists.  So the
    SUSPEND IPA interrupt handler won't proceed until it gets power;
    that won't happen until the ->runtime_suspend callback (and its
    "pipeline clear" command) completes; and that can't happen while
    the SUSPEND interrupt condition exists.
    
    It turns out that in this case there is no need to use the "pipeline
    clear" command.  There are scenarios in which clearing the pipeline
    is required while suspending, but those are not (yet) supported
    upstream.  So a simple fix, avoiding the potential deadlock, is to
    stop calling ipa_cmd_pipeline_clear() in ipa_endpoint_suspend().
    This removes the only user of ipa_cmd_pipeline_clear(), so get rid
    of that function.  It can be restored again whenever it's needed.
    
    This is basically a manual revert along with an explanation for
    commit 6cb63ea6a39ea ("net: ipa: introduce ipa_cmd_tag_process()").
    
    Fixes: 6cb63ea6a39ea ("net: ipa: introduce ipa_cmd_tag_process()")
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e0e90539bb0e6c0ca3768c642df9eed2118a8bb
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Nov 6 18:44:52 2021 +0100

    PCI: qcom: Fix an error handling path in 'qcom_pcie_probe()'
    
    If 'of_device_get_match_data()' fails, previous 'pm_runtime_get_sync()/
    pm_runtime_enable()' should be undone.
    
    To fix it, the easiest is to move this block of code before the memory
    allocations and the pm_runtime_xxx calls.
    
    Link: https://lore.kernel.org/r/4d03c636193f64907c8dacb17fa71ed05fd5f60c.1636220582.git.christophe.jaillet@wanadoo.fr
    Fixes: b89ff410253d ("PCI: qcom: Replace ops with struct pcie_cfg in pcie match data")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>

commit e4e9bfb7c93d7e78aa4ad7e1c411a8df15386062
Author: Alex Elder <elder@linaro.org>
Date:   Mon Nov 22 19:16:40 2021 -0600

    net: ipa: kill ipa_cmd_pipeline_clear()
    
    Calling ipa_cmd_pipeline_clear() after stopping the channel
    underlying the AP<-modem RX endpoint can lead to a deadlock.
    
    This occurs in the ->runtime_suspend device power operation for the
    IPA driver.  While this callback is in progress, any other requests
    for power will block until the callback returns.
    
    Stopping the AP<-modem RX channel does not prevent the modem from
    sending another packet to this endpoint.  If a packet arrives for an
    RX channel when the channel is stopped, an SUSPEND IPA interrupt
    condition will be pending.  Handling an IPA interrupt requires
    power, so ipa_isr_thread() calls pm_runtime_get_sync() first thing.
    
    The problem occurs because a "pipeline clear" command will not
    complete while such a SUSPEND interrupt condition exists.  So the
    SUSPEND IPA interrupt handler won't proceed until it gets power;
    that won't happen until the ->runtime_suspend callback (and its
    "pipeline clear" command) completes; and that can't happen while
    the SUSPEND interrupt condition exists.
    
    It turns out that in this case there is no need to use the "pipeline
    clear" command.  There are scenarios in which clearing the pipeline
    is required while suspending, but those are not (yet) supported
    upstream.  So a simple fix, avoiding the potential deadlock, is to
    stop calling ipa_cmd_pipeline_clear() in ipa_endpoint_suspend().
    This removes the only user of ipa_cmd_pipeline_clear(), so get rid
    of that function.  It can be restored again whenever it's needed.
    
    This is basically a manual revert along with an explanation for
    commit 6cb63ea6a39ea ("net: ipa: introduce ipa_cmd_tag_process()").
    
    Fixes: 6cb63ea6a39ea ("net: ipa: introduce ipa_cmd_tag_process()")
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e022fea64e8dd7e5dd137249251e415a1bd9a678
Author: Bean Huo <beanhuo@micron.com>
Date:   Wed Sep 29 22:06:38 2021 +0200

    scsi: ufs: core: Fix NULL pointer dereference
    
    [ Upstream commit 1da3b0141e74c18c2377d4c2655406a90a87742f ]
    
    Calling ufshcd_rpm_{get/put}_sync() prior to ufshcd_scsi_add_wlus() being
    called will trigger a NULL pointer dereference. This is because
    hba->sdev_ufs_device is initialized in ufshcd_scsi_add_wlus().
    
        Unable to handle kernel NULL pointer dereference at virtual address
        0000000000000348
        Mem abort info:
          ESR = 0x96000004
          EC = 0x25: DABT (current EL), IL = 32 bits
          SET = 0, FnV = 0
          EA = 0, S1PTW = 0
          FSC = 0x04: level 0 translation fault
        Data abort info:
          ISV = 0, ISS = 0x00000004
          CM = 0, WnR = 0
        [0000000000000348] user address but active_mm is swapper
        Internal error: Oops: 96000004 [#1] PREEMPT SMP
        Modules linked in:
        CPU: 0 PID: 91 Comm: kworker/u16:1 Not tainted 5.15.0-rc1-beanhuo-linaro-1423
        Hardware name: MicronRB (DT)
        Workqueue: events_unbound async_run_entry_fn
        pstate: 20000005 (nzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
        pc : pm_runtime_drop_link+0x128/0x338
        lr : ufshpb_get_dev_info+0x8c/0x148
        sp : ffff800012573c10
        x29: ffff800012573c10 x28: 0000000000000000 x27: 0000000000000003
        x26: ffff000001d21298 x25: 000000005abcea60 x24: ffff800011d89000
        x23: 0000000000000001 x22: ffff000001d21880 x21: ffff000001ec9300
        x20: 0000000000000004 x19: 0000000000000198 x18: ffffffffffffffff
        x17: 0000000000000000 x16: 0000000000000000 x15: 0000000000041400
        x14: 5eee00201100200a x13: 000000000000bb03 x12: 0000000000000000
        x11: 0000000000000100 x10: 0200000000000000 x9 : bb0000021a162c01
        x8 : 0302010021021003 x7 : 0000000000000000 x6 : ffff800012573af0
        x5 : 0000000000000001 x4 : 0000000000000001 x3 : 0000000000000200
        x2 : 0000000000000348 x1 : 0000000000000348 x0 : ffff80001095308c
        Call trace:
         pm_runtime_drop_link+0x128/0x338
         ufshpb_get_dev_info+0x8c/0x148
         ufshcd_probe_hba+0xda0/0x11b8
         ufshcd_async_scan+0x34/0x330
         async_run_entry_fn+0x38/0x180
         process_one_work+0x1f4/0x498
         worker_thread+0x48/0x480
         kthread+0x140/0x158
         ret_from_fork+0x10/0x20
        Code: 88027c01 35ffffa2 17fff6c4 f9800051 (885f7c40)
        ---[ end trace 2ba541335f595c95 ]
    
    ufshpb_get_dev_info() is only called during asynchronous scanning and at
    that time pm_runtime_get_sync() has been called:
    
        ...
        /* Hold auto suspend until async scan completes */
        pm_runtime_get_sync(dev);
        atomic_set(&hba->scsi_block_reqs_cnt, 0);
        ...
        ufshcd_async_scan()
            ufshcd_probe_hba(hba, true);
                ufshcd_device_params_init(hba);
                    ufshpb_get_dev_info();
        ...
            pm_runtime_put_sync(hba->dev);
    
    Remove ufshcd_rpm_{get/put}_sync() from ufshpb_get_dev_info() to fix this
    problem.
    
    Link: https://lore.kernel.org/r/20210929200640.828611-2-huobean@gmail.com
    Fixes: 351b3a849ac7 ("scsi: ufs: ufshpb: Use proper power management API")
    Signed-off-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fb118b077f6cb01d421f44562b2600bfcc25feb
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Thu Oct 21 11:05:38 2021 +0800

    dmaengine: tegra210-adma: fix pm runtime unbalance
    
    [ Upstream commit c5a51fc89c0103c03b8a54cf12dac7d014b3a2bf ]
    
    The previous commit 059e969c2a7d ("dmaengine: tegra210-adma: Using
    pm_runtime_resume_and_get to replace open coding") forgets to replace
    the pm_runtime_get_sync in the tegra_adma_probe, but removes the
    pm_runtime_put_noidle.
    
    Fix this by continuing to replace pm_runtime_get_sync with
    pm_runtime_resume_and_get in tegra_adma_probe.
    
    Fixes: 059e969c2a7d ("dmaengine: tegra210-adma: Using pm_runtime_resume_and_get to replace open coding")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20211021030538.3465287-1-mudongliangabcd@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3b39825ed0813f787cb3ebdc5ecaa5131623647
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Aug 9 16:31:46 2021 +0300

    fbdev/efifb: Release PCI device's runtime PM ref during FB destroy
    
    [ Upstream commit 55285e21f04517939480966164a33898c34b2af2 ]
    
    Atm the EFI FB platform driver gets a runtime PM reference for the
    associated GFX PCI device during probing the EFI FB platform device and
    releases it only when the platform device gets unbound.
    
    When fbcon switches to the FB provided by the PCI device's driver (for
    instance i915/drmfb), the EFI FB will get only unregistered without the
    EFI FB platform device getting unbound, keeping the runtime PM reference
    acquired during the platform device probing. This reference will prevent
    the PCI driver from runtime suspending the device.
    
    Fix this by releasing the RPM reference from the EFI FB's destroy hook,
    called when the FB gets unregistered.
    
    While at it assert that pm_runtime_get_sync() didn't fail.
    
    v2:
    - Move pm_runtime_get_sync() before register_framebuffer() to avoid its
      race wrt. efifb_destroy()->pm_runtime_put(). (Daniel)
    - Assert that pm_runtime_get_sync() didn't fail.
    - Clarify commit message wrt. platform/PCI device/driver and driver
      removal vs. device unbinding.
    
    Fixes: a6c0fd3d5a8b ("efifb: Ensure graphics device for efifb stays at PCI D0")
    Cc: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch> (v1)
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Acked-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210809133146.2478382-1-imre.deak@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6ce2af8766c39a5b09afa466ed4d0ef2d8b5a65
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Fri Nov 12 20:00:15 2021 +0100

    pwm: img: Use only a single idiom to get a runtime PM reference
    
    Currently there are two very similar approaches in use by this driver:
    img_pwm_config() uses pm_runtime_get_sync() and calls
    pm_runtime_put_autosuspend() in the error path; img_pwm_enable() calls
    pm_runtime_resume_and_get() which already puts the reference in its own
    error path.
    
    Align pm_runtime usage and use the same idiom in both locations.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>

commit f53dc812a258e1312922789133154a08810f71bd
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Aug 9 16:31:46 2021 +0300

    fbdev/efifb: Release PCI device's runtime PM ref during FB destroy
    
    [ Upstream commit 55285e21f04517939480966164a33898c34b2af2 ]
    
    Atm the EFI FB platform driver gets a runtime PM reference for the
    associated GFX PCI device during probing the EFI FB platform device and
    releases it only when the platform device gets unbound.
    
    When fbcon switches to the FB provided by the PCI device's driver (for
    instance i915/drmfb), the EFI FB will get only unregistered without the
    EFI FB platform device getting unbound, keeping the runtime PM reference
    acquired during the platform device probing. This reference will prevent
    the PCI driver from runtime suspending the device.
    
    Fix this by releasing the RPM reference from the EFI FB's destroy hook,
    called when the FB gets unregistered.
    
    While at it assert that pm_runtime_get_sync() didn't fail.
    
    v2:
    - Move pm_runtime_get_sync() before register_framebuffer() to avoid its
      race wrt. efifb_destroy()->pm_runtime_put(). (Daniel)
    - Assert that pm_runtime_get_sync() didn't fail.
    - Clarify commit message wrt. platform/PCI device/driver and driver
      removal vs. device unbinding.
    
    Fixes: a6c0fd3d5a8b ("efifb: Ensure graphics device for efifb stays at PCI D0")
    Cc: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch> (v1)
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Acked-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210809133146.2478382-1-imre.deak@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2bd7be12b9edab5736a9a95bceccfbdf7520fdd
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Oct 29 14:38:55 2021 +0200

    PM: sleep: Fix runtime PM based cpuidle support
    
    In the cpuidle-psci case, runtime PM in combination with the generic PM
    domain (genpd), may be used when entering/exiting a shared idlestate. More
    precisely, genpd relies on runtime PM to be enabled for the attached device
    (in this case it belongs to a CPU), to properly manage the reference
    counting of its PM domain.
    
    This works fine most of the time, but during system suspend in
    dpm_suspend_late(), the PM core disables runtime PM for all devices. Beyond
    this point, calls to pm_runtime_get_sync() to runtime resume a device may
    fail and therefore it could also mess up the reference counting in genpd.
    
    To fix this problem, let's call wake_up_all_idle_cpus() in
    dpm_suspend_late(), prior to disabling runtime PM. In this way a device
    that belongs to a CPU, becomes runtime resumed through cpuidle-psci and
    stays like that, because the runtime PM usage count has been bumped in
    device_prepare().
    
    Diagnosed-by: Maulik Shah <mkshah@codeaurora.org>
    Suggested-by: Rafael J. Wysocki <rafael@kernel.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit c5a51fc89c0103c03b8a54cf12dac7d014b3a2bf
Author: Dongliang Mu <mudongliangabcd@gmail.com>
Date:   Thu Oct 21 11:05:38 2021 +0800

    dmaengine: tegra210-adma: fix pm runtime unbalance
    
    The previous commit 059e969c2a7d ("dmaengine: tegra210-adma: Using
    pm_runtime_resume_and_get to replace open coding") forgets to replace
    the pm_runtime_get_sync in the tegra_adma_probe, but removes the
    pm_runtime_put_noidle.
    
    Fix this by continuing to replace pm_runtime_get_sync with
    pm_runtime_resume_and_get in tegra_adma_probe.
    
    Fixes: 059e969c2a7d ("dmaengine: tegra210-adma: Using pm_runtime_resume_and_get to replace open coding")
    Signed-off-by: Dongliang Mu <mudongliangabcd@gmail.com>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20211021030538.3465287-1-mudongliangabcd@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 43b058698f723e3c2087af7069c0da082a3ecbe1
Merge: 9609cfcda007 510f1c133aed
Author: Mark Brown <broonie@kernel.org>
Date:   Thu Oct 7 22:24:55 2021 +0100

    Merge series "Rockchip I2S/TDM controller" from Nicolas Frattaroli <frattaroli.nicolas@gmail.com>:
    
    Hello,
    
    this is version 5 of the I2S/TDM driver patchset. A big thanks
    to everyone who has provided their valuable feedback so far.
    
    Changes in v5:
     driver:
     - change comment style of the first comment to C++ style
     - make refcount non-atomic, as it's only ever used inside
       a spinlock
     - use newer SND_SOC_DAIFMT_CB* defines
     - change ternary statements to if/else conditions
     - make _clk_compensation_put return 1 if clock changed
     - implement set_bclk_ratio callback
     - always set half frame sync mode in TDM mode
     - automatically enable mclk-calibrate mode when the clocks for
       it are specified in the device tree
     bindings:
     - add Reviewed-by: Rob Herring
     - drop rockchip,frame-width property (done by set_bclk_ratio)
     - drop rockchip,fsync-half-frame property
     - drop rockchip,mclk-calibrate property
     dts:
     - drop empty codec block from Quartz64 device tree
    
    Changes in v4:
     driver:
     - factor TDE/RDE enable/disable into their own inlined functions
     - add an RDE disable in a location where it looks like it was
       forgotten (rxctrl else), judging by corresponding TDE code
     - remove parentheses around CLK_PPM_MIN/MAX values
     - wording + titlecasing in the clock compensation control
     - use if statement in precious_reg instead
     - refactor rockchip_i2s_io_multiplex to have the switch statements
       in a function call to make the function less unwieldy
     - get rid of IS_ERR checks around clk enable/disable calls where
       already checked before by the probe
     - reworded some error message strings
     - fix potential deadlock in txrxctrl found by Sugar Zhang
       using spin_lock_irqsave
     - fix potential deadlock in trcm_mode found by Sugar Zhang
       using spin_lock_irqsave
     - use devm_platform_get_and_ioremap_resource in probe
     - only set DMA things if controller has capture/playback ability.
       Did not move this into init_dai because I'd then need to pass in
       the res and probe it earlier in the function, and it's also used
       elsewhere in the probe function
     - use _get_optional_exclusive for reset controls, as some controllers
       only have capture or playback capability
     bindings:
     - remove status = "okay" since that's the default
     - change the path configs to be an enum
     - rename "foo" to "bus"
     - make resets optional as controller may lack either playback or
       capture capability, and therefore also doesn't have a reset.
       At least one reset is still required, because a controller with
       no playback and no capture is not very useful
    
    Changes in v3:
     driver:
     - alphabetically sort includes
     - check pm_runtime_get_sync return value, act on it
     - remove unnecessary initialisers in set_fmt
     - use udelay(15) in retry code: 10 retries * 15 = 150, so at worst
       we wait the full i2s register access delay
     - fix some weird returns to return directly
     - use __maybe_unused instead of #ifdef CONFIG_PM_SLEEP, also put
       __maybe_unused on the runtime callbacks
     - use (foo) instead of foo in header macros for precedence reasons
     - when using mclk-calibrate, also turn off/on those clocks during
       suspend and resume operations
     - remove mclk_tx and mclk_rx reenablement code in remove
     - move hclk enablement further down the probe, and disable it
       on probe failure
     - make reset controls mandatory, since the bindings state this too
     - use _exclusive for getting the reset controls
     - change reset assert/deassert delays to both be 10 usec
       (thank you Sugar Zhang!)
     - properly prepare and enable all mclks in probe, especially before
       calling clk_get_rate on them
     - if registering PCM fails, also use the cleanup error path instead of
       returning directly
     - bring back playback and capture only but in the way Sugar Zhang
       suggested it: set those modes depending on dma-names
     - rework clock enablement in general. Probe now always enables these,
       instead of relying on the pm resume thing
     - add myself to MAINTAINERS for this driver
     dt bindings:
     - fix a description still mentioning clk-trcm in the schema
     - document rockchip,io-multiplex, a property that describes the
       hardware as having multiplexed I2S GPIOs so direction needs to
       be changed dynamically
     - document rockchip,mclk-calibrate, which allows specifying
       different clocks for the two sample rate bases and switch between
       them as needed
     - dma-names now doesn't have a set order and items can be absent to
       indicate that the controller doesn't support this mode
     - add myself to MAINTAINERS for these bindings
    
    Changes in v2:
     - remove ad-hoc writeq and needless (and broken) optimisation in
       reset assert/deassert. This wouldn't have worked on Big Endian,
       and would've been pointless on any other platform, as the
       overhead for saving one write was comparatively big
     - fix various checkpatch issues
     - get rid of leftover clk-trcm in schema
     - set status = "okay" in example in schema instead of "disabled"
     - change dma-names so rx is first, adjust device trees as necessary
     - properly reference uint32-array for rx-route and tx-route
       instead of uint32
     - replace trcm-sync with two boolean properties, adjust DT changes
       accordingly and also get rid of the header file
     - get rid of rockchip,no-dmaengine. This was only needed for
       some downstream driver and shouldn't be in the DT
     - get rid of rockchip,capture-only/playback-only. Rationale being
       that I have no way to test whether they're needed, and
       unconditionally setting channels_min to 0 breaks everything
     - change hclk description in "clocks"
    
    Nicolas Frattaroli (4):
      ASoC: rockchip: add support for i2s-tdm controller
      ASoC: dt-bindings: rockchip: add i2s-tdm bindings
      arm64: dts: rockchip: add i2s1 on rk356x
      arm64: dts: rockchip: add analog audio on Quartz64
    
     .../bindings/sound/rockchip,i2s-tdm.yaml      |  198 ++
     MAINTAINERS                                   |    7 +
     .../boot/dts/rockchip/rk3566-quartz64-a.dts   |   31 +-
     arch/arm64/boot/dts/rockchip/rk356x.dtsi      |   26 +
     sound/soc/rockchip/Kconfig                    |   11 +
     sound/soc/rockchip/Makefile                   |    2 +
     sound/soc/rockchip/rockchip_i2s_tdm.c         | 1848 +++++++++++++++++
     sound/soc/rockchip/rockchip_i2s_tdm.h         |  398 ++++
     8 files changed, 2520 insertions(+), 1 deletion(-)
     create mode 100644 Documentation/devicetree/bindings/sound/rockchip,i2s-tdm.yaml
     create mode 100644 sound/soc/rockchip/rockchip_i2s_tdm.c
     create mode 100644 sound/soc/rockchip/rockchip_i2s_tdm.h
    
    --
    2.33.0

commit 1da3b0141e74c18c2377d4c2655406a90a87742f
Author: Bean Huo <beanhuo@micron.com>
Date:   Wed Sep 29 22:06:38 2021 +0200

    scsi: ufs: core: Fix NULL pointer dereference
    
    Calling ufshcd_rpm_{get/put}_sync() prior to ufshcd_scsi_add_wlus() being
    called will trigger a NULL pointer dereference. This is because
    hba->sdev_ufs_device is initialized in ufshcd_scsi_add_wlus().
    
        Unable to handle kernel NULL pointer dereference at virtual address
        0000000000000348
        Mem abort info:
          ESR = 0x96000004
          EC = 0x25: DABT (current EL), IL = 32 bits
          SET = 0, FnV = 0
          EA = 0, S1PTW = 0
          FSC = 0x04: level 0 translation fault
        Data abort info:
          ISV = 0, ISS = 0x00000004
          CM = 0, WnR = 0
        [0000000000000348] user address but active_mm is swapper
        Internal error: Oops: 96000004 [#1] PREEMPT SMP
        Modules linked in:
        CPU: 0 PID: 91 Comm: kworker/u16:1 Not tainted 5.15.0-rc1-beanhuo-linaro-1423
        Hardware name: MicronRB (DT)
        Workqueue: events_unbound async_run_entry_fn
        pstate: 20000005 (nzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
        pc : pm_runtime_drop_link+0x128/0x338
        lr : ufshpb_get_dev_info+0x8c/0x148
        sp : ffff800012573c10
        x29: ffff800012573c10 x28: 0000000000000000 x27: 0000000000000003
        x26: ffff000001d21298 x25: 000000005abcea60 x24: ffff800011d89000
        x23: 0000000000000001 x22: ffff000001d21880 x21: ffff000001ec9300
        x20: 0000000000000004 x19: 0000000000000198 x18: ffffffffffffffff
        x17: 0000000000000000 x16: 0000000000000000 x15: 0000000000041400
        x14: 5eee00201100200a x13: 000000000000bb03 x12: 0000000000000000
        x11: 0000000000000100 x10: 0200000000000000 x9 : bb0000021a162c01
        x8 : 0302010021021003 x7 : 0000000000000000 x6 : ffff800012573af0
        x5 : 0000000000000001 x4 : 0000000000000001 x3 : 0000000000000200
        x2 : 0000000000000348 x1 : 0000000000000348 x0 : ffff80001095308c
        Call trace:
         pm_runtime_drop_link+0x128/0x338
         ufshpb_get_dev_info+0x8c/0x148
         ufshcd_probe_hba+0xda0/0x11b8
         ufshcd_async_scan+0x34/0x330
         async_run_entry_fn+0x38/0x180
         process_one_work+0x1f4/0x498
         worker_thread+0x48/0x480
         kthread+0x140/0x158
         ret_from_fork+0x10/0x20
        Code: 88027c01 35ffffa2 17fff6c4 f9800051 (885f7c40)
        ---[ end trace 2ba541335f595c95 ]
    
    ufshpb_get_dev_info() is only called during asynchronous scanning and at
    that time pm_runtime_get_sync() has been called:
    
        ...
        /* Hold auto suspend until async scan completes */
        pm_runtime_get_sync(dev);
        atomic_set(&hba->scsi_block_reqs_cnt, 0);
        ...
        ufshcd_async_scan()
            ufshcd_probe_hba(hba, true);
                ufshcd_device_params_init(hba);
                    ufshpb_get_dev_info();
        ...
            pm_runtime_put_sync(hba->dev);
    
    Remove ufshcd_rpm_{get/put}_sync() from ufshpb_get_dev_info() to fix this
    problem.
    
    Link: https://lore.kernel.org/r/20210929200640.828611-2-huobean@gmail.com
    Fixes: 351b3a849ac7 ("scsi: ufs: ufshpb: Use proper power management API")
    Signed-off-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit f9910fae78de91ec703c92d34663dd0185b28618
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 8 15:24:02 2021 +0800

    PCI: rcar: Fix runtime PM imbalance in rcar_pcie_ep_probe()
    
    [ Upstream commit 1e29cd9983eba1b596bc07f94d81d728007f8a25 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Link: https://lore.kernel.org/r/20210408072402.15069-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75420f9400a6792dc4b43e5a43ee0f105dd3f9ee
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 8 15:24:02 2021 +0800

    PCI: rcar: Fix runtime PM imbalance in rcar_pcie_ep_probe()
    
    [ Upstream commit 1e29cd9983eba1b596bc07f94d81d728007f8a25 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Link: https://lore.kernel.org/r/20210408072402.15069-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88b099006d83b0bf452379cad4ce494329084726
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Sep 17 17:43:49 2021 +0300

    scsi: ufs: core: Revert "scsi: ufs: Synchronize SCSI and UFS error handling"
    
    This reverts commit a113eaaf86373362b053279049907ff82b5df6c8.
    
    There are a couple of issues with the commit:
    
     1. It causes deadlocks.
    
     2. It causes the shost->eh_cmd_q list of failed requests not to be
        processed, ever.
    
    So revert it.
    
    1. Deadlocks
    
    The SCSI error handler runs with requests blocked beginning when
    scsi_schedule_eh() sets SHOST_RECOVERY state, continuing through
    scsi_error_handler() callback ->eh_strategy_handler() until
    scsi_restart_operations() is called.  By setting eh_strategy_handler to
    ufshcd_err_handler, the patch changed the UFS error handler to run with
    requests blocked, including PM requests, for the entire run of the error
    handler.
    
    That conflicts with UFS error handler existing synchronization with UFS
    device PM operations.  The UFS error handler synchronizes with runtime PM
    by doing pm_runtime_get_sync() prior to blocking requests itself.  It
    synchronizes with system PM by use of hba->host_sem, again before blocking
    requests itself.  However, if requests are already blocked, then PM
    operations will block.  So:
    
       the UFS error handler blocks waiting on PM
     + PM blocks waiting on SCSI PM requests to process or fail
     + PM requests are blocked waiting on error handling to finish
     =  deadlock
    
    This happens both for runtime PM and system PM.
    
    Prior to the patch, these deadlocks could not happen even if SCSI error
    handling was running, because the presence of requests in shost->eh_cmd_q
    would mean the queues could not be suspended, which would mean that, should
    the UFS error handler run at the same time, it would not need to wait for
    PM or vice versa.
    
    Please note these scenarios are not just theoretical, they were found
    during testing on a Samsung Galaxy Book S.
    
    2. ->eh_strategy_handler() must process shost->eh_cmd_q list of failed
    requests, as all other eh_strategy_handler's do except UFS error handler.
    Refer for example: scsi_unjam_host(), ata_scsi_error() and
    sas_scsi_recover_host().
    
    Link: https://lore.kernel.org/r/20210917144349.14058-1-adrian.hunter@intel.com
    Fixes: a113eaaf8637 ("scsi: ufs: Synchronize SCSI and UFS error handling")
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 8217f07a50236779880f13e87f99224cd9117f83
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Thu Sep 16 19:18:52 2021 -0700

    usb: dwc3: gadget: Avoid starting DWC3 gadget during UDC unbind
    
    There is a race present where the DWC3 runtime resume runs in parallel
    to the UDC unbind sequence.  This will eventually lead to a possible
    scenario where we are enabling the run/stop bit, without a valid
    composition defined.
    
    Thread#1 (handling UDC unbind):
    usb_gadget_remove_driver()
    -->usb_gadget_disconnect()
      -->dwc3_gadget_pullup(0)
    --> continue UDC unbind sequence
    -->Thread#2 is running in parallel here
    
    Thread#2 (handing next cable connect)
    __dwc3_set_mode()
      -->pm_runtime_get_sync()
        -->dwc3_gadget_resume()
          -->dwc->gadget_driver is NOT NULL yet
          -->dwc3_gadget_run_stop(1)
          --> _dwc3gadget_start()
    ...
    
    Fix this by tracking the pullup disable routine, and avoiding resuming
    of the DWC3 gadget.  Once the UDC is re-binded, that will trigger the
    pullup enable routine, which would handle enabling the DWC3 gadget.
    
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/20210917021852.2037-1-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99629ea392a1809052124e23aba6f0aed908aec8
Author: Quanyang Wang <quanyang.wang@windriver.com>
Date:   Wed Mar 10 12:59:45 2021 +0800

    drm: xlnx: zynqmp_dpsub: Call pm_runtime_get_sync before setting pixel clock
    
    [ Upstream commit a19effb6dbe5bd1be77a6d68eba04dba8993ffeb ]
    
    The Runtime PM subsystem will force the device "fd4a0000.zynqmp-display"
    to enter suspend state while booting if the following conditions are met:
    - the usage counter is zero (pm_runtime_get_sync hasn't been called yet)
    - no 'active' children (no zynqmp-dp-snd-xx node under dpsub node)
    - no other device in the same power domain (dpdma node has no
                    "power-domains = <&zynqmp_firmware PD_DP>" property)
    
    So there is a scenario as below:
    1) DP device enters suspend state   <- call zynqmp_gpd_power_off
    2) zynqmp_disp_crtc_setup_clock     <- configurate register VPLL_FRAC_CFG
    3) pm_runtime_get_sync              <- call zynqmp_gpd_power_on and clear previous
                                           VPLL_FRAC_CFG configuration
    4) clk_prepare_enable(disp->pclk)   <- enable failed since VPLL_FRAC_CFG
                                           configuration is corrupted
    
    From above, we can see that pm_runtime_get_sync may clear register
    VPLL_FRAC_CFG configuration and result the failure of clk enabling.
    Putting pm_runtime_get_sync at the very beginning of the function
    zynqmp_disp_crtc_atomic_enable can resolve this issue.
    
    Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b1fc70f31dc4b1954c9f1d6a933890489b7b5e7
Author: Quanyang Wang <quanyang.wang@windriver.com>
Date:   Wed Mar 10 12:59:45 2021 +0800

    drm: xlnx: zynqmp_dpsub: Call pm_runtime_get_sync before setting pixel clock
    
    [ Upstream commit a19effb6dbe5bd1be77a6d68eba04dba8993ffeb ]
    
    The Runtime PM subsystem will force the device "fd4a0000.zynqmp-display"
    to enter suspend state while booting if the following conditions are met:
    - the usage counter is zero (pm_runtime_get_sync hasn't been called yet)
    - no 'active' children (no zynqmp-dp-snd-xx node under dpsub node)
    - no other device in the same power domain (dpdma node has no
                    "power-domains = <&zynqmp_firmware PD_DP>" property)
    
    So there is a scenario as below:
    1) DP device enters suspend state   <- call zynqmp_gpd_power_off
    2) zynqmp_disp_crtc_setup_clock     <- configurate register VPLL_FRAC_CFG
    3) pm_runtime_get_sync              <- call zynqmp_gpd_power_on and clear previous
                                           VPLL_FRAC_CFG configuration
    4) clk_prepare_enable(disp->pclk)   <- enable failed since VPLL_FRAC_CFG
                                           configuration is corrupted
    
    From above, we can see that pm_runtime_get_sync may clear register
    VPLL_FRAC_CFG configuration and result the failure of clk enabling.
    Putting pm_runtime_get_sync at the very beginning of the function
    zynqmp_disp_crtc_atomic_enable can resolve this issue.
    
    Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f76f78f9f479ebfdd94ec8c868b39aba7ca4fb0f
Author: Quanyang Wang <quanyang.wang@windriver.com>
Date:   Wed Mar 10 12:59:45 2021 +0800

    drm: xlnx: zynqmp_dpsub: Call pm_runtime_get_sync before setting pixel clock
    
    [ Upstream commit a19effb6dbe5bd1be77a6d68eba04dba8993ffeb ]
    
    The Runtime PM subsystem will force the device "fd4a0000.zynqmp-display"
    to enter suspend state while booting if the following conditions are met:
    - the usage counter is zero (pm_runtime_get_sync hasn't been called yet)
    - no 'active' children (no zynqmp-dp-snd-xx node under dpsub node)
    - no other device in the same power domain (dpdma node has no
                    "power-domains = <&zynqmp_firmware PD_DP>" property)
    
    So there is a scenario as below:
    1) DP device enters suspend state   <- call zynqmp_gpd_power_off
    2) zynqmp_disp_crtc_setup_clock     <- configurate register VPLL_FRAC_CFG
    3) pm_runtime_get_sync              <- call zynqmp_gpd_power_on and clear previous
                                           VPLL_FRAC_CFG configuration
    4) clk_prepare_enable(disp->pclk)   <- enable failed since VPLL_FRAC_CFG
                                           configuration is corrupted
    
    From above, we can see that pm_runtime_get_sync may clear register
    VPLL_FRAC_CFG configuration and result the failure of clk enabling.
    Putting pm_runtime_get_sync at the very beginning of the function
    zynqmp_disp_crtc_atomic_enable can resolve this issue.
    
    Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0eee458057c0132e5ddaa1b6fe2080b1b6668ec0
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Jul 6 20:45:21 2021 +0800

    dmaengine: usb-dmac: Fix PM reference leak in usb_dmac_probe()
    
    [ Upstream commit 1da569fa7ec8cb0591c74aa3050d4ea1397778b4 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by moving the error_pm label above the pm_runtime_put() in
    the error path.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210706124521.1371901-1-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 072cc0ba56d7302bc9c3809378a14c3a5e4eccf8
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Jul 6 20:45:21 2021 +0800

    dmaengine: usb-dmac: Fix PM reference leak in usb_dmac_probe()
    
    [ Upstream commit 1da569fa7ec8cb0591c74aa3050d4ea1397778b4 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by moving the error_pm label above the pm_runtime_put() in
    the error path.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210706124521.1371901-1-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a24b6a13ece0545f6863c177b17a19d82261f1c
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Jul 6 20:45:21 2021 +0800

    dmaengine: usb-dmac: Fix PM reference leak in usb_dmac_probe()
    
    [ Upstream commit 1da569fa7ec8cb0591c74aa3050d4ea1397778b4 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by moving the error_pm label above the pm_runtime_put() in
    the error path.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210706124521.1371901-1-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a29364ca2742201d60ae5affea066f73ef9b14d
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Jul 6 20:45:21 2021 +0800

    dmaengine: usb-dmac: Fix PM reference leak in usb_dmac_probe()
    
    [ Upstream commit 1da569fa7ec8cb0591c74aa3050d4ea1397778b4 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by moving the error_pm label above the pm_runtime_put() in
    the error path.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210706124521.1371901-1-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11145efd295b0a65fcdadae398f4043300b83567
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Jul 6 20:45:21 2021 +0800

    dmaengine: usb-dmac: Fix PM reference leak in usb_dmac_probe()
    
    [ Upstream commit 1da569fa7ec8cb0591c74aa3050d4ea1397778b4 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by moving the error_pm label above the pm_runtime_put() in
    the error path.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210706124521.1371901-1-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b618a32142c727c6d20240cc174900f1c08a71f9
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Jul 6 20:45:21 2021 +0800

    dmaengine: usb-dmac: Fix PM reference leak in usb_dmac_probe()
    
    [ Upstream commit 1da569fa7ec8cb0591c74aa3050d4ea1397778b4 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by moving the error_pm label above the pm_runtime_put() in
    the error path.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210706124521.1371901-1-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c6e26d59bfbcbd1f52b3fc976d197f60e951a2e
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Jul 6 20:45:21 2021 +0800

    dmaengine: usb-dmac: Fix PM reference leak in usb_dmac_probe()
    
    [ Upstream commit 1da569fa7ec8cb0591c74aa3050d4ea1397778b4 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by moving the error_pm label above the pm_runtime_put() in
    the error path.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210706124521.1371901-1-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1125062fb4074fade7fa1114b9746a6620eb5bf
Merge: b8e36e13ea5e c3f115aa5e1b
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Aug 20 14:45:48 2021 +0100

    Merge branch 'ipa-kill-off-ipa_clock_get'
    
    Alex Elder says:
    
    ====================
    net: ipa: kill off ipa_clock_get()
    
    This series replaces the remaining uses of ipa_clock_get() with
    calls to pm_runtime_get_sync() instead.  It replaces all calls to
    ipa_clock_put() with calls to pm_runtime_put().
    
    This completes the preparation for enabling automated suspend under
    the control of the power management core code.  The next patch (in
    an upcoming series) enables that.  Then the "ipa_clock" files and
    symbols will switch to using an "ipa_power" naming convention instead.
    
    Additional info
    
    It is possible for pm_runtime_get_sync() to return an error.  There
    are really three cases, identified by return value:
      - 1, meaning power was already active
      - 0, meaning power was not previously active, but is now
      - EACCES, meaning runtime PM is disabled
    One additional case is EINVAL, meaning a previous suspend or resume
    (or idle) call returned an error.  But we have always assumed this
    won't happen (we previously didn't even check for an error).
    
    But because we use pm_runtime_force_suspend() to implement system
    suspend, there's a chance we'd get an EACCES error (the first thing
    that function does is disable runtime suspend).  Individual patches
    explain what happens in that case, but generally we just accept that
    it could be an unlikely problem (occurring only at startup time).
    
    Similarly, pm_runtime_put() could return an error.  There too, we
    ignore EINVAL, assuming the IPA suspend and resume operations won't
    produce an error.  EBUSY and EPERM are not applicable, EAGAIN is not
    expected (and harmless).  We should never get EACCES (runtime
    suspend disabled), because pm_runtime_put() calls match prior
    pm_runtime_get_sync() calls, and a system suspend will not be
    started while a runtime suspend or resume is underway.  In summary,
    the value returned from pm_runtime_put() is not meaningful, so we
    explicitly ignore it.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c3f115aa5e1b6459e2ccd711277435397dd7c6e9
Author: Alex Elder <elder@linaro.org>
Date:   Thu Aug 19 17:19:27 2021 -0500

    net: ipa: kill ipa_clock_get()
    
    The only remaining user of the ipa_clock_{get,put}() interface is
    ipa_isr_thread().  Replace calls to ipa_clock_get() there calling
    pm_runtime_get_sync() instead.  And call pm_runtime_put() there
    rather than ipa_clock_put().  Warn if we ever get an error.
    
    With that, we can get rid of ipa_clock_get() and ipa_clock_put().
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 724c2d743688f296263df0223c3d95987dfc427b
Author: Alex Elder <elder@linaro.org>
Date:   Thu Aug 19 17:19:26 2021 -0500

    net: ipa: don't use ipa_clock_get() in "ipa_modem.c"
    
    When we open or close the modem network device we need to ensure the
    hardware is powered.  Replace the callers of ipa_clock_get() found
    in ipa_open() and ipa_stop() with calls to pm_runtime_get_sync().
    If an error is returned, simply return that error to the caller
    (without any error or warning message).  This could conceivably
    occur if the function was called while the system was suspended,
    but that really shouldn't happen.  Replace corresponding calls to
    ipa_clock_put() with pm_runtime_put() also.
    
    If the modem crashes we also need to ensure the hardware is powered
    to recover.  If getting power returns an error there's not much we
    can do, but at least report the error.  (Ideally the remoteproc SSR
    code would ensure the AP was not suspended when it sends the
    notification, but that is not (yet) the case.)
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 799c5c24b7acc8af0086f1cbff5be3af7f63f6f1
Author: Alex Elder <elder@linaro.org>
Date:   Thu Aug 19 17:19:25 2021 -0500

    net: ipa: don't use ipa_clock_get() in "ipa_uc.c"
    
    Replace the ipa_clock_get() call in ipa_uc_clock() when taking the
    "proxy" clock reference for the microcontroller with a call to
    pm_runtime_get_sync().  Replace calls of ipa_clock_put() for the
    microcontroller with pm_runtime_put() calls instead.
    
    There is a chance we get an error when taking the microcontroller
    power reference.  This is an unlikely scenario, where system suspend
    is initiated just before we learn the modem is booting.  For now
    we'll just accept that this could occur, and report it if it does.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c43adc75dc2dee8cc5a29a722c1c1d5a00b434c3
Author: Alex Elder <elder@linaro.org>
Date:   Thu Aug 19 17:19:24 2021 -0500

    net: ipa: don't use ipa_clock_get() in "ipa_smp2p.c"
    
    If the "modem-init" Device Tree property is present for a platform,
    the modem performs early IPA hardware initialization, and signals
    this is complete with an "ipa-setup-ready" SMP2P interrupt.  This
    triggers a call to ipa_setup(), which requires the hardware to be
    powered.
    
    Replace the call to ipa_clock_get() in this case with a call to
    pm_runtime_get_sync().  And replace the corresponding calls to
    ipa_clock_put() with calls to pm_runtime_put() instead.
    
    There is a chance we get an error when taking this power reference.
    This is an unlikely scenario, where system suspend is initiated just
    before the modem signals it has finished initializing the IPA
    hardware.  For now we'll just accept that this could occur, and
    report it if it does.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4c6a4da84431415b1f451e2715a17487f9b3474e
Author: Alex Elder <elder@linaro.org>
Date:   Thu Aug 19 17:19:23 2021 -0500

    net: ipa: don't use ipa_clock_get() in "ipa_main.c"
    
    We need the hardware to be powered starting at the config stage of
    initialization when the IPA driver probes.  And we need it powered
    when the driver is removed, at least until the deconfig stage has
    completed.
    
    Replace callers of ipa_clock_get() in ipa_probe() and ipa_exit(),
    calling pm_runtime_get_sync() instead.  Replace the corresponding
    callers of ipa_clock_put(), calling pm_runtime_put() instead.
    
    The only error we expect when getting power would occur when the
    system is suspended.  The ->probe and ->remove driver callbacks
    won't be called when suspended, so issue a WARN() call if an error
    is seen getting power.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b8e36e13ea5e464414b3e6465045cf0689500448
Author: Alex Elder <elder@linaro.org>
Date:   Thu Aug 19 16:12:28 2021 -0500

    net: ipa: fix TX queue race
    
    Jakub Kicinski pointed out a race condition in ipa_start_xmit() in a
    recently-accepted series of patches:
      https://lore.kernel.org/netdev/20210812195035.2816276-1-elder@linaro.org/
    We are stopping the modem TX queue in that function if the power
    state is not active.  We restart the TX queue again once hardware
    resume is complete.
    
      TX path                       Power Management
      -------                       ----------------
      pm_runtime_get(); no power    Start resume
      Stop TX queue                      ...
      pm_runtime_put()              Resume complete
      return NETDEV_TX_BUSY         Start TX queue
    
      pm_runtime_get()
      Power present, transmit
      pm_runtime_put()              (auto-suspend)
    
    The issue is that the power management (resume) activity and the
    network transmit activity can occur concurrently, and there's a
    chance the queue will be stopped *after* it has been started again.
    
      TX path                       Power Management
      -------                       ----------------
                                    Resume underway
      pm_runtime_get(); no power         ...
                                    Resume complete
                                    Start TX queue
      Stop TX queue       <-- No more transmits after this
      pm_runtime_put()
      return NETDEV_TX_BUSY
    
    We address this using a STARTED flag to indicate when the TX queue
    has been started from the resume path, and a spinlock to make the
    flag and queue updates happen atomically.
    
      TX path                       Power Management
      -------                       ----------------
                                    Resume underway
      pm_runtime_get(); no power    Resume complete
                                    start TX queue     \
      If STARTED flag is *not* set:                     > atomic
          Stop TX queue             set STARTED flag   /
      pm_runtime_put()
      return NETDEV_TX_BUSY
    
    A second flag is used to address a different race that involves
    another path requesting power.
    
      TX path            Other path              Power Management
      -------            ----------              ----------------
                         pm_runtime_get_sync()   Resume
                                                 Start TX queue   \ atomic
                                                 Set STARTED flag /
                         (do its thing)
                         pm_runtime_put()
                                                 (auto-suspend)
      pm_runtime_get()                           Mark delayed resume
      STARTED *is* set, so
        do *not* stop TX queue  <-- Queue should be stopped here
      pm_runtime_put()
      return NETDEV_TX_BUSY                      Suspend done, resume
                                                 Resume complete
      pm_runtime_get()
      Stop TX queue
        (STARTED is *not* set)                   Start TX queue   \ atomic
      pm_runtime_put()                           Set STARTED flag /
      return NETDEV_TX_BUSY
    
    So a STOPPED flag is set in the transmit path when it has stopped
    the TX queue, and this pair of operations is also protected by the
    spinlock.  The resume path only restarts the TX queue if the STOPPED
    flag is set.  This case isn't a major problem, but it avoids the
    "non-trivial amount of useless work" done by the networking stack
    when NETDEV_TX_BUSY is returned.
    
    Fixes: 6b51f802d652b ("net: ipa: ensure hardware has power in ipa_start_xmit()")
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5f4ab7e25fbb57a6e2e927ba5d09675b332c833e
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Thu Aug 12 20:16:52 2021 +0300

    usb: dwc3: gadget: Avoid runtime resume if disabling pullup
    
    [ Upstream commit cb10f68ad8150f243964b19391711aaac5e8ff42 ]
    
    If the device is already in the runtime suspended state, any call to
    the pullup routine will issue a runtime resume on the DWC3 core
    device.  If the USB gadget is disabling the pullup, then avoid having
    to issue a runtime resume, as DWC3 gadget has already been
    halted/stopped.
    
    This fixes an issue where the following condition occurs:
    
    usb_gadget_remove_driver()
    -->usb_gadget_disconnect()
     -->dwc3_gadget_pullup(0)
      -->pm_runtime_get_sync() -> ret = 0
      -->pm_runtime_put() [async]
    -->usb_gadget_udc_stop()
     -->dwc3_gadget_stop()
      -->dwc->gadget_driver = NULL
    ...
    
    dwc3_suspend_common()
    -->dwc3_gadget_suspend()
     -->DWC3 halt/stop routine skipped, driver_data == NULL
    
    This leads to a situation where the DWC3 gadget is not properly
    stopped, as the runtime resume would have re-enabled EP0 and event
    interrupts, and since we avoided the DWC3 gadget suspend, these
    resources were never disabled.
    
    Fixes: 77adb8bdf422 ("usb: dwc3: gadget: Allow runtime suspend if UDC unbinded")
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/1628058245-30692-1-git-send-email-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55285e21f04517939480966164a33898c34b2af2
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Aug 9 16:31:46 2021 +0300

    fbdev/efifb: Release PCI device's runtime PM ref during FB destroy
    
    Atm the EFI FB platform driver gets a runtime PM reference for the
    associated GFX PCI device during probing the EFI FB platform device and
    releases it only when the platform device gets unbound.
    
    When fbcon switches to the FB provided by the PCI device's driver (for
    instance i915/drmfb), the EFI FB will get only unregistered without the
    EFI FB platform device getting unbound, keeping the runtime PM reference
    acquired during the platform device probing. This reference will prevent
    the PCI driver from runtime suspending the device.
    
    Fix this by releasing the RPM reference from the EFI FB's destroy hook,
    called when the FB gets unregistered.
    
    While at it assert that pm_runtime_get_sync() didn't fail.
    
    v2:
    - Move pm_runtime_get_sync() before register_framebuffer() to avoid its
      race wrt. efifb_destroy()->pm_runtime_put(). (Daniel)
    - Assert that pm_runtime_get_sync() didn't fail.
    - Clarify commit message wrt. platform/PCI device/driver and driver
      removal vs. device unbinding.
    
    Fixes: a6c0fd3d5a8b ("efifb: Ensure graphics device for efifb stays at PCI D0")
    Cc: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch> (v1)
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Acked-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210809133146.2478382-1-imre.deak@intel.com

commit 9c8300b1608748669b4b5b67e3fea71d07ca35af
Merge: 775dea4deec6 fdc07ca0724d
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Aug 12 22:31:57 2021 +0200

    Merge tag 'omap-for-v5.15/ti-sysc-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into arm/drivers
    
    Driver changes for ti-sysc for v5.15
    
    Few ti-sysc changes to handle quirk for McASP SIDLE mode, correct
    documentation for sysc_ioremap(), and start using
    pm_runtime_resume_and_get().
    
    * tag 'omap-for-v5.15/ti-sysc-signed' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      bus: ti-sysc: Add quirk for OMAP4 McASP to disable SIDLE mode
      bus: ti-sysc: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
      bus: ti-sysc: Correct misdocumentation of 'sysc_ioremap()'
      bus: ti-sysc: Fix gpt12 system timer issue with reserved status
    
    Link: https://lore.kernel.org/r/pull-1628153040-834155@atomide.com-2
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit fadfc2b17a1d9089d1da1b818f4b16a245b9ed1f
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Tue Aug 3 23:24:05 2021 -0700

    usb: dwc3: gadget: Avoid runtime resume if disabling pullup
    
    commit cb10f68ad8150f243964b19391711aaac5e8ff42 upstream.
    
    If the device is already in the runtime suspended state, any call to
    the pullup routine will issue a runtime resume on the DWC3 core
    device.  If the USB gadget is disabling the pullup, then avoid having
    to issue a runtime resume, as DWC3 gadget has already been
    halted/stopped.
    
    This fixes an issue where the following condition occurs:
    
    usb_gadget_remove_driver()
    -->usb_gadget_disconnect()
     -->dwc3_gadget_pullup(0)
      -->pm_runtime_get_sync() -> ret = 0
      -->pm_runtime_put() [async]
    -->usb_gadget_udc_stop()
     -->dwc3_gadget_stop()
      -->dwc->gadget_driver = NULL
    ...
    
    dwc3_suspend_common()
    -->dwc3_gadget_suspend()
     -->DWC3 halt/stop routine skipped, driver_data == NULL
    
    This leads to a situation where the DWC3 gadget is not properly
    stopped, as the runtime resume would have re-enabled EP0 and event
    interrupts, and since we avoided the DWC3 gadget suspend, these
    resources were never disabled.
    
    Fixes: 77adb8bdf422 ("usb: dwc3: gadget: Allow runtime suspend if UDC unbinded")
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/1628058245-30692-1-git-send-email-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64df529b50d0f878801d4494f1abc23c505d1495
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Jun 7 14:46:39 2021 +0800

    dmaengine: stm32-dmamux: Fix PM usage counter unbalance in stm32 dmamux ops
    
    [ Upstream commit baa16371c9525f24d508508e4d296c031e1de29c ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 4f3ceca254e0f ("dmaengine: stm32-dmamux: Add PM Runtime support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20210607064640.121394-3-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 748fb43871950cb7bd43e6fbb0f6c3607eb1657b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Jun 7 14:46:38 2021 +0800

    dmaengine: stm32-dma: Fix PM usage counter imbalance in stm32 dma ops
    
    [ Upstream commit d54db74ad6e0dea8c253fb68c689b836657ab914 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 48bc73ba14bcd ("dmaengine: stm32-dma: Add PM Runtime support")
    Fixes: 05f8740a0e6fc ("dmaengine: stm32-dma: add suspend/resume power management support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20210607064640.121394-2-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98c83d72614e47ed67d6b42dc4884fcf3a5be627
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Tue Aug 3 23:24:05 2021 -0700

    usb: dwc3: gadget: Avoid runtime resume if disabling pullup
    
    commit cb10f68ad8150f243964b19391711aaac5e8ff42 upstream.
    
    If the device is already in the runtime suspended state, any call to
    the pullup routine will issue a runtime resume on the DWC3 core
    device.  If the USB gadget is disabling the pullup, then avoid having
    to issue a runtime resume, as DWC3 gadget has already been
    halted/stopped.
    
    This fixes an issue where the following condition occurs:
    
    usb_gadget_remove_driver()
    -->usb_gadget_disconnect()
     -->dwc3_gadget_pullup(0)
      -->pm_runtime_get_sync() -> ret = 0
      -->pm_runtime_put() [async]
    -->usb_gadget_udc_stop()
     -->dwc3_gadget_stop()
      -->dwc->gadget_driver = NULL
    ...
    
    dwc3_suspend_common()
    -->dwc3_gadget_suspend()
     -->DWC3 halt/stop routine skipped, driver_data == NULL
    
    This leads to a situation where the DWC3 gadget is not properly
    stopped, as the runtime resume would have re-enabled EP0 and event
    interrupts, and since we avoided the DWC3 gadget suspend, these
    resources were never disabled.
    
    Fixes: 77adb8bdf422 ("usb: dwc3: gadget: Allow runtime suspend if UDC unbinded")
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/1628058245-30692-1-git-send-email-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 281514da66a4ce121bd071240ce7c5aa4e9f6bdf
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Jun 7 14:46:39 2021 +0800

    dmaengine: stm32-dmamux: Fix PM usage counter unbalance in stm32 dmamux ops
    
    [ Upstream commit baa16371c9525f24d508508e4d296c031e1de29c ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 4f3ceca254e0f ("dmaengine: stm32-dmamux: Add PM Runtime support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20210607064640.121394-3-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bbce3c99f6226b2aafe21ce29b3cb186ae9ade29
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Jun 7 14:46:38 2021 +0800

    dmaengine: stm32-dma: Fix PM usage counter imbalance in stm32 dma ops
    
    [ Upstream commit d54db74ad6e0dea8c253fb68c689b836657ab914 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 48bc73ba14bcd ("dmaengine: stm32-dma: Add PM Runtime support")
    Fixes: 05f8740a0e6fc ("dmaengine: stm32-dma: add suspend/resume power management support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20210607064640.121394-2-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6899192f648d4a974efc1a1e081a84d310bfe3d5
Merge: 6f45933dfed0 0d08026ac609
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Aug 11 13:31:56 2021 +0100

    Merge branch 'ipa-runtime-pm'
    
    Alex Elder says:
    
    ====================
    net: ipa: use runtime PM reference counting
    
    This series does further rework of the IPA clock code so that we
    rely on some of the core runtime power management code (including
    its referencing counting) instead.
    
    The first patch makes ipa_clock_get() act like pm_runtime_get_sync().
    
    The second patch makes system suspend occur regardless of the
    current reference count value, which is again more like how the
    runtime PM core code behaves.
    
    The third patch creates functions to encapsulate all hardware
    suspend and resume activity.  The fourth uses those functions as
    the ->runtime_suspend and ->runtime_resume power callbacks.  With
    that in place, ipa_clock_get() and ipa_clock_put() are changed to
    use runtime PM get and put functions when needed.
    
    The fifth patch eliminates an extra clock reference previously used
    to control system suspend.  The sixth eliminates the "IPA clock"
    reference count and mutex.
    
    The final patch replaces the one call to ipa_clock_get_additional()
    with a call to pm_runtime_get_if_active(), making the former
    unnecessary.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 63de79f031dedeb64fb1a5fc7f07f5f51fcbf7a0
Author: Alex Elder <elder@linaro.org>
Date:   Tue Aug 10 14:27:01 2021 -0500

    net: ipa: use runtime PM core
    
    Use the runtime power management core to cause hardware suspend and
    resume to occur.  Enable it in ipa_clock_init() (without autosuspend),
    and disable it in ipa_clock_exit().
    
    Use ipa_runtime_suspend() as the ->runtime_suspend power operation,
    and arrange for it to be called by having ipa_clock_get() call
    pm_runtime_get_sync() when the first clock reference is taken.
    Similarly, use ipa_runtime_resume() as the ->runtime_resume power
    operation, and pm_runtime_put() when the last IPA clock reference
    is dropped.
    
    Introduce ipa_runtime_idle() as the ->runtime_idle power operation,
    and have it return a non-zero value; this way suspend will never
    occur except when forced.
    
    Use pm_runtime_force_suspend() and pm_runtime_force_resume() as the
    system suspend and resume callbacks, and remove ipa_suspend() and
    ipa_resume().
    
    Store a pointer to the device structure passed to ipa_clock_init(),
    so it can be used by ipa_clock_exit() to disable runtime power
    management.
    
    For now we preserve IPA clock reference counting.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a19effb6dbe5bd1be77a6d68eba04dba8993ffeb
Author: Quanyang Wang <quanyang.wang@windriver.com>
Date:   Wed Mar 10 12:59:45 2021 +0800

    drm: xlnx: zynqmp_dpsub: Call pm_runtime_get_sync before setting pixel clock
    
    The Runtime PM subsystem will force the device "fd4a0000.zynqmp-display"
    to enter suspend state while booting if the following conditions are met:
    - the usage counter is zero (pm_runtime_get_sync hasn't been called yet)
    - no 'active' children (no zynqmp-dp-snd-xx node under dpsub node)
    - no other device in the same power domain (dpdma node has no
                    "power-domains = <&zynqmp_firmware PD_DP>" property)
    
    So there is a scenario as below:
    1) DP device enters suspend state   <- call zynqmp_gpd_power_off
    2) zynqmp_disp_crtc_setup_clock     <- configurate register VPLL_FRAC_CFG
    3) pm_runtime_get_sync              <- call zynqmp_gpd_power_on and clear previous
                                           VPLL_FRAC_CFG configuration
    4) clk_prepare_enable(disp->pclk)   <- enable failed since VPLL_FRAC_CFG
                                           configuration is corrupted
    
    From above, we can see that pm_runtime_get_sync may clear register
    VPLL_FRAC_CFG configuration and result the failure of clk enabling.
    Putting pm_runtime_get_sync at the very beginning of the function
    zynqmp_disp_crtc_atomic_enable can resolve this issue.
    
    Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>

commit 1dd0d7fe4b7a50f3a9580e994060e8a8a1c3263e
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Jul 27 13:23:39 2021 +0300

    crypto: omap-sham - drop pm_runtime_irqsafe() usage
    
    Commit b0a3d8986a76 ("crypto: omap-sham - Use pm_runtime_irq_safe()") added
    the use of pm_runtime_irq_safe() as pm_runtime_get_sync() was called
    from a tasklet.
    
    We now use the crypto engine queue instead of a custom queue since
    commit 33c3d434d91 ("crypto: omap-sham - convert to use crypto engine").
    
    We want to drop the use of pm_runtime_irq_safe() in general as it takes a
    permanent usage count on the parent device causing issues for power
    management.
    
    Based on testing with CONFIG_DEBUG_ATOMIC_SLEEP=y, modprobe omap-sham,
    followed by modprobe tcrypt sec=1 mode=423, I have not been able to
    reproduce the scheduling while atomic issue seen earlier with current
    kernels and we can just drop the call to pm_runtime_irq_safe().
    
    Cc: Lokesh Vutla <lokeshvutla@ti.com>
    Cc: Tero Kristo <kristo@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 1e29cd9983eba1b596bc07f94d81d728007f8a25
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 8 15:24:02 2021 +0800

    PCI: rcar: Fix runtime PM imbalance in rcar_pcie_ep_probe()
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Link: https://lore.kernel.org/r/20210408072402.15069-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>

commit cb10f68ad8150f243964b19391711aaac5e8ff42
Author: Wesley Cheng <wcheng@codeaurora.org>
Date:   Tue Aug 3 23:24:05 2021 -0700

    usb: dwc3: gadget: Avoid runtime resume if disabling pullup
    
    If the device is already in the runtime suspended state, any call to
    the pullup routine will issue a runtime resume on the DWC3 core
    device.  If the USB gadget is disabling the pullup, then avoid having
    to issue a runtime resume, as DWC3 gadget has already been
    halted/stopped.
    
    This fixes an issue where the following condition occurs:
    
    usb_gadget_remove_driver()
    -->usb_gadget_disconnect()
     -->dwc3_gadget_pullup(0)
      -->pm_runtime_get_sync() -> ret = 0
      -->pm_runtime_put() [async]
    -->usb_gadget_udc_stop()
     -->dwc3_gadget_stop()
      -->dwc->gadget_driver = NULL
    ...
    
    dwc3_suspend_common()
    -->dwc3_gadget_suspend()
     -->DWC3 halt/stop routine skipped, driver_data == NULL
    
    This leads to a situation where the DWC3 gadget is not properly
    stopped, as the runtime resume would have re-enabled EP0 and event
    interrupts, and since we avoided the DWC3 gadget suspend, these
    resources were never disabled.
    
    Fixes: 77adb8bdf422 ("usb: dwc3: gadget: Allow runtime suspend if UDC unbinded")
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Wesley Cheng <wcheng@codeaurora.org>
    Link: https://lore.kernel.org/r/1628058245-30692-1-git-send-email-wcheng@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 059e969c2a7d9efb463c0d8c574f1b3f1e010bed
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Jun 7 14:46:40 2021 +0800

    dmaengine: tegra210-adma: Using pm_runtime_resume_and_get to replace open coding
    
    use pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. this change is just to simplify the code,
    there is no actual functional change.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20210607064640.121394-4-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit baa16371c9525f24d508508e4d296c031e1de29c
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Jun 7 14:46:39 2021 +0800

    dmaengine: stm32-dmamux: Fix PM usage counter unbalance in stm32 dmamux ops
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 4f3ceca254e0f ("dmaengine: stm32-dmamux: Add PM Runtime support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20210607064640.121394-3-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit d54db74ad6e0dea8c253fb68c689b836657ab914
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Jun 7 14:46:38 2021 +0800

    dmaengine: stm32-dma: Fix PM usage counter imbalance in stm32 dma ops
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 48bc73ba14bcd ("dmaengine: stm32-dma: Add PM Runtime support")
    Fixes: 05f8740a0e6fc ("dmaengine: stm32-dma: add suspend/resume power management support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20210607064640.121394-2-zhangqilong3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 2f02ffdd6f6d2bd3f0974387348522bae0c22a2f
Author: Srinivas Neeli <srinivas.neeli@xilinx.com>
Date:   Fri Apr 9 19:38:05 2021 +0530

    gpio: zynq: Check return value of pm_runtime_get_sync
    
    [ Upstream commit a51b2fb94b04ab71e53a71b9fad03fa826941254 ]
    
    Return value of "pm_runtime_get_sync" API was neither captured nor checked.
    Fixed it by capturing the return value and then checking for any warning.
    
    Addresses-Coverity: "check_return"
    Signed-off-by: Srinivas Neeli <srinivas.neeli@xilinx.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88097381cb3bf28617751b8898857fbbe6eef074
Author: Srinivas Neeli <srinivas.neeli@xilinx.com>
Date:   Fri Apr 9 19:38:05 2021 +0530

    gpio: zynq: Check return value of pm_runtime_get_sync
    
    [ Upstream commit a51b2fb94b04ab71e53a71b9fad03fa826941254 ]
    
    Return value of "pm_runtime_get_sync" API was neither captured nor checked.
    Fixed it by capturing the return value and then checking for any warning.
    
    Addresses-Coverity: "check_return"
    Signed-off-by: Srinivas Neeli <srinivas.neeli@xilinx.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7587d3b26cac10c9a13358ed4d2fcaa4d534aeb
Author: Srinivas Neeli <srinivas.neeli@xilinx.com>
Date:   Fri Apr 9 19:38:05 2021 +0530

    gpio: zynq: Check return value of pm_runtime_get_sync
    
    [ Upstream commit a51b2fb94b04ab71e53a71b9fad03fa826941254 ]
    
    Return value of "pm_runtime_get_sync" API was neither captured nor checked.
    Fixed it by capturing the return value and then checking for any warning.
    
    Addresses-Coverity: "check_return"
    Signed-off-by: Srinivas Neeli <srinivas.neeli@xilinx.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7a13cbc42793ae74a2dff3fd7f543425830258f
Author: Srinivas Neeli <srinivas.neeli@xilinx.com>
Date:   Fri Apr 9 19:38:05 2021 +0530

    gpio: zynq: Check return value of pm_runtime_get_sync
    
    [ Upstream commit a51b2fb94b04ab71e53a71b9fad03fa826941254 ]
    
    Return value of "pm_runtime_get_sync" API was neither captured nor checked.
    Fixed it by capturing the return value and then checking for any warning.
    
    Addresses-Coverity: "check_return"
    Signed-off-by: Srinivas Neeli <srinivas.neeli@xilinx.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c3a170279bf2cd870d30a97344e91db5dccf1d2
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:38:11 2021 -0400

    ALSA: ac97: fix PM reference leak in ac97_bus_remove()
    
    [ Upstream commit a38e93302ee25b2ca6f4ee76c6c974cf3637985e ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093811.612302-1-yuyufen@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8ba40611be3dd2acda9cc4dac011f2a1d67bc7e
Author: Zou Wei <zou_wei@huawei.com>
Date:   Wed May 12 11:57:17 2021 +0800

    pwm: img: Fix PM reference leak in img_pwm_enable()
    
    [ Upstream commit fde25294dfd8e36e4e30b693c27a86232864002a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e1b6d96e95fb979e0a046f299d41ee3c9ed7f8c
Author: Srinivas Neeli <srinivas.neeli@xilinx.com>
Date:   Fri Apr 9 19:38:05 2021 +0530

    gpio: zynq: Check return value of pm_runtime_get_sync
    
    [ Upstream commit a51b2fb94b04ab71e53a71b9fad03fa826941254 ]
    
    Return value of "pm_runtime_get_sync" API was neither captured nor checked.
    Fixed it by capturing the return value and then checking for any warning.
    
    Addresses-Coverity: "check_return"
    Signed-off-by: Srinivas Neeli <srinivas.neeli@xilinx.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3761ae0d0e549f2acdaf11f49df4ed06d256b20f
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Thu Jun 10 10:54:29 2021 +0800

    iommu/arm-smmu: Fix arm_smmu_device refcount leak when arm_smmu_rpm_get fails
    
    [ Upstream commit 1adf30f198c26539a62d761e45af72cde570413d ]
    
    arm_smmu_rpm_get() invokes pm_runtime_get_sync(), which increases the
    refcount of the "smmu" even though the return value is less than 0.
    
    The reference counting issue happens in some error handling paths of
    arm_smmu_rpm_get() in its caller functions. When arm_smmu_rpm_get()
    fails, the caller functions forget to decrease the refcount of "smmu"
    increased by arm_smmu_rpm_get(), causing a refcount leak.
    
    Fix this issue by calling pm_runtime_resume_and_get() instead of
    pm_runtime_get_sync() in arm_smmu_rpm_get(), which can keep the refcount
    balanced in case of failure.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Link: https://lore.kernel.org/r/1623293672-17954-1-git-send-email-xiyuyang19@fudan.edu.cn
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba89ba738a820d487cca2e4e0c268dcb0d113eb9
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:35:21 2021 -0400

    ASoC: img: Fix PM reference leak in img_i2s_in_probe()
    
    [ Upstream commit 81aad47278539f02de808bcc8251fed0ad3d6f55 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093521.612176-1-yuyufen@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c543a9197c732c9aba85c6fc4022dd8af9e03e7
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:38:11 2021 -0400

    ALSA: ac97: fix PM reference leak in ac97_bus_remove()
    
    [ Upstream commit a38e93302ee25b2ca6f4ee76c6c974cf3637985e ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093811.612302-1-yuyufen@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d82361abd03c37f681b1ceac17d9f1c19255ff7
Author: Zou Wei <zou_wei@huawei.com>
Date:   Wed May 12 11:57:17 2021 +0800

    pwm: img: Fix PM reference leak in img_pwm_enable()
    
    [ Upstream commit fde25294dfd8e36e4e30b693c27a86232864002a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d2b0818daa421b1619cf3bf5f2b2a6788cebcf2
Author: Srinivas Neeli <srinivas.neeli@xilinx.com>
Date:   Fri Apr 9 19:38:05 2021 +0530

    gpio: zynq: Check return value of pm_runtime_get_sync
    
    [ Upstream commit a51b2fb94b04ab71e53a71b9fad03fa826941254 ]
    
    Return value of "pm_runtime_get_sync" API was neither captured nor checked.
    Fixed it by capturing the return value and then checking for any warning.
    
    Addresses-Coverity: "check_return"
    Signed-off-by: Srinivas Neeli <srinivas.neeli@xilinx.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4007596fbdabc29f858dc2e1990858a146b60b2
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Thu Jun 10 10:54:29 2021 +0800

    iommu/arm-smmu: Fix arm_smmu_device refcount leak when arm_smmu_rpm_get fails
    
    [ Upstream commit 1adf30f198c26539a62d761e45af72cde570413d ]
    
    arm_smmu_rpm_get() invokes pm_runtime_get_sync(), which increases the
    refcount of the "smmu" even though the return value is less than 0.
    
    The reference counting issue happens in some error handling paths of
    arm_smmu_rpm_get() in its caller functions. When arm_smmu_rpm_get()
    fails, the caller functions forget to decrease the refcount of "smmu"
    increased by arm_smmu_rpm_get(), causing a refcount leak.
    
    Fix this issue by calling pm_runtime_resume_and_get() instead of
    pm_runtime_get_sync() in arm_smmu_rpm_get(), which can keep the refcount
    balanced in case of failure.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Link: https://lore.kernel.org/r/1623293672-17954-1-git-send-email-xiyuyang19@fudan.edu.cn
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c67c2e20366ec4c7a31259a8341a1896c217218
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:35:21 2021 -0400

    ASoC: img: Fix PM reference leak in img_i2s_in_probe()
    
    [ Upstream commit 81aad47278539f02de808bcc8251fed0ad3d6f55 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093521.612176-1-yuyufen@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75452cc776683bda53380ade8a2c42371e136ed0
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:38:11 2021 -0400

    ALSA: ac97: fix PM reference leak in ac97_bus_remove()
    
    [ Upstream commit a38e93302ee25b2ca6f4ee76c6c974cf3637985e ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093811.612302-1-yuyufen@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f53ef5128302e2677f6820f7b4e8a5a439d7b78
Author: Zou Wei <zou_wei@huawei.com>
Date:   Wed May 12 11:57:17 2021 +0800

    pwm: img: Fix PM reference leak in img_pwm_enable()
    
    [ Upstream commit fde25294dfd8e36e4e30b693c27a86232864002a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d2b944b5683ad9abd76211a172b26952d2a4b04
Author: Srinivas Neeli <srinivas.neeli@xilinx.com>
Date:   Fri Apr 9 19:38:05 2021 +0530

    gpio: zynq: Check return value of pm_runtime_get_sync
    
    [ Upstream commit a51b2fb94b04ab71e53a71b9fad03fa826941254 ]
    
    Return value of "pm_runtime_get_sync" API was neither captured nor checked.
    Fixed it by capturing the return value and then checking for any warning.
    
    Addresses-Coverity: "check_return"
    Signed-off-by: Srinivas Neeli <srinivas.neeli@xilinx.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fbf4daa6f4105e01fbd3868006f65c163365c1e3
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Thu Jun 10 10:54:29 2021 +0800

    iommu/arm-smmu: Fix arm_smmu_device refcount leak when arm_smmu_rpm_get fails
    
    [ Upstream commit 1adf30f198c26539a62d761e45af72cde570413d ]
    
    arm_smmu_rpm_get() invokes pm_runtime_get_sync(), which increases the
    refcount of the "smmu" even though the return value is less than 0.
    
    The reference counting issue happens in some error handling paths of
    arm_smmu_rpm_get() in its caller functions. When arm_smmu_rpm_get()
    fails, the caller functions forget to decrease the refcount of "smmu"
    increased by arm_smmu_rpm_get(), causing a refcount leak.
    
    Fix this issue by calling pm_runtime_resume_and_get() instead of
    pm_runtime_get_sync() in arm_smmu_rpm_get(), which can keep the refcount
    balanced in case of failure.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Link: https://lore.kernel.org/r/1623293672-17954-1-git-send-email-xiyuyang19@fudan.edu.cn
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67fc8e84e0aeec7bb8207cd5a01651b1643773b4
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:35:21 2021 -0400

    ASoC: img: Fix PM reference leak in img_i2s_in_probe()
    
    [ Upstream commit 81aad47278539f02de808bcc8251fed0ad3d6f55 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093521.612176-1-yuyufen@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b81f1eef497994591dea1b45361e03a66d1c85dc
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:38:11 2021 -0400

    ALSA: ac97: fix PM reference leak in ac97_bus_remove()
    
    [ Upstream commit a38e93302ee25b2ca6f4ee76c6c974cf3637985e ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093811.612302-1-yuyufen@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1d3f7407f78fa7d6d801e236dd26f73bf03e0a4
Author: Zou Wei <zou_wei@huawei.com>
Date:   Wed May 12 11:57:17 2021 +0800

    pwm: img: Fix PM reference leak in img_pwm_enable()
    
    [ Upstream commit fde25294dfd8e36e4e30b693c27a86232864002a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c42ec0450a55f74871f14667cb356ed4e45a8d4e
Author: Srinivas Neeli <srinivas.neeli@xilinx.com>
Date:   Fri Apr 9 19:38:05 2021 +0530

    gpio: zynq: Check return value of pm_runtime_get_sync
    
    [ Upstream commit a51b2fb94b04ab71e53a71b9fad03fa826941254 ]
    
    Return value of "pm_runtime_get_sync" API was neither captured nor checked.
    Fixed it by capturing the return value and then checking for any warning.
    
    Addresses-Coverity: "check_return"
    Signed-off-by: Srinivas Neeli <srinivas.neeli@xilinx.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe92c058199067ae90cf2a901ddf3c271893557a
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Thu Jun 10 10:54:29 2021 +0800

    iommu/arm-smmu: Fix arm_smmu_device refcount leak when arm_smmu_rpm_get fails
    
    [ Upstream commit 1adf30f198c26539a62d761e45af72cde570413d ]
    
    arm_smmu_rpm_get() invokes pm_runtime_get_sync(), which increases the
    refcount of the "smmu" even though the return value is less than 0.
    
    The reference counting issue happens in some error handling paths of
    arm_smmu_rpm_get() in its caller functions. When arm_smmu_rpm_get()
    fails, the caller functions forget to decrease the refcount of "smmu"
    increased by arm_smmu_rpm_get(), causing a refcount leak.
    
    Fix this issue by calling pm_runtime_resume_and_get() instead of
    pm_runtime_get_sync() in arm_smmu_rpm_get(), which can keep the refcount
    balanced in case of failure.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Link: https://lore.kernel.org/r/1623293672-17954-1-git-send-email-xiyuyang19@fudan.edu.cn
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3a117833731606baaed25d39aaae70a4a501221
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:35:21 2021 -0400

    ASoC: img: Fix PM reference leak in img_i2s_in_probe()
    
    [ Upstream commit 81aad47278539f02de808bcc8251fed0ad3d6f55 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093521.612176-1-yuyufen@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a1115ad5fce313e90e1402176fe1fd1296e6aa9
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:38:11 2021 -0400

    ALSA: ac97: fix PM reference leak in ac97_bus_remove()
    
    [ Upstream commit a38e93302ee25b2ca6f4ee76c6c974cf3637985e ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093811.612302-1-yuyufen@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7be5e037e564bd2479d414fe1198dc3e8652d278
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:11 2021 +0200

    media: i2c: ccs-core: fix pm_runtime_get_sync() usage count
    
    commit da3a1858c3a37c09446e1470c48352897d59d11b upstream.
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    There is a bug at ccs_pm_get_init(): when this function returns
    an error, the stream is not started, and RPM usage_count
    should not be incremented. However, if the calls to
    v4l2_ctrl_handler_setup() return errors, it will be kept
    incremented.
    
    At ccs_suspend() the best is to replace it by the new
    pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter automatically,
    in the case of errors.
    
    Fixes: 96e3a6b92f23 ("media: smiapp: Avoid maintaining power state information")
    Cc: stable@vger.kernel.org
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d7221a987416e619af636e32fef946681cf1f02
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 31 21:56:22 2021 +0800

    drm: bridge: cdns-mhdp8546: Fix PM reference leak in
    
    [ Upstream commit f674555ee5444c8987dfea0922f1cf6bf0c12847 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210531135622.3348252-1-yukuai3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3831144772502d86d8c22b3f1390a19bb462c0e0
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 24 15:21:02 2021 +0800

    drm/bridge: cdns: Fix PM reference leak in cdns_dsi_transfer()
    
    [ Upstream commit 33f90f27e1c5ccd648d3e78a1c28be9ee8791cf1 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1621840862-106024-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38d70d239c7c9a51f0bde26608ac77ff0356d6df
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 24 15:20:54 2021 +0800

    drm/vc4: hdmi: Fix PM reference leak in vc4_hdmi_encoder_pre_crtc_co()
    
    [ Upstream commit 5e4322a8b266bc9f5ee7ea4895f661c01dbd7cb3 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/1621840854-105978-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e049b85f7dcc666921e7513bf22b70d9462e624d
Author: Wang Li <wangli74@huawei.com>
Date:   Sat Apr 10 03:48:41 2021 +0000

    drm/mediatek: Fix PM reference leak in mtk_crtc_ddp_hw_init()
    
    [ Upstream commit 69777e6ca396f0a7e1baff40fcad4a9d3d445b7a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6102f34e462285174b590c50a37443070dfda42e
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 15 15:33:38 2021 +0800

    clk: renesas: rcar-usb2-clock-sel: Fix error handling in .probe()
    
    [ Upstream commit a20a40a8bbc2cf4b29d7248ea31e974e9103dd7f ]
    
    The error handling paths after pm_runtime_get_sync() have no refcount
    decrement, which leads to refcount leak.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20210415073338.22287-1-dinghao.liu@zju.edu.cn
    [geert: Remove now unused variable priv]
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 577fc6be05598cc8475aa0c67a856d1ebadc03be
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:11 2021 +0200

    media: i2c: ccs-core: fix pm_runtime_get_sync() usage count
    
    commit da3a1858c3a37c09446e1470c48352897d59d11b upstream.
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    There is a bug at ccs_pm_get_init(): when this function returns
    an error, the stream is not started, and RPM usage_count
    should not be incremented. However, if the calls to
    v4l2_ctrl_handler_setup() return errors, it will be kept
    incremented.
    
    At ccs_suspend() the best is to replace it by the new
    pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter automatically,
    in the case of errors.
    
    Fixes: 96e3a6b92f23 ("media: smiapp: Avoid maintaining power state information")
    Cc: stable@vger.kernel.org
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d237ba13d2bf96b3bfd1491505a8134bd6e94368
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 31 21:56:22 2021 +0800

    drm: bridge: cdns-mhdp8546: Fix PM reference leak in
    
    [ Upstream commit f674555ee5444c8987dfea0922f1cf6bf0c12847 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210531135622.3348252-1-yukuai3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf27261cda0bb553e3d30976673d130db18dfa69
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 24 15:21:02 2021 +0800

    drm/bridge: cdns: Fix PM reference leak in cdns_dsi_transfer()
    
    [ Upstream commit 33f90f27e1c5ccd648d3e78a1c28be9ee8791cf1 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1621840862-106024-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95fc2f69c3b3d4df4436eeffd23ad18fb352b48a
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 24 15:20:54 2021 +0800

    drm/vc4: hdmi: Fix PM reference leak in vc4_hdmi_encoder_pre_crtc_co()
    
    [ Upstream commit 5e4322a8b266bc9f5ee7ea4895f661c01dbd7cb3 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/1621840854-105978-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64fd9a3067c59bddd2c7ed10fdbccd97e7bb8266
Author: Wang Li <wangli74@huawei.com>
Date:   Sat Apr 10 03:48:41 2021 +0000

    drm/mediatek: Fix PM reference leak in mtk_crtc_ddp_hw_init()
    
    [ Upstream commit 69777e6ca396f0a7e1baff40fcad4a9d3d445b7a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5d1c22b4aeb6d538b24773e55e8fc88c276008f
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 15 15:33:38 2021 +0800

    clk: renesas: rcar-usb2-clock-sel: Fix error handling in .probe()
    
    [ Upstream commit a20a40a8bbc2cf4b29d7248ea31e974e9103dd7f ]
    
    The error handling paths after pm_runtime_get_sync() have no refcount
    decrement, which leads to refcount leak.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20210415073338.22287-1-dinghao.liu@zju.edu.cn
    [geert: Remove now unused variable priv]
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e039a80a76bccef979137747b0da1bd734ee868
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 31 21:56:22 2021 +0800

    drm: bridge: cdns-mhdp8546: Fix PM reference leak in
    
    [ Upstream commit f674555ee5444c8987dfea0922f1cf6bf0c12847 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210531135622.3348252-1-yukuai3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0680344d713195e1dc67e597bca8bb97b1498a21
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 24 15:21:02 2021 +0800

    drm/bridge: cdns: Fix PM reference leak in cdns_dsi_transfer()
    
    [ Upstream commit 33f90f27e1c5ccd648d3e78a1c28be9ee8791cf1 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1621840862-106024-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f06ea024c176fe44ec7f5746bcddcfab07e21758
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 24 15:20:54 2021 +0800

    drm/vc4: hdmi: Fix PM reference leak in vc4_hdmi_encoder_pre_crtc_co()
    
    [ Upstream commit 5e4322a8b266bc9f5ee7ea4895f661c01dbd7cb3 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/1621840854-105978-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0dd36bcb67fdabc23a0f4fa79e543bffbf980c2
Author: Wang Li <wangli74@huawei.com>
Date:   Sat Apr 10 03:48:41 2021 +0000

    drm/mediatek: Fix PM reference leak in mtk_crtc_ddp_hw_init()
    
    [ Upstream commit 69777e6ca396f0a7e1baff40fcad4a9d3d445b7a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a74872106e7878e57008b06974cf0237d5be6024
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 15 15:33:38 2021 +0800

    clk: renesas: rcar-usb2-clock-sel: Fix error handling in .probe()
    
    [ Upstream commit a20a40a8bbc2cf4b29d7248ea31e974e9103dd7f ]
    
    The error handling paths after pm_runtime_get_sync() have no refcount
    decrement, which leads to refcount leak.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20210415073338.22287-1-dinghao.liu@zju.edu.cn
    [geert: Remove now unused variable priv]
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c84e0757d80b097d73397fd8278ba8d96be7bfb9
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 24 15:21:02 2021 +0800

    drm/bridge: cdns: Fix PM reference leak in cdns_dsi_transfer()
    
    [ Upstream commit 33f90f27e1c5ccd648d3e78a1c28be9ee8791cf1 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1621840862-106024-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a2d21e266c4657f84a630e17c936d28b8661245
Author: Wang Li <wangli74@huawei.com>
Date:   Sat Apr 10 03:48:41 2021 +0000

    drm/mediatek: Fix PM reference leak in mtk_crtc_ddp_hw_init()
    
    [ Upstream commit 69777e6ca396f0a7e1baff40fcad4a9d3d445b7a ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7c62923708bca62d5a4a5dfc6b2c330b985f75e
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Tue May 11 17:03:21 2021 +0200

    media: exynos4-is: remove a now unused integer
    
    commit 29dd19e3ac7b2a8671ebeac02859232ce0e34f58 upstream.
    
    The usage of pm_runtime_resume_and_get() removed the need of a
    temporary integer. So, drop it.
    
    Fixes: 59f96244af94 ("media: exynos4-is: fix pm_runtime_get_sync() usage count")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 334ea984ff363d5f376131827688c6246306e350
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Jun 1 22:51:18 2021 +0800

    crypto: omap-sham - Fix PM reference leak in omap sham ops
    
    [ Upstream commit ca323b2c61ec321eb9f2179a405b9c34cdb4f553 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 604c31039dae4 ("crypto: omap-sham - Check for return value from pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56e208fd789a09beeca8524ff389486fdee0320c
Author: Łukasz Stelmach <l.stelmach@samsung.com>
Date:   Wed May 5 20:29:14 2021 +0200

    hwrng: exynos - Fix runtime PM imbalance on error
    
    [ Upstream commit 0cdbabf8bb7a6147f5adf37dbc251e92a1bbc2c7 ]
    
    pm_runtime_resume_and_get() wraps around pm_runtime_get_sync() and
    decrements the runtime PM usage counter in case the latter function
    fails and keeps the counter balanced.
    
    Signed-off-by: Łukasz Stelmach <l.stelmach@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 946e1956adc41554f9dcf940d43296d341a248b8
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:18 2021 +0200

    media: exynos-gsc: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 59087b66ea6730c130c57d23bd9fd139b78c1ba5 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a bonus, as pm_runtime_get_sync() always return 0 on
    success, the logic can be simplified.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e320bd62f3434f13fcc2956133e68d7377b429a8
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:17 2021 +0200

    media: exynos4-is: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 59f96244af9403ddf4810ec5c0fbe8920857634e ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    On some places, this is ok, but on others the usage count
    ended being unbalanced on failures.
    
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a bonus, such function always return zero on success. So,
    some code can be simplified.
    
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8de265ab0659ae1c06cd15416a69dcba8f54967f
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:21 2021 +0200

    media: sti/bdisp: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit c44eac5b72e23c31eefc0e10a71d9650036b8341 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    The bdisp_start_streaming() doesn't take it into account, which
    would unbalance PM usage counter at bdisp_stop_streaming().
    
    The logic at bdisp_probe() is correct, but the best is to use
    the same call along the driver.
    
    So, replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c816ee302c4fd0adbb1252faccc917124de31148
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:10 2021 +0200

    media: sunxi: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 9c298f82d8392f799a0595f50076afa1d91e9092 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ac22a1256fb8c65d171dfd935b33091de2d6cde
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:10 2021 +0200

    media: s5p-jpeg: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 10343de268d10cf07b092b8b525e12ad558ead77 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a plus, pm_runtime_resume_and_get() doesn't return
    positive numbers, so the return code validation can
    be removed.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Andrzej Pietrasiewicz <andrzejtp2010@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74cdbfc4a6325950ef6d008f2d9785f70d500ec4
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:09 2021 +0200

    media: mtk-vcodec: fix PM runtime get logic
    
    [ Upstream commit 908711f542c17fe61e5d653da1beb8e5ab5c7b50 ]
    
    Currently, the driver just assumes that PM runtime logic
    succeded resuming the device.
    
    That may not be the case, as pm_runtime_get_sync()
    can fail (but keeping the usage count incremented).
    
    Replace the code to use pm_runtime_resume_and_get(),
    and letting it return the error code.
    
    This way, if mtk_vcodec_dec_pw_on() fails, the logic
    under fops_vcodec_open() will do the right thing and
    return an error, instead of just assuming that the
    device is ready to be used.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22d11e498877ccd8fac784061072291a5d6d6c09
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:07:41 2021 +0200

    media: sh_vou: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 6e8b1526db164c9d4b9dacfb9bc48e365d7c4860 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, check if the PM runtime error was caught at open time.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb29fa40a3a23ba688155331c9704cc3eb8173e3
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:05:27 2021 +0200

    media: am437x: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit c41e02493334985cca1a22efd5ca962ce3abb061 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, ensure that the driver will check if PM runtime
    resumed at vpfe_initialize_device().
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2982dfc00e6d226474ca93d2ac6a242663980c0b
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:04:23 2021 +0200

    media: s5p: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit fdc34e82c0f968ac4c157bd3d8c299ebc24c9c63 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, check if the PM runtime error was caught at
    s5p_cec_adap_enable().
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55eed167f79dc9a72b9ecb29dcca169f853c2633
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:57:16 2021 +0200

    media: mdk-mdp: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit d07bb9702cf5f5ccf3fb661e6cab54bbc33cd23f ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, fix the return contition of mtk_mdp_m2m_start_streaming(),
    as it doesn't make any sense to return 0 if the PM runtime failed
    to resume.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0a7065748d09d390f28e69f388ae863bb9f3c2e
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:54:25 2021 +0200

    media: marvel-ccic: fix some issues when getting pm_runtime
    
    [ Upstream commit e7c617cab7a522fba5b20f9033ee98565b6f3546 ]
    
    Calling pm_runtime_get_sync() is bad, since even when it
    returns an error, pm_runtime_put*() should be called.
    So, use instead pm_runtime_resume_and_get().
    
    While here, ensure that the error condition will be checked
    during clock enable an media open() calls.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59378a815637898dfcd85e58da448e1846eea4c0
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:13 2021 +0200

    media: i2c: imx334: fix the pm runtime get logic
    
    [ Upstream commit 62c90446868b439929cb04395f04a709a64ae04b ]
    
    The PM runtime get logic is currently broken, as it checks if
    ret is zero instead of checking if it is an error code,
    as reported by Dan Carpenter.
    
    While here, use the pm_runtime_resume_and_get() as added by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    added pm_runtime_resume_and_get() in order to automatically handle
    dev->power.usage_count decrement on errors. As a bonus, such function
    always return zero on success.
    
    It should also be noticed that a fail of pm_runtime_get_sync() would
    potentially result in a spurious runtime_suspend(), instead of
    using pm_runtime_put_noidle().
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Daniele Alessandrelli <daniele.alessandrelli@intel.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58bc5e46ba44ab35728a6838dd7addff99de7c32
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:11 2021 +0200

    staging: media: rkvdec: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit e90812c47b958407b54d05780dc483fdc1b57a93 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Ezequiel Garcia <ezequiel@collabora.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfc8ec0b96e41747a1fdb9bec330294eb143bf63
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Tue May 11 17:03:21 2021 +0200

    media: exynos4-is: remove a now unused integer
    
    commit 29dd19e3ac7b2a8671ebeac02859232ce0e34f58 upstream.
    
    The usage of pm_runtime_resume_and_get() removed the need of a
    temporary integer. So, drop it.
    
    Fixes: 59f96244af94 ("media: exynos4-is: fix pm_runtime_get_sync() usage count")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9031614e7374c66a15395085d8ece2d50deebe6e
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Jun 1 22:51:18 2021 +0800

    crypto: omap-sham - Fix PM reference leak in omap sham ops
    
    [ Upstream commit ca323b2c61ec321eb9f2179a405b9c34cdb4f553 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 604c31039dae4 ("crypto: omap-sham - Check for return value from pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62fe698338a627c9d581f39f92538ad69e9f66af
Author: Łukasz Stelmach <l.stelmach@samsung.com>
Date:   Wed May 5 20:29:14 2021 +0200

    hwrng: exynos - Fix runtime PM imbalance on error
    
    [ Upstream commit 0cdbabf8bb7a6147f5adf37dbc251e92a1bbc2c7 ]
    
    pm_runtime_resume_and_get() wraps around pm_runtime_get_sync() and
    decrements the runtime PM usage counter in case the latter function
    fails and keeps the counter balanced.
    
    Signed-off-by: Łukasz Stelmach <l.stelmach@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e6781baa1d5812e94102ff4adc6e9c35bcd8eee
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:18 2021 +0200

    media: exynos-gsc: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 59087b66ea6730c130c57d23bd9fd139b78c1ba5 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a bonus, as pm_runtime_get_sync() always return 0 on
    success, the logic can be simplified.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81e32ae4469d179a67af416f827449a57cdd4238
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:17 2021 +0200

    media: exynos4-is: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 59f96244af9403ddf4810ec5c0fbe8920857634e ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    On some places, this is ok, but on others the usage count
    ended being unbalanced on failures.
    
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a bonus, such function always return zero on success. So,
    some code can be simplified.
    
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7696936609c31a51582d6d18a110c8c926a3ae7
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:21 2021 +0200

    media: sti/bdisp: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit c44eac5b72e23c31eefc0e10a71d9650036b8341 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    The bdisp_start_streaming() doesn't take it into account, which
    would unbalance PM usage counter at bdisp_stop_streaming().
    
    The logic at bdisp_probe() is correct, but the best is to use
    the same call along the driver.
    
    So, replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6ac7e57823bd3c982c7133fc996fb6fbc05f4b2
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:10 2021 +0200

    media: sunxi: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 9c298f82d8392f799a0595f50076afa1d91e9092 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8065f31d32f6c5494dbd1e8862e30b698f5fad8b
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:10 2021 +0200

    media: s5p-jpeg: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 10343de268d10cf07b092b8b525e12ad558ead77 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a plus, pm_runtime_resume_and_get() doesn't return
    positive numbers, so the return code validation can
    be removed.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Andrzej Pietrasiewicz <andrzejtp2010@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04c04a97f4d6049b216625942fa7b66a36178471
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:09 2021 +0200

    media: mtk-vcodec: fix PM runtime get logic
    
    [ Upstream commit 908711f542c17fe61e5d653da1beb8e5ab5c7b50 ]
    
    Currently, the driver just assumes that PM runtime logic
    succeded resuming the device.
    
    That may not be the case, as pm_runtime_get_sync()
    can fail (but keeping the usage count incremented).
    
    Replace the code to use pm_runtime_resume_and_get(),
    and letting it return the error code.
    
    This way, if mtk_vcodec_dec_pw_on() fails, the logic
    under fops_vcodec_open() will do the right thing and
    return an error, instead of just assuming that the
    device is ready to be used.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae522a7a50f680502893473624780b161e0211ae
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:07:41 2021 +0200

    media: sh_vou: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 6e8b1526db164c9d4b9dacfb9bc48e365d7c4860 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, check if the PM runtime error was caught at open time.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8f4bc1f346ea73650476988a9cf0008667d1933
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:05:27 2021 +0200

    media: am437x: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit c41e02493334985cca1a22efd5ca962ce3abb061 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, ensure that the driver will check if PM runtime
    resumed at vpfe_initialize_device().
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8f72a869c81519d573d78db0e1aea5aee562f20
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:04:23 2021 +0200

    media: s5p: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit fdc34e82c0f968ac4c157bd3d8c299ebc24c9c63 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, check if the PM runtime error was caught at
    s5p_cec_adap_enable().
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58196b673a2a078842fb31c76a6245229dacca62
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:57:16 2021 +0200

    media: mdk-mdp: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit d07bb9702cf5f5ccf3fb661e6cab54bbc33cd23f ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, fix the return contition of mtk_mdp_m2m_start_streaming(),
    as it doesn't make any sense to return 0 if the PM runtime failed
    to resume.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94ed7a0090453f1dbec02f48b81d205caf847643
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:54:25 2021 +0200

    media: marvel-ccic: fix some issues when getting pm_runtime
    
    [ Upstream commit e7c617cab7a522fba5b20f9033ee98565b6f3546 ]
    
    Calling pm_runtime_get_sync() is bad, since even when it
    returns an error, pm_runtime_put*() should be called.
    So, use instead pm_runtime_resume_and_get().
    
    While here, ensure that the error condition will be checked
    during clock enable an media open() calls.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1fa677e23e9350d93b8bd6358b9e40e6ce62b275
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:13 2021 +0200

    media: i2c: imx334: fix the pm runtime get logic
    
    [ Upstream commit 62c90446868b439929cb04395f04a709a64ae04b ]
    
    The PM runtime get logic is currently broken, as it checks if
    ret is zero instead of checking if it is an error code,
    as reported by Dan Carpenter.
    
    While here, use the pm_runtime_resume_and_get() as added by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    added pm_runtime_resume_and_get() in order to automatically handle
    dev->power.usage_count decrement on errors. As a bonus, such function
    always return zero on success.
    
    It should also be noticed that a fail of pm_runtime_get_sync() would
    potentially result in a spurious runtime_suspend(), instead of
    using pm_runtime_put_noidle().
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Daniele Alessandrelli <daniele.alessandrelli@intel.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3ec8f7b82bd899988ab07863842b6fd8034c422
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:11 2021 +0200

    staging: media: rkvdec: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit e90812c47b958407b54d05780dc483fdc1b57a93 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Ezequiel Garcia <ezequiel@collabora.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b541b6c7432adb6cff21727515a7d94c037c30d
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Tue May 11 17:03:21 2021 +0200

    media: exynos4-is: remove a now unused integer
    
    commit 29dd19e3ac7b2a8671ebeac02859232ce0e34f58 upstream.
    
    The usage of pm_runtime_resume_and_get() removed the need of a
    temporary integer. So, drop it.
    
    Fixes: 59f96244af94 ("media: exynos4-is: fix pm_runtime_get_sync() usage count")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc50c403859f379ddeed86eefe4e7a5d6c1548f2
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Jun 1 22:51:18 2021 +0800

    crypto: omap-sham - Fix PM reference leak in omap sham ops
    
    [ Upstream commit ca323b2c61ec321eb9f2179a405b9c34cdb4f553 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 604c31039dae4 ("crypto: omap-sham - Check for return value from pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e8c9510b787123125707cdb37090d852f15241a
Author: Łukasz Stelmach <l.stelmach@samsung.com>
Date:   Wed May 5 20:29:14 2021 +0200

    hwrng: exynos - Fix runtime PM imbalance on error
    
    [ Upstream commit 0cdbabf8bb7a6147f5adf37dbc251e92a1bbc2c7 ]
    
    pm_runtime_resume_and_get() wraps around pm_runtime_get_sync() and
    decrements the runtime PM usage counter in case the latter function
    fails and keeps the counter balanced.
    
    Signed-off-by: Łukasz Stelmach <l.stelmach@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b980385a70ea3443a6a7a2bb7d5be0f315f155e3
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:18 2021 +0200

    media: exynos-gsc: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 59087b66ea6730c130c57d23bd9fd139b78c1ba5 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a bonus, as pm_runtime_get_sync() always return 0 on
    success, the logic can be simplified.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8b1889cd618a58bb57cf1ff7ace41d142520872
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:17 2021 +0200

    media: exynos4-is: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 59f96244af9403ddf4810ec5c0fbe8920857634e ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    On some places, this is ok, but on others the usage count
    ended being unbalanced on failures.
    
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a bonus, such function always return zero on success. So,
    some code can be simplified.
    
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29fd79b6280b38872df092dc029b11e71a281d6d
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:21 2021 +0200

    media: sti/bdisp: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit c44eac5b72e23c31eefc0e10a71d9650036b8341 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    The bdisp_start_streaming() doesn't take it into account, which
    would unbalance PM usage counter at bdisp_stop_streaming().
    
    The logic at bdisp_probe() is correct, but the best is to use
    the same call along the driver.
    
    So, replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abdc89771018a436ca68bd2a34de661eddf05e5a
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:10 2021 +0200

    media: sunxi: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 9c298f82d8392f799a0595f50076afa1d91e9092 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d627fc298cdadbeb380f72fff20629c700541522
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:10 2021 +0200

    media: s5p-jpeg: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 10343de268d10cf07b092b8b525e12ad558ead77 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a plus, pm_runtime_resume_and_get() doesn't return
    positive numbers, so the return code validation can
    be removed.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Andrzej Pietrasiewicz <andrzejtp2010@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c90c3fbdc960663a4367f12793924391f6a35fd
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:09 2021 +0200

    media: mtk-vcodec: fix PM runtime get logic
    
    [ Upstream commit 908711f542c17fe61e5d653da1beb8e5ab5c7b50 ]
    
    Currently, the driver just assumes that PM runtime logic
    succeded resuming the device.
    
    That may not be the case, as pm_runtime_get_sync()
    can fail (but keeping the usage count incremented).
    
    Replace the code to use pm_runtime_resume_and_get(),
    and letting it return the error code.
    
    This way, if mtk_vcodec_dec_pw_on() fails, the logic
    under fops_vcodec_open() will do the right thing and
    return an error, instead of just assuming that the
    device is ready to be used.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8318f7bc0e6560fd3eac35184a7d188be49bc864
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:07:41 2021 +0200

    media: sh_vou: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 6e8b1526db164c9d4b9dacfb9bc48e365d7c4860 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, check if the PM runtime error was caught at open time.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64e291d697a0093327d1c20071b3b4640275a4cc
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:05:27 2021 +0200

    media: am437x: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit c41e02493334985cca1a22efd5ca962ce3abb061 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, ensure that the driver will check if PM runtime
    resumed at vpfe_initialize_device().
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adf052c77963c01873493a050ba365c1efdc1ce8
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:04:23 2021 +0200

    media: s5p: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit fdc34e82c0f968ac4c157bd3d8c299ebc24c9c63 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, check if the PM runtime error was caught at
    s5p_cec_adap_enable().
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 437ca06c7899010f432e8d0d61c46e5aea33bc5b
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:57:16 2021 +0200

    media: mdk-mdp: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit d07bb9702cf5f5ccf3fb661e6cab54bbc33cd23f ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, fix the return contition of mtk_mdp_m2m_start_streaming(),
    as it doesn't make any sense to return 0 if the PM runtime failed
    to resume.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff7e4b94db72907cfecd8e01cfda419e634ae628
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:54:25 2021 +0200

    media: marvel-ccic: fix some issues when getting pm_runtime
    
    [ Upstream commit e7c617cab7a522fba5b20f9033ee98565b6f3546 ]
    
    Calling pm_runtime_get_sync() is bad, since even when it
    returns an error, pm_runtime_put*() should be called.
    So, use instead pm_runtime_resume_and_get().
    
    While here, ensure that the error condition will be checked
    during clock enable an media open() calls.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ccf0a291f7e157c15c77547161f8308f4440dd2a
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:11 2021 +0200

    staging: media: rkvdec: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit e90812c47b958407b54d05780dc483fdc1b57a93 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Ezequiel Garcia <ezequiel@collabora.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5d2f917a8f13ce79f5221159cb7b190ae2206fb
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Jun 1 22:51:18 2021 +0800

    crypto: omap-sham - Fix PM reference leak in omap sham ops
    
    [ Upstream commit ca323b2c61ec321eb9f2179a405b9c34cdb4f553 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 604c31039dae4 ("crypto: omap-sham - Check for return value from pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4c8a00d61fef36f598857d6db40b3855161a41e
Author: Łukasz Stelmach <l.stelmach@samsung.com>
Date:   Wed May 5 20:29:14 2021 +0200

    hwrng: exynos - Fix runtime PM imbalance on error
    
    [ Upstream commit 0cdbabf8bb7a6147f5adf37dbc251e92a1bbc2c7 ]
    
    pm_runtime_resume_and_get() wraps around pm_runtime_get_sync() and
    decrements the runtime PM usage counter in case the latter function
    fails and keeps the counter balanced.
    
    Signed-off-by: Łukasz Stelmach <l.stelmach@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b413d8654ed6d4b24ed78c6c8b1ab2692c8d301a
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:18 2021 +0200

    media: exynos-gsc: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 59087b66ea6730c130c57d23bd9fd139b78c1ba5 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a bonus, as pm_runtime_get_sync() always return 0 on
    success, the logic can be simplified.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fece55aeb6d2a7ed47e908b000b600e58d62b3b
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:21 2021 +0200

    media: sti/bdisp: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit c44eac5b72e23c31eefc0e10a71d9650036b8341 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    The bdisp_start_streaming() doesn't take it into account, which
    would unbalance PM usage counter at bdisp_stop_streaming().
    
    The logic at bdisp_probe() is correct, but the best is to use
    the same call along the driver.
    
    So, replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac69e7aea37d93879a5883e0938d3cc2cb8c9cfc
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:10 2021 +0200

    media: s5p-jpeg: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 10343de268d10cf07b092b8b525e12ad558ead77 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a plus, pm_runtime_resume_and_get() doesn't return
    positive numbers, so the return code validation can
    be removed.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Andrzej Pietrasiewicz <andrzejtp2010@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1a8951cf1b416317f7e6fa0afa8c2d756abbece
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:09 2021 +0200

    media: mtk-vcodec: fix PM runtime get logic
    
    [ Upstream commit 908711f542c17fe61e5d653da1beb8e5ab5c7b50 ]
    
    Currently, the driver just assumes that PM runtime logic
    succeded resuming the device.
    
    That may not be the case, as pm_runtime_get_sync()
    can fail (but keeping the usage count incremented).
    
    Replace the code to use pm_runtime_resume_and_get(),
    and letting it return the error code.
    
    This way, if mtk_vcodec_dec_pw_on() fails, the logic
    under fops_vcodec_open() will do the right thing and
    return an error, instead of just assuming that the
    device is ready to be used.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 908b6f72a910997e0aabd83ab69c8e69e396b025
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:07:41 2021 +0200

    media: sh_vou: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit 6e8b1526db164c9d4b9dacfb9bc48e365d7c4860 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, check if the PM runtime error was caught at open time.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 948bcdcf7fd9f0ea1e16bafc5e22ee980a09e702
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:04:23 2021 +0200

    media: s5p: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit fdc34e82c0f968ac4c157bd3d8c299ebc24c9c63 ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, check if the PM runtime error was caught at
    s5p_cec_adap_enable().
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4480cacdbc26ed565a35fb485c54ad940fcc8e11
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:57:16 2021 +0200

    media: mdk-mdp: fix pm_runtime_get_sync() usage count
    
    [ Upstream commit d07bb9702cf5f5ccf3fb661e6cab54bbc33cd23f ]
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, fix the return contition of mtk_mdp_m2m_start_streaming(),
    as it doesn't make any sense to return 0 if the PM runtime failed
    to resume.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1da569fa7ec8cb0591c74aa3050d4ea1397778b4
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Jul 6 20:45:21 2021 +0800

    dmaengine: usb-dmac: Fix PM reference leak in usb_dmac_probe()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by moving the error_pm label above the pm_runtime_put() in
    the error path.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210706124521.1371901-1-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit b8052599420cd94505baec1f22b4e7c9e5ae5fce
Merge: 1f89a590b26e c34c1228fc1c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 5 11:48:14 2021 -0700

    Merge tag 'gpio-updates-for-v5.14' of git://git.kernel.org/pub/scm/linux/kernel/git/brgl/linux
    
    Pull gpio updates from Bartosz Golaszewski:
     "One new driver, support for new models in existing ones, dt-bindings
      conversions for several modules and improvements all over the place.
    
      Summary:
    
       - new driver for the IDT 79RC3243x GPIO controller
    
       - device tree bindings coversion to YAML for the following drivers:
         gpio-rk3328-grf, gpio-omap, gpio-davinci, gpio-zynq, gpio-stp,
         gpio-pcf857x
    
       - cleanup of probe functions in many drivers from Alexandru Ardelean,
         mostly dropping unnecessary calls to platform_set_drvdata() and
         removing error messages where none are needed (handled by the
         subsystem already)
    
       - several improvements to the core gpiolib and the sysfs interface
         code from Andy Shevchenko
    
       - conversion of the gpio-xilinx driver to using the bitmap API +
         improvements of suspend/resume handling + minor tweaks
    
       - convert the gpio-stmpe to using devres helpers exclusively in probe
         for improved robustness
    
       - updates for the generic gpio-regmap driver
    
       - updates for the gpio-dwapb driver
    
       - support for a new model in gpio-pca953x
    
       - cleanups in gpio-tegra186, gpio-104-idio-16, gpio-mxs & gpio-xgene
    
       - slight code refactoring of the gpio-zynq driver
    
       - documentation fixes from Mauro Carvalho Chehab
    
       - a bunch of minor tweaks and improvements all over the place"
    
    * tag 'gpio-updates-for-v5.14' of git://git.kernel.org/pub/scm/linux/kernel/git/brgl/linux: (57 commits)
      docs: driver-api: gpio: using-gpio.rst: avoid using ReST :doc:`foo` markup
      dt-bindings: gpio: pcf857x: Convert to json-schema
      gpio: mxs: Prefer unsigned int to bare use of unsigned
      dt-bindings: gpio: stp: convert to json-schema
      dt-bindings: gpio: zynq: convert bindings to YAML
      dt-bindings: gpio: gpio-davinci: Convert to json-schema
      gpio: pca953x: Add support for the On Semi pca9655
      gpio: gpio-xilinx: update on suspend and resume calls
      gpio: zynq: Check return value of irq_get_irq_data
      gpio: zynq: Check return value of pm_runtime_get_sync
      gpio: zynq: use module_platform_driver to simplify the code
      gpio: idt3243x: Fix return value check in idt_gpio_probe()
      MAINTAINERS: update ti,omap-gpio.yaml reference
      dt-bindings: gpio: Add devicetree binding for IDT 79RC32434 GPIO controller
      gpio: Add support for IDT 79RC3243x GPIO controller
      gpio: regmap: move drvdata to config data
      gpio-dwapb: Drop unused headers and sort the rest
      gpio: gpio-regmap: Use devm_add_action_or_reset()
      gpio: dwapb: Switch to use fwnode_irq_get()
      gpio: dwapb: Drop redundant check in dwapb_irq_set_type()
      ...

commit fde25294dfd8e36e4e30b693c27a86232864002a
Author: Zou Wei <zou_wei@huawei.com>
Date:   Wed May 12 11:57:17 2021 +0800

    pwm: img: Fix PM reference leak in img_pwm_enable()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>

commit c09af3877b538f8fccb712550c08a80a52cb8300
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 31 14:36:03 2021 +0800

    dmaengine: rcar-dmac: Fix PM reference leak in rcar_dmac_probe()
    
    [ Upstream commit dea8464ddf553803382efb753b6727dbf3931d06 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/1622442963-54095-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e486713779a03a3f8f72cc5b9edf02593c24ff4
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 17 16:18:26 2021 +0800

    dmaengine: zynqmp_dma: Fix PM reference leak in zynqmp_dma_alloc_chan_resourc()
    
    [ Upstream commit 8982d48af36d2562c0f904736b0fc80efc9f2532 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210517081826.1564698-4-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78fa0f707d73c21621454ffd78cdfa1e2c7003c0
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 31 14:36:03 2021 +0800

    dmaengine: rcar-dmac: Fix PM reference leak in rcar_dmac_probe()
    
    [ Upstream commit dea8464ddf553803382efb753b6727dbf3931d06 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/1622442963-54095-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13b245a7bd59359abb6e328254b7536265448b29
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 17 16:18:24 2021 +0800

    dmaengine: stm32-mdma: fix PM reference leak in stm32_mdma_alloc_chan_resourc()
    
    [ Upstream commit 83eb4868d325b86e18509d0874e911497667cb54 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210517081826.1564698-2-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86f3e72dcb721675216a8a6fa5a3d669ba79c6a0
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 17 16:18:26 2021 +0800

    dmaengine: zynqmp_dma: Fix PM reference leak in zynqmp_dma_alloc_chan_resourc()
    
    [ Upstream commit 8982d48af36d2562c0f904736b0fc80efc9f2532 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210517081826.1564698-4-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 069907508fe1672569bea265f6809105f6d9e1c8
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 31 14:36:03 2021 +0800

    dmaengine: rcar-dmac: Fix PM reference leak in rcar_dmac_probe()
    
    [ Upstream commit dea8464ddf553803382efb753b6727dbf3931d06 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/1622442963-54095-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e7da85cf916ac12acb6dffee22bc9bb9a20913c
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 17 16:18:24 2021 +0800

    dmaengine: stm32-mdma: fix PM reference leak in stm32_mdma_alloc_chan_resourc()
    
    [ Upstream commit 83eb4868d325b86e18509d0874e911497667cb54 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210517081826.1564698-2-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a300c3ff0c17a806f993e74ef2ddf2dc26eaf878
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 17 16:18:26 2021 +0800

    dmaengine: zynqmp_dma: Fix PM reference leak in zynqmp_dma_alloc_chan_resourc()
    
    [ Upstream commit 8982d48af36d2562c0f904736b0fc80efc9f2532 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210517081826.1564698-4-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3563f55ce65462063543dfa6a8d8c7fbfb9d7772
Merge: 1dfb0f47aca1 22b65d31ad9d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jun 29 13:36:06 2021 -0700

    Merge tag 'pm-5.14-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull power management updates from Rafael Wysocki:
     "These add hybrid processors support to the intel_pstate driver and
      make it work with more processor models when HWP is disabled, make the
      intel_idle driver use special C6 idle state paremeters when package
      C-states are disabled, add cooling support to the tegra30 devfreq
      driver, rework the TEO (timer events oriented) cpuidle governor,
      extend the OPP (operating performance points) framework to use the
      required-opps DT property in more cases, fix some issues and clean up
      a number of assorted pieces of code.
    
      Specifics:
    
       - Make intel_pstate support hybrid processors using abstract
         performance units in the HWP interface (Rafael Wysocki).
    
       - Add Icelake servers and Cometlake support in no-HWP mode to
         intel_pstate (Giovanni Gherdovich).
    
       - Make cpufreq_online() error path be consistent with the CPU device
         removal path in cpufreq (Rafael Wysocki).
    
       - Clean up 3 cpufreq drivers and the statistics code (Hailong Liu,
         Randy Dunlap, Shaokun Zhang).
    
       - Make intel_idle use special idle state parameters for C6 when
         package C-states are disabled (Chen Yu).
    
       - Rework the TEO (timer events oriented) cpuidle governor to address
         some theoretical shortcomings in it (Rafael Wysocki).
    
       - Drop unneeded semicolon from the TEO governor (Wan Jiabing).
    
       - Modify the runtime PM framework to accept unassigned suspend and
         resume callback pointers (Ulf Hansson).
    
       - Improve pm_runtime_get_sync() documentation (Krzysztof Kozlowski).
    
       - Improve device performance states support in the generic power
         domains (genpd) framework (Ulf Hansson).
    
       - Fix some documentation issues in genpd (Yang Yingliang).
    
       - Make the operating performance points (OPP) framework use the
         required-opps DT property in use cases that are not related to
         genpd (Hsin-Yi Wang).
    
       - Make lazy_link_required_opp_table() use list_del_init instead of
         list_del/INIT_LIST_HEAD (Yang Yingliang).
    
       - Simplify wake IRQs handling in the core system-wide sleep support
         code and clean up some coding style inconsistencies in it (Tian
         Tao, Zhen Lei).
    
       - Add cooling support to the tegra30 devfreq driver and improve its
         DT bindings (Dmitry Osipenko).
    
       - Fix some assorted issues in the devfreq core and drivers (Chanwoo
         Choi, Dong Aisheng, YueHaibing)"
    
    * tag 'pm-5.14-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (39 commits)
      PM / devfreq: passive: Fix get_target_freq when not using required-opp
      cpufreq: Make cpufreq_online() call driver->offline() on errors
      opp: Allow required-opps to be used for non genpd use cases
      cpuidle: teo: remove unneeded semicolon in teo_select()
      dt-bindings: devfreq: tegra30-actmon: Add cooling-cells
      dt-bindings: devfreq: tegra30-actmon: Convert to schema
      PM / devfreq: userspace: Use DEVICE_ATTR_RW macro
      PM: runtime: Clarify documentation when callbacks are unassigned
      PM: runtime: Allow unassigned ->runtime_suspend|resume callbacks
      PM: runtime: Improve path in rpm_idle() when no callback
      PM: hibernate: remove leading spaces before tabs
      PM: sleep: remove trailing spaces and tabs
      PM: domains: Drop/restore performance state votes for devices at runtime PM
      PM: domains: Return early if perf state is already set for the device
      PM: domains: Split code in dev_pm_genpd_set_performance_state()
      cpuidle: teo: Use kerneldoc documentation in admin-guide
      cpuidle: teo: Rework most recent idle duration values treatment
      cpuidle: teo: Change the main idle state selection logic
      cpuidle: teo: Cosmetic modification of teo_select()
      cpuidle: teo: Cosmetic modifications of teo_update()
      ...

commit afe94fb82c113727de211e32af88982534ba8b0c
Merge: fff3df4bac00 4ec4f059088b 480f0de68cad
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Jun 29 15:52:53 2021 +0200

    Merge branches 'pm-core' and 'pm-sleep'
    
    * pm-core:
      PM: runtime: Clarify documentation when callbacks are unassigned
      PM: runtime: Allow unassigned ->runtime_suspend|resume callbacks
      PM: runtime: Improve path in rpm_idle() when no callback
      PM: runtime: document common mistake with pm_runtime_get_sync()
    
    * pm-sleep:
      PM: hibernate: remove leading spaces before tabs
      PM: sleep: remove trailing spaces and tabs
      PM: hibernate: fix spelling mistakes
      PM: wakeirq: Set IRQF_NO_AUTOEN when requesting the IRQ

commit a1b2fdf97f3659948d83ff491abbab73e591c982
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon May 31 22:24:49 2021 +0800

    Bluetooth: btmtkuart: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

commit 02851cb0cae3de498e3cd4bca9593692e1e8cb00
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Apr 12 13:49:07 2021 +0800

    usb: cdns3: Fix runtime PM imbalance on error
    
    [ Upstream commit e5b913496099527abe46e175e5e2c844367bded0 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a51b2fb94b04ab71e53a71b9fad03fa826941254
Author: Srinivas Neeli <srinivas.neeli@xilinx.com>
Date:   Fri Apr 9 19:38:05 2021 +0530

    gpio: zynq: Check return value of pm_runtime_get_sync
    
    Return value of "pm_runtime_get_sync" API was neither captured nor checked.
    Fixed it by capturing the return value and then checking for any warning.
    
    Addresses-Coverity: "check_return"
    Signed-off-by: Srinivas Neeli <srinivas.neeli@xilinx.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>

commit 809ae4e1ca0a719db29ed747fc2febf099a77b9f
Author: Tian Tao <tiantao6@hisilicon.com>
Date:   Fri May 21 09:02:45 2021 +0800

    mmc: sdhci-omap: Use pm_runtime_resume_and_get() to replace open coding
    
    use pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. this change is just to simplify the code, no
    actual functional changes.
    
    Signed-off-by: Tian Tao <tiantao6@hisilicon.com>
    Link: https://lore.kernel.org/r/1621558965-34077-1-git-send-email-tiantao6@hisilicon.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit 07e70346e21eb8f018c8478cc4881ad9026bb12e
Author: Tian Tao <tiantao6@hisilicon.com>
Date:   Fri May 21 08:59:35 2021 +0800

    mmc: sdhci_am654: Use pm_runtime_resume_and_get() to replace open coding
    
    use pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. this change is just to simplify the code, no
    actual functional changes.
    
    Signed-off-by: Tian Tao <tiantao6@hisilicon.com>
    Link: https://lore.kernel.org/r/1621558775-31185-1-git-send-email-tiantao6@hisilicon.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit 05335af1e82a3ce2a7d410c7b1695a3c4ec37ea9
Author: Tian Tao <tiantao6@hisilicon.com>
Date:   Thu May 20 20:21:44 2021 +0800

    mmc: core: Use pm_runtime_resume_and_get() to replace open coding
    
    use pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. this change is just to simplify the code, no
    actual functional changes
    
    Signed-off-by: Tian Tao <tiantao6@hisilicon.com>
    Link: https://lore.kernel.org/r/1621513304-27824-1-git-send-email-tiantao6@hisilicon.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit 41a7426d25fa3f43380560928edb6f815397da20
Author: JC Kuo <jckuo@nvidia.com>
Date:   Wed Jan 20 15:34:13 2021 +0800

    usb: xhci: tegra: Unlink power domain devices
    
    This commit unlinks xhci-tegra platform device with SS/host power
    domain devices. Reasons for this change is - at ELPG entry, PHY
    sleepwalk and wake configuration need to be done before powering
    down SS/host partitions, and PHY need be powered off after powering
    down SS/host partitions. Sequence looks like roughly below:
    
      tegra_xusb_enter_elpg() -> xhci_suspend()
                              -> enable PHY sleepwalk and wake if needed
                              -> power down SS/host partitions
                              -> power down PHY
    
    If SS/host power domains are linked to xhci-tegra platform device, we
    are not able to perform the sequence like above.
    
    This commit introduces:
      1. tegra_xusb_unpowergate_partitions() to power up SS and host
         partitions together. If SS/host power domain devices are
         available, it invokes pm_runtime_get_sync() to request power
         driver to power up partitions; If power domain devices are not
         available, tegra_powergate_sequence_power_up() will be used to
         power up partitions.
    
      2. tegra_xusb_powergate_partitions() to power down SS and host
         partitions together. If SS/host power domain devices are
         available, it invokes pm_runtime_put_sync() to request power
         driver to power down partitions; If power domain devices are not
         available, tegra_powergate_power_off() will be used to power down
         partitions.
    
    Signed-off-by: JC Kuo <jckuo@nvidia.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit 1adf30f198c26539a62d761e45af72cde570413d
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Thu Jun 10 10:54:29 2021 +0800

    iommu/arm-smmu: Fix arm_smmu_device refcount leak when arm_smmu_rpm_get fails
    
    arm_smmu_rpm_get() invokes pm_runtime_get_sync(), which increases the
    refcount of the "smmu" even though the return value is less than 0.
    
    The reference counting issue happens in some error handling paths of
    arm_smmu_rpm_get() in its caller functions. When arm_smmu_rpm_get()
    fails, the caller functions forget to decrease the refcount of "smmu"
    increased by arm_smmu_rpm_get(), causing a refcount leak.
    
    Fix this issue by calling pm_runtime_resume_and_get() instead of
    pm_runtime_get_sync() in arm_smmu_rpm_get(), which can keep the refcount
    balanced in case of failure.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Link: https://lore.kernel.org/r/1623293672-17954-1-git-send-email-xiyuyang19@fudan.edu.cn
    Signed-off-by: Will Deacon <will@kernel.org>

commit cea08169ad4ce46c222a223d8f71db6d9c3f1385
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon May 31 22:25:42 2021 +0800

    bus: ti-sysc: using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get is more appropriate
    for simplifing code.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit ca323b2c61ec321eb9f2179a405b9c34cdb4f553
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Jun 1 22:51:18 2021 +0800

    crypto: omap-sham - Fix PM reference leak in omap sham ops
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 604c31039dae4 ("crypto: omap-sham - Check for return value from pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit d950cd1b1c204c4a72e08c7c13862451f9d7d902
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Jun 1 22:51:17 2021 +0800

    crypto: omap-des - using pm_runtime_resume_and_get instead of pm_runtime_get_sync
    
    Using pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. This change is just to simplify the code, no
    actual functional changes.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 1bd8a7dc28c1c410f1ceefae1f2a97c06d1a67c2
Merge: 2a7005c8a398 445d3bed75de
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri Jun 11 14:19:06 2021 +1000

    Merge tag 'exynos-drm-next-for-v5.14' of git://git.kernel.org/pub/scm/linux/kernel/git/daeinki/drm-exynos into drm-next
    
    Two cleanups
    - These patches make Exynos DRM driver to use pm_runtime_resume_and_get()
      function instead of m_runtime_get_sync() to deal with usage counter.
      pm_runtime_get_sync() increases the usage counter even when it failed,
      which could make callers to forget to decrease the usage counter.
      pm_runtime_resume_and_get() decreases the usage counter regardless of
      whether it failed or not.
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    
    From: Inki Dae <inki.dae@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210611025939.393282-1-inki.dae@samsung.com

commit 445d3bed75de4082c7c7794030ac9a5b8bfde886
Author: Inki Dae <inki.dae@samsung.com>
Date:   Tue May 25 19:51:39 2021 +0900

    drm/exynos: use pm_runtime_resume_and_get()
    
    Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()
    to deal with usage counter. pm_runtime_get_sync() increases the
    usage counter even when it failed, which makes callers to forget
    to decrease the usage counter and resulted in reference leak.
    
    pm_runtime_resume_and_get() function decreases the usage counter
    when it failed internally so it can avoid the reference leak.
    
    Changelog v1:
    - Fix an build error reported by kernel test robot of Intel.
    
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Reported-by: kernel test robot <lkp@intel.com>

commit a89b6c8f86b9ae245558572b5247dc8ff10f2fe8
Author: Tian Tao <tiantao6@hisilicon.com>
Date:   Mon May 24 20:07:57 2021 +0800

    drm/exynos: Use pm_runtime_resume_and_get() to replace open coding
    
    use pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle to avoid continuing to increase the refcount
    when pm_runtime_get_sync fails.
    
    Signed-off-by: Tian Tao <tiantao6@hisilicon.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>

commit 81aad47278539f02de808bcc8251fed0ad3d6f55
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:35:21 2021 -0400

    ASoC: img: Fix PM reference leak in img_i2s_in_probe()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093521.612176-1-yuyufen@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit e9009fb227fa66a66cef02a36fb51c288f411e0d
Author: Tian Tao <tiantao6@hisilicon.com>
Date:   Mon May 24 20:28:38 2021 +0800

    hwrng: ks-sa - Use pm_runtime_resume_and_get() to replace open coding
    
    use pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. this change is just to simplify the code, no
    actual functional changes.
    
    Signed-off-by: Tian Tao <tiantao6@hisilicon.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit b21d14d9885ace8587a5b5b36cdcda9d8814f313
Author: Tian Tao <tiantao6@hisilicon.com>
Date:   Mon May 24 20:20:57 2021 +0800

    hwrng: omap - Use pm_runtime_resume_and_get() to replace open coding
    
    use pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. this change is just to simplify the code, no
    actual functional changes.
    
    Signed-off-by: Tian Tao <tiantao6@hisilicon.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 5d0421d65be8c02bdde7a44f153babeaf004db7a
Author: Tian Tao <tiantao6@hisilicon.com>
Date:   Mon May 24 19:53:38 2021 +0800

    hwrng: exynos - Use pm_runtime_resume_and_get() to replace open coding
    
    use pm_runtime_resume_and_get() to replace pm_runtime_get_sync and
    pm_runtime_put_noidle. this change is just to simplify the code, no
    actual functional changes.
    
    Signed-off-by: Tian Tao <tiantao6@hisilicon.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Acked-by: Łukasz Stelmach <l.stelmach@samsung.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit dea8464ddf553803382efb753b6727dbf3931d06
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 31 14:36:03 2021 +0800

    dmaengine: rcar-dmac: Fix PM reference leak in rcar_dmac_probe()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/1622442963-54095-1-git-send-email-zou_wei@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit f674555ee5444c8987dfea0922f1cf6bf0c12847
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 31 21:56:22 2021 +0800

    drm: bridge: cdns-mhdp8546: Fix PM reference leak in
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210531135622.3348252-1-yukuai3@huawei.com

commit c58e7ed28b4534ed073371843d03c433d6a9fe34
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Wed May 26 12:22:51 2021 -0400

    PM: runtime: document common mistake with pm_runtime_get_sync()
    
    pm_runtime_get_sync(), contradictory to intuition, does not drop the
    runtime PM usage counter on errors which lead to several wrong usages in
    drivers (missing the put).  pm_runtime_resume_and_get() was added as a
    better implementation so document the preference of using it, hoping it
    will stop bad patterns.
    
    Suggested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    [ rjw: Documentation change edits ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 83eb4868d325b86e18509d0874e911497667cb54
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 17 16:18:24 2021 +0800

    dmaengine: stm32-mdma: fix PM reference leak in stm32_mdma_alloc_chan_resourc()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210517081826.1564698-2-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 8982d48af36d2562c0f904736b0fc80efc9f2532
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon May 17 16:18:26 2021 +0800

    dmaengine: zynqmp_dma: Fix PM reference leak in zynqmp_dma_alloc_chan_resourc()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20210517081826.1564698-4-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 33f90f27e1c5ccd648d3e78a1c28be9ee8791cf1
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 24 15:21:02 2021 +0800

    drm/bridge: cdns: Fix PM reference leak in cdns_dsi_transfer()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Reviewed-by: Robert Foss <robert.foss@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1621840862-106024-1-git-send-email-zou_wei@huawei.com

commit 5e4322a8b266bc9f5ee7ea4895f661c01dbd7cb3
Author: Zou Wei <zou_wei@huawei.com>
Date:   Mon May 24 15:20:54 2021 +0800

    drm/vc4: hdmi: Fix PM reference leak in vc4_hdmi_encoder_pre_crtc_co()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zou Wei <zou_wei@huawei.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/1621840854-105978-1-git-send-email-zou_wei@huawei.com

commit a38e93302ee25b2ca6f4ee76c6c974cf3637985e
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Mon May 24 05:38:11 2021 -0400

    ALSA: ac97: fix PM reference leak in ac97_bus_remove()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Link: https://lore.kernel.org/r/20210524093811.612302-1-yuyufen@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 591856a9594de480b59922207771c380a528fb84
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 8 15:26:58 2021 +0800

    PCI: tegra: Fix runtime PM imbalance in pex_ep_event_pex_rst_deassert()
    
    [ Upstream commit 5859c926d1f052ee61b5815b14658875c14f6243 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Link: https://lore.kernel.org/r/20210408072700.15791-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4800a98bcfe472a5cde5ac51830884d707a46fcc
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 8 15:26:58 2021 +0800

    PCI: tegra: Fix runtime PM imbalance in pex_ep_event_pex_rst_deassert()
    
    [ Upstream commit 5859c926d1f052ee61b5815b14658875c14f6243 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Link: https://lore.kernel.org/r/20210408072700.15791-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10f05966c52052c06ec4303ffc2f8185df713784
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Mon Apr 26 14:26:43 2021 +0200

    media: hantro: use pm_runtime_resume_and_get()
    
    Commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    added pm_runtime_resume_and_get() in order to automatically handle
    dev->power.usage_count decrement on errors.
    
    While there's nothing wrong with the current usage on this driver,
    as we're getting rid of the pm_runtime_get_sync() call all over
    the media subsystem, let's remove the last occurrence on this
    driver.
    
    Reviewed-by: Ezequiel Garcia <ezequiel@collabora.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit f3f672f88f1443e0ae25bd0eb57316700f32c715
Author: Ye Weihua <yeweihua4@huawei.com>
Date:   Thu Apr 8 19:06:38 2021 +0800

    i2c: imx: Fix PM reference leak in i2c_imx_reg_slave()
    
    [ Upstream commit c4b1fcc310e655fa8414696c38a84d36c00684c8 ]
    
    pm_runtime_get_sync() will increment the PM reference count even on
    failure. Forgetting to put the reference again will result in a leak.
    
    Replace it with pm_runtime_resume_and_get() to keep the usage counter
    balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Ye Weihua <yeweihua4@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit add13c3d54bf22ede130d03a358aae9220caced3
Author: Ye Weihua <yeweihua4@huawei.com>
Date:   Thu Apr 8 19:06:38 2021 +0800

    i2c: imx: Fix PM reference leak in i2c_imx_reg_slave()
    
    [ Upstream commit c4b1fcc310e655fa8414696c38a84d36c00684c8 ]
    
    pm_runtime_get_sync() will increment the PM reference count even on
    failure. Forgetting to put the reference again will result in a leak.
    
    Replace it with pm_runtime_resume_and_get() to keep the usage counter
    balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Ye Weihua <yeweihua4@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db9c6c2ec4a8789e2445d4a861dfce6d66b10df9
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun May 9 12:33:54 2021 +0100

    iio: adc: rcar-gyroadc: Use pm_runtime_resume_and_get() and check in probe()
    
    1 instance found using coccicheck script under review at:
    https://lore.kernel.org/lkml/20210427141946.2478411-1-Julia.Lawall@inria.fr/
    The other instance changed did not check for failure of the
    pm_runtime_get_sync() so that is added.
    
    Note the remaining pm_runtime_get_sync() call is left alone because it
    is not obvious what to do on failure to power up in remove()
    
    This is a prequel to taking a closer look at the runtime pm in IIO drivers
    in general.
    
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: Marek Vasut <marek.vasut@gmail.com>
    Reviewed-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Link: https://lore.kernel.org/r/20210509113354.660190-29-jic23@kernel.org

commit 66e748ae7f82301af3b2c2bd0b3bd46d01fd7471
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun May 9 12:33:50 2021 +0100

    iio: temp: mlx90614: Handle failure in pm_runtime_resume_and_get()
    
    Converts from using pm_runtime_get_sync() with no error handling over
    to pm_runtime_resume_and_get() which will ensure we don't end up
    holding a reference.  Ensure this error return is then handled at
    calls to mlx90614_power_get(). These are all direct returns.
    
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Link: https://lore.kernel.org/r/20210509113354.660190-25-jic23@kernel.org

commit 0cdbabf8bb7a6147f5adf37dbc251e92a1bbc2c7
Author: Łukasz Stelmach <l.stelmach@samsung.com>
Date:   Wed May 5 20:29:14 2021 +0200

    hwrng: exynos - Fix runtime PM imbalance on error
    
    pm_runtime_resume_and_get() wraps around pm_runtime_get_sync() and
    decrements the runtime PM usage counter in case the latter function
    fails and keeps the counter balanced.
    
    Signed-off-by: Łukasz Stelmach <l.stelmach@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit a42ac16e6573f19c78f556ea292f5b534fcc4514
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:46 2020 +0800

    i2c: xiic: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit a85c5c7a3aa8041777ff691400b4046e56149fd3 ]
    
    The PM reference count is not expected to be incremented on
    return in xiic_xfer and xiic_i2c_remove.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 10b17004a74c ("i2c: xiic: Fix the clocking across bind unbind")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7ea772c9fcf711ed566814b92eecaffc0e2bfd0
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:45 2020 +0800

    i2c: stm32f7: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 2c662660ce2bd3b09dae21a9a9ac9395e1e6c00b ]
    
    The PM reference count is not expected to be incremented on
    return in these stm32f7_i2c_xx serious functions.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: ea6dd25deeb5 ("i2c: stm32f7: add PM_SLEEP suspend/resume support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3406ab52097328a3bc4cbe124bfd8f6d51fb86f
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:44 2020 +0800

    i2c: sprd: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 3a4f326463117cee3adcb72999ca34a9aaafda93 ]
    
    The PM reference count is not expected to be incremented on
    return in sprd_i2c_master_xfer() and sprd_i2c_remove().
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 8b9ec0719834 ("i2c: Add Spreadtrum I2C controller driver")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6fdc153091dc29edf84393f2ce9a7c2aa1a3090
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:43 2020 +0800

    i2c: omap: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 780f629741257ed6c54bd3eb53b57f648eabf200 ]
    
    The PM reference count is not expected to be incremented on
    return in omap_i2c_probe() and omap_i2c_remove().
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here. I Replace it with pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    What's more, error path 'err_free_mem' seems not like a proper
    name any more. So I change the name to err_disable_pm and move
    pm_runtime_disable below, for pm_runtime of 'pdev->dev' should
    be disabled when pm_runtime_resume_and_get fails.
    
    Fixes: 3b0fb97c8dc4 ("I2C: OMAP: Handle error check for pm runtime")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff406f6cd09c273337ab4854292e4aca48f8affd
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:41 2020 +0800

    i2c: imx: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 47ff617217ca6a13194fcb35c6c3a0c57c080693 ]
    
    In i2c_imx_xfer() and i2c_imx_remove(), the pm reference count
    is not expected to be incremented on return.
    
    However, pm_runtime_get_sync will increment pm reference count
    even failed. Forgetting to putting operation will result in a
    reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 3a5ee18d2a32 ("i2c: imx: implement master_xfer_atomic callback")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Reviewed-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b100650d80cd2292f6c152f5f2943b5944b3e8ce
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:40 2020 +0800

    i2c: imx-lpi2c: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 278e5bbdb9a94fa063c0f9bcde2479d0b8042462 ]
    
    The PM reference count is not expected to be incremented on
    return in lpi2c_imx_master_enable.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 13d6eb20fc79 ("i2c: imx-lpi2c: add runtime pm support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ee35cde1e810ad6ca589980b9ec2b7b62946a5b
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:39 2020 +0800

    i2c: img-scb: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 223125e37af8a641ea4a09747a6a52172fc4b903 ]
    
    The PM reference count is not expected to be incremented on
    return in functions img_i2c_xfer and img_i2c_init.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 93222bd9b966 ("i2c: img-scb: Add runtime PM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a45fc41beed8e0fe31864619c34aa00797fb60c1
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:17 2020 +0800

    i2c: cadence: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 23ceb8462dc6f4b4decdb5536a7e5fc477cdf0b6 ]
    
    The PM reference count is not expected to be incremented on
    return in functions cdns_i2c_master_xfer and cdns_reg_slave.
    
    However, pm_runtime_get_sync will increment pm usage counter
    even failed. Forgetting to putting operation will result in a
    reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 7fa32329ca03 ("i2c: cadence: Move to sensible power management")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a2b5cee0d31ab6cc51030c441135b0e31217282
Author: Wang Li <wangli74@huawei.com>
Date:   Fri Apr 9 09:54:30 2021 +0000

    spi: fsl-lpspi: Fix PM reference leak in lpspi_prepare_xfer_hardware()
    
    [ Upstream commit a03675497970a93fcf25d81d9d92a59c2d7377a7 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 944c01a889d9 ("spi: lpspi: enable runtime pm for lpspi")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Link: https://lore.kernel.org/r/20210409095430.29868-1-wangli74@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2ba996577eaea423694dc69ae43d56f1410a22b
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:46 2020 +0800

    i2c: xiic: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit a85c5c7a3aa8041777ff691400b4046e56149fd3 ]
    
    The PM reference count is not expected to be incremented on
    return in xiic_xfer and xiic_i2c_remove.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 10b17004a74c ("i2c: xiic: Fix the clocking across bind unbind")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d791b90f5c5e5aa8ccf9e33386c16bd2b7e333a4
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:45 2020 +0800

    i2c: stm32f7: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 2c662660ce2bd3b09dae21a9a9ac9395e1e6c00b ]
    
    The PM reference count is not expected to be incremented on
    return in these stm32f7_i2c_xx serious functions.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: ea6dd25deeb5 ("i2c: stm32f7: add PM_SLEEP suspend/resume support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9223505e938ba3db5907e058f4209770cff2f2a7
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:44 2020 +0800

    i2c: sprd: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 3a4f326463117cee3adcb72999ca34a9aaafda93 ]
    
    The PM reference count is not expected to be incremented on
    return in sprd_i2c_master_xfer() and sprd_i2c_remove().
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 8b9ec0719834 ("i2c: Add Spreadtrum I2C controller driver")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e55902575da691e8ff1eb90de4f211c9d25d66d8
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:43 2020 +0800

    i2c: omap: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 780f629741257ed6c54bd3eb53b57f648eabf200 ]
    
    The PM reference count is not expected to be incremented on
    return in omap_i2c_probe() and omap_i2c_remove().
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here. I Replace it with pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    What's more, error path 'err_free_mem' seems not like a proper
    name any more. So I change the name to err_disable_pm and move
    pm_runtime_disable below, for pm_runtime of 'pdev->dev' should
    be disabled when pm_runtime_resume_and_get fails.
    
    Fixes: 3b0fb97c8dc4 ("I2C: OMAP: Handle error check for pm runtime")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ecc0ebc2ebbad4a22a670a07d27a21fa0b59c77
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:41 2020 +0800

    i2c: imx: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 47ff617217ca6a13194fcb35c6c3a0c57c080693 ]
    
    In i2c_imx_xfer() and i2c_imx_remove(), the pm reference count
    is not expected to be incremented on return.
    
    However, pm_runtime_get_sync will increment pm reference count
    even failed. Forgetting to putting operation will result in a
    reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 3a5ee18d2a32 ("i2c: imx: implement master_xfer_atomic callback")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Reviewed-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb300acc867e937edc2a6898e92b21f88e4e4e66
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:40 2020 +0800

    i2c: imx-lpi2c: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 278e5bbdb9a94fa063c0f9bcde2479d0b8042462 ]
    
    The PM reference count is not expected to be incremented on
    return in lpi2c_imx_master_enable.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 13d6eb20fc79 ("i2c: imx-lpi2c: add runtime pm support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96c4a03658d661666c360959aa80cdabfe2972ed
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:39 2020 +0800

    i2c: img-scb: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 223125e37af8a641ea4a09747a6a52172fc4b903 ]
    
    The PM reference count is not expected to be incremented on
    return in functions img_i2c_xfer and img_i2c_init.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 93222bd9b966 ("i2c: img-scb: Add runtime PM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d57ff04e0ed6f3be1682ae861ead33f879225e07
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:17 2020 +0800

    i2c: cadence: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 23ceb8462dc6f4b4decdb5536a7e5fc477cdf0b6 ]
    
    The PM reference count is not expected to be incremented on
    return in functions cdns_i2c_master_xfer and cdns_reg_slave.
    
    However, pm_runtime_get_sync will increment pm usage counter
    even failed. Forgetting to putting operation will result in a
    reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 7fa32329ca03 ("i2c: cadence: Move to sensible power management")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8207bfc539cd07d15e753ff2d179c5b61c673b1
Author: Wang Li <wangli74@huawei.com>
Date:   Fri Apr 9 09:54:30 2021 +0000

    spi: fsl-lpspi: Fix PM reference leak in lpspi_prepare_xfer_hardware()
    
    [ Upstream commit a03675497970a93fcf25d81d9d92a59c2d7377a7 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 944c01a889d9 ("spi: lpspi: enable runtime pm for lpspi")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Link: https://lore.kernel.org/r/20210409095430.29868-1-wangli74@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c977426db644ba476938125597947979e8aba725
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:46 2020 +0800

    i2c: xiic: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit a85c5c7a3aa8041777ff691400b4046e56149fd3 ]
    
    The PM reference count is not expected to be incremented on
    return in xiic_xfer and xiic_i2c_remove.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 10b17004a74c ("i2c: xiic: Fix the clocking across bind unbind")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c323b270a52a26aa8038a4d1fd9a850904a41166
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:45 2020 +0800

    i2c: stm32f7: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 2c662660ce2bd3b09dae21a9a9ac9395e1e6c00b ]
    
    The PM reference count is not expected to be incremented on
    return in these stm32f7_i2c_xx serious functions.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: ea6dd25deeb5 ("i2c: stm32f7: add PM_SLEEP suspend/resume support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e547640cee7981fd751d2c9cde3a61bdb678b755
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:44 2020 +0800

    i2c: sprd: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 3a4f326463117cee3adcb72999ca34a9aaafda93 ]
    
    The PM reference count is not expected to be incremented on
    return in sprd_i2c_master_xfer() and sprd_i2c_remove().
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 8b9ec0719834 ("i2c: Add Spreadtrum I2C controller driver")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c0a2009fb20d98fd1aaab172ecaed39379d8b8d
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:43 2020 +0800

    i2c: omap: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 780f629741257ed6c54bd3eb53b57f648eabf200 ]
    
    The PM reference count is not expected to be incremented on
    return in omap_i2c_probe() and omap_i2c_remove().
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here. I Replace it with pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    What's more, error path 'err_free_mem' seems not like a proper
    name any more. So I change the name to err_disable_pm and move
    pm_runtime_disable below, for pm_runtime of 'pdev->dev' should
    be disabled when pm_runtime_resume_and_get fails.
    
    Fixes: 3b0fb97c8dc4 ("I2C: OMAP: Handle error check for pm runtime")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a0cdd336d92c429b51a79bf4f64b17eafa0325d
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:41 2020 +0800

    i2c: imx: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 47ff617217ca6a13194fcb35c6c3a0c57c080693 ]
    
    In i2c_imx_xfer() and i2c_imx_remove(), the pm reference count
    is not expected to be incremented on return.
    
    However, pm_runtime_get_sync will increment pm reference count
    even failed. Forgetting to putting operation will result in a
    reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 3a5ee18d2a32 ("i2c: imx: implement master_xfer_atomic callback")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Reviewed-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc49d206414240483bb93ffa3d80243e6a776916
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:40 2020 +0800

    i2c: imx-lpi2c: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 278e5bbdb9a94fa063c0f9bcde2479d0b8042462 ]
    
    The PM reference count is not expected to be incremented on
    return in lpi2c_imx_master_enable.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 13d6eb20fc79 ("i2c: imx-lpi2c: add runtime pm support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e80ae8bde41266d3b8bf012460b6593851766006
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:39 2020 +0800

    i2c: img-scb: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 223125e37af8a641ea4a09747a6a52172fc4b903 ]
    
    The PM reference count is not expected to be incremented on
    return in functions img_i2c_xfer and img_i2c_init.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 93222bd9b966 ("i2c: img-scb: Add runtime PM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30410519328c94367e561fd878e5f0d3a0303585
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:17 2020 +0800

    i2c: cadence: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 23ceb8462dc6f4b4decdb5536a7e5fc477cdf0b6 ]
    
    The PM reference count is not expected to be incremented on
    return in functions cdns_i2c_master_xfer and cdns_reg_slave.
    
    However, pm_runtime_get_sync will increment pm usage counter
    even failed. Forgetting to putting operation will result in a
    reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 7fa32329ca03 ("i2c: cadence: Move to sensible power management")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce02e58ddf8658a4c3bed2296f32a5873b3f7cce
Author: Wang Li <wangli74@huawei.com>
Date:   Fri Apr 9 09:54:30 2021 +0000

    spi: fsl-lpspi: Fix PM reference leak in lpspi_prepare_xfer_hardware()
    
    [ Upstream commit a03675497970a93fcf25d81d9d92a59c2d7377a7 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 944c01a889d9 ("spi: lpspi: enable runtime pm for lpspi")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Link: https://lore.kernel.org/r/20210409095430.29868-1-wangli74@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e1764312440c5df9dfe6b436035a03673b0c1b9
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:44 2020 +0800

    i2c: sprd: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 3a4f326463117cee3adcb72999ca34a9aaafda93 ]
    
    The PM reference count is not expected to be incremented on
    return in sprd_i2c_master_xfer() and sprd_i2c_remove().
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 8b9ec0719834 ("i2c: Add Spreadtrum I2C controller driver")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f51ddcbfc78088804f13391991d2d50214d42b5
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:43 2020 +0800

    i2c: omap: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 780f629741257ed6c54bd3eb53b57f648eabf200 ]
    
    The PM reference count is not expected to be incremented on
    return in omap_i2c_probe() and omap_i2c_remove().
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here. I Replace it with pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    What's more, error path 'err_free_mem' seems not like a proper
    name any more. So I change the name to err_disable_pm and move
    pm_runtime_disable below, for pm_runtime of 'pdev->dev' should
    be disabled when pm_runtime_resume_and_get fails.
    
    Fixes: 3b0fb97c8dc4 ("I2C: OMAP: Handle error check for pm runtime")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 815859cb1d2302e74f11bf6894bceace9ca9eb4a
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:40 2020 +0800

    i2c: imx-lpi2c: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 278e5bbdb9a94fa063c0f9bcde2479d0b8042462 ]
    
    The PM reference count is not expected to be incremented on
    return in lpi2c_imx_master_enable.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 13d6eb20fc79 ("i2c: imx-lpi2c: add runtime pm support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4734c4b1d9573c9d20bbc46cf37dde095ee011b8
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:39 2020 +0800

    i2c: img-scb: fix reference leak when pm_runtime_get_sync fails
    
    [ Upstream commit 223125e37af8a641ea4a09747a6a52172fc4b903 ]
    
    The PM reference count is not expected to be incremented on
    return in functions img_i2c_xfer and img_i2c_init.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 93222bd9b966 ("i2c: img-scb: Add runtime PM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a01ad002d2e03c399af536562693752af7c81b1
Author: Wang Li <wangli74@huawei.com>
Date:   Fri Apr 9 09:54:30 2021 +0000

    spi: fsl-lpspi: Fix PM reference leak in lpspi_prepare_xfer_hardware()
    
    [ Upstream commit a03675497970a93fcf25d81d9d92a59c2d7377a7 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 944c01a889d9 ("spi: lpspi: enable runtime pm for lpspi")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Link: https://lore.kernel.org/r/20210409095430.29868-1-wangli74@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69777e6ca396f0a7e1baff40fcad4a9d3d445b7a
Author: Wang Li <wangli74@huawei.com>
Date:   Sat Apr 10 03:48:41 2021 +0000

    drm/mediatek: Fix PM reference leak in mtk_crtc_ddp_hw_init()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>

commit 0e0fb68c253823bdd1e76558cdfaefbc445b1eeb
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 13:11:49 2021 +0800

    mfd: arizona: Fix rumtime PM imbalance on error
    
    [ Upstream commit fe6df2b48043bbe1e852b2320501d3b169363c35 ]
    
    pm_runtime_get_sync() will increase the rumtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdc41f736b41d26fbb1c9be2a3e1ede02f1ad888
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 07:46:06 2021 +0200

    media: sun8i-di: Fix runtime PM imbalance in deinterlace_start_streaming
    
    [ Upstream commit f1995d5e43cf897f63b4d7a7f84a252d891ae820 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9c8b61f30dd7816a8a58724efbaaf2196692844
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 07:43:13 2021 +0200

    media: platform: sti: Fix runtime PM imbalance in regs_show
    
    [ Upstream commit 69306a947b3ae21e0d1cbfc9508f00fec86c7297 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58f2c4df081f1f0b443e8373698b4eb357aa23b6
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:39 2021 +0800

    crypto: omap-aes - Fix PM reference leak on omap-aes.c
    
    [ Upstream commit 1f34cc4a8da34fbb250efb928f9b8c6fe7ee0642 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 728936b641fcb43b494b63f22b0fbac94229c5f3
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:37 2021 +0800

    crypto: sa2ul - Fix PM reference leak in sa_ul_probe()
    
    [ Upstream commit 13343badae093977295341d5a050f51ef128821c ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef8b29f1e948e5eee9581d7ab96cd0732f06cfc5
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:36 2021 +0800

    crypto: stm32/cryp - Fix PM reference leak on stm32-cryp.c
    
    [ Upstream commit 747bf30fd944f02f341b5f3bc7d97a13f2ae2fbe ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 994169b0d7bff44320ae808e08456bbb5fa97b05
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:35 2021 +0800

    crypto: stm32/hash - Fix PM reference leak on stm32-hash.c
    
    [ Upstream commit 1cb3ad701970e68f18a9e5d090baf2b1b703d729 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3de2b604df544151249f8cb0d439f7a555f04e8f
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:33 2021 +0800

    crypto: sun8i-ce - Fix PM reference leak in sun8i_ce_probe()
    
    [ Upstream commit cc987ae9150c255352660d235ab27c834aa527be ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06871eb9a326d6041920a0338512e9746c878afc
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:32 2021 +0800

    crypto: sun8i-ss - Fix PM reference leak when pm_runtime_get_sync() fails
    
    [ Upstream commit 06cd7423cf451d68bfab289278d7890c9ae01a14 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 077a90e774c15f037bcda73f30e679c779d64e2f
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:31 2021 +0800

    crypto: sun4i-ss - Fix PM reference leak when pm_runtime_get_sync() fails
    
    [ Upstream commit ac98fc5e1c321112dab9ccac9df892c154540f5d ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26f4ea0e0ca4ff532d256fc5f09bb2f4c5e87a5c
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Thu Apr 8 21:08:31 2021 +0800

    usb: core: hub: Fix PM reference leak in usb_port_resume()
    
    [ Upstream commit 025f97d188006eeee4417bb475a6878d1e0eed3f ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    thus a pairing decrement is needed.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Link: https://lore.kernel.org/r/20210408130831.56239-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e63746548f840638b692ae00265fb5e605dc6508
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Thu Apr 8 17:18:36 2021 +0800

    usb: musb: fix PM reference leak in musb_irq_work()
    
    [ Upstream commit 9535b99533904e9bc1607575aa8e9539a55435d7 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    thus a pairing decrement is needed.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Link: https://lore.kernel.org/r/20210408091836.55227-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32565a0616f984a85ccb4ed5067e6415d3dd1109
Author: Wang Li <wangli74@huawei.com>
Date:   Fri Apr 9 09:54:58 2021 +0000

    spi: qup: fix PM reference leak in spi_qup_remove()
    
    [ Upstream commit cec77e0a249892ceb10061bf17b63f9fb111d870 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/r/20210409095458.29921-1-wangli74@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e312452b9570e0a186c692da9516aea0f7c094cf
Author: Christophe Kerello <christophe.kerello@foss.st.com>
Date:   Mon Apr 19 14:15:39 2021 +0200

    spi: stm32-qspi: fix pm_runtime usage_count counter
    
    commit 102e9d1936569d43f55dd1ea89be355ad207143c upstream.
    
    pm_runtime usage_count counter is not well managed.
    pm_runtime_put_autosuspend callback drops the usage_counter but this
    one has never been increased. Add pm_runtime_get_sync callback to bump up
    the usage counter. It is also needed to use pm_runtime_force_suspend and
    pm_runtime_force_resume APIs to handle properly the clock.
    
    Fixes: 9d282c17b023 ("spi: stm32-qspi: Add pm_runtime support")
    Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210419121541.11617-2-patrice.chotard@foss.st.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91414cfeadbaaa5c40b301fef071b0e2694a0462
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 13:11:49 2021 +0800

    mfd: arizona: Fix rumtime PM imbalance on error
    
    [ Upstream commit fe6df2b48043bbe1e852b2320501d3b169363c35 ]
    
    pm_runtime_get_sync() will increase the rumtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04a1faa1c58e4fb340f214bb4107c57ead4dbf3b
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 07:46:06 2021 +0200

    media: sun8i-di: Fix runtime PM imbalance in deinterlace_start_streaming
    
    [ Upstream commit f1995d5e43cf897f63b4d7a7f84a252d891ae820 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 720141f6a4bd9ab1bd4a24cea443d98edb631b4e
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 07:43:13 2021 +0200

    media: platform: sti: Fix runtime PM imbalance in regs_show
    
    [ Upstream commit 69306a947b3ae21e0d1cbfc9508f00fec86c7297 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1c02d27e91b44f91d0d2279240f2a79ee9902ca
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:39 2021 +0800

    crypto: omap-aes - Fix PM reference leak on omap-aes.c
    
    [ Upstream commit 1f34cc4a8da34fbb250efb928f9b8c6fe7ee0642 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa71d6d8d9a7b9466f7b60977bda3900ac5d814a
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:37 2021 +0800

    crypto: sa2ul - Fix PM reference leak in sa_ul_probe()
    
    [ Upstream commit 13343badae093977295341d5a050f51ef128821c ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23ce80df99cda1b0c9687a1563580f5408106b35
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:36 2021 +0800

    crypto: stm32/cryp - Fix PM reference leak on stm32-cryp.c
    
    [ Upstream commit 747bf30fd944f02f341b5f3bc7d97a13f2ae2fbe ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bc8bcd694cee35a35c0d7dcf998e6b123eb1063
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:35 2021 +0800

    crypto: stm32/hash - Fix PM reference leak on stm32-hash.c
    
    [ Upstream commit 1cb3ad701970e68f18a9e5d090baf2b1b703d729 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab3ea6c14576262d061325e8a7e6094daeeb7db5
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:33 2021 +0800

    crypto: sun8i-ce - Fix PM reference leak in sun8i_ce_probe()
    
    [ Upstream commit cc987ae9150c255352660d235ab27c834aa527be ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1178a0881aedb53fb5febb7b64e5a4005d0e6426
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:32 2021 +0800

    crypto: sun8i-ss - Fix PM reference leak when pm_runtime_get_sync() fails
    
    [ Upstream commit 06cd7423cf451d68bfab289278d7890c9ae01a14 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d031d0162dcc461628594794a205100ac50d36ae
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Thu Apr 8 21:08:31 2021 +0800

    usb: core: hub: Fix PM reference leak in usb_port_resume()
    
    [ Upstream commit 025f97d188006eeee4417bb475a6878d1e0eed3f ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    thus a pairing decrement is needed.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Link: https://lore.kernel.org/r/20210408130831.56239-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fddf18368a38cc4b510bce90aeb4ccbeedc4686
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Thu Apr 8 17:18:36 2021 +0800

    usb: musb: fix PM reference leak in musb_irq_work()
    
    [ Upstream commit 9535b99533904e9bc1607575aa8e9539a55435d7 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    thus a pairing decrement is needed.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Link: https://lore.kernel.org/r/20210408091836.55227-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 259c2a5d2623c99757fbac916a66ca57a1a6f987
Author: Wang Li <wangli74@huawei.com>
Date:   Fri Apr 9 09:54:58 2021 +0000

    spi: qup: fix PM reference leak in spi_qup_remove()
    
    [ Upstream commit cec77e0a249892ceb10061bf17b63f9fb111d870 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/r/20210409095458.29921-1-wangli74@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31377a8b7cd3438450879f7e1d240f46b1c95cd0
Author: Christophe Kerello <christophe.kerello@foss.st.com>
Date:   Mon Apr 19 14:15:39 2021 +0200

    spi: stm32-qspi: fix pm_runtime usage_count counter
    
    commit 102e9d1936569d43f55dd1ea89be355ad207143c upstream.
    
    pm_runtime usage_count counter is not well managed.
    pm_runtime_put_autosuspend callback drops the usage_counter but this
    one has never been increased. Add pm_runtime_get_sync callback to bump up
    the usage counter. It is also needed to use pm_runtime_force_suspend and
    pm_runtime_force_resume APIs to handle properly the clock.
    
    Fixes: 9d282c17b023 ("spi: stm32-qspi: Add pm_runtime support")
    Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210419121541.11617-2-patrice.chotard@foss.st.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29dd19e3ac7b2a8671ebeac02859232ce0e34f58
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Tue May 11 17:03:21 2021 +0200

    media: exynos4-is: remove a now unused integer
    
    The usage of pm_runtime_resume_and_get() removed the need of a
    temporary integer. So, drop it.
    
    Fixes: 59f96244af94 ("media: exynos4-is: fix pm_runtime_get_sync() usage count")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 97a81d4051c39b855211dff5324273078ba8c05c
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 13:11:49 2021 +0800

    mfd: arizona: Fix rumtime PM imbalance on error
    
    [ Upstream commit fe6df2b48043bbe1e852b2320501d3b169363c35 ]
    
    pm_runtime_get_sync() will increase the rumtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b61ad26af553ccd8adfde76088366bbd927db61
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 07:46:06 2021 +0200

    media: sun8i-di: Fix runtime PM imbalance in deinterlace_start_streaming
    
    [ Upstream commit f1995d5e43cf897f63b4d7a7f84a252d891ae820 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 810cf54025b7c1562cb4dc1d7b93c5e4f9fc95f6
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 07:43:13 2021 +0200

    media: platform: sti: Fix runtime PM imbalance in regs_show
    
    [ Upstream commit 69306a947b3ae21e0d1cbfc9508f00fec86c7297 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d60792d129277af284a1804b929ff482201e5f0
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:39 2021 +0800

    crypto: omap-aes - Fix PM reference leak on omap-aes.c
    
    [ Upstream commit 1f34cc4a8da34fbb250efb928f9b8c6fe7ee0642 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92894b185321fd24e0b0144ac0f4cfcde49320a2
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:37 2021 +0800

    crypto: sa2ul - Fix PM reference leak in sa_ul_probe()
    
    [ Upstream commit 13343badae093977295341d5a050f51ef128821c ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e7ae0cfaca9ba57b6b10d4fe4d4bcefd9935db8
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:36 2021 +0800

    crypto: stm32/cryp - Fix PM reference leak on stm32-cryp.c
    
    [ Upstream commit 747bf30fd944f02f341b5f3bc7d97a13f2ae2fbe ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a090d492f70174f8a6c2270fe4ae8adc9f8eec6
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:35 2021 +0800

    crypto: stm32/hash - Fix PM reference leak on stm32-hash.c
    
    [ Upstream commit 1cb3ad701970e68f18a9e5d090baf2b1b703d729 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 836671775a6e726215b72b15fa7ca858ba6ae0e8
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:33 2021 +0800

    crypto: sun8i-ce - Fix PM reference leak in sun8i_ce_probe()
    
    [ Upstream commit cc987ae9150c255352660d235ab27c834aa527be ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2264965f576ff434ee7121edc98a83b072d4e645
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:32 2021 +0800

    crypto: sun8i-ss - Fix PM reference leak when pm_runtime_get_sync() fails
    
    [ Upstream commit 06cd7423cf451d68bfab289278d7890c9ae01a14 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2946f95356cc93619e9972cae17bad973993ba45
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Thu Apr 8 21:08:31 2021 +0800

    usb: core: hub: Fix PM reference leak in usb_port_resume()
    
    [ Upstream commit 025f97d188006eeee4417bb475a6878d1e0eed3f ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    thus a pairing decrement is needed.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Link: https://lore.kernel.org/r/20210408130831.56239-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e82da9b21fedb455b23bcb5511cbde82ad6ed7d5
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Thu Apr 8 17:18:36 2021 +0800

    usb: musb: fix PM reference leak in musb_irq_work()
    
    [ Upstream commit 9535b99533904e9bc1607575aa8e9539a55435d7 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    thus a pairing decrement is needed.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Link: https://lore.kernel.org/r/20210408091836.55227-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e73535a496c6c52e56137a61e2476368d7aec52
Author: Wang Li <wangli74@huawei.com>
Date:   Fri Apr 9 09:54:58 2021 +0000

    spi: qup: fix PM reference leak in spi_qup_remove()
    
    [ Upstream commit cec77e0a249892ceb10061bf17b63f9fb111d870 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/r/20210409095458.29921-1-wangli74@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 421f24114c64eb926164e16e717e155b73cd553c
Author: Christophe Kerello <christophe.kerello@foss.st.com>
Date:   Mon Apr 19 14:15:39 2021 +0200

    spi: stm32-qspi: fix pm_runtime usage_count counter
    
    commit 102e9d1936569d43f55dd1ea89be355ad207143c upstream.
    
    pm_runtime usage_count counter is not well managed.
    pm_runtime_put_autosuspend callback drops the usage_counter but this
    one has never been increased. Add pm_runtime_get_sync callback to bump up
    the usage counter. It is also needed to use pm_runtime_force_suspend and
    pm_runtime_force_resume APIs to handle properly the clock.
    
    Fixes: 9d282c17b023 ("spi: stm32-qspi: Add pm_runtime support")
    Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210419121541.11617-2-patrice.chotard@foss.st.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02c13900477cdf9ad8d40dc76f648b52dd5f4386
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 13:11:49 2021 +0800

    mfd: arizona: Fix rumtime PM imbalance on error
    
    [ Upstream commit fe6df2b48043bbe1e852b2320501d3b169363c35 ]
    
    pm_runtime_get_sync() will increase the rumtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ca05c0e04d5ad791068eafc413681ba51478975
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 07:43:13 2021 +0200

    media: platform: sti: Fix runtime PM imbalance in regs_show
    
    [ Upstream commit 69306a947b3ae21e0d1cbfc9508f00fec86c7297 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 229d2c12f1eb4492df87988214d373fe001a378c
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:39 2021 +0800

    crypto: omap-aes - Fix PM reference leak on omap-aes.c
    
    [ Upstream commit 1f34cc4a8da34fbb250efb928f9b8c6fe7ee0642 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c411b92439da8447147b657bf4de48b9d517f43
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:36 2021 +0800

    crypto: stm32/cryp - Fix PM reference leak on stm32-cryp.c
    
    [ Upstream commit 747bf30fd944f02f341b5f3bc7d97a13f2ae2fbe ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6d5c66737a9269bb28ee7efb1d186fe7d5bf336
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:35 2021 +0800

    crypto: stm32/hash - Fix PM reference leak on stm32-hash.c
    
    [ Upstream commit 1cb3ad701970e68f18a9e5d090baf2b1b703d729 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 665dbcf35508b09ee8c861c1c174e9fa65ef32b4
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Thu Apr 8 21:08:31 2021 +0800

    usb: core: hub: Fix PM reference leak in usb_port_resume()
    
    [ Upstream commit 025f97d188006eeee4417bb475a6878d1e0eed3f ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    thus a pairing decrement is needed.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Link: https://lore.kernel.org/r/20210408130831.56239-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8035ac2ad0871cde3d3f8df81b1a8bdb53a8c81
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Thu Apr 8 17:18:36 2021 +0800

    usb: musb: fix PM reference leak in musb_irq_work()
    
    [ Upstream commit 9535b99533904e9bc1607575aa8e9539a55435d7 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    thus a pairing decrement is needed.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Link: https://lore.kernel.org/r/20210408091836.55227-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 972639ed7b90fd4887b54bf3c644b85c8213dae5
Author: Wang Li <wangli74@huawei.com>
Date:   Fri Apr 9 09:54:58 2021 +0000

    spi: qup: fix PM reference leak in spi_qup_remove()
    
    [ Upstream commit cec77e0a249892ceb10061bf17b63f9fb111d870 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/r/20210409095458.29921-1-wangli74@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a20a40a8bbc2cf4b29d7248ea31e974e9103dd7f
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 15 15:33:38 2021 +0800

    clk: renesas: rcar-usb2-clock-sel: Fix error handling in .probe()
    
    The error handling paths after pm_runtime_get_sync() have no refcount
    decrement, which leads to refcount leak.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20210415073338.22287-1-dinghao.liu@zju.edu.cn
    [geert: Remove now unused variable priv]
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>

commit 59087b66ea6730c130c57d23bd9fd139b78c1ba5
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:18 2021 +0200

    media: exynos-gsc: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a bonus, as pm_runtime_get_sync() always return 0 on
    success, the logic can be simplified.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 59f96244af9403ddf4810ec5c0fbe8920857634e
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:17 2021 +0200

    media: exynos4-is: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    On some places, this is ok, but on others the usage count
    ended being unbalanced on failures.
    
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a bonus, such function always return zero on success. So,
    some code can be simplified.
    
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit c44eac5b72e23c31eefc0e10a71d9650036b8341
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:21 2021 +0200

    media: sti/bdisp: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    The bdisp_start_streaming() doesn't take it into account, which
    would unbalance PM usage counter at bdisp_stop_streaming().
    
    The logic at bdisp_probe() is correct, but the best is to use
    the same call along the driver.
    
    So, replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 9c298f82d8392f799a0595f50076afa1d91e9092
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:10 2021 +0200

    media: sunxi: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 10343de268d10cf07b092b8b525e12ad558ead77
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:10 2021 +0200

    media: s5p-jpeg: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    As a plus, pm_runtime_resume_and_get() doesn't return
    positive numbers, so the return code validation can
    be removed.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Andrzej Pietrasiewicz <andrzejtp2010@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 908711f542c17fe61e5d653da1beb8e5ab5c7b50
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:09 2021 +0200

    media: mtk-vcodec: fix PM runtime get logic
    
    Currently, the driver just assumes that PM runtime logic
    succeded resuming the device.
    
    That may not be the case, as pm_runtime_get_sync()
    can fail (but keeping the usage count incremented).
    
    Replace the code to use pm_runtime_resume_and_get(),
    and letting it return the error code.
    
    This way, if mtk_vcodec_dec_pw_on() fails, the logic
    under fops_vcodec_open() will do the right thing and
    return an error, instead of just assuming that the
    device is ready to be used.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 6e8b1526db164c9d4b9dacfb9bc48e365d7c4860
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:07:41 2021 +0200

    media: sh_vou: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, check if the PM runtime error was caught at open time.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit c41e02493334985cca1a22efd5ca962ce3abb061
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:05:27 2021 +0200

    media: am437x: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, ensure that the driver will check if PM runtime
    resumed at vpfe_initialize_device().
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit fdc34e82c0f968ac4c157bd3d8c299ebc24c9c63
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:04:23 2021 +0200

    media: s5p: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, check if the PM runtime error was caught at
    s5p_cec_adap_enable().
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Acked-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 220955ec3c84505ec6a75bea494ec61f5295ef7a
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:03:23 2021 +0200

    media: renesas-ceu: Properly check for PM errors
    
    Right now, the driver just assumes that PM runtime resume
    worked, but it may fail.
    
    Well, the pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    So, using it is tricky. Let's replace it by the new
    pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    and return an error if something bad happens.
    
    This should ensure that the PM runtime usage_count will be
    properly decremented if an error happens at open time.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: Jacopo Mondi <jacopo@jmondi.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 45e75a8c6fa455a5909ac04db76a4b15d6bb8368
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:59:34 2021 +0200

    media: rcar_fdp1: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Also, right now, the driver is ignoring any troubles when
    trying to do PM resume. So, add the proper error handling
    for the code.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit d07bb9702cf5f5ccf3fb661e6cab54bbc33cd23f
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:57:16 2021 +0200

    media: mdk-mdp: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    While here, fix the return contition of mtk_mdp_m2m_start_streaming(),
    as it doesn't make any sense to return 0 if the PM runtime failed
    to resume.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit e7c617cab7a522fba5b20f9033ee98565b6f3546
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:54:25 2021 +0200

    media: marvel-ccic: fix some issues when getting pm_runtime
    
    Calling pm_runtime_get_sync() is bad, since even when it
    returns an error, pm_runtime_put*() should be called.
    So, use instead pm_runtime_resume_and_get().
    
    While here, ensure that the error condition will be checked
    during clock enable an media open() calls.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit dd97908ee35096356fb4111bb77d5f94bcfe337d
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 16:47:42 2021 +0200

    media: atmel: properly get pm_runtime
    
    There are several issues in the way the atmel driver handles
    pm_runtime_get_sync():
    
    - it doesn't check return codes;
    - it doesn't properly decrement the usage_count on all places;
    - it starts streaming even if pm_runtime_get_sync() fails.
    - while it tries to get pm_runtime at the clock enable logic,
      it doesn't check if the operation was suceeded.
    
    Replace all occurrences of it to use the new kAPI:
    pm_runtime_resume_and_get(), which ensures that, if the
    return code is not negative, the usage_count was incremented.
    
    With that, add additional checks when this is called, in order
    to ensure that errors will be properly addressed.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit e6695c89b3d4595f60c9fe40e0938e085d15dd20
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Tue Apr 27 11:43:54 2021 +0200

    media: exynos-gsc: don't resume at remove time
    
    Calling pm_runtime_get_sync() at driver's removal time is not
    needed, as this will resume PM runtime. Also, the PM runtime
    code at pm_runtime_disable() already calls it, if it detects
    the need.
    
    So, change the logic in order to disable PM runtime earlier.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 62c90446868b439929cb04395f04a709a64ae04b
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:13 2021 +0200

    media: i2c: imx334: fix the pm runtime get logic
    
    The PM runtime get logic is currently broken, as it checks if
    ret is zero instead of checking if it is an error code,
    as reported by Dan Carpenter.
    
    While here, use the pm_runtime_resume_and_get() as added by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    added pm_runtime_resume_and_get() in order to automatically handle
    dev->power.usage_count decrement on errors. As a bonus, such function
    always return zero on success.
    
    It should also be noticed that a fail of pm_runtime_get_sync() would
    potentially result in a spurious runtime_suspend(), instead of
    using pm_runtime_put_noidle().
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Daniele Alessandrelli <daniele.alessandrelli@intel.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit da3a1858c3a37c09446e1470c48352897d59d11b
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:11 2021 +0200

    media: i2c: ccs-core: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    
    There is a bug at ccs_pm_get_init(): when this function returns
    an error, the stream is not started, and RPM usage_count
    should not be incremented. However, if the calls to
    v4l2_ctrl_handler_setup() return errors, it will be kept
    incremented.
    
    At ccs_suspend() the best is to replace it by the new
    pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter automatically,
    in the case of errors.
    
    Fixes: 96e3a6b92f23 ("media: smiapp: Avoid maintaining power state information")
    Cc: stable@vger.kernel.org
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit e90812c47b958407b54d05780dc483fdc1b57a93
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Apr 23 17:19:11 2021 +0200

    staging: media: rkvdec: fix pm_runtime_get_sync() usage count
    
    The pm_runtime_get_sync() internally increments the
    dev->power.usage_count without decrementing it, even on errors.
    Replace it by the new pm_runtime_resume_and_get(), introduced by:
    commit dd8088d5a896 ("PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter")
    in order to properly decrement the usage counter, avoiding
    a potential PM usage counter leak.
    
    Reviewed-by: Ezequiel Garcia <ezequiel@collabora.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 50ef92b0d109f614534880e543d527a3135797ab
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri Apr 9 16:28:05 2021 +0800

    dmaengine: tegra20: Fix runtime PM imbalance on error
    
    [ Upstream commit 917a3200b9f467a154999c7572af345f2470aaf4 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Link: https://lore.kernel.org/r/20210409082805.23643-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d33031a894d2f6476e54cccfbfa9f7971e5522af
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri Apr 9 16:28:05 2021 +0800

    dmaengine: tegra20: Fix runtime PM imbalance on error
    
    [ Upstream commit 917a3200b9f467a154999c7572af345f2470aaf4 ]
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Link: https://lore.kernel.org/r/20210409082805.23643-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 102e9d1936569d43f55dd1ea89be355ad207143c
Author: Christophe Kerello <christophe.kerello@foss.st.com>
Date:   Mon Apr 19 14:15:39 2021 +0200

    spi: stm32-qspi: fix pm_runtime usage_count counter
    
    pm_runtime usage_count counter is not well managed.
    pm_runtime_put_autosuspend callback drops the usage_counter but this
    one has never been increased. Add pm_runtime_get_sync callback to bump up
    the usage counter. It is also needed to use pm_runtime_force_suspend and
    pm_runtime_force_resume APIs to handle properly the clock.
    
    Fixes: 9d282c17b023 ("spi: stm32-qspi: Add pm_runtime support")
    Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210419121541.11617-2-patrice.chotard@foss.st.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 1f34cc4a8da34fbb250efb928f9b8c6fe7ee0642
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:39 2021 +0800

    crypto: omap-aes - Fix PM reference leak on omap-aes.c
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 13343badae093977295341d5a050f51ef128821c
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:37 2021 +0800

    crypto: sa2ul - Fix PM reference leak in sa_ul_probe()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 747bf30fd944f02f341b5f3bc7d97a13f2ae2fbe
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:36 2021 +0800

    crypto: stm32/cryp - Fix PM reference leak on stm32-cryp.c
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 1cb3ad701970e68f18a9e5d090baf2b1b703d729
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:35 2021 +0800

    crypto: stm32/hash - Fix PM reference leak on stm32-hash.c
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit cc987ae9150c255352660d235ab27c834aa527be
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:33 2021 +0800

    crypto: sun8i-ce - Fix PM reference leak in sun8i_ce_probe()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 06cd7423cf451d68bfab289278d7890c9ae01a14
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:32 2021 +0800

    crypto: sun8i-ss - Fix PM reference leak when pm_runtime_get_sync() fails
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit ac98fc5e1c321112dab9ccac9df892c154540f5d
Author: Shixin Liu <liushixin2@huawei.com>
Date:   Thu Apr 8 15:18:31 2021 +0800

    crypto: sun4i-ss - Fix PM reference leak when pm_runtime_get_sync() fails
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Signed-off-by: Shixin Liu <liushixin2@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit fe6df2b48043bbe1e852b2320501d3b169363c35
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 13:11:49 2021 +0800

    mfd: arizona: Fix rumtime PM imbalance on error
    
    pm_runtime_get_sync() will increase the rumtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit c4b1fcc310e655fa8414696c38a84d36c00684c8
Author: Ye Weihua <yeweihua4@huawei.com>
Date:   Thu Apr 8 19:06:38 2021 +0800

    i2c: imx: Fix PM reference leak in i2c_imx_reg_slave()
    
    pm_runtime_get_sync() will increment the PM reference count even on
    failure. Forgetting to put the reference again will result in a leak.
    
    Replace it with pm_runtime_resume_and_get() to keep the usage counter
    balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Ye Weihua <yeweihua4@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit a85c5c7a3aa8041777ff691400b4046e56149fd3
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:46 2020 +0800

    i2c: xiic: fix reference leak when pm_runtime_get_sync fails
    
    The PM reference count is not expected to be incremented on
    return in xiic_xfer and xiic_i2c_remove.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 10b17004a74c ("i2c: xiic: Fix the clocking across bind unbind")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 2c662660ce2bd3b09dae21a9a9ac9395e1e6c00b
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:45 2020 +0800

    i2c: stm32f7: fix reference leak when pm_runtime_get_sync fails
    
    The PM reference count is not expected to be incremented on
    return in these stm32f7_i2c_xx serious functions.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: ea6dd25deeb5 ("i2c: stm32f7: add PM_SLEEP suspend/resume support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 3a4f326463117cee3adcb72999ca34a9aaafda93
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:44 2020 +0800

    i2c: sprd: fix reference leak when pm_runtime_get_sync fails
    
    The PM reference count is not expected to be incremented on
    return in sprd_i2c_master_xfer() and sprd_i2c_remove().
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 8b9ec0719834 ("i2c: Add Spreadtrum I2C controller driver")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 780f629741257ed6c54bd3eb53b57f648eabf200
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:43 2020 +0800

    i2c: omap: fix reference leak when pm_runtime_get_sync fails
    
    The PM reference count is not expected to be incremented on
    return in omap_i2c_probe() and omap_i2c_remove().
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here. I Replace it with pm_runtime_resume_and_get
    to keep usage counter balanced.
    
    What's more, error path 'err_free_mem' seems not like a proper
    name any more. So I change the name to err_disable_pm and move
    pm_runtime_disable below, for pm_runtime of 'pdev->dev' should
    be disabled when pm_runtime_resume_and_get fails.
    
    Fixes: 3b0fb97c8dc4 ("I2C: OMAP: Handle error check for pm runtime")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Reviewed-by: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 47ff617217ca6a13194fcb35c6c3a0c57c080693
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:41 2020 +0800

    i2c: imx: fix reference leak when pm_runtime_get_sync fails
    
    In i2c_imx_xfer() and i2c_imx_remove(), the pm reference count
    is not expected to be incremented on return.
    
    However, pm_runtime_get_sync will increment pm reference count
    even failed. Forgetting to putting operation will result in a
    reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 3a5ee18d2a32 ("i2c: imx: implement master_xfer_atomic callback")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Reviewed-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 278e5bbdb9a94fa063c0f9bcde2479d0b8042462
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:40 2020 +0800

    i2c: imx-lpi2c: fix reference leak when pm_runtime_get_sync fails
    
    The PM reference count is not expected to be incremented on
    return in lpi2c_imx_master_enable.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 13d6eb20fc79 ("i2c: imx-lpi2c: add runtime pm support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 223125e37af8a641ea4a09747a6a52172fc4b903
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:39 2020 +0800

    i2c: img-scb: fix reference leak when pm_runtime_get_sync fails
    
    The PM reference count is not expected to be incremented on
    return in functions img_i2c_xfer and img_i2c_init.
    
    However, pm_runtime_get_sync will increment the PM reference
    count even failed. Forgetting to putting operation will result
    in a reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 93222bd9b966 ("i2c: img-scb: Add runtime PM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 23ceb8462dc6f4b4decdb5536a7e5fc477cdf0b6
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 17:31:17 2020 +0800

    i2c: cadence: fix reference leak when pm_runtime_get_sync fails
    
    The PM reference count is not expected to be incremented on
    return in functions cdns_i2c_master_xfer and cdns_reg_slave.
    
    However, pm_runtime_get_sync will increment pm usage counter
    even failed. Forgetting to putting operation will result in a
    reference leak here.
    
    Replace it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 7fa32329ca03 ("i2c: cadence: Move to sensible power management")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 6ce2c05b21189eb17b3aa26720cc5841acf9dce8
Author: Yong Wu <yong.wu@mediatek.com>
Date:   Sat Apr 10 17:11:16 2021 +0800

    memory: mtk-smi: Add device-link between smi-larb and smi-common
    
    Normally, If the smi-larb HW need work, we should enable the smi-common
    HW power and clock firstly.
    This patch adds device-link between the smi-larb dev and the smi-common
    dev. then If pm_runtime_get_sync(smi-larb-dev), the pm_runtime_get_sync
    (smi-common-dev) will be called automatically.
    
    Also, Add DL_FLAG_STATELESS to avoid the smi-common clocks be gated when
    probe.
    
    CC: Matthias Brugger <matthias.bgg@gmail.com>
    Suggested-by: Tomasz Figa <tfiga@chromium.org>
    Signed-off-by: Yong Wu <yong.wu@mediatek.com>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20210410091128.31823-5-yong.wu@mediatek.com

commit 917a3200b9f467a154999c7572af345f2470aaf4
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri Apr 9 16:28:05 2021 +0800

    dmaengine: tegra20: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Link: https://lore.kernel.org/r/20210409082805.23643-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 025f97d188006eeee4417bb475a6878d1e0eed3f
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Thu Apr 8 21:08:31 2021 +0800

    usb: core: hub: Fix PM reference leak in usb_port_resume()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    thus a pairing decrement is needed.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Link: https://lore.kernel.org/r/20210408130831.56239-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9535b99533904e9bc1607575aa8e9539a55435d7
Author: Bixuan Cui <cuibixuan@huawei.com>
Date:   Thu Apr 8 17:18:36 2021 +0800

    usb: musb: fix PM reference leak in musb_irq_work()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    thus a pairing decrement is needed.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Bixuan Cui <cuibixuan@huawei.com>
    Link: https://lore.kernel.org/r/20210408091836.55227-1-cuibixuan@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cec77e0a249892ceb10061bf17b63f9fb111d870
Author: Wang Li <wangli74@huawei.com>
Date:   Fri Apr 9 09:54:58 2021 +0000

    spi: qup: fix PM reference leak in spi_qup_remove()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/r/20210409095458.29921-1-wangli74@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit a03675497970a93fcf25d81d9d92a59c2d7377a7
Author: Wang Li <wangli74@huawei.com>
Date:   Fri Apr 9 09:54:30 2021 +0000

    spi: fsl-lpspi: Fix PM reference leak in lpspi_prepare_xfer_hardware()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in reference leak here.
    Fix it by replacing it with pm_runtime_resume_and_get to keep usage
    counter balanced.
    
    Fixes: 944c01a889d9 ("spi: lpspi: enable runtime pm for lpspi")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Li <wangli74@huawei.com>
    Link: https://lore.kernel.org/r/20210409095430.29868-1-wangli74@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit f1995d5e43cf897f63b4d7a7f84a252d891ae820
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 07:46:06 2021 +0200

    media: sun8i-di: Fix runtime PM imbalance in deinterlace_start_streaming
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 69306a947b3ae21e0d1cbfc9508f00fec86c7297
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Apr 7 07:43:13 2021 +0200

    media: platform: sti: Fix runtime PM imbalance in regs_show
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 5859c926d1f052ee61b5815b14658875c14f6243
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Apr 8 15:26:58 2021 +0800

    PCI: tegra: Fix runtime PM imbalance in pex_ep_event_pex_rst_deassert()
    
    pm_runtime_get_sync() will increase the runtime PM counter
    even it returns an error. Thus a pairing decrement is needed
    to prevent refcount leak. Fix this by replacing this API with
    pm_runtime_resume_and_get(), which will not change the runtime
    PM counter on error.
    
    Link: https://lore.kernel.org/r/20210408072700.15791-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thierry Reding <treding@nvidia.com>

commit d0c537873218929667526ecd2a335843f3b4d897
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 26 12:56:18 2021 +0200

    PM: runtime: Fix ordering in pm_runtime_get_suppliers()
    
    commit c0c33442f7203704aef345647e14c2fb86071001 upstream.
    
    rpm_active indicates how many times the supplier usage_count has been
    incremented. Consequently it must be updated after pm_runtime_get_sync() of
    the supplier, not before.
    
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a59577a9d9e70d40f78bd61f9186cd4defac280
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 26 12:56:19 2021 +0200

    PM: runtime: Fix race getting/putting suppliers at probe
    
    commit 9dfacc54a8661bc8be6e08cffee59596ec59f263 upstream.
    
    pm_runtime_put_suppliers() must not decrement rpm_active unless the
    consumer is suspended. That is because, otherwise, it could suspend
    suppliers for an active consumer.
    
    That can happen as follows:
    
     static int driver_probe_device(struct device_driver *drv, struct device *dev)
     {
            int ret = 0;
    
            if (!device_is_registered(dev))
                    return -ENODEV;
    
            dev->can_match = true;
            pr_debug("bus: '%s': %s: matched device %s with driver %s\n",
                     drv->bus->name, __func__, dev_name(dev), drv->name);
    
            pm_runtime_get_suppliers(dev);
            if (dev->parent)
                    pm_runtime_get_sync(dev->parent);
    
     At this point, dev can runtime suspend so rpm_put_suppliers() can run,
     rpm_active becomes 1 (the lowest value).
    
            pm_runtime_barrier(dev);
            if (initcall_debug)
                    ret = really_probe_debug(dev, drv);
            else
                    ret = really_probe(dev, drv);
    
     Probe callback can have runtime resumed dev, and then runtime put
     so dev is awaiting autosuspend, but rpm_active is 2.
    
            pm_request_idle(dev);
    
            if (dev->parent)
                    pm_runtime_put(dev->parent);
    
            pm_runtime_put_suppliers(dev);
    
     Now pm_runtime_put_suppliers() will put the supplier
     i.e. rpm_active 2 -> 1, but consumer can still be active.
    
            return ret;
     }
    
    Fix by checking the runtime status. For any status other than
    RPM_SUSPENDED, rpm_active can be considered to be "owned" by
    rpm_[get/put]_suppliers() and pm_runtime_put_suppliers() need do nothing.
    
    Reported-by: Asutosh Das <asutoshd@codeaurora.org>
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc038ab785a836677bfae8756e24e1e9ace00632
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 26 12:56:18 2021 +0200

    PM: runtime: Fix ordering in pm_runtime_get_suppliers()
    
    commit c0c33442f7203704aef345647e14c2fb86071001 upstream.
    
    rpm_active indicates how many times the supplier usage_count has been
    incremented. Consequently it must be updated after pm_runtime_get_sync() of
    the supplier, not before.
    
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da2976cd711b2e895ddc44f6975290762d7d08c9
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 26 12:56:19 2021 +0200

    PM: runtime: Fix race getting/putting suppliers at probe
    
    commit 9dfacc54a8661bc8be6e08cffee59596ec59f263 upstream.
    
    pm_runtime_put_suppliers() must not decrement rpm_active unless the
    consumer is suspended. That is because, otherwise, it could suspend
    suppliers for an active consumer.
    
    That can happen as follows:
    
     static int driver_probe_device(struct device_driver *drv, struct device *dev)
     {
            int ret = 0;
    
            if (!device_is_registered(dev))
                    return -ENODEV;
    
            dev->can_match = true;
            pr_debug("bus: '%s': %s: matched device %s with driver %s\n",
                     drv->bus->name, __func__, dev_name(dev), drv->name);
    
            pm_runtime_get_suppliers(dev);
            if (dev->parent)
                    pm_runtime_get_sync(dev->parent);
    
     At this point, dev can runtime suspend so rpm_put_suppliers() can run,
     rpm_active becomes 1 (the lowest value).
    
            pm_runtime_barrier(dev);
            if (initcall_debug)
                    ret = really_probe_debug(dev, drv);
            else
                    ret = really_probe(dev, drv);
    
     Probe callback can have runtime resumed dev, and then runtime put
     so dev is awaiting autosuspend, but rpm_active is 2.
    
            pm_request_idle(dev);
    
            if (dev->parent)
                    pm_runtime_put(dev->parent);
    
            pm_runtime_put_suppliers(dev);
    
     Now pm_runtime_put_suppliers() will put the supplier
     i.e. rpm_active 2 -> 1, but consumer can still be active.
    
            return ret;
     }
    
    Fix by checking the runtime status. For any status other than
    RPM_SUSPENDED, rpm_active can be considered to be "owned" by
    rpm_[get/put]_suppliers() and pm_runtime_put_suppliers() need do nothing.
    
    Reported-by: Asutosh Das <asutoshd@codeaurora.org>
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07b19a118d2fa32958b4439be3eb4425776e823d
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 26 12:56:18 2021 +0200

    PM: runtime: Fix ordering in pm_runtime_get_suppliers()
    
    commit c0c33442f7203704aef345647e14c2fb86071001 upstream.
    
    rpm_active indicates how many times the supplier usage_count has been
    incremented. Consequently it must be updated after pm_runtime_get_sync() of
    the supplier, not before.
    
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72a667681cc4b0dafc248f5c0730a7e2ce3bc679
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 26 12:56:19 2021 +0200

    PM: runtime: Fix race getting/putting suppliers at probe
    
    commit 9dfacc54a8661bc8be6e08cffee59596ec59f263 upstream.
    
    pm_runtime_put_suppliers() must not decrement rpm_active unless the
    consumer is suspended. That is because, otherwise, it could suspend
    suppliers for an active consumer.
    
    That can happen as follows:
    
     static int driver_probe_device(struct device_driver *drv, struct device *dev)
     {
            int ret = 0;
    
            if (!device_is_registered(dev))
                    return -ENODEV;
    
            dev->can_match = true;
            pr_debug("bus: '%s': %s: matched device %s with driver %s\n",
                     drv->bus->name, __func__, dev_name(dev), drv->name);
    
            pm_runtime_get_suppliers(dev);
            if (dev->parent)
                    pm_runtime_get_sync(dev->parent);
    
     At this point, dev can runtime suspend so rpm_put_suppliers() can run,
     rpm_active becomes 1 (the lowest value).
    
            pm_runtime_barrier(dev);
            if (initcall_debug)
                    ret = really_probe_debug(dev, drv);
            else
                    ret = really_probe(dev, drv);
    
     Probe callback can have runtime resumed dev, and then runtime put
     so dev is awaiting autosuspend, but rpm_active is 2.
    
            pm_request_idle(dev);
    
            if (dev->parent)
                    pm_runtime_put(dev->parent);
    
            pm_runtime_put_suppliers(dev);
    
     Now pm_runtime_put_suppliers() will put the supplier
     i.e. rpm_active 2 -> 1, but consumer can still be active.
    
            return ret;
     }
    
    Fix by checking the runtime status. For any status other than
    RPM_SUSPENDED, rpm_active can be considered to be "owned" by
    rpm_[get/put]_suppliers() and pm_runtime_put_suppliers() need do nothing.
    
    Reported-by: Asutosh Das <asutoshd@codeaurora.org>
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f40a359356b05ec28a802d6c60babdee3f90e44
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 26 12:56:18 2021 +0200

    PM: runtime: Fix ordering in pm_runtime_get_suppliers()
    
    commit c0c33442f7203704aef345647e14c2fb86071001 upstream.
    
    rpm_active indicates how many times the supplier usage_count has been
    incremented. Consequently it must be updated after pm_runtime_get_sync() of
    the supplier, not before.
    
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e5e97b164e90b4ad28cf617f3164581cd4f4b11
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 26 12:56:19 2021 +0200

    PM: runtime: Fix race getting/putting suppliers at probe
    
    commit 9dfacc54a8661bc8be6e08cffee59596ec59f263 upstream.
    
    pm_runtime_put_suppliers() must not decrement rpm_active unless the
    consumer is suspended. That is because, otherwise, it could suspend
    suppliers for an active consumer.
    
    That can happen as follows:
    
     static int driver_probe_device(struct device_driver *drv, struct device *dev)
     {
            int ret = 0;
    
            if (!device_is_registered(dev))
                    return -ENODEV;
    
            dev->can_match = true;
            pr_debug("bus: '%s': %s: matched device %s with driver %s\n",
                     drv->bus->name, __func__, dev_name(dev), drv->name);
    
            pm_runtime_get_suppliers(dev);
            if (dev->parent)
                    pm_runtime_get_sync(dev->parent);
    
     At this point, dev can runtime suspend so rpm_put_suppliers() can run,
     rpm_active becomes 1 (the lowest value).
    
            pm_runtime_barrier(dev);
            if (initcall_debug)
                    ret = really_probe_debug(dev, drv);
            else
                    ret = really_probe(dev, drv);
    
     Probe callback can have runtime resumed dev, and then runtime put
     so dev is awaiting autosuspend, but rpm_active is 2.
    
            pm_request_idle(dev);
    
            if (dev->parent)
                    pm_runtime_put(dev->parent);
    
            pm_runtime_put_suppliers(dev);
    
     Now pm_runtime_put_suppliers() will put the supplier
     i.e. rpm_active 2 -> 1, but consumer can still be active.
    
            return ret;
     }
    
    Fix by checking the runtime status. For any status other than
    RPM_SUSPENDED, rpm_active can be considered to be "owned" by
    rpm_[get/put]_suppliers() and pm_runtime_put_suppliers() need do nothing.
    
    Reported-by: Asutosh Das <asutoshd@codeaurora.org>
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd0008beef0dda915a255691e8b3b0527efaf1d8
Author: Irui Wang <irui.wang@mediatek.com>
Date:   Thu Mar 25 13:26:23 2021 +0100

    media: dt-bindings: media: mtk-vcodec: Separating mtk vcodec encoder node
    
    Updates binding document since the avc and vp8 hardware encoder in
    MT8173 are now separated. Separate "mediatek,mt8173-vcodec-enc" to
    "mediatek,mt8173-vcodec-enc-vp8" and "mediatek,mt8173-vcodec-enc".
    
    This patch is not a compatible change, but we must do this modifaction
    because MediaTek IOMMU add the device_link between the smi-larb
    device and venc_device, if the venc device call the pm_runtime_get_sync,
    the smi-larb's pm_runtime_get_sync also be called automatically.
    
    There is a bit of backward compatibility for avc encoder, the avc
    encoder device node still has compatible "mediatek,mt8173-vcodec-enc".
    
    Acked-by: Tiffany Lin <tiffany.lin@mediatek.com>
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: Maoguang Meng <maoguang.meng@mediatek.com>
    Signed-off-by: Irui Wang <irui.wang@mediatek.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 8f5586dc2d1829d16f602b3d3237b9415ca95cce
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Fri Jan 8 01:05:19 2021 +0100

    media: imx: imx7_mipi_csis: Runtime suspend in .s_stream() error path
    
    If the .s_stream() handler fails after calling pm_runtime_get_sync(),
    call pm_runtime_put() in the error path.
    
    While at it add a few blank lines to make the code more readable.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 9dfacc54a8661bc8be6e08cffee59596ec59f263
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 26 12:56:19 2021 +0200

    PM: runtime: Fix race getting/putting suppliers at probe
    
    pm_runtime_put_suppliers() must not decrement rpm_active unless the
    consumer is suspended. That is because, otherwise, it could suspend
    suppliers for an active consumer.
    
    That can happen as follows:
    
     static int driver_probe_device(struct device_driver *drv, struct device *dev)
     {
            int ret = 0;
    
            if (!device_is_registered(dev))
                    return -ENODEV;
    
            dev->can_match = true;
            pr_debug("bus: '%s': %s: matched device %s with driver %s\n",
                     drv->bus->name, __func__, dev_name(dev), drv->name);
    
            pm_runtime_get_suppliers(dev);
            if (dev->parent)
                    pm_runtime_get_sync(dev->parent);
    
     At this point, dev can runtime suspend so rpm_put_suppliers() can run,
     rpm_active becomes 1 (the lowest value).
    
            pm_runtime_barrier(dev);
            if (initcall_debug)
                    ret = really_probe_debug(dev, drv);
            else
                    ret = really_probe(dev, drv);
    
     Probe callback can have runtime resumed dev, and then runtime put
     so dev is awaiting autosuspend, but rpm_active is 2.
    
            pm_request_idle(dev);
    
            if (dev->parent)
                    pm_runtime_put(dev->parent);
    
            pm_runtime_put_suppliers(dev);
    
     Now pm_runtime_put_suppliers() will put the supplier
     i.e. rpm_active 2 -> 1, but consumer can still be active.
    
            return ret;
     }
    
    Fix by checking the runtime status. For any status other than
    RPM_SUSPENDED, rpm_active can be considered to be "owned" by
    rpm_[get/put]_suppliers() and pm_runtime_put_suppliers() need do nothing.
    
    Reported-by: Asutosh Das <asutoshd@codeaurora.org>
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit c0c33442f7203704aef345647e14c2fb86071001
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Mar 26 12:56:18 2021 +0200

    PM: runtime: Fix ordering in pm_runtime_get_suppliers()
    
    rpm_active indicates how many times the supplier usage_count has been
    incremented. Consequently it must be updated after pm_runtime_get_sync() of
    the supplier, not before.
    
    Fixes: 4c06c4e6cf63 ("driver core: Fix possible supplier PM-usage counter imbalance")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 5.1+ <stable@vger.kernel.org> # 5.1+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 3f994c25868729fb63a4eef42a7040e563eff365
Merge: b5cf28f7a890 ecd77d494ec9
Author: Mark Brown <broonie@kernel.org>
Date:   Wed Mar 24 23:29:33 2021 +0000

    Merge series "MFD/extcon/ASoC: Rework arizona codec jack-detect support" from Hans de Goede <hdegoede@redhat.com>:
    
    Hi All,
    
    Here is v4 of my series to rework the arizona codec jack-detect support
    to use the snd_soc_jack helpers instead of direct extcon reporting.
    
    As discussed before here is a resend rebased on 5.12-rc2, making sure that
    all patches this depends on are in place.
    
    Lee, can you pick-up patches 1-6 through the MFD tree and then send a
    pull-req to Mark so that Mark can merge the Asoc parts throught the ASoC
    tree ?
    
    Patches 2-6 touch drivers/extcon, these all have an Ack from Chanwoo Choi
    for merging these through the MFD tree.
    
    Here is some more generic info on this series from the previous
    cover-letter:
    
    This is done by reworking the extcon driver into an arizona-jackdet
    library and then modifying the codec drivers to use that directly,
    replacing the old separate extcon child-devices and extcon-driver.
    
    This brings the arizona-codec jack-detect handling inline with how
    all other ASoC codec driver do this. This was developed and tested on
    a Lenovo Yoga Tablet 1051L with a WM5102 codec.
    
    This was also tested by Charles Keepax, one of the Cirrus Codec folks.
    
    Regards,
    
    Hans
    
    Hans de Goede (13):
      mfd: arizona: Drop arizona-extcon cells
      extcon: arizona: Fix some issues when HPDET IRQ fires after the jack
        has been unplugged
      extcon: arizona: Fix various races on driver unbind
      extcon: arizona: Fix flags parameter to the gpiod_get("wlf,micd-pol")
        call
      extcon: arizona: Always use pm_runtime_get_sync() when we need the
        device to be awake
      ASoC/extcon: arizona: Move arizona jack code to
        sound/soc/codecs/arizona-jack.c
      ASoC: arizona-jack: Move jack-detect variables to struct arizona_priv
      ASoC: arizona-jack: Use arizona->dev for runtime-pm
      ASoC: arizona-jack: convert into a helper library for codec drivers
      ASoC: arizona-jack: Use snd_soc_jack to report jack events
      ASoC: arizona-jack: Cleanup logging
      ASoC: arizona: Make the wm5102, wm5110, wm8997 and wm8998 drivers use
        the new jack library
      ASoC: Intel: bytcr_wm5102: Add jack detect support
    
     MAINTAINERS                                   |   3 +-
     drivers/extcon/Kconfig                        |   8 -
     drivers/extcon/Makefile                       |   1 -
     drivers/mfd/arizona-core.c                    |  20 -
     sound/soc/codecs/Makefile                     |   2 +-
     .../soc/codecs/arizona-jack.c                 | 577 +++++++-----------
     sound/soc/codecs/arizona.h                    |  44 ++
     sound/soc/codecs/wm5102.c                     |  12 +-
     sound/soc/codecs/wm5110.c                     |  12 +-
     sound/soc/codecs/wm8997.c                     |  14 +-
     sound/soc/codecs/wm8998.c                     |   9 +
     sound/soc/intel/boards/bytcr_wm5102.c         |  28 +-
     12 files changed, 325 insertions(+), 405 deletions(-)
     rename drivers/extcon/extcon-arizona.c => sound/soc/codecs/arizona-jack.c (76%)
    
    --
    2.30.1

commit c1df456d0f06eb9275c1cd4c66548fc5738ea428
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu Mar 4 20:28:43 2021 +0100

    PM: domains: Don't runtime resume devices at genpd_prepare()
    
    Runtime resuming a device upfront in the genpd_prepare() callback,
    to check if there is a wakeup pending for it, seems like an
    unnecessary thing to do.
    
    The PM core already manages these kind of things in a common way in
    __device_suspend(), via calling pm_runtime_barrier() and
    pm_wakeup_pending().
    
    Therefore, let's simply drop this behaviour from genpd_prepare().
    
    Note that, this change is applicable only for devices that are
    attached to a genpd that has the GENPD_FLAG_ACTIVE_WAKEUP set
    (Renesas, Mediatek, and Rockchip platforms). Moreover, a driver
    that needs to restore power for its device to re-configure it
    for a system wakeup, may still call pm_runtime_get_sync(), for
    example, to do this.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 505eb8df97d9a6c51f5168f69984d116e9c27470
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Mar 7 16:17:59 2021 +0100

    extcon: arizona: Always use pm_runtime_get_sync() when we need the device to be awake
    
    Before this commit the extcon-arizona code was mixing pm_runtime_get()
    and pm_runtime_get_sync() in different places.
    
    In all places where pm_runtime_get[_sync]() is called, the code
    makes use of the device immediately after the call.
    This means that we should always use pm_runtime_get_sync().
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Tested-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Acked-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit b709b65fb2b033693984f1615ed4129c588d7195
Author: Frank Li <Frank.Li@nxp.com>
Date:   Wed Feb 10 12:19:33 2021 -0600

    mmc: sdhci-esdhc-imx: fix kernel panic when remove module
    
    commit a56f44138a2c57047f1ea94ea121af31c595132b upstream.
    
    In sdhci_esdhc_imx_remove() the SDHCI_INT_STATUS in read. Under some
    circumstances, this may be done while the device is runtime suspended,
    triggering the below splat.
    
    Fix the problem by adding a pm_runtime_get_sync(), before reading the
    register, which will turn on clocks etc making the device accessible again.
    
    [ 1811.323148] mmc1: card aaaa removed
    [ 1811.347483] Internal error: synchronous external abort: 96000210 [#1] PREEMPT SMP
    [ 1811.354988] Modules linked in: sdhci_esdhc_imx(-) sdhci_pltfm sdhci cqhci mmc_block mmc_core [last unloaded: mmc_core]
    [ 1811.365726] CPU: 0 PID: 3464 Comm: rmmod Not tainted 5.10.1-sd-99871-g53835a2e8186 #5
    [ 1811.373559] Hardware name: Freescale i.MX8DXL EVK (DT)
    [ 1811.378705] pstate: 60000005 (nZCv daif -PAN -UAO -TCO BTYPE=--)
    [ 1811.384723] pc : sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.391090] lr : platform_drv_remove+0x2c/0x50
    [ 1811.395536] sp : ffff800012c7bcb0
    [ 1811.398855] x29: ffff800012c7bcb0 x28: ffff00002c72b900
    [ 1811.404181] x27: 0000000000000000 x26: 0000000000000000
    [ 1811.409497] x25: 0000000000000000 x24: 0000000000000000
    [ 1811.414814] x23: ffff0000042b3890 x22: ffff800009127120
    [ 1811.420131] x21: ffff00002c4c9580 x20: ffff0000042d0810
    [ 1811.425456] x19: ffff0000042d0800 x18: 0000000000000020
    [ 1811.430773] x17: 0000000000000000 x16: 0000000000000000
    [ 1811.436089] x15: 0000000000000004 x14: ffff000004019c10
    [ 1811.441406] x13: 0000000000000000 x12: 0000000000000020
    [ 1811.446723] x11: 0101010101010101 x10: 7f7f7f7f7f7f7f7f
    [ 1811.452040] x9 : fefefeff6364626d x8 : 7f7f7f7f7f7f7f7f
    [ 1811.457356] x7 : 78725e6473607372 x6 : 0000000080808080
    [ 1811.462673] x5 : 0000000000000000 x4 : 0000000000000000
    [ 1811.467990] x3 : ffff800011ac1cb0 x2 : 0000000000000000
    [ 1811.473307] x1 : ffff8000091214d4 x0 : ffff8000133a0030
    [ 1811.478624] Call trace:
    [ 1811.481081]  sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.487098]  platform_drv_remove+0x2c/0x50
    [ 1811.491198]  __device_release_driver+0x188/0x230
    [ 1811.495818]  driver_detach+0xc0/0x14c
    [ 1811.499487]  bus_remove_driver+0x5c/0xb0
    [ 1811.503413]  driver_unregister+0x30/0x60
    [ 1811.507341]  platform_driver_unregister+0x14/0x20
    [ 1811.512048]  sdhci_esdhc_imx_driver_exit+0x1c/0x3a8 [sdhci_esdhc_imx]
    [ 1811.518495]  __arm64_sys_delete_module+0x19c/0x230
    [ 1811.523291]  el0_svc_common.constprop.0+0x78/0x1a0
    [ 1811.528086]  do_el0_svc+0x24/0x90
    [ 1811.531405]  el0_svc+0x14/0x20
    [ 1811.534461]  el0_sync_handler+0x1a4/0x1b0
    [ 1811.538474]  el0_sync+0x174/0x180
    [ 1811.541801] Code: a9025bf5 f9403e95 f9400ea0 9100c000 (b9400000)
    [ 1811.547902] ---[ end trace 3fb1a3bd48ff7be5 ]---
    
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Cc: stable@vger.kernel.org # v4.0+
    Link: https://lore.kernel.org/r/20210210181933.29263-1-Frank.Li@nxp.com
    [Ulf: Clarified the commit message a bit]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    [iwamatsu: adjust context]
    Signed-off-by: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2571e59c09ca6bfa631b468a14d7b5e8964bdd8a
Author: Frank Li <Frank.Li@nxp.com>
Date:   Wed Feb 10 12:19:33 2021 -0600

    mmc: sdhci-esdhc-imx: fix kernel panic when remove module
    
    commit a56f44138a2c57047f1ea94ea121af31c595132b upstream.
    
    In sdhci_esdhc_imx_remove() the SDHCI_INT_STATUS in read. Under some
    circumstances, this may be done while the device is runtime suspended,
    triggering the below splat.
    
    Fix the problem by adding a pm_runtime_get_sync(), before reading the
    register, which will turn on clocks etc making the device accessible again.
    
    [ 1811.323148] mmc1: card aaaa removed
    [ 1811.347483] Internal error: synchronous external abort: 96000210 [#1] PREEMPT SMP
    [ 1811.354988] Modules linked in: sdhci_esdhc_imx(-) sdhci_pltfm sdhci cqhci mmc_block mmc_core [last unloaded: mmc_core]
    [ 1811.365726] CPU: 0 PID: 3464 Comm: rmmod Not tainted 5.10.1-sd-99871-g53835a2e8186 #5
    [ 1811.373559] Hardware name: Freescale i.MX8DXL EVK (DT)
    [ 1811.378705] pstate: 60000005 (nZCv daif -PAN -UAO -TCO BTYPE=--)
    [ 1811.384723] pc : sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.391090] lr : platform_drv_remove+0x2c/0x50
    [ 1811.395536] sp : ffff800012c7bcb0
    [ 1811.398855] x29: ffff800012c7bcb0 x28: ffff00002c72b900
    [ 1811.404181] x27: 0000000000000000 x26: 0000000000000000
    [ 1811.409497] x25: 0000000000000000 x24: 0000000000000000
    [ 1811.414814] x23: ffff0000042b3890 x22: ffff800009127120
    [ 1811.420131] x21: ffff00002c4c9580 x20: ffff0000042d0810
    [ 1811.425456] x19: ffff0000042d0800 x18: 0000000000000020
    [ 1811.430773] x17: 0000000000000000 x16: 0000000000000000
    [ 1811.436089] x15: 0000000000000004 x14: ffff000004019c10
    [ 1811.441406] x13: 0000000000000000 x12: 0000000000000020
    [ 1811.446723] x11: 0101010101010101 x10: 7f7f7f7f7f7f7f7f
    [ 1811.452040] x9 : fefefeff6364626d x8 : 7f7f7f7f7f7f7f7f
    [ 1811.457356] x7 : 78725e6473607372 x6 : 0000000080808080
    [ 1811.462673] x5 : 0000000000000000 x4 : 0000000000000000
    [ 1811.467990] x3 : ffff800011ac1cb0 x2 : 0000000000000000
    [ 1811.473307] x1 : ffff8000091214d4 x0 : ffff8000133a0030
    [ 1811.478624] Call trace:
    [ 1811.481081]  sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.487098]  platform_drv_remove+0x2c/0x50
    [ 1811.491198]  __device_release_driver+0x188/0x230
    [ 1811.495818]  driver_detach+0xc0/0x14c
    [ 1811.499487]  bus_remove_driver+0x5c/0xb0
    [ 1811.503413]  driver_unregister+0x30/0x60
    [ 1811.507341]  platform_driver_unregister+0x14/0x20
    [ 1811.512048]  sdhci_esdhc_imx_driver_exit+0x1c/0x3a8 [sdhci_esdhc_imx]
    [ 1811.518495]  __arm64_sys_delete_module+0x19c/0x230
    [ 1811.523291]  el0_svc_common.constprop.0+0x78/0x1a0
    [ 1811.528086]  do_el0_svc+0x24/0x90
    [ 1811.531405]  el0_svc+0x14/0x20
    [ 1811.534461]  el0_sync_handler+0x1a4/0x1b0
    [ 1811.538474]  el0_sync+0x174/0x180
    [ 1811.541801] Code: a9025bf5 f9403e95 f9400ea0 9100c000 (b9400000)
    [ 1811.547902] ---[ end trace 3fb1a3bd48ff7be5 ]---
    
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Cc: stable@vger.kernel.org # v4.0+
    Link: https://lore.kernel.org/r/20210210181933.29263-1-Frank.Li@nxp.com
    [Ulf: Clarified the commit message a bit]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a232e4dc70d27a604d218ee47cccbc8e9f89435b
Author: Bard Liao <yung-chuan.liao@linux.intel.com>
Date:   Fri Jan 22 15:06:30 2021 +0800

    regmap: sdw: use _no_pm functions in regmap_read/write
    
    [ Upstream commit d288a5712ef961e16d588bbdb2d846e00b5ef154 ]
    
    sdw_update_slave_status will be invoked when a codec is attached,
    and the codec driver will initialize the codec with regmap functions
    while the codec device is pm_runtime suspended.
    
    regmap routines currently rely on regular SoundWire IO functions,
    which will call pm_runtime_get_sync()/put_autosuspend.
    
    This causes a deadlock where the resume routine waits for an
    initialization complete signal that while the initialization complete
    can only be reached when the resume completes.
    
    The only solution if we allow regmap functions to be used in resume
    operations as well as during codec initialization is to use _no_pm
    routines. The duty of making sure the bus is operational needs to be
    handled above the regmap level.
    
    Fixes: 7c22ce6e21840 ('regmap: Add SoundWire bus support')
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Acked-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20210122070634.12825-6-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b83ca7e9d057882a0f6b4ff9e19947dddc385a0f
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 23 18:18:27 2020 +0800

    HSI: Fix PM usage counter unbalance in ssi_hw_init
    
    [ Upstream commit aa57e77b3d28f0df07149d88c47bc0f3aa77330b ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: b209e047bc743 ("HSI: Introduce OMAP SSI driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a968ef1017bd6dcac3b87c414d88ec3b23dc59d2
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 27 17:44:38 2020 +0800

    drm/lima: fix reference leak in lima_pm_busy
    
    [ Upstream commit de4248b744e8394f239c0dd0af34088399d27d94 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to putting operation will result in a
    reference leak here.
    
    A new function pm_runtime_resume_and_get is introduced in
    [0] to keep usage counter balanced. So We fix the reference
    leak by replacing it with new function.
    
    [0] commit dd8088d5a896 ("PM: runtime: Add  pm_runtime_resume_and_get to deal with usage counter")
    
    Fixes: 50de2e9ebbc0 ("drm/lima: enable runtime pm")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Qiang Yu <yuq825@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201127094438.121003-1-miaoqinglang@huawei.com
    (cherry picked from commit de499781c97d96703af8a32d2b5e37fdb5b51568)
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 706410da1e3410fb194efe81046c93ceed49f6bc
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 20:56:31 2020 +0800

    drm/tegra: Fix reference leak when pm_runtime_get_sync() fails
    
    [ Upstream commit dcdfe2712b68f1e9dbf4f1a96ad59b80e5cc0ef7 ]
    
    The PM reference count is not expected to be incremented on return in
    these Tegra functions.
    
    However, pm_runtime_get_sync() will increment the PM reference count
    even on failure. Forgetting to put the reference again will result in
    a leak.
    
    Replace it with pm_runtime_resume_and_get() to keep the usage counter
    balanced.
    
    Fixes: fd67e9c6ed5a ("drm/tegra: Do not implement runtime PM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f2adf52894a8c5c984a30fa543009cf6e41c01d3
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 27 17:44:44 2020 +0800

    drm: rcar-du: Fix PM reference leak in rcar_cmm_enable()
    
    [ Upstream commit 136ce7684bc1ff4a088812f600c63daca50b32c2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in a reference leak here.
    
    A new function pm_runtime_resume_and_get is introduced in [0] to keep
    usage counter balanced. So We fix the reference leak by replacing it
    with new funtion.
    
    [0] dd8088d5a896 ("PM: runtime: Add  pm_runtime_resume_and_get to deal with usage counter")
    
    Fixes: e08e934d6c28 ("drm: rcar-du: Add support for CMM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Acked-by: Jacopo Mondi <jacopo@jmondi.org>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9518446edbf7c8fc79c1b07dda6fb106df7106dc
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 23 18:21:18 2020 +0800

    memory: mtk-smi: Fix PM usage counter unbalance in mtk_smi ops
    
    [ Upstream commit a2d522ff0f5cc26915c4ccee9457fd4b4e1edc48 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 4f0a1a1ae3519 ("memory: mtk-smi: Invoke pm runtime_callback to enable clocks")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201123102118.3866195-1-zhangqilong3@huawei.com
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8997b99e8bc6bedf3be8cfb4472273d472fcde2
Author: Frank Li <Frank.Li@nxp.com>
Date:   Wed Feb 10 12:19:33 2021 -0600

    mmc: sdhci-esdhc-imx: fix kernel panic when remove module
    
    commit a56f44138a2c57047f1ea94ea121af31c595132b upstream.
    
    In sdhci_esdhc_imx_remove() the SDHCI_INT_STATUS in read. Under some
    circumstances, this may be done while the device is runtime suspended,
    triggering the below splat.
    
    Fix the problem by adding a pm_runtime_get_sync(), before reading the
    register, which will turn on clocks etc making the device accessible again.
    
    [ 1811.323148] mmc1: card aaaa removed
    [ 1811.347483] Internal error: synchronous external abort: 96000210 [#1] PREEMPT SMP
    [ 1811.354988] Modules linked in: sdhci_esdhc_imx(-) sdhci_pltfm sdhci cqhci mmc_block mmc_core [last unloaded: mmc_core]
    [ 1811.365726] CPU: 0 PID: 3464 Comm: rmmod Not tainted 5.10.1-sd-99871-g53835a2e8186 #5
    [ 1811.373559] Hardware name: Freescale i.MX8DXL EVK (DT)
    [ 1811.378705] pstate: 60000005 (nZCv daif -PAN -UAO -TCO BTYPE=--)
    [ 1811.384723] pc : sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.391090] lr : platform_drv_remove+0x2c/0x50
    [ 1811.395536] sp : ffff800012c7bcb0
    [ 1811.398855] x29: ffff800012c7bcb0 x28: ffff00002c72b900
    [ 1811.404181] x27: 0000000000000000 x26: 0000000000000000
    [ 1811.409497] x25: 0000000000000000 x24: 0000000000000000
    [ 1811.414814] x23: ffff0000042b3890 x22: ffff800009127120
    [ 1811.420131] x21: ffff00002c4c9580 x20: ffff0000042d0810
    [ 1811.425456] x19: ffff0000042d0800 x18: 0000000000000020
    [ 1811.430773] x17: 0000000000000000 x16: 0000000000000000
    [ 1811.436089] x15: 0000000000000004 x14: ffff000004019c10
    [ 1811.441406] x13: 0000000000000000 x12: 0000000000000020
    [ 1811.446723] x11: 0101010101010101 x10: 7f7f7f7f7f7f7f7f
    [ 1811.452040] x9 : fefefeff6364626d x8 : 7f7f7f7f7f7f7f7f
    [ 1811.457356] x7 : 78725e6473607372 x6 : 0000000080808080
    [ 1811.462673] x5 : 0000000000000000 x4 : 0000000000000000
    [ 1811.467990] x3 : ffff800011ac1cb0 x2 : 0000000000000000
    [ 1811.473307] x1 : ffff8000091214d4 x0 : ffff8000133a0030
    [ 1811.478624] Call trace:
    [ 1811.481081]  sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.487098]  platform_drv_remove+0x2c/0x50
    [ 1811.491198]  __device_release_driver+0x188/0x230
    [ 1811.495818]  driver_detach+0xc0/0x14c
    [ 1811.499487]  bus_remove_driver+0x5c/0xb0
    [ 1811.503413]  driver_unregister+0x30/0x60
    [ 1811.507341]  platform_driver_unregister+0x14/0x20
    [ 1811.512048]  sdhci_esdhc_imx_driver_exit+0x1c/0x3a8 [sdhci_esdhc_imx]
    [ 1811.518495]  __arm64_sys_delete_module+0x19c/0x230
    [ 1811.523291]  el0_svc_common.constprop.0+0x78/0x1a0
    [ 1811.528086]  do_el0_svc+0x24/0x90
    [ 1811.531405]  el0_svc+0x14/0x20
    [ 1811.534461]  el0_sync_handler+0x1a4/0x1b0
    [ 1811.538474]  el0_sync+0x174/0x180
    [ 1811.541801] Code: a9025bf5 f9403e95 f9400ea0 9100c000 (b9400000)
    [ 1811.547902] ---[ end trace 3fb1a3bd48ff7be5 ]---
    
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Cc: stable@vger.kernel.org # v4.0+
    Link: https://lore.kernel.org/r/20210210181933.29263-1-Frank.Li@nxp.com
    [Ulf: Clarified the commit message a bit]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf672140d60bd74fb3faf538bccf8eb6adae97e5
Author: Bard Liao <yung-chuan.liao@linux.intel.com>
Date:   Fri Jan 22 15:06:30 2021 +0800

    regmap: sdw: use _no_pm functions in regmap_read/write
    
    [ Upstream commit d288a5712ef961e16d588bbdb2d846e00b5ef154 ]
    
    sdw_update_slave_status will be invoked when a codec is attached,
    and the codec driver will initialize the codec with regmap functions
    while the codec device is pm_runtime suspended.
    
    regmap routines currently rely on regular SoundWire IO functions,
    which will call pm_runtime_get_sync()/put_autosuspend.
    
    This causes a deadlock where the resume routine waits for an
    initialization complete signal that while the initialization complete
    can only be reached when the resume completes.
    
    The only solution if we allow regmap functions to be used in resume
    operations as well as during codec initialization is to use _no_pm
    routines. The duty of making sure the bus is operational needs to be
    handled above the regmap level.
    
    Fixes: 7c22ce6e21840 ('regmap: Add SoundWire bus support')
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Acked-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20210122070634.12825-6-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c650a997df3703501b7f6d9db5b3a358c3023f9
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 23 18:18:27 2020 +0800

    HSI: Fix PM usage counter unbalance in ssi_hw_init
    
    [ Upstream commit aa57e77b3d28f0df07149d88c47bc0f3aa77330b ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: b209e047bc743 ("HSI: Introduce OMAP SSI driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 141c9392246c4adb21ae148f03f77d1a2aa80fc4
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 27 17:44:38 2020 +0800

    drm/lima: fix reference leak in lima_pm_busy
    
    [ Upstream commit de4248b744e8394f239c0dd0af34088399d27d94 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to putting operation will result in a
    reference leak here.
    
    A new function pm_runtime_resume_and_get is introduced in
    [0] to keep usage counter balanced. So We fix the reference
    leak by replacing it with new function.
    
    [0] commit dd8088d5a896 ("PM: runtime: Add  pm_runtime_resume_and_get to deal with usage counter")
    
    Fixes: 50de2e9ebbc0 ("drm/lima: enable runtime pm")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Qiang Yu <yuq825@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201127094438.121003-1-miaoqinglang@huawei.com
    (cherry picked from commit de499781c97d96703af8a32d2b5e37fdb5b51568)
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cdfdd1f03c2a6b22036cf8670278e6948472b7b
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 20:56:31 2020 +0800

    drm/tegra: Fix reference leak when pm_runtime_get_sync() fails
    
    [ Upstream commit dcdfe2712b68f1e9dbf4f1a96ad59b80e5cc0ef7 ]
    
    The PM reference count is not expected to be incremented on return in
    these Tegra functions.
    
    However, pm_runtime_get_sync() will increment the PM reference count
    even on failure. Forgetting to put the reference again will result in
    a leak.
    
    Replace it with pm_runtime_resume_and_get() to keep the usage counter
    balanced.
    
    Fixes: fd67e9c6ed5a ("drm/tegra: Do not implement runtime PM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cfed53d82219b46c34b15540c63206152e50bb43
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 27 17:44:44 2020 +0800

    drm: rcar-du: Fix PM reference leak in rcar_cmm_enable()
    
    [ Upstream commit 136ce7684bc1ff4a088812f600c63daca50b32c2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in a reference leak here.
    
    A new function pm_runtime_resume_and_get is introduced in [0] to keep
    usage counter balanced. So We fix the reference leak by replacing it
    with new funtion.
    
    [0] dd8088d5a896 ("PM: runtime: Add  pm_runtime_resume_and_get to deal with usage counter")
    
    Fixes: e08e934d6c28 ("drm: rcar-du: Add support for CMM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Acked-by: Jacopo Mondi <jacopo@jmondi.org>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec621e844289c1eee648ce33c3e1c73b86ad4084
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 23 18:21:18 2020 +0800

    memory: mtk-smi: Fix PM usage counter unbalance in mtk_smi ops
    
    [ Upstream commit a2d522ff0f5cc26915c4ccee9457fd4b4e1edc48 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 4f0a1a1ae3519 ("memory: mtk-smi: Invoke pm runtime_callback to enable clocks")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201123102118.3866195-1-zhangqilong3@huawei.com
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b22c402dff91e69317143e9b168e66adf44c58c
Author: Frank Li <Frank.Li@nxp.com>
Date:   Wed Feb 10 12:19:33 2021 -0600

    mmc: sdhci-esdhc-imx: fix kernel panic when remove module
    
    commit a56f44138a2c57047f1ea94ea121af31c595132b upstream.
    
    In sdhci_esdhc_imx_remove() the SDHCI_INT_STATUS in read. Under some
    circumstances, this may be done while the device is runtime suspended,
    triggering the below splat.
    
    Fix the problem by adding a pm_runtime_get_sync(), before reading the
    register, which will turn on clocks etc making the device accessible again.
    
    [ 1811.323148] mmc1: card aaaa removed
    [ 1811.347483] Internal error: synchronous external abort: 96000210 [#1] PREEMPT SMP
    [ 1811.354988] Modules linked in: sdhci_esdhc_imx(-) sdhci_pltfm sdhci cqhci mmc_block mmc_core [last unloaded: mmc_core]
    [ 1811.365726] CPU: 0 PID: 3464 Comm: rmmod Not tainted 5.10.1-sd-99871-g53835a2e8186 #5
    [ 1811.373559] Hardware name: Freescale i.MX8DXL EVK (DT)
    [ 1811.378705] pstate: 60000005 (nZCv daif -PAN -UAO -TCO BTYPE=--)
    [ 1811.384723] pc : sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.391090] lr : platform_drv_remove+0x2c/0x50
    [ 1811.395536] sp : ffff800012c7bcb0
    [ 1811.398855] x29: ffff800012c7bcb0 x28: ffff00002c72b900
    [ 1811.404181] x27: 0000000000000000 x26: 0000000000000000
    [ 1811.409497] x25: 0000000000000000 x24: 0000000000000000
    [ 1811.414814] x23: ffff0000042b3890 x22: ffff800009127120
    [ 1811.420131] x21: ffff00002c4c9580 x20: ffff0000042d0810
    [ 1811.425456] x19: ffff0000042d0800 x18: 0000000000000020
    [ 1811.430773] x17: 0000000000000000 x16: 0000000000000000
    [ 1811.436089] x15: 0000000000000004 x14: ffff000004019c10
    [ 1811.441406] x13: 0000000000000000 x12: 0000000000000020
    [ 1811.446723] x11: 0101010101010101 x10: 7f7f7f7f7f7f7f7f
    [ 1811.452040] x9 : fefefeff6364626d x8 : 7f7f7f7f7f7f7f7f
    [ 1811.457356] x7 : 78725e6473607372 x6 : 0000000080808080
    [ 1811.462673] x5 : 0000000000000000 x4 : 0000000000000000
    [ 1811.467990] x3 : ffff800011ac1cb0 x2 : 0000000000000000
    [ 1811.473307] x1 : ffff8000091214d4 x0 : ffff8000133a0030
    [ 1811.478624] Call trace:
    [ 1811.481081]  sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.487098]  platform_drv_remove+0x2c/0x50
    [ 1811.491198]  __device_release_driver+0x188/0x230
    [ 1811.495818]  driver_detach+0xc0/0x14c
    [ 1811.499487]  bus_remove_driver+0x5c/0xb0
    [ 1811.503413]  driver_unregister+0x30/0x60
    [ 1811.507341]  platform_driver_unregister+0x14/0x20
    [ 1811.512048]  sdhci_esdhc_imx_driver_exit+0x1c/0x3a8 [sdhci_esdhc_imx]
    [ 1811.518495]  __arm64_sys_delete_module+0x19c/0x230
    [ 1811.523291]  el0_svc_common.constprop.0+0x78/0x1a0
    [ 1811.528086]  do_el0_svc+0x24/0x90
    [ 1811.531405]  el0_svc+0x14/0x20
    [ 1811.534461]  el0_sync_handler+0x1a4/0x1b0
    [ 1811.538474]  el0_sync+0x174/0x180
    [ 1811.541801] Code: a9025bf5 f9403e95 f9400ea0 9100c000 (b9400000)
    [ 1811.547902] ---[ end trace 3fb1a3bd48ff7be5 ]---
    
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Cc: stable@vger.kernel.org # v4.0+
    Link: https://lore.kernel.org/r/20210210181933.29263-1-Frank.Li@nxp.com
    [Ulf: Clarified the commit message a bit]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2efbd63b6e7400f362aecbad5682129b7ae0243d
Author: Bard Liao <yung-chuan.liao@linux.intel.com>
Date:   Fri Jan 22 15:06:30 2021 +0800

    regmap: sdw: use _no_pm functions in regmap_read/write
    
    [ Upstream commit d288a5712ef961e16d588bbdb2d846e00b5ef154 ]
    
    sdw_update_slave_status will be invoked when a codec is attached,
    and the codec driver will initialize the codec with regmap functions
    while the codec device is pm_runtime suspended.
    
    regmap routines currently rely on regular SoundWire IO functions,
    which will call pm_runtime_get_sync()/put_autosuspend.
    
    This causes a deadlock where the resume routine waits for an
    initialization complete signal that while the initialization complete
    can only be reached when the resume completes.
    
    The only solution if we allow regmap functions to be used in resume
    operations as well as during codec initialization is to use _no_pm
    routines. The duty of making sure the bus is operational needs to be
    handled above the regmap level.
    
    Fixes: 7c22ce6e21840 ('regmap: Add SoundWire bus support')
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Acked-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20210122070634.12825-6-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6413d0318ca41542cf960e9ac60bf0c847e704f3
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 23 18:18:27 2020 +0800

    HSI: Fix PM usage counter unbalance in ssi_hw_init
    
    [ Upstream commit aa57e77b3d28f0df07149d88c47bc0f3aa77330b ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: b209e047bc743 ("HSI: Introduce OMAP SSI driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab9de93d12c98044ba5d8a6f7c0be6b0017e08f7
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 23 18:21:18 2020 +0800

    memory: mtk-smi: Fix PM usage counter unbalance in mtk_smi ops
    
    [ Upstream commit a2d522ff0f5cc26915c4ccee9457fd4b4e1edc48 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 4f0a1a1ae3519 ("memory: mtk-smi: Invoke pm runtime_callback to enable clocks")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201123102118.3866195-1-zhangqilong3@huawei.com
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5fbc9a3a040216dfcaac2833074cac8bdc6d14f4
Author: Frank Li <Frank.Li@nxp.com>
Date:   Wed Feb 10 12:19:33 2021 -0600

    mmc: sdhci-esdhc-imx: fix kernel panic when remove module
    
    commit a56f44138a2c57047f1ea94ea121af31c595132b upstream.
    
    In sdhci_esdhc_imx_remove() the SDHCI_INT_STATUS in read. Under some
    circumstances, this may be done while the device is runtime suspended,
    triggering the below splat.
    
    Fix the problem by adding a pm_runtime_get_sync(), before reading the
    register, which will turn on clocks etc making the device accessible again.
    
    [ 1811.323148] mmc1: card aaaa removed
    [ 1811.347483] Internal error: synchronous external abort: 96000210 [#1] PREEMPT SMP
    [ 1811.354988] Modules linked in: sdhci_esdhc_imx(-) sdhci_pltfm sdhci cqhci mmc_block mmc_core [last unloaded: mmc_core]
    [ 1811.365726] CPU: 0 PID: 3464 Comm: rmmod Not tainted 5.10.1-sd-99871-g53835a2e8186 #5
    [ 1811.373559] Hardware name: Freescale i.MX8DXL EVK (DT)
    [ 1811.378705] pstate: 60000005 (nZCv daif -PAN -UAO -TCO BTYPE=--)
    [ 1811.384723] pc : sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.391090] lr : platform_drv_remove+0x2c/0x50
    [ 1811.395536] sp : ffff800012c7bcb0
    [ 1811.398855] x29: ffff800012c7bcb0 x28: ffff00002c72b900
    [ 1811.404181] x27: 0000000000000000 x26: 0000000000000000
    [ 1811.409497] x25: 0000000000000000 x24: 0000000000000000
    [ 1811.414814] x23: ffff0000042b3890 x22: ffff800009127120
    [ 1811.420131] x21: ffff00002c4c9580 x20: ffff0000042d0810
    [ 1811.425456] x19: ffff0000042d0800 x18: 0000000000000020
    [ 1811.430773] x17: 0000000000000000 x16: 0000000000000000
    [ 1811.436089] x15: 0000000000000004 x14: ffff000004019c10
    [ 1811.441406] x13: 0000000000000000 x12: 0000000000000020
    [ 1811.446723] x11: 0101010101010101 x10: 7f7f7f7f7f7f7f7f
    [ 1811.452040] x9 : fefefeff6364626d x8 : 7f7f7f7f7f7f7f7f
    [ 1811.457356] x7 : 78725e6473607372 x6 : 0000000080808080
    [ 1811.462673] x5 : 0000000000000000 x4 : 0000000000000000
    [ 1811.467990] x3 : ffff800011ac1cb0 x2 : 0000000000000000
    [ 1811.473307] x1 : ffff8000091214d4 x0 : ffff8000133a0030
    [ 1811.478624] Call trace:
    [ 1811.481081]  sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.487098]  platform_drv_remove+0x2c/0x50
    [ 1811.491198]  __device_release_driver+0x188/0x230
    [ 1811.495818]  driver_detach+0xc0/0x14c
    [ 1811.499487]  bus_remove_driver+0x5c/0xb0
    [ 1811.503413]  driver_unregister+0x30/0x60
    [ 1811.507341]  platform_driver_unregister+0x14/0x20
    [ 1811.512048]  sdhci_esdhc_imx_driver_exit+0x1c/0x3a8 [sdhci_esdhc_imx]
    [ 1811.518495]  __arm64_sys_delete_module+0x19c/0x230
    [ 1811.523291]  el0_svc_common.constprop.0+0x78/0x1a0
    [ 1811.528086]  do_el0_svc+0x24/0x90
    [ 1811.531405]  el0_svc+0x14/0x20
    [ 1811.534461]  el0_sync_handler+0x1a4/0x1b0
    [ 1811.538474]  el0_sync+0x174/0x180
    [ 1811.541801] Code: a9025bf5 f9403e95 f9400ea0 9100c000 (b9400000)
    [ 1811.547902] ---[ end trace 3fb1a3bd48ff7be5 ]---
    
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Cc: stable@vger.kernel.org # v4.0+
    Link: https://lore.kernel.org/r/20210210181933.29263-1-Frank.Li@nxp.com
    [Ulf: Clarified the commit message a bit]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 024613c35c375ad121d6f60aecd36fcbc758b892
Author: Bard Liao <yung-chuan.liao@linux.intel.com>
Date:   Fri Jan 22 15:06:30 2021 +0800

    regmap: sdw: use _no_pm functions in regmap_read/write
    
    [ Upstream commit d288a5712ef961e16d588bbdb2d846e00b5ef154 ]
    
    sdw_update_slave_status will be invoked when a codec is attached,
    and the codec driver will initialize the codec with regmap functions
    while the codec device is pm_runtime suspended.
    
    regmap routines currently rely on regular SoundWire IO functions,
    which will call pm_runtime_get_sync()/put_autosuspend.
    
    This causes a deadlock where the resume routine waits for an
    initialization complete signal that while the initialization complete
    can only be reached when the resume completes.
    
    The only solution if we allow regmap functions to be used in resume
    operations as well as during codec initialization is to use _no_pm
    routines. The duty of making sure the bus is operational needs to be
    handled above the regmap level.
    
    Fixes: 7c22ce6e21840 ('regmap: Add SoundWire bus support')
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Acked-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20210122070634.12825-6-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6114593030b711311177126e4cae63278fde6b42
Author: Frank Li <Frank.Li@nxp.com>
Date:   Wed Feb 10 12:19:33 2021 -0600

    mmc: sdhci-esdhc-imx: fix kernel panic when remove module
    
    commit a56f44138a2c57047f1ea94ea121af31c595132b upstream.
    
    In sdhci_esdhc_imx_remove() the SDHCI_INT_STATUS in read. Under some
    circumstances, this may be done while the device is runtime suspended,
    triggering the below splat.
    
    Fix the problem by adding a pm_runtime_get_sync(), before reading the
    register, which will turn on clocks etc making the device accessible again.
    
    [ 1811.323148] mmc1: card aaaa removed
    [ 1811.347483] Internal error: synchronous external abort: 96000210 [#1] PREEMPT SMP
    [ 1811.354988] Modules linked in: sdhci_esdhc_imx(-) sdhci_pltfm sdhci cqhci mmc_block mmc_core [last unloaded: mmc_core]
    [ 1811.365726] CPU: 0 PID: 3464 Comm: rmmod Not tainted 5.10.1-sd-99871-g53835a2e8186 #5
    [ 1811.373559] Hardware name: Freescale i.MX8DXL EVK (DT)
    [ 1811.378705] pstate: 60000005 (nZCv daif -PAN -UAO -TCO BTYPE=--)
    [ 1811.384723] pc : sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.391090] lr : platform_drv_remove+0x2c/0x50
    [ 1811.395536] sp : ffff800012c7bcb0
    [ 1811.398855] x29: ffff800012c7bcb0 x28: ffff00002c72b900
    [ 1811.404181] x27: 0000000000000000 x26: 0000000000000000
    [ 1811.409497] x25: 0000000000000000 x24: 0000000000000000
    [ 1811.414814] x23: ffff0000042b3890 x22: ffff800009127120
    [ 1811.420131] x21: ffff00002c4c9580 x20: ffff0000042d0810
    [ 1811.425456] x19: ffff0000042d0800 x18: 0000000000000020
    [ 1811.430773] x17: 0000000000000000 x16: 0000000000000000
    [ 1811.436089] x15: 0000000000000004 x14: ffff000004019c10
    [ 1811.441406] x13: 0000000000000000 x12: 0000000000000020
    [ 1811.446723] x11: 0101010101010101 x10: 7f7f7f7f7f7f7f7f
    [ 1811.452040] x9 : fefefeff6364626d x8 : 7f7f7f7f7f7f7f7f
    [ 1811.457356] x7 : 78725e6473607372 x6 : 0000000080808080
    [ 1811.462673] x5 : 0000000000000000 x4 : 0000000000000000
    [ 1811.467990] x3 : ffff800011ac1cb0 x2 : 0000000000000000
    [ 1811.473307] x1 : ffff8000091214d4 x0 : ffff8000133a0030
    [ 1811.478624] Call trace:
    [ 1811.481081]  sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.487098]  platform_drv_remove+0x2c/0x50
    [ 1811.491198]  __device_release_driver+0x188/0x230
    [ 1811.495818]  driver_detach+0xc0/0x14c
    [ 1811.499487]  bus_remove_driver+0x5c/0xb0
    [ 1811.503413]  driver_unregister+0x30/0x60
    [ 1811.507341]  platform_driver_unregister+0x14/0x20
    [ 1811.512048]  sdhci_esdhc_imx_driver_exit+0x1c/0x3a8 [sdhci_esdhc_imx]
    [ 1811.518495]  __arm64_sys_delete_module+0x19c/0x230
    [ 1811.523291]  el0_svc_common.constprop.0+0x78/0x1a0
    [ 1811.528086]  do_el0_svc+0x24/0x90
    [ 1811.531405]  el0_svc+0x14/0x20
    [ 1811.534461]  el0_sync_handler+0x1a4/0x1b0
    [ 1811.538474]  el0_sync+0x174/0x180
    [ 1811.541801] Code: a9025bf5 f9403e95 f9400ea0 9100c000 (b9400000)
    [ 1811.547902] ---[ end trace 3fb1a3bd48ff7be5 ]---
    
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Cc: stable@vger.kernel.org # v4.0+
    Link: https://lore.kernel.org/r/20210210181933.29263-1-Frank.Li@nxp.com
    [Ulf: Clarified the commit message a bit]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e540571d692c7b3f7efc2d5208585d32753f67d2
Author: Frank Li <Frank.Li@nxp.com>
Date:   Wed Feb 10 12:19:33 2021 -0600

    mmc: sdhci-esdhc-imx: fix kernel panic when remove module
    
    commit a56f44138a2c57047f1ea94ea121af31c595132b upstream.
    
    In sdhci_esdhc_imx_remove() the SDHCI_INT_STATUS in read. Under some
    circumstances, this may be done while the device is runtime suspended,
    triggering the below splat.
    
    Fix the problem by adding a pm_runtime_get_sync(), before reading the
    register, which will turn on clocks etc making the device accessible again.
    
    [ 1811.323148] mmc1: card aaaa removed
    [ 1811.347483] Internal error: synchronous external abort: 96000210 [#1] PREEMPT SMP
    [ 1811.354988] Modules linked in: sdhci_esdhc_imx(-) sdhci_pltfm sdhci cqhci mmc_block mmc_core [last unloaded: mmc_core]
    [ 1811.365726] CPU: 0 PID: 3464 Comm: rmmod Not tainted 5.10.1-sd-99871-g53835a2e8186 #5
    [ 1811.373559] Hardware name: Freescale i.MX8DXL EVK (DT)
    [ 1811.378705] pstate: 60000005 (nZCv daif -PAN -UAO -TCO BTYPE=--)
    [ 1811.384723] pc : sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.391090] lr : platform_drv_remove+0x2c/0x50
    [ 1811.395536] sp : ffff800012c7bcb0
    [ 1811.398855] x29: ffff800012c7bcb0 x28: ffff00002c72b900
    [ 1811.404181] x27: 0000000000000000 x26: 0000000000000000
    [ 1811.409497] x25: 0000000000000000 x24: 0000000000000000
    [ 1811.414814] x23: ffff0000042b3890 x22: ffff800009127120
    [ 1811.420131] x21: ffff00002c4c9580 x20: ffff0000042d0810
    [ 1811.425456] x19: ffff0000042d0800 x18: 0000000000000020
    [ 1811.430773] x17: 0000000000000000 x16: 0000000000000000
    [ 1811.436089] x15: 0000000000000004 x14: ffff000004019c10
    [ 1811.441406] x13: 0000000000000000 x12: 0000000000000020
    [ 1811.446723] x11: 0101010101010101 x10: 7f7f7f7f7f7f7f7f
    [ 1811.452040] x9 : fefefeff6364626d x8 : 7f7f7f7f7f7f7f7f
    [ 1811.457356] x7 : 78725e6473607372 x6 : 0000000080808080
    [ 1811.462673] x5 : 0000000000000000 x4 : 0000000000000000
    [ 1811.467990] x3 : ffff800011ac1cb0 x2 : 0000000000000000
    [ 1811.473307] x1 : ffff8000091214d4 x0 : ffff8000133a0030
    [ 1811.478624] Call trace:
    [ 1811.481081]  sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.487098]  platform_drv_remove+0x2c/0x50
    [ 1811.491198]  __device_release_driver+0x188/0x230
    [ 1811.495818]  driver_detach+0xc0/0x14c
    [ 1811.499487]  bus_remove_driver+0x5c/0xb0
    [ 1811.503413]  driver_unregister+0x30/0x60
    [ 1811.507341]  platform_driver_unregister+0x14/0x20
    [ 1811.512048]  sdhci_esdhc_imx_driver_exit+0x1c/0x3a8 [sdhci_esdhc_imx]
    [ 1811.518495]  __arm64_sys_delete_module+0x19c/0x230
    [ 1811.523291]  el0_svc_common.constprop.0+0x78/0x1a0
    [ 1811.528086]  do_el0_svc+0x24/0x90
    [ 1811.531405]  el0_svc+0x14/0x20
    [ 1811.534461]  el0_sync_handler+0x1a4/0x1b0
    [ 1811.538474]  el0_sync+0x174/0x180
    [ 1811.541801] Code: a9025bf5 f9403e95 f9400ea0 9100c000 (b9400000)
    [ 1811.547902] ---[ end trace 3fb1a3bd48ff7be5 ]---
    
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Cc: stable@vger.kernel.org # v4.0+
    Link: https://lore.kernel.org/r/20210210181933.29263-1-Frank.Li@nxp.com
    [Ulf: Clarified the commit message a bit]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a56f44138a2c57047f1ea94ea121af31c595132b
Author: Frank Li <Frank.Li@nxp.com>
Date:   Wed Feb 10 12:19:33 2021 -0600

    mmc: sdhci-esdhc-imx: fix kernel panic when remove module
    
    In sdhci_esdhc_imx_remove() the SDHCI_INT_STATUS in read. Under some
    circumstances, this may be done while the device is runtime suspended,
    triggering the below splat.
    
    Fix the problem by adding a pm_runtime_get_sync(), before reading the
    register, which will turn on clocks etc making the device accessible again.
    
    [ 1811.323148] mmc1: card aaaa removed
    [ 1811.347483] Internal error: synchronous external abort: 96000210 [#1] PREEMPT SMP
    [ 1811.354988] Modules linked in: sdhci_esdhc_imx(-) sdhci_pltfm sdhci cqhci mmc_block mmc_core [last unloaded: mmc_core]
    [ 1811.365726] CPU: 0 PID: 3464 Comm: rmmod Not tainted 5.10.1-sd-99871-g53835a2e8186 #5
    [ 1811.373559] Hardware name: Freescale i.MX8DXL EVK (DT)
    [ 1811.378705] pstate: 60000005 (nZCv daif -PAN -UAO -TCO BTYPE=--)
    [ 1811.384723] pc : sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.391090] lr : platform_drv_remove+0x2c/0x50
    [ 1811.395536] sp : ffff800012c7bcb0
    [ 1811.398855] x29: ffff800012c7bcb0 x28: ffff00002c72b900
    [ 1811.404181] x27: 0000000000000000 x26: 0000000000000000
    [ 1811.409497] x25: 0000000000000000 x24: 0000000000000000
    [ 1811.414814] x23: ffff0000042b3890 x22: ffff800009127120
    [ 1811.420131] x21: ffff00002c4c9580 x20: ffff0000042d0810
    [ 1811.425456] x19: ffff0000042d0800 x18: 0000000000000020
    [ 1811.430773] x17: 0000000000000000 x16: 0000000000000000
    [ 1811.436089] x15: 0000000000000004 x14: ffff000004019c10
    [ 1811.441406] x13: 0000000000000000 x12: 0000000000000020
    [ 1811.446723] x11: 0101010101010101 x10: 7f7f7f7f7f7f7f7f
    [ 1811.452040] x9 : fefefeff6364626d x8 : 7f7f7f7f7f7f7f7f
    [ 1811.457356] x7 : 78725e6473607372 x6 : 0000000080808080
    [ 1811.462673] x5 : 0000000000000000 x4 : 0000000000000000
    [ 1811.467990] x3 : ffff800011ac1cb0 x2 : 0000000000000000
    [ 1811.473307] x1 : ffff8000091214d4 x0 : ffff8000133a0030
    [ 1811.478624] Call trace:
    [ 1811.481081]  sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.487098]  platform_drv_remove+0x2c/0x50
    [ 1811.491198]  __device_release_driver+0x188/0x230
    [ 1811.495818]  driver_detach+0xc0/0x14c
    [ 1811.499487]  bus_remove_driver+0x5c/0xb0
    [ 1811.503413]  driver_unregister+0x30/0x60
    [ 1811.507341]  platform_driver_unregister+0x14/0x20
    [ 1811.512048]  sdhci_esdhc_imx_driver_exit+0x1c/0x3a8 [sdhci_esdhc_imx]
    [ 1811.518495]  __arm64_sys_delete_module+0x19c/0x230
    [ 1811.523291]  el0_svc_common.constprop.0+0x78/0x1a0
    [ 1811.528086]  do_el0_svc+0x24/0x90
    [ 1811.531405]  el0_svc+0x14/0x20
    [ 1811.534461]  el0_sync_handler+0x1a4/0x1b0
    [ 1811.538474]  el0_sync+0x174/0x180
    [ 1811.541801] Code: a9025bf5 f9403e95 f9400ea0 9100c000 (b9400000)
    [ 1811.547902] ---[ end trace 3fb1a3bd48ff7be5 ]---
    
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Cc: stable@vger.kernel.org # v4.0+
    Link: https://lore.kernel.org/r/20210210181933.29263-1-Frank.Li@nxp.com
    [Ulf: Clarified the commit message a bit]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit d288a5712ef961e16d588bbdb2d846e00b5ef154
Author: Bard Liao <yung-chuan.liao@linux.intel.com>
Date:   Fri Jan 22 15:06:30 2021 +0800

    regmap: sdw: use _no_pm functions in regmap_read/write
    
    sdw_update_slave_status will be invoked when a codec is attached,
    and the codec driver will initialize the codec with regmap functions
    while the codec device is pm_runtime suspended.
    
    regmap routines currently rely on regular SoundWire IO functions,
    which will call pm_runtime_get_sync()/put_autosuspend.
    
    This causes a deadlock where the resume routine waits for an
    initialization complete signal that while the initialization complete
    can only be reached when the resume completes.
    
    The only solution if we allow regmap functions to be used in resume
    operations as well as during codec initialization is to use _no_pm
    routines. The duty of making sure the bus is operational needs to be
    handled above the regmap level.
    
    Fixes: 7c22ce6e21840 ('regmap: Add SoundWire bus support')
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Acked-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20210122070634.12825-6-yung-chuan.liao@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit de4248b744e8394f239c0dd0af34088399d27d94
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 27 17:44:38 2020 +0800

    drm/lima: fix reference leak in lima_pm_busy
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to putting operation will result in a
    reference leak here.
    
    A new function pm_runtime_resume_and_get is introduced in
    [0] to keep usage counter balanced. So We fix the reference
    leak by replacing it with new function.
    
    [0] commit dd8088d5a896 ("PM: runtime: Add  pm_runtime_resume_and_get to deal with usage counter")
    
    Fixes: 50de2e9ebbc0 ("drm/lima: enable runtime pm")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Qiang Yu <yuq825@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201127094438.121003-1-miaoqinglang@huawei.com
    (cherry picked from commit de499781c97d96703af8a32d2b5e37fdb5b51568)
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

commit de499781c97d96703af8a32d2b5e37fdb5b51568
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 27 17:44:38 2020 +0800

    drm/lima: fix reference leak in lima_pm_busy
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to putting operation will result in a
    reference leak here.
    
    A new function pm_runtime_resume_and_get is introduced in
    [0] to keep usage counter balanced. So We fix the reference
    leak by replacing it with new function.
    
    [0] commit dd8088d5a896 ("PM: runtime: Add  pm_runtime_resume_and_get to deal with usage counter")
    
    Fixes: 50de2e9ebbc0 ("drm/lima: enable runtime pm")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Qiang Yu <yuq825@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201127094438.121003-1-miaoqinglang@huawei.com

commit dcdfe2712b68f1e9dbf4f1a96ad59b80e5cc0ef7
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Dec 1 20:56:31 2020 +0800

    drm/tegra: Fix reference leak when pm_runtime_get_sync() fails
    
    The PM reference count is not expected to be incremented on return in
    these Tegra functions.
    
    However, pm_runtime_get_sync() will increment the PM reference count
    even on failure. Forgetting to put the reference again will result in
    a leak.
    
    Replace it with pm_runtime_resume_and_get() to keep the usage counter
    balanced.
    
    Fixes: fd67e9c6ed5a ("drm/tegra: Do not implement runtime PM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit 0aa2eecf8534177d5f8ad8aeeaa50abef3db4f3d
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Oct 30 23:49:09 2020 +0800

    watchdog: rti-wdt: fix reference leak in rti_wdt_probe
    
    [ Upstream commit 8711071e9700b67045fe5518161d63f7a03e3c9e ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in rti_wdt_probe, so we should fix it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201030154909.100023-1-zhangqilong3@huawei.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 136ce7684bc1ff4a088812f600c63daca50b32c2
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 27 17:44:44 2020 +0800

    drm: rcar-du: Fix PM reference leak in rcar_cmm_enable()
    
    pm_runtime_get_sync will increment pm usage counter even it failed.
    Forgetting to putting operation will result in a reference leak here.
    
    A new function pm_runtime_resume_and_get is introduced in [0] to keep
    usage counter balanced. So We fix the reference leak by replacing it
    with new funtion.
    
    [0] dd8088d5a896 ("PM: runtime: Add  pm_runtime_resume_and_get to deal with usage counter")
    
    Fixes: e08e934d6c28 ("drm: rcar-du: Add support for CMM")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Acked-by: Jacopo Mondi <jacopo@jmondi.org>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>

commit a2d522ff0f5cc26915c4ccee9457fd4b4e1edc48
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 23 18:21:18 2020 +0800

    memory: mtk-smi: Fix PM usage counter unbalance in mtk_smi ops
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: 4f0a1a1ae3519 ("memory: mtk-smi: Invoke pm runtime_callback to enable clocks")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201123102118.3866195-1-zhangqilong3@huawei.com
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>

commit a50f5a6393e4de7627c9c7c3f50976bdef68b7f9
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 7 19:05:52 2020 +0800

    mtd: rawnand: gpmi: fix reference count leak in gpmi ops
    
    [ Upstream commit 1b391c7f2e863985668d705f525af3ceb55bc800 ]
    
    pm_runtime_get_sync() will increment pm usage at first and it
    will resume the device later. If runtime of the device has
    error or device is in inaccessible state(or other error state),
    resume operation will fail. If we do not call put operation to
    decrease the reference, it will result in reference leak in
    the two functions(gpmi_init and gpmi_nfc_exec_op). Moreover,
    this device cannot enter the idle state and always stay busy or
    other non-idle state later. So we fixed it through adding
    pm_runtime_put_noidle.
    
    Fixes: 5bc6bb603b4d0 ("mtd: rawnand: gpmi: Fix suspend/resume problem")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Han Xu <han.xu@nxp.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20201107110552.1568742-1-zhangqilong3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1bf8c9f49adacb32584b1213b94a813ec565cf3
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:35:54 2020 +0800

    remoteproc: qcom: pas: fix error handling in adsp_pds_enable
    
    [ Upstream commit c0a6e5ee1ecfe4c3a5799cfd30820748eff5dfab ]
    
    If the pm_runtime_get_sync failed in adsp_pds_enable when
    loop (i), The unroll_pd_votes will start from (i - 1), and
    it will resulted in following problems:
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) Have not reset pds[i] performance state.
    
    Then we fix it.
    
    Fixes: 17ee2fb4e8567 ("remoteproc: qcom: pas: Vote for active/proxy power domains")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102143554.144707-1-zhangqilong3@huawei.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cce77d667f5586d1b3a92ce0cbefa1c3156e9c8b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:35:34 2020 +0800

    remoteproc: qcom: fix reference leak in adsp_start
    
    [ Upstream commit aa37448f597c09844942da87d042fc6793f989c2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in adsp_start, so we should fix it.
    
    Fixes: dc160e4491222 ("remoteproc: qcom: Introduce Non-PAS ADSP PIL driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102143534.144484-1-zhangqilong3@huawei.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70ea4c7d1d39020cff13f8a3ca7404b8cce296fa
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:34:33 2020 +0800

    remoteproc: q6v5-mss: fix error handling in q6v5_pds_enable
    
    [ Upstream commit a24723050037303e4008b37f1f8dcc99c58901aa ]
    
    If the pm_runtime_get_sync failed in q6v5_pds_enable when
    loop (i), The unroll_pd_votes will start from (i - 1), and
    it will resulted in following problems:
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) Have not reset pds[i] performance state.
    
    Then we fix it.
    
    Fixes: 4760a896be88e ("remoteproc: q6v5-mss: Vote for rpmh power domains")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102143433.143996-1-zhangqilong3@huawei.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55dbc5e2d9c95d2654cd50d91cdd90f807db8f15
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Wed Dec 2 22:53:20 2020 +0800

    hwmon: (ina3221) Fix PM usage counter unbalance in ina3221_write_enable
    
    [ Upstream commit bce776f10069c806290eaac712ba73432ae8ecd7 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced. It depends on the mainline commit[PM: runtime:
    Add pm_runtime_resume_and_get to deal with usagecounter].
    
    Fixes: 323aeb0eb5d9a ("hwmon: (ina3221) Add PM runtime support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201202145320.1135614-1-zhangqilong3@huawei.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 891bb86926f2788990ed35d4d96fb577ff3aca9b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:33:21 2020 +0800

    power: supply: bq24190_charger: fix reference leak
    
    [ Upstream commit b2f6cb78eaa1cad57dd3fe11d0458cd4fae9a584 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in callers(bq24190_sysfs_show,
    bq24190_charger_get_property, bq24190_charger_set_property,
    bq24190_battery_get_property, bq24190_battery_set_property),
    so we should fix it.
    
    Fixes: f385e6e2a1532 ("power: bq24190_charger: Use PM runtime autosuspend")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e8d632e41622e7ffe2c71a5d356fb5f9105e315
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 20 16:36:49 2020 -0800

    Input: omap4-keypad - fix runtime PM error handling
    
    [ Upstream commit 59bbf83835f591b95c3bdd09d900f3584fa227af ]
    
    In omap4_keypad_probe, the patch fix several bugs.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) In err_unmap, forget to disable runtime of device,
         pm_runtime_enable will increase power disable depth. Thus a
         pairing decrement is needed on the error handling path to keep
         it balanced.
    
      3) In err_pm_disable, it will call pm_runtime_put_sync twice not
         one time.
    
    To fix this we factor out code reading revision and disabling touchpad, and
    drop PM reference once we are done talking to the device.
    
    Fixes: f77621cc640a7 ("Input: omap-keypad - dynamically handle register offsets")
    Fixes: 5ad567ffbaf20 ("Input: omap4-keypad - wire up runtime PM handling")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201120133918.2559681-1-zhangqilong3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97d14d592159a34f73bda07d925a2925f90a35ea
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:37 2020 -0800

    soc: ti: Fix reference imbalance in knav_dma_probe
    
    [ Upstream commit b4fa73358c306d747a2200aec6f7acb97e5750e6 ]
    
    The patch fix two reference leak.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to call put operation will result in
         reference leak.
    
      2) The pm_runtime_enable will increase power disable depth. Thus
         a pairing decrement is needed on the error handling path to
         keep it balanced.
    
    We fix it by: 1) adding call pm_runtime_put_noidle or
    pm_runtime_put_sync in error handling. 2) adding pm_runtime_disable
    in error handling, to keep usage counter and disable depth balanced.
    
    Fixes: 88139ed030583 ("soc: ti: add Keystone Navigator DMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdf76d879ac372ef7c04af353fd2ee56e5f6f10d
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:00 2020 -0800

    soc: ti: knav_qmss: fix reference leak in knav_queue_probe
    
    [ Upstream commit ec8684847d8062496c4619bc3fcff31c19d56847 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in knav_queue_probe, so we should fix it.
    
    Fixes: 41f93af900a20 ("soc: ti: add Keystone Navigator QMSS driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cf33a4686c4c7572ef8db3d04b09ccf1ec938ef
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 13 21:17:28 2020 +0800

    crypto: omap-aes - Fix PM disable depth imbalance in omap_aes_probe
    
    [ Upstream commit ff8107200367f4abe0e5bce66a245e8d0f2d229e ]
    
    The pm_runtime_enable will increase power disable depth.
    Thus a pairing decrement is needed on the error handling
    path to keep it balanced according to context.
    
    Fixes: f7b2b5dd6a62a ("crypto: omap-aes - add error check for pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 98283ebab45ca3b47361abb65ea641a5d7687042
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:24:21 2020 +0800

    spi: mxs: fix reference leak in mxs_spi_probe
    
    [ Upstream commit 03fc41afaa6549baa2dab7a84e1afaf5cadb5b18 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in mxs_spi_probe, so we should fix it.
    
    Fixes: b7969caf41a1d ("spi: mxs: implement runtime pm")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201106012421.95420-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3307503af9e520b88d5fdb3654ab3e484420e01
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 15:26:22 2020 +0100

    media: cedrus: fix reference leak in cedrus_start_streaming
    
    [ Upstream commit 940727bf22f74cbdef8de327de34c4ae565c89ea ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in cedrus_start_streaming. We should fix it.
    
    Fixes: d5aecd289babf ("media: cedrus: Implement runtime PM")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5b2529aa572bb0da814146f6794f49b5e9110be
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 15:28:52 2020 +0100

    media: staging: rkisp1: cap: fix runtime PM imbalance on error
    
    [ Upstream commit 4cbbe2aaa0536b0e7b3dfbd7febc3bc2ec300559 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference imbalance in rkisp1_vb2_start_streaming, so we
    should fix it.
    
    Fixes: 56e3b29f9f6b2 ("media: staging: rkisp1: add streaming paths")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63c4e010a53066fa8530ffd21324ebcdb7b0d87b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 9 21:13:46 2020 +0800

    staging: greybus: codecs: Fix reference counter leak in error handling
    
    [ Upstream commit 3952659a6108f77a0d062d8e8487bdbdaf52a66c ]
    
    gb_pm_runtime_get_sync has increased the usage counter of the device here.
    Forgetting to call gb_pm_runtime_put_noidle will result in usage counter
    leak in the error branch of (gbcodec_hw_params and gbcodec_prepare). We
    fixed it by adding it.
    
    Fixes: c388ae7696992 ("greybus: audio: Update pm runtime support in dai_ops callback")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201109131347.1725288-2-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b14a8f29c31eee6a525c20a2210cb81ca2b28c68
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:50:35 2020 +0800

    spi: sprd: fix reference leak in sprd_spi_remove
    
    [ Upstream commit e4062765bc2a41e025e29dd56bad798505036427 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in sprd_spi_remove, so we should fix it.
    
    Fixes: e7d973a31c24b ("spi: sprd: Add SPI driver for Spreadtrum SC9860")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Chunyan Zhang <zhang.lyra@gmail.com>
    Link: https://lore.kernel.org/r/20201106015035.139574-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 851228fd1f6782e89b02b0d4f8b25db75b8881c6
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:58:35 2020 +0800

    spi: imx: fix reference leak in two imx operations
    
    [ Upstream commit 1dcbdd944824369d4569959f8130336fe6fe5f39 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in callers(spi_imx_prepare_message and
    spi_imx_remove), so we should fix it.
    
    Fixes: 525c9e5a32bd7 ("spi: imx: enable runtime pm support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102145835.4765-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7dc725c7eb4ead569ee2dee9c4a8fd3c1f28fd3
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:06 2020 +0800

    spi: tegra114: fix reference leak in tegra spi ops
    
    [ Upstream commit a042184c7fb99961ea083d4ec192614bec671969 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_spi_setup and
    tegra_spi_resume), so we should fix it.
    
    Fixes: f333a331adfac ("spi/tegra114: add spi driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141306.5607-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b25ccec949692e4d6541706c0680a8f4442b170b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:23 2020 +0800

    spi: tegra20-sflash: fix reference leak in tegra_sflash_resume
    
    [ Upstream commit 3482e797ab688da6703fe18d8bad52f94199f4f2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in tegra_sflash_resume, so we should fix it.
    
    Fixes: 8528547bcc336 ("spi: tegra: add spi driver for sflash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141323.5841-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c26f7b292dad14ca25613939464d2c596bbb043
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:45 2020 +0800

    spi: tegra20-slink: fix reference leak in slink ops of tegra20
    
    [ Upstream commit 763eab7074f6e71babd85d796156f05a675f9510 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_slink_setup and
    tegra_slink_resume), so we should fix it.
    
    Fixes: dc4dc36056392 ("spi: tegra: add spi driver for SLINK controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141345.6188-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e2556779cb7a9f0af1de93f4ee0f01a25fa95ab
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:47 2020 +0800

    spi: spi-ti-qspi: fix reference leak in ti_qspi_setup
    
    [ Upstream commit 45c0cba753641e5d7c3207f04241bd0e7a021698 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in ti_qspi_setup, so we should fix it.
    
    Fixes: 505a14954e2d7 ("spi/qspi: Add qspi flash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140947.3815-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea5ee372c7265cd02785b02d22c747ca888f3741
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:53:57 2020 +0800

    spi: stm32-qspi: fix reference leak in stm32 qspi operations
    
    [ Upstream commit 88e1419b5ee30cc50e0c4d5265bdee1ba04af539 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(stm32_qspi_exec_op and
    stm32_qspi_setup), so we should fix it.
    
    Fixes: 9d282c17b023a ("spi: stm32-qspi: Add pm_runtime support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Patrice Chotard <patrice.chotard@st.com>
    Link: https://lore.kernel.org/r/20201106015357.141235-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26a19bbe6003b667da63f609307473df6b52d343
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:52:17 2020 +0800

    spi: stm32: fix reference leak in stm32_spi_resume
    
    [ Upstream commit 900ccdcb79bb61471df1566a70b2b39687a628d5 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in stm32_spi_resume, so we should fix it.
    
    Fixes: db96bf976a4fc ("spi: stm32: fixes suspend/resume management")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Alain Volmat <alain.volmat@st.com>
    Link: https://lore.kernel.org/r/20201106015217.140476-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92b6415e977cc30a8c94adddfd1166d46c568362
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:10 2020 +0800

    spi: spi-mem: fix reference leak in spi_mem_access_start
    
    [ Upstream commit c02bb16b0e826bf0e19aa42c3ae60ea339f32cf5 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in spi_mem_access_start, so we should fix it.
    
    Fixes: f86c24f479530 ("spi: spi-mem: Split spi_mem_exec_op() code")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140910.3482-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5eab98b40aaaa5b340558c032a521c65de6fbfba
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:56:51 2020 +0800

    spi: img-spfi: fix reference leak in img_spfi_resume
    
    [ Upstream commit ee5558a9084584015c8754ffd029ce14a5827fa8 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in img_spfi_resume, so we should fix it.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102145651.3875-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e8715b2383a027a35cbc2c9e99677bdd1fbf433
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 7 19:05:52 2020 +0800

    mtd: rawnand: gpmi: fix reference count leak in gpmi ops
    
    [ Upstream commit 1b391c7f2e863985668d705f525af3ceb55bc800 ]
    
    pm_runtime_get_sync() will increment pm usage at first and it
    will resume the device later. If runtime of the device has
    error or device is in inaccessible state(or other error state),
    resume operation will fail. If we do not call put operation to
    decrease the reference, it will result in reference leak in
    the two functions(gpmi_init and gpmi_nfc_exec_op). Moreover,
    this device cannot enter the idle state and always stay busy or
    other non-idle state later. So we fixed it through adding
    pm_runtime_put_noidle.
    
    Fixes: 5bc6bb603b4d0 ("mtd: rawnand: gpmi: Fix suspend/resume problem")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Han Xu <han.xu@nxp.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20201107110552.1568742-1-zhangqilong3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f597c451e07779f58ed271d6a17c6c2079d5456
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:35:34 2020 +0800

    remoteproc: qcom: fix reference leak in adsp_start
    
    [ Upstream commit aa37448f597c09844942da87d042fc6793f989c2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in adsp_start, so we should fix it.
    
    Fixes: dc160e4491222 ("remoteproc: qcom: Introduce Non-PAS ADSP PIL driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102143534.144484-1-zhangqilong3@huawei.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f61bce4bc8336b4fc75dce777be6462f0d981872
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:34:33 2020 +0800

    remoteproc: q6v5-mss: fix error handling in q6v5_pds_enable
    
    [ Upstream commit a24723050037303e4008b37f1f8dcc99c58901aa ]
    
    If the pm_runtime_get_sync failed in q6v5_pds_enable when
    loop (i), The unroll_pd_votes will start from (i - 1), and
    it will resulted in following problems:
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) Have not reset pds[i] performance state.
    
    Then we fix it.
    
    Fixes: 4760a896be88e ("remoteproc: q6v5-mss: Vote for rpmh power domains")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102143433.143996-1-zhangqilong3@huawei.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bfdf000e5dd92a97938446ba4524d659f3f1e533
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Wed Dec 2 22:53:20 2020 +0800

    hwmon: (ina3221) Fix PM usage counter unbalance in ina3221_write_enable
    
    [ Upstream commit bce776f10069c806290eaac712ba73432ae8ecd7 ]
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced. It depends on the mainline commit[PM: runtime:
    Add pm_runtime_resume_and_get to deal with usagecounter].
    
    Fixes: 323aeb0eb5d9a ("hwmon: (ina3221) Add PM runtime support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201202145320.1135614-1-zhangqilong3@huawei.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f00dcc6ce7aa7ceb8e0b9f7c4e80630657c9e87
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:33:21 2020 +0800

    power: supply: bq24190_charger: fix reference leak
    
    [ Upstream commit b2f6cb78eaa1cad57dd3fe11d0458cd4fae9a584 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in callers(bq24190_sysfs_show,
    bq24190_charger_get_property, bq24190_charger_set_property,
    bq24190_battery_get_property, bq24190_battery_set_property),
    so we should fix it.
    
    Fixes: f385e6e2a1532 ("power: bq24190_charger: Use PM runtime autosuspend")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fbd2b0dd7d128939b5348fc1bb344536c9ba28f
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 20 16:36:49 2020 -0800

    Input: omap4-keypad - fix runtime PM error handling
    
    [ Upstream commit 59bbf83835f591b95c3bdd09d900f3584fa227af ]
    
    In omap4_keypad_probe, the patch fix several bugs.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) In err_unmap, forget to disable runtime of device,
         pm_runtime_enable will increase power disable depth. Thus a
         pairing decrement is needed on the error handling path to keep
         it balanced.
    
      3) In err_pm_disable, it will call pm_runtime_put_sync twice not
         one time.
    
    To fix this we factor out code reading revision and disabling touchpad, and
    drop PM reference once we are done talking to the device.
    
    Fixes: f77621cc640a7 ("Input: omap-keypad - dynamically handle register offsets")
    Fixes: 5ad567ffbaf20 ("Input: omap4-keypad - wire up runtime PM handling")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201120133918.2559681-1-zhangqilong3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e16e8cde2bb16edada989e99e119b1fa2fa4039b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:37 2020 -0800

    soc: ti: Fix reference imbalance in knav_dma_probe
    
    [ Upstream commit b4fa73358c306d747a2200aec6f7acb97e5750e6 ]
    
    The patch fix two reference leak.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to call put operation will result in
         reference leak.
    
      2) The pm_runtime_enable will increase power disable depth. Thus
         a pairing decrement is needed on the error handling path to
         keep it balanced.
    
    We fix it by: 1) adding call pm_runtime_put_noidle or
    pm_runtime_put_sync in error handling. 2) adding pm_runtime_disable
    in error handling, to keep usage counter and disable depth balanced.
    
    Fixes: 88139ed030583 ("soc: ti: add Keystone Navigator DMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 475b489b07130737948d20e416baed39b137b4a4
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:00 2020 -0800

    soc: ti: knav_qmss: fix reference leak in knav_queue_probe
    
    [ Upstream commit ec8684847d8062496c4619bc3fcff31c19d56847 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in knav_queue_probe, so we should fix it.
    
    Fixes: 41f93af900a20 ("soc: ti: add Keystone Navigator QMSS driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70e19fccf680fba4da528455122c7031dce3effd
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 13 21:17:28 2020 +0800

    crypto: omap-aes - Fix PM disable depth imbalance in omap_aes_probe
    
    [ Upstream commit ff8107200367f4abe0e5bce66a245e8d0f2d229e ]
    
    The pm_runtime_enable will increase power disable depth.
    Thus a pairing decrement is needed on the error handling
    path to keep it balanced according to context.
    
    Fixes: f7b2b5dd6a62a ("crypto: omap-aes - add error check for pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f8c6e70738af185f19b914ef2b30f09a1758b63
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:24:21 2020 +0800

    spi: mxs: fix reference leak in mxs_spi_probe
    
    [ Upstream commit 03fc41afaa6549baa2dab7a84e1afaf5cadb5b18 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in mxs_spi_probe, so we should fix it.
    
    Fixes: b7969caf41a1d ("spi: mxs: implement runtime pm")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201106012421.95420-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa1d8b959455fca5249d4b58990dde68c3fcab2c
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 9 21:13:46 2020 +0800

    staging: greybus: codecs: Fix reference counter leak in error handling
    
    [ Upstream commit 3952659a6108f77a0d062d8e8487bdbdaf52a66c ]
    
    gb_pm_runtime_get_sync has increased the usage counter of the device here.
    Forgetting to call gb_pm_runtime_put_noidle will result in usage counter
    leak in the error branch of (gbcodec_hw_params and gbcodec_prepare). We
    fixed it by adding it.
    
    Fixes: c388ae7696992 ("greybus: audio: Update pm runtime support in dai_ops callback")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201109131347.1725288-2-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7e8200d442003ce9ff88bff17a6e6d56e51ad360
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:50:35 2020 +0800

    spi: sprd: fix reference leak in sprd_spi_remove
    
    [ Upstream commit e4062765bc2a41e025e29dd56bad798505036427 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in sprd_spi_remove, so we should fix it.
    
    Fixes: e7d973a31c24b ("spi: sprd: Add SPI driver for Spreadtrum SC9860")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Chunyan Zhang <zhang.lyra@gmail.com>
    Link: https://lore.kernel.org/r/20201106015035.139574-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 769c2fecefd1e11dc60108a2cddda9f4d19396e5
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:06 2020 +0800

    spi: tegra114: fix reference leak in tegra spi ops
    
    [ Upstream commit a042184c7fb99961ea083d4ec192614bec671969 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_spi_setup and
    tegra_spi_resume), so we should fix it.
    
    Fixes: f333a331adfac ("spi/tegra114: add spi driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141306.5607-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47595d68cee266e0d3a1fe1866234c2ea5b4f532
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:23 2020 +0800

    spi: tegra20-sflash: fix reference leak in tegra_sflash_resume
    
    [ Upstream commit 3482e797ab688da6703fe18d8bad52f94199f4f2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in tegra_sflash_resume, so we should fix it.
    
    Fixes: 8528547bcc336 ("spi: tegra: add spi driver for sflash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141323.5841-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9e5e84eb49f777a121adaa267ca7039dcb527b4
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:45 2020 +0800

    spi: tegra20-slink: fix reference leak in slink ops of tegra20
    
    [ Upstream commit 763eab7074f6e71babd85d796156f05a675f9510 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_slink_setup and
    tegra_slink_resume), so we should fix it.
    
    Fixes: dc4dc36056392 ("spi: tegra: add spi driver for SLINK controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141345.6188-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2cf358aacf565a7bb2573983ae022b32ac2c228
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:47 2020 +0800

    spi: spi-ti-qspi: fix reference leak in ti_qspi_setup
    
    [ Upstream commit 45c0cba753641e5d7c3207f04241bd0e7a021698 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in ti_qspi_setup, so we should fix it.
    
    Fixes: 505a14954e2d7 ("spi/qspi: Add qspi flash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140947.3815-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c5b92c1d6ab18bb83936de1aaf850a15d4b258d
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:52:17 2020 +0800

    spi: stm32: fix reference leak in stm32_spi_resume
    
    [ Upstream commit 900ccdcb79bb61471df1566a70b2b39687a628d5 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in stm32_spi_resume, so we should fix it.
    
    Fixes: db96bf976a4fc ("spi: stm32: fixes suspend/resume management")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Alain Volmat <alain.volmat@st.com>
    Link: https://lore.kernel.org/r/20201106015217.140476-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 009a982ea25b1fb61e57fb7648577e42aff0f42a
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:10 2020 +0800

    spi: spi-mem: fix reference leak in spi_mem_access_start
    
    [ Upstream commit c02bb16b0e826bf0e19aa42c3ae60ea339f32cf5 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in spi_mem_access_start, so we should fix it.
    
    Fixes: f86c24f479530 ("spi: spi-mem: Split spi_mem_exec_op() code")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140910.3482-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 311da238f2f766dc6da1b95d6ee8e36a885590b4
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:56:51 2020 +0800

    spi: img-spfi: fix reference leak in img_spfi_resume
    
    [ Upstream commit ee5558a9084584015c8754ffd029ce14a5827fa8 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in img_spfi_resume, so we should fix it.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102145651.3875-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec64dea576d57d4369fb7fec56a806e12198b9af
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 27 17:44:45 2020 +0800

    gpio: zynq: fix reference leak in zynq_gpio functions
    
    [ Upstream commit 7f57b295f990c0fa07f96d51ca1c82c52dbf79cc ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to putting operation will result in a
    reference leak here.
    
    A new function pm_runtime_resume_and_get is introduced in
    [0] to keep usage counter balanced. So We fix the reference
    leak by replacing it with new funtion.
    
    [0] dd8088d5a896 ("PM: runtime: Add  pm_runtime_resume_and_get to deal with usage counter")
    
    Fixes: c2df3de0d07e ("gpio: zynq: properly support runtime PM for GPIO used as interrupts")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 823f42bd61933a46658da20c8e897df720f77c94
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 10 17:29:32 2020 +0800

    PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter
    
    [ Upstream commit dd8088d5a8969dc2b42f71d7bc01c25c61a78066 ]
    
    In many case, we need to check return value of pm_runtime_get_sync, but
    it brings a trouble to the usage counter processing. Many callers forget
    to decrease the usage counter when it failed, which could resulted in
    reference leak. It has been discussed a lot[0][1]. So we add a function
    to deal with the usage counter for better coding.
    
    [0]https://lkml.org/lkml/2020/6/14/88
    [1]https://patchwork.ozlabs.org/project/linux-tegra/list/?series=178139
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Rafael J. Wysocki  <rafael.j.wysocki@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 281be921e2dc84e978ae043699bd364657383356
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:33:21 2020 +0800

    power: supply: bq24190_charger: fix reference leak
    
    [ Upstream commit b2f6cb78eaa1cad57dd3fe11d0458cd4fae9a584 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in callers(bq24190_sysfs_show,
    bq24190_charger_get_property, bq24190_charger_set_property,
    bq24190_battery_get_property, bq24190_battery_set_property),
    so we should fix it.
    
    Fixes: f385e6e2a1532 ("power: bq24190_charger: Use PM runtime autosuspend")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3c96c2b4bcb8c43389b82dd124ebf4c7281e9c5
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 20 16:36:49 2020 -0800

    Input: omap4-keypad - fix runtime PM error handling
    
    [ Upstream commit 59bbf83835f591b95c3bdd09d900f3584fa227af ]
    
    In omap4_keypad_probe, the patch fix several bugs.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) In err_unmap, forget to disable runtime of device,
         pm_runtime_enable will increase power disable depth. Thus a
         pairing decrement is needed on the error handling path to keep
         it balanced.
    
      3) In err_pm_disable, it will call pm_runtime_put_sync twice not
         one time.
    
    To fix this we factor out code reading revision and disabling touchpad, and
    drop PM reference once we are done talking to the device.
    
    Fixes: f77621cc640a7 ("Input: omap-keypad - dynamically handle register offsets")
    Fixes: 5ad567ffbaf20 ("Input: omap4-keypad - wire up runtime PM handling")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201120133918.2559681-1-zhangqilong3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dda44149d9928fbc81192858229a62ce6151c67b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:37 2020 -0800

    soc: ti: Fix reference imbalance in knav_dma_probe
    
    [ Upstream commit b4fa73358c306d747a2200aec6f7acb97e5750e6 ]
    
    The patch fix two reference leak.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to call put operation will result in
         reference leak.
    
      2) The pm_runtime_enable will increase power disable depth. Thus
         a pairing decrement is needed on the error handling path to
         keep it balanced.
    
    We fix it by: 1) adding call pm_runtime_put_noidle or
    pm_runtime_put_sync in error handling. 2) adding pm_runtime_disable
    in error handling, to keep usage counter and disable depth balanced.
    
    Fixes: 88139ed030583 ("soc: ti: add Keystone Navigator DMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 626e72381e2ab1b57901334dfb3ae0101815fda0
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:00 2020 -0800

    soc: ti: knav_qmss: fix reference leak in knav_queue_probe
    
    [ Upstream commit ec8684847d8062496c4619bc3fcff31c19d56847 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in knav_queue_probe, so we should fix it.
    
    Fixes: 41f93af900a20 ("soc: ti: add Keystone Navigator QMSS driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad16a80015ea90dac6410277202972a913749957
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 13 21:17:28 2020 +0800

    crypto: omap-aes - Fix PM disable depth imbalance in omap_aes_probe
    
    [ Upstream commit ff8107200367f4abe0e5bce66a245e8d0f2d229e ]
    
    The pm_runtime_enable will increase power disable depth.
    Thus a pairing decrement is needed on the error handling
    path to keep it balanced according to context.
    
    Fixes: f7b2b5dd6a62a ("crypto: omap-aes - add error check for pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e92591b7812b4222bfa6a409c2bcbefd45fee858
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:24:21 2020 +0800

    spi: mxs: fix reference leak in mxs_spi_probe
    
    [ Upstream commit 03fc41afaa6549baa2dab7a84e1afaf5cadb5b18 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in mxs_spi_probe, so we should fix it.
    
    Fixes: b7969caf41a1d ("spi: mxs: implement runtime pm")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201106012421.95420-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c54e646390e424e07df1a33f8d8b9dc4b721d8a
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 9 21:13:46 2020 +0800

    staging: greybus: codecs: Fix reference counter leak in error handling
    
    [ Upstream commit 3952659a6108f77a0d062d8e8487bdbdaf52a66c ]
    
    gb_pm_runtime_get_sync has increased the usage counter of the device here.
    Forgetting to call gb_pm_runtime_put_noidle will result in usage counter
    leak in the error branch of (gbcodec_hw_params and gbcodec_prepare). We
    fixed it by adding it.
    
    Fixes: c388ae7696992 ("greybus: audio: Update pm runtime support in dai_ops callback")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201109131347.1725288-2-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9559ee15ca124e7ebe258d5219499cb805f8c31f
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:06 2020 +0800

    spi: tegra114: fix reference leak in tegra spi ops
    
    [ Upstream commit a042184c7fb99961ea083d4ec192614bec671969 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_spi_setup and
    tegra_spi_resume), so we should fix it.
    
    Fixes: f333a331adfac ("spi/tegra114: add spi driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141306.5607-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d40dbad5fb61bcbdd518dfa005eb1f994cb3ff7
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:23 2020 +0800

    spi: tegra20-sflash: fix reference leak in tegra_sflash_resume
    
    [ Upstream commit 3482e797ab688da6703fe18d8bad52f94199f4f2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in tegra_sflash_resume, so we should fix it.
    
    Fixes: 8528547bcc336 ("spi: tegra: add spi driver for sflash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141323.5841-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c0f136a052c7e8392e9d5ace113900b7a9a3209
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:45 2020 +0800

    spi: tegra20-slink: fix reference leak in slink ops of tegra20
    
    [ Upstream commit 763eab7074f6e71babd85d796156f05a675f9510 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_slink_setup and
    tegra_slink_resume), so we should fix it.
    
    Fixes: dc4dc36056392 ("spi: tegra: add spi driver for SLINK controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141345.6188-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7d60a1b3020550849bb2ac498b7247b2237559b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:47 2020 +0800

    spi: spi-ti-qspi: fix reference leak in ti_qspi_setup
    
    [ Upstream commit 45c0cba753641e5d7c3207f04241bd0e7a021698 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in ti_qspi_setup, so we should fix it.
    
    Fixes: 505a14954e2d7 ("spi/qspi: Add qspi flash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140947.3815-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc8805b8e90fce4aeafd7e64ae00fd0f68fa310a
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:56:51 2020 +0800

    spi: img-spfi: fix reference leak in img_spfi_resume
    
    [ Upstream commit ee5558a9084584015c8754ffd029ce14a5827fa8 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in img_spfi_resume, so we should fix it.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102145651.3875-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0e74c97fe3f0affa3d1d9f0527894e153c1605a
Author: Can Guo <cang@codeaurora.org>
Date:   Tue Sep 22 00:09:04 2020 -0700

    scsi: ufs: Make sure clk scaling happens only when HBA is runtime ACTIVE
    
    [ Upstream commit 73cc291c270248567245f084dcdf5078069af6b5 ]
    
    If someone plays with the UFS clk scaling devfreq governor through sysfs,
    ufshcd_devfreq_scale may be called even when HBA is not runtime ACTIVE.
    This can lead to unexpected error. We cannot just protect it by calling
    pm_runtime_get_sync() because that may cause a race condition since HBA
    runtime suspend ops need to suspend clk scaling. To fix this call
    pm_runtime_get_noresume() and check HBA's runtime status. Only proceed if
    HBA is runtime ACTIVE, otherwise just bail.
    
    governor_store
     devfreq_performance_handler
      update_devfreq
       devfreq_set_target
        ufshcd_devfreq_target
         ufshcd_devfreq_scale
    
    Link: https://lore.kernel.org/r/1600758548-28576-1-git-send-email-cang@codeaurora.org
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa57e77b3d28f0df07149d88c47bc0f3aa77330b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 23 18:18:27 2020 +0800

    HSI: Fix PM usage counter unbalance in ssi_hw_init
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced.
    
    Fixes: b209e047bc743 ("HSI: Introduce OMAP SSI driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

commit b2a2eea570d19ec0ec93dab18c78beb62d80fe78
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:33:21 2020 +0800

    power: supply: bq24190_charger: fix reference leak
    
    [ Upstream commit b2f6cb78eaa1cad57dd3fe11d0458cd4fae9a584 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in callers(bq24190_sysfs_show,
    bq24190_charger_get_property, bq24190_charger_set_property,
    bq24190_battery_get_property, bq24190_battery_set_property),
    so we should fix it.
    
    Fixes: f385e6e2a1532 ("power: bq24190_charger: Use PM runtime autosuspend")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b07741c68fd7405aec9428542512e7124187f54d
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 20 16:36:49 2020 -0800

    Input: omap4-keypad - fix runtime PM error handling
    
    [ Upstream commit 59bbf83835f591b95c3bdd09d900f3584fa227af ]
    
    In omap4_keypad_probe, the patch fix several bugs.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) In err_unmap, forget to disable runtime of device,
         pm_runtime_enable will increase power disable depth. Thus a
         pairing decrement is needed on the error handling path to keep
         it balanced.
    
      3) In err_pm_disable, it will call pm_runtime_put_sync twice not
         one time.
    
    To fix this we factor out code reading revision and disabling touchpad, and
    drop PM reference once we are done talking to the device.
    
    Fixes: f77621cc640a7 ("Input: omap-keypad - dynamically handle register offsets")
    Fixes: 5ad567ffbaf20 ("Input: omap4-keypad - wire up runtime PM handling")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201120133918.2559681-1-zhangqilong3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0477232db1bc5ac481e627d594fc0735ec618d1b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:37 2020 -0800

    soc: ti: Fix reference imbalance in knav_dma_probe
    
    [ Upstream commit b4fa73358c306d747a2200aec6f7acb97e5750e6 ]
    
    The patch fix two reference leak.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to call put operation will result in
         reference leak.
    
      2) The pm_runtime_enable will increase power disable depth. Thus
         a pairing decrement is needed on the error handling path to
         keep it balanced.
    
    We fix it by: 1) adding call pm_runtime_put_noidle or
    pm_runtime_put_sync in error handling. 2) adding pm_runtime_disable
    in error handling, to keep usage counter and disable depth balanced.
    
    Fixes: 88139ed030583 ("soc: ti: add Keystone Navigator DMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f3670e788ad1b281b921f6969f9f434a940713f
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:00 2020 -0800

    soc: ti: knav_qmss: fix reference leak in knav_queue_probe
    
    [ Upstream commit ec8684847d8062496c4619bc3fcff31c19d56847 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in knav_queue_probe, so we should fix it.
    
    Fixes: 41f93af900a20 ("soc: ti: add Keystone Navigator QMSS driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91accbe92aa77ef03530b27ac21af333afb3aea3
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 13 21:17:28 2020 +0800

    crypto: omap-aes - Fix PM disable depth imbalance in omap_aes_probe
    
    [ Upstream commit ff8107200367f4abe0e5bce66a245e8d0f2d229e ]
    
    The pm_runtime_enable will increase power disable depth.
    Thus a pairing decrement is needed on the error handling
    path to keep it balanced according to context.
    
    Fixes: f7b2b5dd6a62a ("crypto: omap-aes - add error check for pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57080b740dd211892da38520434e6dbd7b0a1ce7
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 9 21:13:46 2020 +0800

    staging: greybus: codecs: Fix reference counter leak in error handling
    
    [ Upstream commit 3952659a6108f77a0d062d8e8487bdbdaf52a66c ]
    
    gb_pm_runtime_get_sync has increased the usage counter of the device here.
    Forgetting to call gb_pm_runtime_put_noidle will result in usage counter
    leak in the error branch of (gbcodec_hw_params and gbcodec_prepare). We
    fixed it by adding it.
    
    Fixes: c388ae7696992 ("greybus: audio: Update pm runtime support in dai_ops callback")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201109131347.1725288-2-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b564332bd89af8c75fd099c3dacd1e083880379
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:06 2020 +0800

    spi: tegra114: fix reference leak in tegra spi ops
    
    [ Upstream commit a042184c7fb99961ea083d4ec192614bec671969 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_spi_setup and
    tegra_spi_resume), so we should fix it.
    
    Fixes: f333a331adfac ("spi/tegra114: add spi driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141306.5607-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70a7d4e41de6433535040034064703e68ef8bfbb
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:23 2020 +0800

    spi: tegra20-sflash: fix reference leak in tegra_sflash_resume
    
    [ Upstream commit 3482e797ab688da6703fe18d8bad52f94199f4f2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in tegra_sflash_resume, so we should fix it.
    
    Fixes: 8528547bcc336 ("spi: tegra: add spi driver for sflash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141323.5841-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 345f6b3bfc9f41f00a4837139d7e04f8a245abfc
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:45 2020 +0800

    spi: tegra20-slink: fix reference leak in slink ops of tegra20
    
    [ Upstream commit 763eab7074f6e71babd85d796156f05a675f9510 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_slink_setup and
    tegra_slink_resume), so we should fix it.
    
    Fixes: dc4dc36056392 ("spi: tegra: add spi driver for SLINK controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141345.6188-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d0d30e1e5e6b846e919418111e9f2a959201179
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:47 2020 +0800

    spi: spi-ti-qspi: fix reference leak in ti_qspi_setup
    
    [ Upstream commit 45c0cba753641e5d7c3207f04241bd0e7a021698 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in ti_qspi_setup, so we should fix it.
    
    Fixes: 505a14954e2d7 ("spi/qspi: Add qspi flash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140947.3815-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e1efddfd9c40c022d7055b83ada90dadf93f9de
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:56:51 2020 +0800

    spi: img-spfi: fix reference leak in img_spfi_resume
    
    [ Upstream commit ee5558a9084584015c8754ffd029ce14a5827fa8 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in img_spfi_resume, so we should fix it.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102145651.3875-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29ad0fa9733c27f8497d16fd4fa003f13ec751df
Author: Can Guo <cang@codeaurora.org>
Date:   Tue Sep 22 00:09:04 2020 -0700

    scsi: ufs: Make sure clk scaling happens only when HBA is runtime ACTIVE
    
    [ Upstream commit 73cc291c270248567245f084dcdf5078069af6b5 ]
    
    If someone plays with the UFS clk scaling devfreq governor through sysfs,
    ufshcd_devfreq_scale may be called even when HBA is not runtime ACTIVE.
    This can lead to unexpected error. We cannot just protect it by calling
    pm_runtime_get_sync() because that may cause a race condition since HBA
    runtime suspend ops need to suspend clk scaling. To fix this call
    pm_runtime_get_noresume() and check HBA's runtime status. Only proceed if
    HBA is runtime ACTIVE, otherwise just bail.
    
    governor_store
     devfreq_performance_handler
      update_devfreq
       devfreq_set_target
        ufshcd_devfreq_target
         ufshcd_devfreq_scale
    
    Link: https://lore.kernel.org/r/1600758548-28576-1-git-send-email-cang@codeaurora.org
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a020a287995b67889d7a77ff49fa401369a95b7
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:37 2020 -0800

    soc: ti: Fix reference imbalance in knav_dma_probe
    
    [ Upstream commit b4fa73358c306d747a2200aec6f7acb97e5750e6 ]
    
    The patch fix two reference leak.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to call put operation will result in
         reference leak.
    
      2) The pm_runtime_enable will increase power disable depth. Thus
         a pairing decrement is needed on the error handling path to
         keep it balanced.
    
    We fix it by: 1) adding call pm_runtime_put_noidle or
    pm_runtime_put_sync in error handling. 2) adding pm_runtime_disable
    in error handling, to keep usage counter and disable depth balanced.
    
    Fixes: 88139ed030583 ("soc: ti: add Keystone Navigator DMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ba7baee559a6c3f38e8f78d722c3d237ee366d2
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:00 2020 -0800

    soc: ti: knav_qmss: fix reference leak in knav_queue_probe
    
    [ Upstream commit ec8684847d8062496c4619bc3fcff31c19d56847 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in knav_queue_probe, so we should fix it.
    
    Fixes: 41f93af900a20 ("soc: ti: add Keystone Navigator QMSS driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc23519181926bb0818dabe55cb0b364f34f4e0f
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 13 21:17:28 2020 +0800

    crypto: omap-aes - Fix PM disable depth imbalance in omap_aes_probe
    
    [ Upstream commit ff8107200367f4abe0e5bce66a245e8d0f2d229e ]
    
    The pm_runtime_enable will increase power disable depth.
    Thus a pairing decrement is needed on the error handling
    path to keep it balanced according to context.
    
    Fixes: f7b2b5dd6a62a ("crypto: omap-aes - add error check for pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45fd6c63d5bcf46ab56172f232a379515a781203
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 9 21:13:46 2020 +0800

    staging: greybus: codecs: Fix reference counter leak in error handling
    
    [ Upstream commit 3952659a6108f77a0d062d8e8487bdbdaf52a66c ]
    
    gb_pm_runtime_get_sync has increased the usage counter of the device here.
    Forgetting to call gb_pm_runtime_put_noidle will result in usage counter
    leak in the error branch of (gbcodec_hw_params and gbcodec_prepare). We
    fixed it by adding it.
    
    Fixes: c388ae7696992 ("greybus: audio: Update pm runtime support in dai_ops callback")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201109131347.1725288-2-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b95cafe3bc904faefeec2aaa009222a6acd659da
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:06 2020 +0800

    spi: tegra114: fix reference leak in tegra spi ops
    
    [ Upstream commit a042184c7fb99961ea083d4ec192614bec671969 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_spi_setup and
    tegra_spi_resume), so we should fix it.
    
    Fixes: f333a331adfac ("spi/tegra114: add spi driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141306.5607-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ab91193ba373114ea2ae006e1e7886e6524a20f
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:23 2020 +0800

    spi: tegra20-sflash: fix reference leak in tegra_sflash_resume
    
    [ Upstream commit 3482e797ab688da6703fe18d8bad52f94199f4f2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in tegra_sflash_resume, so we should fix it.
    
    Fixes: 8528547bcc336 ("spi: tegra: add spi driver for sflash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141323.5841-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d377167daaff440ce70a3bf3eedbf2eb29c110ef
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:45 2020 +0800

    spi: tegra20-slink: fix reference leak in slink ops of tegra20
    
    [ Upstream commit 763eab7074f6e71babd85d796156f05a675f9510 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_slink_setup and
    tegra_slink_resume), so we should fix it.
    
    Fixes: dc4dc36056392 ("spi: tegra: add spi driver for SLINK controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141345.6188-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6be4da5834842ba2e1cab0e4a6f85bfa20cef4f
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:47 2020 +0800

    spi: spi-ti-qspi: fix reference leak in ti_qspi_setup
    
    [ Upstream commit 45c0cba753641e5d7c3207f04241bd0e7a021698 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in ti_qspi_setup, so we should fix it.
    
    Fixes: 505a14954e2d7 ("spi/qspi: Add qspi flash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140947.3815-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd888ceec2e9eeb84ce7e5458de49c889663e5b4
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:56:51 2020 +0800

    spi: img-spfi: fix reference leak in img_spfi_resume
    
    [ Upstream commit ee5558a9084584015c8754ffd029ce14a5827fa8 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in img_spfi_resume, so we should fix it.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102145651.3875-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1560a7447f7c15020ea1dd840f8c3ec1f7944eed
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:37 2020 -0800

    soc: ti: Fix reference imbalance in knav_dma_probe
    
    [ Upstream commit b4fa73358c306d747a2200aec6f7acb97e5750e6 ]
    
    The patch fix two reference leak.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to call put operation will result in
         reference leak.
    
      2) The pm_runtime_enable will increase power disable depth. Thus
         a pairing decrement is needed on the error handling path to
         keep it balanced.
    
    We fix it by: 1) adding call pm_runtime_put_noidle or
    pm_runtime_put_sync in error handling. 2) adding pm_runtime_disable
    in error handling, to keep usage counter and disable depth balanced.
    
    Fixes: 88139ed030583 ("soc: ti: add Keystone Navigator DMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59d79e7cff3f0827dd3f910bb1d3f26e414b09de
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:00 2020 -0800

    soc: ti: knav_qmss: fix reference leak in knav_queue_probe
    
    [ Upstream commit ec8684847d8062496c4619bc3fcff31c19d56847 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in knav_queue_probe, so we should fix it.
    
    Fixes: 41f93af900a20 ("soc: ti: add Keystone Navigator QMSS driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c2e589ecdfb1bb4b6695e6b6999d8cc71246e9a
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:06 2020 +0800

    spi: tegra114: fix reference leak in tegra spi ops
    
    [ Upstream commit a042184c7fb99961ea083d4ec192614bec671969 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_spi_setup and
    tegra_spi_resume), so we should fix it.
    
    Fixes: f333a331adfac ("spi/tegra114: add spi driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141306.5607-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79141a274053e0edf17a818e9776f294b923acbf
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:23 2020 +0800

    spi: tegra20-sflash: fix reference leak in tegra_sflash_resume
    
    [ Upstream commit 3482e797ab688da6703fe18d8bad52f94199f4f2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in tegra_sflash_resume, so we should fix it.
    
    Fixes: 8528547bcc336 ("spi: tegra: add spi driver for sflash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141323.5841-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0b45edb199e9cba714f43aa9bb33d00fc0c52c1
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:45 2020 +0800

    spi: tegra20-slink: fix reference leak in slink ops of tegra20
    
    [ Upstream commit 763eab7074f6e71babd85d796156f05a675f9510 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_slink_setup and
    tegra_slink_resume), so we should fix it.
    
    Fixes: dc4dc36056392 ("spi: tegra: add spi driver for SLINK controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141345.6188-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd375b9a0498469f98eb8235f8e0293c74cd3c95
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:47 2020 +0800

    spi: spi-ti-qspi: fix reference leak in ti_qspi_setup
    
    [ Upstream commit 45c0cba753641e5d7c3207f04241bd0e7a021698 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in ti_qspi_setup, so we should fix it.
    
    Fixes: 505a14954e2d7 ("spi/qspi: Add qspi flash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140947.3815-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72b485053c40564ed8bd7a5882879bd69f947214
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:56:51 2020 +0800

    spi: img-spfi: fix reference leak in img_spfi_resume
    
    [ Upstream commit ee5558a9084584015c8754ffd029ce14a5827fa8 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in img_spfi_resume, so we should fix it.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102145651.3875-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5855a711029ee956b0f9443416969e6e67dd8294
Author: Can Guo <cang@codeaurora.org>
Date:   Tue Sep 22 00:09:04 2020 -0700

    scsi: ufs: Make sure clk scaling happens only when HBA is runtime ACTIVE
    
    [ Upstream commit 73cc291c270248567245f084dcdf5078069af6b5 ]
    
    If someone plays with the UFS clk scaling devfreq governor through sysfs,
    ufshcd_devfreq_scale may be called even when HBA is not runtime ACTIVE.
    This can lead to unexpected error. We cannot just protect it by calling
    pm_runtime_get_sync() because that may cause a race condition since HBA
    runtime suspend ops need to suspend clk scaling. To fix this call
    pm_runtime_get_noresume() and check HBA's runtime status. Only proceed if
    HBA is runtime ACTIVE, otherwise just bail.
    
    governor_store
     devfreq_performance_handler
      update_devfreq
       devfreq_set_target
        ufshcd_devfreq_target
         ufshcd_devfreq_scale
    
    Link: https://lore.kernel.org/r/1600758548-28576-1-git-send-email-cang@codeaurora.org
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba3f951a6a0dd2c90f3d50276bf186822328f3dc
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 28 21:39:21 2020 +0800

    can: c_can: c_can_power_up(): fix error handling
    
    [ Upstream commit 44cef0c0ffbd8d61143712ce874be68a273b7884 ]
    
    In the error handling in c_can_power_up(), there are two bugs:
    
    1) c_can_pm_runtime_get_sync() will increase usage counter if device is not
       empty. Forgetting to call c_can_pm_runtime_put_sync() will result in a
       reference leak here.
    
    2) c_can_reset_ram() operation will set start bit when enable is true. We
       should clear it in the error handling.
    
    We fix it by adding c_can_pm_runtime_put_sync() for 1), and
    c_can_reset_ram(enable is false) for 2) in the error handling.
    
    Fixes: 8212003260c60 ("can: c_can: Add d_can suspend resume support")
    Fixes: 52cde85acc23f ("can: c_can: Add d_can raminit support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201128133922.3276973-2-zhangqilong3@huawei.com
    [mkl: return "0" instead of "ret"]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adad2bc9f303c8a6cab94a4766d436d66e812a54
Author: Can Guo <cang@codeaurora.org>
Date:   Tue Sep 22 00:09:04 2020 -0700

    scsi: ufs: Make sure clk scaling happens only when HBA is runtime ACTIVE
    
    [ Upstream commit 73cc291c270248567245f084dcdf5078069af6b5 ]
    
    If someone plays with the UFS clk scaling devfreq governor through sysfs,
    ufshcd_devfreq_scale may be called even when HBA is not runtime ACTIVE.
    This can lead to unexpected error. We cannot just protect it by calling
    pm_runtime_get_sync() because that may cause a race condition since HBA
    runtime suspend ops need to suspend clk scaling. To fix this call
    pm_runtime_get_noresume() and check HBA's runtime status. Only proceed if
    HBA is runtime ACTIVE, otherwise just bail.
    
    governor_store
     devfreq_performance_handler
      update_devfreq
       devfreq_set_target
        ufshcd_devfreq_target
         ufshcd_devfreq_scale
    
    Link: https://lore.kernel.org/r/1600758548-28576-1-git-send-email-cang@codeaurora.org
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8d6255548ff9a94f1fed44b01da9602861cf84a
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Dec 12 18:55:16 2020 +0100

    can: m_can: m_can_clk_start(): make use of pm_runtime_resume_and_get()
    
    With patch
    
    | dd8088d5a896 PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter
    
    the usual pm_runtime_get_sync() and pm_runtime_put_noidle() in-case-of-error
    dance is no longer needed. Convert the m_can driver to use this function.
    
    Link: https://lore.kernel.org/r/20201212175518.139651-6-mkl@pengutronix.de
    Reviewed-by: Sean Nyekjaer <sean@geanix.com>
    Reviewed-by: Dan Murphy <dmurphy@ti.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 8711071e9700b67045fe5518161d63f7a03e3c9e
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Oct 30 23:49:09 2020 +0800

    watchdog: rti-wdt: fix reference leak in rti_wdt_probe
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in rti_wdt_probe, so we should fix it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201030154909.100023-1-zhangqilong3@huawei.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>

commit 1b391c7f2e863985668d705f525af3ceb55bc800
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 7 19:05:52 2020 +0800

    mtd: rawnand: gpmi: fix reference count leak in gpmi ops
    
    pm_runtime_get_sync() will increment pm usage at first and it
    will resume the device later. If runtime of the device has
    error or device is in inaccessible state(or other error state),
    resume operation will fail. If we do not call put operation to
    decrease the reference, it will result in reference leak in
    the two functions(gpmi_init and gpmi_nfc_exec_op). Moreover,
    this device cannot enter the idle state and always stay busy or
    other non-idle state later. So we fixed it through adding
    pm_runtime_put_noidle.
    
    Fixes: 5bc6bb603b4d0 ("mtd: rawnand: gpmi: Fix suspend/resume problem")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Han Xu <han.xu@nxp.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20201107110552.1568742-1-zhangqilong3@huawei.com

commit c0a6e5ee1ecfe4c3a5799cfd30820748eff5dfab
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:35:54 2020 +0800

    remoteproc: qcom: pas: fix error handling in adsp_pds_enable
    
    If the pm_runtime_get_sync failed in adsp_pds_enable when
    loop (i), The unroll_pd_votes will start from (i - 1), and
    it will resulted in following problems:
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) Have not reset pds[i] performance state.
    
    Then we fix it.
    
    Fixes: 17ee2fb4e8567 ("remoteproc: qcom: pas: Vote for active/proxy power domains")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102143554.144707-1-zhangqilong3@huawei.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit aa37448f597c09844942da87d042fc6793f989c2
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:35:34 2020 +0800

    remoteproc: qcom: fix reference leak in adsp_start
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in adsp_start, so we should fix it.
    
    Fixes: dc160e4491222 ("remoteproc: qcom: Introduce Non-PAS ADSP PIL driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102143534.144484-1-zhangqilong3@huawei.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit a24723050037303e4008b37f1f8dcc99c58901aa
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:34:33 2020 +0800

    remoteproc: q6v5-mss: fix error handling in q6v5_pds_enable
    
    If the pm_runtime_get_sync failed in q6v5_pds_enable when
    loop (i), The unroll_pd_votes will start from (i - 1), and
    it will resulted in following problems:
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) Have not reset pds[i] performance state.
    
    Then we fix it.
    
    Fixes: 4760a896be88e ("remoteproc: q6v5-mss: Vote for rpmh power domains")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102143433.143996-1-zhangqilong3@huawei.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 8ae954caf49ac403c177d117fb8e05cbc866aa3c
Author: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
Date:   Sat Dec 5 03:19:20 2020 +0100

    clocksource/drivers/sh_cmt: Fix potential deadlock when calling runtime PM
    
    The ch->lock is used to protect the whole enable() and read() of
    sh_cmt's implementation of struct clocksource. The enable()
    implementation calls pm_runtime_get_sync() which may result in the clock
    source to be read() triggering a cyclic lockdep warning for the
    ch->lock.
    
    The sh_cmt driver implement its own balancing of calls to
    sh_cmt_{enable,disable}() with flags in sh_cmt_{start,stop}(). It does
    this to deal with that start and stop are shared between the clock
    source and clock event providers. While this could be improved on
    verifying corner cases based on any substantial rework on all devices
    this driver supports might prove hard.
    
    As a first step separate the PM handling for clock event and clock
    source. Always put/get the device when enabling/disabling the clock
    source but keep the clock event logic unchanged. This allows the sh_cmt
    implementation of struct clocksource to call PM without holding the
    ch->lock and avoiding the deadlock.
    
    Triggering and log of the deadlock warning,
    
      # echo e60f0000.timer > /sys/devices/system/clocksource/clocksource0/current_clocksource
      [   46.948370] ======================================================
      [   46.954730] WARNING: possible circular locking dependency detected
      [   46.961094] 5.10.0-rc6-arm64-renesas-00001-g0e5fd7414e8b #36 Not tainted
      [   46.967985] ------------------------------------------------------
      [   46.974342] migration/0/11 is trying to acquire lock:
      [   46.979543] ffff0000403ed220 (&dev->power.lock){-...}-{2:2}, at: __pm_runtime_resume+0x40/0x74
      [   46.988445]
      [   46.988445] but task is already holding lock:
      [   46.994441] ffff000040ad0298 (&ch->lock){....}-{2:2}, at: sh_cmt_start+0x28/0x210
      [   47.002173]
      [   47.002173] which lock already depends on the new lock.
      [   47.002173]
      [   47.010573]
      [   47.010573] the existing dependency chain (in reverse order) is:
      [   47.018262]
      [   47.018262] -> #3 (&ch->lock){....}-{2:2}:
      [   47.024033]        lock_acquire.part.0+0x120/0x330
      [   47.028970]        lock_acquire+0x64/0x80
      [   47.033105]        _raw_spin_lock_irqsave+0x7c/0xc4
      [   47.038130]        sh_cmt_start+0x28/0x210
      [   47.042352]        sh_cmt_clocksource_enable+0x28/0x50
      [   47.047644]        change_clocksource+0x9c/0x160
      [   47.052402]        multi_cpu_stop+0xa4/0x190
      [   47.056799]        cpu_stopper_thread+0x90/0x154
      [   47.061557]        smpboot_thread_fn+0x244/0x270
      [   47.066310]        kthread+0x154/0x160
      [   47.070175]        ret_from_fork+0x10/0x20
      [   47.074390]
      [   47.074390] -> #2 (tk_core.seq.seqcount){----}-{0:0}:
      [   47.081136]        lock_acquire.part.0+0x120/0x330
      [   47.086070]        lock_acquire+0x64/0x80
      [   47.090203]        seqcount_lockdep_reader_access.constprop.0+0x74/0x100
      [   47.097096]        ktime_get+0x28/0xa0
      [   47.100960]        hrtimer_start_range_ns+0x210/0x2dc
      [   47.106164]        generic_sched_clock_init+0x70/0x88
      [   47.111364]        sched_clock_init+0x40/0x64
      [   47.115853]        start_kernel+0x494/0x524
      [   47.120156]
      [   47.120156] -> #1 (hrtimer_bases.lock){-.-.}-{2:2}:
      [   47.126721]        lock_acquire.part.0+0x120/0x330
      [   47.136042]        lock_acquire+0x64/0x80
      [   47.144461]        _raw_spin_lock_irqsave+0x7c/0xc4
      [   47.153721]        hrtimer_start_range_ns+0x68/0x2dc
      [   47.163054]        rpm_suspend+0x308/0x5dc
      [   47.171473]        rpm_idle+0xc4/0x2a4
      [   47.179550]        pm_runtime_work+0x98/0xc0
      [   47.188209]        process_one_work+0x294/0x6f0
      [   47.197142]        worker_thread+0x70/0x45c
      [   47.205661]        kthread+0x154/0x160
      [   47.213673]        ret_from_fork+0x10/0x20
      [   47.221957]
      [   47.221957] -> #0 (&dev->power.lock){-...}-{2:2}:
      [   47.236292]        check_noncircular+0x128/0x140
      [   47.244907]        __lock_acquire+0x13b0/0x204c
      [   47.253332]        lock_acquire.part.0+0x120/0x330
      [   47.262033]        lock_acquire+0x64/0x80
      [   47.269826]        _raw_spin_lock_irqsave+0x7c/0xc4
      [   47.278430]        __pm_runtime_resume+0x40/0x74
      [   47.286758]        sh_cmt_start+0x84/0x210
      [   47.294537]        sh_cmt_clocksource_enable+0x28/0x50
      [   47.303449]        change_clocksource+0x9c/0x160
      [   47.311783]        multi_cpu_stop+0xa4/0x190
      [   47.319720]        cpu_stopper_thread+0x90/0x154
      [   47.328022]        smpboot_thread_fn+0x244/0x270
      [   47.336298]        kthread+0x154/0x160
      [   47.343708]        ret_from_fork+0x10/0x20
      [   47.351445]
      [   47.351445] other info that might help us debug this:
      [   47.351445]
      [   47.370225] Chain exists of:
      [   47.370225]   &dev->power.lock --> tk_core.seq.seqcount --> &ch->lock
      [   47.370225]
      [   47.392003]  Possible unsafe locking scenario:
      [   47.392003]
      [   47.405314]        CPU0                    CPU1
      [   47.413569]        ----                    ----
      [   47.421768]   lock(&ch->lock);
      [   47.428425]                                lock(tk_core.seq.seqcount);
      [   47.438701]                                lock(&ch->lock);
      [   47.447930]   lock(&dev->power.lock);
      [   47.455172]
      [   47.455172]  *** DEADLOCK ***
      [   47.455172]
      [   47.471433] 3 locks held by migration/0/11:
      [   47.479099]  #0: ffff8000113c9278 (timekeeper_lock){-.-.}-{2:2}, at: change_clocksource+0x2c/0x160
      [   47.491834]  #1: ffff8000113c8f88 (tk_core.seq.seqcount){----}-{0:0}, at: multi_cpu_stop+0xa4/0x190
      [   47.504727]  #2: ffff000040ad0298 (&ch->lock){....}-{2:2}, at: sh_cmt_start+0x28/0x210
      [   47.516541]
      [   47.516541] stack backtrace:
      [   47.528480] CPU: 0 PID: 11 Comm: migration/0 Not tainted 5.10.0-rc6-arm64-renesas-00001-g0e5fd7414e8b #36
      [   47.542147] Hardware name: Renesas Salvator-X 2nd version board based on r8a77965 (DT)
      [   47.554241] Call trace:
      [   47.560832]  dump_backtrace+0x0/0x190
      [   47.568670]  show_stack+0x14/0x30
      [   47.576144]  dump_stack+0xe8/0x130
      [   47.583670]  print_circular_bug+0x1f0/0x200
      [   47.592015]  check_noncircular+0x128/0x140
      [   47.600289]  __lock_acquire+0x13b0/0x204c
      [   47.608486]  lock_acquire.part.0+0x120/0x330
      [   47.616953]  lock_acquire+0x64/0x80
      [   47.624582]  _raw_spin_lock_irqsave+0x7c/0xc4
      [   47.633114]  __pm_runtime_resume+0x40/0x74
      [   47.641371]  sh_cmt_start+0x84/0x210
      [   47.649115]  sh_cmt_clocksource_enable+0x28/0x50
      [   47.657916]  change_clocksource+0x9c/0x160
      [   47.666165]  multi_cpu_stop+0xa4/0x190
      [   47.674056]  cpu_stopper_thread+0x90/0x154
      [   47.682308]  smpboot_thread_fn+0x244/0x270
      [   47.690560]  kthread+0x154/0x160
      [   47.697927]  ret_from_fork+0x10/0x20
      [   47.708447] clocksource: Switched to clocksource e60f0000.timer
    
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201205021921.1456190-2-niklas.soderlund+renesas@ragnatech.se

commit fd5cfde331f86e7712a037e68e9e66b29eaea9fa
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Fri Sep 18 11:23:39 2020 +0200

    media: ccs: Clean up runtime PM usage
    
    If pm_runtime_get_sync() fails, there's no need to set the device active
    again. Also, in the same case to return the usage_count to zero,
    pm_runtime_put_noidle() is enough.
    
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit bce776f10069c806290eaac712ba73432ae8ecd7
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Wed Dec 2 22:53:20 2020 +0800

    hwmon: (ina3221) Fix PM usage counter unbalance in ina3221_write_enable
    
    pm_runtime_get_sync will increment pm usage counter
    even it failed. Forgetting to putting operation will
    result in reference leak here. We fix it by replacing
    it with pm_runtime_resume_and_get to keep usage counter
    balanced. It depends on the mainline commit[PM: runtime:
    Add pm_runtime_resume_and_get to deal with usagecounter].
    
    Fixes: 323aeb0eb5d9a ("hwmon: (ina3221) Add PM runtime support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201202145320.1135614-1-zhangqilong3@huawei.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

commit 7f57b295f990c0fa07f96d51ca1c82c52dbf79cc
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 27 17:44:45 2020 +0800

    gpio: zynq: fix reference leak in zynq_gpio functions
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to putting operation will result in a
    reference leak here.
    
    A new function pm_runtime_resume_and_get is introduced in
    [0] to keep usage counter balanced. So We fix the reference
    leak by replacing it with new funtion.
    
    [0] dd8088d5a896 ("PM: runtime: Add  pm_runtime_resume_and_get to deal with usage counter")
    
    Fixes: c2df3de0d07e ("gpio: zynq: properly support runtime PM for GPIO used as interrupts")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>

commit 5136d244029d9a45cb22a955827b96f62be03080
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Nov 19 14:29:16 2020 +0800

    scsi: ufs: Fix race between shutdown and runtime resume flow
    
    [ Upstream commit e92643db514803c2c87d72caf5950b4c0a8faf4a ]
    
    If UFS host device is in runtime-suspended state while UFS shutdown
    callback is invoked, UFS device shall be resumed for register
    accesses. Currently only UFS local runtime resume function will be invoked
    to wake up the host.  This is not enough because if someone triggers
    runtime resume from block layer, then race may happen between shutdown and
    runtime resume flow, and finally lead to unlocked register access.
    
    To fix this, in ufshcd_shutdown(), use pm_runtime_get_sync() instead of
    resuming UFS device by ufshcd_runtime_resume() "internally" to let runtime
    PM framework manage the whole resume flow.
    
    Link: https://lore.kernel.org/r/20201119062916.12931-1-stanley.chu@mediatek.com
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11b62fd00c628acc7f701f9307dc59c8732f0cf5
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Nov 19 14:29:16 2020 +0800

    scsi: ufs: Fix race between shutdown and runtime resume flow
    
    [ Upstream commit e92643db514803c2c87d72caf5950b4c0a8faf4a ]
    
    If UFS host device is in runtime-suspended state while UFS shutdown
    callback is invoked, UFS device shall be resumed for register
    accesses. Currently only UFS local runtime resume function will be invoked
    to wake up the host.  This is not enough because if someone triggers
    runtime resume from block layer, then race may happen between shutdown and
    runtime resume flow, and finally lead to unlocked register access.
    
    To fix this, in ufshcd_shutdown(), use pm_runtime_get_sync() instead of
    resuming UFS device by ufshcd_runtime_resume() "internally" to let runtime
    PM framework manage the whole resume flow.
    
    Link: https://lore.kernel.org/r/20201119062916.12931-1-stanley.chu@mediatek.com
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b364d26a171a300989148b52e83ec0b75df820a
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Nov 19 14:29:16 2020 +0800

    scsi: ufs: Fix race between shutdown and runtime resume flow
    
    [ Upstream commit e92643db514803c2c87d72caf5950b4c0a8faf4a ]
    
    If UFS host device is in runtime-suspended state while UFS shutdown
    callback is invoked, UFS device shall be resumed for register
    accesses. Currently only UFS local runtime resume function will be invoked
    to wake up the host.  This is not enough because if someone triggers
    runtime resume from block layer, then race may happen between shutdown and
    runtime resume flow, and finally lead to unlocked register access.
    
    To fix this, in ufshcd_shutdown(), use pm_runtime_get_sync() instead of
    resuming UFS device by ufshcd_runtime_resume() "internally" to let runtime
    PM framework manage the whole resume flow.
    
    Link: https://lore.kernel.org/r/20201119062916.12931-1-stanley.chu@mediatek.com
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8541087975223fa664c1e1fb263e8446509ef725
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Nov 19 14:29:16 2020 +0800

    scsi: ufs: Fix race between shutdown and runtime resume flow
    
    [ Upstream commit e92643db514803c2c87d72caf5950b4c0a8faf4a ]
    
    If UFS host device is in runtime-suspended state while UFS shutdown
    callback is invoked, UFS device shall be resumed for register
    accesses. Currently only UFS local runtime resume function will be invoked
    to wake up the host.  This is not enough because if someone triggers
    runtime resume from block layer, then race may happen between shutdown and
    runtime resume flow, and finally lead to unlocked register access.
    
    To fix this, in ufshcd_shutdown(), use pm_runtime_get_sync() instead of
    resuming UFS device by ufshcd_runtime_resume() "internally" to let runtime
    PM framework manage the whole resume flow.
    
    Link: https://lore.kernel.org/r/20201119062916.12931-1-stanley.chu@mediatek.com
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9745eeb6450e5b91cb8868209a450e7c769a9724
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Nov 19 14:29:16 2020 +0800

    scsi: ufs: Fix race between shutdown and runtime resume flow
    
    [ Upstream commit e92643db514803c2c87d72caf5950b4c0a8faf4a ]
    
    If UFS host device is in runtime-suspended state while UFS shutdown
    callback is invoked, UFS device shall be resumed for register
    accesses. Currently only UFS local runtime resume function will be invoked
    to wake up the host.  This is not enough because if someone triggers
    runtime resume from block layer, then race may happen between shutdown and
    runtime resume flow, and finally lead to unlocked register access.
    
    To fix this, in ufshcd_shutdown(), use pm_runtime_get_sync() instead of
    resuming UFS device by ufshcd_runtime_resume() "internally" to let runtime
    PM framework manage the whole resume flow.
    
    Link: https://lore.kernel.org/r/20201119062916.12931-1-stanley.chu@mediatek.com
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 081500a2ef84dc7fecc380b7aa891bd53db0841f
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Nov 19 14:29:16 2020 +0800

    scsi: ufs: Fix race between shutdown and runtime resume flow
    
    [ Upstream commit e92643db514803c2c87d72caf5950b4c0a8faf4a ]
    
    If UFS host device is in runtime-suspended state while UFS shutdown
    callback is invoked, UFS device shall be resumed for register
    accesses. Currently only UFS local runtime resume function will be invoked
    to wake up the host.  This is not enough because if someone triggers
    runtime resume from block layer, then race may happen between shutdown and
    runtime resume flow, and finally lead to unlocked register access.
    
    To fix this, in ufshcd_shutdown(), use pm_runtime_get_sync() instead of
    resuming UFS device by ufshcd_runtime_resume() "internally" to let runtime
    PM framework manage the whole resume flow.
    
    Link: https://lore.kernel.org/r/20201119062916.12931-1-stanley.chu@mediatek.com
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44cef0c0ffbd8d61143712ce874be68a273b7884
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 28 21:39:21 2020 +0800

    can: c_can: c_can_power_up(): fix error handling
    
    In the error handling in c_can_power_up(), there are two bugs:
    
    1) c_can_pm_runtime_get_sync() will increase usage counter if device is not
       empty. Forgetting to call c_can_pm_runtime_put_sync() will result in a
       reference leak here.
    
    2) c_can_reset_ram() operation will set start bit when enable is true. We
       should clear it in the error handling.
    
    We fix it by adding c_can_pm_runtime_put_sync() for 1), and
    c_can_reset_ram(enable is false) for 2) in the error handling.
    
    Fixes: 8212003260c60 ("can: c_can: Add d_can suspend resume support")
    Fixes: 52cde85acc23f ("can: c_can: Add d_can raminit support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201128133922.3276973-2-zhangqilong3@huawei.com
    [mkl: return "0" instead of "ret"]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit b2f6cb78eaa1cad57dd3fe11d0458cd4fae9a584
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:33:21 2020 +0800

    power: supply: bq24190_charger: fix reference leak
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in callers(bq24190_sysfs_show,
    bq24190_charger_get_property, bq24190_charger_set_property,
    bq24190_battery_get_property, bq24190_battery_set_property),
    so we should fix it.
    
    Fixes: f385e6e2a1532 ("power: bq24190_charger: Use PM runtime autosuspend")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

commit 46b6cf1ebf21b2b731bfa1803e8dff0b5d78cd9a
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sun Nov 8 16:30:00 2020 +0800

    can: flexcan: fix failure handling of pm_runtime_get_sync()
    
    [ Upstream commit b7ee5bc3e1006433601a058a6a7c24c5272635f4 ]
    
    pm_runtime_get_sync() will increment pm usage at first and it will resume the
    device later. If runtime of the device has error or device is in inaccessible
    state(or other error state), resume operation will fail. If we do not call put
    operation to decrease the reference, it will result in reference leak in the
    two functions flexcan_get_berr_counter() and flexcan_open().
    
    Moreover, this device cannot enter the idle state and always stay busy or other
    non-idle state later. So we should fix it through adding
    pm_runtime_put_noidle().
    
    Fixes: ca10989632d88 ("can: flexcan: implement can Runtime PM")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201108083000.2599705-1-zhangqilong3@huawei.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca5bbd0fdd36e0430d7e5b79e0a68d5065ee0e53
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 10 17:29:33 2020 +0800

    net: fec: Fix reference count leak in fec series ops
    
    [ Upstream commit da875fa5040b0f951cb4bf7efbf59f6dcff44d3c ]
    
    pm_runtime_get_sync() will increment pm usage at first and it will
    resume the device later. If runtime of the device has error or
    device is in inaccessible state(or other error state), resume
    operation will fail. If we do not call put operation to decrease
    the reference, it will result in reference count leak. Moreover,
    this device cannot enter the idle state and always stay busy or other
    non-idle state later. So we fixed it by replacing it with
    pm_runtime_resume_and_get.
    
    Fixes: 8fff755e9f8d0 ("net: fec: Ensure clocks are enabled while using mdio bus")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 535a1c43fdf5d568e24a497094df835844e79fcd
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 10 17:29:32 2020 +0800

    PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter
    
    [ Upstream commit dd8088d5a8969dc2b42f71d7bc01c25c61a78066 ]
    
    In many case, we need to check return value of pm_runtime_get_sync, but
    it brings a trouble to the usage counter processing. Many callers forget
    to decrease the usage counter when it failed, which could resulted in
    reference leak. It has been discussed a lot[0][1]. So we add a function
    to deal with the usage counter for better coding.
    
    [0]https://lkml.org/lkml/2020/6/14/88
    [1]https://patchwork.ozlabs.org/project/linux-tegra/list/?series=178139
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Rafael J. Wysocki  <rafael.j.wysocki@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0c8508bf874ae45092136b63532e9bbef92c9a9
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sun Nov 8 16:30:00 2020 +0800

    can: flexcan: fix failure handling of pm_runtime_get_sync()
    
    [ Upstream commit b7ee5bc3e1006433601a058a6a7c24c5272635f4 ]
    
    pm_runtime_get_sync() will increment pm usage at first and it will resume the
    device later. If runtime of the device has error or device is in inaccessible
    state(or other error state), resume operation will fail. If we do not call put
    operation to decrease the reference, it will result in reference leak in the
    two functions flexcan_get_berr_counter() and flexcan_open().
    
    Moreover, this device cannot enter the idle state and always stay busy or other
    non-idle state later. So we should fix it through adding
    pm_runtime_put_noidle().
    
    Fixes: ca10989632d88 ("can: flexcan: implement can Runtime PM")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201108083000.2599705-1-zhangqilong3@huawei.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59bbf83835f591b95c3bdd09d900f3584fa227af
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 20 16:36:49 2020 -0800

    Input: omap4-keypad - fix runtime PM error handling
    
    In omap4_keypad_probe, the patch fix several bugs.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) In err_unmap, forget to disable runtime of device,
         pm_runtime_enable will increase power disable depth. Thus a
         pairing decrement is needed on the error handling path to keep
         it balanced.
    
      3) In err_pm_disable, it will call pm_runtime_put_sync twice not
         one time.
    
    To fix this we factor out code reading revision and disabling touchpad, and
    drop PM reference once we are done talking to the device.
    
    Fixes: f77621cc640a7 ("Input: omap-keypad - dynamically handle register offsets")
    Fixes: 5ad567ffbaf20 ("Input: omap4-keypad - wire up runtime PM handling")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201120133918.2559681-1-zhangqilong3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

commit b4fa73358c306d747a2200aec6f7acb97e5750e6
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:37 2020 -0800

    soc: ti: Fix reference imbalance in knav_dma_probe
    
    The patch fix two reference leak.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to call put operation will result in
         reference leak.
    
      2) The pm_runtime_enable will increase power disable depth. Thus
         a pairing decrement is needed on the error handling path to
         keep it balanced.
    
    We fix it by: 1) adding call pm_runtime_put_noidle or
    pm_runtime_put_sync in error handling. 2) adding pm_runtime_disable
    in error handling, to keep usage counter and disable depth balanced.
    
    Fixes: 88139ed030583 ("soc: ti: add Keystone Navigator DMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>

commit ec8684847d8062496c4619bc3fcff31c19d56847
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:00 2020 -0800

    soc: ti: knav_qmss: fix reference leak in knav_queue_probe
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in knav_queue_probe, so we should fix it.
    
    Fixes: 41f93af900a20 ("soc: ti: add Keystone Navigator QMSS driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>

commit ff8107200367f4abe0e5bce66a245e8d0f2d229e
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 13 21:17:28 2020 +0800

    crypto: omap-aes - Fix PM disable depth imbalance in omap_aes_probe
    
    The pm_runtime_enable will increase power disable depth.
    Thus a pairing decrement is needed on the error handling
    path to keep it balanced according to context.
    
    Fixes: f7b2b5dd6a62a ("crypto: omap-aes - add error check for pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit e92643db514803c2c87d72caf5950b4c0a8faf4a
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Nov 19 14:29:16 2020 +0800

    scsi: ufs: Fix race between shutdown and runtime resume flow
    
    If UFS host device is in runtime-suspended state while UFS shutdown
    callback is invoked, UFS device shall be resumed for register
    accesses. Currently only UFS local runtime resume function will be invoked
    to wake up the host.  This is not enough because if someone triggers
    runtime resume from block layer, then race may happen between shutdown and
    runtime resume flow, and finally lead to unlocked register access.
    
    To fix this, in ufshcd_shutdown(), use pm_runtime_get_sync() instead of
    resuming UFS device by ufshcd_runtime_resume() "internally" to let runtime
    PM framework manage the whole resume flow.
    
    Link: https://lore.kernel.org/r/20201119062916.12931-1-stanley.chu@mediatek.com
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 73cc291c270248567245f084dcdf5078069af6b5
Author: Can Guo <cang@codeaurora.org>
Date:   Tue Sep 22 00:09:04 2020 -0700

    scsi: ufs: Make sure clk scaling happens only when HBA is runtime ACTIVE
    
    If someone plays with the UFS clk scaling devfreq governor through sysfs,
    ufshcd_devfreq_scale may be called even when HBA is not runtime ACTIVE.
    This can lead to unexpected error. We cannot just protect it by calling
    pm_runtime_get_sync() because that may cause a race condition since HBA
    runtime suspend ops need to suspend clk scaling. To fix this call
    pm_runtime_get_noresume() and check HBA's runtime status. Only proceed if
    HBA is runtime ACTIVE, otherwise just bail.
    
    governor_store
     devfreq_performance_handler
      update_devfreq
       devfreq_set_target
        ufshcd_devfreq_target
         ufshcd_devfreq_scale
    
    Link: https://lore.kernel.org/r/1600758548-28576-1-git-send-email-cang@codeaurora.org
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 929f5035ec798ba85b000c15235e901f88df42a1
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 20:22:21 2020 +0800

    xhci: hisilicon: fix refercence leak in xhci_histb_probe
    
    commit 76255470ffa2795a44032e8b3c1ced11d81aa2db upstream.
    
    pm_runtime_get_sync() will increment pm usage at first and it
    will resume the device later. We should decrease the usage count
    whetever it succeeded or failed(maybe runtime of the device has
    error, or device is in inaccessible state, or other error state).
    If we do not call put operation to decrease the reference, it will
    result in reference leak in xhci_histb_probe. Moreover, this
    device cannot enter the idle state and always stay busy or other
    non-idle state later. So we fixed it by jumping to error handling
    branch.
    
    Fixes: c508f41da0788 ("xhci: hisilicon: support HiSilicon STB xHCI host controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201106122221.2304528-1-zhangqilong3@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fa7baa5092263f4c8aea0ae4a5239008049a523
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Oct 31 11:03:53 2020 +0800

    vfio: platform: fix reference leak in vfio_platform_open
    
    [ Upstream commit bb742ad01961a3b9d1f9d19375487b879668b6b2 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put will result in
    reference leak in vfio_platform_open, so we should fix it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d67ec8b7784109a85ea9d24d0983747d5e06c34
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 10:26:50 2020 +0800

    USB: apple-mfi-fastcharge: fix reference leak in apple_mfi_fc_set_property
    
    [ Upstream commit 00bd6bca3fb1e98190a24eda2583062803c9e8b5 ]
    
    pm_runtime_get_sync() will increment pm usage at first and it
    will resume the device later. If runtime of the device has
    error or device is in inaccessible state(or other error state),
    resume operation will fail. If we do not call put operation to
    decrease the reference, the result is that this device cannot
    enter the idle state and always stay busy or other non-idle
    state.
    
    Fixes: 249fa8217b846 ("USB: Add driver to control USB fast charge for iOS devices")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102022650.67115-1-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c4e751f6073ed77dc2a90bc2dc159ccea455b05
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:32:39 2020 -0500

    can: xilinx_can: handle failure cases of pm_runtime_get_sync
    
    [ Upstream commit 79c43333bdd5a7026a5aab606b53053b643585e7 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Link: https://lore.kernel.org/r/20200605033239.60664-1-navid.emamdoost@gmail.com
    Fixes: 4716620d1b62 ("can: xilinx: Convert to runtime_pm")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57626d77ef1e788e7f78e5da4a755ecc2d0d3a09
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 20:22:21 2020 +0800

    xhci: hisilicon: fix refercence leak in xhci_histb_probe
    
    commit 76255470ffa2795a44032e8b3c1ced11d81aa2db upstream.
    
    pm_runtime_get_sync() will increment pm usage at first and it
    will resume the device later. We should decrease the usage count
    whetever it succeeded or failed(maybe runtime of the device has
    error, or device is in inaccessible state, or other error state).
    If we do not call put operation to decrease the reference, it will
    result in reference leak in xhci_histb_probe. Moreover, this
    device cannot enter the idle state and always stay busy or other
    non-idle state later. So we fixed it by jumping to error handling
    branch.
    
    Fixes: c508f41da0788 ("xhci: hisilicon: support HiSilicon STB xHCI host controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201106122221.2304528-1-zhangqilong3@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6be53caf1c89ed3346e1d24627fd64093c5bb65
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Oct 31 11:03:53 2020 +0800

    vfio: platform: fix reference leak in vfio_platform_open
    
    [ Upstream commit bb742ad01961a3b9d1f9d19375487b879668b6b2 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put will result in
    reference leak in vfio_platform_open, so we should fix it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6c34afab0ed93343726c34a8f6a63718979b0f7
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:32:39 2020 -0500

    can: xilinx_can: handle failure cases of pm_runtime_get_sync
    
    [ Upstream commit 79c43333bdd5a7026a5aab606b53053b643585e7 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Link: https://lore.kernel.org/r/20200605033239.60664-1-navid.emamdoost@gmail.com
    Fixes: 4716620d1b62 ("can: xilinx: Convert to runtime_pm")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83361a5464e28dde737b4d6c7730fc490233cdc7
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 20:22:21 2020 +0800

    xhci: hisilicon: fix refercence leak in xhci_histb_probe
    
    commit 76255470ffa2795a44032e8b3c1ced11d81aa2db upstream.
    
    pm_runtime_get_sync() will increment pm usage at first and it
    will resume the device later. We should decrease the usage count
    whetever it succeeded or failed(maybe runtime of the device has
    error, or device is in inaccessible state, or other error state).
    If we do not call put operation to decrease the reference, it will
    result in reference leak in xhci_histb_probe. Moreover, this
    device cannot enter the idle state and always stay busy or other
    non-idle state later. So we fixed it by jumping to error handling
    branch.
    
    Fixes: c508f41da0788 ("xhci: hisilicon: support HiSilicon STB xHCI host controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201106122221.2304528-1-zhangqilong3@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a945da61809ebb8349e93f4356983363083937e0
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Oct 31 11:03:53 2020 +0800

    vfio: platform: fix reference leak in vfio_platform_open
    
    [ Upstream commit bb742ad01961a3b9d1f9d19375487b879668b6b2 ]
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put will result in
    reference leak in vfio_platform_open, so we should fix it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03fc41afaa6549baa2dab7a84e1afaf5cadb5b18
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:24:21 2020 +0800

    spi: mxs: fix reference leak in mxs_spi_probe
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in mxs_spi_probe, so we should fix it.
    
    Fixes: b7969caf41a1d ("spi: mxs: implement runtime pm")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201106012421.95420-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 7953446d664783cdb040fa25de40a3b3e6d0f6f4
Merge: e2142ef266c8 da875fa5040b
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Nov 16 09:37:13 2020 -0800

    Merge branch 'fix-usage-counter-leak-by-adding-a-general-sync-ops'
    
    Zhang Qilong says:
    
    ====================
    Fix usage counter leak by adding a general sync ops
    
    In many case, we need to check return value of pm_runtime_get_sync,
    but it brings a trouble to the usage counter processing. Many callers
    forget to decrease the usage counter when it failed, which could
    resulted in reference leak. It has been discussed a lot[0][1]. So we
    add a function to deal with the usage counter for better coding and
    view. Then, we replace pm_runtime_resume_and_get with it in fec_main.c
    to avoid it.
    
    [0] https://lkml.org/lkml/2020/6/14/88
    [1] https://patchwork.ozlabs.org/project/linux-tegra/list/?series=178139
    ====================
    
    Link: https://lore.kernel.org/r/20201110092933.3342784-1-zhangqilong3@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit da875fa5040b0f951cb4bf7efbf59f6dcff44d3c
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 10 17:29:33 2020 +0800

    net: fec: Fix reference count leak in fec series ops
    
    pm_runtime_get_sync() will increment pm usage at first and it will
    resume the device later. If runtime of the device has error or
    device is in inaccessible state(or other error state), resume
    operation will fail. If we do not call put operation to decrease
    the reference, it will result in reference count leak. Moreover,
    this device cannot enter the idle state and always stay busy or other
    non-idle state later. So we fixed it by replacing it with
    pm_runtime_resume_and_get.
    
    Fixes: 8fff755e9f8d0 ("net: fec: Ensure clocks are enabled while using mdio bus")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit dd8088d5a8969dc2b42f71d7bc01c25c61a78066
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 10 17:29:32 2020 +0800

    PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter
    
    In many case, we need to check return value of pm_runtime_get_sync, but
    it brings a trouble to the usage counter processing. Many callers forget
    to decrease the usage counter when it failed, which could resulted in
    reference leak. It has been discussed a lot[0][1]. So we add a function
    to deal with the usage counter for better coding.
    
    [0]https://lkml.org/lkml/2020/6/14/88
    [1]https://patchwork.ozlabs.org/project/linux-tegra/list/?series=178139
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Rafael J. Wysocki  <rafael.j.wysocki@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit e2142ef266c8a25e635ae4319254d7c01c84deb7
Merge: 849920c70339 a584e9bc1b7e
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Nov 16 07:34:30 2020 -0800

    Merge tag 'linux-can-fixes-for-5.10-20201115' of git://git.kernel.org/pub/scm/linux/kernel/git/mkl/linux-can
    
    Marc Kleine-Budde says:
    
    ====================
    pull-request: can 2020-11-15
    
    Anant Thazhemadam contributed two patches for the AF_CAN that prevent potential
    access of uninitialized member in can_rcv() and canfd_rcv().
    
    The next patch is by Alejandro Concepcion Rodriguez and changes can_restart()
    to use the correct function to push a skb into the networking stack from
    process context.
    
    Zhang Qilong's patch fixes a memory leak in the error path of the ti_hecc's
    probe function.
    
    A patch by me fixes mcba_usb_start_xmit() function in the mcba_usb driver, to
    first fill the skb and then pass it to can_put_echo_skb().
    
    Colin Ian King's patch fixes a potential integer overflow on shift in the
    peak_usb driver.
    
    The next two patches target the flexcan driver, a patch by me adds the missing
    "req_bit" to the stop mode property comment (which was broken during net-next
    for v5.10). Zhang Qilong's patch fixes the failure handling of
    pm_runtime_get_sync().
    
    The next seven patches target the m_can driver including the tcan4x5x spi
    driver glue code. Enric Balletbo i Serra's patch for the tcan4x5x Kconfig fix
    the REGMAP_SPI dependency handling. A patch by me for the tcan4x5x driver's
    probe() function adds missing error handling to for devm_regmap_init(), and in
    tcan4x5x_can_remove() the order of deregistration is fixed. Wu Bo's patch for
    the m_can driver fixes the state change handling in
    m_can_handle_state_change(). Two patches by Dan Murphy first introduce
    m_can_class_free_dev() and then make use of it to fix the freeing of the can
    device. A patch by Faiz Abbas add a missing shutdown of the CAN controller in
    the m_can_stop() function.
    
    * tag 'linux-can-fixes-for-5.10-20201115' of git://git.kernel.org/pub/scm/linux/kernel/git/mkl/linux-can:
      can: m_can: m_can_stop(): set device to software init mode before closing
      can: m_can: Fix freeing of can device from peripherials
      can: m_can: m_can_class_free_dev(): introduce new function
      can: m_can: m_can_handle_state_change(): fix state change
      can: tcan4x5x: tcan4x5x_can_remove(): fix order of deregistration
      can: tcan4x5x: tcan4x5x_can_probe(): add missing error checking for devm_regmap_init()
      can: tcan4x5x: replace depends on REGMAP_SPI with depends on SPI
      can: flexcan: fix failure handling of pm_runtime_get_sync()
      can: flexcan: flexcan_setup_stop_mode(): add missing "req_bit" to stop mode property comment
      can: peak_usb: fix potential integer overflow on shift of a int
      can: mcba_usb: mcba_usb_start_xmit(): first fill skb, then pass to can_put_echo_skb()
      can: ti_hecc: Fix memleak in ti_hecc_probe
      can: dev: can_restart(): post buffer from the right context
      can: af_can: prevent potential access of uninitialized member in canfd_rcv()
      can: af_can: prevent potential access of uninitialized member in can_rcv()
    ====================
    
    Link: https://lore.kernel.org/r/20201115174131.2089251-1-mkl@pengutronix.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 940727bf22f74cbdef8de327de34c4ae565c89ea
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 15:26:22 2020 +0100

    media: cedrus: fix reference leak in cedrus_start_streaming
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in cedrus_start_streaming. We should fix it.
    
    Fixes: d5aecd289babf ("media: cedrus: Implement runtime PM")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 4cbbe2aaa0536b0e7b3dfbd7febc3bc2ec300559
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 15:28:52 2020 +0100

    media: staging: rkisp1: cap: fix runtime PM imbalance on error
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference imbalance in rkisp1_vb2_start_streaming, so we
    should fix it.
    
    Fixes: 56e3b29f9f6b2 ("media: staging: rkisp1: add streaming paths")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 23d89aa0c2192f2d4582198b381d8805492c7925
Author: Daniel Baluta <daniel.baluta@nxp.com>
Date:   Wed Nov 11 13:11:18 2020 +0200

    firmware: imx-dsp: Export functions to request/free channels
    
    In order to save power, we only need to request a channel
    when the communication with the DSP active.
    
    For this we export the following functions:
            - imx_dsp_request_channel, gets a channel with a given index
            - imx_dsp_free_channel, frees a channel with a given index
    
    Notice that we still request channels at probe to support devices
    that do not have PM callbacks implemented.
    
    More explanations about why requesting a channel has an effect
    on power savings:
     - requesting an mailbox channel will call mailbox's startup
       function.
     - startup function calls pm_runtime_get_sync which increments device
       usage count and will keep the device active. Specifically, mailbox
       clock will be always ON when a mailbox channel is requested.
    
    Signed-off-by: Daniel Baluta <daniel.baluta@nxp.com>
    Reviewed-by: Paul Olaru <paul.olaru@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

commit b7ee5bc3e1006433601a058a6a7c24c5272635f4
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sun Nov 8 16:30:00 2020 +0800

    can: flexcan: fix failure handling of pm_runtime_get_sync()
    
    pm_runtime_get_sync() will increment pm usage at first and it will resume the
    device later. If runtime of the device has error or device is in inaccessible
    state(or other error state), resume operation will fail. If we do not call put
    operation to decrease the reference, it will result in reference leak in the
    two functions flexcan_get_berr_counter() and flexcan_open().
    
    Moreover, this device cannot enter the idle state and always stay busy or other
    non-idle state later. So we should fix it through adding
    pm_runtime_put_noidle().
    
    Fixes: ca10989632d88 ("can: flexcan: implement can Runtime PM")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201108083000.2599705-1-zhangqilong3@huawei.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 3952659a6108f77a0d062d8e8487bdbdaf52a66c
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 9 21:13:46 2020 +0800

    staging: greybus: codecs: Fix reference counter leak in error handling
    
    gb_pm_runtime_get_sync has increased the usage counter of the device here.
    Forgetting to call gb_pm_runtime_put_noidle will result in usage counter
    leak in the error branch of (gbcodec_hw_params and gbcodec_prepare). We
    fixed it by adding it.
    
    Fixes: c388ae7696992 ("greybus: audio: Update pm runtime support in dai_ops callback")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201109131347.1725288-2-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76255470ffa2795a44032e8b3c1ced11d81aa2db
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 20:22:21 2020 +0800

    xhci: hisilicon: fix refercence leak in xhci_histb_probe
    
    pm_runtime_get_sync() will increment pm usage at first and it
    will resume the device later. We should decrease the usage count
    whetever it succeeded or failed(maybe runtime of the device has
    error, or device is in inaccessible state, or other error state).
    If we do not call put operation to decrease the reference, it will
    result in reference leak in xhci_histb_probe. Moreover, this
    device cannot enter the idle state and always stay busy or other
    non-idle state later. So we fixed it by jumping to error handling
    branch.
    
    Fixes: c508f41da0788 ("xhci: hisilicon: support HiSilicon STB xHCI host controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201106122221.2304528-1-zhangqilong3@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4062765bc2a41e025e29dd56bad798505036427
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:50:35 2020 +0800

    spi: sprd: fix reference leak in sprd_spi_remove
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in sprd_spi_remove, so we should fix it.
    
    Fixes: e7d973a31c24b ("spi: sprd: Add SPI driver for Spreadtrum SC9860")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Chunyan Zhang <zhang.lyra@gmail.com>
    Link: https://lore.kernel.org/r/20201106015035.139574-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 1dcbdd944824369d4569959f8130336fe6fe5f39
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:58:35 2020 +0800

    spi: imx: fix reference leak in two imx operations
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in callers(spi_imx_prepare_message and
    spi_imx_remove), so we should fix it.
    
    Fixes: 525c9e5a32bd7 ("spi: imx: enable runtime pm support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102145835.4765-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit a5d704d33245b0799947a3008f9f376dba4d5c91
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Aug 22 14:57:33 2020 +0800

    drm/omap: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter
    even when it returns an error code. However, users of its
    direct wrappers in omapdrm assume that PM usage counter will
    not change on error. Thus a pairing decrement is needed on
    the error handling path for these wrappers to keep the counter
    balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200822065743.13671-1-dinghao.liu@zju.edu.cn

commit a042184c7fb99961ea083d4ec192614bec671969
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:06 2020 +0800

    spi: tegra114: fix reference leak in tegra spi ops
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_spi_setup and
    tegra_spi_resume), so we should fix it.
    
    Fixes: f333a331adfac ("spi/tegra114: add spi driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141306.5607-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 3482e797ab688da6703fe18d8bad52f94199f4f2
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:23 2020 +0800

    spi: tegra20-sflash: fix reference leak in tegra_sflash_resume
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in tegra_sflash_resume, so we should fix it.
    
    Fixes: 8528547bcc336 ("spi: tegra: add spi driver for sflash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141323.5841-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 763eab7074f6e71babd85d796156f05a675f9510
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:45 2020 +0800

    spi: tegra20-slink: fix reference leak in slink ops of tegra20
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_slink_setup and
    tegra_slink_resume), so we should fix it.
    
    Fixes: dc4dc36056392 ("spi: tegra: add spi driver for SLINK controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141345.6188-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 45c0cba753641e5d7c3207f04241bd0e7a021698
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:47 2020 +0800

    spi: spi-ti-qspi: fix reference leak in ti_qspi_setup
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in ti_qspi_setup, so we should fix it.
    
    Fixes: 505a14954e2d7 ("spi/qspi: Add qspi flash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140947.3815-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 88e1419b5ee30cc50e0c4d5265bdee1ba04af539
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:53:57 2020 +0800

    spi: stm32-qspi: fix reference leak in stm32 qspi operations
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(stm32_qspi_exec_op and
    stm32_qspi_setup), so we should fix it.
    
    Fixes: 9d282c17b023a ("spi: stm32-qspi: Add pm_runtime support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Patrice Chotard <patrice.chotard@st.com>
    Link: https://lore.kernel.org/r/20201106015357.141235-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 41f16530241405819ae5644b6544965ab124bbda
Merge: 521b619acdc8 2bcbf42add91
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 6 11:50:28 2020 -0800

    Merge tag 'net-5.10-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Networking fixes for 5.10-rc3, including fixes from wireless, can, and
      netfilter subtrees.
    
      Current merge window - bugs in new features:
    
       - can: isotp: isotp_rcv_cf(): enable RX timeout handling in
         listen-only mode
    
      Previous releases - regressions:
    
       - mac80211:
          - don't require VHT elements for HE on 2.4 GHz
          - fix regression where EAPOL frames were sent in plaintext
    
       - netfilter:
          - ipset: Update byte and packet counters regardless of whether
            they match
    
       - ip_tunnel: fix over-mtu packet send by allowing fragmenting even if
         inner packet has IP_DF (don't fragment) set in its header (when
         TUNNEL_DONT_FRAGMENT flag is not set on the tunnel dev)
    
       - net: fec: fix MDIO probing for some FEC hardware blocks
    
       - ip6_tunnel: set inner ipproto before ip6_tnl_encap to un-break gso
         support
    
       - sctp: Fix COMM_LOST/CANT_STR_ASSOC err reporting on big-endian
         platforms, sparse-related fix used the wrong integer size
    
      Previous releases - always broken:
    
       - netfilter: use actual socket sk rather than skb sk when routing
         harder
    
       - r8169: work around short packet hw bug on RTL8125 by padding frames
    
       - net: ethernet: ti: cpsw: disable PTPv1 hw timestamping
         advertisement, the hardware does not support it
    
       - chelsio/chtls: fix always leaking ctrl_skb and another leak caused
         by a race condition
    
       - fix drivers incorrectly writing into skbs on TX:
          - cadence: force nonlinear buffers to be cloned
          - gianfar: Account for Tx PTP timestamp in the skb headroom
          - gianfar: Replace skb_realloc_headroom with skb_cow_head for PTP
    
       - can: flexcan:
          - remove FLEXCAN_QUIRK_DISABLE_MECR quirk for LS1021A
          - add ECC initialization for VF610 and LX2160A
          - flexcan_remove(): disable wakeup completely
    
       - can: fix packet echo functionality:
          - peak_canfd: fix echo management when loopback is on
          - make sure skbs are not freed in IRQ context in case they need to
            be dropped
          - always clone the skbs to make sure they have a reference on the
            socket, and prevent it from disappearing
          - fix real payload length return value for RTR frames
    
       - can: j1939: return failure on bind if netdev is down, rather than
         waiting indefinitely
    
      Misc:
    
       - IPv6: reply ICMP error if the first fragment don't include all
         headers to improve compliance with RFC 8200"
    
    * tag 'net-5.10-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (66 commits)
      ionic: check port ptr before use
      r8169: work around short packet hw bug on RTL8125
      net: openvswitch: silence suspicious RCU usage warning
      chelsio/chtls: fix always leaking ctrl_skb
      chelsio/chtls: fix memory leaks caused by a race
      can: flexcan: flexcan_remove(): disable wakeup completely
      can: flexcan: add ECC initialization for VF610
      can: flexcan: add ECC initialization for LX2160A
      can: flexcan: remove FLEXCAN_QUIRK_DISABLE_MECR quirk for LS1021A
      can: mcp251xfd: remove unneeded break
      can: mcp251xfd: mcp251xfd_regmap_nocrc_read(): fix semicolon.cocci warnings
      can: mcp251xfd: mcp251xfd_regmap_crc_read(): increase severity of CRC read error messages
      can: peak_canfd: pucan_handle_can_rx(): fix echo management when loopback is on
      can: peak_usb: peak_usb_get_ts_time(): fix timestamp wrapping
      can: peak_usb: add range checking in decode operations
      can: xilinx_can: handle failure cases of pm_runtime_get_sync
      can: ti_hecc: ti_hecc_probe(): add missed clk_disable_unprepare() in error path
      can: isotp: padlen(): make const array static, makes object smaller
      can: isotp: isotp_rcv_cf(): enable RX timeout handling in listen-only mode
      can: isotp: Explain PDU in CAN_ISOTP help text
      ...

commit 00bd6bca3fb1e98190a24eda2583062803c9e8b5
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 10:26:50 2020 +0800

    USB: apple-mfi-fastcharge: fix reference leak in apple_mfi_fc_set_property
    
    pm_runtime_get_sync() will increment pm usage at first and it
    will resume the device later. If runtime of the device has
    error or device is in inaccessible state(or other error state),
    resume operation will fail. If we do not call put operation to
    decrease the reference, the result is that this device cannot
    enter the idle state and always stay busy or other non-idle
    state.
    
    Fixes: 249fa8217b846 ("USB: Add driver to control USB fast charge for iOS devices")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102022650.67115-1-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 900ccdcb79bb61471df1566a70b2b39687a628d5
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 6 09:52:17 2020 +0800

    spi: stm32: fix reference leak in stm32_spi_resume
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in stm32_spi_resume, so we should fix it.
    
    Fixes: db96bf976a4fc ("spi: stm32: fixes suspend/resume management")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Alain Volmat <alain.volmat@st.com>
    Link: https://lore.kernel.org/r/20201106015217.140476-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 90e8bbe6218a875a5bad5964452deedbbba98b2c
Author: Xiang Chen <chenxiang66@hisilicon.com>
Date:   Tue Sep 22 21:11:06 2020 +0800

    PM: runtime: Remove link state checks in rpm_get/put_supplier()
    
    commit d12544fb2aa9944b180c35914031a8384ab082c1 upstream.
    
    To support runtime PM for hisi SAS driver (the driver is in directory
    drivers/scsi/hisi_sas), we add device link between scsi_device->sdev_gendev
    (consumer device) and hisi_hba->dev(supplier device) with flags
    DL_FLAG_PM_RUNTIME | DL_FLAG_RPM_ACTIVE.
    
    After runtime suspended consumers and supplier, unload the dirver which
    causes a hung.
    
    We found that it called function device_release_driver_internal() to
    release the supplier device (hisi_hba->dev), as the device link was
    busy, it set the device link state to DL_STATE_SUPPLIER_UNBIND, and
    then it called device_release_driver_internal() to release the consumer
    device (scsi_device->sdev_gendev).
    
    Then it would try to call pm_runtime_get_sync() to resume the consumer
    device, but because consumer-supplier relation existed, it would try
    to resume the supplier first, but as the link state was already
    DL_STATE_SUPPLIER_UNBIND, so it skipped resuming the supplier and only
    resumed the consumer which hanged (it sends IOs to resume scsi_device
    while the SAS controller is suspended).
    
    Simple flow is as follows:
    
    device_release_driver_internal -> (supplier device)
        if device_links_busy ->
            device_links_unbind_consumers ->
                ...
                WRITE_ONCE(link->status, DL_STATE_SUPPLIER_UNBIND)
                device_release_driver_internal (consumer device)
        pm_runtime_get_sync -> (consumer device)
            ...
            __rpm_callback ->
                rpm_get_suppliers ->
                    if link->state == DL_STATE_SUPPLIER_UNBIND -> skip the action of resuming the supplier
                    ...
        pm_runtime_clean_up_links
        ...
    
    Correct suspend/resume ordering between a supplier device and its consumer
    devices (resume the supplier device before resuming consumer devices, and
    suspend consumer devices before suspending the supplier device) should be
    guaranteed by runtime PM, but the state checks in rpm_get_supplier() and
    rpm_put_supplier() break this rule, so remove them.
    
    Signed-off-by: Xiang Chen <chenxiang66@hisilicon.com>
    [ rjw: Subject and changelog edits ]
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e2f16dd611b9cc29ea3bce7a0dd9360cf0c01cd
Author: Xiang Chen <chenxiang66@hisilicon.com>
Date:   Tue Sep 22 21:11:06 2020 +0800

    PM: runtime: Remove link state checks in rpm_get/put_supplier()
    
    commit d12544fb2aa9944b180c35914031a8384ab082c1 upstream.
    
    To support runtime PM for hisi SAS driver (the driver is in directory
    drivers/scsi/hisi_sas), we add device link between scsi_device->sdev_gendev
    (consumer device) and hisi_hba->dev(supplier device) with flags
    DL_FLAG_PM_RUNTIME | DL_FLAG_RPM_ACTIVE.
    
    After runtime suspended consumers and supplier, unload the dirver which
    causes a hung.
    
    We found that it called function device_release_driver_internal() to
    release the supplier device (hisi_hba->dev), as the device link was
    busy, it set the device link state to DL_STATE_SUPPLIER_UNBIND, and
    then it called device_release_driver_internal() to release the consumer
    device (scsi_device->sdev_gendev).
    
    Then it would try to call pm_runtime_get_sync() to resume the consumer
    device, but because consumer-supplier relation existed, it would try
    to resume the supplier first, but as the link state was already
    DL_STATE_SUPPLIER_UNBIND, so it skipped resuming the supplier and only
    resumed the consumer which hanged (it sends IOs to resume scsi_device
    while the SAS controller is suspended).
    
    Simple flow is as follows:
    
    device_release_driver_internal -> (supplier device)
        if device_links_busy ->
            device_links_unbind_consumers ->
                ...
                WRITE_ONCE(link->status, DL_STATE_SUPPLIER_UNBIND)
                device_release_driver_internal (consumer device)
        pm_runtime_get_sync -> (consumer device)
            ...
            __rpm_callback ->
                rpm_get_suppliers ->
                    if link->state == DL_STATE_SUPPLIER_UNBIND -> skip the action of resuming the supplier
                    ...
        pm_runtime_clean_up_links
        ...
    
    Correct suspend/resume ordering between a supplier device and its consumer
    devices (resume the supplier device before resuming consumer devices, and
    suspend consumer devices before suspending the supplier device) should be
    guaranteed by runtime PM, but the state checks in rpm_get_supplier() and
    rpm_put_supplier() break this rule, so remove them.
    
    Signed-off-by: Xiang Chen <chenxiang66@hisilicon.com>
    [ rjw: Subject and changelog edits ]
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac6f929d74bad5e9e352aec936aeba0638bf560c
Merge: 2da4c187aea3 ab07ff1c92fa
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Nov 4 10:36:37 2020 -0800

    Merge tag 'linux-can-fixes-for-5.10-20201103' of git://git.kernel.org/pub/scm/linux/kernel/git/mkl/linux-can
    
    Marc Kleine-Budde says:
    
    ====================
    pull-request: can 2020-11-03
    
    The first two patches are by Oleksij Rempel and they add a generic
    can-controller Device Tree yaml binding and convert the text based binding
    of the flexcan driver to a yaml based binding.
    
    Zhang Changzhong's patch fixes a remove_proc_entry warning in the AF_CAN
    core.
    
    A patch by me fixes a kfree_skb() call from IRQ context in the rx-offload
    helper.
    
    Vincent Mailhol contributes a patch to prevent a call to kfree_skb() in
    hard IRQ context in can_get_echo_skb().
    
    Oliver Hartkopp's patch fixes the length calculation for RTR CAN frames
    in the __can_get_echo_skb() helper.
    
    Oleksij Rempel's patch fixes a use-after-free that shows up with j1939 in
    can_create_echo_skb().
    
    Yegor Yefremov contributes 4 patches to enhance the j1939 documentation.
    
    Zhang Changzhong's patch fixes a hanging task problem in j1939_sk_bind()
    if the netdev is down.
    
    Then there are three patches for the newly added CAN_ISOTP protocol. Geert
    Uytterhoeven enhances the kconfig help text. Oliver Hartkopp's patch adds
    missing RX timeout handling in listen-only mode and Colin Ian King's patch
    decreases the generated object code by 926 bytes.
    
    Zhang Changzhong contributes a patch for the ti_hecc driver that fixes the
    error path in the probe function.
    
    Navid Emamdoost's patch for the xilinx_can driver fixes the error handling
    in case of failing pm_runtime_get_sync().
    
    There are two patches for the peak_usb driver. Dan Carpenter adds range
    checking in decode operations and Stephane Grosjean's patch fixes
    a timestamp wrapping problem.
    
    Stephane Grosjean's patch for th peak_canfd driver fixes echo management if
    loopback is on.
    
    The next three patches all target the mcp251xfd driver. The first one is
    by me and it increased the severity of CRC read error messages. The kernel
    test robot removes an unneeded semicolon and Tom Rix removes unneeded
    break in several switch-cases.
    
    The last 4 patches are by Joakim Zhang and target the flexcan driver,
    the first three fix ECC related device specific quirks for the LS1021A,
    LX2160A and the VF610 SoC. The last patch disable wakeup completely upon
    driver remove.
    
    * tag 'linux-can-fixes-for-5.10-20201103' of git://git.kernel.org/pub/scm/linux/kernel/git/mkl/linux-can: (27 commits)
      can: flexcan: flexcan_remove(): disable wakeup completely
      can: flexcan: add ECC initialization for VF610
      can: flexcan: add ECC initialization for LX2160A
      can: flexcan: remove FLEXCAN_QUIRK_DISABLE_MECR quirk for LS1021A
      can: mcp251xfd: remove unneeded break
      can: mcp251xfd: mcp251xfd_regmap_nocrc_read(): fix semicolon.cocci warnings
      can: mcp251xfd: mcp251xfd_regmap_crc_read(): increase severity of CRC read error messages
      can: peak_canfd: pucan_handle_can_rx(): fix echo management when loopback is on
      can: peak_usb: peak_usb_get_ts_time(): fix timestamp wrapping
      can: peak_usb: add range checking in decode operations
      can: xilinx_can: handle failure cases of pm_runtime_get_sync
      can: ti_hecc: ti_hecc_probe(): add missed clk_disable_unprepare() in error path
      can: isotp: padlen(): make const array static, makes object smaller
      can: isotp: isotp_rcv_cf(): enable RX timeout handling in listen-only mode
      can: isotp: Explain PDU in CAN_ISOTP help text
      can: j1939: j1939_sk_bind(): return failure if netdev is down
      can: j1939: use backquotes for code samples
      can: j1939: swap addr and pgn in the send example
      can: j1939: fix syntax and spelling
      can: j1939: rename jacd tool
      ...
    ====================
    
    Link: https://lore.kernel.org/r/<20201103220636.972106-1-mkl@pengutronix.de>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit c02bb16b0e826bf0e19aa42c3ae60ea339f32cf5
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:10 2020 +0800

    spi: spi-mem: fix reference leak in spi_mem_access_start
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in spi_mem_access_start, so we should fix it.
    
    Fixes: f86c24f479530 ("spi: spi-mem: Split spi_mem_exec_op() code")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140910.3482-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 79c43333bdd5a7026a5aab606b53053b643585e7
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:32:39 2020 -0500

    can: xilinx_can: handle failure cases of pm_runtime_get_sync
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Link: https://lore.kernel.org/r/20200605033239.60664-1-navid.emamdoost@gmail.com
    Fixes: 4716620d1b62 ("can: xilinx: Convert to runtime_pm")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit bb742ad01961a3b9d1f9d19375487b879668b6b2
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Oct 31 11:03:53 2020 +0800

    vfio: platform: fix reference leak in vfio_platform_open
    
    pm_runtime_get_sync() will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put will result in
    reference leak in vfio_platform_open, so we should fix it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

commit ee5558a9084584015c8754ffd029ce14a5827fa8
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:56:51 2020 +0800

    spi: img-spfi: fix reference leak in img_spfi_resume
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in img_spfi_resume, so we should fix it.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102145651.3875-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 30255785272f896d1f275f095eb0b2089426b153
Author: Can Guo <cang@codeaurora.org>
Date:   Sun Aug 9 05:15:48 2020 -0700

    scsi: ufs: ufs-qcom: Fix race conditions caused by ufs_qcom_testbus_config()
    
    [ Upstream commit 89dd87acd40a44de8ff3358138aedf8f73f4efc6 ]
    
    If ufs_qcom_dump_dbg_regs() calls ufs_qcom_testbus_config() from
    ufshcd_suspend/resume and/or clk gate/ungate context, pm_runtime_get_sync()
    and ufshcd_hold() will cause a race condition. Fix this by removing the
    unnecessary calls of pm_runtime_get_sync() and ufshcd_hold().
    
    Link: https://lore.kernel.org/r/1596975355-39813-3-git-send-email-cang@codeaurora.org
    Reviewed-by: Hongwu Su <hongwus@codeaurora.org>
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b799668bea8b98ad24943658d860fea46cbc389
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Jun 28 07:55:23 2020 +0200

    media: venus: core: Fix runtime PM imbalance in venus_probe
    
    [ Upstream commit bbe516e976fce538db96bd2b7287df942faa14a3 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced. For other error
    paths after this call, things are the same.
    
    Fix this by adding pm_runtime_put_noidle() after 'err_runtime_disable'
    label. But in this case, the error path after pm_runtime_put_sync()
    will decrease PM usage counter twice. Thus add an extra
    pm_runtime_get_noresume() in this path to balance PM counter.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60299cf61e1ec5d783e681d84245301deb6fef17
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:00:21 2020 +0200

    media: bdisp: Fix runtime PM imbalance on error
    
    [ Upstream commit dbd2f2dc025f9be8ae063e4f270099677238f620 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Fabien Dessenne <fabien.dessenne@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a517a48cb16f161523a132b0d6c925203b4bc4a
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:05:02 2020 +0200

    media: platform: sti: hva: Fix runtime PM imbalance on error
    
    [ Upstream commit d912a1d9e9afe69c6066c1ceb6bfc09063074075 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8526b2ea2f6bf86c968da84f8e7e5c9cb9a710c6
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 15:29:33 2020 +0200

    media: platform: s3c-camif: Fix runtime PM imbalance on error
    
    [ Upstream commit dafa3605fe60d5a61239d670919b2a36e712481e ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Sylwester Nawrocki <snawrocki@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc71303c1fc7fc03ffd6629adcd6dc9472a9e2e9
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Jun 8 07:29:19 2020 +0200

    media: vsp1: Fix runtime PM imbalance on error
    
    [ Upstream commit 98fae901c8883640202802174a4bd70a1b9118bd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e506a74112279c8fdea1fa6ed1955b82fc00497
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:01:11 2020 +0200

    media: exynos4-is: Fix a reference count leak
    
    [ Upstream commit 64157b2cb1940449e7df2670e85781c690266588 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93705ea75c8551de6bdcf9fe7975292683e6c1ab
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:10:58 2020 +0200

    media: exynos4-is: Fix a reference count leak due to pm_runtime_get_sync
    
    [ Upstream commit c47f7c779ef0458a58583f00c9ed71b7f5a4d0a2 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72818356f146e927b58e334d01e55610da584675
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:18:29 2020 +0200

    media: exynos4-is: Fix several reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 7ef64ceea0008c17e94a8a2c60c5d6d46f481996 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bde69ac535ebacb40a610e2463872cfde24f1aad
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:31:06 2020 +0200

    media: sti: Fix reference count leaks
    
    [ Upstream commit 6f4432bae9f2d12fc1815b5e26cc07e69bcad0df ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 383e8a823014532ffd81c787ef9009f1c2bd3b79
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Oct 16 17:05:36 2020 +0800

    crypto: omap-aes - fix the reference count leak of omap device
    
    pm_runtime_get_sync() will increment  pm usage counter even
    when it returns an error code. We should call put operation
    in error handling paths of omap_aes_hw_init.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 03d75ead8ed9f2e55122a4958115525359733779
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 01:36:19 2020 -0500

    drm/panfrost: perfcnt: fix ref count leak in panfrost_perfcnt_enable_locked
    
    [ Upstream commit 9df0e0c1889677175037445d5ad1654d54176369 ]
    
    in panfrost_perfcnt_enable_locked, pm_runtime_get_sync is called which
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Acked-by: Alyssa Rosenzweig <alyssa.rosenzweig@collabora.com>
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200614063619.44944-1-navid.emamdoost@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18f5fe2158ebfcee63261f382d784b85d66da0e5
Author: Can Guo <cang@codeaurora.org>
Date:   Sun Aug 9 05:15:48 2020 -0700

    scsi: ufs: ufs-qcom: Fix race conditions caused by ufs_qcom_testbus_config()
    
    [ Upstream commit 89dd87acd40a44de8ff3358138aedf8f73f4efc6 ]
    
    If ufs_qcom_dump_dbg_regs() calls ufs_qcom_testbus_config() from
    ufshcd_suspend/resume and/or clk gate/ungate context, pm_runtime_get_sync()
    and ufshcd_hold() will cause a race condition. Fix this by removing the
    unnecessary calls of pm_runtime_get_sync() and ufshcd_hold().
    
    Link: https://lore.kernel.org/r/1596975355-39813-3-git-send-email-cang@codeaurora.org
    Reviewed-by: Hongwu Su <hongwus@codeaurora.org>
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee02c932d21a3beaff688c6e5eb9ab238131f2fc
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Jun 28 07:55:23 2020 +0200

    media: venus: core: Fix runtime PM imbalance in venus_probe
    
    [ Upstream commit bbe516e976fce538db96bd2b7287df942faa14a3 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced. For other error
    paths after this call, things are the same.
    
    Fix this by adding pm_runtime_put_noidle() after 'err_runtime_disable'
    label. But in this case, the error path after pm_runtime_put_sync()
    will decrease PM usage counter twice. Thus add an extra
    pm_runtime_get_noresume() in this path to balance PM counter.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15e43e9e063f9a9032f850386397484dfeae0bda
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:00:21 2020 +0200

    media: bdisp: Fix runtime PM imbalance on error
    
    [ Upstream commit dbd2f2dc025f9be8ae063e4f270099677238f620 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Fabien Dessenne <fabien.dessenne@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 26b31569354f22a9b85c25d32ad96ef38ddacf21
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:05:02 2020 +0200

    media: platform: sti: hva: Fix runtime PM imbalance on error
    
    [ Upstream commit d912a1d9e9afe69c6066c1ceb6bfc09063074075 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cb0554f89b0d9aad3fdcebceb635bd950091750
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 15:29:33 2020 +0200

    media: platform: s3c-camif: Fix runtime PM imbalance on error
    
    [ Upstream commit dafa3605fe60d5a61239d670919b2a36e712481e ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Sylwester Nawrocki <snawrocki@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf6e195005f7cc5ddef68d70711cbce992639b54
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Jun 8 07:29:19 2020 +0200

    media: vsp1: Fix runtime PM imbalance on error
    
    [ Upstream commit 98fae901c8883640202802174a4bd70a1b9118bd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48582b3ce35ff63c45579fed2ad868f782faea4e
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:01:11 2020 +0200

    media: exynos4-is: Fix a reference count leak
    
    [ Upstream commit 64157b2cb1940449e7df2670e85781c690266588 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6146da1eed577e75b68402c31eedee153be984c0
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:10:58 2020 +0200

    media: exynos4-is: Fix a reference count leak due to pm_runtime_get_sync
    
    [ Upstream commit c47f7c779ef0458a58583f00c9ed71b7f5a4d0a2 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49cb98d0212dcd036b2d278882e94da24d2bb011
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:18:29 2020 +0200

    media: exynos4-is: Fix several reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 7ef64ceea0008c17e94a8a2c60c5d6d46f481996 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ee4caeba5e62147ebeac7b95736622478d35a8d
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:31:06 2020 +0200

    media: sti: Fix reference count leaks
    
    [ Upstream commit 6f4432bae9f2d12fc1815b5e26cc07e69bcad0df ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd5c3f9cdbf7614ae04f618b17c595c78131a131
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Wed Jul 1 16:55:28 2020 +0200

    iio: adc: stm32-adc: fix runtime autosuspend delay when slow polling
    
    [ Upstream commit c537d3457542a398caa1fe58e0976c5f83cf7281 ]
    
    When the ADC is runtime suspended and starting a conversion, the stm32-adc
    driver calls pm_runtime_get_sync() that gets cascaded to the parent
    (e.g. runtime resume of stm32-adc-core driver). This also kicks the
    autosuspend delay (e.g. 2s) of the parent.
    Once the ADC is active, calling pm_runtime_get_sync() again (upon a new
    capture) won't kick the autosuspend delay for the parent (stm32-adc-core
    driver) as already active.
    
    Currently, this makes the stm32-adc-core driver go in suspend state
    every 2s when doing slow polling. As an example, doing a capture, e.g.
    cat in_voltageY_raw at a 0.2s rate, the auto suspend delay for the parent
    isn't refreshed. Once it expires, the parent immediately falls into
    runtime suspended state, in between two captures, as soon as the child
    driver falls into runtime suspend state:
    - e.g. after 2s, + child calls pm_runtime_put_autosuspend() + 100ms
      autosuspend delay of the child.
    - stm32-adc-core switches off regulators, clocks and so on.
    - They get switched on back again 100ms later in this example (at 2.2s).
    
    So, use runtime_idle() callback in stm32-adc-core driver to call
    pm_runtime_mark_last_busy() for the parent driver (stm32-adc-core),
    to avoid this.
    
    Fixes: 9bdbb1139ca1 ("iio: adc: stm32-adc: add power management support")
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/1593615328-5180-1-git-send-email-fabrice.gasnier@st.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a988434456f0d6bac04377906d936a9b21837c8
Author: Tingwei Zhang <tingwei@codeaurora.org>
Date:   Wed Sep 16 13:17:27 2020 -0600

    coresight: cti: remove pm_runtime_get_sync() from CPU hotplug
    
    [ Upstream commit 6e8836c6df5327bdb24211424f1ad1411d1ed64a ]
    
    Below BUG is triggered by call pm_runtime_get_sync() in
    cti_cpuhp_enable_hw(). It's in CPU hotplug callback with interrupt
    disabled. Pm_runtime_get_sync() calls clock driver to enable clock
    which could sleep. Remove pm_runtime_get_sync() in cti_cpuhp_enable_hw()
    since pm_runtime_get_sync() is called in cti_enabld and pm_runtime_put()
    is called in cti_disabled. No need to increase pm count when CPU gets
    online since it's not decreased when CPU is offline.
    
    [  105.800279] BUG: scheduling while atomic: swapper/1/0/0x00000002
    [  105.800290] Modules linked in:
    [  105.800327] CPU: 1 PID: 0 Comm: swapper/1 Tainted: G        W
    5.9.0-rc1-gff1304be0a05-dirty #21
    [  105.800337] Hardware name: Thundercomm Dragonboard 845c (DT)
    [  105.800353] Call trace:
    [  105.800414]  dump_backtrace+0x0/0x1d4
    [  105.800439]  show_stack+0x14/0x1c
    [  105.800462]  dump_stack+0xc0/0x100
    [  105.800490]  __schedule_bug+0x58/0x74
    [  105.800523]  __schedule+0x590/0x65c
    [  105.800538]  schedule+0x78/0x10c
    [  105.800553]  schedule_timeout+0x188/0x250
    [  105.800585]  qmp_send.constprop.10+0x12c/0x1b0
    [  105.800599]  qmp_qdss_clk_prepare+0x18/0x20
    [  105.800622]  clk_core_prepare+0x48/0xd4
    [  105.800639]  clk_prepare+0x20/0x34
    [  105.800663]  amba_pm_runtime_resume+0x54/0x90
    [  105.800695]  __rpm_callback+0xdc/0x138
    [  105.800709]  rpm_callback+0x24/0x78
    [  105.800724]  rpm_resume+0x328/0x47c
    [  105.800739]  __pm_runtime_resume+0x50/0x74
    [  105.800768]  cti_starting_cpu+0x40/0xa4
    [  105.800795]  cpuhp_invoke_callback+0x84/0x1e0
    [  105.800814]  notify_cpu_starting+0x9c/0xb8
    [  105.800834]  secondary_start_kernel+0xd8/0x164
    [  105.800933] CPU1: Booted secondary processor 0x0000000100 [0x517f803c]
    
    Fixes: e9b880581d55 ("coresight: cti: Add CPU Hotplug handling to CTI driver")
    Reviewed-by: Mike Leach <mike.leach@linaro.org>
    Signed-off-by: Tingwei Zhang <tingwei@codeaurora.org>
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Link: https://lore.kernel.org/r/20200916191737.4001561-7-mathieu.poirier@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7e1b54d63cd14e23e82663104fed8fd7d91dbd5
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:56:05 2020 +0200

    media: ti-vpe: Fix a missing check and reference count leak
    
    [ Upstream commit 7dae2aaaf432767ca7aa11fa84643a7c2600dbdd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    And also, when the call of function vpe_runtime_get() failed,
    we won't call vpe_runtime_put().
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails
    inside vpe_runtime_get().
    
    Fixes: 4571912743ac ("[media] v4l: ti-vpe: Add VPE mem to mem driver")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41d024973d4194a87c9b9e80f9bfeecf16ddd066
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:36:59 2020 +0200

    media: stm32-dcmi: Fix a reference count leak
    
    [ Upstream commit 88f50a05f907d96a27a9ce3cc9e8cbb91a6f0f22 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not
    called in error handling paths. Thus replace the jump target
    "err_release_buffers" by "err_pm_putw".
    
    Fixes: 152e0bf60219 ("media: stm32-dcmi: add power saving support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9225e43a4542867e9a92f420ef8124de8138a35
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:31:22 2020 +0200

    media: s5p-mfc: Fix a reference count leak
    
    [ Upstream commit 78741ce98c2e36188e2343434406b0e0bc50b0e7 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: c5086f130a77 ("[media] s5p-mfc: Use clock gating only on MFC v5 hardware")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9d50b68bd70fe533a8e1a71a439655ce997919a
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:27:12 2020 +0200

    media: camss: Fix a reference count leak.
    
    [ Upstream commit d0675b67b42eb4f1a840d1513b5b00f78312f833 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    PM runtime put is not called in error handling paths.
    Thus call pm_runtime_put_sync() if pm_runtime_get_sync() fails.
    
    Fixes: 02afa816dbbf ("media: camss: Add basic runtime PM support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50cd8acd7b663f698f99fa4200f84523291746b3
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:19:44 2020 +0200

    media: platform: fcp: Fix a reference count leak.
    
    [ Upstream commit 63e36a381d92a9cded97e90d481ee22566557dd1 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: 6eaafbdb668b ("[media] v4l: rcar-fcp: Keep the coding style consistent")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 893662cfb5e30913961c6de8b21a434891d288df
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:13:49 2020 +0200

    media: rockchip/rga: Fix a reference count leak.
    
    [ Upstream commit 884d638e0853c4b5f01eb6d048fc3b6239012404 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: f7e7b48e6d79 ("[media] rockchip/rga: v4l2 m2m support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e32b7f8452b91d70a538f5080a615d0d46b8a60
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 00:30:08 2020 +0200

    media: rcar-vin: Fix a reference count leak.
    
    [ Upstream commit aaffa0126a111d65f4028c503c76192d4cc93277 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: 90dedce9bc54 ("media: rcar-vin: add function to manipulate Gen3 chsel value")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ece2c1f2b762817748a7c40867492836dd58f5b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 9 12:45:28 2020 +0300

    crypto: sa2ul - Fix pm_runtime_get_sync() error checking
    
    [ Upstream commit 2baace5feb86c6916221911f391f11fcd8e1a259 ]
    
    The pm_runtime_get_sync() function returns either 0 or 1 on success but
    this code treats a return of 1 as a failure.
    
    Fixes: 7694b6ca649f ("crypto: sa2ul - Add crypto driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ceaa8fb287973864be6ab79dd2aaf4f5195cdbc
Author: dinghao.liu@zju.edu.cn <dinghao.liu@zju.edu.cn>
Date:   Fri Aug 21 16:15:13 2020 +0800

    crypto: ccree - fix runtime PM imbalance on error
    
    [ Upstream commit b7b57a5643c2ae45afe6aa5e73363b553cacd14b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter
    even when it returns an error code. However, users of cc_pm_get(),
    a direct wrapper of pm_runtime_get_sync(), assume that PM usage
    counter will not change on error. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Fixes: 8c7849a30255c ("crypto: ccree - simplify Runtime PM handling")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0666c173a061cd9a34596112b2ff8c865bc2dbe8
Author: Can Guo <cang@codeaurora.org>
Date:   Sun Aug 9 05:15:48 2020 -0700

    scsi: ufs: ufs-qcom: Fix race conditions caused by ufs_qcom_testbus_config()
    
    [ Upstream commit 89dd87acd40a44de8ff3358138aedf8f73f4efc6 ]
    
    If ufs_qcom_dump_dbg_regs() calls ufs_qcom_testbus_config() from
    ufshcd_suspend/resume and/or clk gate/ungate context, pm_runtime_get_sync()
    and ufshcd_hold() will cause a race condition. Fix this by removing the
    unnecessary calls of pm_runtime_get_sync() and ufshcd_hold().
    
    Link: https://lore.kernel.org/r/1596975355-39813-3-git-send-email-cang@codeaurora.org
    Reviewed-by: Hongwu Su <hongwus@codeaurora.org>
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5772580c1091e69b64fe3eed553c4d65f097a69
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Jun 28 07:55:23 2020 +0200

    media: venus: core: Fix runtime PM imbalance in venus_probe
    
    [ Upstream commit bbe516e976fce538db96bd2b7287df942faa14a3 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced. For other error
    paths after this call, things are the same.
    
    Fix this by adding pm_runtime_put_noidle() after 'err_runtime_disable'
    label. But in this case, the error path after pm_runtime_put_sync()
    will decrease PM usage counter twice. Thus add an extra
    pm_runtime_get_noresume() in this path to balance PM counter.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4f08676d93c2a8f44415a5845761b475979b892
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:00:21 2020 +0200

    media: bdisp: Fix runtime PM imbalance on error
    
    [ Upstream commit dbd2f2dc025f9be8ae063e4f270099677238f620 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Fabien Dessenne <fabien.dessenne@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bad248c1ec5376cc4d78418b0a60470dfe70a4b9
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:05:02 2020 +0200

    media: platform: sti: hva: Fix runtime PM imbalance on error
    
    [ Upstream commit d912a1d9e9afe69c6066c1ceb6bfc09063074075 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59eb92867e9c10d470878e271b99042889a852a1
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 15:29:33 2020 +0200

    media: platform: s3c-camif: Fix runtime PM imbalance on error
    
    [ Upstream commit dafa3605fe60d5a61239d670919b2a36e712481e ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Sylwester Nawrocki <snawrocki@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9fa2286f1925ebcf21ec269f2a0de5d73bc007b7
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Jun 8 07:29:19 2020 +0200

    media: vsp1: Fix runtime PM imbalance on error
    
    [ Upstream commit 98fae901c8883640202802174a4bd70a1b9118bd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2341407a05eae93412c8fe5ab8a4eb0833f64771
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:01:11 2020 +0200

    media: exynos4-is: Fix a reference count leak
    
    [ Upstream commit 64157b2cb1940449e7df2670e85781c690266588 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcc6fbbab0dc62bb3cdac9b81a089bab4c2ef029
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:10:58 2020 +0200

    media: exynos4-is: Fix a reference count leak due to pm_runtime_get_sync
    
    [ Upstream commit c47f7c779ef0458a58583f00c9ed71b7f5a4d0a2 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7997018b45d69cd61341f6a47bd22b502e5d7e2
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:18:29 2020 +0200

    media: exynos4-is: Fix several reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 7ef64ceea0008c17e94a8a2c60c5d6d46f481996 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30f5c4e91d142b73ef47de4e699b399ffde58b46
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:31:06 2020 +0200

    media: sti: Fix reference count leaks
    
    [ Upstream commit 6f4432bae9f2d12fc1815b5e26cc07e69bcad0df ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd29df4df421e1301ce195108f4e4e792ee9181b
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Wed Jul 1 16:55:28 2020 +0200

    iio: adc: stm32-adc: fix runtime autosuspend delay when slow polling
    
    [ Upstream commit c537d3457542a398caa1fe58e0976c5f83cf7281 ]
    
    When the ADC is runtime suspended and starting a conversion, the stm32-adc
    driver calls pm_runtime_get_sync() that gets cascaded to the parent
    (e.g. runtime resume of stm32-adc-core driver). This also kicks the
    autosuspend delay (e.g. 2s) of the parent.
    Once the ADC is active, calling pm_runtime_get_sync() again (upon a new
    capture) won't kick the autosuspend delay for the parent (stm32-adc-core
    driver) as already active.
    
    Currently, this makes the stm32-adc-core driver go in suspend state
    every 2s when doing slow polling. As an example, doing a capture, e.g.
    cat in_voltageY_raw at a 0.2s rate, the auto suspend delay for the parent
    isn't refreshed. Once it expires, the parent immediately falls into
    runtime suspended state, in between two captures, as soon as the child
    driver falls into runtime suspend state:
    - e.g. after 2s, + child calls pm_runtime_put_autosuspend() + 100ms
      autosuspend delay of the child.
    - stm32-adc-core switches off regulators, clocks and so on.
    - They get switched on back again 100ms later in this example (at 2.2s).
    
    So, use runtime_idle() callback in stm32-adc-core driver to call
    pm_runtime_mark_last_busy() for the parent driver (stm32-adc-core),
    to avoid this.
    
    Fixes: 9bdbb1139ca1 ("iio: adc: stm32-adc: add power management support")
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/1593615328-5180-1-git-send-email-fabrice.gasnier@st.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 435fd705a501a6099155f896263dd230339aef80
Author: Tingwei Zhang <tingwei@codeaurora.org>
Date:   Wed Sep 16 13:17:27 2020 -0600

    coresight: cti: remove pm_runtime_get_sync() from CPU hotplug
    
    [ Upstream commit 6e8836c6df5327bdb24211424f1ad1411d1ed64a ]
    
    Below BUG is triggered by call pm_runtime_get_sync() in
    cti_cpuhp_enable_hw(). It's in CPU hotplug callback with interrupt
    disabled. Pm_runtime_get_sync() calls clock driver to enable clock
    which could sleep. Remove pm_runtime_get_sync() in cti_cpuhp_enable_hw()
    since pm_runtime_get_sync() is called in cti_enabld and pm_runtime_put()
    is called in cti_disabled. No need to increase pm count when CPU gets
    online since it's not decreased when CPU is offline.
    
    [  105.800279] BUG: scheduling while atomic: swapper/1/0/0x00000002
    [  105.800290] Modules linked in:
    [  105.800327] CPU: 1 PID: 0 Comm: swapper/1 Tainted: G        W
    5.9.0-rc1-gff1304be0a05-dirty #21
    [  105.800337] Hardware name: Thundercomm Dragonboard 845c (DT)
    [  105.800353] Call trace:
    [  105.800414]  dump_backtrace+0x0/0x1d4
    [  105.800439]  show_stack+0x14/0x1c
    [  105.800462]  dump_stack+0xc0/0x100
    [  105.800490]  __schedule_bug+0x58/0x74
    [  105.800523]  __schedule+0x590/0x65c
    [  105.800538]  schedule+0x78/0x10c
    [  105.800553]  schedule_timeout+0x188/0x250
    [  105.800585]  qmp_send.constprop.10+0x12c/0x1b0
    [  105.800599]  qmp_qdss_clk_prepare+0x18/0x20
    [  105.800622]  clk_core_prepare+0x48/0xd4
    [  105.800639]  clk_prepare+0x20/0x34
    [  105.800663]  amba_pm_runtime_resume+0x54/0x90
    [  105.800695]  __rpm_callback+0xdc/0x138
    [  105.800709]  rpm_callback+0x24/0x78
    [  105.800724]  rpm_resume+0x328/0x47c
    [  105.800739]  __pm_runtime_resume+0x50/0x74
    [  105.800768]  cti_starting_cpu+0x40/0xa4
    [  105.800795]  cpuhp_invoke_callback+0x84/0x1e0
    [  105.800814]  notify_cpu_starting+0x9c/0xb8
    [  105.800834]  secondary_start_kernel+0xd8/0x164
    [  105.800933] CPU1: Booted secondary processor 0x0000000100 [0x517f803c]
    
    Fixes: e9b880581d55 ("coresight: cti: Add CPU Hotplug handling to CTI driver")
    Reviewed-by: Mike Leach <mike.leach@linaro.org>
    Signed-off-by: Tingwei Zhang <tingwei@codeaurora.org>
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Link: https://lore.kernel.org/r/20200916191737.4001561-7-mathieu.poirier@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 539f606e104450abc69adf9f1528720aeb5eb0fe
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:56:05 2020 +0200

    media: ti-vpe: Fix a missing check and reference count leak
    
    [ Upstream commit 7dae2aaaf432767ca7aa11fa84643a7c2600dbdd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    And also, when the call of function vpe_runtime_get() failed,
    we won't call vpe_runtime_put().
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails
    inside vpe_runtime_get().
    
    Fixes: 4571912743ac ("[media] v4l: ti-vpe: Add VPE mem to mem driver")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36ba112a7c8d9e12f8074624d8ba49648f70cb4f
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:36:59 2020 +0200

    media: stm32-dcmi: Fix a reference count leak
    
    [ Upstream commit 88f50a05f907d96a27a9ce3cc9e8cbb91a6f0f22 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not
    called in error handling paths. Thus replace the jump target
    "err_release_buffers" by "err_pm_putw".
    
    Fixes: 152e0bf60219 ("media: stm32-dcmi: add power saving support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 344632d9b782d90bccc7391a12fc465086c1332b
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:31:22 2020 +0200

    media: s5p-mfc: Fix a reference count leak
    
    [ Upstream commit 78741ce98c2e36188e2343434406b0e0bc50b0e7 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: c5086f130a77 ("[media] s5p-mfc: Use clock gating only on MFC v5 hardware")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 00eff51ebd2733d31ca14eecdeed32fa5ecb27b6
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:27:12 2020 +0200

    media: camss: Fix a reference count leak.
    
    [ Upstream commit d0675b67b42eb4f1a840d1513b5b00f78312f833 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    PM runtime put is not called in error handling paths.
    Thus call pm_runtime_put_sync() if pm_runtime_get_sync() fails.
    
    Fixes: 02afa816dbbf ("media: camss: Add basic runtime PM support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 445adb4113e8fa934b66fbdc05a7d856ec038ff2
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:19:44 2020 +0200

    media: platform: fcp: Fix a reference count leak.
    
    [ Upstream commit 63e36a381d92a9cded97e90d481ee22566557dd1 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: 6eaafbdb668b ("[media] v4l: rcar-fcp: Keep the coding style consistent")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34b2032620a316b3ba64a370943f27ab7ecf7d0d
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:13:49 2020 +0200

    media: rockchip/rga: Fix a reference count leak.
    
    [ Upstream commit 884d638e0853c4b5f01eb6d048fc3b6239012404 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: f7e7b48e6d79 ("[media] rockchip/rga: v4l2 m2m support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96b1dbdb92ad7d8f1c36443b2004d5e90d3df0ba
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 00:30:08 2020 +0200

    media: rcar-vin: Fix a reference count leak.
    
    [ Upstream commit aaffa0126a111d65f4028c503c76192d4cc93277 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: 90dedce9bc54 ("media: rcar-vin: add function to manipulate Gen3 chsel value")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e35f75c9a14aa04c927a1133c413cf8173bdb4a
Author: dinghao.liu@zju.edu.cn <dinghao.liu@zju.edu.cn>
Date:   Fri Aug 21 16:15:13 2020 +0800

    crypto: ccree - fix runtime PM imbalance on error
    
    [ Upstream commit b7b57a5643c2ae45afe6aa5e73363b553cacd14b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter
    even when it returns an error code. However, users of cc_pm_get(),
    a direct wrapper of pm_runtime_get_sync(), assume that PM usage
    counter will not change on error. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Fixes: 8c7849a30255c ("crypto: ccree - simplify Runtime PM handling")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc94a025cfd237e74444e827260dbb4fe6f9a8c0
Author: Can Guo <cang@codeaurora.org>
Date:   Sun Aug 9 05:15:48 2020 -0700

    scsi: ufs: ufs-qcom: Fix race conditions caused by ufs_qcom_testbus_config()
    
    [ Upstream commit 89dd87acd40a44de8ff3358138aedf8f73f4efc6 ]
    
    If ufs_qcom_dump_dbg_regs() calls ufs_qcom_testbus_config() from
    ufshcd_suspend/resume and/or clk gate/ungate context, pm_runtime_get_sync()
    and ufshcd_hold() will cause a race condition. Fix this by removing the
    unnecessary calls of pm_runtime_get_sync() and ufshcd_hold().
    
    Link: https://lore.kernel.org/r/1596975355-39813-3-git-send-email-cang@codeaurora.org
    Reviewed-by: Hongwu Su <hongwus@codeaurora.org>
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05f9cc28a9542641f55f9691619736c41daf0d79
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Jun 28 07:55:23 2020 +0200

    media: venus: core: Fix runtime PM imbalance in venus_probe
    
    [ Upstream commit bbe516e976fce538db96bd2b7287df942faa14a3 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced. For other error
    paths after this call, things are the same.
    
    Fix this by adding pm_runtime_put_noidle() after 'err_runtime_disable'
    label. But in this case, the error path after pm_runtime_put_sync()
    will decrease PM usage counter twice. Thus add an extra
    pm_runtime_get_noresume() in this path to balance PM counter.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad3825eedb162667dcb795348137cf796f16f217
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:00:21 2020 +0200

    media: bdisp: Fix runtime PM imbalance on error
    
    [ Upstream commit dbd2f2dc025f9be8ae063e4f270099677238f620 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Fabien Dessenne <fabien.dessenne@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1285a73c5fad15d92ecabfb0e082c17707ccbb4
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:05:02 2020 +0200

    media: platform: sti: hva: Fix runtime PM imbalance on error
    
    [ Upstream commit d912a1d9e9afe69c6066c1ceb6bfc09063074075 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d727e1d261a21647b09d4ee47065bad44e84fd9
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 15:29:33 2020 +0200

    media: platform: s3c-camif: Fix runtime PM imbalance on error
    
    [ Upstream commit dafa3605fe60d5a61239d670919b2a36e712481e ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Sylwester Nawrocki <snawrocki@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b3f0742f531bef4709b4279a0e57a47f0de8ae9
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Jun 8 07:29:19 2020 +0200

    media: vsp1: Fix runtime PM imbalance on error
    
    [ Upstream commit 98fae901c8883640202802174a4bd70a1b9118bd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7db4c3dfee01f5e403c2b97fdeb60506017fd355
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:01:11 2020 +0200

    media: exynos4-is: Fix a reference count leak
    
    [ Upstream commit 64157b2cb1940449e7df2670e85781c690266588 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f36a80bc75127bd87d288cefbd445a6a6c50904e
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:10:58 2020 +0200

    media: exynos4-is: Fix a reference count leak due to pm_runtime_get_sync
    
    [ Upstream commit c47f7c779ef0458a58583f00c9ed71b7f5a4d0a2 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8babe11e46ba469502c04315ac5d023269c17881
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:18:29 2020 +0200

    media: exynos4-is: Fix several reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 7ef64ceea0008c17e94a8a2c60c5d6d46f481996 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62f3bc07008d7c1994422771ac06d7690949762f
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:31:06 2020 +0200

    media: sti: Fix reference count leaks
    
    [ Upstream commit 6f4432bae9f2d12fc1815b5e26cc07e69bcad0df ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c48d6e80e705c46d58a74738d53994c496dd5ea
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Wed Jul 1 16:55:28 2020 +0200

    iio: adc: stm32-adc: fix runtime autosuspend delay when slow polling
    
    [ Upstream commit c537d3457542a398caa1fe58e0976c5f83cf7281 ]
    
    When the ADC is runtime suspended and starting a conversion, the stm32-adc
    driver calls pm_runtime_get_sync() that gets cascaded to the parent
    (e.g. runtime resume of stm32-adc-core driver). This also kicks the
    autosuspend delay (e.g. 2s) of the parent.
    Once the ADC is active, calling pm_runtime_get_sync() again (upon a new
    capture) won't kick the autosuspend delay for the parent (stm32-adc-core
    driver) as already active.
    
    Currently, this makes the stm32-adc-core driver go in suspend state
    every 2s when doing slow polling. As an example, doing a capture, e.g.
    cat in_voltageY_raw at a 0.2s rate, the auto suspend delay for the parent
    isn't refreshed. Once it expires, the parent immediately falls into
    runtime suspended state, in between two captures, as soon as the child
    driver falls into runtime suspend state:
    - e.g. after 2s, + child calls pm_runtime_put_autosuspend() + 100ms
      autosuspend delay of the child.
    - stm32-adc-core switches off regulators, clocks and so on.
    - They get switched on back again 100ms later in this example (at 2.2s).
    
    So, use runtime_idle() callback in stm32-adc-core driver to call
    pm_runtime_mark_last_busy() for the parent driver (stm32-adc-core),
    to avoid this.
    
    Fixes: 9bdbb1139ca1 ("iio: adc: stm32-adc: add power management support")
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/1593615328-5180-1-git-send-email-fabrice.gasnier@st.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd68531d29815c760006fb40f7562599bef3303d
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:56:05 2020 +0200

    media: ti-vpe: Fix a missing check and reference count leak
    
    [ Upstream commit 7dae2aaaf432767ca7aa11fa84643a7c2600dbdd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    And also, when the call of function vpe_runtime_get() failed,
    we won't call vpe_runtime_put().
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails
    inside vpe_runtime_get().
    
    Fixes: 4571912743ac ("[media] v4l: ti-vpe: Add VPE mem to mem driver")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c4ffc07f92ef6a2aea4b0a860f13871832d8a6b
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:36:59 2020 +0200

    media: stm32-dcmi: Fix a reference count leak
    
    [ Upstream commit 88f50a05f907d96a27a9ce3cc9e8cbb91a6f0f22 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not
    called in error handling paths. Thus replace the jump target
    "err_release_buffers" by "err_pm_putw".
    
    Fixes: 152e0bf60219 ("media: stm32-dcmi: add power saving support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a05590cc08e37b9a09f479169fb179bed248432e
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:31:22 2020 +0200

    media: s5p-mfc: Fix a reference count leak
    
    [ Upstream commit 78741ce98c2e36188e2343434406b0e0bc50b0e7 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: c5086f130a77 ("[media] s5p-mfc: Use clock gating only on MFC v5 hardware")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0747ff17aa6cf8e45ec0912e297bf2c2877269d3
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:27:12 2020 +0200

    media: camss: Fix a reference count leak.
    
    [ Upstream commit d0675b67b42eb4f1a840d1513b5b00f78312f833 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    PM runtime put is not called in error handling paths.
    Thus call pm_runtime_put_sync() if pm_runtime_get_sync() fails.
    
    Fixes: 02afa816dbbf ("media: camss: Add basic runtime PM support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28b21e02dce923eff04f168c745898960961d400
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:19:44 2020 +0200

    media: platform: fcp: Fix a reference count leak.
    
    [ Upstream commit 63e36a381d92a9cded97e90d481ee22566557dd1 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: 6eaafbdb668b ("[media] v4l: rcar-fcp: Keep the coding style consistent")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e954d4dea1e0df3bc727af1dc316ebafc9c36f7
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:13:49 2020 +0200

    media: rockchip/rga: Fix a reference count leak.
    
    [ Upstream commit 884d638e0853c4b5f01eb6d048fc3b6239012404 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: f7e7b48e6d79 ("[media] rockchip/rga: v4l2 m2m support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa60f4ad0707daba0dbfc1d8729a46c47c07562c
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 00:30:08 2020 +0200

    media: rcar-vin: Fix a reference count leak.
    
    [ Upstream commit aaffa0126a111d65f4028c503c76192d4cc93277 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: 90dedce9bc54 ("media: rcar-vin: add function to manipulate Gen3 chsel value")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0284adc407d0c5b88f5feea1a3d1849e670acac6
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:56:05 2020 +0200

    media: ti-vpe: Fix a missing check and reference count leak
    
    [ Upstream commit 7dae2aaaf432767ca7aa11fa84643a7c2600dbdd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    And also, when the call of function vpe_runtime_get() failed,
    we won't call vpe_runtime_put().
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails
    inside vpe_runtime_get().
    
    Fixes: 4571912743ac ("[media] v4l: ti-vpe: Add VPE mem to mem driver")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52efde52dfc47e263c8d7fce5129878efc8737bf
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:36:59 2020 +0200

    media: stm32-dcmi: Fix a reference count leak
    
    [ Upstream commit 88f50a05f907d96a27a9ce3cc9e8cbb91a6f0f22 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not
    called in error handling paths. Thus replace the jump target
    "err_release_buffers" by "err_pm_putw".
    
    Fixes: 152e0bf60219 ("media: stm32-dcmi: add power saving support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 815501d08cde0dd4e62fb15e007e847b1a57140b
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:31:22 2020 +0200

    media: s5p-mfc: Fix a reference count leak
    
    [ Upstream commit 78741ce98c2e36188e2343434406b0e0bc50b0e7 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: c5086f130a77 ("[media] s5p-mfc: Use clock gating only on MFC v5 hardware")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 766fb94198edbd9c0917f948150e8c63f5bc4cd6
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:27:12 2020 +0200

    media: camss: Fix a reference count leak.
    
    [ Upstream commit d0675b67b42eb4f1a840d1513b5b00f78312f833 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    PM runtime put is not called in error handling paths.
    Thus call pm_runtime_put_sync() if pm_runtime_get_sync() fails.
    
    Fixes: 02afa816dbbf ("media: camss: Add basic runtime PM support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 442bb53ffe8dff9f97289477510b611a0117246c
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:19:44 2020 +0200

    media: platform: fcp: Fix a reference count leak.
    
    [ Upstream commit 63e36a381d92a9cded97e90d481ee22566557dd1 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: 6eaafbdb668b ("[media] v4l: rcar-fcp: Keep the coding style consistent")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ead1800340964bbe1a884c70ca09e98101b71fb
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:13:49 2020 +0200

    media: rockchip/rga: Fix a reference count leak.
    
    [ Upstream commit 884d638e0853c4b5f01eb6d048fc3b6239012404 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: f7e7b48e6d79 ("[media] rockchip/rga: v4l2 m2m support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8dc9270d00140d7ac5bf4aabf5abfac6b95d4467
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 00:30:08 2020 +0200

    media: rcar-vin: Fix a reference count leak.
    
    [ Upstream commit aaffa0126a111d65f4028c503c76192d4cc93277 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: 90dedce9bc54 ("media: rcar-vin: add function to manipulate Gen3 chsel value")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73eae769d588d97ce5f2e8b88fcfbf1052ae77e5
Author: Can Guo <cang@codeaurora.org>
Date:   Sun Aug 9 05:15:48 2020 -0700

    scsi: ufs: ufs-qcom: Fix race conditions caused by ufs_qcom_testbus_config()
    
    [ Upstream commit 89dd87acd40a44de8ff3358138aedf8f73f4efc6 ]
    
    If ufs_qcom_dump_dbg_regs() calls ufs_qcom_testbus_config() from
    ufshcd_suspend/resume and/or clk gate/ungate context, pm_runtime_get_sync()
    and ufshcd_hold() will cause a race condition. Fix this by removing the
    unnecessary calls of pm_runtime_get_sync() and ufshcd_hold().
    
    Link: https://lore.kernel.org/r/1596975355-39813-3-git-send-email-cang@codeaurora.org
    Reviewed-by: Hongwu Su <hongwus@codeaurora.org>
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 699cbe4895d54792114e7231e0d4195b3ec8d986
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Jun 28 07:55:23 2020 +0200

    media: venus: core: Fix runtime PM imbalance in venus_probe
    
    [ Upstream commit bbe516e976fce538db96bd2b7287df942faa14a3 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced. For other error
    paths after this call, things are the same.
    
    Fix this by adding pm_runtime_put_noidle() after 'err_runtime_disable'
    label. But in this case, the error path after pm_runtime_put_sync()
    will decrease PM usage counter twice. Thus add an extra
    pm_runtime_get_noresume() in this path to balance PM counter.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aaa35fd4e1249f112de4367f388dffb6631d6aa0
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:00:21 2020 +0200

    media: bdisp: Fix runtime PM imbalance on error
    
    [ Upstream commit dbd2f2dc025f9be8ae063e4f270099677238f620 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Fabien Dessenne <fabien.dessenne@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e984f79e2df3a02ce184b45ee0f3fb2f4f51a793
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:05:02 2020 +0200

    media: platform: sti: hva: Fix runtime PM imbalance on error
    
    [ Upstream commit d912a1d9e9afe69c6066c1ceb6bfc09063074075 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4ef57d1cb5a1b1b937dbdf01646b08039ceb6c0
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 15:29:33 2020 +0200

    media: platform: s3c-camif: Fix runtime PM imbalance on error
    
    [ Upstream commit dafa3605fe60d5a61239d670919b2a36e712481e ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Sylwester Nawrocki <snawrocki@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37b6efc2559a7d3965ab4dbc4bc7bb234239d77f
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Jun 8 07:29:19 2020 +0200

    media: vsp1: Fix runtime PM imbalance on error
    
    [ Upstream commit 98fae901c8883640202802174a4bd70a1b9118bd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7713c060f1c11b435a6f4e57ee39559645454c5c
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:01:11 2020 +0200

    media: exynos4-is: Fix a reference count leak
    
    [ Upstream commit 64157b2cb1940449e7df2670e85781c690266588 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1674941303d341d53342c99992431de5ab6e4312
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:10:58 2020 +0200

    media: exynos4-is: Fix a reference count leak due to pm_runtime_get_sync
    
    [ Upstream commit c47f7c779ef0458a58583f00c9ed71b7f5a4d0a2 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e701ac75c67700de7017da13d15db74431dc376
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:18:29 2020 +0200

    media: exynos4-is: Fix several reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 7ef64ceea0008c17e94a8a2c60c5d6d46f481996 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67aff25b8dbef75dcdaa7bd2d8838bf04f93f235
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:31:06 2020 +0200

    media: sti: Fix reference count leaks
    
    [ Upstream commit 6f4432bae9f2d12fc1815b5e26cc07e69bcad0df ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cb5c9607f1642e0c29d1cff72fef6ed9a8efe9c
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:56:05 2020 +0200

    media: ti-vpe: Fix a missing check and reference count leak
    
    [ Upstream commit 7dae2aaaf432767ca7aa11fa84643a7c2600dbdd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    And also, when the call of function vpe_runtime_get() failed,
    we won't call vpe_runtime_put().
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails
    inside vpe_runtime_get().
    
    Fixes: 4571912743ac ("[media] v4l: ti-vpe: Add VPE mem to mem driver")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4c597c385c474e07c672afa8b4406f10b595539
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:31:22 2020 +0200

    media: s5p-mfc: Fix a reference count leak
    
    [ Upstream commit 78741ce98c2e36188e2343434406b0e0bc50b0e7 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: c5086f130a77 ("[media] s5p-mfc: Use clock gating only on MFC v5 hardware")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47aa0f3cf46c5b0087461317f3870aca162cb137
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:19:44 2020 +0200

    media: platform: fcp: Fix a reference count leak.
    
    [ Upstream commit 63e36a381d92a9cded97e90d481ee22566557dd1 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: 6eaafbdb668b ("[media] v4l: rcar-fcp: Keep the coding style consistent")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b91c0457733bffb1d062974e0b81270887008ac1
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:00:21 2020 +0200

    media: bdisp: Fix runtime PM imbalance on error
    
    [ Upstream commit dbd2f2dc025f9be8ae063e4f270099677238f620 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Fabien Dessenne <fabien.dessenne@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ea75bdf70e032fdb5739d5809debc22d7f3397a
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:05:02 2020 +0200

    media: platform: sti: hva: Fix runtime PM imbalance on error
    
    [ Upstream commit d912a1d9e9afe69c6066c1ceb6bfc09063074075 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b668ba318c29203b8ef8a2ac617bea99ccba6b10
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 15:29:33 2020 +0200

    media: platform: s3c-camif: Fix runtime PM imbalance on error
    
    [ Upstream commit dafa3605fe60d5a61239d670919b2a36e712481e ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Sylwester Nawrocki <snawrocki@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 645985ac573d96d30c233ef65850b0d8d5cef020
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Jun 8 07:29:19 2020 +0200

    media: vsp1: Fix runtime PM imbalance on error
    
    [ Upstream commit 98fae901c8883640202802174a4bd70a1b9118bd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dde90751d407a74b08f2ceb4f876de65bd8f3d3
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:01:11 2020 +0200

    media: exynos4-is: Fix a reference count leak
    
    [ Upstream commit 64157b2cb1940449e7df2670e85781c690266588 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e8429c2946fd179c27a165aca9f2ab6aea2ae1d
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:10:58 2020 +0200

    media: exynos4-is: Fix a reference count leak due to pm_runtime_get_sync
    
    [ Upstream commit c47f7c779ef0458a58583f00c9ed71b7f5a4d0a2 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3450996789e5d8c09a3feecbaf265ba6d25a3ee0
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:18:29 2020 +0200

    media: exynos4-is: Fix several reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 7ef64ceea0008c17e94a8a2c60c5d6d46f481996 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c772cb1c8c15bd5bfb294cf432f902dfd9e7a696
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:56:05 2020 +0200

    media: ti-vpe: Fix a missing check and reference count leak
    
    [ Upstream commit 7dae2aaaf432767ca7aa11fa84643a7c2600dbdd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    And also, when the call of function vpe_runtime_get() failed,
    we won't call vpe_runtime_put().
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails
    inside vpe_runtime_get().
    
    Fixes: 4571912743ac ("[media] v4l: ti-vpe: Add VPE mem to mem driver")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3af18152d6802b9f95fc04cd7eec5dc13b6cfe2f
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:19:44 2020 +0200

    media: platform: fcp: Fix a reference count leak.
    
    [ Upstream commit 63e36a381d92a9cded97e90d481ee22566557dd1 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: 6eaafbdb668b ("[media] v4l: rcar-fcp: Keep the coding style consistent")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e0bf93c45083334bcd64f99dc62df528e4547354
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:00:21 2020 +0200

    media: bdisp: Fix runtime PM imbalance on error
    
    [ Upstream commit dbd2f2dc025f9be8ae063e4f270099677238f620 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Fabien Dessenne <fabien.dessenne@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 144e4b3bc1a2f393ae21ce64b077171ef29d296c
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:01:11 2020 +0200

    media: exynos4-is: Fix a reference count leak
    
    [ Upstream commit 64157b2cb1940449e7df2670e85781c690266588 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3a48529951761916358d8ed924117bfb6fd223c
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:10:58 2020 +0200

    media: exynos4-is: Fix a reference count leak due to pm_runtime_get_sync
    
    [ Upstream commit c47f7c779ef0458a58583f00c9ed71b7f5a4d0a2 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2306e29e8813b3726a244aed91942487a3d1c0b8
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:18:29 2020 +0200

    media: exynos4-is: Fix several reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 7ef64ceea0008c17e94a8a2c60c5d6d46f481996 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d35b8ae3006001f4fc260f87a1dcd81ce5f9c1c
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:56:05 2020 +0200

    media: ti-vpe: Fix a missing check and reference count leak
    
    [ Upstream commit 7dae2aaaf432767ca7aa11fa84643a7c2600dbdd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    And also, when the call of function vpe_runtime_get() failed,
    we won't call vpe_runtime_put().
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails
    inside vpe_runtime_get().
    
    Fixes: 4571912743ac ("[media] v4l: ti-vpe: Add VPE mem to mem driver")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b3b8e59d0144beb3e4c5dc29abfa1f89e6d4423
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Wed Sep 30 01:19:09 2020 +0300

    i2c: tegra: Check errors for both positive and negative values
    
    The driver's code is inconsistent in regards to the error values checking.
    The correct way should be to check both positive and negative values.
    This patch cleans up the error-checks in the code. Note that the
    pm_runtime_get_sync() could return positive value on success, hence only
    relevant parts of the code are changed by this patch.
    
    Reviewed-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Tested-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit e4fc2efbc310cfb665eed558da42ac18084d20bc
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Wed Sep 30 01:18:45 2020 +0300

    i2c: tegra: Add missing pm_runtime_put()
    
    The pm_runtime_get_sync() always bumps refcount regardless of whether it
    succeeds or fails. Hence driver is responsible for restoring of the RPM
    refcounting. This patch adds missing RPM puts which restore refcounting
    in a case of pm_runtime_get_sync() error.
    
    Suggested-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Thierry Reding <treding@nvidia.com>
    Tested-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 5a30a8105ff7745079b1a3ce38b2e397d8c803a3
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 18:40:06 2020 +0800

    mtd: rawnand: omap_elm: Fix runtime PM imbalance on error
    
    [ Upstream commit 37f7212148cf1d796135cdf8d0c7fee13067674b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522104008.28340-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dac34dd4efc6c971dd4fbf8f617cb67ba133572c
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 10:47:09 2020 +0800

    PCI: tegra: Fix runtime PM imbalance on error
    
    [ Upstream commit fcee90cdf6f3a3a371add04d41528d5ba9c3b411 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Link: https://lore.kernel.org/r/20200521024709.2368-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cddba546a0061b8f1011c79efb227e38885c5e3
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 18:40:06 2020 +0800

    mtd: rawnand: omap_elm: Fix runtime PM imbalance on error
    
    [ Upstream commit 37f7212148cf1d796135cdf8d0c7fee13067674b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522104008.28340-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63f600d87b05b69c4ac963898263c5e092f0e76c
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 17:51:39 2020 +0800

    mtd: rawnand: gpmi: Fix runtime PM imbalance on error
    
    [ Upstream commit 550e68ea36a6671a96576c0531685ce6e6c0d19d ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522095139.19653-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec705f9ffbbaeead254cfa0b7fd034cf2ddbea0f
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 20:46:47 2020 +0800

    wlcore: fix runtime pm imbalance in wlcore_regdomain_config
    
    [ Upstream commit 282a04bf1d8029eb98585cb5db3fd70fe8bc91f7 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200520124649.10848-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0f8499fba8d8138b344bad8cd483729b30a61f2
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 20:42:38 2020 +0800

    wlcore: fix runtime pm imbalance in wl1271_tx_work
    
    [ Upstream commit 9604617e998b49f7695fea1479ed82421ef8c9f0 ]
    
    There are two error handling paths in this functon. When
    wlcore_tx_work_locked() returns an error code, we should
    decrease the runtime PM usage counter the same way as the
    error handling path beginning from pm_runtime_get_sync().
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200520124241.9931-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7555bb003417e550404269c22b03c5cc27e12f6f
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 29 09:22:28 2020 +0800

    ASoC: img-i2s-out: Fix runtime PM imbalance on error
    
    [ Upstream commit 65bd91dd6957390c42a0491b9622cf31a2cdb140 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200529012230.5863-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13e1951aa3b8a428d6fdc69b7e01c9804d26f6fc
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 11:13:49 2020 +0800

    PCI: tegra194: Fix runtime PM imbalance on error
    
    [ Upstream commit 1c1dbb2c02623db18a50c61b175f19aead800b4e ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Link: https://lore.kernel.org/r/20200521031355.7022-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Acked-by: Vidya Sagar <vidyas@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb6e9827da759c84a763899f03e88621bdcf5ebc
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 16:08:38 2020 +0800

    gpio: rcar: Fix runtime PM imbalance on error
    
    [ Upstream commit 6f8cd246411575703d9312888b70705c396b53a9 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200522080839.32612-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 482466b67d87ccd4b9a1d9569d5086d68a7fee7d
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:47:48 2020 +0800

    drm/nouveau/dispnv50: fix runtime pm imbalance on error
    
    [ Upstream commit dc455f4c888365595c0a13da445e092422d55b8d ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd39447bad06e9623ce75f3edb3c96f9b00862b1
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:25:49 2020 +0800

    drm/nouveau: fix runtime pm imbalance on error
    
    [ Upstream commit d7372dfb3f7f1602b87e0663e8b8646da23ebca7 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6331bfcccc890b5c46bfe0a21debbf5c7ff2c21
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:14:53 2020 +0800

    drm/nouveau/debugfs: fix runtime pm imbalance on error
    
    [ Upstream commit 00583fbe8031f69bba8b0a9a861efb75fb7131af ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23c233c606c33251afcafc56ca35b307ed4f2e59
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 10:47:09 2020 +0800

    PCI: tegra: Fix runtime PM imbalance on error
    
    [ Upstream commit fcee90cdf6f3a3a371add04d41528d5ba9c3b411 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Link: https://lore.kernel.org/r/20200521024709.2368-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2138dc84dfef7b0add7ccc034cdc4ad86754c715
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 18:40:06 2020 +0800

    mtd: rawnand: omap_elm: Fix runtime PM imbalance on error
    
    [ Upstream commit 37f7212148cf1d796135cdf8d0c7fee13067674b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522104008.28340-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 345d68b47a05e455de5048bd3ed8e9aa5abb430c
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 20:46:47 2020 +0800

    wlcore: fix runtime pm imbalance in wlcore_regdomain_config
    
    [ Upstream commit 282a04bf1d8029eb98585cb5db3fd70fe8bc91f7 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200520124649.10848-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ad6b023d0eef580c3183af75abfb9c2a2c46993
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 20:42:38 2020 +0800

    wlcore: fix runtime pm imbalance in wl1271_tx_work
    
    [ Upstream commit 9604617e998b49f7695fea1479ed82421ef8c9f0 ]
    
    There are two error handling paths in this functon. When
    wlcore_tx_work_locked() returns an error code, we should
    decrease the runtime PM usage counter the same way as the
    error handling path beginning from pm_runtime_get_sync().
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200520124241.9931-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fce356afe09a4f62ebcd7080c924828aac841b75
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 29 09:22:28 2020 +0800

    ASoC: img-i2s-out: Fix runtime PM imbalance on error
    
    [ Upstream commit 65bd91dd6957390c42a0491b9622cf31a2cdb140 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200529012230.5863-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39096c0f5c1ec9a3f9840ee315251493a607a57b
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:47:48 2020 +0800

    drm/nouveau/dispnv50: fix runtime pm imbalance on error
    
    [ Upstream commit dc455f4c888365595c0a13da445e092422d55b8d ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12f61a929604a7e4aee4632ea73e81fab564f703
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:25:49 2020 +0800

    drm/nouveau: fix runtime pm imbalance on error
    
    [ Upstream commit d7372dfb3f7f1602b87e0663e8b8646da23ebca7 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e0f8fe0103cc7db7b15eae3a05088570e641ca2
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:14:53 2020 +0800

    drm/nouveau/debugfs: fix runtime pm imbalance on error
    
    [ Upstream commit 00583fbe8031f69bba8b0a9a861efb75fb7131af ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a42f87c75dfa504f49ae95b504ee57d30821b8a
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 18:40:06 2020 +0800

    mtd: rawnand: omap_elm: Fix runtime PM imbalance on error
    
    [ Upstream commit 37f7212148cf1d796135cdf8d0c7fee13067674b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522104008.28340-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8dfc0906bcafd337830c1c6e0ed04e686d47a6b5
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:14:53 2020 +0800

    drm/nouveau/debugfs: fix runtime pm imbalance on error
    
    [ Upstream commit 00583fbe8031f69bba8b0a9a861efb75fb7131af ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc5d9f7ad8d8efd5d7f0f8d2e818b0d8f9764526
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 18:40:06 2020 +0800

    mtd: rawnand: omap_elm: Fix runtime PM imbalance on error
    
    [ Upstream commit 37f7212148cf1d796135cdf8d0c7fee13067674b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522104008.28340-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c537d3457542a398caa1fe58e0976c5f83cf7281
Author: Fabrice Gasnier <fabrice.gasnier@st.com>
Date:   Wed Jul 1 16:55:28 2020 +0200

    iio: adc: stm32-adc: fix runtime autosuspend delay when slow polling
    
    When the ADC is runtime suspended and starting a conversion, the stm32-adc
    driver calls pm_runtime_get_sync() that gets cascaded to the parent
    (e.g. runtime resume of stm32-adc-core driver). This also kicks the
    autosuspend delay (e.g. 2s) of the parent.
    Once the ADC is active, calling pm_runtime_get_sync() again (upon a new
    capture) won't kick the autosuspend delay for the parent (stm32-adc-core
    driver) as already active.
    
    Currently, this makes the stm32-adc-core driver go in suspend state
    every 2s when doing slow polling. As an example, doing a capture, e.g.
    cat in_voltageY_raw at a 0.2s rate, the auto suspend delay for the parent
    isn't refreshed. Once it expires, the parent immediately falls into
    runtime suspended state, in between two captures, as soon as the child
    driver falls into runtime suspend state:
    - e.g. after 2s, + child calls pm_runtime_put_autosuspend() + 100ms
      autosuspend delay of the child.
    - stm32-adc-core switches off regulators, clocks and so on.
    - They get switched on back again 100ms later in this example (at 2.2s).
    
    So, use runtime_idle() callback in stm32-adc-core driver to call
    pm_runtime_mark_last_busy() for the parent driver (stm32-adc-core),
    to avoid this.
    
    Fixes: 9bdbb1139ca1 ("iio: adc: stm32-adc: add power management support")
    Signed-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/1593615328-5180-1-git-send-email-fabrice.gasnier@st.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

commit 6f4432bae9f2d12fc1815b5e26cc07e69bcad0df
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:31:06 2020 +0200

    media: sti: Fix reference count leaks
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 7ef64ceea0008c17e94a8a2c60c5d6d46f481996
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:18:29 2020 +0200

    media: exynos4-is: Fix several reference count leaks due to pm_runtime_get_sync
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit c47f7c779ef0458a58583f00c9ed71b7f5a4d0a2
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:10:58 2020 +0200

    media: exynos4-is: Fix a reference count leak due to pm_runtime_get_sync
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 64157b2cb1940449e7df2670e85781c690266588
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:01:11 2020 +0200

    media: exynos4-is: Fix a reference count leak
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 7dae2aaaf432767ca7aa11fa84643a7c2600dbdd
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:56:05 2020 +0200

    media: ti-vpe: Fix a missing check and reference count leak
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    And also, when the call of function vpe_runtime_get() failed,
    we won't call vpe_runtime_put().
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails
    inside vpe_runtime_get().
    
    Fixes: 4571912743ac ("[media] v4l: ti-vpe: Add VPE mem to mem driver")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 88f50a05f907d96a27a9ce3cc9e8cbb91a6f0f22
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:36:59 2020 +0200

    media: stm32-dcmi: Fix a reference count leak
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not
    called in error handling paths. Thus replace the jump target
    "err_release_buffers" by "err_pm_putw".
    
    Fixes: 152e0bf60219 ("media: stm32-dcmi: add power saving support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 78741ce98c2e36188e2343434406b0e0bc50b0e7
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:31:22 2020 +0200

    media: s5p-mfc: Fix a reference count leak
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: c5086f130a77 ("[media] s5p-mfc: Use clock gating only on MFC v5 hardware")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit d0675b67b42eb4f1a840d1513b5b00f78312f833
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:27:12 2020 +0200

    media: camss: Fix a reference count leak.
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    PM runtime put is not called in error handling paths.
    Thus call pm_runtime_put_sync() if pm_runtime_get_sync() fails.
    
    Fixes: 02afa816dbbf ("media: camss: Add basic runtime PM support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 63e36a381d92a9cded97e90d481ee22566557dd1
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:19:44 2020 +0200

    media: platform: fcp: Fix a reference count leak.
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: 6eaafbdb668b ("[media] v4l: rcar-fcp: Keep the coding style consistent")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 884d638e0853c4b5f01eb6d048fc3b6239012404
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:13:49 2020 +0200

    media: rockchip/rga: Fix a reference count leak.
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: f7e7b48e6d79 ("[media] rockchip/rga: v4l2 m2m support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 410822037cc909c4bef845a71e9cac92b75591d2
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:04:32 2020 +0200

    media: rcar-vin: Fix a reference count leak.
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: 2a18fbec1dab ("media: rcar-vin: Move pm_runtime_{get,put} out of helpers")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit aaffa0126a111d65f4028c503c76192d4cc93277
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 00:30:08 2020 +0200

    media: rcar-vin: Fix a reference count leak.
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus call pm_runtime_put_noidle()
    if pm_runtime_get_sync() fails.
    
    Fixes: 90dedce9bc54 ("media: rcar-vin: add function to manipulate Gen3 chsel value")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 98fae901c8883640202802174a4bd70a1b9118bd
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Jun 8 07:29:19 2020 +0200

    media: vsp1: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit dafa3605fe60d5a61239d670919b2a36e712481e
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 15:29:33 2020 +0200

    media: platform: s3c-camif: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Sylwester Nawrocki <snawrocki@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit d912a1d9e9afe69c6066c1ceb6bfc09063074075
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:05:02 2020 +0200

    media: platform: sti: hva: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit dbd2f2dc025f9be8ae063e4f270099677238f620
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:00:21 2020 +0200

    media: bdisp: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Fabien Dessenne <fabien.dessenne@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit d12544fb2aa9944b180c35914031a8384ab082c1
Author: Xiang Chen <chenxiang66@hisilicon.com>
Date:   Tue Sep 22 21:11:06 2020 +0800

    PM: runtime: Remove link state checks in rpm_get/put_supplier()
    
    To support runtime PM for hisi SAS driver (the driver is in directory
    drivers/scsi/hisi_sas), we add device link between scsi_device->sdev_gendev
    (consumer device) and hisi_hba->dev(supplier device) with flags
    DL_FLAG_PM_RUNTIME | DL_FLAG_RPM_ACTIVE.
    
    After runtime suspended consumers and supplier, unload the dirver which
    causes a hung.
    
    We found that it called function device_release_driver_internal() to
    release the supplier device (hisi_hba->dev), as the device link was
    busy, it set the device link state to DL_STATE_SUPPLIER_UNBIND, and
    then it called device_release_driver_internal() to release the consumer
    device (scsi_device->sdev_gendev).
    
    Then it would try to call pm_runtime_get_sync() to resume the consumer
    device, but because consumer-supplier relation existed, it would try
    to resume the supplier first, but as the link state was already
    DL_STATE_SUPPLIER_UNBIND, so it skipped resuming the supplier and only
    resumed the consumer which hanged (it sends IOs to resume scsi_device
    while the SAS controller is suspended).
    
    Simple flow is as follows:
    
    device_release_driver_internal -> (supplier device)
        if device_links_busy ->
            device_links_unbind_consumers ->
                ...
                WRITE_ONCE(link->status, DL_STATE_SUPPLIER_UNBIND)
                device_release_driver_internal (consumer device)
        pm_runtime_get_sync -> (consumer device)
            ...
            __rpm_callback ->
                rpm_get_suppliers ->
                    if link->state == DL_STATE_SUPPLIER_UNBIND -> skip the action of resuming the supplier
                    ...
        pm_runtime_clean_up_links
        ...
    
    Correct suspend/resume ordering between a supplier device and its consumer
    devices (resume the supplier device before resuming consumer devices, and
    suspend consumer devices before suspending the supplier device) should be
    guaranteed by runtime PM, but the state checks in rpm_get_supplier() and
    rpm_put_supplier() break this rule, so remove them.
    
    Signed-off-by: Xiang Chen <chenxiang66@hisilicon.com>
    [ rjw: Subject and changelog edits ]
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 2baace5feb86c6916221911f391f11fcd8e1a259
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 9 12:45:28 2020 +0300

    crypto: sa2ul - Fix pm_runtime_get_sync() error checking
    
    The pm_runtime_get_sync() function returns either 0 or 1 on success but
    this code treats a return of 1 as a failure.
    
    Fixes: 7694b6ca649f ("crypto: sa2ul - Add crypto driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 6e8836c6df5327bdb24211424f1ad1411d1ed64a
Author: Tingwei Zhang <tingwei@codeaurora.org>
Date:   Wed Sep 16 13:17:27 2020 -0600

    coresight: cti: remove pm_runtime_get_sync() from CPU hotplug
    
    Below BUG is triggered by call pm_runtime_get_sync() in
    cti_cpuhp_enable_hw(). It's in CPU hotplug callback with interrupt
    disabled. Pm_runtime_get_sync() calls clock driver to enable clock
    which could sleep. Remove pm_runtime_get_sync() in cti_cpuhp_enable_hw()
    since pm_runtime_get_sync() is called in cti_enabld and pm_runtime_put()
    is called in cti_disabled. No need to increase pm count when CPU gets
    online since it's not decreased when CPU is offline.
    
    [  105.800279] BUG: scheduling while atomic: swapper/1/0/0x00000002
    [  105.800290] Modules linked in:
    [  105.800327] CPU: 1 PID: 0 Comm: swapper/1 Tainted: G        W
    5.9.0-rc1-gff1304be0a05-dirty #21
    [  105.800337] Hardware name: Thundercomm Dragonboard 845c (DT)
    [  105.800353] Call trace:
    [  105.800414]  dump_backtrace+0x0/0x1d4
    [  105.800439]  show_stack+0x14/0x1c
    [  105.800462]  dump_stack+0xc0/0x100
    [  105.800490]  __schedule_bug+0x58/0x74
    [  105.800523]  __schedule+0x590/0x65c
    [  105.800538]  schedule+0x78/0x10c
    [  105.800553]  schedule_timeout+0x188/0x250
    [  105.800585]  qmp_send.constprop.10+0x12c/0x1b0
    [  105.800599]  qmp_qdss_clk_prepare+0x18/0x20
    [  105.800622]  clk_core_prepare+0x48/0xd4
    [  105.800639]  clk_prepare+0x20/0x34
    [  105.800663]  amba_pm_runtime_resume+0x54/0x90
    [  105.800695]  __rpm_callback+0xdc/0x138
    [  105.800709]  rpm_callback+0x24/0x78
    [  105.800724]  rpm_resume+0x328/0x47c
    [  105.800739]  __pm_runtime_resume+0x50/0x74
    [  105.800768]  cti_starting_cpu+0x40/0xa4
    [  105.800795]  cpuhp_invoke_callback+0x84/0x1e0
    [  105.800814]  notify_cpu_starting+0x9c/0xb8
    [  105.800834]  secondary_start_kernel+0xd8/0x164
    [  105.800933] CPU1: Booted secondary processor 0x0000000100 [0x517f803c]
    
    Fixes: e9b880581d55 ("coresight: cti: Add CPU Hotplug handling to CTI driver")
    Reviewed-by: Mike Leach <mike.leach@linaro.org>
    Signed-off-by: Tingwei Zhang <tingwei@codeaurora.org>
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Link: https://lore.kernel.org/r/20200916191737.4001561-7-mathieu.poirier@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6937b6d1af73a9b5643f83433062f4594a65130
Merge: 4c3021f0af2c 776100a4ce6d
Author: Mark Brown <broonie@kernel.org>
Date:   Thu Sep 17 17:40:15 2020 +0100

    Merge series "ASoC: SOF: small fixes for 5.10" from Kai Vehmanen <kai.vehmanen@linux.intel.com>:
    
    Series that adds debug support for IMX platforms, more details to
    FW version information, adds missing -EACCESS handling to
    pm_runtime_get_sync() calls and a set of minor cosmetic, trace
    verbosity and coding style issues.
    
    Guennadi Liakhovetski (3):
      ASoC: SOF: (cosmetic) remove redundant "ret" variable uses
      ASoC: SOF: remove several superfluous type-casts
      ASoC: SOF: fix range checks
    
    Iulian Olaru (1):
      ASoC: SOF: imx: Add debug support for imx platforms
    
    Karol Trzcinski (1):
      ASoC: SOF: Add `src_hash` to `sof_ipc_fw_version` structure
    
    Pierre-Louis Bossart (3):
      ASoC: SOF: debug: update test for pm_runtime_get_sync()
      ASoC: SOF: control: update test for pm_runtime_get_sync()
      ASoC: SOF: Intel: hda: reduce verbosity of boot error logs
    
     include/sound/sof/info.h         |  4 +-
     sound/soc/sof/control.c          | 62 +++++++++++++--------------
     sound/soc/sof/debug.c            |  2 +-
     sound/soc/sof/imx/Kconfig        |  8 ++++
     sound/soc/sof/imx/Makefile       |  3 ++
     sound/soc/sof/imx/imx-common.c   | 72 ++++++++++++++++++++++++++++++++
     sound/soc/sof/imx/imx-common.h   | 16 +++++++
     sound/soc/sof/imx/imx8.c         | 23 +++++++++-
     sound/soc/sof/imx/imx8m.c        | 17 +++++++-
     sound/soc/sof/intel/hda-loader.c | 16 +++----
     sound/soc/sof/intel/hda.c        | 12 ++++--
     sound/soc/sof/intel/hda.h        |  2 +
     sound/soc/sof/sof-audio.c        |  6 +--
     sound/soc/sof/sof-priv.h         |  8 ++++
     sound/soc/sof/topology.c         | 44 ++++++++++---------
     15 files changed, 226 insertions(+), 69 deletions(-)
     create mode 100644 sound/soc/sof/imx/imx-common.c
     create mode 100644 sound/soc/sof/imx/imx-common.h
    
    --
    2.27.0

commit 99ceec5ca0cb29e3b1d556d108ddc54654377792
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Thu Sep 17 13:56:29 2020 +0300

    ASoC: SOF: control: update test for pm_runtime_get_sync()
    
    We need to avoid reporting an error for -EACCESS when pm_runtime is
    not enabled.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20200917105633.2579047-5-kai.vehmanen@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 7db6db9d1a4a7864cd2557e983e06f3adf788c6a
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Thu Sep 17 13:56:28 2020 +0300

    ASoC: SOF: debug: update test for pm_runtime_get_sync()
    
    We need to avoid reporting an error for -EACCESS when pm_runtime is
    not enabled.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20200917105633.2579047-4-kai.vehmanen@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit bc1d374adc82a03fb2113734ba9c16f638b887b2
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 9 12:43:04 2020 +0300

    spi: stm32: fix pm_runtime_get_sync() error checking
    
    [ Upstream commit c170a5a3b6944ad8e76547c4a1d9fe81c8f23ac8 ]
    
    The pm_runtime_get_sync() can return either 0 or 1 on success but this
    code treats 1 as a failure.
    
    Fixes: db96bf976a4f ("spi: stm32: fixes suspend/resume management")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Alain Volmat <alain.volmat@st.com>
    Link: https://lore.kernel.org/r/20200909094304.GA420136@mwanda
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45ffad151baed2e946658da840fd043ff2ef14eb
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 9 12:43:04 2020 +0300

    spi: stm32: fix pm_runtime_get_sync() error checking
    
    [ Upstream commit c170a5a3b6944ad8e76547c4a1d9fe81c8f23ac8 ]
    
    The pm_runtime_get_sync() can return either 0 or 1 on success but this
    code treats 1 as a failure.
    
    Fixes: db96bf976a4f ("spi: stm32: fixes suspend/resume management")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Alain Volmat <alain.volmat@st.com>
    Link: https://lore.kernel.org/r/20200909094304.GA420136@mwanda
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8878ab825450c9ac07a0fc22e1f66fdb62b4f72
Merge: 8b6ce2517797 c170a5a3b694
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Sep 11 11:35:55 2020 -0700

    Merge tag 'spi-fix-v5.9-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi
    
    Pull spi fixes from Mark Brown:
     "There's some driver specific fixes here plus one core fix for memory
      leaks that could be triggered by a potential race condition when
      cleaning up after we have split transfers to fit into what the
      controller can support"
    
    * tag 'spi-fix-v5.9-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi:
      spi: stm32: fix pm_runtime_get_sync() error checking
      spi: Fix memory leak on splited transfers
      spi: spi-cadence-quadspi: Fix mapping of buffers for DMA reads
      spi: stm32: Rate-limit the 'Communication suspended' message
      spi: spi-loopback-test: Fix out-of-bounds read
      spi: spi-cadence-quadspi: Populate get_name() interface
      MAINTAINERS: add myself as maintainer for spi-fsl-dspi driver

commit 404f3f27b087eecd052a9577c2815c812b6a684e
Author: Murali Karicheri <m-karicheri2@ti.com>
Date:   Thu Aug 27 10:38:39 2020 -0400

    net: ethernet: ti: cpsw_new: fix error handling in cpsw_ndo_vlan_rx_kill_vid()
    
    [ Upstream commit af8ea111134624855710a0ef5543b871d49b0162 ]
    
    This patch fixes a bunch of issues in cpsw_ndo_vlan_rx_kill_vid()
    
     - pm_runtime_get_sync() returns non zero value. This results in
       non zero value return to caller which will be interpreted as error.
       So overwrite ret with zero.
     - If VID matches with port VLAN VID, then set error code.
     - Currently when VLAN interface is deleted, all of the VLAN mc addresses
       are removed from ALE table, however the return values from ale function
       calls are not checked. These functions can return error code -ENOENT.
       But that shouldn't happen in a normal case. So add error print to
       catch the situations so that these can be investigated and addressed.
       return zero in these cases as these are not real error case, but only
       serve to catch ALE table update related issues and help address the
       same in the driver.
    
    Fixes: ed3525eda4c4 ("net: ethernet: ti: introduce cpsw switchdev based driver part 1 - dual-emac")
    Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c170a5a3b6944ad8e76547c4a1d9fe81c8f23ac8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 9 12:43:04 2020 +0300

    spi: stm32: fix pm_runtime_get_sync() error checking
    
    The pm_runtime_get_sync() can return either 0 or 1 on success but this
    code treats 1 as a failure.
    
    Fixes: db96bf976a4f ("spi: stm32: fixes suspend/resume management")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Alain Volmat <alain.volmat@st.com>
    Link: https://lore.kernel.org/r/20200909094304.GA420136@mwanda
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit e95673aa1263d42ba855aa56fd59948c6077640a
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:22:23 2020 -0500

    drm/nouveau: Fix reference count leak in nouveau_connector_detect
    
    [ Upstream commit 990a1162986e8eff7ca18cc5a0e03b4304392ae2 ]
    
    nouveau_connector_detect() calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62f9a8747340749003da70f0bc942147861233ee
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:29:18 2020 -0500

    drm/nouveau: fix reference count leak in nv50_disp_atomic_commit
    
    [ Upstream commit a2cdf39536b0d21fb06113f5e16692513d7bcb9c ]
    
    nv50_disp_atomic_commit() calls calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84708092d685c1eec7149cbee402b5b6f9459d96
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:33:42 2020 -0500

    drm/nouveau/drm/noveau: fix reference count leak in nouveau_fbcon_open
    
    [ Upstream commit bfad51c7633325b5d4b32444efe04329d53297b2 ]
    
    nouveau_fbcon_open() calls calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19aa529aabea451c25281dd53c689b864a6075c4
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:05:18 2020 -0500

    omapfb: fix multiple reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 78c2ce9bde70be5be7e3615a2ae7024ed8173087 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Cc: kjlu@umn.edu
    Cc: wu000273@umn.edu
    Cc: Allison Randal <allison@lohutok.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Enrico Weigelt <info@metux.net>
    cc: "Andrew F. Davis" <afd@ti.com>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Alexios Zavras <alexios.zavras@intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200614030528.128064-1-pakki001@umn.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04cde704f3295047ac7d2e2859b5bf5075e3c76a
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jun 17 14:43:08 2020 -0400

    drm/amdgpu/pm: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit 66429300e1bd9cdfbe96cfc475e4964db2a36921 ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e302836dc790a64fc4e9136db63c72a9cde252d
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jun 17 14:52:07 2020 -0400

    drm/amdkfd: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit 1c1ada37af6ee6fb9cfc8da6a56cc83208cd8d6f ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Reviewed-by: Rajneesh Bhardwaj <rajneesh.bhardwaj@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e91283fdb45ffefec70112db98f5bb5619125e1
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jun 17 14:50:02 2020 -0400

    drm/amdgpu/fence: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit e520d3e0d2818aafcdf9d8b60916754d8fedc366 ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Acked-by: Rajneesh Bhardwaj <rajneesh.bhardwaj@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4fdcdb7837c14bf03a8fca2b2e7d3c4ff246d8c
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:05:28 2020 -0500

    drm/amdgpu/display: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit f79f94765f8c39db0b7dec1d335ab046aac03f20 ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b86657e328b601a5b98f8c4c21d108d356dbceee
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:09:44 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_display_crtc_set_config
    
    [ Upstream commit e008fa6fb41544b63973a529b704ef342f47cc65 ]
    
    in amdgpu_display_crtc_set_config, the call to pm_runtime_get_sync
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c04caca229c44ce250f90fd7a7da33eb64ac2a70
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:14:50 2020 -0500

    drm/amd/display: fix ref count leak in amdgpu_drm_ioctl
    
    [ Upstream commit 5509ac65f2fe5aa3c0003237ec629ca55024307c ]
    
    in amdgpu_drm_ioctl the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b73bed1e9640fe01e0077e948c6f040ecd2367f
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:12:29 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_driver_open_kms
    
    [ Upstream commit 9ba8923cbbe11564dd1bf9f3602add9a9cfbb5c6 ]
    
    in amdgpu_driver_open_kms the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bedae9feaca99326fa33c74b4ed647bcbca41ca1
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:55:39 2020 -0500

    drm/radeon: fix multiple reference count leak
    
    [ Upstream commit 6f2e8acdb48ed166b65d47837c31b177460491ec ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd80a7201ed7c62a6f4fae8806f2c5f570f5afa6
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:44:19 2020 -0500

    ASoC: tegra: Fix reference count leaks.
    
    [ Upstream commit deca195383a6085be62cb453079e03e04d618d6e ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200613204422.24484-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5581a8e323cb3daef929d5d4ffa380f1f395c77
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 22:33:43 2020 -0500

    ASoC: img-parallel-out: Fix a reference count leak
    
    [ Upstream commit 6b9fbb073636906eee9fe4d4c05a4f445b9e2a23 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200614033344.1814-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c340a3b9da14cb1632ca86365cf904c4b6320e5a
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 22:37:48 2020 -0500

    ASoC: img: Fix a reference count leak in img_i2s_in_set_fmt
    
    [ Upstream commit c4c59b95b7f7d4cef5071b151be2dadb33f3287b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200614033749.2975-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2adf6ec63db23d1c2d9664d3b782b9d22b9cd7f8
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:22:23 2020 -0500

    drm/nouveau: Fix reference count leak in nouveau_connector_detect
    
    [ Upstream commit 990a1162986e8eff7ca18cc5a0e03b4304392ae2 ]
    
    nouveau_connector_detect() calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19e81f6325a95f5266cbc57f3302d65f7c3aa338
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:29:18 2020 -0500

    drm/nouveau: fix reference count leak in nv50_disp_atomic_commit
    
    [ Upstream commit a2cdf39536b0d21fb06113f5e16692513d7bcb9c ]
    
    nv50_disp_atomic_commit() calls calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d23d52e38cc9c2ae38cf3143af22a8ac821123b5
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:33:42 2020 -0500

    drm/nouveau/drm/noveau: fix reference count leak in nouveau_fbcon_open
    
    [ Upstream commit bfad51c7633325b5d4b32444efe04329d53297b2 ]
    
    nouveau_fbcon_open() calls calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 201838142c521b93e6ac380449697bd68f0cf445
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:05:18 2020 -0500

    omapfb: fix multiple reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 78c2ce9bde70be5be7e3615a2ae7024ed8173087 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Cc: kjlu@umn.edu
    Cc: wu000273@umn.edu
    Cc: Allison Randal <allison@lohutok.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Enrico Weigelt <info@metux.net>
    cc: "Andrew F. Davis" <afd@ti.com>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Alexios Zavras <alexios.zavras@intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200614030528.128064-1-pakki001@umn.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 815060a8ec2a13be586186f713128c85253293cf
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:05:28 2020 -0500

    drm/amdgpu/display: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit f79f94765f8c39db0b7dec1d335ab046aac03f20 ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8290f9d4695fd90e59a03522aa6355ccf0aad296
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:09:44 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_display_crtc_set_config
    
    [ Upstream commit e008fa6fb41544b63973a529b704ef342f47cc65 ]
    
    in amdgpu_display_crtc_set_config, the call to pm_runtime_get_sync
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3753eff4c69aeb16e7b949cbdb4152f8888744e5
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:14:50 2020 -0500

    drm/amd/display: fix ref count leak in amdgpu_drm_ioctl
    
    [ Upstream commit 5509ac65f2fe5aa3c0003237ec629ca55024307c ]
    
    in amdgpu_drm_ioctl the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c911da7b6673aef3121c26d842651916dddc234f
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:12:29 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_driver_open_kms
    
    [ Upstream commit 9ba8923cbbe11564dd1bf9f3602add9a9cfbb5c6 ]
    
    in amdgpu_driver_open_kms the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40d0bf2b6e991bea143333c2ad215b4ec804bca6
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:55:39 2020 -0500

    drm/radeon: fix multiple reference count leak
    
    [ Upstream commit 6f2e8acdb48ed166b65d47837c31b177460491ec ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd5908860a17f48fac71d08fe65b5954851bcdea
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:44:19 2020 -0500

    ASoC: tegra: Fix reference count leaks.
    
    [ Upstream commit deca195383a6085be62cb453079e03e04d618d6e ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200613204422.24484-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d60cd2a6e08e914e3ebaa4f677f91c85eb27c74
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 22:33:43 2020 -0500

    ASoC: img-parallel-out: Fix a reference count leak
    
    [ Upstream commit 6b9fbb073636906eee9fe4d4c05a4f445b9e2a23 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200614033344.1814-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8150a0e3d796a5ddeef0731a0f52b74f0393ec2f
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 22:37:48 2020 -0500

    ASoC: img: Fix a reference count leak in img_i2s_in_set_fmt
    
    [ Upstream commit c4c59b95b7f7d4cef5071b151be2dadb33f3287b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200614033749.2975-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66e1e18133c43e0cfff609054aa64ad0652371fa
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:22:23 2020 -0500

    drm/nouveau: Fix reference count leak in nouveau_connector_detect
    
    [ Upstream commit 990a1162986e8eff7ca18cc5a0e03b4304392ae2 ]
    
    nouveau_connector_detect() calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e15bc26ff99cdcb459a59ba5f35ebe2549ed9390
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:29:18 2020 -0500

    drm/nouveau: fix reference count leak in nv50_disp_atomic_commit
    
    [ Upstream commit a2cdf39536b0d21fb06113f5e16692513d7bcb9c ]
    
    nv50_disp_atomic_commit() calls calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83443512a9493281dd9481681194ea45dbdfd5ee
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:33:42 2020 -0500

    drm/nouveau/drm/noveau: fix reference count leak in nouveau_fbcon_open
    
    [ Upstream commit bfad51c7633325b5d4b32444efe04329d53297b2 ]
    
    nouveau_fbcon_open() calls calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c33c23b931d0b0e38aa436a90c2c527414e2fc5
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:05:18 2020 -0500

    omapfb: fix multiple reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 78c2ce9bde70be5be7e3615a2ae7024ed8173087 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Cc: kjlu@umn.edu
    Cc: wu000273@umn.edu
    Cc: Allison Randal <allison@lohutok.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Enrico Weigelt <info@metux.net>
    cc: "Andrew F. Davis" <afd@ti.com>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Alexios Zavras <alexios.zavras@intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200614030528.128064-1-pakki001@umn.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f93736e489642e7fdece41ed29aeb0fe1bef5fd3
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:05:28 2020 -0500

    drm/amdgpu/display: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit f79f94765f8c39db0b7dec1d335ab046aac03f20 ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d94a5e441cf1a7bf9f88580248fb5f8205b26c53
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:09:44 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_display_crtc_set_config
    
    [ Upstream commit e008fa6fb41544b63973a529b704ef342f47cc65 ]
    
    in amdgpu_display_crtc_set_config, the call to pm_runtime_get_sync
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 214b2803ba44538f929dad7d196224c2acd06740
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:14:50 2020 -0500

    drm/amd/display: fix ref count leak in amdgpu_drm_ioctl
    
    [ Upstream commit 5509ac65f2fe5aa3c0003237ec629ca55024307c ]
    
    in amdgpu_drm_ioctl the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9006d622156a5c4a6699d303472fe24786cd10c9
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:12:29 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_driver_open_kms
    
    [ Upstream commit 9ba8923cbbe11564dd1bf9f3602add9a9cfbb5c6 ]
    
    in amdgpu_driver_open_kms the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93d3e58c97741f25c3e6c15e3dd61ab684f72cb2
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:55:39 2020 -0500

    drm/radeon: fix multiple reference count leak
    
    [ Upstream commit 6f2e8acdb48ed166b65d47837c31b177460491ec ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ff0d9154ef86b2f90ecf75149a30cd3d9253241
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:44:19 2020 -0500

    ASoC: tegra: Fix reference count leaks.
    
    [ Upstream commit deca195383a6085be62cb453079e03e04d618d6e ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200613204422.24484-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 951fba03cf3ed5981d53c91e93ab3dd5f3d0ebbd
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 22:33:43 2020 -0500

    ASoC: img-parallel-out: Fix a reference count leak
    
    [ Upstream commit 6b9fbb073636906eee9fe4d4c05a4f445b9e2a23 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200614033344.1814-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6978222ea037ca8dcefaa0b37fea2cc41320a7f4
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 22:37:48 2020 -0500

    ASoC: img: Fix a reference count leak in img_i2s_in_set_fmt
    
    [ Upstream commit c4c59b95b7f7d4cef5071b151be2dadb33f3287b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200614033749.2975-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 774c302c225a8f79fd94941062dcfc53336acc60
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:22:23 2020 -0500

    drm/nouveau: Fix reference count leak in nouveau_connector_detect
    
    [ Upstream commit 990a1162986e8eff7ca18cc5a0e03b4304392ae2 ]
    
    nouveau_connector_detect() calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bcd0b71b6e8278b2791800d0548d4d6cf18ef37e
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:33:42 2020 -0500

    drm/nouveau/drm/noveau: fix reference count leak in nouveau_fbcon_open
    
    [ Upstream commit bfad51c7633325b5d4b32444efe04329d53297b2 ]
    
    nouveau_fbcon_open() calls calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8e0dad8be89f1aa594e26fdba05312cb739418c
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:05:18 2020 -0500

    omapfb: fix multiple reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 78c2ce9bde70be5be7e3615a2ae7024ed8173087 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Cc: kjlu@umn.edu
    Cc: wu000273@umn.edu
    Cc: Allison Randal <allison@lohutok.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Enrico Weigelt <info@metux.net>
    cc: "Andrew F. Davis" <afd@ti.com>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Alexios Zavras <alexios.zavras@intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200614030528.128064-1-pakki001@umn.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7aa94be6daf4c83a4ad57b08b0f6c977247d9a0
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:05:28 2020 -0500

    drm/amdgpu/display: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit f79f94765f8c39db0b7dec1d335ab046aac03f20 ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f8cf9e55e75a705356e8ecb1efc56158a4b0898
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:09:44 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_display_crtc_set_config
    
    [ Upstream commit e008fa6fb41544b63973a529b704ef342f47cc65 ]
    
    in amdgpu_display_crtc_set_config, the call to pm_runtime_get_sync
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c25e3ac06e41752a7ebec32c592a509b672cd97
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:14:50 2020 -0500

    drm/amd/display: fix ref count leak in amdgpu_drm_ioctl
    
    [ Upstream commit 5509ac65f2fe5aa3c0003237ec629ca55024307c ]
    
    in amdgpu_drm_ioctl the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59e0b73b5d90955ab24c0d56e6561d7485b10295
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:12:29 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_driver_open_kms
    
    [ Upstream commit 9ba8923cbbe11564dd1bf9f3602add9a9cfbb5c6 ]
    
    in amdgpu_driver_open_kms the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0f19b6175ddeb13f85b7a82c46c5a07c15a2b37
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:55:39 2020 -0500

    drm/radeon: fix multiple reference count leak
    
    [ Upstream commit 6f2e8acdb48ed166b65d47837c31b177460491ec ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63d5985db8888ba226511e95ebf03b813bcfa8ba
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:44:19 2020 -0500

    ASoC: tegra: Fix reference count leaks.
    
    [ Upstream commit deca195383a6085be62cb453079e03e04d618d6e ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200613204422.24484-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2eac5a4ca1243e53aec275d745d950d376f5f2d7
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:22:23 2020 -0500

    drm/nouveau: Fix reference count leak in nouveau_connector_detect
    
    [ Upstream commit 990a1162986e8eff7ca18cc5a0e03b4304392ae2 ]
    
    nouveau_connector_detect() calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4605dc3581fc71a5f065e1c0bb6e007fb439ac7
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:33:42 2020 -0500

    drm/nouveau/drm/noveau: fix reference count leak in nouveau_fbcon_open
    
    [ Upstream commit bfad51c7633325b5d4b32444efe04329d53297b2 ]
    
    nouveau_fbcon_open() calls calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb3a2d575e1d46f91e841505c9b25646e5a50efc
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:05:18 2020 -0500

    omapfb: fix multiple reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 78c2ce9bde70be5be7e3615a2ae7024ed8173087 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Cc: kjlu@umn.edu
    Cc: wu000273@umn.edu
    Cc: Allison Randal <allison@lohutok.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Enrico Weigelt <info@metux.net>
    cc: "Andrew F. Davis" <afd@ti.com>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Alexios Zavras <alexios.zavras@intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200614030528.128064-1-pakki001@umn.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8e94dfb6066734940b1f76cce6dca4d7783f999
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:05:28 2020 -0500

    drm/amdgpu/display: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit f79f94765f8c39db0b7dec1d335ab046aac03f20 ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66ac45f8dff3a5cad1d3086e87dddc3af23a6c87
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:09:44 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_display_crtc_set_config
    
    [ Upstream commit e008fa6fb41544b63973a529b704ef342f47cc65 ]
    
    in amdgpu_display_crtc_set_config, the call to pm_runtime_get_sync
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51766489f62489bb1453229030aab218ea35af86
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:14:50 2020 -0500

    drm/amd/display: fix ref count leak in amdgpu_drm_ioctl
    
    [ Upstream commit 5509ac65f2fe5aa3c0003237ec629ca55024307c ]
    
    in amdgpu_drm_ioctl the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6c64bb030bd1acd22d06889b3084d35455c6500
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:12:29 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_driver_open_kms
    
    [ Upstream commit 9ba8923cbbe11564dd1bf9f3602add9a9cfbb5c6 ]
    
    in amdgpu_driver_open_kms the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4daf2296e42f67a9eff15a4f346bcaac984f62e2
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:55:39 2020 -0500

    drm/radeon: fix multiple reference count leak
    
    [ Upstream commit 6f2e8acdb48ed166b65d47837c31b177460491ec ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed7edd4264c385a833fe985f11ce21c14faef35e
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:44:19 2020 -0500

    ASoC: tegra: Fix reference count leaks.
    
    [ Upstream commit deca195383a6085be62cb453079e03e04d618d6e ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200613204422.24484-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28bec409535ee09f7f121807cdb9e394eab47562
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:22:23 2020 -0500

    drm/nouveau: Fix reference count leak in nouveau_connector_detect
    
    [ Upstream commit 990a1162986e8eff7ca18cc5a0e03b4304392ae2 ]
    
    nouveau_connector_detect() calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7592eb3b6cf80eaeb1e648a258a3031e95141f64
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:33:42 2020 -0500

    drm/nouveau/drm/noveau: fix reference count leak in nouveau_fbcon_open
    
    [ Upstream commit bfad51c7633325b5d4b32444efe04329d53297b2 ]
    
    nouveau_fbcon_open() calls calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28e269f9e6ac6dd13fc8342994130d2d90c77ee6
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:05:28 2020 -0500

    drm/amdgpu/display: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit f79f94765f8c39db0b7dec1d335ab046aac03f20 ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b1e3b74c4e35eaaa2fc41c9bb805405c9390fa7
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:09:44 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_display_crtc_set_config
    
    [ Upstream commit e008fa6fb41544b63973a529b704ef342f47cc65 ]
    
    in amdgpu_display_crtc_set_config, the call to pm_runtime_get_sync
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d097bfa614a0b13224ddc4536c2a464f0e0b5fe
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:14:50 2020 -0500

    drm/amd/display: fix ref count leak in amdgpu_drm_ioctl
    
    [ Upstream commit 5509ac65f2fe5aa3c0003237ec629ca55024307c ]
    
    in amdgpu_drm_ioctl the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d0364cd0f378fdb5d4a707f0a6c3111bcea7b32
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:12:29 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_driver_open_kms
    
    [ Upstream commit 9ba8923cbbe11564dd1bf9f3602add9a9cfbb5c6 ]
    
    in amdgpu_driver_open_kms the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87fe5b5f59beeec0780990a1ea2ebc857d17e965
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:55:39 2020 -0500

    drm/radeon: fix multiple reference count leak
    
    [ Upstream commit 6f2e8acdb48ed166b65d47837c31b177460491ec ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed36291b5c426b21210972dc8d28f591e22294fc
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:44:19 2020 -0500

    ASoC: tegra: Fix reference count leaks.
    
    [ Upstream commit deca195383a6085be62cb453079e03e04d618d6e ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200613204422.24484-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5827e4b14ee7882acc6d618c12ddf4966bbd780f
Author: Xia Jiang <xia.jiang@mediatek.com>
Date:   Fri Aug 14 09:11:38 2020 +0200

    media: platform: Improve power on and power off flow
    
    Call pm_runtime_get_sync() before starting a frame and then
    pm_runtime_put() after completing it. This can save power for the time
    between processing two frames.
    
    Reviewed-by: Tomasz Figa <tfiga@chromium.org>
    Signed-off-by: Xia Jiang <xia.jiang@mediatek.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit b7b57a5643c2ae45afe6aa5e73363b553cacd14b
Author: dinghao.liu@zju.edu.cn <dinghao.liu@zju.edu.cn>
Date:   Fri Aug 21 16:15:13 2020 +0800

    crypto: ccree - fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter
    even when it returns an error code. However, users of cc_pm_get(),
    a direct wrapper of pm_runtime_get_sync(), assume that PM usage
    counter will not change on error. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Fixes: 8c7849a30255c ("crypto: ccree - simplify Runtime PM handling")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit af8ea111134624855710a0ef5543b871d49b0162
Author: Murali Karicheri <m-karicheri2@ti.com>
Date:   Thu Aug 27 10:38:39 2020 -0400

    net: ethernet: ti: cpsw_new: fix error handling in cpsw_ndo_vlan_rx_kill_vid()
    
    This patch fixes a bunch of issues in cpsw_ndo_vlan_rx_kill_vid()
    
     - pm_runtime_get_sync() returns non zero value. This results in
       non zero value return to caller which will be interpreted as error.
       So overwrite ret with zero.
     - If VID matches with port VLAN VID, then set error code.
     - Currently when VLAN interface is deleted, all of the VLAN mc addresses
       are removed from ALE table, however the return values from ale function
       calls are not checked. These functions can return error code -ENOENT.
       But that shouldn't happen in a normal case. So add error print to
       catch the situations so that these can be investigated and addressed.
       return zero in these cases as these are not real error case, but only
       serve to catch ALE table update related issues and help address the
       same in the driver.
    
    Fixes: ed3525eda4c4 ("net: ethernet: ti: introduce cpsw switchdev based driver part 1 - dual-emac")
    Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 93b494630c60d0ecc53d629284c3fd26f42204f5
Author: Chen Tao <chentao107@huawei.com>
Date:   Wed Jun 17 18:51:29 2020 +0800

    drm/amdgpu/debugfs: fix memory leak when pm_runtime_get_sync failed
    
    [ Upstream commit 3e4aeff36e9212a939290c0ca70d4931c4ad1950 ]
    
    Fix memory leak in amdgpu_debugfs_gpr_read not freeing data when
    pm_runtime_get_sync failed.
    
    Fixes: a9ffe2a983383 ("drm/amdgpu/debugfs: properly handle runtime pm")
    Signed-off-by: Chen Tao <chentao107@huawei.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6ea07556d0bd8dedfb0e154d9f10a74ec45d721
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:41:56 2020 -0500

    drm/nouveau: fix multiple instances of reference count leaks
    
    [ Upstream commit 659fb5f154c3434c90a34586f3b7aa1c39cf6062 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ba1cb622ad55cb2f567a92d59a24f30d2c3ae74
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 21:21:22 2020 -0500

    drm/radeon: Fix reference count leaks caused by pm_runtime_get_sync
    
    [ Upstream commit 9fb10671011143d15b6b40d6d5fa9c52c57e9d63 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0739a93a0a9b9d2af1bdc904fd2a485ec71926a1
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:41:56 2020 -0500

    drm/nouveau: fix multiple instances of reference count leaks
    
    [ Upstream commit 659fb5f154c3434c90a34586f3b7aa1c39cf6062 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee5d7234e5c4141ab47e110626e860af21a7859f
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 21:21:22 2020 -0500

    drm/radeon: Fix reference count leaks caused by pm_runtime_get_sync
    
    [ Upstream commit 9fb10671011143d15b6b40d6d5fa9c52c57e9d63 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42479de3daeae1728b3b2d2baef218f109e37361
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:41:56 2020 -0500

    drm/nouveau: fix multiple instances of reference count leaks
    
    [ Upstream commit 659fb5f154c3434c90a34586f3b7aa1c39cf6062 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dec0847921c5c9b1ad8fe9bd3fa4ef93f95860e2
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 21:21:22 2020 -0500

    drm/radeon: Fix reference count leaks caused by pm_runtime_get_sync
    
    [ Upstream commit 9fb10671011143d15b6b40d6d5fa9c52c57e9d63 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8398e98caec260495d1b422434d96adc83b7a12f
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Wed Jul 22 16:33:04 2020 +0530

    PCI: cadence: Fix cdns_pcie_{host|ep}_setup() error path
    
    [ Upstream commit 19abcd790b51b26d775e1170ba2ac086823cceeb ]
    
    commit bd22885aa188 ("PCI: cadence: Refactor driver to use as a core
    library") while refactoring the Cadence PCIe driver to be used as
    library, removed pm_runtime_get_sync() from cdns_pcie_ep_setup()
    and cdns_pcie_host_setup() but missed to remove the corresponding
    pm_runtime_put_sync() in the error path. Fix it here.
    
    Link: https://lore.kernel.org/r/20200722110317.4744-3-kishon@ti.com
    Fixes: bd22885aa188 ("PCI: cadence: Refactor driver to use as a core library")
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 214d219e48a2688fe96acb16bb26f0ea691aa0ea
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Jul 9 14:43:56 2020 +0800

    PCI: rcar: Fix runtime PM imbalance on error
    
    [ Upstream commit a68e06e729b1b06c50ee52917d6b825b43e7d269 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when the call returns an error code. Thus a corresponding decrement is
    needed on the error handling path to keep the counter balanced.
    
    Link: https://lore.kernel.org/r/20200709064356.8800-1-dinghao.liu@zju.edu.cn
    Fixes: 0df6150e7ceb ("PCI: rcar: Use runtime PM to control controller clock")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49d6de41c9da98f63cb2599955e1389717aaa886
Author: Marek Vasut <marex@denx.de>
Date:   Sat Feb 29 23:16:49 2020 +0100

    drm/stm: repair runtime power management
    
    [ Upstream commit ebd267b2e3c25d5f93a08528b47c036569eb8744 ]
    
    Add missing pm_runtime_get_sync() into ltdc_crtc_atomic_enable() to
    match pm_runtime_put_sync() in ltdc_crtc_atomic_disable(), otherwise
    the LTDC might suspend via runtime PM, disable clock, and then fail
    to resume later on.
    
    The test which triggers it is roughly -- run qt5 application which
    uses eglfs platform and etnaviv, stop the application, sleep for 15
    minutes, run the application again. This leads to a timeout waiting
    for vsync, because the LTDC has suspended, but did not resume.
    
    Fixes: 35ab6cfbf211 ("drm/stm: support runtime power management")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Yannick Fertré <yannick.fertre@st.com>
    Cc: Philippe Cornu <philippe.cornu@st.com>
    Cc: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Cc: Vincent Abriou <vincent.abriou@st.com>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    To: dri-devel@lists.freedesktop.org
    Cc: linux-stm32@st-md-mailman.stormreply.com
    Cc: linux-arm-kernel@lists.infradead.org
    Acked-by: Philippe Cornu <philippe.cornu@st.com>
    Tested-by: Yannick Fertre <yannick.fertre@st.com>
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200229221649.90813-1-marex@denx.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ea4204a722a1f7e5a757e3895e7594327225ad8
Author: Steven Price <steven.price@arm.com>
Date:   Fri May 22 16:36:53 2020 +0100

    drm/panfrost: Fix inbalance of devfreq record_busy/idle()
    
    [ Upstream commit b99773ef258e628bd53cab22d450a755b73b4d55 ]
    
    The calls to panfrost_devfreq_record_busy() and
    panfrost_devfreq_record_idle() must be balanced to ensure that the
    devfreq utilisation is correctly reported. But there are two cases where
    this doesn't work correctly.
    
    In panfrost_job_hw_submit() if pm_runtime_get_sync() fails or the
    WARN_ON() fires then no call to panfrost_devfreq_record_busy() is made,
    but when the job times out the corresponding _record_idle() call is
    still made in panfrost_job_timedout(). Move the call up to ensure that
    it always happens.
    
    Secondly panfrost_job_timedout() only makes a single call to
    panfrost_devfreq_record_idle() even if it is cleaning up multiple jobs.
    Move the call inside the loop to ensure that the number of
    _record_idle() calls matches the number of _record_busy() calls.
    
    Fixes: 9e62b885f715 ("drm/panfrost: Simplify devfreq utilisation tracking")
    Acked-by: Alyssa Rosenzweig <alyssa.rosenzweig@collabora.com>
    Signed-off-by: Steven Price <steven.price@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200522153653.40754-1-steven.price@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 865e2dbadf6856c9219626fbd6154cac44e5fbca
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jun 17 14:30:17 2020 -0400

    drm/amdgpu/debugfs: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit 9eee152aab56d374edb9ad21b3db05f5cdda2fe6 ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 085af96b1506b34b7239d64e918d8a3b68edbb3a
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:41:56 2020 -0500

    drm/nouveau: fix multiple instances of reference count leaks
    
    [ Upstream commit 659fb5f154c3434c90a34586f3b7aa1c39cf6062 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff0ef144057ef8c234eb4d4a9fa016a1ff2ce816
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:48:37 2020 -0500

    drm/nouveau: fix reference count leak in nouveau_debugfs_strap_peek
    
    [ Upstream commit 8f29432417b11039ef960ab18987c7d61b2b5396 ]
    
    nouveau_debugfs_strap_peek() calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51d26960fcb0d0bf32520f8e738e33d80c01dcd5
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 01:12:20 2020 -0500

    drm/etnaviv: fix ref count leak via pm_runtime_get_sync
    
    [ Upstream commit c5d5a32ead1e3a61a07a1e59eb52a53e4a6b2a7f ]
    
    in etnaviv_gpu_submit, etnaviv_gpu_recover_hang, etnaviv_gpu_debugfs,
    and etnaviv_gpu_init the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90bcb927d66d6919631a0a005ba53470dad4e638
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 21:21:22 2020 -0500

    drm/radeon: Fix reference count leaks caused by pm_runtime_get_sync
    
    [ Upstream commit 9fb10671011143d15b6b40d6d5fa9c52c57e9d63 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8eaf30688e6ac4cf872c459dc589591600b7b26
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Wed Jul 22 16:33:04 2020 +0530

    PCI: cadence: Fix cdns_pcie_{host|ep}_setup() error path
    
    [ Upstream commit 19abcd790b51b26d775e1170ba2ac086823cceeb ]
    
    commit bd22885aa188 ("PCI: cadence: Refactor driver to use as a core
    library") while refactoring the Cadence PCIe driver to be used as
    library, removed pm_runtime_get_sync() from cdns_pcie_ep_setup()
    and cdns_pcie_host_setup() but missed to remove the corresponding
    pm_runtime_put_sync() in the error path. Fix it here.
    
    Link: https://lore.kernel.org/r/20200722110317.4744-3-kishon@ti.com
    Fixes: bd22885aa188 ("PCI: cadence: Refactor driver to use as a core library")
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a171a1623cd9294f4ad01ecc5f1043339453538
Author: Marek Vasut <marex@denx.de>
Date:   Sat Feb 29 23:16:49 2020 +0100

    drm/stm: repair runtime power management
    
    [ Upstream commit ebd267b2e3c25d5f93a08528b47c036569eb8744 ]
    
    Add missing pm_runtime_get_sync() into ltdc_crtc_atomic_enable() to
    match pm_runtime_put_sync() in ltdc_crtc_atomic_disable(), otherwise
    the LTDC might suspend via runtime PM, disable clock, and then fail
    to resume later on.
    
    The test which triggers it is roughly -- run qt5 application which
    uses eglfs platform and etnaviv, stop the application, sleep for 15
    minutes, run the application again. This leads to a timeout waiting
    for vsync, because the LTDC has suspended, but did not resume.
    
    Fixes: 35ab6cfbf211 ("drm/stm: support runtime power management")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Yannick Fertré <yannick.fertre@st.com>
    Cc: Philippe Cornu <philippe.cornu@st.com>
    Cc: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Cc: Vincent Abriou <vincent.abriou@st.com>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    To: dri-devel@lists.freedesktop.org
    Cc: linux-stm32@st-md-mailman.stormreply.com
    Cc: linux-arm-kernel@lists.infradead.org
    Acked-by: Philippe Cornu <philippe.cornu@st.com>
    Tested-by: Yannick Fertre <yannick.fertre@st.com>
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200229221649.90813-1-marex@denx.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17dc46e843bb2594069803b9bce130b127bae5ae
Author: Steven Price <steven.price@arm.com>
Date:   Fri May 22 16:36:53 2020 +0100

    drm/panfrost: Fix inbalance of devfreq record_busy/idle()
    
    [ Upstream commit b99773ef258e628bd53cab22d450a755b73b4d55 ]
    
    The calls to panfrost_devfreq_record_busy() and
    panfrost_devfreq_record_idle() must be balanced to ensure that the
    devfreq utilisation is correctly reported. But there are two cases where
    this doesn't work correctly.
    
    In panfrost_job_hw_submit() if pm_runtime_get_sync() fails or the
    WARN_ON() fires then no call to panfrost_devfreq_record_busy() is made,
    but when the job times out the corresponding _record_idle() call is
    still made in panfrost_job_timedout(). Move the call up to ensure that
    it always happens.
    
    Secondly panfrost_job_timedout() only makes a single call to
    panfrost_devfreq_record_idle() even if it is cleaning up multiple jobs.
    Move the call inside the loop to ensure that the number of
    _record_idle() calls matches the number of _record_busy() calls.
    
    Fixes: 9e62b885f715 ("drm/panfrost: Simplify devfreq utilisation tracking")
    Acked-by: Alyssa Rosenzweig <alyssa.rosenzweig@collabora.com>
    Signed-off-by: Steven Price <steven.price@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200522153653.40754-1-steven.price@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8998c915db65cc3d1971cd243ca58eb1a39d9c69
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:41:56 2020 -0500

    drm/nouveau: fix multiple instances of reference count leaks
    
    [ Upstream commit 659fb5f154c3434c90a34586f3b7aa1c39cf6062 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06d5a05fd6e81eee826cf9a47b0f01ce55011629
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:48:37 2020 -0500

    drm/nouveau: fix reference count leak in nouveau_debugfs_strap_peek
    
    [ Upstream commit 8f29432417b11039ef960ab18987c7d61b2b5396 ]
    
    nouveau_debugfs_strap_peek() calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29c1bca537ec44e67718e3972dcfaf7db1ac97e4
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 01:12:20 2020 -0500

    drm/etnaviv: fix ref count leak via pm_runtime_get_sync
    
    [ Upstream commit c5d5a32ead1e3a61a07a1e59eb52a53e4a6b2a7f ]
    
    in etnaviv_gpu_submit, etnaviv_gpu_recover_hang, etnaviv_gpu_debugfs,
    and etnaviv_gpu_init the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f097e7aecaaa4e9b2135eb10c86abdb7871cd2ec
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 21:21:22 2020 -0500

    drm/radeon: Fix reference count leaks caused by pm_runtime_get_sync
    
    [ Upstream commit 9fb10671011143d15b6b40d6d5fa9c52c57e9d63 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59f69f1edb5678d894fc735ccf234b04ae5b071a
Author: Marek Vasut <marex@denx.de>
Date:   Sat Feb 29 23:16:49 2020 +0100

    drm/stm: repair runtime power management
    
    [ Upstream commit ebd267b2e3c25d5f93a08528b47c036569eb8744 ]
    
    Add missing pm_runtime_get_sync() into ltdc_crtc_atomic_enable() to
    match pm_runtime_put_sync() in ltdc_crtc_atomic_disable(), otherwise
    the LTDC might suspend via runtime PM, disable clock, and then fail
    to resume later on.
    
    The test which triggers it is roughly -- run qt5 application which
    uses eglfs platform and etnaviv, stop the application, sleep for 15
    minutes, run the application again. This leads to a timeout waiting
    for vsync, because the LTDC has suspended, but did not resume.
    
    Fixes: 35ab6cfbf211 ("drm/stm: support runtime power management")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Yannick Fertré <yannick.fertre@st.com>
    Cc: Philippe Cornu <philippe.cornu@st.com>
    Cc: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Cc: Vincent Abriou <vincent.abriou@st.com>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    To: dri-devel@lists.freedesktop.org
    Cc: linux-stm32@st-md-mailman.stormreply.com
    Cc: linux-arm-kernel@lists.infradead.org
    Acked-by: Philippe Cornu <philippe.cornu@st.com>
    Tested-by: Yannick Fertre <yannick.fertre@st.com>
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200229221649.90813-1-marex@denx.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b69bcd45426f24e38e2f20ec0f40d0730368c6e
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:41:56 2020 -0500

    drm/nouveau: fix multiple instances of reference count leaks
    
    [ Upstream commit 659fb5f154c3434c90a34586f3b7aa1c39cf6062 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db0a2e4857dd8a0235091e3c753e356f2291bd56
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:48:37 2020 -0500

    drm/nouveau: fix reference count leak in nouveau_debugfs_strap_peek
    
    [ Upstream commit 8f29432417b11039ef960ab18987c7d61b2b5396 ]
    
    nouveau_debugfs_strap_peek() calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20e7c445606967ed9c45f68c16da0adc8359f362
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 01:12:20 2020 -0500

    drm/etnaviv: fix ref count leak via pm_runtime_get_sync
    
    [ Upstream commit c5d5a32ead1e3a61a07a1e59eb52a53e4a6b2a7f ]
    
    in etnaviv_gpu_submit, etnaviv_gpu_recover_hang, etnaviv_gpu_debugfs,
    and etnaviv_gpu_init the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cab45cfa00b875ab5f80b692e04aad5d949ac9e3
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 21:21:22 2020 -0500

    drm/radeon: Fix reference count leaks caused by pm_runtime_get_sync
    
    [ Upstream commit 9fb10671011143d15b6b40d6d5fa9c52c57e9d63 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afd847bb56cbf87c5e5b384d7c89d4661b6c3755
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:41:56 2020 -0500

    drm/nouveau: fix multiple instances of reference count leaks
    
    [ Upstream commit 659fb5f154c3434c90a34586f3b7aa1c39cf6062 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d6955baf30486424af0a9ec46afc294d8c7e3b9
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 01:12:20 2020 -0500

    drm/etnaviv: fix ref count leak via pm_runtime_get_sync
    
    [ Upstream commit c5d5a32ead1e3a61a07a1e59eb52a53e4a6b2a7f ]
    
    in etnaviv_gpu_submit, etnaviv_gpu_recover_hang, etnaviv_gpu_debugfs,
    and etnaviv_gpu_init the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a4776ef5b229f95848b774c46ce555405ff2d46
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 21:21:22 2020 -0500

    drm/radeon: Fix reference count leaks caused by pm_runtime_get_sync
    
    [ Upstream commit 9fb10671011143d15b6b40d6d5fa9c52c57e9d63 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bbe516e976fce538db96bd2b7287df942faa14a3
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Jun 28 07:55:23 2020 +0200

    media: venus: core: Fix runtime PM imbalance in venus_probe
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced. For other error
    paths after this call, things are the same.
    
    Fix this by adding pm_runtime_put_noidle() after 'err_runtime_disable'
    label. But in this case, the error path after pm_runtime_put_sync()
    will decrease PM usage counter twice. Thus add an extra
    pm_runtime_get_noresume() in this path to balance PM counter.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 5586dd8ea250ab0851caeab6f461a9dbf57c806f
Author: Can Guo <cang@codeaurora.org>
Date:   Sun Aug 9 05:15:54 2020 -0700

    scsi: ufs: Fix a race condition between error handler and runtime PM ops
    
    The current IRQ handler blocks SCSI requests before scheduling eh_work,
    when error handler calls pm_runtime_get_sync, if ufshcd_suspend/resume
    sends a SCSI cmd, most likely the SSU cmd, since SCSI requests are blocked,
    pm_runtime_get_sync() will never return because ufshcd_suspend/resume is
    blocked by the SCSI cmd.
    
     - In queuecommand path, hba->ufshcd_state check and ufshcd_send_command
       should stay under the same spin lock. This is to make sure that no more
       commands leak into doorbell after hba->ufshcd_state is changed.
    
     - Don't block SCSI requests before error handler starts to run, let error
       handler block SCSI requests when it is ready to start error recovery.
    
     - Don't let SCSI layer keep requeuing the SCSI cmds sent from HBA runtime
       PM ops, let them pass or fail them. Let them pass if eh_work is
       scheduled due to non-fatal errors. Fail them if eh_work is scheduled due
       to fatal errors, otherwise the cmds may eventually time out since UFS is
       in bad state, which gets error handler blocked for too long. If we fail
       the SCSI cmds sent from HBA runtime PM ops, HBA runtime PM ops fails
       too, but it does not hurt since error handler can recover HBA runtime PM
       error.
    
    Link: https://lore.kernel.org/r/1596975355-39813-9-git-send-email-cang@codeaurora.org
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit c72e79c0ad2bd7efb1cf84f630f59daf9ba8c510
Author: Can Guo <cang@codeaurora.org>
Date:   Sun Aug 9 05:15:52 2020 -0700

    scsi: ufs: Recover HBA runtime PM error in error handler
    
    The current error handler can not recover HBA runtime PM error if
    ufshcd_suspend/resume has failed due to UFS errors, e.g. hibern8 enter/exit
    error or SSU cmd error. When this happens, error handler may fail
    performing a full reset and restore because error handler always assumes
    that power, IRQs and clocks are ready after pm_runtime_get_sync returns,
    but actually they are not if ufshcd_resume fails[1].
    
    If ufschd_suspend/resume fails due to UFS errors, runtime PM framework
    saves the error value to dev.power.runtime_error. After that, HBA dev
    runtime suspend/resume would not be invoked anymore unless runtime_error is
    cleared[2].
    
    In case of ufshcd_suspend/resume fails due to UFS errors, for scenario [1],
    error handler cannot assume anything of pm_runtime_get_sync, meaning error
    handler should explicitly turn ON powers, IRQs and clocks again. To get the
    HBA runtime PM work as regard for scenario [2], error handler can clear the
    runtime_error by calling pm_runtime_set_active() if full reset and restore
    succeeds. And, more important, if pm_runtime_set_active() returns no error,
    which means runtime_error has been cleared, we also need to resume those
    scsi devices under HBA in case any of them has failed to be resumed due to
    HBA runtime resume failure. This is to unblock blk_queue_enter in case
    there are bios waiting inside it.
    
    Link: https://lore.kernel.org/r/1596975355-39813-7-git-send-email-cang@codeaurora.org
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 89dd87acd40a44de8ff3358138aedf8f73f4efc6
Author: Can Guo <cang@codeaurora.org>
Date:   Sun Aug 9 05:15:48 2020 -0700

    scsi: ufs: ufs-qcom: Fix race conditions caused by ufs_qcom_testbus_config()
    
    If ufs_qcom_dump_dbg_regs() calls ufs_qcom_testbus_config() from
    ufshcd_suspend/resume and/or clk gate/ungate context, pm_runtime_get_sync()
    and ufshcd_hold() will cause a race condition. Fix this by removing the
    unnecessary calls of pm_runtime_get_sync() and ufshcd_hold().
    
    Link: https://lore.kernel.org/r/1596975355-39813-3-git-send-email-cang@codeaurora.org
    Reviewed-by: Hongwu Su <hongwus@codeaurora.org>
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 9df0e0c1889677175037445d5ad1654d54176369
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 01:36:19 2020 -0500

    drm/panfrost: perfcnt: fix ref count leak in panfrost_perfcnt_enable_locked
    
    in panfrost_perfcnt_enable_locked, pm_runtime_get_sync is called which
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Acked-by: Alyssa Rosenzweig <alyssa.rosenzweig@collabora.com>
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200614063619.44944-1-navid.emamdoost@gmail.com

commit 8830292dcf402efb9953aae1a14ff3815c038b05
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Jun 24 14:46:26 2020 +0800

    dmaengine: tegra210-adma: Fix runtime PM imbalance on error
    
    [ Upstream commit 5b78fac4b1ba731cf4177fdbc1e3a4661521bcd0 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200624064626.19855-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bea49f0cdb4099c56d5558f706cecef05b88aa51
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Jun 24 14:46:26 2020 +0800

    dmaengine: tegra210-adma: Fix runtime PM imbalance on error
    
    [ Upstream commit 5b78fac4b1ba731cf4177fdbc1e3a4661521bcd0 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200624064626.19855-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bcf30d452ff700b58261e5cdf2bf411311c2d9eb
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:00:52 2020 -0500

    gpio: arizona: put pm_runtime in case of failure
    
    [ Upstream commit 861254d826499944cb4d9b5a15f5a794a6b99a69 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605030052.78235-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a523fb26dafefb64fd904fef834dfb6c8a805e3c
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:52:07 2020 -0500

    gpio: arizona: handle pm_runtime_get_sync failure case
    
    [ Upstream commit e6f390a834b56583e6fc0949822644ce92fbb107 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605025207.65719-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db886ec71fe4ddba33f4b2197320311b9d398781
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Jun 24 14:46:26 2020 +0800

    dmaengine: tegra210-adma: Fix runtime PM imbalance on error
    
    [ Upstream commit 5b78fac4b1ba731cf4177fdbc1e3a4661521bcd0 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200624064626.19855-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de0d953ee78790adcb2d833e72fec4c3e228ffd7
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:00:52 2020 -0500

    gpio: arizona: put pm_runtime in case of failure
    
    [ Upstream commit 861254d826499944cb4d9b5a15f5a794a6b99a69 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605030052.78235-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52083907ebfa4ee052edbdb340fd8e2830bc49f6
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:52:07 2020 -0500

    gpio: arizona: handle pm_runtime_get_sync failure case
    
    [ Upstream commit e6f390a834b56583e6fc0949822644ce92fbb107 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605025207.65719-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f1feb34df8d1d9c2883daf7ea853949c70d39ea
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Jun 24 14:46:26 2020 +0800

    dmaengine: tegra210-adma: Fix runtime PM imbalance on error
    
    [ Upstream commit 5b78fac4b1ba731cf4177fdbc1e3a4661521bcd0 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200624064626.19855-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed041997ca6fe7be16f966b5ff661d0cb7d990de
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:00:52 2020 -0500

    gpio: arizona: put pm_runtime in case of failure
    
    [ Upstream commit 861254d826499944cb4d9b5a15f5a794a6b99a69 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605030052.78235-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd1e0a7b37ffa72d115c024c88b3f61f1ed73b44
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:52:07 2020 -0500

    gpio: arizona: handle pm_runtime_get_sync failure case
    
    [ Upstream commit e6f390a834b56583e6fc0949822644ce92fbb107 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605025207.65719-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7db83a5c004b8a130813985c0ca4fac74a7fa09b
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Jun 24 14:46:26 2020 +0800

    dmaengine: tegra210-adma: Fix runtime PM imbalance on error
    
    [ Upstream commit 5b78fac4b1ba731cf4177fdbc1e3a4661521bcd0 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200624064626.19855-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f86ae2ac86091d0b7cb4faba3782f997940b96c
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:00:52 2020 -0500

    gpio: arizona: put pm_runtime in case of failure
    
    [ Upstream commit 861254d826499944cb4d9b5a15f5a794a6b99a69 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605030052.78235-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9103bb424ad007a973439e96454eb405db528a4
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:52:07 2020 -0500

    gpio: arizona: handle pm_runtime_get_sync failure case
    
    [ Upstream commit e6f390a834b56583e6fc0949822644ce92fbb107 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605025207.65719-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19abcd790b51b26d775e1170ba2ac086823cceeb
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Wed Jul 22 16:33:04 2020 +0530

    PCI: cadence: Fix cdns_pcie_{host|ep}_setup() error path
    
    commit bd22885aa188 ("PCI: cadence: Refactor driver to use as a core
    library") while refactoring the Cadence PCIe driver to be used as
    library, removed pm_runtime_get_sync() from cdns_pcie_ep_setup()
    and cdns_pcie_host_setup() but missed to remove the corresponding
    pm_runtime_put_sync() in the error path. Fix it here.
    
    Link: https://lore.kernel.org/r/20200722110317.4744-3-kishon@ti.com
    Fixes: bd22885aa188 ("PCI: cadence: Refactor driver to use as a core library")
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Rob Herring <robh@kernel.org>

commit 3aecfc72d7ad73330e7a6ebd0005738a8fd417ab
Author: Tzung-Bi Shih <tzungbi@google.com>
Date:   Fri Jul 24 15:07:31 2020 +0800

    ASoC: dapm: don't call pm_runtime_* on card device
    
    runtime_usage of sound card has been observed to grow without bound.
    For example:
    $ cat /sys/devices/platform/sound/power/runtime_usage
    46
    $ sox -n -t s16 -r 48000 -c 2 - synth 1 sine 440 vol 0.1 | \
      aplay -q -D hw:0,0 -f S16_LE -r 48000 -c 2
    $ cat /sys/devices/platform/sound/power/runtime_usage
    52
    
    Commit 4e872a46823c ("ASoC: dapm: Don't force card bias level to be
    updated") stops to force update bias_level on card.  If card doesn't
    provide set_bias_level callback, the snd_soc_dapm_set_bias_level()
    is equivalent to NOP for card device.
    
    As a result, dapm_pre_sequence_async() doesn't change the bias_level of
    card device correctly.  Thus, pm_runtime_get_sync() would be called in
    dapm_pre_sequence_async() without symmetric pm_runtime_put() in
    dapm_post_sequence_async().
    
    Don't call pm_runtime_* on card device.
    
    Signed-off-by: Tzung-Bi Shih <tzungbi@google.com>
    Link: https://lore.kernel.org/r/20200724070731.451377-1-tzungbi@google.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 8f29432417b11039ef960ab18987c7d61b2b5396
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:48:37 2020 -0500

    drm/nouveau: fix reference count leak in nouveau_debugfs_strap_peek
    
    nouveau_debugfs_strap_peek() calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 990a1162986e8eff7ca18cc5a0e03b4304392ae2
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:22:23 2020 -0500

    drm/nouveau: Fix reference count leak in nouveau_connector_detect
    
    nouveau_connector_detect() calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit a2cdf39536b0d21fb06113f5e16692513d7bcb9c
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:29:18 2020 -0500

    drm/nouveau: fix reference count leak in nv50_disp_atomic_commit
    
    nv50_disp_atomic_commit() calls calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 659fb5f154c3434c90a34586f3b7aa1c39cf6062
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:41:56 2020 -0500

    drm/nouveau: fix multiple instances of reference count leaks
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit bfad51c7633325b5d4b32444efe04329d53297b2
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:33:42 2020 -0500

    drm/nouveau/drm/noveau: fix reference count leak in nouveau_fbcon_open
    
    nouveau_fbcon_open() calls calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit a68e06e729b1b06c50ee52917d6b825b43e7d269
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Jul 9 14:43:56 2020 +0800

    PCI: rcar: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when the call returns an error code. Thus a corresponding decrement is
    needed on the error handling path to keep the counter balanced.
    
    Link: https://lore.kernel.org/r/20200709064356.8800-1-dinghao.liu@zju.edu.cn
    Fixes: 0df6150e7ceb ("PCI: rcar: Use runtime PM to control controller clock")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>

commit c9a69ba9196a56453582a7b3681a99be6fd229c8
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:44:44 2020 -0500

    iio: pressure: zpa2326: handle pm_runtime_get_sync failure
    
    commit d88de040e1df38414fc1e4380be9d0e997ab4d58 upstream.
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Fixes: 03b262f2bbf4 ("iio:pressure: initial zpa2326 barometer support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 328d258d58b4407a0a4c93eb92e306eef13cf037
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 00:49:28 2020 -0500

    drm/exynos: fix ref count leak in mic_pre_enable
    
    [ Upstream commit d4f5a095daf0d25f0b385e1ef26338608433a4c5 ]
    
    in mic_pre_enable, pm_runtime_get_sync is called which
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74953efffb3ddb749e95a67ef1fab76067765284
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:44:44 2020 -0500

    iio: pressure: zpa2326: handle pm_runtime_get_sync failure
    
    commit d88de040e1df38414fc1e4380be9d0e997ab4d58 upstream.
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Fixes: 03b262f2bbf4 ("iio:pressure: initial zpa2326 barometer support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2bfb9eb439c5c5f48b1c07652d8508d8c351576
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 00:49:28 2020 -0500

    drm/exynos: fix ref count leak in mic_pre_enable
    
    [ Upstream commit d4f5a095daf0d25f0b385e1ef26338608433a4c5 ]
    
    in mic_pre_enable, pm_runtime_get_sync is called which
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24c26e80b7c37ea2049c6c4d6032e05b2ac43fbb
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:44:44 2020 -0500

    iio: pressure: zpa2326: handle pm_runtime_get_sync failure
    
    commit d88de040e1df38414fc1e4380be9d0e997ab4d58 upstream.
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Fixes: 03b262f2bbf4 ("iio:pressure: initial zpa2326 barometer support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2cde935ada2fce7a7c5b01831fe26625f4715b4
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 00:49:28 2020 -0500

    drm/exynos: fix ref count leak in mic_pre_enable
    
    [ Upstream commit d4f5a095daf0d25f0b385e1ef26338608433a4c5 ]
    
    in mic_pre_enable, pm_runtime_get_sync is called which
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fd2f25df59c862a3a116003a63e0ac2cb45c5d6
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:44:44 2020 -0500

    iio: pressure: zpa2326: handle pm_runtime_get_sync failure
    
    commit d88de040e1df38414fc1e4380be9d0e997ab4d58 upstream.
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Fixes: 03b262f2bbf4 ("iio:pressure: initial zpa2326 barometer support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9832ab86eb0ad97fed4c70d09cb03a2dfad8f244
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 00:49:28 2020 -0500

    drm/exynos: fix ref count leak in mic_pre_enable
    
    [ Upstream commit d4f5a095daf0d25f0b385e1ef26338608433a4c5 ]
    
    in mic_pre_enable, pm_runtime_get_sync is called which
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f77692815bd6ad49d6bd6462b8e83df1fb91856
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:44:44 2020 -0500

    iio: pressure: zpa2326: handle pm_runtime_get_sync failure
    
    commit d88de040e1df38414fc1e4380be9d0e997ab4d58 upstream.
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Fixes: 03b262f2bbf4 ("iio:pressure: initial zpa2326 barometer support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5d5a32ead1e3a61a07a1e59eb52a53e4a6b2a7f
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 01:12:20 2020 -0500

    drm/etnaviv: fix ref count leak via pm_runtime_get_sync
    
    in etnaviv_gpu_submit, etnaviv_gpu_recover_hang, etnaviv_gpu_debugfs,
    and etnaviv_gpu_init the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>

commit 6a058f0be518bbb10aadd3c5d18516f91b1a4a04
Merge: 7531ee3147ed ef75e14a6c93
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jul 16 11:17:41 2020 -0700

    Merge tag 'staging-5.8-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging into master
    
    Pull IIO and staging driver fixes from Greg KH:
     "Here are some IIO and staging driver fixes for 5.8-rc6.
    
      The majority of fixes are for IIO drivers, resolving a number of small
      reported issues, and there are some counter fixes in here too that
      were tied to the IIO fixes. There's only one staging driver fix here,
      a comedi fix found by code inspection.
    
      All of these have been in linux-next for a while with no reported
      issues"
    
    * tag 'staging-5.8-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging:
      staging: comedi: verify array index is correct before using it
      iio: adc: ad7780: Fix a resource handling path in 'ad7780_probe()'
      iio:pressure:ms5611 Fix buffer element alignment
      iio:humidity:hts221 Fix alignment and data leak issues
      iio:humidity:hdc100x Fix alignment and data leak issues
      iio:magnetometer:ak8974: Fix alignment and data leak issues
      iio: adc: adi-axi-adc: Fix object reference counting
      iio: pressure: zpa2326: handle pm_runtime_get_sync failure
      counter: 104-quad-8: Add lock guards - filter clock prescaler
      counter: 104-quad-8: Add lock guards - differential encoder
      iio: core: add missing IIO_MOD_H2/ETHANOL string identifiers
      iio: magnetometer: ak8974: Fix runtime PM imbalance on error
      iio: mma8452: Add missed iio_device_unregister() call in mma8452_probe()
      iio:health:afe4404 Fix timestamp alignment and prevent data leak.
      iio:health:afe4403 Fix timestamp alignment and prevent data leak.

commit cc1815b74b28f044075f724e09516c4169981958
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:15:25 2020 -0500

    usb: dwc3: pci: Fix reference count leak in dwc3_pci_resume_work
    
    [ Upstream commit 2655971ad4b34e97dd921df16bb0b08db9449df7 ]
    
    dwc3_pci_resume_work() calls pm_runtime_get_sync() that increments
    the reference counter. In case of failure, decrement the reference
    before returning.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1b252d8d9c599054bea1c501faf14da9dd873fe
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:15:25 2020 -0500

    usb: dwc3: pci: Fix reference count leak in dwc3_pci_resume_work
    
    [ Upstream commit 2655971ad4b34e97dd921df16bb0b08db9449df7 ]
    
    dwc3_pci_resume_work() calls pm_runtime_get_sync() that increments
    the reference counter. In case of failure, decrement the reference
    before returning.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bd5ad9fcd6d2833de6db0edd113b9f746805a89
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:15:25 2020 -0500

    usb: dwc3: pci: Fix reference count leak in dwc3_pci_resume_work
    
    [ Upstream commit 2655971ad4b34e97dd921df16bb0b08db9449df7 ]
    
    dwc3_pci_resume_work() calls pm_runtime_get_sync() that increments
    the reference counter. In case of failure, decrement the reference
    before returning.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f8834327ae7d8bfc34793cfce72663af35133d0
Merge: d02b0478c1ac 93e0272a4395
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 10 09:19:39 2020 -0700

    Merge tag 'gpio-v5.8-2' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio
    
    Pull GPIO fixes from Linus Walleij:
     "Some GPIO fixes, most of them for the PCA953x that Andy worked hard to
      fix up.
    
       - Fix two runtime PM errorpath problems in the Arizona GPIO driver.
    
       - Fix three interrupt issues in the PCA953x driver.
    
       - Fix the automatic address increment handling in the PCA953x driver
         again.
    
       - Add a quirk to the PCA953x that fixes a problem in the Intel
         Galileo Gen 2"
    
    * tag 'gpio-v5.8-2' of git://git.kernel.org/pub/scm/linux/kernel/git/linusw/linux-gpio:
      gpio: pca953x: Fix GPIO resource leak on Intel Galileo Gen 2
      gpio: pca953x: disable regmap locking for automatic address incrementing
      gpio: pca953x: Fix direction setting when configure an IRQ
      gpio: pca953x: Override IRQ for one of the expanders on Galileo Gen 2
      gpio: pca953x: Synchronize interrupt handler properly
      gpio: arizona: put pm_runtime in case of failure
      gpio: arizona: handle pm_runtime_get_sync failure case

commit 78c2ce9bde70be5be7e3615a2ae7024ed8173087
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:05:18 2020 -0500

    omapfb: fix multiple reference count leaks due to pm_runtime_get_sync
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Cc: kjlu@umn.edu
    Cc: wu000273@umn.edu
    Cc: Allison Randal <allison@lohutok.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Enrico Weigelt <info@metux.net>
    cc: "Andrew F. Davis" <afd@ti.com>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Alexios Zavras <alexios.zavras@intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200614030528.128064-1-pakki001@umn.edu

commit ebd267b2e3c25d5f93a08528b47c036569eb8744
Author: Marek Vasut <marex@denx.de>
Date:   Sat Feb 29 23:16:49 2020 +0100

    drm/stm: repair runtime power management
    
    Add missing pm_runtime_get_sync() into ltdc_crtc_atomic_enable() to
    match pm_runtime_put_sync() in ltdc_crtc_atomic_disable(), otherwise
    the LTDC might suspend via runtime PM, disable clock, and then fail
    to resume later on.
    
    The test which triggers it is roughly -- run qt5 application which
    uses eglfs platform and etnaviv, stop the application, sleep for 15
    minutes, run the application again. This leads to a timeout waiting
    for vsync, because the LTDC has suspended, but did not resume.
    
    Fixes: 35ab6cfbf211 ("drm/stm: support runtime power management")
    Signed-off-by: Marek Vasut <marex@denx.de>
    Cc: Yannick Fertré <yannick.fertre@st.com>
    Cc: Philippe Cornu <philippe.cornu@st.com>
    Cc: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Cc: Vincent Abriou <vincent.abriou@st.com>
    Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    To: dri-devel@lists.freedesktop.org
    Cc: linux-stm32@st-md-mailman.stormreply.com
    Cc: linux-arm-kernel@lists.infradead.org
    Acked-by: Philippe Cornu <philippe.cornu@st.com>
    Tested-by: Yannick Fertre <yannick.fertre@st.com>
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200229221649.90813-1-marex@denx.de

commit 617894cd848f592fa84d7cf561dc80929afc66ff
Merge: 9ebcfadb0610 b0536f9826a5
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 8 09:20:50 2020 +0200

    Merge tag 'iio-fixes-for-5.8a' of git://git.kernel.org/pub/scm/linux/kernel/git/jic23/iio into staging-linus
    
    Jonathan writes:
    
    First set of IIO and counter fixes in the 5.8 cycle.
    
    The buffer alignment fixes continue to trickle through as we get
    reviews in.  The rest are the standard mixed bag of long term issues
    just discovered an things we missed in this cycle.
    
    IIO fixes
    
    * core
      - Add missing IIO_MOD_H2 and ETHANOL strings. Somehow got missed
        when drivers were added using these in attribute names.
    * afe4403, afe4404, ak8974, hdc100x, hts221, ms5611
      - Fix a recently identified issue with alignment when using
        iio_push_to_buffers_with_timestamp which assumes the timestamp
        is 8 byte aligned.
    * ad7780
      - Fix a some premature / excess cleanup in an error path.
    * adi-axi-adc
      - Fix reference counting on the wrong object.
    * ak8974
      - Fix unbalance runtime pm.
    * mma8452
      - Fix missing iio_device_unregister in error path.
    * zp2326
      - Error handling for pm_runtime_get_sync failing.
    
    counter fixes
    * Add lock guards in 104-quad-8 to protect against races - done
      in 2 patches to allow easy back porting.
    
    * tag 'iio-fixes-for-5.8a' of git://git.kernel.org/pub/scm/linux/kernel/git/jic23/iio:
      iio: adc: ad7780: Fix a resource handling path in 'ad7780_probe()'
      iio:pressure:ms5611 Fix buffer element alignment
      iio:humidity:hts221 Fix alignment and data leak issues
      iio:humidity:hdc100x Fix alignment and data leak issues
      iio:magnetometer:ak8974: Fix alignment and data leak issues
      iio: adc: adi-axi-adc: Fix object reference counting
      iio: pressure: zpa2326: handle pm_runtime_get_sync failure
      counter: 104-quad-8: Add lock guards - filter clock prescaler
      counter: 104-quad-8: Add lock guards - differential encoder
      iio: core: add missing IIO_MOD_H2/ETHANOL string identifiers
      iio: magnetometer: ak8974: Fix runtime PM imbalance on error
      iio: mma8452: Add missed iio_device_unregister() call in mma8452_probe()
      iio:health:afe4404 Fix timestamp alignment and prevent data leak.
      iio:health:afe4403 Fix timestamp alignment and prevent data leak.

commit cb52a40202420d3886b84ea13dba699c9da13eb0
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Tue Jul 7 13:50:00 2020 +0800

    PCI: qcom: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, thus a matching decrement is needed on
    the error handling path to keep the counter balanced.
    
    Link: https://lore.kernel.org/r/20200707055000.9453-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>

commit 7a790087c1ad110d1f4019021342d9ec55aead14
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 17:02:53 2020 +0800

    PCI: cadence: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Link: https://lore.kernel.org/r/20200520090253.2761-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>

commit c2615d620a852adf43d425dea81eb854c8673cfd
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 16:47:56 2020 +0800

    PCI: dwc: pci-dra7xx: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Link: https://lore.kernel.org/r/20200520084756.31620-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>

commit 831b8755fd2f60cf00cbf854c2a2eccb03f2060b
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun May 24 06:31:32 2020 +0200

    media: venus: venc: Fix runtime PM imbalance in venc_open
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 5c3a8a661e1bd9d7063485ac2d2ccb512c447129
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Jun 22 10:40:08 2020 +0800

    crypto: sun8i-ce - Fix runtime PM imbalance in sun8i_ce_cipher_init
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a corresponding decrement is
    needed on the error handling path to keep the counter balanced.
    
    Fix this by adding the missed function call.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 66429300e1bd9cdfbe96cfc475e4964db2a36921
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jun 17 14:43:08 2020 -0400

    drm/amdgpu/pm: fix ref count leak when pm_runtime_get_sync fails
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Reviewed-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 9eee152aab56d374edb9ad21b3db05f5cdda2fe6
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jun 17 14:30:17 2020 -0400

    drm/amdgpu/debugfs: fix ref count leak when pm_runtime_get_sync fails
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1c1ada37af6ee6fb9cfc8da6a56cc83208cd8d6f
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jun 17 14:52:07 2020 -0400

    drm/amdkfd: fix ref count leak when pm_runtime_get_sync fails
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Reviewed-by: Rajneesh Bhardwaj <rajneesh.bhardwaj@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e520d3e0d2818aafcdf9d8b60916754d8fedc366
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jun 17 14:50:02 2020 -0400

    drm/amdgpu/fence: fix ref count leak when pm_runtime_get_sync fails
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Acked-by: Rajneesh Bhardwaj <rajneesh.bhardwaj@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 3e4aeff36e9212a939290c0ca70d4931c4ad1950
Author: Chen Tao <chentao107@huawei.com>
Date:   Wed Jun 17 18:51:29 2020 +0800

    drm/amdgpu/debugfs: fix memory leak when pm_runtime_get_sync failed
    
    Fix memory leak in amdgpu_debugfs_gpr_read not freeing data when
    pm_runtime_get_sync failed.
    
    Fixes: a9ffe2a983383 ("drm/amdgpu/debugfs: properly handle runtime pm")
    Signed-off-by: Chen Tao <chentao107@huawei.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 9fb10671011143d15b6b40d6d5fa9c52c57e9d63
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 21:21:22 2020 -0500

    drm/radeon: Fix reference count leaks caused by pm_runtime_get_sync
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit f79f94765f8c39db0b7dec1d335ab046aac03f20
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:05:28 2020 -0500

    drm/amdgpu/display: fix ref count leak when pm_runtime_get_sync fails
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e008fa6fb41544b63973a529b704ef342f47cc65
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:09:44 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_display_crtc_set_config
    
    in amdgpu_display_crtc_set_config, the call to pm_runtime_get_sync
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5509ac65f2fe5aa3c0003237ec629ca55024307c
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:14:50 2020 -0500

    drm/amd/display: fix ref count leak in amdgpu_drm_ioctl
    
    in amdgpu_drm_ioctl the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 9ba8923cbbe11564dd1bf9f3602add9a9cfbb5c6
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:12:29 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_driver_open_kms
    
    in amdgpu_driver_open_kms the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6f2e8acdb48ed166b65d47837c31b177460491ec
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:55:39 2020 -0500

    drm/radeon: fix multiple reference count leak
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1f63c02277c76cc24d6acecdc3fb7b1575cbfbf7
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 28 15:21:04 2020 +0800

    hwrng: ks-sa - Fix runtime PM imbalance on error
    
    [ Upstream commit 95459261c99f1621d90bc628c2a48e60b7cf9a88 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0947f6f6254c434fc57d1a3f0358bb80967ceb01
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:06:43 2020 -0500

    sata_rcar: handle pm_runtime_get_sync failure cases
    
    [ Upstream commit eea1238867205b9e48a67c1a63219529a73c46fd ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df5888912859c26b9d7cb825eb26920f5e0f9c67
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:51:58 2020 -0500

    ASoC: rockchip: Fix a reference count leak.
    
    [ Upstream commit f141a422159a199f4c8dedb7e0df55b3b2cf16cd ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Fixes: fc05a5b22253 ("ASoC: rockchip: add support for pdm controller")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://lore.kernel.org/r/20200613205158.27296-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ef8e112ddac71c11f9519067fb920a7595190f3
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:51:58 2020 -0500

    ASoC: rockchip: Fix a reference count leak.
    
    [ Upstream commit f141a422159a199f4c8dedb7e0df55b3b2cf16cd ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Fixes: fc05a5b22253 ("ASoC: rockchip: add support for pdm controller")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://lore.kernel.org/r/20200613205158.27296-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07b8b2d463710afa9b9d275177d8801b8de60606
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 28 15:21:04 2020 +0800

    hwrng: ks-sa - Fix runtime PM imbalance on error
    
    [ Upstream commit 95459261c99f1621d90bc628c2a48e60b7cf9a88 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4dfc238a2441668703081d5ca60d98d531efa5e4
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:06:43 2020 -0500

    sata_rcar: handle pm_runtime_get_sync failure cases
    
    [ Upstream commit eea1238867205b9e48a67c1a63219529a73c46fd ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e89c2d5da87017f15f9be3c411023f917cd4e58
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:51:58 2020 -0500

    ASoC: rockchip: Fix a reference count leak.
    
    [ Upstream commit f141a422159a199f4c8dedb7e0df55b3b2cf16cd ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Fixes: fc05a5b22253 ("ASoC: rockchip: add support for pdm controller")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://lore.kernel.org/r/20200613205158.27296-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 280f1cfd3eb3d9ab0ebea4c36268a44de987a9d1
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 28 15:21:04 2020 +0800

    hwrng: ks-sa - Fix runtime PM imbalance on error
    
    [ Upstream commit 95459261c99f1621d90bc628c2a48e60b7cf9a88 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4d6fec45e490a5597318f68d45674d1a9f11811
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:06:43 2020 -0500

    sata_rcar: handle pm_runtime_get_sync failure cases
    
    [ Upstream commit eea1238867205b9e48a67c1a63219529a73c46fd ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 799b135d649f652fbb927c3c56423c7b9ab505eb
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:51:58 2020 -0500

    ASoC: rockchip: Fix a reference count leak.
    
    [ Upstream commit f141a422159a199f4c8dedb7e0df55b3b2cf16cd ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Fixes: fc05a5b22253 ("ASoC: rockchip: add support for pdm controller")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://lore.kernel.org/r/20200613205158.27296-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4f5a095daf0d25f0b385e1ef26338608433a4c5
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 00:49:28 2020 -0500

    drm/exynos: fix ref count leak in mic_pre_enable
    
    in mic_pre_enable, pm_runtime_get_sync is called which
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>

commit 04ed30388c9f9aec4608c5bc5938d023597a5772
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Mon May 25 00:50:11 2020 -0500

    ASoC: fix incomplete error-handling in img_i2s_in_probe.
    
    [ Upstream commit 25bf943e4e7b47282bd86ae7d39e039217ebb007 ]
    
    Function "pm_runtime_get_sync()" is not handled by "pm_runtime_put()"
    if "PTR_ERR(rst) == -EPROBE_DEFER". Fix this issue by adding
    "pm_runtime_put()" into this error path.
    
    Fixes: f65bb92ca12e ("ASoC: img-i2s-in: Add runtime PM")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200525055011.31925-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97c36deb218cc1d166a92a766130a05b11194b0b
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 1 02:11:16 2020 -0500

    pwm: img: Call pm_runtime_put() in pm_runtime_get_sync() failed case
    
    [ Upstream commit ca162ce98110b98e7d97b7157328d34dcfdd40a9 ]
    
    Even in failed case of pm_runtime_get_sync(), the usage_count is
    incremented. In order to keep the usage_count with correct value call
    appropriate pm_runtime_put().
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87b3dca712b4385c98d1641d45d1ada21821071b
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Mon May 25 00:50:11 2020 -0500

    ASoC: fix incomplete error-handling in img_i2s_in_probe.
    
    [ Upstream commit 25bf943e4e7b47282bd86ae7d39e039217ebb007 ]
    
    Function "pm_runtime_get_sync()" is not handled by "pm_runtime_put()"
    if "PTR_ERR(rst) == -EPROBE_DEFER". Fix this issue by adding
    "pm_runtime_put()" into this error path.
    
    Fixes: f65bb92ca12e ("ASoC: img-i2s-in: Add runtime PM")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200525055011.31925-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f16ba366a66b532fa33aa218c5c7db271f0e530
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 1 02:11:16 2020 -0500

    pwm: img: Call pm_runtime_put() in pm_runtime_get_sync() failed case
    
    [ Upstream commit ca162ce98110b98e7d97b7157328d34dcfdd40a9 ]
    
    Even in failed case of pm_runtime_get_sync(), the usage_count is
    incremented. In order to keep the usage_count with correct value call
    appropriate pm_runtime_put().
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1377dc0715c4b2b03f8085927fda5db37c3b5b5
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Mon May 25 00:50:11 2020 -0500

    ASoC: fix incomplete error-handling in img_i2s_in_probe.
    
    [ Upstream commit 25bf943e4e7b47282bd86ae7d39e039217ebb007 ]
    
    Function "pm_runtime_get_sync()" is not handled by "pm_runtime_put()"
    if "PTR_ERR(rst) == -EPROBE_DEFER". Fix this issue by adding
    "pm_runtime_put()" into this error path.
    
    Fixes: f65bb92ca12e ("ASoC: img-i2s-in: Add runtime PM")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200525055011.31925-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a8287278abc629be354db88450909c41e370feb
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 1 02:11:16 2020 -0500

    pwm: img: Call pm_runtime_put() in pm_runtime_get_sync() failed case
    
    [ Upstream commit ca162ce98110b98e7d97b7157328d34dcfdd40a9 ]
    
    Even in failed case of pm_runtime_get_sync(), the usage_count is
    incremented. In order to keep the usage_count with correct value call
    appropriate pm_runtime_put().
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd2c9acd3b0b915f5afbd4f0a2ac83f9b56689ec
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 15:39:19 2020 +0800

    usb: cdns3: Fix runtime PM imbalance on error
    
    [ Upstream commit e5b913496099527abe46e175e5e2c844367bded0 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b78fac4b1ba731cf4177fdbc1e3a4661521bcd0
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Jun 24 14:46:26 2020 +0800

    dmaengine: tegra210-adma: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200624064626.19855-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 2655971ad4b34e97dd921df16bb0b08db9449df7
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:15:25 2020 -0500

    usb: dwc3: pci: Fix reference count leak in dwc3_pci_resume_work
    
    dwc3_pci_resume_work() calls pm_runtime_get_sync() that increments
    the reference counter. In case of failure, decrement the reference
    before returning.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>

commit 4f9b5709cc087337bf02f004f0a238ec7ebda25b
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun May 24 04:59:02 2020 +0200

    media: exynos4-is: Fix runtime PM imbalance in fimc_is_probe
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced. For all error
    paths after pm_runtime_get_sync(), things are the same.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 00b0228061fa2dc0536fbf3355fedf2d447df3bd
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun May 24 05:34:04 2020 +0200

    media: exynos4-is: Fix runtime PM imbalance in isp_video_open
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 779096916daede26699e75e51b0c3a000410d8ad
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 13:56:07 2020 +0200

    media: camss: vfe: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 606578801afe6ec8bb03f5d494a4bae49a684ef3
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 14:06:21 2020 +0200

    media: camss: ispif: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit cf7b1c794d2f2362610143375b4156111e35aed5
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat May 23 09:36:39 2020 +0200

    media: camss: csid: Fix runtime PM imbalance in csid_set_power
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 90361693ad8d13a4311fc671903dcedd6ec06940
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:17:35 2020 +0200

    media: coda: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit e40a8770fd147e7c0d5bd8c327d88090480242f2
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:22:04 2020 +0200

    media: fimc-capture: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 7dcfb327f8fd7418124fc6d63bdce91b5844f50a
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 08:27:45 2020 +0200

    media: staging: tegra-vde: fix runtime pm imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 3834e636b3910f59b4f499e3cf4139937cc078dc
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu May 21 19:08:09 2020 +0200

    PM: runtime: clk: Fix clk_pm_runtime_get() error path
    
    commit 64c7d7ea22d86cacb65d0c097cc447bc0e6d8abd upstream.
    
    clk_pm_runtime_get() assumes that the PM-runtime usage counter will
    be dropped by pm_runtime_get_sync() on errors, which is not the case,
    so PM-runtime references to devices acquired by the former are leaked
    on errors returned by the latter.
    
    Fix this by modifying clk_pm_runtime_get() to drop the reference if
    pm_runtime_get_sync() returns an error.
    
    Fixes: 9a34b45397e5 clk: Add support for runtime PM
    Cc: 4.15+ <stable@vger.kernel.org> # 4.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 592be758f196ed4610e326fc3f33dadd80aa7c6b
Merge: 62c91ead977a b5292111de9b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 19 13:09:40 2020 -0700

    Merge tag 'libata-5.8-2020-06-19' of git://git.kernel.dk/linux-block
    
    Pull libata fixes from Jens Axboe:
     "A few minor changes that should go into this release"
    
    * tag 'libata-5.8-2020-06-19' of git://git.kernel.dk/linux-block:
      libata: Use per port sync for detach
      ata/libata: Fix usage of page address by page_address in ata_scsi_mode_select_xlat function
      sata_rcar: handle pm_runtime_get_sync failure cases

commit 1a37a039711610dd53ec03d8cab9e81875338225
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon May 25 19:05:40 2020 +0800

    power: supply: bq24190_charger: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

commit b99773ef258e628bd53cab22d450a755b73b4d55
Author: Steven Price <steven.price@arm.com>
Date:   Fri May 22 16:36:53 2020 +0100

    drm/panfrost: Fix inbalance of devfreq record_busy/idle()
    
    The calls to panfrost_devfreq_record_busy() and
    panfrost_devfreq_record_idle() must be balanced to ensure that the
    devfreq utilisation is correctly reported. But there are two cases where
    this doesn't work correctly.
    
    In panfrost_job_hw_submit() if pm_runtime_get_sync() fails or the
    WARN_ON() fires then no call to panfrost_devfreq_record_busy() is made,
    but when the job times out the corresponding _record_idle() call is
    still made in panfrost_job_timedout(). Move the call up to ensure that
    it always happens.
    
    Secondly panfrost_job_timedout() only makes a single call to
    panfrost_devfreq_record_idle() even if it is cleaning up multiple jobs.
    Move the call inside the loop to ensure that the number of
    _record_idle() calls matches the number of _record_busy() calls.
    
    Fixes: 9e62b885f715 ("drm/panfrost: Simplify devfreq utilisation tracking")
    Acked-by: Alyssa Rosenzweig <alyssa.rosenzweig@collabora.com>
    Signed-off-by: Steven Price <steven.price@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200522153653.40754-1-steven.price@arm.com

commit f141a422159a199f4c8dedb7e0df55b3b2cf16cd
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:51:58 2020 -0500

    ASoC: rockchip: Fix a reference count leak.
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Fixes: fc05a5b22253 ("ASoC: rockchip: add support for pdm controller")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://lore.kernel.org/r/20200613205158.27296-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 593c0da9a7754caabc7316ab2b64d25c642e5a59
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu May 21 19:08:09 2020 +0200

    PM: runtime: clk: Fix clk_pm_runtime_get() error path
    
    commit 64c7d7ea22d86cacb65d0c097cc447bc0e6d8abd upstream.
    
    clk_pm_runtime_get() assumes that the PM-runtime usage counter will
    be dropped by pm_runtime_get_sync() on errors, which is not the case,
    so PM-runtime references to devices acquired by the former are leaked
    on errors returned by the latter.
    
    Fix this by modifying clk_pm_runtime_get() to drop the reference if
    pm_runtime_get_sync() returns an error.
    
    Fixes: 9a34b45397e5 clk: Add support for runtime PM
    Cc: 4.15+ <stable@vger.kernel.org> # 4.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be817760e513bcd7e781d63dff5a87fbf2e21db5
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu May 21 19:08:09 2020 +0200

    PM: runtime: clk: Fix clk_pm_runtime_get() error path
    
    commit 64c7d7ea22d86cacb65d0c097cc447bc0e6d8abd upstream.
    
    clk_pm_runtime_get() assumes that the PM-runtime usage counter will
    be dropped by pm_runtime_get_sync() on errors, which is not the case,
    so PM-runtime references to devices acquired by the former are leaked
    on errors returned by the latter.
    
    Fix this by modifying clk_pm_runtime_get() to drop the reference if
    pm_runtime_get_sync() returns an error.
    
    Fixes: 9a34b45397e5 clk: Add support for runtime PM
    Cc: 4.15+ <stable@vger.kernel.org> # 4.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ed11984edb198159261af63706365fdda67463c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu May 21 19:08:09 2020 +0200

    PM: runtime: clk: Fix clk_pm_runtime_get() error path
    
    commit 64c7d7ea22d86cacb65d0c097cc447bc0e6d8abd upstream.
    
    clk_pm_runtime_get() assumes that the PM-runtime usage counter will
    be dropped by pm_runtime_get_sync() on errors, which is not the case,
    so PM-runtime references to devices acquired by the former are leaked
    on errors returned by the latter.
    
    Fix this by modifying clk_pm_runtime_get() to drop the reference if
    pm_runtime_get_sync() returns an error.
    
    Fixes: 9a34b45397e5 clk: Add support for runtime PM
    Cc: 4.15+ <stable@vger.kernel.org> # 4.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit deca195383a6085be62cb453079e03e04d618d6e
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:44:19 2020 -0500

    ASoC: tegra: Fix reference count leaks.
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200613204422.24484-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 861254d826499944cb4d9b5a15f5a794a6b99a69
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:00:52 2020 -0500

    gpio: arizona: put pm_runtime in case of failure
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605030052.78235-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit e6f390a834b56583e6fc0949822644ce92fbb107
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:52:07 2020 -0500

    gpio: arizona: handle pm_runtime_get_sync failure case
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605025207.65719-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 6b9fbb073636906eee9fe4d4c05a4f445b9e2a23
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 22:33:43 2020 -0500

    ASoC: img-parallel-out: Fix a reference count leak
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200614033344.1814-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit c4c59b95b7f7d4cef5071b151be2dadb33f3287b
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 22:37:48 2020 -0500

    ASoC: img: Fix a reference count leak in img_i2s_in_set_fmt
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200614033749.2975-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 95459261c99f1621d90bc628c2a48e60b7cf9a88
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 28 15:21:04 2020 +0800

    hwrng: ks-sa - Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit d88de040e1df38414fc1e4380be9d0e997ab4d58
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:44:44 2020 -0500

    iio: pressure: zpa2326: handle pm_runtime_get_sync failure
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Fixes: 03b262f2bbf4 ("iio:pressure: initial zpa2326 barometer support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

commit 9433a51ec1533e0620ff08d0318d215de73ceb77
Merge: 8f02f363f76f f5641d053d46
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 12 12:24:42 2020 -0700

    Merge tag 'pwm/for-5.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/thierry.reding/linux-pwm
    
    Pull pwm updates from Thierry Reding:
     "Nothing too exciting for this cycle. A couple of fixes across the
      board, and Lee volunteered to help with patch review"
    
    * tag 'pwm/for-5.8-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/thierry.reding/linux-pwm:
      pwm: Add missing "CONFIG_" prefix
      MAINTAINERS: Add Lee Jones as reviewer for the PWM subsystem
      pwm: imx27: Fix rounding behavior
      pwm: rockchip: Simplify rockchip_pwm_get_state()
      pwm: img: Call pm_runtime_put() in pm_runtime_get_sync() failed case
      pwm: tegra: Support dynamic clock frequency configuration
      pwm: jz4740: Add support for the JZ4725B
      pwm: jz4740: Make PWM start with the active part
      pwm: jz4740: Enhance precision in calculation of duty cycle
      pwm: jz4740: Drop dependency on MACH_INGENIC
      pwm: lpss: Fix get_state runtime-pm reference handling
      pwm: sun4i: Support direct clock output on Allwinner A64
      pwm: Add support for Azoteq IQS620A PWM generator
      dt-bindings: pwm: rcar: add r8a77961 support
      pwm: Add missing '\n' in log messages

commit eea1238867205b9e48a67c1a63219529a73c46fd
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:06:43 2020 -0500

    sata_rcar: handle pm_runtime_get_sync failure cases
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit ca162ce98110b98e7d97b7157328d34dcfdd40a9
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 1 02:11:16 2020 -0500

    pwm: img: Call pm_runtime_put() in pm_runtime_get_sync() failed case
    
    Even in failed case of pm_runtime_get_sync(), the usage_count is
    incremented. In order to keep the usage_count with correct value call
    appropriate pm_runtime_put().
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>

commit fcee90cdf6f3a3a371add04d41528d5ba9c3b411
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 10:47:09 2020 +0800

    PCI: tegra: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Link: https://lore.kernel.org/r/20200521024709.2368-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thierry Reding <treding@nvidia.com>

commit 37f7212148cf1d796135cdf8d0c7fee13067674b
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 18:40:06 2020 +0800

    mtd: rawnand: omap_elm: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522104008.28340-1-dinghao.liu@zju.edu.cn

commit 550e68ea36a6671a96576c0531685ce6e6c0d19d
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 17:51:39 2020 +0800

    mtd: rawnand: gpmi: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522095139.19653-1-dinghao.liu@zju.edu.cn

commit 282a04bf1d8029eb98585cb5db3fd70fe8bc91f7
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 20:46:47 2020 +0800

    wlcore: fix runtime pm imbalance in wlcore_regdomain_config
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200520124649.10848-1-dinghao.liu@zju.edu.cn

commit 9604617e998b49f7695fea1479ed82421ef8c9f0
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 20:42:38 2020 +0800

    wlcore: fix runtime pm imbalance in wl1271_tx_work
    
    There are two error handling paths in this functon. When
    wlcore_tx_work_locked() returns an error code, we should
    decrease the runtime PM usage counter the same way as the
    error handling path beginning from pm_runtime_get_sync().
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200520124241.9931-1-dinghao.liu@zju.edu.cn

commit 65bd91dd6957390c42a0491b9622cf31a2cdb140
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 29 09:22:28 2020 +0800

    ASoC: img-i2s-out: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200529012230.5863-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 1c1dbb2c02623db18a50c61b175f19aead800b4e
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 11:13:49 2020 +0800

    PCI: tegra194: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Link: https://lore.kernel.org/r/20200521031355.7022-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Acked-by: Vidya Sagar <vidyas@nvidia.com>

commit 117858bd63fb2ebcdfcc27b09fd65cb44511ea4c
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat May 23 20:47:58 2020 +0800

    spi: tegra20-sflash: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200523124758.28604-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit faedcc17ad183acfa5d74758ebc4f21aef341f11
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat May 23 20:29:09 2020 +0800

    spi: tegra20-slink: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200523122909.25247-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit cddc36f3fd706b1046a4d4608359c0003f72db32
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat May 23 20:57:04 2020 +0800

    spi: tegra114: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200523125704.30300-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit a6dd004de1e9cb0e4d1a920c4f11eeccaef2ce50
Author: Alain Volmat <alain.volmat@st.com>
Date:   Thu Apr 30 17:43:21 2020 +0200

    i2c: fix missing pm_runtime_put_sync in i2c_device_probe
    
    [ Upstream commit 3c3dd56f760da056e821ac177e3ad0de4209a435 ]
    
    In case of the I2C client exposes the flag I2C_CLIENT_HOST_NOTIFY,
    pm_runtime_get_sync is called in order to always keep active the
    adapter. However later on, pm_runtime_put_sync is never called
    within the function in case of an error. This commit add this
    error handling.
    
    Fixes: 72bfcee11cf8 ("i2c: Prevent runtime suspend of adapter when Host Notify is required")
    Signed-off-by: Alain Volmat <alain.volmat@st.com>
    Reviewed-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33769c19feba67c484350810431db7c62f88923f
Author: Alain Volmat <alain.volmat@st.com>
Date:   Thu Apr 30 17:43:21 2020 +0200

    i2c: fix missing pm_runtime_put_sync in i2c_device_probe
    
    [ Upstream commit 3c3dd56f760da056e821ac177e3ad0de4209a435 ]
    
    In case of the I2C client exposes the flag I2C_CLIENT_HOST_NOTIFY,
    pm_runtime_get_sync is called in order to always keep active the
    adapter. However later on, pm_runtime_put_sync is never called
    within the function in case of an error. This commit add this
    error handling.
    
    Fixes: 72bfcee11cf8 ("i2c: Prevent runtime suspend of adapter when Host Notify is required")
    Signed-off-by: Alain Volmat <alain.volmat@st.com>
    Reviewed-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 920bef64cc5fa0e955be357bfc876179729df216
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 27 10:46:22 2020 +0800

    ASoC: wm8962: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200527024625.9937-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 53865b3259554389e40aeead392151c819b52a71
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 27 16:43:24 2020 +0800

    ASoC: img-spdif-in: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200527084326.4131-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 9ad61b5c804090022444719d1f16e1029e002430
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 27 16:46:08 2020 +0800

    ASoC: img-spdif-out: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200527084610.4790-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 8d728808194a12186ce5af0b72c8a47b42476bc3
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat May 23 21:38:59 2020 +0800

    spi: spi-fsl-lpspi: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200523133859.5625-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 0d71a5cf691a8226151ceeb79fb872925f053df5
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon May 25 15:17:30 2020 +0800

    ASoC: tas2552: Fix runtime PM imbalance in tas2552_component_probe
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200525071732.5887-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 25bf943e4e7b47282bd86ae7d39e039217ebb007
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Mon May 25 00:50:11 2020 -0500

    ASoC: fix incomplete error-handling in img_i2s_in_probe.
    
    Function "pm_runtime_get_sync()" is not handled by "pm_runtime_put()"
    if "PTR_ERR(rst) == -EPROBE_DEFER". Fix this issue by adding
    "pm_runtime_put()" into this error path.
    
    Fixes: f65bb92ca12e ("ASoC: img-i2s-in: Add runtime PM")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200525055011.31925-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 64c7d7ea22d86cacb65d0c097cc447bc0e6d8abd
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu May 21 19:08:09 2020 +0200

    PM: runtime: clk: Fix clk_pm_runtime_get() error path
    
    clk_pm_runtime_get() assumes that the PM-runtime usage counter will
    be dropped by pm_runtime_get_sync() on errors, which is not the case,
    so PM-runtime references to devices acquired by the former are leaked
    on errors returned by the latter.
    
    Fix this by modifying clk_pm_runtime_get() to drop the reference if
    pm_runtime_get_sync() returns an error.
    
    Fixes: 9a34b45397e5 clk: Add support for runtime PM
    Cc: 4.15+ <stable@vger.kernel.org> # 4.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>

commit 6f8cd246411575703d9312888b70705c396b53a9
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 16:08:38 2020 +0800

    gpio: rcar: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200522080839.32612-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit e5b913496099527abe46e175e5e2c844367bded0
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 15:39:19 2020 +0800

    usb: cdns3: Fix runtime PM imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>

commit 100f84beee4874234d04a1ea642b8c9738d7020d
Author: Nicolas Toromanoff <nicolas.toromanoff@st.com>
Date:   Tue May 12 16:11:12 2020 +0200

    crypto: stm32/crc32 - don't sleep in runtime pm
    
    Ensure stm32_crc_update() and stm32_crc_init() can be called
    in atomic context and can't sleep.
    
    Add pm_runtime_irq_safe() to make pm_runtime_get_sync() atomic.
    Change runtime pm to call clk_enable()/clk_disable() and change
    system pm to unprepare/prepare the clock and force runtime pm
    suspend/resume.
    
    Signed-off-by: Nicolas Toromanoff <nicolas.toromanoff@st.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit dc455f4c888365595c0a13da445e092422d55b8d
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:47:48 2020 +0800

    drm/nouveau/dispnv50: fix runtime pm imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit d3faddc7dcd326c0edc906f907f83a8454986d99
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:36:04 2020 +0800

    drm/nouveau: fix runtime pm imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit d7372dfb3f7f1602b87e0663e8b8646da23ebca7
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:25:49 2020 +0800

    drm/nouveau: fix runtime pm imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 00583fbe8031f69bba8b0a9a861efb75fb7131af
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:14:53 2020 +0800

    drm/nouveau/debugfs: fix runtime pm imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit a99a37f6cd5a74d5b22c08544aa6c5890813c8ba
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Fri May 15 12:43:38 2020 +0200

    remoteproc: Add support for runtime PM
    
    Call pm_runtime_get_sync() before the firmware is loaded, and
    pm_runtime_put() after the remote processor has been stopped.
    
    Even though the remoteproc device has no PM callbacks, this allows the
    parent device's PM callbacks to be properly called.
    
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Link: https://lore.kernel.org/r/20200515104340.10473-3-paul@crapouillou.net
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 3c3dd56f760da056e821ac177e3ad0de4209a435
Author: Alain Volmat <alain.volmat@st.com>
Date:   Thu Apr 30 17:43:21 2020 +0200

    i2c: fix missing pm_runtime_put_sync in i2c_device_probe
    
    In case of the I2C client exposes the flag I2C_CLIENT_HOST_NOTIFY,
    pm_runtime_get_sync is called in order to always keep active the
    adapter. However later on, pm_runtime_put_sync is never called
    within the function in case of an error. This commit add this
    error handling.
    
    Fixes: 72bfcee11cf8 ("i2c: Prevent runtime suspend of adapter when Host Notify is required")
    Signed-off-by: Alain Volmat <alain.volmat@st.com>
    Reviewed-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit c2cd3452d5f8b66d49a73138fba5baadd5b489bd
Author: Martin Kepplinger <martin.kepplinger@puri.sm>
Date:   Thu Mar 19 11:02:07 2020 +0100

    usb: dwc3: support continuous runtime PM with dual role
    
    The DRD module calls dwc3_set_mode() on role switches, i.e. when a device is
    being plugged in. In order to support continuous runtime power management when
    plugging in / unplugging a cable, we need to call pm_runtime_get_sync() in
    this path.
    
    Signed-off-by: Martin Kepplinger <martin.kepplinger@puri.sm>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>

commit befc8b9a5ef1814de24373f81ed40bf1414aa6e0
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 7 20:11:16 2020 +0200

    i2c: designware: platdrv: Remove DPM_FLAG_SMART_SUSPEND flag on BYT and CHT
    
    commit d79294d0de12ddd1420110813626d691f440b86f upstream.
    
    We already set DPM_FLAG_SMART_PREPARE, so we completely skip all
    callbacks (other then prepare) where possible, quoting from
    dw_i2c_plat_prepare():
    
            /*
             * If the ACPI companion device object is present for this device, it
             * may be accessed during suspend and resume of other devices via I2C
             * operation regions, so tell the PM core and middle layers to avoid
             * skipping system suspend/resume callbacks for it in that case.
             */
            return !has_acpi_companion(dev);
    
    Also setting the DPM_FLAG_SMART_SUSPEND will cause acpi_subsys_suspend()
    to leave the controller runtime-suspended even if dw_i2c_plat_prepare()
    returned 0.
    
    Leaving the controller runtime-suspended normally, when the I2C controller
    is suspended during the suspend_late phase, is not an issue because
    the pm_runtime_get_sync() done by i2c_dw_xfer() will (runtime-)resume it.
    
    But for dw I2C controllers on Bay- and Cherry-Trail devices acpi_lpss.c
    leaves the controller alive until the suspend_noirq phase, because it may
    be used by the _PS3 ACPI methods of PCI devices and PCI devices are left
    powered on until the suspend_noirq phase.
    
    Between the suspend_late and resume_early phases runtime-pm is disabled.
    So for any ACPI I2C OPRegion accesses done after the suspend_late phase,
    the pm_runtime_get_sync() done by i2c_dw_xfer() is a no-op and the
    controller is left runtime-suspended.
    
    i2c_dw_xfer() has a check to catch this condition (rather then waiting
    for the I2C transfer to timeout because the controller is suspended).
    acpi_subsys_suspend() leaving the controller runtime-suspended in
    combination with an ACPI I2C OPRegion access done after the suspend_late
    phase triggers this check, leading to the following error being logged
    on a Bay Trail based Lenovo Thinkpad 8 tablet:
    
    [   93.275882] i2c_designware 80860F41:00: Transfer while suspended
    [   93.275993] WARNING: CPU: 0 PID: 412 at drivers/i2c/busses/i2c-designware-master.c:429 i2c_dw_xfer+0x239/0x280
    ...
    [   93.276252] Workqueue: kacpi_notify acpi_os_execute_deferred
    [   93.276267] RIP: 0010:i2c_dw_xfer+0x239/0x280
    ...
    [   93.276340] Call Trace:
    [   93.276366]  __i2c_transfer+0x121/0x520
    [   93.276379]  i2c_transfer+0x4c/0x100
    [   93.276392]  i2c_acpi_space_handler+0x219/0x510
    [   93.276408]  ? up+0x40/0x60
    [   93.276419]  ? i2c_acpi_notify+0x130/0x130
    [   93.276433]  acpi_ev_address_space_dispatch+0x1e1/0x252
    ...
    
    So since on BYT and CHT platforms we want ACPI I2c OPRegion accesses
    to work until the suspend_noirq phase, we need the controller to be
    runtime-resumed during the suspend phase if it is runtime-suspended
    suspended at that time. This means that we must not set the
    DPM_FLAG_SMART_SUSPEND on these platforms.
    
    On BYT and CHT we already have a special ACCESS_NO_IRQ_SUSPEND flag
    to make sure the controller stays functional until the suspend_noirq
    phase. This commit makes the driver not set the DPM_FLAG_SMART_SUSPEND
    flag when that flag is set.
    
    Cc: stable@vger.kernel.org
    Fixes: b30f2f65568f ("i2c: designware: Set IRQF_NO_SUSPEND flag for all BYT and CHT controllers")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e477a38a605224761749695605dd78497719c838
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 7 20:11:16 2020 +0200

    i2c: designware: platdrv: Remove DPM_FLAG_SMART_SUSPEND flag on BYT and CHT
    
    commit d79294d0de12ddd1420110813626d691f440b86f upstream.
    
    We already set DPM_FLAG_SMART_PREPARE, so we completely skip all
    callbacks (other then prepare) where possible, quoting from
    dw_i2c_plat_prepare():
    
            /*
             * If the ACPI companion device object is present for this device, it
             * may be accessed during suspend and resume of other devices via I2C
             * operation regions, so tell the PM core and middle layers to avoid
             * skipping system suspend/resume callbacks for it in that case.
             */
            return !has_acpi_companion(dev);
    
    Also setting the DPM_FLAG_SMART_SUSPEND will cause acpi_subsys_suspend()
    to leave the controller runtime-suspended even if dw_i2c_plat_prepare()
    returned 0.
    
    Leaving the controller runtime-suspended normally, when the I2C controller
    is suspended during the suspend_late phase, is not an issue because
    the pm_runtime_get_sync() done by i2c_dw_xfer() will (runtime-)resume it.
    
    But for dw I2C controllers on Bay- and Cherry-Trail devices acpi_lpss.c
    leaves the controller alive until the suspend_noirq phase, because it may
    be used by the _PS3 ACPI methods of PCI devices and PCI devices are left
    powered on until the suspend_noirq phase.
    
    Between the suspend_late and resume_early phases runtime-pm is disabled.
    So for any ACPI I2C OPRegion accesses done after the suspend_late phase,
    the pm_runtime_get_sync() done by i2c_dw_xfer() is a no-op and the
    controller is left runtime-suspended.
    
    i2c_dw_xfer() has a check to catch this condition (rather then waiting
    for the I2C transfer to timeout because the controller is suspended).
    acpi_subsys_suspend() leaving the controller runtime-suspended in
    combination with an ACPI I2C OPRegion access done after the suspend_late
    phase triggers this check, leading to the following error being logged
    on a Bay Trail based Lenovo Thinkpad 8 tablet:
    
    [   93.275882] i2c_designware 80860F41:00: Transfer while suspended
    [   93.275993] WARNING: CPU: 0 PID: 412 at drivers/i2c/busses/i2c-designware-master.c:429 i2c_dw_xfer+0x239/0x280
    ...
    [   93.276252] Workqueue: kacpi_notify acpi_os_execute_deferred
    [   93.276267] RIP: 0010:i2c_dw_xfer+0x239/0x280
    ...
    [   93.276340] Call Trace:
    [   93.276366]  __i2c_transfer+0x121/0x520
    [   93.276379]  i2c_transfer+0x4c/0x100
    [   93.276392]  i2c_acpi_space_handler+0x219/0x510
    [   93.276408]  ? up+0x40/0x60
    [   93.276419]  ? i2c_acpi_notify+0x130/0x130
    [   93.276433]  acpi_ev_address_space_dispatch+0x1e1/0x252
    ...
    
    So since on BYT and CHT platforms we want ACPI I2c OPRegion accesses
    to work until the suspend_noirq phase, we need the controller to be
    runtime-resumed during the suspend phase if it is runtime-suspended
    suspended at that time. This means that we must not set the
    DPM_FLAG_SMART_SUSPEND on these platforms.
    
    On BYT and CHT we already have a special ACCESS_NO_IRQ_SUSPEND flag
    to make sure the controller stays functional until the suspend_noirq
    phase. This commit makes the driver not set the DPM_FLAG_SMART_SUSPEND
    flag when that flag is set.
    
    Cc: stable@vger.kernel.org
    Fixes: b30f2f65568f ("i2c: designware: Set IRQF_NO_SUSPEND flag for all BYT and CHT controllers")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 653b425309524e6c21a9252d7ae07da0f11068d5
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 7 20:11:16 2020 +0200

    i2c: designware: platdrv: Remove DPM_FLAG_SMART_SUSPEND flag on BYT and CHT
    
    commit d79294d0de12ddd1420110813626d691f440b86f upstream.
    
    We already set DPM_FLAG_SMART_PREPARE, so we completely skip all
    callbacks (other then prepare) where possible, quoting from
    dw_i2c_plat_prepare():
    
            /*
             * If the ACPI companion device object is present for this device, it
             * may be accessed during suspend and resume of other devices via I2C
             * operation regions, so tell the PM core and middle layers to avoid
             * skipping system suspend/resume callbacks for it in that case.
             */
            return !has_acpi_companion(dev);
    
    Also setting the DPM_FLAG_SMART_SUSPEND will cause acpi_subsys_suspend()
    to leave the controller runtime-suspended even if dw_i2c_plat_prepare()
    returned 0.
    
    Leaving the controller runtime-suspended normally, when the I2C controller
    is suspended during the suspend_late phase, is not an issue because
    the pm_runtime_get_sync() done by i2c_dw_xfer() will (runtime-)resume it.
    
    But for dw I2C controllers on Bay- and Cherry-Trail devices acpi_lpss.c
    leaves the controller alive until the suspend_noirq phase, because it may
    be used by the _PS3 ACPI methods of PCI devices and PCI devices are left
    powered on until the suspend_noirq phase.
    
    Between the suspend_late and resume_early phases runtime-pm is disabled.
    So for any ACPI I2C OPRegion accesses done after the suspend_late phase,
    the pm_runtime_get_sync() done by i2c_dw_xfer() is a no-op and the
    controller is left runtime-suspended.
    
    i2c_dw_xfer() has a check to catch this condition (rather then waiting
    for the I2C transfer to timeout because the controller is suspended).
    acpi_subsys_suspend() leaving the controller runtime-suspended in
    combination with an ACPI I2C OPRegion access done after the suspend_late
    phase triggers this check, leading to the following error being logged
    on a Bay Trail based Lenovo Thinkpad 8 tablet:
    
    [   93.275882] i2c_designware 80860F41:00: Transfer while suspended
    [   93.275993] WARNING: CPU: 0 PID: 412 at drivers/i2c/busses/i2c-designware-master.c:429 i2c_dw_xfer+0x239/0x280
    ...
    [   93.276252] Workqueue: kacpi_notify acpi_os_execute_deferred
    [   93.276267] RIP: 0010:i2c_dw_xfer+0x239/0x280
    ...
    [   93.276340] Call Trace:
    [   93.276366]  __i2c_transfer+0x121/0x520
    [   93.276379]  i2c_transfer+0x4c/0x100
    [   93.276392]  i2c_acpi_space_handler+0x219/0x510
    [   93.276408]  ? up+0x40/0x60
    [   93.276419]  ? i2c_acpi_notify+0x130/0x130
    [   93.276433]  acpi_ev_address_space_dispatch+0x1e1/0x252
    ...
    
    So since on BYT and CHT platforms we want ACPI I2c OPRegion accesses
    to work until the suspend_noirq phase, we need the controller to be
    runtime-resumed during the suspend phase if it is runtime-suspended
    suspended at that time. This means that we must not set the
    DPM_FLAG_SMART_SUSPEND on these platforms.
    
    On BYT and CHT we already have a special ACCESS_NO_IRQ_SUSPEND flag
    to make sure the controller stays functional until the suspend_noirq
    phase. This commit makes the driver not set the DPM_FLAG_SMART_SUSPEND
    flag when that flag is set.
    
    Cc: stable@vger.kernel.org
    Fixes: b30f2f65568f ("i2c: designware: Set IRQF_NO_SUSPEND flag for all BYT and CHT controllers")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d79294d0de12ddd1420110813626d691f440b86f
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Apr 7 20:11:16 2020 +0200

    i2c: designware: platdrv: Remove DPM_FLAG_SMART_SUSPEND flag on BYT and CHT
    
    We already set DPM_FLAG_SMART_PREPARE, so we completely skip all
    callbacks (other then prepare) where possible, quoting from
    dw_i2c_plat_prepare():
    
            /*
             * If the ACPI companion device object is present for this device, it
             * may be accessed during suspend and resume of other devices via I2C
             * operation regions, so tell the PM core and middle layers to avoid
             * skipping system suspend/resume callbacks for it in that case.
             */
            return !has_acpi_companion(dev);
    
    Also setting the DPM_FLAG_SMART_SUSPEND will cause acpi_subsys_suspend()
    to leave the controller runtime-suspended even if dw_i2c_plat_prepare()
    returned 0.
    
    Leaving the controller runtime-suspended normally, when the I2C controller
    is suspended during the suspend_late phase, is not an issue because
    the pm_runtime_get_sync() done by i2c_dw_xfer() will (runtime-)resume it.
    
    But for dw I2C controllers on Bay- and Cherry-Trail devices acpi_lpss.c
    leaves the controller alive until the suspend_noirq phase, because it may
    be used by the _PS3 ACPI methods of PCI devices and PCI devices are left
    powered on until the suspend_noirq phase.
    
    Between the suspend_late and resume_early phases runtime-pm is disabled.
    So for any ACPI I2C OPRegion accesses done after the suspend_late phase,
    the pm_runtime_get_sync() done by i2c_dw_xfer() is a no-op and the
    controller is left runtime-suspended.
    
    i2c_dw_xfer() has a check to catch this condition (rather then waiting
    for the I2C transfer to timeout because the controller is suspended).
    acpi_subsys_suspend() leaving the controller runtime-suspended in
    combination with an ACPI I2C OPRegion access done after the suspend_late
    phase triggers this check, leading to the following error being logged
    on a Bay Trail based Lenovo Thinkpad 8 tablet:
    
    [   93.275882] i2c_designware 80860F41:00: Transfer while suspended
    [   93.275993] WARNING: CPU: 0 PID: 412 at drivers/i2c/busses/i2c-designware-master.c:429 i2c_dw_xfer+0x239/0x280
    ...
    [   93.276252] Workqueue: kacpi_notify acpi_os_execute_deferred
    [   93.276267] RIP: 0010:i2c_dw_xfer+0x239/0x280
    ...
    [   93.276340] Call Trace:
    [   93.276366]  __i2c_transfer+0x121/0x520
    [   93.276379]  i2c_transfer+0x4c/0x100
    [   93.276392]  i2c_acpi_space_handler+0x219/0x510
    [   93.276408]  ? up+0x40/0x60
    [   93.276419]  ? i2c_acpi_notify+0x130/0x130
    [   93.276433]  acpi_ev_address_space_dispatch+0x1e1/0x252
    ...
    
    So since on BYT and CHT platforms we want ACPI I2c OPRegion accesses
    to work until the suspend_noirq phase, we need the controller to be
    runtime-resumed during the suspend phase if it is runtime-suspended
    suspended at that time. This means that we must not set the
    DPM_FLAG_SMART_SUSPEND on these platforms.
    
    On BYT and CHT we already have a special ACCESS_NO_IRQ_SUSPEND flag
    to make sure the controller stays functional until the suspend_noirq
    phase. This commit makes the driver not set the DPM_FLAG_SMART_SUSPEND
    flag when that flag is set.
    
    Cc: stable@vger.kernel.org
    Fixes: b30f2f65568f ("i2c: designware: Set IRQF_NO_SUSPEND flag for all BYT and CHT controllers")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit 9b965819442720217e1ff4f0cfe3e5c2ffe96b54
Author: Peter Chen <peter.chen@nxp.com>
Date:   Mon Mar 16 11:10:34 2020 +0800

    usb: chipidea: udc: fix sleeping function called from invalid context
    
    commit 7368760d1bcdabf515c41a502568b489de3da683 upstream.
    
    The code calls pm_runtime_get_sync with irq disabled, it causes below
    warning:
    
    BUG: sleeping function called from invalid context at
    wer/runtime.c:1075
    in_atomic(): 1, irqs_disabled(): 128, non_block: 0, pid:
    er/u8:1
    CPU: 1 PID: 37 Comm: kworker/u8:1 Not tainted
    20200304-00181-gbebfd2a5be98 #1588
    Hardware name: NVIDIA Tegra SoC (Flattened Device Tree)
    Workqueue: ci_otg ci_otg_work
    [<c010e8bd>] (unwind_backtrace) from [<c010a315>]
    1/0x14)
    [<c010a315>] (show_stack) from [<c0987d29>]
    5/0x94)
    [<c0987d29>] (dump_stack) from [<c013e77f>]
    +0xeb/0x118)
    [<c013e77f>] (___might_sleep) from [<c052fa1d>]
    esume+0x75/0x78)
    [<c052fa1d>] (__pm_runtime_resume) from [<c0627a33>]
    0x23/0x74)
    [<c0627a33>] (ci_udc_pullup) from [<c062fb93>]
    nect+0x2b/0xcc)
    [<c062fb93>] (usb_gadget_connect) from [<c062769d>]
    _connect+0x59/0x104)
    [<c062769d>] (ci_hdrc_gadget_connect) from [<c062778b>]
    ssion+0x43/0x48)
    [<c062778b>] (ci_udc_vbus_session) from [<c062f997>]
    s_connect+0x17/0x9c)
    [<c062f997>] (usb_gadget_vbus_connect) from [<c062634d>]
    bd/0x128)
    [<c062634d>] (ci_otg_work) from [<c0134719>]
    rk+0x149/0x404)
    [<c0134719>] (process_one_work) from [<c0134acb>]
    0xf7/0x3bc)
    [<c0134acb>] (worker_thread) from [<c0139433>]
    x118)
    [<c0139433>] (kthread) from [<c01010bd>]
    (ret_from_fork+0x11/0x34)
    
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Cc: <stable@vger.kernel.org> #v5.5
    Fixes: 72dc8df7920f ("usb: chipidea: udc: protect usb interrupt enable")
    Reported-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20200316031034.17847-2-peter.chen@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7368760d1bcdabf515c41a502568b489de3da683
Author: Peter Chen <peter.chen@nxp.com>
Date:   Mon Mar 16 11:10:34 2020 +0800

    usb: chipidea: udc: fix sleeping function called from invalid context
    
    The code calls pm_runtime_get_sync with irq disabled, it causes below
    warning:
    
    BUG: sleeping function called from invalid context at
    wer/runtime.c:1075
    in_atomic(): 1, irqs_disabled(): 128, non_block: 0, pid:
    er/u8:1
    CPU: 1 PID: 37 Comm: kworker/u8:1 Not tainted
    20200304-00181-gbebfd2a5be98 #1588
    Hardware name: NVIDIA Tegra SoC (Flattened Device Tree)
    Workqueue: ci_otg ci_otg_work
    [<c010e8bd>] (unwind_backtrace) from [<c010a315>]
    1/0x14)
    [<c010a315>] (show_stack) from [<c0987d29>]
    5/0x94)
    [<c0987d29>] (dump_stack) from [<c013e77f>]
    +0xeb/0x118)
    [<c013e77f>] (___might_sleep) from [<c052fa1d>]
    esume+0x75/0x78)
    [<c052fa1d>] (__pm_runtime_resume) from [<c0627a33>]
    0x23/0x74)
    [<c0627a33>] (ci_udc_pullup) from [<c062fb93>]
    nect+0x2b/0xcc)
    [<c062fb93>] (usb_gadget_connect) from [<c062769d>]
    _connect+0x59/0x104)
    [<c062769d>] (ci_hdrc_gadget_connect) from [<c062778b>]
    ssion+0x43/0x48)
    [<c062778b>] (ci_udc_vbus_session) from [<c062f997>]
    s_connect+0x17/0x9c)
    [<c062f997>] (usb_gadget_vbus_connect) from [<c062634d>]
    bd/0x128)
    [<c062634d>] (ci_otg_work) from [<c0134719>]
    rk+0x149/0x404)
    [<c0134719>] (process_one_work) from [<c0134acb>]
    0xf7/0x3bc)
    [<c0134acb>] (worker_thread) from [<c0139433>]
    x118)
    [<c0139433>] (kthread) from [<c01010bd>]
    (ret_from_fork+0x11/0x34)
    
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Cc: <stable@vger.kernel.org> #v5.5
    Fixes: 72dc8df7920f ("usb: chipidea: udc: protect usb interrupt enable")
    Reported-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20200316031034.17847-2-peter.chen@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bedb404e91bb2908d9921fc736a518a9d89525fc
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Feb 17 13:40:15 2020 +0200

    serial: 8250_port: Don't use power management for kernel console
    
    Doing any kind of power management for kernel console is really bad idea.
    
    First of all, it runs in poll and atomic mode. This fact attaches a limitation
    on the functions that might be called. For example, pm_runtime_get_sync() might
    sleep and thus can't be used. This call needs, for example, to bring the device
    to powered on state on the system, where the power on sequence may require
    on-atomic operations, such as Intel Cherrytrail with ACPI enumerated UARTs.
    That said, on ACPI enabled platforms it might even call firmware for a job.
    
    On the other hand pm_runtime_get() doesn't guarantee that device will become
    powered on fast enough.
    
    Besides that, imagine the case when console is about to print a kernel Oops and
    it's powered off. In such an emergency case calling the complex functions is
    not the best what we can do, taking into consideration that user wants to see
    at least something of the last kernel word before it passes away.
    
    Here we modify the 8250 console code to prevent runtime power management.
    
    Note, there is a behaviour change for OMAP boards. It will require to detach
    kernel console to become idle.
    
    Link: https://lists.openwall.net/linux-kernel/2018/09/29/65
    Suggested-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20200217114016.49856-6-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5455e3fab200503e7e37772183ad7d5284e87bd
Author: Alexander Duyck <alexander.h.duyck@linux.intel.com>
Date:   Fri Oct 11 08:34:52 2019 -0700

    e1000e: Use rtnl_lock to prevent race conditions between net and pci/pm
    
    commit a7023819404ac9bd2bb311a4fafd38515cfa71ec upstream.
    
    This patch is meant to address possible race conditions that can exist
    between network configuration and power management. A similar issue was
    fixed for igb in commit 9474933caf21 ("igb: close/suspend race in
    netif_device_detach").
    
    In addition it consolidates the code so that the PCI error handling code
    will essentially perform the power management freeze on the device prior to
    attempting a reset, and will thaw the device afterwards if that is what it
    is planning to do. Otherwise when we call close on the interface it should
    see it is detached and not attempt to call the logic to down the interface
    and free the IRQs again.
    
    From what I can tell the check that was adding the check for __E1000_DOWN
    in e1000e_close was added when runtime power management was added. However
    it should not be relevant for us as we perform a call to
    pm_runtime_get_sync before we call e1000_down/free_irq so it should always
    be back up before we call into this anyway.
    
    Reported-by: Morumuri Srivalli <smorumu1@in.ibm.com>
    Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Tested-by: David Dai <zdai@linux.vnet.ibm.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Cc: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 215be713d05dfb037818b53c402753934e881d76
Author: Samuel Holland <samuel@sholland.org>
Date:   Tue Feb 11 01:28:58 2020 -0600

    drm/sun4i: dsi: Remove incorrect use of runtime PM
    
    The driver currently uses runtime PM to perform some of the module
    initialization and cleanup. This has three problems:
    
    1) There is no Kconfig dependency on CONFIG_PM, so if runtime PM is
       disabled, the driver will not work at all, since the module will
       never be initialized.
    
    2) The driver does not ensure that the device is suspended when
       sun6i_dsi_probe() fails or when sun6i_dsi_remove() is called. It
       simply disables runtime PM. From the docs of pm_runtime_disable():
    
          The device can be either active or suspended after its runtime PM
          has been disabled.
    
       And indeed, the device will likely still be active if sun6i_dsi_probe
       fails. For example, if the panel driver is not yet loaded, we have
       the following sequence:
    
       sun6i_dsi_probe()
          pm_runtime_enable()
          mipi_dsi_host_register()
             of_mipi_dsi_device_add(child)
                ...device_add()...
                   __device_attach()
                     pm_runtime_get_sync(dev->parent) -> Causes resume
                     bus_for_each_drv()
                        __device_attach_driver() -> No match for panel
                     pm_runtime_put(dev->parent) -> Async idle request
          component_add()
             __component_add()
                try_to_bring_up_masters()
                   try_to_bring_up_master()
                      sun4i_drv_bind()
                         component_bind_all()
                            component_bind()
                               sun6i_dsi_bind() -> Fails with -EPROBE_DEFER
          mipi_dsi_host_unregister()
          pm_runtime_disable()
             __pm_runtime_disable()
                __pm_runtime_barrier() -> Idle request is still pending
                   cancel_work_sync()  -> DSI host is *not* suspended!
    
       Since the device is not suspended, the clock and regulator are never
       disabled. The imbalance causes a WARN at devres free time.
    
    3) The driver relies on being suspended when sun6i_dsi_encoder_enable()
       is called. The resume callback has a comment that says:
    
          Some part of it can only be done once we get a number of
          lanes, see sun6i_dsi_inst_init
    
       And then part of the resume callback only runs if dsi->device is not
       NULL (that is, if sun6i_dsi_attach() has been called). However, as
       the above call graph shows, the resume callback is guaranteed to be
       called before sun6i_dsi_attach(); it is called before child devices
       get their drivers attached.
    
       Therefore, part of the controller initialization will only run if the
       device is suspended between the calls to mipi_dsi_host_register() and
       component_add() (which ends up calling sun6i_dsi_encoder_enable()).
       Again, as shown by the above call graph, this is not the case. It
       appears that the controller happens to work because it is still
       initialized by the bootloader.
    
       Because the connector is hardcoded to always be connected, the
       device's runtime PM reference is not dropped until system suspend,
       when sun4i_drv_drm_sys_suspend() ends up calling
       sun6i_dsi_encoder_disable(). However, that is done as a system sleep
       PM hook, and at that point the system PM core has already taken
       another runtime PM reference, so sun6i_dsi_runtime_suspend() is
       not called. Likewise, by the time the PM core releases its reference,
       sun4i_drv_drm_sys_resume() has already re-enabled the encoder.
    
       So after system suspend and resume, we have *still never called*
       sun6i_dsi_inst_init(), and now that the rest of the display pipeline
       has been reset, the DSI host is unable to communicate with the panel,
       causing VBLANK timeouts.
    
    Fix all of these issues by inlining the runtime PM hooks into the
    encoder enable/disable functions, which are guaranteed to run after a
    panel is attached. This allows sun6i_dsi_inst_init() to be called
    unconditionally. Furthermore, this causes the hardware to be turned off
    during system suspend and reinitialized on resume, which was not
    happening before.
    
    Fixes: 133add5b5ad4 ("drm/sun4i: Add Allwinner A31 MIPI-DSI controller support")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200211072858.30784-4-samuel@sholland.org

commit ddc078451405d1196798e45bc24b1f88b73b6503
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Thu Jan 16 12:14:40 2020 +0200

    crypto: ccree - fix pm wrongful error reporting
    
    commit cedca59fae5834af8445b403c66c9953754375d7 upstream.
    
    pm_runtime_get_sync() can return 1 as a valid (none error) return
    code. Treat it as such.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01705a8d41ee47466e2913384aa8f17f46d71dc5
Author: David Engraf <david.engraf@sysgo.com>
Date:   Mon Dec 16 12:18:25 2019 +0100

    PCI: tegra: Fix return value check of pm_runtime_get_sync()
    
    commit 885199148442f56b880995d703d2ed03b6481a3c upstream.
    
    pm_runtime_get_sync() returns the device's usage counter. This might
    be >0 if the device is already powered up or CONFIG_PM is disabled.
    
    Abort probe function on real error only.
    
    Fixes: da76ba50963b ("PCI: tegra: Add power management support")
    Link: https://lore.kernel.org/r/20191216111825.28136-1-david.engraf@sysgo.com
    Signed-off-by: David Engraf <david.engraf@sysgo.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Andrew Murray <andrew.murray@arm.com>
    Cc: stable@vger.kernel.org      # v4.17+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8760030e7017558faa748ba62376be5ab6babf1
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Thu Jan 16 12:14:40 2020 +0200

    crypto: ccree - fix pm wrongful error reporting
    
    commit cedca59fae5834af8445b403c66c9953754375d7 upstream.
    
    pm_runtime_get_sync() can return 1 as a valid (none error) return
    code. Treat it as such.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05d56da81d941d5c20be373e422fb7e709d93c0d
Author: David Engraf <david.engraf@sysgo.com>
Date:   Mon Dec 16 12:18:25 2019 +0100

    PCI: tegra: Fix return value check of pm_runtime_get_sync()
    
    commit 885199148442f56b880995d703d2ed03b6481a3c upstream.
    
    pm_runtime_get_sync() returns the device's usage counter. This might
    be >0 if the device is already powered up or CONFIG_PM is disabled.
    
    Abort probe function on real error only.
    
    Fixes: da76ba50963b ("PCI: tegra: Add power management support")
    Link: https://lore.kernel.org/r/20191216111825.28136-1-david.engraf@sysgo.com
    Signed-off-by: David Engraf <david.engraf@sysgo.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Andrew Murray <andrew.murray@arm.com>
    Cc: stable@vger.kernel.org      # v4.17+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1104fc044ffbffffe0a5ddf4a81e10addeed080c
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Thu Jan 16 12:14:40 2020 +0200

    crypto: ccree - fix pm wrongful error reporting
    
    commit cedca59fae5834af8445b403c66c9953754375d7 upstream.
    
    pm_runtime_get_sync() can return 1 as a valid (none error) return
    code. Treat it as such.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff949bbf163a3fe39d7c29e3815b0040f04ce958
Author: David Engraf <david.engraf@sysgo.com>
Date:   Mon Dec 16 12:18:25 2019 +0100

    PCI: tegra: Fix return value check of pm_runtime_get_sync()
    
    commit 885199148442f56b880995d703d2ed03b6481a3c upstream.
    
    pm_runtime_get_sync() returns the device's usage counter. This might
    be >0 if the device is already powered up or CONFIG_PM is disabled.
    
    Abort probe function on real error only.
    
    Fixes: da76ba50963b ("PCI: tegra: Add power management support")
    Link: https://lore.kernel.org/r/20191216111825.28136-1-david.engraf@sysgo.com
    Signed-off-by: David Engraf <david.engraf@sysgo.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Andrew Murray <andrew.murray@arm.com>
    Cc: stable@vger.kernel.org      # v4.17+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b647d2bd8064c6a5113e7b50e3adbbf6108d7e21
Merge: c11dfed9caa2 21a92676e1fe
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Wed Jan 29 17:00:07 2020 -0600

    Merge branch 'remotes/lorenzo/pci/tegra'
    
      - Fix checking of pm_runtime_get_sync() return value (David Engraf)
    
      - Fix AFI_PEX2_CTRL reg offset for Tegra30 (Marcel Ziswiler)
    
    * remotes/lorenzo/pci/tegra:
      PCI: tegra: Fix afi_pex2_ctrl reg offset for Tegra30
      PCI: tegra: Fix return value check of pm_runtime_get_sync()

commit b14cc6e9dd8e01219da68300b0901ea13c603a4d
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Thu May 16 16:53:52 2019 +0100

    dmaengine: tegra210-adma: Fix crash during probe
    
    [ Upstream commit b53611fb1ce9b1786bd18205473e0c1d6bfa8934 ]
    
    Commit f33e7bb3eb92 ("dmaengine: tegra210-adma: restore channel status")
    added support to save and restore the DMA channel registers when runtime
    suspending the ADMA. This change is causing the kernel to crash when
    probing the ADMA, if the device is probed deferred when looking up the
    channel interrupts. The crash occurs because not all of the channel base
    addresses have been setup at this point and in the clean-up path of the
    probe, pm_runtime_suspend() is called invoking its callback which
    expects all the channel base addresses to be initialised.
    
    Although this could be fixed by simply checking for a NULL address, on
    further review of the driver it seems more appropriate that we only call
    pm_runtime_get_sync() after all the channel interrupts and base
    addresses have been configured. Therefore, fix this crash by moving the
    calls to pm_runtime_enable(), pm_runtime_get_sync() and
    tegra_adma_init() after the DMA channels have been initialised.
    
    Fixes: f33e7bb3eb92 ("dmaengine: tegra210-adma: restore channel status")
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f6e0f44e5349b5b001b598d4235c6583b38bdfe
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Oct 12 12:12:28 2018 +0200

    pwm: lpss: Release runtime-pm reference from the driver's remove callback
    
    [ Upstream commit 42885551cedb45961879d2fc3dc3c4dc545cc23e ]
    
    For each pwm output which gets enabled through pwm_lpss_apply(), we do a
    pm_runtime_get_sync().
    
    This commit adds pm_runtime_put() calls to pwm_lpss_remove() to balance
    these when the driver gets removed with some of the outputs still enabled.
    
    Fixes: f080be27d7d9 ("pwm: lpss: Add support for runtime PM")
    Acked-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da5c35fe45c46bbc2449615b92eccbec2c8a965b
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Thu May 16 16:53:52 2019 +0100

    dmaengine: tegra210-adma: Fix crash during probe
    
    [ Upstream commit b53611fb1ce9b1786bd18205473e0c1d6bfa8934 ]
    
    Commit f33e7bb3eb92 ("dmaengine: tegra210-adma: restore channel status")
    added support to save and restore the DMA channel registers when runtime
    suspending the ADMA. This change is causing the kernel to crash when
    probing the ADMA, if the device is probed deferred when looking up the
    channel interrupts. The crash occurs because not all of the channel base
    addresses have been setup at this point and in the clean-up path of the
    probe, pm_runtime_suspend() is called invoking its callback which
    expects all the channel base addresses to be initialised.
    
    Although this could be fixed by simply checking for a NULL address, on
    further review of the driver it seems more appropriate that we only call
    pm_runtime_get_sync() after all the channel interrupts and base
    addresses have been configured. Therefore, fix this crash by moving the
    calls to pm_runtime_enable(), pm_runtime_get_sync() and
    tegra_adma_init() after the DMA channels have been initialised.
    
    Fixes: f33e7bb3eb92 ("dmaengine: tegra210-adma: restore channel status")
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 301c669961142183a7b157cc79bbba3d963b8a29
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Feb 1 01:47:53 2019 +0100

    driver core: Do not resume suppliers under device_links_write_lock()
    
    [ Upstream commit 5db25c9eb893df8f6b93c1d97b8006d768e1b6f5 ]
    
    It is incorrect to call pm_runtime_get_sync() under
    device_links_write_lock(), because it may end up trying to take
    device_links_read_lock() while resuming the target device and that
    will deadlock in the non-SRCU case, so avoid that by resuming the
    supplier device in device_link_add() before calling
    device_links_write_lock().
    
    Fixes: 21d5c57b3726 ("PM / runtime: Use device links")
    Fixes: baa8809f6097 ("PM / runtime: Optimize the use of device links")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b63a86ea90f7a8342aef7ffd49eeb61a32afe21
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Oct 12 12:12:28 2018 +0200

    pwm: lpss: Release runtime-pm reference from the driver's remove callback
    
    [ Upstream commit 42885551cedb45961879d2fc3dc3c4dc545cc23e ]
    
    For each pwm output which gets enabled through pwm_lpss_apply(), we do a
    pm_runtime_get_sync().
    
    This commit adds pm_runtime_put() calls to pwm_lpss_remove() to balance
    these when the driver gets removed with some of the outputs still enabled.
    
    Fixes: f080be27d7d9 ("pwm: lpss: Add support for runtime PM")
    Acked-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71bc62b08059915218d3fbc78092f40cedbfe446
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Thu May 16 16:53:52 2019 +0100

    dmaengine: tegra210-adma: Fix crash during probe
    
    [ Upstream commit b53611fb1ce9b1786bd18205473e0c1d6bfa8934 ]
    
    Commit f33e7bb3eb92 ("dmaengine: tegra210-adma: restore channel status")
    added support to save and restore the DMA channel registers when runtime
    suspending the ADMA. This change is causing the kernel to crash when
    probing the ADMA, if the device is probed deferred when looking up the
    channel interrupts. The crash occurs because not all of the channel base
    addresses have been setup at this point and in the clean-up path of the
    probe, pm_runtime_suspend() is called invoking its callback which
    expects all the channel base addresses to be initialised.
    
    Although this could be fixed by simply checking for a NULL address, on
    further review of the driver it seems more appropriate that we only call
    pm_runtime_get_sync() after all the channel interrupts and base
    addresses have been configured. Therefore, fix this crash by moving the
    calls to pm_runtime_enable(), pm_runtime_get_sync() and
    tegra_adma_init() after the DMA channels have been initialised.
    
    Fixes: f33e7bb3eb92 ("dmaengine: tegra210-adma: restore channel status")
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7ee5bfb5541b2d8b652f1026c12a5a631d14b8e
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Feb 1 01:47:53 2019 +0100

    driver core: Do not resume suppliers under device_links_write_lock()
    
    [ Upstream commit 5db25c9eb893df8f6b93c1d97b8006d768e1b6f5 ]
    
    It is incorrect to call pm_runtime_get_sync() under
    device_links_write_lock(), because it may end up trying to take
    device_links_read_lock() while resuming the target device and that
    will deadlock in the non-SRCU case, so avoid that by resuming the
    supplier device in device_link_add() before calling
    device_links_write_lock().
    
    Fixes: 21d5c57b3726 ("PM / runtime: Use device links")
    Fixes: baa8809f6097 ("PM / runtime: Optimize the use of device links")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bfd5e35ba3b4c33dd846d521fdf7933a52c8c543
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Oct 12 12:12:28 2018 +0200

    pwm: lpss: Release runtime-pm reference from the driver's remove callback
    
    [ Upstream commit 42885551cedb45961879d2fc3dc3c4dc545cc23e ]
    
    For each pwm output which gets enabled through pwm_lpss_apply(), we do a
    pm_runtime_get_sync().
    
    This commit adds pm_runtime_put() calls to pwm_lpss_remove() to balance
    these when the driver gets removed with some of the outputs still enabled.
    
    Fixes: f080be27d7d9 ("pwm: lpss: Add support for runtime PM")
    Acked-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cedca59fae5834af8445b403c66c9953754375d7
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Thu Jan 16 12:14:40 2020 +0200

    crypto: ccree - fix pm wrongful error reporting
    
    pm_runtime_get_sync() can return 1 as a valid (none error) return
    code. Treat it as such.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit bf3b4bc7bb03a2b0e67078d42a1d43ce05a14b7b
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Sep 29 22:46:01 2019 -0500

    spi: lpspi: fix memory leak in fsl_lpspi_probe
    
    commit 057b8945f78f76d0b04eeb5c27cd9225e5e7ad86 upstream.
    
    In fsl_lpspi_probe an SPI controller is allocated either via
    spi_alloc_slave or spi_alloc_master. In all but one error cases this
    controller is put by going to error handling code. This commit fixes the
    case when pm_runtime_get_sync fails and it should go to the error
    handling path.
    
    Fixes: 944c01a889d9 ("spi: lpspi: enable runtime pm for lpspi")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Link: https://lore.kernel.org/r/20190930034602.1467-1-navid.emamdoost@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27d13da8782aa2c59a3c71c1c31e65c9af72b7fb
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Dec 16 16:40:48 2019 -0800

    w1: omap-hdq: Simplify driver with PM runtime autosuspend
    
    We've had generic code handling module sysconfig and OCP reset registers
    for omap variants for many years now and all the drivers really needs to
    do is just call runtime PM functions.
    
    Looks like the omap-hdq driver got only partially updated over the years
    to use runtime PM, and still has lots of custom PM code left.
    
    We can replace all the custom code for sysconfig, OCP reset, and PM with
    just a few lines of runtime PM autosuspend code.
    
    In order to set the device mode properly when pm_runtime_get_sync() is
    called during probe, we need to also move parsing of "ti,mode" to happen
    earlier before we call pm_runtime_enable().
    
    Since we now disable interrupts lazily in omap_hdq_runtime_suspend(), we
    must remove the call to hdq_disable_interrupt() in omap_w1_read_byte().
    And we must clear irqstatus calling wait_event_timeout() on it, so let's
    add hdq_reset_irqstatus() for that.
    
    Note that the earlier driver specific usage count limit of four seems
    completely artificial and should not be an issue in normal use.
    
    Cc: Adam Ford <aford173@gmail.com>
    Cc: Andrew F. Davis <afd@ti.com>
    Cc: Andreas Kemnade <andreas@kemnade.info>
    Cc: H. Nikolaus Schaller <hns@goldelico.com>
    Cc: Vignesh R <vigneshr@ti.com>
    Tested-by: Andreas Kemnade <andreas@kemnade.info> # gta04
    Tested-by: Adam Ford <aford173@gmail.com> #logicpd-torpedo-37xx-devkit
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20191217004048.46298-1-tony@atomide.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 885199148442f56b880995d703d2ed03b6481a3c
Author: David Engraf <david.engraf@sysgo.com>
Date:   Mon Dec 16 12:18:25 2019 +0100

    PCI: tegra: Fix return value check of pm_runtime_get_sync()
    
    pm_runtime_get_sync() returns the device's usage counter. This might
    be >0 if the device is already powered up or CONFIG_PM is disabled.
    
    Abort probe function on real error only.
    
    Fixes: da76ba50963b ("PCI: tegra: Add power management support")
    Link: https://lore.kernel.org/r/20191216111825.28136-1-david.engraf@sysgo.com
    Signed-off-by: David Engraf <david.engraf@sysgo.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Andrew Murray <andrew.murray@arm.com>
    Cc: stable@vger.kernel.org      # v4.17+

commit 50d31037e430791a517d74631a28dc5e218242d2
Merge: 17aa23ee7234 4ac0ac847f05
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Jan 6 13:54:55 2020 -0800

    Merge branch 'ethtool-allow-nesting-of-begin-and-complete-callbacks'
    
    Michal Kubecek says:
    
    ====================
    ethtool: allow nesting of begin() and complete() callbacks
    
    The ethtool ioctl interface used to guarantee that ethtool_ops callbacks
    were always called in a block between calls to ->begin() and ->complete()
    (if these are defined) and that this whole block was executed with RTNL
    lock held:
    
            rtnl_lock();
            ops->begin();
            /* other ethtool_ops calls */
            ops->complete();
            rtnl_unlock();
    
    This prevented any nesting or crossing of the begin-complete blocks.
    However, this is no longer guaranteed even for ioctl interface as at least
    ethtool_phys_id() releases RTNL lock while waiting for a timer. With the
    introduction of netlink ethtool interface, the begin-complete pairs are
    naturally nested e.g. when a request triggers a netlink notification.
    
    Fortunately, only minority of networking drivers implements begin() and
    complete() callbacks and most of those that do, fall into three groups:
    
      - wrappers for pm_runtime_get_sync() and pm_runtime_put()
      - wrappers for clk_prepare_enable() and clk_disable_unprepare()
      - begin() checks netif_running() (fails if false), no complete()
    
    First two have their own refcounting, third is safe w.r.t. nesting of the
    blocks.
    
    Only three in-tree networking drivers need an update to deal with nesting
    of begin() and complete() calls: via-velocity and epic100 perform resume
    and suspend on their own and wil6210 completely serializes the calls using
    its own mutex (which would lead to a deadlock if a request request
    triggered a netlink notification). The series addresses these problems.
    
    changes between v1 and v2:
      - fix inverted condition in epic100 ethtool_begin() (thanks to Andrew
        Lunn)
    ====================
    
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 982d424239d7fae74938557428d45c717567ea9b
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Nov 20 09:25:13 2019 +0800

    net: fec: fix clock count mis-match
    
    commit a31eda65ba210741b598044d045480494d0ed52a upstream.
    
    pm_runtime_put_autosuspend in probe will call runtime suspend to
    disable clks automatically if CONFIG_PM is defined. (If CONFIG_PM
    is not defined, its implementation will be empty, then runtime
    suspend will not be called.)
    
    Therefore, we can call pm_runtime_get_sync to runtime resume it
    first to enable clks, which matches the runtime suspend. (Only when
    CONFIG_PM is defined, otherwise pm_runtime_get_sync will also be
    empty, then runtime resume will not be called.)
    
    Then it is fine to disable clks without causing clock count mis-match.
    
    Fixes: c43eab3eddb4 ("net: fec: add missed clk_disable_unprepare in remove")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Acked-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d961a58dcc9778948502847303d29d018a49710a
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Nov 20 09:25:13 2019 +0800

    net: fec: fix clock count mis-match
    
    commit a31eda65ba210741b598044d045480494d0ed52a upstream.
    
    pm_runtime_put_autosuspend in probe will call runtime suspend to
    disable clks automatically if CONFIG_PM is defined. (If CONFIG_PM
    is not defined, its implementation will be empty, then runtime
    suspend will not be called.)
    
    Therefore, we can call pm_runtime_get_sync to runtime resume it
    first to enable clks, which matches the runtime suspend. (Only when
    CONFIG_PM is defined, otherwise pm_runtime_get_sync will also be
    empty, then runtime resume will not be called.)
    
    Then it is fine to disable clks without causing clock count mis-match.
    
    Fixes: c43eab3eddb4 ("net: fec: add missed clk_disable_unprepare in remove")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Acked-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04748841f7a02ec6ff07fadfc5d1f8e24e61946d
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Nov 20 09:25:13 2019 +0800

    net: fec: fix clock count mis-match
    
    commit a31eda65ba210741b598044d045480494d0ed52a upstream.
    
    pm_runtime_put_autosuspend in probe will call runtime suspend to
    disable clks automatically if CONFIG_PM is defined. (If CONFIG_PM
    is not defined, its implementation will be empty, then runtime
    suspend will not be called.)
    
    Therefore, we can call pm_runtime_get_sync to runtime resume it
    first to enable clks, which matches the runtime suspend. (Only when
    CONFIG_PM is defined, otherwise pm_runtime_get_sync will also be
    empty, then runtime resume will not be called.)
    
    Then it is fine to disable clks without causing clock count mis-match.
    
    Fixes: c43eab3eddb4 ("net: fec: add missed clk_disable_unprepare in remove")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Acked-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9510194763e08f9823e1340e52ad3d9b44864f8e
Author: Hugues Fruchet <hugues.fruchet@st.com>
Date:   Thu Feb 28 12:09:17 2019 -0500

    media: stm32-dcmi: fix check of pm_runtime_get_sync return value
    
    commit ab41b99e7e55c85f29ff7b54718ccbbe051905e7 upstream.
    
    Start streaming was sometimes failing because of pm_runtime_get_sync()
    non-0 return value. In fact return value was not an error but a
    positive value (1), indicating that PM was already enabled.
    Fix this by going to error path only with negative return value.
    
    Signed-off-by: Hugues Fruchet <hugues.fruchet@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9c7531fb4708eb3f22cccdb0b7371834d37555a
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Nov 20 09:25:13 2019 +0800

    net: fec: fix clock count mis-match
    
    commit a31eda65ba210741b598044d045480494d0ed52a upstream.
    
    pm_runtime_put_autosuspend in probe will call runtime suspend to
    disable clks automatically if CONFIG_PM is defined. (If CONFIG_PM
    is not defined, its implementation will be empty, then runtime
    suspend will not be called.)
    
    Therefore, we can call pm_runtime_get_sync to runtime resume it
    first to enable clks, which matches the runtime suspend. (Only when
    CONFIG_PM is defined, otherwise pm_runtime_get_sync will also be
    empty, then runtime resume will not be called.)
    
    Then it is fine to disable clks without causing clock count mis-match.
    
    Fixes: c43eab3eddb4 ("net: fec: add missed clk_disable_unprepare in remove")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Acked-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0623749e14dded79af478f2d5edef8e49071d9e0
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Sat Sep 22 11:44:05 2018 +0200

    phy: phy-twl4030-usb: fix denied runtime access
    
    [ Upstream commit 6c7103aa026094a4ee2c2708ec6977a6dfc5331d ]
    
    When runtime is not enabled, pm_runtime_get_sync() returns -EACCESS,
    the counter will be incremented but the resume callback not called,
    so enumeration and charging will not start properly.
    To avoid that happen, disable irq on suspend and recheck on resume.
    
    Practically this happens when the device is woken up from suspend by
    plugging in usb.
    
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9c11660389cb31899afdde1325107ccccf9e97e
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Sat Sep 22 11:44:05 2018 +0200

    phy: phy-twl4030-usb: fix denied runtime access
    
    [ Upstream commit 6c7103aa026094a4ee2c2708ec6977a6dfc5331d ]
    
    When runtime is not enabled, pm_runtime_get_sync() returns -EACCESS,
    the counter will be incremented but the resume callback not called,
    so enumeration and charging will not start properly.
    To avoid that happen, disable irq on suspend and recheck on resume.
    
    Practically this happens when the device is woken up from suspend by
    plugging in usb.
    
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 16f9d73aae71b29157f9ccd6623e6bccbab70c95
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Sat Sep 22 11:44:05 2018 +0200

    phy: phy-twl4030-usb: fix denied runtime access
    
    [ Upstream commit 6c7103aa026094a4ee2c2708ec6977a6dfc5331d ]
    
    When runtime is not enabled, pm_runtime_get_sync() returns -EACCESS,
    the counter will be incremented but the resume callback not called,
    so enumeration and charging will not start properly.
    To avoid that happen, disable irq on suspend and recheck on resume.
    
    Practically this happens when the device is woken up from suspend by
    plugging in usb.
    
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a31eda65ba210741b598044d045480494d0ed52a
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Nov 20 09:25:13 2019 +0800

    net: fec: fix clock count mis-match
    
    pm_runtime_put_autosuspend in probe will call runtime suspend to
    disable clks automatically if CONFIG_PM is defined. (If CONFIG_PM
    is not defined, its implementation will be empty, then runtime
    suspend will not be called.)
    
    Therefore, we can call pm_runtime_get_sync to runtime resume it
    first to enable clks, which matches the runtime suspend. (Only when
    CONFIG_PM is defined, otherwise pm_runtime_get_sync will also be
    empty, then runtime resume will not be called.)
    
    Then it is fine to disable clks without causing clock count mis-match.
    
    Fixes: c43eab3eddb4 ("net: fec: add missed clk_disable_unprepare in remove")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Acked-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ca765a8cfe0c78bfa47b9d67121f4e342d4b4512
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Wed Oct 16 15:16:03 2019 +0200

    PM / Domains: Introduce dev_pm_domain_start()
    
    For a subsystem/driver that either doesn't support runtime PM or makes use
    of pm_runtime_set_active() during ->probe(), may try to access its device
    when probing, even if it may not be fully powered on from the PM domain's
    point of view. This may be the case when the used PM domain is a genpd
    provider, that implements genpd's ->start|stop() device callbacks.
    
    There are cases where the subsystem/driver managed to avoid the above
    problem, simply by calling pm_runtime_enable() and pm_runtime_get_sync()
    during ->probe(). However, this approach comes with a drawback, especially
    if the subsystem/driver implements a ->runtime_resume() callback.
    
    More precisely, the subsystem/driver then needs to use a device flag, which
    is checked in its ->runtime_resume() callback, as to avoid powering on its
    resources the first time the callback is invoked. This is needed because
    the subsystem/driver has already powered on the resources for the device,
    during ->probe() and before it called pm_runtime_get_sync().
    
    In a way to avoid this boilerplate code and the inefficient check for "if
    (first_time_suspend)" in the ->runtime_resume() callback for these
    subsystems/drivers, let's introduce and export a dev_pm_domain_start()
    function, that may be called during ->probe() instead.
    
    Moreover, let the dev_pm_domain_start() invoke an optional ->start()
    callback, added to the struct dev_pm_domain, as to allow a PM domain
    specific implementation.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit a7023819404ac9bd2bb311a4fafd38515cfa71ec
Author: Alexander Duyck <alexander.h.duyck@linux.intel.com>
Date:   Fri Oct 11 08:34:52 2019 -0700

    e1000e: Use rtnl_lock to prevent race conditions between net and pci/pm
    
    This patch is meant to address possible race conditions that can exist
    between network configuration and power management. A similar issue was
    fixed for igb in commit 9474933caf21 ("igb: close/suspend race in
    netif_device_detach").
    
    In addition it consolidates the code so that the PCI error handling code
    will essentially perform the power management freeze on the device prior to
    attempting a reset, and will thaw the device afterwards if that is what it
    is planning to do. Otherwise when we call close on the interface it should
    see it is detached and not attempt to call the logic to down the interface
    and free the IRQs again.
    
    From what I can tell the check that was adding the check for __E1000_DOWN
    in e1000e_close was added when runtime power management was added. However
    it should not be relevant for us as we perform a call to
    pm_runtime_get_sync before we call e1000_down/free_irq so it should always
    be back up before we call into this anyway.
    
    Reported-by: Morumuri Srivalli <smorumu1@in.ibm.com>
    Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Tested-by: David Dai <zdai@linux.vnet.ibm.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>

commit fc0372ac6a38ba8328c81f2c70a499a8956b5b14
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Aug 20 16:00:21 2019 -0400

    HID: logitech: Fix general protection fault caused by Logitech driver
    
    commit 5f9242775bb61f390f0885f23fc16397262c7538 upstream.
    
    The syzbot fuzzer found a general protection fault in the HID subsystem:
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN
    CPU: 0 PID: 3715 Comm: syz-executor.3 Not tainted 5.2.0-rc6+ #15
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    RIP: 0010:__pm_runtime_resume+0x49/0x180 drivers/base/power/runtime.c:1069
    Code: ed 74 d5 fe 45 85 ed 0f 85 9a 00 00 00 e8 6f 73 d5 fe 48 8d bd c1 02
    00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 48
    89 fa 83 e2 07 38 d0 7f 08 84 c0 0f 85 fe 00 00 00
    RSP: 0018:ffff8881d99d78e0 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000020 RCX: ffffc90003f3f000
    RDX: 0000000416d8686d RSI: ffffffff82676841 RDI: 00000020b6c3436a
    RBP: 00000020b6c340a9 R08: ffff8881c6d64800 R09: fffffbfff0e84c25
    R10: ffff8881d99d7940 R11: ffffffff87426127 R12: 0000000000000004
    R13: 0000000000000000 R14: ffff8881d9b94000 R15: ffffffff897f9048
    FS:  00007f047f542700(0000) GS:ffff8881db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b30f21000 CR3: 00000001ca032000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
      pm_runtime_get_sync include/linux/pm_runtime.h:226 [inline]
      usb_autopm_get_interface+0x1b/0x50 drivers/usb/core/driver.c:1707
      usbhid_power+0x7c/0xe0 drivers/hid/usbhid/hid-core.c:1234
      hid_hw_power include/linux/hid.h:1038 [inline]
      hidraw_open+0x20d/0x740 drivers/hid/hidraw.c:282
      chrdev_open+0x219/0x5c0 fs/char_dev.c:413
      do_dentry_open+0x497/0x1040 fs/open.c:778
      do_last fs/namei.c:3416 [inline]
      path_openat+0x1430/0x3ff0 fs/namei.c:3533
      do_filp_open+0x1a1/0x280 fs/namei.c:3563
      do_sys_open+0x3c0/0x580 fs/open.c:1070
      do_syscall_64+0xb7/0x560 arch/x86/entry/common.c:301
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    It turns out the fault was caused by a bug in the HID Logitech driver,
    which violates the requirement that every pathway calling
    hid_hw_start() must also call hid_hw_stop().  This patch fixes the bug
    by making sure the requirement is met.
    
    Reported-and-tested-by: syzbot+3cbe5cd105d2ad56a1df@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1336cc7ed60a2964071aa03f2a441da41af9e417
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Aug 20 16:00:21 2019 -0400

    HID: logitech: Fix general protection fault caused by Logitech driver
    
    commit 5f9242775bb61f390f0885f23fc16397262c7538 upstream.
    
    The syzbot fuzzer found a general protection fault in the HID subsystem:
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN
    CPU: 0 PID: 3715 Comm: syz-executor.3 Not tainted 5.2.0-rc6+ #15
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    RIP: 0010:__pm_runtime_resume+0x49/0x180 drivers/base/power/runtime.c:1069
    Code: ed 74 d5 fe 45 85 ed 0f 85 9a 00 00 00 e8 6f 73 d5 fe 48 8d bd c1 02
    00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 48
    89 fa 83 e2 07 38 d0 7f 08 84 c0 0f 85 fe 00 00 00
    RSP: 0018:ffff8881d99d78e0 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000020 RCX: ffffc90003f3f000
    RDX: 0000000416d8686d RSI: ffffffff82676841 RDI: 00000020b6c3436a
    RBP: 00000020b6c340a9 R08: ffff8881c6d64800 R09: fffffbfff0e84c25
    R10: ffff8881d99d7940 R11: ffffffff87426127 R12: 0000000000000004
    R13: 0000000000000000 R14: ffff8881d9b94000 R15: ffffffff897f9048
    FS:  00007f047f542700(0000) GS:ffff8881db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b30f21000 CR3: 00000001ca032000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
      pm_runtime_get_sync include/linux/pm_runtime.h:226 [inline]
      usb_autopm_get_interface+0x1b/0x50 drivers/usb/core/driver.c:1707
      usbhid_power+0x7c/0xe0 drivers/hid/usbhid/hid-core.c:1234
      hid_hw_power include/linux/hid.h:1038 [inline]
      hidraw_open+0x20d/0x740 drivers/hid/hidraw.c:282
      chrdev_open+0x219/0x5c0 fs/char_dev.c:413
      do_dentry_open+0x497/0x1040 fs/open.c:778
      do_last fs/namei.c:3416 [inline]
      path_openat+0x1430/0x3ff0 fs/namei.c:3533
      do_filp_open+0x1a1/0x280 fs/namei.c:3563
      do_sys_open+0x3c0/0x580 fs/open.c:1070
      do_syscall_64+0xb7/0x560 arch/x86/entry/common.c:301
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    It turns out the fault was caused by a bug in the HID Logitech driver,
    which violates the requirement that every pathway calling
    hid_hw_start() must also call hid_hw_stop().  This patch fixes the bug
    by making sure the requirement is met.
    
    Reported-and-tested-by: syzbot+3cbe5cd105d2ad56a1df@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffc62dc252e1aaf1f93b6449c45bef581da5f066
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Aug 20 16:00:21 2019 -0400

    HID: logitech: Fix general protection fault caused by Logitech driver
    
    commit 5f9242775bb61f390f0885f23fc16397262c7538 upstream.
    
    The syzbot fuzzer found a general protection fault in the HID subsystem:
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN
    CPU: 0 PID: 3715 Comm: syz-executor.3 Not tainted 5.2.0-rc6+ #15
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    RIP: 0010:__pm_runtime_resume+0x49/0x180 drivers/base/power/runtime.c:1069
    Code: ed 74 d5 fe 45 85 ed 0f 85 9a 00 00 00 e8 6f 73 d5 fe 48 8d bd c1 02
    00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 48
    89 fa 83 e2 07 38 d0 7f 08 84 c0 0f 85 fe 00 00 00
    RSP: 0018:ffff8881d99d78e0 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000020 RCX: ffffc90003f3f000
    RDX: 0000000416d8686d RSI: ffffffff82676841 RDI: 00000020b6c3436a
    RBP: 00000020b6c340a9 R08: ffff8881c6d64800 R09: fffffbfff0e84c25
    R10: ffff8881d99d7940 R11: ffffffff87426127 R12: 0000000000000004
    R13: 0000000000000000 R14: ffff8881d9b94000 R15: ffffffff897f9048
    FS:  00007f047f542700(0000) GS:ffff8881db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b30f21000 CR3: 00000001ca032000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
      pm_runtime_get_sync include/linux/pm_runtime.h:226 [inline]
      usb_autopm_get_interface+0x1b/0x50 drivers/usb/core/driver.c:1707
      usbhid_power+0x7c/0xe0 drivers/hid/usbhid/hid-core.c:1234
      hid_hw_power include/linux/hid.h:1038 [inline]
      hidraw_open+0x20d/0x740 drivers/hid/hidraw.c:282
      chrdev_open+0x219/0x5c0 fs/char_dev.c:413
      do_dentry_open+0x497/0x1040 fs/open.c:778
      do_last fs/namei.c:3416 [inline]
      path_openat+0x1430/0x3ff0 fs/namei.c:3533
      do_filp_open+0x1a1/0x280 fs/namei.c:3563
      do_sys_open+0x3c0/0x580 fs/open.c:1070
      do_syscall_64+0xb7/0x560 arch/x86/entry/common.c:301
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    It turns out the fault was caused by a bug in the HID Logitech driver,
    which violates the requirement that every pathway calling
    hid_hw_start() must also call hid_hw_stop().  This patch fixes the bug
    by making sure the requirement is met.
    
    Reported-and-tested-by: syzbot+3cbe5cd105d2ad56a1df@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 057b8945f78f76d0b04eeb5c27cd9225e5e7ad86
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Sep 29 22:46:01 2019 -0500

    spi: lpspi: fix memory leak in fsl_lpspi_probe
    
    In fsl_lpspi_probe an SPI controller is allocated either via
    spi_alloc_slave or spi_alloc_master. In all but one error cases this
    controller is put by going to error handling code. This commit fixes the
    case when pm_runtime_get_sync fails and it should go to the error
    handling path.
    
    Fixes: 944c01a889d9 ("spi: lpspi: enable runtime pm for lpspi")
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Link: https://lore.kernel.org/r/20190930034602.1467-1-navid.emamdoost@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 55c2b2ac27060ffa05c8f4bdd0ee64460bb479de
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Aug 20 16:00:21 2019 -0400

    HID: logitech: Fix general protection fault caused by Logitech driver
    
    commit 5f9242775bb61f390f0885f23fc16397262c7538 upstream.
    
    The syzbot fuzzer found a general protection fault in the HID subsystem:
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN
    CPU: 0 PID: 3715 Comm: syz-executor.3 Not tainted 5.2.0-rc6+ #15
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    RIP: 0010:__pm_runtime_resume+0x49/0x180 drivers/base/power/runtime.c:1069
    Code: ed 74 d5 fe 45 85 ed 0f 85 9a 00 00 00 e8 6f 73 d5 fe 48 8d bd c1 02
    00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 48
    89 fa 83 e2 07 38 d0 7f 08 84 c0 0f 85 fe 00 00 00
    RSP: 0018:ffff8881d99d78e0 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000020 RCX: ffffc90003f3f000
    RDX: 0000000416d8686d RSI: ffffffff82676841 RDI: 00000020b6c3436a
    RBP: 00000020b6c340a9 R08: ffff8881c6d64800 R09: fffffbfff0e84c25
    R10: ffff8881d99d7940 R11: ffffffff87426127 R12: 0000000000000004
    R13: 0000000000000000 R14: ffff8881d9b94000 R15: ffffffff897f9048
    FS:  00007f047f542700(0000) GS:ffff8881db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b30f21000 CR3: 00000001ca032000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
      pm_runtime_get_sync include/linux/pm_runtime.h:226 [inline]
      usb_autopm_get_interface+0x1b/0x50 drivers/usb/core/driver.c:1707
      usbhid_power+0x7c/0xe0 drivers/hid/usbhid/hid-core.c:1234
      hid_hw_power include/linux/hid.h:1038 [inline]
      hidraw_open+0x20d/0x740 drivers/hid/hidraw.c:282
      chrdev_open+0x219/0x5c0 fs/char_dev.c:413
      do_dentry_open+0x497/0x1040 fs/open.c:778
      do_last fs/namei.c:3416 [inline]
      path_openat+0x1430/0x3ff0 fs/namei.c:3533
      do_filp_open+0x1a1/0x280 fs/namei.c:3563
      do_sys_open+0x3c0/0x580 fs/open.c:1070
      do_syscall_64+0xb7/0x560 arch/x86/entry/common.c:301
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    It turns out the fault was caused by a bug in the HID Logitech driver,
    which violates the requirement that every pathway calling
    hid_hw_start() must also call hid_hw_stop().  This patch fixes the bug
    by making sure the requirement is met.
    
    Reported-and-tested-by: syzbot+3cbe5cd105d2ad56a1df@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acc96be807bb2229cdd1589e67558f99ae4db672
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Aug 20 16:00:21 2019 -0400

    HID: logitech: Fix general protection fault caused by Logitech driver
    
    commit 5f9242775bb61f390f0885f23fc16397262c7538 upstream.
    
    The syzbot fuzzer found a general protection fault in the HID subsystem:
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN
    CPU: 0 PID: 3715 Comm: syz-executor.3 Not tainted 5.2.0-rc6+ #15
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    RIP: 0010:__pm_runtime_resume+0x49/0x180 drivers/base/power/runtime.c:1069
    Code: ed 74 d5 fe 45 85 ed 0f 85 9a 00 00 00 e8 6f 73 d5 fe 48 8d bd c1 02
    00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 48
    89 fa 83 e2 07 38 d0 7f 08 84 c0 0f 85 fe 00 00 00
    RSP: 0018:ffff8881d99d78e0 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000020 RCX: ffffc90003f3f000
    RDX: 0000000416d8686d RSI: ffffffff82676841 RDI: 00000020b6c3436a
    RBP: 00000020b6c340a9 R08: ffff8881c6d64800 R09: fffffbfff0e84c25
    R10: ffff8881d99d7940 R11: ffffffff87426127 R12: 0000000000000004
    R13: 0000000000000000 R14: ffff8881d9b94000 R15: ffffffff897f9048
    FS:  00007f047f542700(0000) GS:ffff8881db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b30f21000 CR3: 00000001ca032000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
      pm_runtime_get_sync include/linux/pm_runtime.h:226 [inline]
      usb_autopm_get_interface+0x1b/0x50 drivers/usb/core/driver.c:1707
      usbhid_power+0x7c/0xe0 drivers/hid/usbhid/hid-core.c:1234
      hid_hw_power include/linux/hid.h:1038 [inline]
      hidraw_open+0x20d/0x740 drivers/hid/hidraw.c:282
      chrdev_open+0x219/0x5c0 fs/char_dev.c:413
      do_dentry_open+0x497/0x1040 fs/open.c:778
      do_last fs/namei.c:3416 [inline]
      path_openat+0x1430/0x3ff0 fs/namei.c:3533
      do_filp_open+0x1a1/0x280 fs/namei.c:3563
      do_sys_open+0x3c0/0x580 fs/open.c:1070
      do_syscall_64+0xb7/0x560 arch/x86/entry/common.c:301
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    It turns out the fault was caused by a bug in the HID Logitech driver,
    which violates the requirement that every pathway calling
    hid_hw_start() must also call hid_hw_stop().  This patch fixes the bug
    by making sure the requirement is met.
    
    Reported-and-tested-by: syzbot+3cbe5cd105d2ad56a1df@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a89b2b967d8c5cefecb966ddc5caf0a31395d327
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Aug 20 16:00:21 2019 -0400

    HID: logitech: Fix general protection fault caused by Logitech driver
    
    commit 5f9242775bb61f390f0885f23fc16397262c7538 upstream.
    
    The syzbot fuzzer found a general protection fault in the HID subsystem:
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN
    CPU: 0 PID: 3715 Comm: syz-executor.3 Not tainted 5.2.0-rc6+ #15
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    RIP: 0010:__pm_runtime_resume+0x49/0x180 drivers/base/power/runtime.c:1069
    Code: ed 74 d5 fe 45 85 ed 0f 85 9a 00 00 00 e8 6f 73 d5 fe 48 8d bd c1 02
    00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 48
    89 fa 83 e2 07 38 d0 7f 08 84 c0 0f 85 fe 00 00 00
    RSP: 0018:ffff8881d99d78e0 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000020 RCX: ffffc90003f3f000
    RDX: 0000000416d8686d RSI: ffffffff82676841 RDI: 00000020b6c3436a
    RBP: 00000020b6c340a9 R08: ffff8881c6d64800 R09: fffffbfff0e84c25
    R10: ffff8881d99d7940 R11: ffffffff87426127 R12: 0000000000000004
    R13: 0000000000000000 R14: ffff8881d9b94000 R15: ffffffff897f9048
    FS:  00007f047f542700(0000) GS:ffff8881db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b30f21000 CR3: 00000001ca032000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
      pm_runtime_get_sync include/linux/pm_runtime.h:226 [inline]
      usb_autopm_get_interface+0x1b/0x50 drivers/usb/core/driver.c:1707
      usbhid_power+0x7c/0xe0 drivers/hid/usbhid/hid-core.c:1234
      hid_hw_power include/linux/hid.h:1038 [inline]
      hidraw_open+0x20d/0x740 drivers/hid/hidraw.c:282
      chrdev_open+0x219/0x5c0 fs/char_dev.c:413
      do_dentry_open+0x497/0x1040 fs/open.c:778
      do_last fs/namei.c:3416 [inline]
      path_openat+0x1430/0x3ff0 fs/namei.c:3533
      do_filp_open+0x1a1/0x280 fs/namei.c:3563
      do_sys_open+0x3c0/0x580 fs/open.c:1070
      do_syscall_64+0xb7/0x560 arch/x86/entry/common.c:301
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    It turns out the fault was caused by a bug in the HID Logitech driver,
    which violates the requirement that every pathway calling
    hid_hw_start() must also call hid_hw_stop().  This patch fixes the bug
    by making sure the requirement is met.
    
    Reported-and-tested-by: syzbot+3cbe5cd105d2ad56a1df@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2987155e8f5e741c57a7125619731d9666771cd6
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Mar 12 19:43:31 2019 +0100

    spi: rspi: Fix register initialization while runtime-suspended
    
    commit 42bdaaece121b3bb50fd4d1203d6d0170279f9fa upstream.
    
    The Renesas RSPI/QSPI driver performs SPI controller register
    initialization in its spi_operations.setup() callback, without calling
    pm_runtime_get_sync() first, which may cause spurious failures.
    
    So far this went unnoticed, as this SPI controller is typically used
    with a single SPI NOR FLASH containing the boot loader:
      1. If the device's module clock is still enabled (left enabled by the
         bootloader, and not yet disabled by the clk_disable_unused() late
         initcall), register initialization succeeds,
      2. If the device's module clock is disabled, register writes don't
         seem to cause lock-ups or crashes.
         Data received in the first SPI message may be corrupted, though.
         Subsequent SPI messages seem to be OK.
         E.g. on r8a7791/koelsch, one bit is lost while receiving the 6th
         byte of the JEDEC ID for the s25fl512s FLASH, corrupting that byte
         and all later bytes.  But until commit a2126b0a010905e5 ("mtd:
         spi-nor: refine Spansion S25FL512S ID"), the 6th byte was not
         considered for FLASH identification.
    
    Fix this by moving all initialization from the .setup() to the
    .prepare_message() callback.  The latter is always called after the
    device has been runtime-resumed by the SPI core.
    
    This also makes the driver follow the rule that .setup() must not change
    global driver state or register values, as that might break a transfer
    in progress.
    
    Fixes: 490c97747d5dc77d ("spi: rspi: Add runtime PM support, using spi core auto_runtime_pm")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [bwh: Backported to 3.16: s/(controller|ctlr)/master/g]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f5e9862fedd0e4e35dc8dd8b49fbb1fd31e6f2bc
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Sep 13 11:19:26 2019 +0200

    mmc: tmio: Fixup runtime PM management during probe
    
    commit aa86f1a3887523d78bfadd1c4e4df8f919336511 upstream.
    
    The tmio_mmc_host_probe() calls pm_runtime_set_active() to update the
    runtime PM status of the device, as to make it reflect the current status
    of the HW. This works fine for most cases, but unfortunate not for all.
    Especially, there is a generic problem when the device has a genpd attached
    and that genpd have the ->start|stop() callbacks assigned.
    
    More precisely, if the driver calls pm_runtime_set_active() during
    ->probe(), genpd does not get to invoke the ->start() callback for it,
    which means the HW isn't really fully powered on. Furthermore, in the next
    phase, when the device becomes runtime suspended, genpd will invoke the
    ->stop() callback for it, potentially leading to usage count imbalance
    problems, depending on what's implemented behind the callbacks of course.
    
    To fix this problem, convert to call pm_runtime_get_sync() from
    tmio_mmc_host_probe() rather than pm_runtime_set_active(). Additionally, to
    avoid bumping usage counters and unnecessary re-initializing the HW the
    first time the tmio driver's ->runtime_resume() callback is called,
    introduce a state flag to keeping track of this.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be905d0f2330a6bfd5e5acdd849c769f989594d5
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Fri Aug 31 15:55:10 2018 -0700

    PCI: qcom: Fix error handling in runtime PM support
    
    [ Upstream commit 6e5da6f7d82474e94c2d4a38cf9ca4edbb3e03a0 ]
    
    The driver does not cope with the fact that probe can fail in a number
    of cases after enabling runtime PM on the device; this results in
    warnings about "Unbalanced pm_runtime_enable". Furthermore if probe
    fails after invoking qcom_pcie_host_init() the power-domain will be left
    referenced.
    
    As it is not possible for the error handling in qcom_pcie_host_init() to
    handle errors happening after returning from that function the
    pm_runtime_get_sync() is moved to qcom_pcie_probe() as well.
    
    Fixes: 854b69efbdd2 ("PCI: qcom: add runtime pm support to pcie_port")
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    [lorenzo.pieralisi@arm.com: updated commit log]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Stanimir Varbanov <svarbanov@mm-sol.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa86f1a3887523d78bfadd1c4e4df8f919336511
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Sep 13 11:19:26 2019 +0200

    mmc: tmio: Fixup runtime PM management during probe
    
    The tmio_mmc_host_probe() calls pm_runtime_set_active() to update the
    runtime PM status of the device, as to make it reflect the current status
    of the HW. This works fine for most cases, but unfortunate not for all.
    Especially, there is a generic problem when the device has a genpd attached
    and that genpd have the ->start|stop() callbacks assigned.
    
    More precisely, if the driver calls pm_runtime_set_active() during
    ->probe(), genpd does not get to invoke the ->start() callback for it,
    which means the HW isn't really fully powered on. Furthermore, in the next
    phase, when the device becomes runtime suspended, genpd will invoke the
    ->stop() callback for it, potentially leading to usage count imbalance
    problems, depending on what's implemented behind the callbacks of course.
    
    To fix this problem, convert to call pm_runtime_get_sync() from
    tmio_mmc_host_probe() rather than pm_runtime_set_active(). Additionally, to
    avoid bumping usage counters and unnecessary re-initializing the HW the
    first time the tmio driver's ->runtime_resume() callback is called,
    introduce a state flag to keeping track of this.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Tested-by: Geert Uytterhoeven <geert@linux-m68k.org>

commit 635430797d3fccb958e929d3911e39cb9c1ea641
Author: Rob Herring <robh@kernel.org>
Date:   Mon Aug 26 17:33:10 2019 -0500

    drm/panfrost: Rework runtime PM initialization
    
    There's a few issues with the runtime PM initialization.
    
    The documentation states pm_runtime_set_active() should be called before
    pm_runtime_enable(). The pm_runtime_put_autosuspend() could suspend the GPU
    before panfrost_perfcnt_init() is called which touches the h/w. The
    autosuspend delay keeps things from breaking. There's no need explicitly
    power off the GPU only to wake back up with pm_runtime_get_sync(). Just
    delaying pm_runtime_enable to the end of probe is sufficient.
    
    Lets move all the runtime PM calls into the probe() function so they are
    all in one place and are done after all initialization.
    
    Cc: Tomeu Vizoso <tomeu.vizoso@collabora.com>
    Cc: Steven Price <steven.price@arm.com>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Acked-by: Alyssa Rosenzweig <alyssa.rosenzweig@collabora.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Reviewed-by: Steven Price <steven.price@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190826223317.28509-2-robh@kernel.org

commit 5f9242775bb61f390f0885f23fc16397262c7538
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Aug 20 16:00:21 2019 -0400

    HID: logitech: Fix general protection fault caused by Logitech driver
    
    The syzbot fuzzer found a general protection fault in the HID subsystem:
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN
    CPU: 0 PID: 3715 Comm: syz-executor.3 Not tainted 5.2.0-rc6+ #15
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    RIP: 0010:__pm_runtime_resume+0x49/0x180 drivers/base/power/runtime.c:1069
    Code: ed 74 d5 fe 45 85 ed 0f 85 9a 00 00 00 e8 6f 73 d5 fe 48 8d bd c1 02
    00 00 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <0f> b6 04 02 48
    89 fa 83 e2 07 38 d0 7f 08 84 c0 0f 85 fe 00 00 00
    RSP: 0018:ffff8881d99d78e0 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000020 RCX: ffffc90003f3f000
    RDX: 0000000416d8686d RSI: ffffffff82676841 RDI: 00000020b6c3436a
    RBP: 00000020b6c340a9 R08: ffff8881c6d64800 R09: fffffbfff0e84c25
    R10: ffff8881d99d7940 R11: ffffffff87426127 R12: 0000000000000004
    R13: 0000000000000000 R14: ffff8881d9b94000 R15: ffffffff897f9048
    FS:  00007f047f542700(0000) GS:ffff8881db200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b30f21000 CR3: 00000001ca032000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
      pm_runtime_get_sync include/linux/pm_runtime.h:226 [inline]
      usb_autopm_get_interface+0x1b/0x50 drivers/usb/core/driver.c:1707
      usbhid_power+0x7c/0xe0 drivers/hid/usbhid/hid-core.c:1234
      hid_hw_power include/linux/hid.h:1038 [inline]
      hidraw_open+0x20d/0x740 drivers/hid/hidraw.c:282
      chrdev_open+0x219/0x5c0 fs/char_dev.c:413
      do_dentry_open+0x497/0x1040 fs/open.c:778
      do_last fs/namei.c:3416 [inline]
      path_openat+0x1430/0x3ff0 fs/namei.c:3533
      do_filp_open+0x1a1/0x280 fs/namei.c:3563
      do_sys_open+0x3c0/0x580 fs/open.c:1070
      do_syscall_64+0xb7/0x560 arch/x86/entry/common.c:301
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    It turns out the fault was caused by a bug in the HID Logitech driver,
    which violates the requirement that every pathway calling
    hid_hw_start() must also call hid_hw_stop().  This patch fixes the bug
    by making sure the requirement is met.
    
    Reported-and-tested-by: syzbot+3cbe5cd105d2ad56a1df@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 35ab6cfbf21178d4dd93d1fe4cb1416c1d6b566d
Author: Yannick Fertré <yannick.fertre@st.com>
Date:   Mon Jun 3 10:32:02 2019 +0200

    drm/stm: support runtime power management
    
    This patch enables runtime power management (runtime PM) support for
    the display controller. pm_runtime_enable() and pm_runtime_disable()
    are added during ltdc load and unload respectively.
    pm_runtime_get_sync() and pm_runtime_put_sync() are added for ltdc
    register access.
    
    Signed-off-by: Yannick Fertré <yannick.fertre@st.com>
    Acked-by: Philippe Cornu <philippe.cornu@st.com>
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/1559550722-14091-1-git-send-email-yannick.fertre@st.com

commit f3440d9a0da292dc4998d9393162fcfb996fd671
Author: Super Liu <supercjliu@google.com>
Date:   Wed May 22 14:30:14 2019 +0800

    spi: abort spi_sync if failed to prepare_transfer_hardware
    
    There is no chance to wait spi message complete if failed to
    prepare_transfer_hardware(). Therefore, finalize this message and abort
    transfer with corresponding return status to release this block case.
    
    Logs:
    
    [17400.283005] c7   3267 PM: PM: suspend entry 2019-05-04 03:01:14.403097147 UTC
    [17400.283013] c7   3267 PM: suspend entry (deep)
    [17400.283016] c6   3267 PM: Syncing filesystems ... done.
    [17400.584395] c1    753 spi_geni 890000.spi: spi_geni_prepare_transfer_hardware:Error enabling SE resources -13
    [17400.584404] c1    753 spi_master spi1: failed to prepare transfer hardware
    [17400.664611] c4   3267 PM: PM: suspend exit 2019-05-04 03:01:15.235273018 UTC
    
    Flow:
    
    __spi_sync@spi.c
    |    if (status == 0) {
    |        /* Push out the messages in the calling context if we
    |         * can.
    |         */
    |        if (ctlr->transfer == spi_queued_transfer) {
    |            SPI_STATISTICS_INCREMENT_FIELD(&ctlr->statistics,
    |               spi_sync_immediate);
    |            SPI_STATISTICS_INCREMENT_FIELD(&spi->statistics,
    |               spi_sync_immediate);
    |               __spi_pump_messages(ctlr, false);
    |        }
    |
    |        wait_for_completion(&done);    <== stuck here!!!
    |        status = message->status;
    |    }
    |    message->context = NULL;
    |    return status;
    |
    -->     __spi_pump_messages@spi.c
            |    if (!was_busy && ctlr->prepare_transfer_hardware) {
            |        ret = ctlr->prepare_transfer_hardware(ctlr);
            |        if (ret) {
            |            dev_err(&ctlr->dev,
            |               "failed to prepare transfer hardware\n");
            |
            |        if (ctlr->auto_runtime_pm)
            |            pm_runtime_put(ctlr->dev.parent);
            |            mutex_unlock(&ctlr->io_mutex);
            |            return;
            |        }
            |    }
            |
            -->     spi_geni_prepare_transfer_hardware@spi-geni-qcom.c
                    |    ret = pm_runtime_get_sync(mas->dev);
                    |    if (ret < 0) {
                    |        dev_err(mas->dev,
                    |               "%s:Error enabling SE resources %d\n",
                    |               __func__, ret);
                    |    pm_runtime_put_noidle(mas->dev);
                    |    goto exit_prepare_transfer_hardware;
    
    Signed-off-by: Super Liu <supercjliu@google.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 5463eb5c2f758069d1db21ed2cf23339431c9481
Author: Jiaxin Yu <jiaxin.yu@mediatek.com>
Date:   Wed May 22 22:52:04 2019 +0800

    ASoC: Mediatek: MT8183: enable dev runtime suspend and resume
    
    System suspend will power off audio, so we need regcache sync when
    system resume.
    
    Remove pm_runtime_get_sync in dev probe and pm_runtime_put_sync in
    dev remove.So that audio dev can triggle runitme suspend and resume.
    
    Signed-off-by: Jiaxin Yu <jiaxin.yu@mediatek.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit b53611fb1ce9b1786bd18205473e0c1d6bfa8934
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Thu May 16 16:53:52 2019 +0100

    dmaengine: tegra210-adma: Fix crash during probe
    
    Commit f33e7bb3eb92 ("dmaengine: tegra210-adma: restore channel status")
    added support to save and restore the DMA channel registers when runtime
    suspending the ADMA. This change is causing the kernel to crash when
    probing the ADMA, if the device is probed deferred when looking up the
    channel interrupts. The crash occurs because not all of the channel base
    addresses have been setup at this point and in the clean-up path of the
    probe, pm_runtime_suspend() is called invoking its callback which
    expects all the channel base addresses to be initialised.
    
    Although this could be fixed by simply checking for a NULL address, on
    further review of the driver it seems more appropriate that we only call
    pm_runtime_get_sync() after all the channel interrupts and base
    addresses have been configured. Therefore, fix this crash by moving the
    calls to pm_runtime_enable(), pm_runtime_get_sync() and
    tegra_adma_init() after the DMA channels have been initialised.
    
    Fixes: f33e7bb3eb92 ("dmaengine: tegra210-adma: restore channel status")
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 14a2212dd4bcb55a03eddaf66d62068c9cece585
Author: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
Date:   Thu May 9 15:10:24 2019 -0500

    ASoC: SOF: pcm: remove runtime PM calls during pcm open/close
    
    pm_runtime_get_sync()/pm_runtime_put_autosuspend() calls are
    already invoked by the ASoC core in soc_pcm_open() and
    soc_pcm_close(). So the SOF component driver does not need
    to call them again.
    
    Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit d9fb98c921a89a178cfa36c8efcb675493644314
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Feb 28 20:24:59 2019 +0800

    drm/nouveau/debugfs: Fix check of pm_runtime_get_sync failure
    
    [ Upstream commit 909e9c9c428376e2a43d178ed4b0a2d5ba9cb7d3 ]
    
    pm_runtime_get_sync returns negative on failure.
    
    Fixes: eaeb9010bb4b ("drm/nouveau/debugfs: Wake up GPU before doing any reclocking")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bd30e5e0ec594d6200448f0c2b889bd8bd28a5a
Author: Jiada Wang <jiada_wang@mentor.com>
Date:   Tue Mar 12 15:51:28 2019 +0900

    PM / Domains: Avoid a potential deadlock
    
    [ Upstream commit 2071ac985d37efe496782c34318dbead93beb02f ]
    
    Lockdep warns that prepare_lock and genpd->mlock can cause a deadlock
    the deadlock scenario is like following:
    First thread is probing cs2000
    cs2000_probe()
      clk_register()
        __clk_core_init()
          clk_prepare_lock()                            ----> acquires prepare_lock
            cs2000_recalc_rate()
              i2c_smbus_read_byte_data()
                rcar_i2c_master_xfer()
                  dma_request_chan()
                    rcar_dmac_of_xlate()
                      rcar_dmac_alloc_chan_resources()
                        pm_runtime_get_sync()
                          __pm_runtime_resume()
                            rpm_resume()
                              rpm_callback()
                                genpd_runtime_resume()   ----> acquires genpd->mlock
    
    Second thread is attaching any device to the same PM domain
    genpd_add_device()
      genpd_lock()                                       ----> acquires genpd->mlock
        cpg_mssr_attach_dev()
          of_clk_get_from_provider()
            __of_clk_get_from_provider()
              __clk_create_clk()
                clk_prepare_lock()                       ----> acquires prepare_lock
    
    Since currently no PM provider access genpd's critical section
    in .attach_dev, and .detach_dev callbacks, so there is no need to protect
    these two callbacks with genpd->mlock.
    This patch avoids a potential deadlock by moving out .attach_dev and .detach_dev
    from genpd->mlock, so that genpd->mlock won't be held when prepare_lock is acquired
    in .attach_dev and .detach_dev
    
    Signed-off-by: Jiada Wang <jiada_wang@mentor.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 181117a1b4f34aa406ef54b8e65bbb37e4a5703c
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Feb 28 20:24:59 2019 +0800

    drm/nouveau/debugfs: Fix check of pm_runtime_get_sync failure
    
    [ Upstream commit 909e9c9c428376e2a43d178ed4b0a2d5ba9cb7d3 ]
    
    pm_runtime_get_sync returns negative on failure.
    
    Fixes: eaeb9010bb4b ("drm/nouveau/debugfs: Wake up GPU before doing any reclocking")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b63df738ce7d7b93a412d45005dc3d2331c3d1d8
Author: Jiada Wang <jiada_wang@mentor.com>
Date:   Tue Mar 12 15:51:28 2019 +0900

    PM / Domains: Avoid a potential deadlock
    
    [ Upstream commit 2071ac985d37efe496782c34318dbead93beb02f ]
    
    Lockdep warns that prepare_lock and genpd->mlock can cause a deadlock
    the deadlock scenario is like following:
    First thread is probing cs2000
    cs2000_probe()
      clk_register()
        __clk_core_init()
          clk_prepare_lock()                            ----> acquires prepare_lock
            cs2000_recalc_rate()
              i2c_smbus_read_byte_data()
                rcar_i2c_master_xfer()
                  dma_request_chan()
                    rcar_dmac_of_xlate()
                      rcar_dmac_alloc_chan_resources()
                        pm_runtime_get_sync()
                          __pm_runtime_resume()
                            rpm_resume()
                              rpm_callback()
                                genpd_runtime_resume()   ----> acquires genpd->mlock
    
    Second thread is attaching any device to the same PM domain
    genpd_add_device()
      genpd_lock()                                       ----> acquires genpd->mlock
        cpg_mssr_attach_dev()
          of_clk_get_from_provider()
            __of_clk_get_from_provider()
              __clk_create_clk()
                clk_prepare_lock()                       ----> acquires prepare_lock
    
    Since currently no PM provider access genpd's critical section
    in .attach_dev, and .detach_dev callbacks, so there is no need to protect
    these two callbacks with genpd->mlock.
    This patch avoids a potential deadlock by moving out .attach_dev and .detach_dev
    from genpd->mlock, so that genpd->mlock won't be held when prepare_lock is acquired
    in .attach_dev and .detach_dev
    
    Signed-off-by: Jiada Wang <jiada_wang@mentor.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19525f7b031f1018a74ed3760b81a4f0f3940fa3
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Feb 28 20:24:59 2019 +0800

    drm/nouveau/debugfs: Fix check of pm_runtime_get_sync failure
    
    [ Upstream commit 909e9c9c428376e2a43d178ed4b0a2d5ba9cb7d3 ]
    
    pm_runtime_get_sync returns negative on failure.
    
    Fixes: eaeb9010bb4b ("drm/nouveau/debugfs: Wake up GPU before doing any reclocking")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4df614c4ab18ba14892dfa82b88c28203096e951
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Fri Apr 5 16:38:31 2019 +0530

    phy: core: Invoke pm_runtime_get_*/pm_runtime_put_* before invoking reset callback
    
    PHY drivers may try to access PHY registers in the ->reset() callback.
    Invoke phy_pm_runtime_get_sync() before invoking the ->reset() callback
    so that the PHY drivers don't have to enable clocks by themselves before
    accessing PHY registers.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>

commit 3c77ff8f8bae4d328de662b26921bc4da1d293f1
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Sun Mar 24 18:16:02 2019 -0500

    drm/v3d: fix a missing check of pm_runtime_get_sync
    
    pm_runtime_get_sync could fail and thus deserves a check.
    
    The patch adds such a check and return its error code upstream
    if it indeed failed.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190324231602.2436-1-kjlu@umn.edu
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>

commit cb74f6ee8e3a00e85d53697d5d84ec21d416e5ef
Author: Eric Anholt <eric@anholt.net>
Date:   Wed Feb 20 13:03:42 2019 -0800

    drm/vc4: Add helpers for pm get/put.
    
    This makes sure the vc4_reset doesn't hit an obscure race with the
    GET_PARAM ioctl, fixes a decrement outside of the lock, and prevents
    future code from making mistakes with the weird return value of
    pm_runtime_get_sync().
    
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190220210343.28157-6-eric@anholt.net
    Reviewed-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>

commit fd1f297b794c77e52412dc621b5884210291eeee
Merge: d92da1fbb724 8e078788b57d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 21 20:40:05 2019 -0700

    Merge tag 'drm-fixes-2019-03-22' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "i915, amdgpu, vmwgfx, exynos, nouveau and udl fixes.
    
      Seems to be lots of little minor ones for regressions in rc1, and some
      cleanups. The exynos one is the largest one, and is for a hw
      difference between exynos versions"
    
    * tag 'drm-fixes-2019-03-22' of git://anongit.freedesktop.org/drm/drm:
      drm/nouveau/dmem: empty chunk do not have a buffer object associated with them.
      drm/nouveau/debugfs: Fix check of pm_runtime_get_sync failure
      drm/nouveau/dmem: Fix a NULL vs IS_ERR() check
      drm/nouveau/dmem: remove set but not used variable 'drm'
      drm/exynos/mixer: fix MIXER shadow registry synchronisation code
      drm/vmwgfx: Don't double-free the mode stored in par->set_mode
      drm/vmwgfx: Return 0 when gmrid::get_node runs out of ID's
      drm/amdgpu: fix invalid use of change_bit
      drm/amdgpu: revert "cleanup setting bulk_movable"
      drm/i915: Sanity check mmap length against object size
      drm/i915: Fix off-by-one in reporting hanging process
      drm/i915/bios: assume eDP is present on port A when there is no VBT
      drm/udl: use drm_gem_object_put_unlocked.

commit 909e9c9c428376e2a43d178ed4b0a2d5ba9cb7d3
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Feb 28 20:24:59 2019 +0800

    drm/nouveau/debugfs: Fix check of pm_runtime_get_sync failure
    
    pm_runtime_get_sync returns negative on failure.
    
    Fixes: eaeb9010bb4b ("drm/nouveau/debugfs: Wake up GPU before doing any reclocking")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 2071ac985d37efe496782c34318dbead93beb02f
Author: Jiada Wang <jiada_wang@mentor.com>
Date:   Tue Mar 12 15:51:28 2019 +0900

    PM / Domains: Avoid a potential deadlock
    
    Lockdep warns that prepare_lock and genpd->mlock can cause a deadlock
    the deadlock scenario is like following:
    First thread is probing cs2000
    cs2000_probe()
      clk_register()
        __clk_core_init()
          clk_prepare_lock()                            ----> acquires prepare_lock
            cs2000_recalc_rate()
              i2c_smbus_read_byte_data()
                rcar_i2c_master_xfer()
                  dma_request_chan()
                    rcar_dmac_of_xlate()
                      rcar_dmac_alloc_chan_resources()
                        pm_runtime_get_sync()
                          __pm_runtime_resume()
                            rpm_resume()
                              rpm_callback()
                                genpd_runtime_resume()   ----> acquires genpd->mlock
    
    Second thread is attaching any device to the same PM domain
    genpd_add_device()
      genpd_lock()                                       ----> acquires genpd->mlock
        cpg_mssr_attach_dev()
          of_clk_get_from_provider()
            __of_clk_get_from_provider()
              __clk_create_clk()
                clk_prepare_lock()                       ----> acquires prepare_lock
    
    Since currently no PM provider access genpd's critical section
    in .attach_dev, and .detach_dev callbacks, so there is no need to protect
    these two callbacks with genpd->mlock.
    This patch avoids a potential deadlock by moving out .attach_dev and .detach_dev
    from genpd->mlock, so that genpd->mlock won't be held when prepare_lock is acquired
    in .attach_dev and .detach_dev
    
    Signed-off-by: Jiada Wang <jiada_wang@mentor.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit ab41b99e7e55c85f29ff7b54718ccbbe051905e7
Author: Hugues Fruchet <hugues.fruchet@st.com>
Date:   Thu Feb 28 12:09:17 2019 -0500

    media: stm32-dcmi: fix check of pm_runtime_get_sync return value
    
    Start streaming was sometimes failing because of pm_runtime_get_sync()
    non-0 return value. In fact return value was not an error but a
    positive value (1), indicating that PM was already enabled.
    Fix this by going to error path only with negative return value.
    
    Signed-off-by: Hugues Fruchet <hugues.fruchet@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit 42bdaaece121b3bb50fd4d1203d6d0170279f9fa
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Mar 12 19:43:31 2019 +0100

    spi: rspi: Fix register initialization while runtime-suspended
    
    The Renesas RSPI/QSPI driver performs SPI controller register
    initialization in its spi_operations.setup() callback, without calling
    pm_runtime_get_sync() first, which may cause spurious failures.
    
    So far this went unnoticed, as this SPI controller is typically used
    with a single SPI NOR FLASH containing the boot loader:
      1. If the device's module clock is still enabled (left enabled by the
         bootloader, and not yet disabled by the clk_disable_unused() late
         initcall), register initialization succeeds,
      2. If the device's module clock is disabled, register writes don't
         seem to cause lock-ups or crashes.
         Data received in the first SPI message may be corrupted, though.
         Subsequent SPI messages seem to be OK.
         E.g. on r8a7791/koelsch, one bit is lost while receiving the 6th
         byte of the JEDEC ID for the s25fl512s FLASH, corrupting that byte
         and all later bytes.  But until commit a2126b0a010905e5 ("mtd:
         spi-nor: refine Spansion S25FL512S ID"), the 6th byte was not
         considered for FLASH identification.
    
    Fix this by moving all initialization from the .setup() to the
    .prepare_message() callback.  The latter is always called after the
    device has been runtime-resumed by the SPI core.
    
    This also makes the driver follow the rule that .setup() must not change
    global driver state or register values, as that might break a transfer
    in progress.
    
    Fixes: 490c97747d5dc77d ("spi: rspi: Add runtime PM support, using spi core auto_runtime_pm")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 5db25c9eb893df8f6b93c1d97b8006d768e1b6f5
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Feb 1 01:47:53 2019 +0100

    driver core: Do not resume suppliers under device_links_write_lock()
    
    It is incorrect to call pm_runtime_get_sync() under
    device_links_write_lock(), because it may end up trying to take
    device_links_read_lock() while resuming the target device and that
    will deadlock in the non-SRCU case, so avoid that by resuming the
    supplier device in device_link_add() before calling
    device_links_write_lock().
    
    Fixes: 21d5c57b3726 ("PM / runtime: Use device links")
    Fixes: baa8809f6097 ("PM / runtime: Optimize the use of device links")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f7e94e6d66b52bb6a86b7e06f5f2453491bf7c8
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Tue Jan 22 13:03:16 2019 +0530

    ALSA: hda/tegra: runtime power management support
    
    This patch enables runtime power management(runtime PM) support for
    hda. pm_runtime_enable() and pm_runtime_disable() are added during
    device probe and remove respectively. The runtime PM callbacks will
    be forbidden if hda controller does not have support for runtime PM.
    pm_runtime_get_sync() and pm_runtime_put() are added for hda register
    access. The callbacks for above will be added in subsequent patches.
    
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Reviewed-by: Ravindra Lokhande <rlokhande@nvidia.com>
    Reviewed-by: Mohan Kumar D <mkumard@nvidia.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 58ba566ccbae0ec629ab9e36006d1b79765fe252
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sat Jan 19 22:06:25 2019 +0100

    r8169: reset chip synchronously in __rtl8169_resume
    
    Triggering an asynchronous reset is problematic for the following
    reasons, therefore reset the chip synchronously.
    
    - The reset routine resets registers and parameters behind our back
      what may collide with code executed after triggering the reset.
    
    - __rtl8169_resume() is called as part of pm_runtime_get_sync() and
      callers expect that the chip is fully resumed afterwards.
    
    In context of this driver triggering an asynchonous reset should be
    considered an emergency procedure.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 323aeb0eb5d9a6820130dfab1214a83edf385dcd
Author: Nicolin Chen <nicoleotsuka@gmail.com>
Date:   Mon Nov 5 12:48:43 2018 -0800

    hwmon: (ina3221) Add PM runtime support
    
    If all three channels are disabled via in[123]_enable ABI,
    the driver could suspend the chip for power saving purpose.
    
    So this patch adds the PM runtime support in order to gain
    more power control than system suspend and resume use case.
    
    For PM runtime, there are a few related changes happening:
    1) Added a new pm_dev device pointer for all the PM runtime
       callbacks. This is because hwmon core registers a child
       device for each hwmon driver and passes it back to each
       driver. So there might be a mismatch between two device
       pointers in the driver if mixing using them.
    2) Added a check in ina3221_is_enabled() to make sure that
       the chip is resumed.
    3) Bypassed the unchanged status in ina3221_write_enable()
       in order to keep the PM runtime refcount being matched.
    4) Removed the reset routine in the probe() by calling the
       resume() via pm_runtime_get_sync() instead, as they're
       similar. It's also necessary to do so to match initial
       PM refcount with the number of enabled channels.
    
    Signed-off-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

commit 2ad2af0816221ac9ce9d5c8b979868b58a696c40
Author: Tony Lindgren <tony@atomide.com>
Date:   Sun Dec 2 15:51:35 2018 -0800

    phy: mapphone-mdm6600: Improve phy related runtime PM calls
    
    I noticed that phy_pm_runtime_get_sync() and phy_pm_runtime_put() are not
    currently doing anything for phy-mapphone-mdm6600, only the sysfs interface
    for works for "auto" and "on".
    
    This is because of the shared GPIO pins between mdm6600 USB port and n_gsm
    port. We have not enabled runtime PM for the phy driver until after we've
    booted up mdm6600 properly to the USB mode. Otherwise phy_create() would
    have called pm_runtime_enable() and pm_runtime_no_callbacks() automatically
    on init.
    
    Let's fix this by registering the phy a bit later after we've powered up
    the mdm6600 USB port.
    
    And as the PM runtime support is only needed for the n_gsm mode and not for
    USB, we can allow the device to idle between phy_mdm6600_power_on() and
    phy_mdm6600_power_off(). Note that for suspend, runtime_pm is already
    disabled for the phy so we need to check for pm_runtime_enabled().
    
    Cc: Johan Hovold <jhovold@gmail.com>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>

commit 8c028ed9a2030509cef39512e9cf82f53536d155
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Jan 15 14:45:10 2015 -0800

    net: davinci_emac: Fix runtime pm calls for davinci_emac
    
    commit b5133e7a988b2cf8e1cd2b23231f36aff35ceffc upstream.
    
    Commit 3ba97381343b ("net: ethernet: davinci_emac: add pm_runtime support")
    added support for runtime PM, but it causes issues on omap3 related devices
    that actually gate the clocks:
    
    Unhandled fault: external abort on non-linefetch (0x1008)
    ...
    [<c04160f0>] (emac_dev_getnetstats) from [<c04d6a3c>] (dev_get_stats+0x78/0xc8)
    [<c04d6a3c>] (dev_get_stats) from [<c04e9ccc>] (rtnl_fill_ifinfo+0x3b8/0x938)
    [<c04e9ccc>] (rtnl_fill_ifinfo) from [<c04eade4>] (rtmsg_ifinfo+0x68/0xd8)
    [<c04eade4>] (rtmsg_ifinfo) from [<c04dd35c>] (register_netdevice+0x3a0/0x4ec)
    [<c04dd35c>] (register_netdevice) from [<c04dd4bc>] (register_netdev+0x14/0x24)
    [<c04dd4bc>] (register_netdev) from [<c041755c>] (davinci_emac_probe+0x408/0x5c8)
    [<c041755c>] (davinci_emac_probe) from [<c0396d78>] (platform_drv_probe+0x48/0xa4)
    
    Let's fix it by moving the pm_runtime_get() call earlier, and also add it to
    the emac_dev_getnetstats(). Also note that we want to use pm_runtime_get_sync()
    as we don't want to have deferred_resume happen. And let's also check the
    return value for pm_runtime_get_sync() as noted by Felipe Balbi <balbi@ti.com>.
    
    Cc: Brian Hutchinson <b.hutchman@gmail.com>
    Acked-by: Mark A. Greer <mgreer@animalcreek.com>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 42885551cedb45961879d2fc3dc3c4dc545cc23e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Oct 12 12:12:28 2018 +0200

    pwm: lpss: Release runtime-pm reference from the driver's remove callback
    
    For each pwm output which gets enabled through pwm_lpss_apply(), we do a
    pm_runtime_get_sync().
    
    This commit adds pm_runtime_put() calls to pwm_lpss_remove() to balance
    these when the driver gets removed with some of the outputs still enabled.
    
    Fixes: f080be27d7d9 ("pwm: lpss: Add support for runtime PM")
    Acked-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>

commit 9a9ede3f719379c4edc7dcc60b00f44db77b9b74
Author: Bruce Wang <bzwang@chromium.org>
Date:   Wed Sep 26 17:28:59 2018 -0400

    drm/msm/dpu: Remove _dpu_crtc_power_enable
    
    All checks for _dpu_crtc_power_enable are not true, so the function
    can never return an error code. This removes the need for the
    function as pm_runtime functions can be used instead.
    
    v3: Separated _dpu_crtc_power_enable into _dpu_crtc_power_enable and
    _dpu_crtc_power_disable for clarity.
    
    v4: Removed both _dpu_crtc_power_enable and _dpu_crtc_power_disable
    and called pm_runtime_get_sync and pm_runtime_put_sync from all
    call points
    
    Reviewed-by: Jordan Crouse <jcrouse@codeaurora.org>
    Signed-off-by: Bruce Wang <bzwang@chromium.org>
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit b1c150a64e445501182456dda12eb066bb4881c7
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Aug 16 16:13:13 2018 -0400

    drm/nouveau/drm/nouveau: Prevent handling ACPI HPD events too early
    
    commit 79e765ad665da4b8aa7e9c878bd2fef837f6fea5 upstream.
    
    On most systems with ACPI hotplugging support, it seems that we always
    receive a hotplug event once we re-enable EC interrupts even if the GPU
    hasn't even been resumed yet.
    
    This can cause problems since even though we schedule hpd_work to handle
    connector reprobing for us, hpd_work synchronizes on
    pm_runtime_get_sync() to wait until the device is ready to perform
    reprobing. Since runtime suspend/resume callbacks are disabled before
    the PM core calls ->suspend(), any calls to pm_runtime_get_sync() during
    this period will grab a runtime PM ref and return immediately with
    -EACCES. Because we schedule hpd_work from our ACPI HPD handler, and
    hpd_work synchronizes on pm_runtime_get_sync(), this causes us to launch
    a connector reprobe immediately even if the GPU isn't actually resumed
    just yet. This causes various warnings in dmesg and occasionally, also
    prevents some displays connected to the dedicated GPU from coming back
    up after suspend. Example:
    
    usb 1-4: USB disconnect, device number 14
    usb 1-4.1: USB disconnect, device number 15
    WARNING: CPU: 0 PID: 838 at drivers/gpu/drm/nouveau/include/nvkm/subdev/i2c.h:170 nouveau_dp_detect+0x17e/0x370 [nouveau]
    CPU: 0 PID: 838 Comm: kworker/0:6 Not tainted 4.17.14-201.Lyude.bz1477182.V3.fc28.x86_64 #1
    Hardware name: LENOVO 20EQS64N00/20EQS64N00, BIOS N1EET77W (1.50 ) 03/28/2018
    Workqueue: events nouveau_display_hpd_work [nouveau]
    RIP: 0010:nouveau_dp_detect+0x17e/0x370 [nouveau]
    RSP: 0018:ffffa15143933cf0 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff8cb4f656c400 RCX: 0000000000000000
    RDX: ffffa1514500e4e4 RSI: ffffa1514500e4e4 RDI: 0000000001009002
    RBP: ffff8cb4f4a8a800 R08: ffffa15143933cfd R09: ffffa15143933cfc
    R10: 0000000000000000 R11: 0000000000000000 R12: ffff8cb4fb57a000
    R13: ffff8cb4fb57a000 R14: ffff8cb4f4a8f800 R15: ffff8cb4f656c418
    FS:  0000000000000000(0000) GS:ffff8cb51f400000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f78ec938000 CR3: 000000073720a003 CR4: 00000000003606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     ? _cond_resched+0x15/0x30
     nouveau_connector_detect+0x2ce/0x520 [nouveau]
     ? _cond_resched+0x15/0x30
     ? ww_mutex_lock+0x12/0x40
     drm_helper_probe_detect_ctx+0x8b/0xe0 [drm_kms_helper]
     drm_helper_hpd_irq_event+0xa8/0x120 [drm_kms_helper]
     nouveau_display_hpd_work+0x2a/0x60 [nouveau]
     process_one_work+0x187/0x340
     worker_thread+0x2e/0x380
     ? pwq_unbound_release_workfn+0xd0/0xd0
     kthread+0x112/0x130
     ? kthread_create_worker_on_cpu+0x70/0x70
     ret_from_fork+0x35/0x40
    Code: 4c 8d 44 24 0d b9 00 05 00 00 48 89 ef ba 09 00 00 00 be 01 00 00 00 e8 e1 09 f8 ff 85 c0 0f 85 b2 01 00 00 80 7c 24 0c 03 74 02 <0f> 0b 48 89 ef e8 b8 07 f8 ff f6 05 51 1b c8 ff 02 0f 84 72 ff
    ---[ end trace 55d811b38fc8e71a ]---
    
    So, to fix this we attempt to grab a runtime PM reference in the ACPI
    handler itself asynchronously. If the GPU is already awake (it will have
    normal hotplugging at this point) or runtime PM callbacks are currently
    disabled on the device, we drop our reference without updating the
    autosuspend delay. We only schedule connector reprobes when we
    successfully managed to queue up a resume request with our asynchronous
    PM ref.
    
    This also has the added benefit of preventing redundant connector
    reprobes from ACPI while the GPU is runtime resumed!
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: stable@vger.kernel.org
    Cc: Karol Herbst <kherbst@redhat.com>
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1477182#c41
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35e48a086071290f5f0617931f40b5824a311f3d
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Aug 16 16:13:13 2018 -0400

    drm/nouveau/drm/nouveau: Prevent handling ACPI HPD events too early
    
    commit 79e765ad665da4b8aa7e9c878bd2fef837f6fea5 upstream.
    
    On most systems with ACPI hotplugging support, it seems that we always
    receive a hotplug event once we re-enable EC interrupts even if the GPU
    hasn't even been resumed yet.
    
    This can cause problems since even though we schedule hpd_work to handle
    connector reprobing for us, hpd_work synchronizes on
    pm_runtime_get_sync() to wait until the device is ready to perform
    reprobing. Since runtime suspend/resume callbacks are disabled before
    the PM core calls ->suspend(), any calls to pm_runtime_get_sync() during
    this period will grab a runtime PM ref and return immediately with
    -EACCES. Because we schedule hpd_work from our ACPI HPD handler, and
    hpd_work synchronizes on pm_runtime_get_sync(), this causes us to launch
    a connector reprobe immediately even if the GPU isn't actually resumed
    just yet. This causes various warnings in dmesg and occasionally, also
    prevents some displays connected to the dedicated GPU from coming back
    up after suspend. Example:
    
    usb 1-4: USB disconnect, device number 14
    usb 1-4.1: USB disconnect, device number 15
    WARNING: CPU: 0 PID: 838 at drivers/gpu/drm/nouveau/include/nvkm/subdev/i2c.h:170 nouveau_dp_detect+0x17e/0x370 [nouveau]
    CPU: 0 PID: 838 Comm: kworker/0:6 Not tainted 4.17.14-201.Lyude.bz1477182.V3.fc28.x86_64 #1
    Hardware name: LENOVO 20EQS64N00/20EQS64N00, BIOS N1EET77W (1.50 ) 03/28/2018
    Workqueue: events nouveau_display_hpd_work [nouveau]
    RIP: 0010:nouveau_dp_detect+0x17e/0x370 [nouveau]
    RSP: 0018:ffffa15143933cf0 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff8cb4f656c400 RCX: 0000000000000000
    RDX: ffffa1514500e4e4 RSI: ffffa1514500e4e4 RDI: 0000000001009002
    RBP: ffff8cb4f4a8a800 R08: ffffa15143933cfd R09: ffffa15143933cfc
    R10: 0000000000000000 R11: 0000000000000000 R12: ffff8cb4fb57a000
    R13: ffff8cb4fb57a000 R14: ffff8cb4f4a8f800 R15: ffff8cb4f656c418
    FS:  0000000000000000(0000) GS:ffff8cb51f400000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f78ec938000 CR3: 000000073720a003 CR4: 00000000003606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     ? _cond_resched+0x15/0x30
     nouveau_connector_detect+0x2ce/0x520 [nouveau]
     ? _cond_resched+0x15/0x30
     ? ww_mutex_lock+0x12/0x40
     drm_helper_probe_detect_ctx+0x8b/0xe0 [drm_kms_helper]
     drm_helper_hpd_irq_event+0xa8/0x120 [drm_kms_helper]
     nouveau_display_hpd_work+0x2a/0x60 [nouveau]
     process_one_work+0x187/0x340
     worker_thread+0x2e/0x380
     ? pwq_unbound_release_workfn+0xd0/0xd0
     kthread+0x112/0x130
     ? kthread_create_worker_on_cpu+0x70/0x70
     ret_from_fork+0x35/0x40
    Code: 4c 8d 44 24 0d b9 00 05 00 00 48 89 ef ba 09 00 00 00 be 01 00 00 00 e8 e1 09 f8 ff 85 c0 0f 85 b2 01 00 00 80 7c 24 0c 03 74 02 <0f> 0b 48 89 ef e8 b8 07 f8 ff f6 05 51 1b c8 ff 02 0f 84 72 ff
    ---[ end trace 55d811b38fc8e71a ]---
    
    So, to fix this we attempt to grab a runtime PM reference in the ACPI
    handler itself asynchronously. If the GPU is already awake (it will have
    normal hotplugging at this point) or runtime PM callbacks are currently
    disabled on the device, we drop our reference without updating the
    autosuspend delay. We only schedule connector reprobes when we
    successfully managed to queue up a resume request with our asynchronous
    PM ref.
    
    This also has the added benefit of preventing redundant connector
    reprobes from ACPI while the GPU is runtime resumed!
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: stable@vger.kernel.org
    Cc: Karol Herbst <kherbst@redhat.com>
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1477182#c41
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21fb862e0e3c3125dabbee740c3f0e9f95d669b9
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Aug 16 16:13:13 2018 -0400

    drm/nouveau/drm/nouveau: Prevent handling ACPI HPD events too early
    
    commit 79e765ad665da4b8aa7e9c878bd2fef837f6fea5 upstream.
    
    On most systems with ACPI hotplugging support, it seems that we always
    receive a hotplug event once we re-enable EC interrupts even if the GPU
    hasn't even been resumed yet.
    
    This can cause problems since even though we schedule hpd_work to handle
    connector reprobing for us, hpd_work synchronizes on
    pm_runtime_get_sync() to wait until the device is ready to perform
    reprobing. Since runtime suspend/resume callbacks are disabled before
    the PM core calls ->suspend(), any calls to pm_runtime_get_sync() during
    this period will grab a runtime PM ref and return immediately with
    -EACCES. Because we schedule hpd_work from our ACPI HPD handler, and
    hpd_work synchronizes on pm_runtime_get_sync(), this causes us to launch
    a connector reprobe immediately even if the GPU isn't actually resumed
    just yet. This causes various warnings in dmesg and occasionally, also
    prevents some displays connected to the dedicated GPU from coming back
    up after suspend. Example:
    
    usb 1-4: USB disconnect, device number 14
    usb 1-4.1: USB disconnect, device number 15
    WARNING: CPU: 0 PID: 838 at drivers/gpu/drm/nouveau/include/nvkm/subdev/i2c.h:170 nouveau_dp_detect+0x17e/0x370 [nouveau]
    CPU: 0 PID: 838 Comm: kworker/0:6 Not tainted 4.17.14-201.Lyude.bz1477182.V3.fc28.x86_64 #1
    Hardware name: LENOVO 20EQS64N00/20EQS64N00, BIOS N1EET77W (1.50 ) 03/28/2018
    Workqueue: events nouveau_display_hpd_work [nouveau]
    RIP: 0010:nouveau_dp_detect+0x17e/0x370 [nouveau]
    RSP: 0018:ffffa15143933cf0 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff8cb4f656c400 RCX: 0000000000000000
    RDX: ffffa1514500e4e4 RSI: ffffa1514500e4e4 RDI: 0000000001009002
    RBP: ffff8cb4f4a8a800 R08: ffffa15143933cfd R09: ffffa15143933cfc
    R10: 0000000000000000 R11: 0000000000000000 R12: ffff8cb4fb57a000
    R13: ffff8cb4fb57a000 R14: ffff8cb4f4a8f800 R15: ffff8cb4f656c418
    FS:  0000000000000000(0000) GS:ffff8cb51f400000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f78ec938000 CR3: 000000073720a003 CR4: 00000000003606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     ? _cond_resched+0x15/0x30
     nouveau_connector_detect+0x2ce/0x520 [nouveau]
     ? _cond_resched+0x15/0x30
     ? ww_mutex_lock+0x12/0x40
     drm_helper_probe_detect_ctx+0x8b/0xe0 [drm_kms_helper]
     drm_helper_hpd_irq_event+0xa8/0x120 [drm_kms_helper]
     nouveau_display_hpd_work+0x2a/0x60 [nouveau]
     process_one_work+0x187/0x340
     worker_thread+0x2e/0x380
     ? pwq_unbound_release_workfn+0xd0/0xd0
     kthread+0x112/0x130
     ? kthread_create_worker_on_cpu+0x70/0x70
     ret_from_fork+0x35/0x40
    Code: 4c 8d 44 24 0d b9 00 05 00 00 48 89 ef ba 09 00 00 00 be 01 00 00 00 e8 e1 09 f8 ff 85 c0 0f 85 b2 01 00 00 80 7c 24 0c 03 74 02 <0f> 0b 48 89 ef e8 b8 07 f8 ff f6 05 51 1b c8 ff 02 0f 84 72 ff
    ---[ end trace 55d811b38fc8e71a ]---
    
    So, to fix this we attempt to grab a runtime PM reference in the ACPI
    handler itself asynchronously. If the GPU is already awake (it will have
    normal hotplugging at this point) or runtime PM callbacks are currently
    disabled on the device, we drop our reference without updating the
    autosuspend delay. We only schedule connector reprobes when we
    successfully managed to queue up a resume request with our asynchronous
    PM ref.
    
    This also has the added benefit of preventing redundant connector
    reprobes from ACPI while the GPU is runtime resumed!
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: stable@vger.kernel.org
    Cc: Karol Herbst <kherbst@redhat.com>
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1477182#c41
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c7103aa026094a4ee2c2708ec6977a6dfc5331d
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Sat Sep 22 11:44:05 2018 +0200

    phy: phy-twl4030-usb: fix denied runtime access
    
    When runtime is not enabled, pm_runtime_get_sync() returns -EACCESS,
    the counter will be incremented but the resume callback not called,
    so enumeration and charging will not start properly.
    To avoid that happen, disable irq on suspend and recheck on resume.
    
    Practically this happens when the device is woken up from suspend by
    plugging in usb.
    
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>

commit 6e5da6f7d82474e94c2d4a38cf9ca4edbb3e03a0
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Fri Aug 31 15:55:10 2018 -0700

    PCI: qcom: Fix error handling in runtime PM support
    
    The driver does not cope with the fact that probe can fail in a number
    of cases after enabling runtime PM on the device; this results in
    warnings about "Unbalanced pm_runtime_enable". Furthermore if probe
    fails after invoking qcom_pcie_host_init() the power-domain will be left
    referenced.
    
    As it is not possible for the error handling in qcom_pcie_host_init() to
    handle errors happening after returning from that function the
    pm_runtime_get_sync() is moved to qcom_pcie_probe() as well.
    
    Fixes: 854b69efbdd2 ("PCI: qcom: add runtime pm support to pcie_port")
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    [lorenzo.pieralisi@arm.com: updated commit log]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Stanimir Varbanov <svarbanov@mm-sol.com>

commit d7cff00160365d77a96e86b19152cb0f7b1e1a91
Author: Lihua Yao <ylhuajnu@163.com>
Date:   Wed Aug 15 23:20:34 2018 +0800

    ALSA: ac97: fix check of pm_runtime_get_sync failure
    
    commit d15ec0b482ff502e4e19e43d15aa5072e4290199 upstream.
    
    pm_runtime_get_sync returns negative on failure.
    
    Fixes: 74426fbff66e ("ALSA: ac97: add an ac97 bus")
    Signed-off-by: Lihua Yao <ylhuajnu@163.com>
    Acked-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79e765ad665da4b8aa7e9c878bd2fef837f6fea5
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Aug 16 16:13:13 2018 -0400

    drm/nouveau/drm/nouveau: Prevent handling ACPI HPD events too early
    
    On most systems with ACPI hotplugging support, it seems that we always
    receive a hotplug event once we re-enable EC interrupts even if the GPU
    hasn't even been resumed yet.
    
    This can cause problems since even though we schedule hpd_work to handle
    connector reprobing for us, hpd_work synchronizes on
    pm_runtime_get_sync() to wait until the device is ready to perform
    reprobing. Since runtime suspend/resume callbacks are disabled before
    the PM core calls ->suspend(), any calls to pm_runtime_get_sync() during
    this period will grab a runtime PM ref and return immediately with
    -EACCES. Because we schedule hpd_work from our ACPI HPD handler, and
    hpd_work synchronizes on pm_runtime_get_sync(), this causes us to launch
    a connector reprobe immediately even if the GPU isn't actually resumed
    just yet. This causes various warnings in dmesg and occasionally, also
    prevents some displays connected to the dedicated GPU from coming back
    up after suspend. Example:
    
    usb 1-4: USB disconnect, device number 14
    usb 1-4.1: USB disconnect, device number 15
    WARNING: CPU: 0 PID: 838 at drivers/gpu/drm/nouveau/include/nvkm/subdev/i2c.h:170 nouveau_dp_detect+0x17e/0x370 [nouveau]
    CPU: 0 PID: 838 Comm: kworker/0:6 Not tainted 4.17.14-201.Lyude.bz1477182.V3.fc28.x86_64 #1
    Hardware name: LENOVO 20EQS64N00/20EQS64N00, BIOS N1EET77W (1.50 ) 03/28/2018
    Workqueue: events nouveau_display_hpd_work [nouveau]
    RIP: 0010:nouveau_dp_detect+0x17e/0x370 [nouveau]
    RSP: 0018:ffffa15143933cf0 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff8cb4f656c400 RCX: 0000000000000000
    RDX: ffffa1514500e4e4 RSI: ffffa1514500e4e4 RDI: 0000000001009002
    RBP: ffff8cb4f4a8a800 R08: ffffa15143933cfd R09: ffffa15143933cfc
    R10: 0000000000000000 R11: 0000000000000000 R12: ffff8cb4fb57a000
    R13: ffff8cb4fb57a000 R14: ffff8cb4f4a8f800 R15: ffff8cb4f656c418
    FS:  0000000000000000(0000) GS:ffff8cb51f400000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f78ec938000 CR3: 000000073720a003 CR4: 00000000003606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     ? _cond_resched+0x15/0x30
     nouveau_connector_detect+0x2ce/0x520 [nouveau]
     ? _cond_resched+0x15/0x30
     ? ww_mutex_lock+0x12/0x40
     drm_helper_probe_detect_ctx+0x8b/0xe0 [drm_kms_helper]
     drm_helper_hpd_irq_event+0xa8/0x120 [drm_kms_helper]
     nouveau_display_hpd_work+0x2a/0x60 [nouveau]
     process_one_work+0x187/0x340
     worker_thread+0x2e/0x380
     ? pwq_unbound_release_workfn+0xd0/0xd0
     kthread+0x112/0x130
     ? kthread_create_worker_on_cpu+0x70/0x70
     ret_from_fork+0x35/0x40
    Code: 4c 8d 44 24 0d b9 00 05 00 00 48 89 ef ba 09 00 00 00 be 01 00 00 00 e8 e1 09 f8 ff 85 c0 0f 85 b2 01 00 00 80 7c 24 0c 03 74 02 <0f> 0b 48 89 ef e8 b8 07 f8 ff f6 05 51 1b c8 ff 02 0f 84 72 ff
    ---[ end trace 55d811b38fc8e71a ]---
    
    So, to fix this we attempt to grab a runtime PM reference in the ACPI
    handler itself asynchronously. If the GPU is already awake (it will have
    normal hotplugging at this point) or runtime PM callbacks are currently
    disabled on the device, we drop our reference without updating the
    autosuspend delay. We only schedule connector reprobes when we
    successfully managed to queue up a resume request with our asynchronous
    PM ref.
    
    This also has the added benefit of preventing redundant connector
    reprobes from ACPI while the GPU is runtime resumed!
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: stable@vger.kernel.org
    Cc: Karol Herbst <kherbst@redhat.com>
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1477182#c41
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit b2b599fb54f90ae395ddc51f0d49e4f28244a8f8
Author: Hang Yuan <hang.yuan@linux.intel.com>
Date:   Wed Aug 29 17:15:56 2018 +0800

    drm/i915/gvt: move intel_runtime_pm_get out of spin_lock in stop_schedule
    
    pm_runtime_get_sync in intel_runtime_pm_get might sleep if i915
    device is not active. When stop vgpu schedule, the device may be
    inactive. So need to move runtime_pm_get out of spin_lock/unlock.
    
    Fixes: b24881e0b0b6("drm/i915/gvt: Add runtime_pm_get/put into gvt_switch_mmio
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hang Yuan <hang.yuan@linux.intel.com>
    Signed-off-by: Xiong Zhang <xiong.y.zhang@intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>

commit 99897b1e99311e67056808531141c8e16c221d42
Merge: 1290290c922f 8a328ac1f9eb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 23 15:37:24 2018 -0700

    Merge tag 'sound-fix-4.19-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound
    
    Pull sound fixes from Takashi Iwai:
     "No surprises here: a regression fix for virmidi code refactoring,
      three fixes for the new AC97 bus compat and runtime PM, and a usual
      HD-audio quirk"
    
    * tag 'sound-fix-4.19-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound:
      ALSA: hda/realtek - Fix HP Headset Mic can't record
      ALSA: ac97: fix unbalanced pm_runtime_enable
      ALSA: ac97: fix check of pm_runtime_get_sync failure
      ALSA: ac97: fix device initialization in the compat layer
      ALSA: seq: virmidi: Fix discarding the unsubscribed output

commit d15ec0b482ff502e4e19e43d15aa5072e4290199
Author: Lihua Yao <ylhuajnu@163.com>
Date:   Wed Aug 15 23:20:34 2018 +0800

    ALSA: ac97: fix check of pm_runtime_get_sync failure
    
    pm_runtime_get_sync returns negative on failure.
    
    Fixes: 74426fbff66e ("ALSA: ac97: add an ac97 bus")
    Signed-off-by: Lihua Yao <ylhuajnu@163.com>
    Acked-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 625d1e783375202c099b67aecb9b227d5b6f568f
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri May 18 10:30:07 2018 -0700

    spi: Add missing pm_runtime_put_noidle() after failed get
    
    [ Upstream commit 7e48e23a1f4a50f93ac1073f1326e0a73829b631 ]
    
    If pm_runtime_get_sync() fails we should call pm_runtime_put_noidle().
    This is probably not a critical fix as we should only hit this when
    things are broken elsewhere.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f8d490da5bd9d3dc5a8e8de07ba25e2ab13488c
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri May 18 10:30:07 2018 -0700

    spi: Add missing pm_runtime_put_noidle() after failed get
    
    [ Upstream commit 7e48e23a1f4a50f93ac1073f1326e0a73829b631 ]
    
    If pm_runtime_get_sync() fails we should call pm_runtime_put_noidle().
    This is probably not a critical fix as we should only hit this when
    things are broken elsewhere.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 467b5b425594074036df9e5e51e0da94ca3078d4
Author: Faiz Abbas <faiz_abbas@ti.com>
Date:   Tue Jul 3 16:41:02 2018 +0530

    can: m_can: Fix runtime resume call
    
    commit 1675bee3e732c2449e792feed9caff804f3bd42c upstream.
    
    pm_runtime_get_sync() returns a 1 if the state of the device is already
    'active'. This is not a failure case and should return a success.
    
    Therefore fix error handling for pm_runtime_get_sync() call such that
    it returns success when the value is 1.
    
    Also cleanup the TODO for using runtime PM for sleep mode as that is
    implemented.
    
    Signed-off-by: Faiz Abbas <faiz_abbas@ti.com>
    Cc: <stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1675bee3e732c2449e792feed9caff804f3bd42c
Author: Faiz Abbas <faiz_abbas@ti.com>
Date:   Tue Jul 3 16:41:02 2018 +0530

    can: m_can: Fix runtime resume call
    
    pm_runtime_get_sync() returns a 1 if the state of the device is already
    'active'. This is not a failure case and should return a success.
    
    Therefore fix error handling for pm_runtime_get_sync() call such that
    it returns success when the value is 1.
    
    Also cleanup the TODO for using runtime PM for sleep mode as that is
    implemented.
    
    Signed-off-by: Faiz Abbas <faiz_abbas@ti.com>
    Cc: <stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 895b66129ad8c562865b64306032bdb378f4484f
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Jun 29 11:15:37 2018 +0200

    PM / Domains: Don't power on at attach for the multi PM domain case
    
    There are no legacy behavior in drivers to consider while attaching a
    device to genpd - for the multiple PM domain case.
    
    For that reason, let's instead require the driver to runtime resume the
    device, via calling pm_runtime_get_sync() for example, when it needs to
    power on the corresponding PM domain.
    
    This allows us to improve the situation during attach. Instead of always
    power on the PM domain, which may be unnecessary, let's leave it in its
    current state. Additionally, to avoid the PM domain to stay powered on,
    let's schedule a power off work.
    
    Fixes: 3c095f32a92b (PM / Domains: Add support for multi PM domains ...)
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 9aecc03555825a79a8a4ca45199cb866e8684623
Author: Ezequiel Garcia <ezequiel@collabora.com>
Date:   Fri Jun 1 15:49:51 2018 -0400

    media: rockchip/rga: Fix broken .start_streaming
    
    Currently, rga_buf_start_streaming() is expecting
    pm_runtime_get_sync to return zero on success, which
    is wrong.
    
    As per the documentation, pm_runtime_get_sync increments
    the device's usage counter and return its result.
    This means it will typically return a positive integer
    on success and a negative error code.
    
    Therefore, rockchip-rga driver is currently unusable
    failing to start_streaming in most cases. Fix it and
    while here, cleanup the buffer return-to-core logic.
    
    Fixes: f7e7b48e6d79 ("[media] rockchip/rga: v4l2 m2m support")
    
    Signed-off-by: Ezequiel Garcia <ezequiel@collabora.com>
    Reviewed-by: Jacob Chen <jacob-chen@iotwrt.com>
    [hans.verkuil@cisco.com: fix line over 80 cols warning]
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit c40aad28a3cf762c4f842fdb8f6e7fa653a2241e
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Jun 19 02:43:41 2018 -0700

    wlcore: Make sure firmware is initialized in wl1271_op_add_interface()
    
    We have wl12xx_boot() call wl12xx_enable_interrupts() and if we have
    wl1271_op_add_interface() call pm_runtime_get_sync() before the interrupts
    are enabled. And then we get the following error during boot:
    
    wlcore: ERROR ELP wakeup timeout!
    
    Let's fix this by first checking if we need to boot the firmware. And
    only after that call pm_runtime_get_sync() when interrupts are enabled.
    And only after that do the check for wl12xx_need_fw_change().
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit fa2648a34e73fb7a17fd0a82e0335a9451d8f5c8
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Jun 19 02:43:37 2018 -0700

    wlcore: Add support for runtime PM
    
    We can update wlcore to use PM runtime by adding functions for
    wlcore_runtime_suspend() and wlcore_runtime_resume() and replacing
    calls to wl1271_ps_elp_wakeup() and wl1271_ps_elp_sleep() with calls
    to pm_runtime_get_sync() and pm_runtime_put().
    
    Note that the new wlcore_runtime_suspend() and wlcore_runtime_resume()
    functions are based on simplified versions of wl1271_ps_elp_sleep() and
    wl1271_ps_elp_wakeup().
    
    We don't want to use the old functions as we can now take advantage of
    the runtime PM usage count. And we don't need the old elp_work at all.
    And we can also remove WL1271_FLAG_ELP_REQUESTED that is no longer needed.
    
    Pretty much the only place where we are not just converting the existing
    functions is wl1271_op_suspend() where we add pm_runtime_put_noidle()
    to keep the calls paired.
    
    As the next step is to implement runtime PM autosuspend, let's not add
    wrapper functions for the generic runtime PM calls. We would be getting
    rid of any wrapper functions anyways.
    
    After autoidle we should be able to start using Linux generic wakeirqs
    for the padconf interrupt.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 37988bf8e56fcef562c054c3675de7241d1eda9a
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/radeon: Fix deadlock on runtime suspend
    
    commit 15734feff2bdac24aa3266c437cffa42851990e3 upstream.
    
    radeon's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    radeon's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Stack trace for posterity:
    
      INFO: task kworker/0:3:31847 blocked for more than 120 seconds
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x3c/0x90
       rpm_resume+0x1e2/0x690
       __pm_runtime_resume+0x3f/0x60
       radeon_lvds_detect+0x39/0xf0 [radeon]
       output_poll_execute+0xda/0x1e0 [drm_kms_helper]
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
      INFO: task kworker/2:0:10493 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x3c/0x90
       schedule_timeout+0x1b3/0x240
       wait_for_common+0xc2/0x180
       wait_for_completion+0x1d/0x20
       flush_work+0xfc/0x1a0
       __cancel_work_timer+0xa5/0x1d0
       cancel_delayed_work_sync+0x13/0x20
       drm_kms_helper_poll_disable+0x1f/0x30 [drm_kms_helper]
       radeon_pmops_runtime_suspend+0x3d/0xa0 [radeon]
       pci_pm_runtime_suspend+0x61/0x1a0
       vga_switcheroo_runtime_suspend+0x21/0x70
       __rpm_callback+0x32/0x70
       rpm_callback+0x24/0x80
       rpm_suspend+0x12b/0x640
       pm_runtime_work+0x6f/0xb0
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=94147
    Fixes: 10ebc0bc0934 ("drm/radeon: add runtime PM support (v2)")
    Cc: Ismo Toijala <ismo.toijala@gmail.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/64ea02c44f91dda19bc563902b97bbc699040392.1518338789.git.lukas@wunner.de
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 2bd9bd288e536e299b954416aa55ec610efbde06
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/nouveau: Fix deadlock on runtime suspend
    
    commit d61a5c1063515e855bedb1b81e20e50b0ac3541e upstream.
    
    nouveau's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    nouveau_connector_detect() which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if nouveau_connector_detect() is
    called in the output poll worker's context.  This is safe because
    the poll worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Other contexts calling nouveau_connector_detect() do require a runtime
    PM ref, these comprise:
    
      status_store() drm sysfs interface
      ->fill_modes drm callback
      drm_fb_helper_probe_connector_modes()
      drm_mode_getconnector()
      nouveau_connector_hotplug()
      nouveau_display_hpd_work()
      nv17_tv_set_property()
    
    Stack trace for posterity:
    
      INFO: task kworker/0:1:58 blocked for more than 120 seconds.
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x28/0x80
       rpm_resume+0x107/0x6e0
       __pm_runtime_resume+0x47/0x70
       nouveau_connector_detect+0x7e/0x4a0 [nouveau]
       nouveau_connector_detect_lvds+0x132/0x180 [nouveau]
       drm_helper_probe_detect_ctx+0x85/0xd0 [drm_kms_helper]
       output_poll_execute+0x11e/0x1c0 [drm_kms_helper]
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
      INFO: task kworker/0:2:252 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x28/0x80
       schedule_timeout+0x1e3/0x370
       wait_for_completion+0x123/0x190
       flush_work+0x142/0x1c0
       nouveau_pmops_runtime_suspend+0x7e/0xd0 [nouveau]
       pci_pm_runtime_suspend+0x5c/0x180
       vga_switcheroo_runtime_suspend+0x1e/0xa0
       __rpm_callback+0xc1/0x200
       rpm_callback+0x1f/0x70
       rpm_suspend+0x13c/0x640
       pm_runtime_work+0x6e/0x90
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
    Bugzilla: https://bugs.archlinux.org/task/53497
    Bugzilla: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=870523
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=70388#c33
    Fixes: 5addcf0a5f0f ("nouveau: add runtime PM support (v0.9)")
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/b7d2cbb609a80f59ccabfdf479b9d5907c603ea1.1518338789.git.lukas@wunner.de
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 5ec50762a419b994ef3ffa4a88efc18a21494403
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Apr 10 14:38:51 2018 +0900

    usb: gadget: udc: renesas_usb3: should call pm_runtime_enable() before add udc
    
    commit d998844016b24a8d71b9aa5eae7e51d70f2de438 upstream.
    
    This patch fixes an issue that this driver causes panic if a gadget
    driver is already loaded because usb_add_gadget_udc() might call
    renesas_usb3_start() via .udc_start, and then pm_runtime_get_sync()
    in renesas_usb3_start() doesn't work correctly.
    Note that the usb3_to_dev() macro should not be called at this timing
    because the macro uses the gadget structure.
    
    Fixes: cf06df3fae28 ("usb: gadget: udc: renesas_usb3: move pm_runtime_{en,dis}able()")
    Cc: <stable@vger.kernel.org> # v4.15+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b27a53d962b535a65ce3687a57e22fb2cffb54b5
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Apr 10 14:38:51 2018 +0900

    usb: gadget: udc: renesas_usb3: should call pm_runtime_enable() before add udc
    
    commit d998844016b24a8d71b9aa5eae7e51d70f2de438 upstream.
    
    This patch fixes an issue that this driver causes panic if a gadget
    driver is already loaded because usb_add_gadget_udc() might call
    renesas_usb3_start() via .udc_start, and then pm_runtime_get_sync()
    in renesas_usb3_start() doesn't work correctly.
    Note that the usb3_to_dev() macro should not be called at this timing
    because the macro uses the gadget structure.
    
    Fixes: cf06df3fae28 ("usb: gadget: udc: renesas_usb3: move pm_runtime_{en,dis}able()")
    Cc: <stable@vger.kernel.org> # v4.15+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 380375b937211376f1dba4543460a14d3df9f04d
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Wed May 30 16:11:42 2018 +0100

    usb: xhci: tegra: Fix runtime PM support
    
    Fix silly mistake when enabling runtime PM support for the Tegra XHCI
    driver. If runtime PM was enabled correctly for the XHCI device, then
    we should call pm_runtime_get_sync() to enable the device.
    
    Fixes: ee9e5f4c7825 ("usb: xhci: tegra: Add runtime PM support")
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e279ef189c31a9d819df2875253910708e2478c
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Sun Feb 11 15:07:44 2018 +0200

    drm: omapdrm: dss: Move initialization code from component bind to probe
    
    [ Upstream commit 215003b4ae1d47035092fef73b6a22aa82037091 ]
    
    There's no reason to delay initialization of most of the driver (such as
    mapping memory I/O, getting clocks or enabling runtime PM) to the
    component master bind handler.
    
    This additionally fixes a real PM issue caused enabling runtime PM in
    the bind handler.
    
    The bind handler performs the following sequence of PM operations:
    
            pm_runtime_enable(dev);
            pm_runtime_get_sync(dev);
    
            ... (access the hardware to read the device revision) ...
    
            pm_runtime_put_sync(dev);
    
    If a failure occurs at this point, the error path calls
    pm_runtime_disable() to balance the pm_runtime_enable() call.
    
    To understand the problem, it should be noted that the bind handler is
    called when one of the component registers itself, which happens in the
    component's probe handler. Furthermore, as the components are children
    of the DSS, the device core calls pm_runtime_get_sync() on the DSS
    platform device before calling the component's probe handler. This
    increases the DSS power usage count but doesn't runtime resume the
    device, as runtime PM is disabled at that point.
    
    The bind handler is thus called with runtime PM disabled, with the
    device runtime suspended, but with the power usage count larger than 0.
    The pm_runtime_get_sync() call will thus further increase the power
    usage count and runtime resume the device. The pm_runtime_put_sync()
    handler will decrease the power usage count to a non-zero value and will
    thus not suspend the device. Finally, the pm_runtime_disable() call will
    disable runtime PM, preventing the pm_runtime_put() call in the device
    core from runtime suspending the device. The DSS device is thus left
    powered on.
    
    To fix this, move the initialization code from the bind handler to the
    probe handler.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee6f703020ab473b72298fc63b61060f8c8bd1c2
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Sun Feb 11 15:07:44 2018 +0200

    drm: omapdrm: dss: Move initialization code from component bind to probe
    
    [ Upstream commit 215003b4ae1d47035092fef73b6a22aa82037091 ]
    
    There's no reason to delay initialization of most of the driver (such as
    mapping memory I/O, getting clocks or enabling runtime PM) to the
    component master bind handler.
    
    This additionally fixes a real PM issue caused enabling runtime PM in
    the bind handler.
    
    The bind handler performs the following sequence of PM operations:
    
            pm_runtime_enable(dev);
            pm_runtime_get_sync(dev);
    
            ... (access the hardware to read the device revision) ...
    
            pm_runtime_put_sync(dev);
    
    If a failure occurs at this point, the error path calls
    pm_runtime_disable() to balance the pm_runtime_enable() call.
    
    To understand the problem, it should be noted that the bind handler is
    called when one of the component registers itself, which happens in the
    component's probe handler. Furthermore, as the components are children
    of the DSS, the device core calls pm_runtime_get_sync() on the DSS
    platform device before calling the component's probe handler. This
    increases the DSS power usage count but doesn't runtime resume the
    device, as runtime PM is disabled at that point.
    
    The bind handler is thus called with runtime PM disabled, with the
    device runtime suspended, but with the power usage count larger than 0.
    The pm_runtime_get_sync() call will thus further increase the power
    usage count and runtime resume the device. The pm_runtime_put_sync()
    handler will decrease the power usage count to a non-zero value and will
    thus not suspend the device. Finally, the pm_runtime_disable() call will
    disable runtime PM, preventing the pm_runtime_put() call in the device
    core from runtime suspending the device. The DSS device is thus left
    powered on.
    
    To fix this, move the initialization code from the bind handler to the
    probe handler.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc4a2d71cff36bb36e8576c0cbe353ce4ced433d
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Feb 22 10:02:49 2018 -0800

    ARM: OMAP: Fix dmtimer init for omap1
    
    [ Upstream commit ba6887836178d43b3665b9da075c2c5dfe1d207c ]
    
    We need to enable PM runtime on omap1 also as otherwise we
    will get errors:
    
    omap_timer omap_timer.1: omap_dm_timer_probe: pm_runtime_get_sync failed!
    omap_timer: probe of omap_timer.1 failed with error -13
    ...
    
    We are checking for OMAP_TIMER_NEEDS_RESET flag elsewhere so this is
    safe to do.
    
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 353be46dfdab675096cbcfb30d39f2fc33047201
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Feb 22 10:02:49 2018 -0800

    ARM: OMAP: Fix dmtimer init for omap1
    
    [ Upstream commit ba6887836178d43b3665b9da075c2c5dfe1d207c ]
    
    We need to enable PM runtime on omap1 also as otherwise we
    will get errors:
    
    omap_timer omap_timer.1: omap_dm_timer_probe: pm_runtime_get_sync failed!
    omap_timer: probe of omap_timer.1 failed with error -13
    ...
    
    We are checking for OMAP_TIMER_NEEDS_RESET flag elsewhere so this is
    safe to do.
    
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 235968be2fac637ed6e9d3c92f31b3737cf038bf
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Feb 22 10:02:49 2018 -0800

    ARM: OMAP: Fix dmtimer init for omap1
    
    [ Upstream commit ba6887836178d43b3665b9da075c2c5dfe1d207c ]
    
    We need to enable PM runtime on omap1 also as otherwise we
    will get errors:
    
    omap_timer omap_timer.1: omap_dm_timer_probe: pm_runtime_get_sync failed!
    omap_timer: probe of omap_timer.1 failed with error -13
    ...
    
    We are checking for OMAP_TIMER_NEEDS_RESET flag elsewhere so this is
    safe to do.
    
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 300adcc42d61c5f3dd1ed21cba21676422955880
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Feb 22 10:02:49 2018 -0800

    ARM: OMAP: Fix dmtimer init for omap1
    
    [ Upstream commit ba6887836178d43b3665b9da075c2c5dfe1d207c ]
    
    We need to enable PM runtime on omap1 also as otherwise we
    will get errors:
    
    omap_timer omap_timer.1: omap_dm_timer_probe: pm_runtime_get_sync failed!
    omap_timer: probe of omap_timer.1 failed with error -13
    ...
    
    We are checking for OMAP_TIMER_NEEDS_RESET flag elsewhere so this is
    safe to do.
    
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 728a9dc61f132eb567f58c234e11ef80a3519cc0
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu May 17 11:29:50 2018 -0700

    wlcore: sdio: Fix flakey SDIO runtime PM handling
    
    We can have pm_runtime_get_sync() return 1, and we can have
    pm_runtime_put_sync() return -EBUSY. See rpm_suspend() and
    rpm_resume() for more information.
    
    Fix the issue by returning 0 from wl12xx_sdio_power_on() on success.
    And use pm_runtime_put() instead of pm_runtime_put_sync() for
    wl12xx_sdio_power_off(), then the MMC subsystem will idle the bus
    when suitable.
    
    Otherwise wlcore can sometimes get confused and may report bogus
    errors and WLAN connection can fail.
    
    Note that while wlcore checks the return value for wl1271_power_on(),
    the return value is ignored for wl1271_power_off(). Let's fix them
    both though to avoid further confusion in the future.
    
    Fixes: 60f36637bbbd ("wlcore: sdio: allow pm to handle sdio power")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit a0504aecba76baa1cddbc23512eb8be14df74cef
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu May 24 10:33:36 2018 +0200

    PM / runtime: Drop usage count for suppliers at device link removal
    
    In the case consumer device is runtime resumed, while the link to the
    supplier is removed, the earlier call to pm_runtime_get_sync() made from
    rpm_get_suppliers() does not get properly balanced with a corresponding
    call to pm_runtime_put(). This leads to that suppliers remains to be
    runtime resumed forever, while they don't need to.
    
    Let's fix the behaviour by calling rpm_put_suppliers() when dropping a
    device link. Not that, since rpm_put_suppliers() checks the
    link->rpm_active flag, we can correctly avoid to call pm_runtime_put() in
    cases when we shouldn't.
    
    Reported-by: Todor Tomov <todor.tomov@linaro.org>
    Fixes: 21d5c57b3726 (PM / runtime: Use device links)
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 1e8378619841ef1d621b130bbd3fc3b7e6739b50
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri May 18 10:48:49 2018 +0200

    PM / runtime: Fixup reference counting of device link suppliers at probe
    
    In the driver core, before it invokes really_probe() it runtime resumes the
    suppliers for the device via calling pm_runtime_get_suppliers(), which also
    increases the runtime PM usage count for each of the available supplier.
    
    This makes sense, as to be able to allow the consumer device to be probed
    by its driver. However, if the driver decides to add a new supplier link
    during ->probe(), hence updating the list of suppliers, the following call
    to pm_runtime_put_suppliers(), invoked after really_probe() in the driver
    core, we get into trouble.
    
    More precisely, pm_runtime_put() gets called also for the new supplier(s),
    which is wrong as the driver core, didn't trigger pm_runtime_get_sync() to
    be called for it in the first place. In other words, the new supplier may
    be runtime suspended even in cases when it shouldn't.
    
    Fix this behaviour, by runtime resume suppliers according to the same
    conditions as managed by the runtime PM core, when runtime resume callbacks
    are being invoked.
    
    Additionally, don't try to runtime suspend any of the suppliers after
    really_probe(), but instead rely on that to happen via the consumer device,
    when it becomes runtime suspended.
    
    Fixes: 21d5c57b3726 (PM / runtime: Use device links)
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit f468b55cb72ddd69b08ecfc791046a6db5fde7b0
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Wed May 16 14:48:53 2018 +0100

    usb: xhci: tegra: Prepare for adding runtime PM support
    
    When adding runtime PM support to the Tegra XHCI driver, it is desirable
    to move the function calls to enable the clocks, regulators and PHY from
    the tegra_xusb_probe into the runtime PM handlers. Currently, the
    clocks, regulators and PHY are all enabled before we call
    usb_create_hcd() in tegra_xusb_probe(), however, we cannot call
    pm_runtime_get_sync() at this point because the platform device data is
    not yet initialised. Fortunately, the function usb_create_hcd() can be
    called before we enable the clocks, regulators and PHY and so prepare
    for adding runtime PM support, by moving the call to usb_create_hcd()
    before we enable the hardware.
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e48e23a1f4a50f93ac1073f1326e0a73829b631
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri May 18 10:30:07 2018 -0700

    spi: Add missing pm_runtime_put_noidle() after failed get
    
    If pm_runtime_get_sync() fails we should call pm_runtime_put_noidle().
    This is probably not a critical fix as we should only hit this when
    things are broken elsewhere.
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit d998844016b24a8d71b9aa5eae7e51d70f2de438
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Apr 10 14:38:51 2018 +0900

    usb: gadget: udc: renesas_usb3: should call pm_runtime_enable() before add udc
    
    This patch fixes an issue that this driver causes panic if a gadget
    driver is already loaded because usb_add_gadget_udc() might call
    renesas_usb3_start() via .udc_start, and then pm_runtime_get_sync()
    in renesas_usb3_start() doesn't work correctly.
    Note that the usb3_to_dev() macro should not be called at this timing
    because the macro uses the gadget structure.
    
    Fixes: cf06df3fae28 ("usb: gadget: udc: renesas_usb3: move pm_runtime_{en,dis}able()")
    Cc: <stable@vger.kernel.org> # v4.15+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit dbad41e7bb5f4b9949ff5ea1d76c20711f326308
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Thu May 17 10:42:32 2018 +0100

    dmaengine: qcom: bam_dma: check if the runtime pm enabled
    
    Disabling pm runtime at probe is not sufficient to get BAM working
    on remotely controller instances. pm_runtime_get_sync() would return
    -EACCES in such cases.
    So check if runtime pm is enabled before returning error from bam functions.
    
    Fixes: 5b4a68952a89 ("dmaengine: qcom: bam_dma: disable runtime pm on remote controlled")
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit f2e6142cdc10b1b7edea8d65b07293f152e4d110
Author: Hien Dang <hien.dang.eb@renesas.com>
Date:   Tue Mar 13 17:18:17 2018 +0900

    pwm: rcar: Use PM Runtime to control module clock
    
    Runtime PM API (pm_runtime_get_sync/pm_runtime_put) should be used
    to control module clock instead of clk_prepare_enable and
    clk_disable_unprepare.
    
    Signed-off-by: Hien Dang <hien.dang.eb@renesas.com>
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>

commit da76ba50963b81413ffd3613f84ee9e592220b3d
Author: Manikanta Maddireddy <mmaddireddy@nvidia.com>
Date:   Wed Feb 28 15:30:34 2018 +0530

    PCI: tegra: Add power management support
    
    Tegra186 powergate driver is implemented as power domain driver, power
    partition ungate/gate are registered as power_on/power_off callback
    functions. There are no direct functions to power gate/ungate host
    controller in Tegra186. Host controller driver should add "power-domains"
    property in device tree and implement runtime suspend and resume
    callback functons. Power gate and ungate is taken care by power domain
    driver when host controller driver calls pm_runtime_put_sync and
    pm_runtime_get_sync respectively.
    
    Register suspend_noirq & resume_noirq callback functions to allow PCIe to
    come up after resume from RAM. Both runtime and noirq pm ops share same
    callback functions.
    
    Signed-off-by: Manikanta Maddireddy <mmaddireddy@nvidia.com>
    [lorenzo.pieralisi@arm.com: squashed patch to fix compilation]
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Thierry Reding <treding@nvidia.com>
    Tested-by: Thierry Reding <treding@nvidia.com>

commit 3a7c3cab42a05d8a1428eb0186a8757b50e85202
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/amdgpu: Fix deadlock on runtime suspend
    
    commit aa0aad57909eb321746325951d66af88a83bc956 upstream.
    
    amdgpu's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    amdgpu's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Fixes: d38ceaf99ed0 ("drm/amdgpu: add core driver (v4)")
    Cc: stable@vger.kernel.org # v4.2+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v4.2+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Tested-by: Mike Lothian <mike@fireburn.co.uk>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/4c9bf72aacae1eef062bd134cd112e0770a7f121.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bacc51c36ebdc39013c12d02cc9090e387c768ac
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/radeon: Fix deadlock on runtime suspend
    
    commit 15734feff2bdac24aa3266c437cffa42851990e3 upstream.
    
    radeon's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    radeon's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Stack trace for posterity:
    
      INFO: task kworker/0:3:31847 blocked for more than 120 seconds
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x3c/0x90
       rpm_resume+0x1e2/0x690
       __pm_runtime_resume+0x3f/0x60
       radeon_lvds_detect+0x39/0xf0 [radeon]
       output_poll_execute+0xda/0x1e0 [drm_kms_helper]
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
      INFO: task kworker/2:0:10493 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x3c/0x90
       schedule_timeout+0x1b3/0x240
       wait_for_common+0xc2/0x180
       wait_for_completion+0x1d/0x20
       flush_work+0xfc/0x1a0
       __cancel_work_timer+0xa5/0x1d0
       cancel_delayed_work_sync+0x13/0x20
       drm_kms_helper_poll_disable+0x1f/0x30 [drm_kms_helper]
       radeon_pmops_runtime_suspend+0x3d/0xa0 [radeon]
       pci_pm_runtime_suspend+0x61/0x1a0
       vga_switcheroo_runtime_suspend+0x21/0x70
       __rpm_callback+0x32/0x70
       rpm_callback+0x24/0x80
       rpm_suspend+0x12b/0x640
       pm_runtime_work+0x6f/0xb0
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=94147
    Fixes: 10ebc0bc0934 ("drm/radeon: add runtime PM support (v2)")
    Cc: stable@vger.kernel.org # v3.13+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v3.13+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Ismo Toijala <ismo.toijala@gmail.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/64ea02c44f91dda19bc563902b97bbc699040392.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24f82eef049e4caba0fbf6831dbc1dd255d97967
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/nouveau: Fix deadlock on runtime suspend
    
    commit d61a5c1063515e855bedb1b81e20e50b0ac3541e upstream.
    
    nouveau's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    nouveau_connector_detect() which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if nouveau_connector_detect() is
    called in the output poll worker's context.  This is safe because
    the poll worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Other contexts calling nouveau_connector_detect() do require a runtime
    PM ref, these comprise:
    
      status_store() drm sysfs interface
      ->fill_modes drm callback
      drm_fb_helper_probe_connector_modes()
      drm_mode_getconnector()
      nouveau_connector_hotplug()
      nouveau_display_hpd_work()
      nv17_tv_set_property()
    
    Stack trace for posterity:
    
      INFO: task kworker/0:1:58 blocked for more than 120 seconds.
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x28/0x80
       rpm_resume+0x107/0x6e0
       __pm_runtime_resume+0x47/0x70
       nouveau_connector_detect+0x7e/0x4a0 [nouveau]
       nouveau_connector_detect_lvds+0x132/0x180 [nouveau]
       drm_helper_probe_detect_ctx+0x85/0xd0 [drm_kms_helper]
       output_poll_execute+0x11e/0x1c0 [drm_kms_helper]
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
      INFO: task kworker/0:2:252 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x28/0x80
       schedule_timeout+0x1e3/0x370
       wait_for_completion+0x123/0x190
       flush_work+0x142/0x1c0
       nouveau_pmops_runtime_suspend+0x7e/0xd0 [nouveau]
       pci_pm_runtime_suspend+0x5c/0x180
       vga_switcheroo_runtime_suspend+0x1e/0xa0
       __rpm_callback+0xc1/0x200
       rpm_callback+0x1f/0x70
       rpm_suspend+0x13c/0x640
       pm_runtime_work+0x6e/0x90
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
    Bugzilla: https://bugs.archlinux.org/task/53497
    Bugzilla: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=870523
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=70388#c33
    Fixes: 5addcf0a5f0f ("nouveau: add runtime PM support (v0.9)")
    Cc: stable@vger.kernel.org # v3.12+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v3.12+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/b7d2cbb609a80f59ccabfdf479b9d5907c603ea1.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 690a151af16c1816f9ab242a9d55ec665edfbe54
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/amdgpu: Fix deadlock on runtime suspend
    
    commit aa0aad57909eb321746325951d66af88a83bc956 upstream.
    
    amdgpu's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    amdgpu's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Fixes: d38ceaf99ed0 ("drm/amdgpu: add core driver (v4)")
    Cc: stable@vger.kernel.org # v4.2+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v4.2+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Tested-by: Mike Lothian <mike@fireburn.co.uk>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/4c9bf72aacae1eef062bd134cd112e0770a7f121.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40539a866f0c78caef415170a1f83d1b8f81d12c
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/radeon: Fix deadlock on runtime suspend
    
    commit 15734feff2bdac24aa3266c437cffa42851990e3 upstream.
    
    radeon's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    radeon's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Stack trace for posterity:
    
      INFO: task kworker/0:3:31847 blocked for more than 120 seconds
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x3c/0x90
       rpm_resume+0x1e2/0x690
       __pm_runtime_resume+0x3f/0x60
       radeon_lvds_detect+0x39/0xf0 [radeon]
       output_poll_execute+0xda/0x1e0 [drm_kms_helper]
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
      INFO: task kworker/2:0:10493 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x3c/0x90
       schedule_timeout+0x1b3/0x240
       wait_for_common+0xc2/0x180
       wait_for_completion+0x1d/0x20
       flush_work+0xfc/0x1a0
       __cancel_work_timer+0xa5/0x1d0
       cancel_delayed_work_sync+0x13/0x20
       drm_kms_helper_poll_disable+0x1f/0x30 [drm_kms_helper]
       radeon_pmops_runtime_suspend+0x3d/0xa0 [radeon]
       pci_pm_runtime_suspend+0x61/0x1a0
       vga_switcheroo_runtime_suspend+0x21/0x70
       __rpm_callback+0x32/0x70
       rpm_callback+0x24/0x80
       rpm_suspend+0x12b/0x640
       pm_runtime_work+0x6f/0xb0
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=94147
    Fixes: 10ebc0bc0934 ("drm/radeon: add runtime PM support (v2)")
    Cc: stable@vger.kernel.org # v3.13+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v3.13+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Ismo Toijala <ismo.toijala@gmail.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/64ea02c44f91dda19bc563902b97bbc699040392.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cff2a8c5f97efdff33783bd1c5e41a36b3dab356
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/nouveau: Fix deadlock on runtime suspend
    
    commit d61a5c1063515e855bedb1b81e20e50b0ac3541e upstream.
    
    nouveau's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    nouveau_connector_detect() which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if nouveau_connector_detect() is
    called in the output poll worker's context.  This is safe because
    the poll worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Other contexts calling nouveau_connector_detect() do require a runtime
    PM ref, these comprise:
    
      status_store() drm sysfs interface
      ->fill_modes drm callback
      drm_fb_helper_probe_connector_modes()
      drm_mode_getconnector()
      nouveau_connector_hotplug()
      nouveau_display_hpd_work()
      nv17_tv_set_property()
    
    Stack trace for posterity:
    
      INFO: task kworker/0:1:58 blocked for more than 120 seconds.
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x28/0x80
       rpm_resume+0x107/0x6e0
       __pm_runtime_resume+0x47/0x70
       nouveau_connector_detect+0x7e/0x4a0 [nouveau]
       nouveau_connector_detect_lvds+0x132/0x180 [nouveau]
       drm_helper_probe_detect_ctx+0x85/0xd0 [drm_kms_helper]
       output_poll_execute+0x11e/0x1c0 [drm_kms_helper]
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
      INFO: task kworker/0:2:252 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x28/0x80
       schedule_timeout+0x1e3/0x370
       wait_for_completion+0x123/0x190
       flush_work+0x142/0x1c0
       nouveau_pmops_runtime_suspend+0x7e/0xd0 [nouveau]
       pci_pm_runtime_suspend+0x5c/0x180
       vga_switcheroo_runtime_suspend+0x1e/0xa0
       __rpm_callback+0xc1/0x200
       rpm_callback+0x1f/0x70
       rpm_suspend+0x13c/0x640
       pm_runtime_work+0x6e/0x90
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
    Bugzilla: https://bugs.archlinux.org/task/53497
    Bugzilla: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=870523
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=70388#c33
    Fixes: 5addcf0a5f0f ("nouveau: add runtime PM support (v0.9)")
    Cc: stable@vger.kernel.org # v3.12+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v3.12+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/b7d2cbb609a80f59ccabfdf479b9d5907c603ea1.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 273b6c8deabea10e3f679d8539cdb64bdc3a62cd
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/amdgpu: Fix deadlock on runtime suspend
    
    commit aa0aad57909eb321746325951d66af88a83bc956 upstream.
    
    amdgpu's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    amdgpu's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Fixes: d38ceaf99ed0 ("drm/amdgpu: add core driver (v4)")
    Cc: stable@vger.kernel.org # v4.2+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v4.2+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Tested-by: Mike Lothian <mike@fireburn.co.uk>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/4c9bf72aacae1eef062bd134cd112e0770a7f121.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae78cada27a576c5eb41fb755e7f5b438822d696
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/radeon: Fix deadlock on runtime suspend
    
    commit 15734feff2bdac24aa3266c437cffa42851990e3 upstream.
    
    radeon's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    radeon's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Stack trace for posterity:
    
      INFO: task kworker/0:3:31847 blocked for more than 120 seconds
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x3c/0x90
       rpm_resume+0x1e2/0x690
       __pm_runtime_resume+0x3f/0x60
       radeon_lvds_detect+0x39/0xf0 [radeon]
       output_poll_execute+0xda/0x1e0 [drm_kms_helper]
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
      INFO: task kworker/2:0:10493 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x3c/0x90
       schedule_timeout+0x1b3/0x240
       wait_for_common+0xc2/0x180
       wait_for_completion+0x1d/0x20
       flush_work+0xfc/0x1a0
       __cancel_work_timer+0xa5/0x1d0
       cancel_delayed_work_sync+0x13/0x20
       drm_kms_helper_poll_disable+0x1f/0x30 [drm_kms_helper]
       radeon_pmops_runtime_suspend+0x3d/0xa0 [radeon]
       pci_pm_runtime_suspend+0x61/0x1a0
       vga_switcheroo_runtime_suspend+0x21/0x70
       __rpm_callback+0x32/0x70
       rpm_callback+0x24/0x80
       rpm_suspend+0x12b/0x640
       pm_runtime_work+0x6f/0xb0
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=94147
    Fixes: 10ebc0bc0934 ("drm/radeon: add runtime PM support (v2)")
    Cc: stable@vger.kernel.org # v3.13+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v3.13+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Ismo Toijala <ismo.toijala@gmail.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/64ea02c44f91dda19bc563902b97bbc699040392.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edf309e744c0895caefc7152f8d15b453ac5fcbd
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/nouveau: Fix deadlock on runtime suspend
    
    commit d61a5c1063515e855bedb1b81e20e50b0ac3541e upstream.
    
    nouveau's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    nouveau_connector_detect() which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if nouveau_connector_detect() is
    called in the output poll worker's context.  This is safe because
    the poll worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Other contexts calling nouveau_connector_detect() do require a runtime
    PM ref, these comprise:
    
      status_store() drm sysfs interface
      ->fill_modes drm callback
      drm_fb_helper_probe_connector_modes()
      drm_mode_getconnector()
      nouveau_connector_hotplug()
      nouveau_display_hpd_work()
      nv17_tv_set_property()
    
    Stack trace for posterity:
    
      INFO: task kworker/0:1:58 blocked for more than 120 seconds.
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x28/0x80
       rpm_resume+0x107/0x6e0
       __pm_runtime_resume+0x47/0x70
       nouveau_connector_detect+0x7e/0x4a0 [nouveau]
       nouveau_connector_detect_lvds+0x132/0x180 [nouveau]
       drm_helper_probe_detect_ctx+0x85/0xd0 [drm_kms_helper]
       output_poll_execute+0x11e/0x1c0 [drm_kms_helper]
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
      INFO: task kworker/0:2:252 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x28/0x80
       schedule_timeout+0x1e3/0x370
       wait_for_completion+0x123/0x190
       flush_work+0x142/0x1c0
       nouveau_pmops_runtime_suspend+0x7e/0xd0 [nouveau]
       pci_pm_runtime_suspend+0x5c/0x180
       vga_switcheroo_runtime_suspend+0x1e/0xa0
       __rpm_callback+0xc1/0x200
       rpm_callback+0x1f/0x70
       rpm_suspend+0x13c/0x640
       pm_runtime_work+0x6e/0x90
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
    Bugzilla: https://bugs.archlinux.org/task/53497
    Bugzilla: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=870523
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=70388#c33
    Fixes: 5addcf0a5f0f ("nouveau: add runtime PM support (v0.9)")
    Cc: stable@vger.kernel.org # v3.12+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v3.12+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/b7d2cbb609a80f59ccabfdf479b9d5907c603ea1.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6a23183d800c1155527d174729851943bf1146c
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/amdgpu: Fix deadlock on runtime suspend
    
    commit aa0aad57909eb321746325951d66af88a83bc956 upstream.
    
    amdgpu's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    amdgpu's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Fixes: d38ceaf99ed0 ("drm/amdgpu: add core driver (v4)")
    Cc: stable@vger.kernel.org # v4.2+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v4.2+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Tested-by: Mike Lothian <mike@fireburn.co.uk>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/4c9bf72aacae1eef062bd134cd112e0770a7f121.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c1508eff805c81e81be88dec99dccc36c59fd4c
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/radeon: Fix deadlock on runtime suspend
    
    commit 15734feff2bdac24aa3266c437cffa42851990e3 upstream.
    
    radeon's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    radeon's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Stack trace for posterity:
    
      INFO: task kworker/0:3:31847 blocked for more than 120 seconds
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x3c/0x90
       rpm_resume+0x1e2/0x690
       __pm_runtime_resume+0x3f/0x60
       radeon_lvds_detect+0x39/0xf0 [radeon]
       output_poll_execute+0xda/0x1e0 [drm_kms_helper]
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
      INFO: task kworker/2:0:10493 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x3c/0x90
       schedule_timeout+0x1b3/0x240
       wait_for_common+0xc2/0x180
       wait_for_completion+0x1d/0x20
       flush_work+0xfc/0x1a0
       __cancel_work_timer+0xa5/0x1d0
       cancel_delayed_work_sync+0x13/0x20
       drm_kms_helper_poll_disable+0x1f/0x30 [drm_kms_helper]
       radeon_pmops_runtime_suspend+0x3d/0xa0 [radeon]
       pci_pm_runtime_suspend+0x61/0x1a0
       vga_switcheroo_runtime_suspend+0x21/0x70
       __rpm_callback+0x32/0x70
       rpm_callback+0x24/0x80
       rpm_suspend+0x12b/0x640
       pm_runtime_work+0x6f/0xb0
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=94147
    Fixes: 10ebc0bc0934 ("drm/radeon: add runtime PM support (v2)")
    Cc: stable@vger.kernel.org # v3.13+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v3.13+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Ismo Toijala <ismo.toijala@gmail.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/64ea02c44f91dda19bc563902b97bbc699040392.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c13b37c887db3531970f31955d6b0445061995a
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/nouveau: Fix deadlock on runtime suspend
    
    commit d61a5c1063515e855bedb1b81e20e50b0ac3541e upstream.
    
    nouveau's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    nouveau_connector_detect() which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if nouveau_connector_detect() is
    called in the output poll worker's context.  This is safe because
    the poll worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Other contexts calling nouveau_connector_detect() do require a runtime
    PM ref, these comprise:
    
      status_store() drm sysfs interface
      ->fill_modes drm callback
      drm_fb_helper_probe_connector_modes()
      drm_mode_getconnector()
      nouveau_connector_hotplug()
      nouveau_display_hpd_work()
      nv17_tv_set_property()
    
    Stack trace for posterity:
    
      INFO: task kworker/0:1:58 blocked for more than 120 seconds.
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x28/0x80
       rpm_resume+0x107/0x6e0
       __pm_runtime_resume+0x47/0x70
       nouveau_connector_detect+0x7e/0x4a0 [nouveau]
       nouveau_connector_detect_lvds+0x132/0x180 [nouveau]
       drm_helper_probe_detect_ctx+0x85/0xd0 [drm_kms_helper]
       output_poll_execute+0x11e/0x1c0 [drm_kms_helper]
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
      INFO: task kworker/0:2:252 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x28/0x80
       schedule_timeout+0x1e3/0x370
       wait_for_completion+0x123/0x190
       flush_work+0x142/0x1c0
       nouveau_pmops_runtime_suspend+0x7e/0xd0 [nouveau]
       pci_pm_runtime_suspend+0x5c/0x180
       vga_switcheroo_runtime_suspend+0x1e/0xa0
       __rpm_callback+0xc1/0x200
       rpm_callback+0x1f/0x70
       rpm_suspend+0x13c/0x640
       pm_runtime_work+0x6e/0x90
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
    Bugzilla: https://bugs.archlinux.org/task/53497
    Bugzilla: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=870523
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=70388#c33
    Fixes: 5addcf0a5f0f ("nouveau: add runtime PM support (v0.9)")
    Cc: stable@vger.kernel.org # v3.12+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v3.12+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/b7d2cbb609a80f59ccabfdf479b9d5907c603ea1.1518338789.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9aedd0eeff705c1fb5f8912d199d0c40821f5e7
Author: Shawn Lin <shawn.lin@rock-chips.com>
Date:   Fri Feb 23 16:47:25 2018 +0800

    mmc: dw_mmc: Avoid accessing registers in runtime suspended state
    
    commit 5b43df8b4c1a7f0c3fbf793c9566068e6b1e570c upstream.
    
    cat /sys/kernel/debug/mmc0/regs will hang up the system since
    it's in runtime suspended state, so the genpd and biu_clk is
    off. This patch fixes this problem by calling pm_runtime_get_sync
    to wake it up before reading the registers.
    
    Fixes: e9ed8835e990 ("mmc: dw_mmc: add runtime PM callback")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shawn Lin <shawn.lin@rock-chips.com>
    Reviewed-by: Jaehoon Chung <jh80.chung@samsung.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d5123a0b37cab76958bdd7d6d2c26a40ca52e7f
Author: Shawn Lin <shawn.lin@rock-chips.com>
Date:   Fri Feb 23 16:47:25 2018 +0800

    mmc: dw_mmc: Avoid accessing registers in runtime suspended state
    
    commit 5b43df8b4c1a7f0c3fbf793c9566068e6b1e570c upstream.
    
    cat /sys/kernel/debug/mmc0/regs will hang up the system since
    it's in runtime suspended state, so the genpd and biu_clk is
    off. This patch fixes this problem by calling pm_runtime_get_sync
    to wake it up before reading the registers.
    
    Fixes: e9ed8835e990 ("mmc: dw_mmc: add runtime PM callback")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shawn Lin <shawn.lin@rock-chips.com>
    Reviewed-by: Jaehoon Chung <jh80.chung@samsung.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 215003b4ae1d47035092fef73b6a22aa82037091
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Sun Feb 11 15:07:44 2018 +0200

    drm: omapdrm: dss: Move initialization code from component bind to probe
    
    There's no reason to delay initialization of most of the driver (such as
    mapping memory I/O, getting clocks or enabling runtime PM) to the
    component master bind handler.
    
    This additionally fixes a real PM issue caused enabling runtime PM in
    the bind handler.
    
    The bind handler performs the following sequence of PM operations:
    
            pm_runtime_enable(dev);
            pm_runtime_get_sync(dev);
    
            ... (access the hardware to read the device revision) ...
    
            pm_runtime_put_sync(dev);
    
    If a failure occurs at this point, the error path calls
    pm_runtime_disable() to balance the pm_runtime_enable() call.
    
    To understand the problem, it should be noted that the bind handler is
    called when one of the component registers itself, which happens in the
    component's probe handler. Furthermore, as the components are children
    of the DSS, the device core calls pm_runtime_get_sync() on the DSS
    platform device before calling the component's probe handler. This
    increases the DSS power usage count but doesn't runtime resume the
    device, as runtime PM is disabled at that point.
    
    The bind handler is thus called with runtime PM disabled, with the
    device runtime suspended, but with the power usage count larger than 0.
    The pm_runtime_get_sync() call will thus further increase the power
    usage count and runtime resume the device. The pm_runtime_put_sync()
    handler will decrease the power usage count to a non-zero value and will
    thus not suspend the device. Finally, the pm_runtime_disable() call will
    disable runtime PM, preventing the pm_runtime_put() call in the device
    core from runtime suspending the device. The DSS device is thus left
    powered on.
    
    To fix this, move the initialization code from the bind handler to the
    probe handler.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>

commit 5b43df8b4c1a7f0c3fbf793c9566068e6b1e570c
Author: Shawn Lin <shawn.lin@rock-chips.com>
Date:   Fri Feb 23 16:47:25 2018 +0800

    mmc: dw_mmc: Avoid accessing registers in runtime suspended state
    
    cat /sys/kernel/debug/mmc0/regs will hang up the system since
    it's in runtime suspended state, so the genpd and biu_clk is
    off. This patch fixes this problem by calling pm_runtime_get_sync
    to wake it up before reading the registers.
    
    Fixes: e9ed8835e990 ("mmc: dw_mmc: add runtime PM callback")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shawn Lin <shawn.lin@rock-chips.com>
    Reviewed-by: Jaehoon Chung <jh80.chung@samsung.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit ba6887836178d43b3665b9da075c2c5dfe1d207c
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Feb 22 10:02:49 2018 -0800

    ARM: OMAP: Fix dmtimer init for omap1
    
    We need to enable PM runtime on omap1 also as otherwise we
    will get errors:
    
    omap_timer omap_timer.1: omap_dm_timer_probe: pm_runtime_get_sync failed!
    omap_timer: probe of omap_timer.1 failed with error -13
    ...
    
    We are checking for OMAP_TIMER_NEEDS_RESET flag elsewhere so this is
    safe to do.
    
    Cc: Aaro Koskinen <aaro.koskinen@iki.fi>
    Cc: Keerthy <j-keerthy@ti.com>
    Cc: Ladislav Michl <ladis@linux-mips.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit aa0aad57909eb321746325951d66af88a83bc956
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/amdgpu: Fix deadlock on runtime suspend
    
    amdgpu's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    amdgpu's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Fixes: d38ceaf99ed0 ("drm/amdgpu: add core driver (v4)")
    Cc: stable@vger.kernel.org # v4.2+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v4.2+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Tested-by: Mike Lothian <mike@fireburn.co.uk>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/4c9bf72aacae1eef062bd134cd112e0770a7f121.1518338789.git.lukas@wunner.de

commit 15734feff2bdac24aa3266c437cffa42851990e3
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/radeon: Fix deadlock on runtime suspend
    
    radeon's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    radeon's ->detect hooks, which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if the ->detect hooks are called
    in the output poll worker's context.  This is safe because the poll
    worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Stack trace for posterity:
    
      INFO: task kworker/0:3:31847 blocked for more than 120 seconds
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x3c/0x90
       rpm_resume+0x1e2/0x690
       __pm_runtime_resume+0x3f/0x60
       radeon_lvds_detect+0x39/0xf0 [radeon]
       output_poll_execute+0xda/0x1e0 [drm_kms_helper]
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
      INFO: task kworker/2:0:10493 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x3c/0x90
       schedule_timeout+0x1b3/0x240
       wait_for_common+0xc2/0x180
       wait_for_completion+0x1d/0x20
       flush_work+0xfc/0x1a0
       __cancel_work_timer+0xa5/0x1d0
       cancel_delayed_work_sync+0x13/0x20
       drm_kms_helper_poll_disable+0x1f/0x30 [drm_kms_helper]
       radeon_pmops_runtime_suspend+0x3d/0xa0 [radeon]
       pci_pm_runtime_suspend+0x61/0x1a0
       vga_switcheroo_runtime_suspend+0x21/0x70
       __rpm_callback+0x32/0x70
       rpm_callback+0x24/0x80
       rpm_suspend+0x12b/0x640
       pm_runtime_work+0x6f/0xb0
       process_one_work+0x14b/0x440
       worker_thread+0x48/0x4a0
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=94147
    Fixes: 10ebc0bc0934 ("drm/radeon: add runtime PM support (v2)")
    Cc: stable@vger.kernel.org # v3.13+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v3.13+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Ismo Toijala <ismo.toijala@gmail.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/64ea02c44f91dda19bc563902b97bbc699040392.1518338789.git.lukas@wunner.de

commit d61a5c1063515e855bedb1b81e20e50b0ac3541e
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Feb 11 10:38:28 2018 +0100

    drm/nouveau: Fix deadlock on runtime suspend
    
    nouveau's ->runtime_suspend hook calls drm_kms_helper_poll_disable(),
    which waits for the output poll worker to finish if it's running.
    
    The output poll worker meanwhile calls pm_runtime_get_sync() in
    nouveau_connector_detect() which waits for the ongoing suspend to finish,
    causing a deadlock.
    
    Fix by not acquiring a runtime PM ref if nouveau_connector_detect() is
    called in the output poll worker's context.  This is safe because
    the poll worker is only enabled while runtime active and we know that
    ->runtime_suspend waits for it to finish.
    
    Other contexts calling nouveau_connector_detect() do require a runtime
    PM ref, these comprise:
    
      status_store() drm sysfs interface
      ->fill_modes drm callback
      drm_fb_helper_probe_connector_modes()
      drm_mode_getconnector()
      nouveau_connector_hotplug()
      nouveau_display_hpd_work()
      nv17_tv_set_property()
    
    Stack trace for posterity:
    
      INFO: task kworker/0:1:58 blocked for more than 120 seconds.
      Workqueue: events output_poll_execute [drm_kms_helper]
      Call Trace:
       schedule+0x28/0x80
       rpm_resume+0x107/0x6e0
       __pm_runtime_resume+0x47/0x70
       nouveau_connector_detect+0x7e/0x4a0 [nouveau]
       nouveau_connector_detect_lvds+0x132/0x180 [nouveau]
       drm_helper_probe_detect_ctx+0x85/0xd0 [drm_kms_helper]
       output_poll_execute+0x11e/0x1c0 [drm_kms_helper]
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
      INFO: task kworker/0:2:252 blocked for more than 120 seconds.
      Workqueue: pm pm_runtime_work
      Call Trace:
       schedule+0x28/0x80
       schedule_timeout+0x1e3/0x370
       wait_for_completion+0x123/0x190
       flush_work+0x142/0x1c0
       nouveau_pmops_runtime_suspend+0x7e/0xd0 [nouveau]
       pci_pm_runtime_suspend+0x5c/0x180
       vga_switcheroo_runtime_suspend+0x1e/0xa0
       __rpm_callback+0xc1/0x200
       rpm_callback+0x1f/0x70
       rpm_suspend+0x13c/0x640
       pm_runtime_work+0x6e/0x90
       process_one_work+0x184/0x380
       worker_thread+0x2e/0x390
    
    Bugzilla: https://bugs.archlinux.org/task/53497
    Bugzilla: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=870523
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=70388#c33
    Fixes: 5addcf0a5f0f ("nouveau: add runtime PM support (v0.9)")
    Cc: stable@vger.kernel.org # v3.12+: 27d4ee03078a: workqueue: Allow retrieval of current task's work struct
    Cc: stable@vger.kernel.org # v3.12+: 25c058ccaf2e: drm: Allow determining if current task is output poll worker
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/b7d2cbb609a80f59ccabfdf479b9d5907c603ea1.1518338789.git.lukas@wunner.de

commit c22c0ae5232e2280a12cdf389fdc557b83c5b968
Author: Shreyas NC <shreyas.nc@intel.com>
Date:   Tue Jan 9 10:15:46 2018 +0530

    soundwire: Fix incorrect return value check
    
    pm_runtime_get_sync will return negative values for error
    and 0 or 1 for success. Update the error check accordingly.
    
    Signed-off-by: Shreyas NC <shreyas.nc@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 9d715fa005eb: ("soundwire: Add IO transfer")
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5fec0590cd8732c810c0b6d9ae9e3a42021f2cb
Author: Ed Blake <ed.blake@sondrel.com>
Date:   Mon Oct 2 11:00:33 2017 +0100

    ASoC: img-parallel-out: Add pm_runtime_get/put to set_fmt callback
    
    
    [ Upstream commit c70458890ff15d858bd347fa9f563818bcd6e457 ]
    
    Add pm_runtime_get_sync and pm_runtime_put calls to set_fmt callback
    function. This fixes a bus error during boot when CONFIG_SUSPEND is
    defined when this function gets called while the device is runtime
    disabled and device registers are accessed while the clock is disabled.
    
    Signed-off-by: Ed Blake <ed.blake@sondrel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd0feaac155f589237495d058bab6f5fca5a0c5f
Author: Ed Blake <ed.blake@sondrel.com>
Date:   Mon Oct 2 11:00:33 2017 +0100

    ASoC: img-parallel-out: Add pm_runtime_get/put to set_fmt callback
    
    
    [ Upstream commit c70458890ff15d858bd347fa9f563818bcd6e457 ]
    
    Add pm_runtime_get_sync and pm_runtime_put calls to set_fmt callback
    function. This fixes a bus error during boot when CONFIG_SUSPEND is
    defined when this function gets called while the device is runtime
    disabled and device registers are accessed while the clock is disabled.
    
    Signed-off-by: Ed Blake <ed.blake@sondrel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25df8b009734b241ce581ac7505efc587cf0402e
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Tue Nov 21 08:49:36 2017 +0100

    drm/bridge: analogix dp: Fix runtime PM state in get_modes() callback
    
    commit 510353a63796d467b41237ab4f136136f68c297d upstream.
    
    get_modes() callback might be called asynchronously from the DRM core and
    it is not synchronized with bridge_enable(), which sets proper runtime PM
    state of the main DP device. Fix this by calling pm_runtime_get_sync()
    before calling drm_get_edid(), which in turn calls drm_dp_i2c_xfer() and
    analogix_dp_transfer() to ensure that main DP device is runtime active
    when doing any access to its registers.
    
    This fixes the following kernel issue on Samsung Exynos5250 Snow board:
    Unhandled fault: imprecise external abort (0x406) at 0x00000000
    pgd = c0004000
    [00000000] *pgd=00000000
    Internal error: : 406 [#1] PREEMPT SMP ARM
    Modules linked in:
    CPU: 0 PID: 62 Comm: kworker/0:2 Not tainted 4.13.0-rc2-00364-g4a97a3da420b #3357
    Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    Workqueue: events output_poll_execute
    task: edc14800 task.stack: edcb2000
    PC is at analogix_dp_transfer+0x15c/0x2fc
    LR is at analogix_dp_transfer+0x134/0x2fc
    pc : [<c0468538>]    lr : [<c0468510>]    psr: 60000013
    sp : edcb3be8  ip : 0000002a  fp : 00000001
    r10: 00000000  r9 : edcb3cd8  r8 : edcb3c40
    r7 : 00000000  r6 : edd3b380  r5 : edd3b010  r4 : 00000064
    r3 : 00000000  r2 : f0ad3000  r1 : edcb3c40  r0 : edd3b010
    Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
    Control: 10c5387d  Table: 4000406a  DAC: 00000051
    Process kworker/0:2 (pid: 62, stack limit = 0xedcb2210)
    Stack: (0xedcb3be8 to 0xedcb4000)
    [<c0468538>] (analogix_dp_transfer) from [<c0424ba4>] (drm_dp_i2c_do_msg+0x8c/0x2b4)
    [<c0424ba4>] (drm_dp_i2c_do_msg) from [<c0424e64>] (drm_dp_i2c_xfer+0x98/0x214)
    [<c0424e64>] (drm_dp_i2c_xfer) from [<c057b2d8>] (__i2c_transfer+0x140/0x29c)
    [<c057b2d8>] (__i2c_transfer) from [<c057b4a4>] (i2c_transfer+0x70/0xe4)
    [<c057b4a4>] (i2c_transfer) from [<c0441de4>] (drm_do_probe_ddc_edid+0xb4/0x114)
    [<c0441de4>] (drm_do_probe_ddc_edid) from [<c0441e5c>] (drm_probe_ddc+0x18/0x28)
    [<c0441e5c>] (drm_probe_ddc) from [<c0445728>] (drm_get_edid+0x124/0x2d4)
    [<c0445728>] (drm_get_edid) from [<c0465ea0>] (analogix_dp_get_modes+0x90/0x114)
    [<c0465ea0>] (analogix_dp_get_modes) from [<c0425e8c>] (drm_helper_probe_single_connector_modes+0x198/0x68c)
    [<c0425e8c>] (drm_helper_probe_single_connector_modes) from [<c04325d4>] (drm_setup_crtcs+0x1b4/0xd18)
    [<c04325d4>] (drm_setup_crtcs) from [<c04344a8>] (drm_fb_helper_hotplug_event+0x94/0xd0)
    [<c04344a8>] (drm_fb_helper_hotplug_event) from [<c0425a50>] (drm_kms_helper_hotplug_event+0x24/0x28)
    [<c0425a50>] (drm_kms_helper_hotplug_event) from [<c04263ec>] (output_poll_execute+0x6c/0x174)
    [<c04263ec>] (output_poll_execute) from [<c0136f18>] (process_one_work+0x188/0x3fc)
    [<c0136f18>] (process_one_work) from [<c01371f4>] (worker_thread+0x30/0x4b8)
    [<c01371f4>] (worker_thread) from [<c013daf8>] (kthread+0x128/0x164)
    [<c013daf8>] (kthread) from [<c0108510>] (ret_from_fork+0x14/0x24)
    Code: 0a000002 ea000009 e2544001 0a00004a (e59537c8)
    ---[ end trace cddc7919c79f7878 ]---
    
    Reported-by: Misha Komarovskiy <zombah@gmail.com>
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171121074936.22520-1-m.szyprowski@samsung.com

commit dd89f47e21aa3166d557f348deae1affde54f8b8
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Mon Oct 9 14:33:37 2017 +0530

    PCI: dra7xx: Create functional dependency between PCIe and PHY
    
    
    [ Upstream commit 7a4db656a6350f8dd46f711bdef3b0e9c6e3f4cb ]
    
    PCI core access configuration space registers in resume_noirq callbacks.
    In the case of dra7xx, PIPE3 PHY connected to PCIe controller has to be
    enabled before accessing configuration space registers. Since
    PIPE3 PHY is enabled by only configuring control module registers, no
    aborts has been observed so far (though during noirq stage, interface
    clock of PIPE3 PHY is not enabled).
    
    With new TRM updates, PIPE3 PHY has to be initialized (PIPE3 PHY
    registers has to be accessed) as well which requires the interface
    clock of PIPE3 PHY to be enabled. The interface clock of PIPE3 PHY is
    derived from OCP2SCP and hence PCIe PHY is modeled as a child of
    OCP2SCP. Since pm_runtime is not enabled during noirq stage,
    pm_runtime_get_sync done in phy_init doesn't enable
    OCP2SCP clocks resulting in abort when PIPE3 PHY registers are
    accessed.
    
    Create a function dependency between PCIe and PHY here to make
    sure PCIe is suspended before PCIe PHY/OCP2SCP and resumed after
    PCIe PHY/OCP2SCP.
    
    Suggested-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 510353a63796d467b41237ab4f136136f68c297d
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Tue Nov 21 08:49:36 2017 +0100

    drm/bridge: analogix dp: Fix runtime PM state in get_modes() callback
    
    get_modes() callback might be called asynchronously from the DRM core and
    it is not synchronized with bridge_enable(), which sets proper runtime PM
    state of the main DP device. Fix this by calling pm_runtime_get_sync()
    before calling drm_get_edid(), which in turn calls drm_dp_i2c_xfer() and
    analogix_dp_transfer() to ensure that main DP device is runtime active
    when doing any access to its registers.
    
    This fixes the following kernel issue on Samsung Exynos5250 Snow board:
    Unhandled fault: imprecise external abort (0x406) at 0x00000000
    pgd = c0004000
    [00000000] *pgd=00000000
    Internal error: : 406 [#1] PREEMPT SMP ARM
    Modules linked in:
    CPU: 0 PID: 62 Comm: kworker/0:2 Not tainted 4.13.0-rc2-00364-g4a97a3da420b #3357
    Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    Workqueue: events output_poll_execute
    task: edc14800 task.stack: edcb2000
    PC is at analogix_dp_transfer+0x15c/0x2fc
    LR is at analogix_dp_transfer+0x134/0x2fc
    pc : [<c0468538>]    lr : [<c0468510>]    psr: 60000013
    sp : edcb3be8  ip : 0000002a  fp : 00000001
    r10: 00000000  r9 : edcb3cd8  r8 : edcb3c40
    r7 : 00000000  r6 : edd3b380  r5 : edd3b010  r4 : 00000064
    r3 : 00000000  r2 : f0ad3000  r1 : edcb3c40  r0 : edd3b010
    Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
    Control: 10c5387d  Table: 4000406a  DAC: 00000051
    Process kworker/0:2 (pid: 62, stack limit = 0xedcb2210)
    Stack: (0xedcb3be8 to 0xedcb4000)
    [<c0468538>] (analogix_dp_transfer) from [<c0424ba4>] (drm_dp_i2c_do_msg+0x8c/0x2b4)
    [<c0424ba4>] (drm_dp_i2c_do_msg) from [<c0424e64>] (drm_dp_i2c_xfer+0x98/0x214)
    [<c0424e64>] (drm_dp_i2c_xfer) from [<c057b2d8>] (__i2c_transfer+0x140/0x29c)
    [<c057b2d8>] (__i2c_transfer) from [<c057b4a4>] (i2c_transfer+0x70/0xe4)
    [<c057b4a4>] (i2c_transfer) from [<c0441de4>] (drm_do_probe_ddc_edid+0xb4/0x114)
    [<c0441de4>] (drm_do_probe_ddc_edid) from [<c0441e5c>] (drm_probe_ddc+0x18/0x28)
    [<c0441e5c>] (drm_probe_ddc) from [<c0445728>] (drm_get_edid+0x124/0x2d4)
    [<c0445728>] (drm_get_edid) from [<c0465ea0>] (analogix_dp_get_modes+0x90/0x114)
    [<c0465ea0>] (analogix_dp_get_modes) from [<c0425e8c>] (drm_helper_probe_single_connector_modes+0x198/0x68c)
    [<c0425e8c>] (drm_helper_probe_single_connector_modes) from [<c04325d4>] (drm_setup_crtcs+0x1b4/0xd18)
    [<c04325d4>] (drm_setup_crtcs) from [<c04344a8>] (drm_fb_helper_hotplug_event+0x94/0xd0)
    [<c04344a8>] (drm_fb_helper_hotplug_event) from [<c0425a50>] (drm_kms_helper_hotplug_event+0x24/0x28)
    [<c0425a50>] (drm_kms_helper_hotplug_event) from [<c04263ec>] (output_poll_execute+0x6c/0x174)
    [<c04263ec>] (output_poll_execute) from [<c0136f18>] (process_one_work+0x188/0x3fc)
    [<c0136f18>] (process_one_work) from [<c01371f4>] (worker_thread+0x30/0x4b8)
    [<c01371f4>] (worker_thread) from [<c013daf8>] (kthread+0x128/0x164)
    [<c013daf8>] (kthread) from [<c0108510>] (ret_from_fork+0x14/0x24)
    Code: 0a000002 ea000009 e2544001 0a00004a (e59537c8)
    ---[ end trace cddc7919c79f7878 ]---
    
    Reported-by: Misha Komarovskiy <zombah@gmail.com>
    CC: stable@vger.kernel.org # v4.10+
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171121074936.22520-1-m.szyprowski@samsung.com

commit 89b5489b5da226ae108481f91cd7b4762c4babf9
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Aug 10 08:06:39 2017 -0700

    ARM: OMAP2+: omap_device: drop broken RPM status update from suspend_noirq
    
    commit 90de9634a5d57b92d8af4ec23aa2c9b297ec8168 upstream.
    
    Since commit a8636c89648a ("PM / Runtime: Don't allow to suspend a
    device with an active child"), which went into 4.10, it is no longer
    permitted to set RPM_SUSPENDED state for a device with active children
    (unless power.ignore_children is set).
    
    This specifically means that the attempts to do just that from the omap
    pm-domain suspend_noirq callback have since been failing whenever a
    child is active, for example:
    
      am335x-usb-childs 47400000.usb: runtime PM trying to suspend
        device but active child
    
    Silence this warning by dropping the broken pm_runtime_set_suspended()
    call from the omap suspend_noirq callback along with the redundant
    pm_runtime_set_active() in resume_noirq.
    
    This effectively reverts commit 3522bf7bfa24 ("ARM: OMAP2+: omap_device:
    maintain sane runtime pm status around suspend/resume"), which started
    updating the RPM state after the runtime_suspend callback (!) for active
    omap devices had been called during system suspend. The rationale was
    that a later pm_runtime_get_sync() would then fail (even after runtime
    pm had been disabled) and that this in turn would avoid any external
    aborts when accessing registers with clocks disabled. (See also commit
    6f3c77b040fc ("PM / Runtime: let rpm_resume() succeed if RPM_ACTIVE,
    even when disabled, v2").
    
    But during the suspend_noirq phase all children would already have been
    suspended and their drivers would specifically not attempt any further
    register accesses. And if this was all just a workaround for random
    device drivers doing cross-tree calls during system suspend, those
    drivers should be fixed and updated to explicitly model such
    dependencies using device-links instead (and either way, any such calls
    have been causing crashes since 4.10).
    
    Fixes: 3522bf7bfa24 ("ARM: OMAP2+: omap_device: maintain sane runtime pm status around suspend/resume")
    Fixes: a8636c89648a ("PM / Runtime: Don't allow to suspend a device with an active child")
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Dave Gerlach <d-gerlach@ti.com>
    Cc: Kevin Hilman <khilman@baylibre.com>
    Cc: Nishanth Menon <nm@ti.com>
    Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Tested-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7a4db656a6350f8dd46f711bdef3b0e9c6e3f4cb
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Mon Oct 9 14:33:37 2017 +0530

    PCI: dra7xx: Create functional dependency between PCIe and PHY
    
    PCI core access configuration space registers in resume_noirq callbacks.
    In the case of dra7xx, PIPE3 PHY connected to PCIe controller has to be
    enabled before accessing configuration space registers. Since
    PIPE3 PHY is enabled by only configuring control module registers, no
    aborts has been observed so far (though during noirq stage, interface
    clock of PIPE3 PHY is not enabled).
    
    With new TRM updates, PIPE3 PHY has to be initialized (PIPE3 PHY
    registers has to be accessed) as well which requires the interface
    clock of PIPE3 PHY to be enabled. The interface clock of PIPE3 PHY is
    derived from OCP2SCP and hence PCIe PHY is modeled as a child of
    OCP2SCP. Since pm_runtime is not enabled during noirq stage,
    pm_runtime_get_sync done in phy_init doesn't enable
    OCP2SCP clocks resulting in abort when PIPE3 PHY registers are
    accessed.
    
    Create a function dependency between PCIe and PHY here to make
    sure PCIe is suspended before PCIe PHY/OCP2SCP and resumed after
    PCIe PHY/OCP2SCP.
    
    Suggested-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>

commit 1fac824f0c4fe05924243830fa3b44a5ad0869c7
Author: Ed Blake <ed.blake@sondrel.com>
Date:   Fri Oct 6 15:53:55 2017 +0100

    ASoC: img-spdif-in: Add runtime PM
    
    Add runtime PM to disable the clock when the device is not in use.
    The ASoC core takes care of the pm_runtime_get_sync / put calls so we
    just need to provide runtime_suspend / runtime_resume functions and
    enable runtime PM.
    
    Signed-off-by: Ed Blake <ed.blake@sondrel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit f65bb92ca12e72c6ebed20dacaa75ee1f2f0735a
Author: Ed Blake <ed.blake@sondrel.com>
Date:   Fri Oct 6 15:50:40 2017 +0100

    ASoC: img-i2s-in: Add runtime PM
    
    Add runtime PM to disable the clock when the device is not in use.
    The ASoC core takes care of the pm_runtime_get_sync / put calls so we
    just need to provide runtime_suspend / runtime_resume functions and
    enable runtime PM.
    
    Signed-off-by: Ed Blake <ed.blake@sondrel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 596ec4bd958bc7c233d4129072d80272f21e2be1
Author: Ed Blake <ed.blake@sondrel.com>
Date:   Fri Oct 6 15:57:50 2017 +0100

    ASoC: img-parallel-out: Check pm_runtime_get_sync return code
    
    Check the the pm_runtime_get_sync return code and return if an error.
    
    Signed-off-by: Ed Blake <ed.blake@sondrel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit c70458890ff15d858bd347fa9f563818bcd6e457
Author: Ed Blake <ed.blake@sondrel.com>
Date:   Mon Oct 2 11:00:33 2017 +0100

    ASoC: img-parallel-out: Add pm_runtime_get/put to set_fmt callback
    
    Add pm_runtime_get_sync and pm_runtime_put calls to set_fmt callback
    function. This fixes a bus error during boot when CONFIG_SUSPEND is
    defined when this function gets called while the device is runtime
    disabled and device registers are accessed while the clock is disabled.
    
    Signed-off-by: Ed Blake <ed.blake@sondrel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit ff4a98e3bcb3756544b31a2610a24db77f5a20b4
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Fri Jul 21 00:24:21 2017 +0900

    iio: adc: ti-ads1015: don't return invalid value from buffer setup callbacks
    
    commit a6fe5e52d5ecfc98530034d6c9db73777cf41ede upstream.
    
    pm_runtime_get_sync() and pm_runtime_put_autosuspend() return 0 on
    success, 1 if the device's runtime PM status was already requested status
    or error code on failure.  So a positive return value doesn't indicate an
    error condition.
    
    However, any non-zero return values from buffer preenable and postdisable
    callbacks are recognized as an error and this driver reuses the return
    value from pm_runtime_get_sync() and pm_runtime_put_autosuspend() in
    these callbacks.  This change fixes the false error detections.
    
    Cc: Daniel Baluta <daniel.baluta@gmail.com>
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00202ded930ed79f1253c3847cbd56c361ee7bba
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Fri Jul 21 00:24:21 2017 +0900

    iio: adc: ti-ads1015: don't return invalid value from buffer setup callbacks
    
    commit a6fe5e52d5ecfc98530034d6c9db73777cf41ede upstream.
    
    pm_runtime_get_sync() and pm_runtime_put_autosuspend() return 0 on
    success, 1 if the device's runtime PM status was already requested status
    or error code on failure.  So a positive return value doesn't indicate an
    error condition.
    
    However, any non-zero return values from buffer preenable and postdisable
    callbacks are recognized as an error and this driver reuses the return
    value from pm_runtime_get_sync() and pm_runtime_put_autosuspend() in
    these callbacks.  This change fixes the false error detections.
    
    Cc: Daniel Baluta <daniel.baluta@gmail.com>
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9320af32f64ac3a28d7124d1dfd961e4bcc21d4
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Fri Jul 21 00:24:21 2017 +0900

    iio: adc: ti-ads1015: don't return invalid value from buffer setup callbacks
    
    commit a6fe5e52d5ecfc98530034d6c9db73777cf41ede upstream.
    
    pm_runtime_get_sync() and pm_runtime_put_autosuspend() return 0 on
    success, 1 if the device's runtime PM status was already requested status
    or error code on failure.  So a positive return value doesn't indicate an
    error condition.
    
    However, any non-zero return values from buffer preenable and postdisable
    callbacks are recognized as an error and this driver reuses the return
    value from pm_runtime_get_sync() and pm_runtime_put_autosuspend() in
    these callbacks.  This change fixes the false error detections.
    
    Cc: Daniel Baluta <daniel.baluta@gmail.com>
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a34b45397e5a389e25a0c5d39983300d040e5e2
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Aug 21 10:04:59 2017 +0200

    clk: Add support for runtime PM
    
    Registers for some clocks might be located in the SOC area, which are under the
    power domain. To enable access to those registers respective domain has to be
    turned on. Additionally, registers for such clocks will usually loose its
    contents when power domain is turned off, so additional saving and restoring of
    them might be needed in the clock controller driver.
    
    This patch adds basic infrastructure in the clocks core to allow implementing
    driver for such clocks under power domains. Clock provider can supply a
    struct device pointer, which is the used by clock core for tracking and managing
    clock's controller runtime pm state. Each clk_prepare() operation
    will first call pm_runtime_get_sync() on the supplied device, while
    clk_unprepare() will do pm_runtime_put_sync() at the end.
    
    Additional calls to pm_runtime_get/put functions are required to ensure that any
    register access (like calculating/changing clock rates and unpreparing/disabling
    unused clocks on boot) will be done with clock controller in runtime resumend
    state.
    
    When one wants to register clock controller, which make use of this feature, he
    has to:
    1. Provide a struct device to the core when registering the provider.
    2. Ensure to enable runtime PM for that device before registering clocks.
    3. Make sure that the runtime PM status of the controller device reflects
       the HW state.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Michael Turquette <mturquette@baylibre.com>
    Link: lkml.kernel.org/r/1503302703-13801-2-git-send-email-m.szyprowski@samsung.com

commit a6fe5e52d5ecfc98530034d6c9db73777cf41ede
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Fri Jul 21 00:24:21 2017 +0900

    iio: adc: ti-ads1015: don't return invalid value from buffer setup callbacks
    
    pm_runtime_get_sync() and pm_runtime_put_autosuspend() return 0 on
    success, 1 if the device's runtime PM status was already requested status
    or error code on failure.  So a positive return value doesn't indicate an
    error condition.
    
    However, any non-zero return values from buffer preenable and postdisable
    callbacks are recognized as an error and this driver reuses the return
    value from pm_runtime_get_sync() and pm_runtime_put_autosuspend() in
    these callbacks.  This change fixes the false error detections.
    
    Cc: Daniel Baluta <daniel.baluta@gmail.com>
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

commit 90de9634a5d57b92d8af4ec23aa2c9b297ec8168
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Aug 10 08:06:39 2017 -0700

    ARM: OMAP2+: omap_device: drop broken RPM status update from suspend_noirq
    
    Since commit a8636c89648a ("PM / Runtime: Don't allow to suspend a
    device with an active child"), which went into 4.10, it is no longer
    permitted to set RPM_SUSPENDED state for a device with active children
    (unless power.ignore_children is set).
    
    This specifically means that the attempts to do just that from the omap
    pm-domain suspend_noirq callback have since been failing whenever a
    child is active, for example:
    
      am335x-usb-childs 47400000.usb: runtime PM trying to suspend
        device but active child
    
    Silence this warning by dropping the broken pm_runtime_set_suspended()
    call from the omap suspend_noirq callback along with the redundant
    pm_runtime_set_active() in resume_noirq.
    
    This effectively reverts commit 3522bf7bfa24 ("ARM: OMAP2+: omap_device:
    maintain sane runtime pm status around suspend/resume"), which started
    updating the RPM state after the runtime_suspend callback (!) for active
    omap devices had been called during system suspend. The rationale was
    that a later pm_runtime_get_sync() would then fail (even after runtime
    pm had been disabled) and that this in turn would avoid any external
    aborts when accessing registers with clocks disabled. (See also commit
    6f3c77b040fc ("PM / Runtime: let rpm_resume() succeed if RPM_ACTIVE,
    even when disabled, v2").
    
    But during the suspend_noirq phase all children would already have been
    suspended and their drivers would specifically not attempt any further
    register accesses. And if this was all just a workaround for random
    device drivers doing cross-tree calls during system suspend, those
    drivers should be fixed and updated to explicitly model such
    dependencies using device-links instead (and either way, any such calls
    have been causing crashes since 4.10).
    
    Fixes: 3522bf7bfa24 ("ARM: OMAP2+: omap_device: maintain sane runtime pm status around suspend/resume")
    Fixes: a8636c89648a ("PM / Runtime: Don't allow to suspend a device with an active child")
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Dave Gerlach <d-gerlach@ti.com>
    Cc: Kevin Hilman <khilman@baylibre.com>
    Cc: Nishanth Menon <nm@ti.com>
    Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Tested-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 6a06e895b262621a81b3b08126b4bc5e1b8eef05
Author: Jeffy Chen <jeffy.chen@rock-chips.com>
Date:   Mon Aug 7 20:40:19 2017 +0800

    spi: rockchip: Fix clock handling in remove
    
    We are assuming clocks enabled when calling rockchip_spi_remove, which
    is not always true. Those clocks might already been disabled by the
    runtime PM at that time.
    
    Call pm_runtime_get_sync before trying to disable clocks to avoid that.
    
    Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit cb2098ab876eda3053057c9be82cb68772016751
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue May 23 21:53:54 2017 -0400

    PM / runtime: Avoid false-positive warnings from might_sleep_if()
    
    [ Upstream commit a9306a63631493afc75893a4ac405d4e1cbae6aa ]
    
    The might_sleep_if() assertions in __pm_runtime_idle(),
    __pm_runtime_suspend() and __pm_runtime_resume() may generate
    false-positive warnings in some situations.  For example, that
    happens if a nested pm_runtime_get_sync()/pm_runtime_put() pair
    is executed with disabled interrupts within an outer
    pm_runtime_get_sync()/pm_runtime_put() section for the same device.
    [Generally, pm_runtime_get_sync() may sleep, so it should not be
    called with disabled interrupts, but in this particular case the
    previous pm_runtime_get_sync() guarantees that the device will not
    be suspended, so the inner pm_runtime_get_sync() will return
    immediately after incrementing the device's usage counter.]
    
    That started to happen in the i915 driver in 4.10-rc, leading to
    the following splat:
    
     BUG: sleeping function called from invalid context at drivers/base/power/runtime.c:1032
     in_atomic(): 1, irqs_disabled(): 0, pid: 1500, name: Xorg
     1 lock held by Xorg/1500:
      #0:  (&dev->struct_mutex){+.+.+.}, at:
      [<ffffffffa0680c13>] i915_mutex_lock_interruptible+0x43/0x140 [i915]
     CPU: 0 PID: 1500 Comm: Xorg Not tainted
     Call Trace:
      dump_stack+0x85/0xc2
      ___might_sleep+0x196/0x260
      __might_sleep+0x53/0xb0
      __pm_runtime_resume+0x7a/0x90
      intel_runtime_pm_get+0x25/0x90 [i915]
      aliasing_gtt_bind_vma+0xaa/0xf0 [i915]
      i915_vma_bind+0xaf/0x1e0 [i915]
      i915_gem_execbuffer_relocate_entry+0x513/0x6f0 [i915]
      i915_gem_execbuffer_relocate_vma.isra.34+0x188/0x250 [i915]
      ? trace_hardirqs_on+0xd/0x10
      ? i915_gem_execbuffer_reserve_vma.isra.31+0x152/0x1f0 [i915]
      ? i915_gem_execbuffer_reserve.isra.32+0x372/0x3a0 [i915]
      i915_gem_do_execbuffer.isra.38+0xa70/0x1a40 [i915]
      ? __might_fault+0x4e/0xb0
      i915_gem_execbuffer2+0xc5/0x260 [i915]
      ? __might_fault+0x4e/0xb0
      drm_ioctl+0x206/0x450 [drm]
      ? i915_gem_execbuffer+0x340/0x340 [i915]
      ? __fget+0x5/0x200
      do_vfs_ioctl+0x91/0x6f0
      ? __fget+0x111/0x200
      ? __fget+0x5/0x200
      SyS_ioctl+0x79/0x90
      entry_SYSCALL_64_fastpath+0x23/0xc6
    
    even though the code triggering it is correct.
    
    Unfortunately, the might_sleep_if() assertions in question are
    too coarse-grained to cover such cases correctly, so make them
    a bit less sensitive in order to avoid the false-positives.
    
    Reported-and-tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 723bd3b9f83fe4ba903351cdaa1e6dfbec8faac0
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Apr 26 20:50:07 2017 +0900

    usb: gadget: udc: renesas_usb3: fix pm_runtime functions calling
    
    commit cdc876877ebc3f0677b267756d4564e2a429e730 upstream.
    
    This patch fixes an issue that this driver is possible to access
    the registers before pm_runtime_get_sync() if a gadget driver is
    installed first. After that, oops happens on R-Car Gen3 environment.
    To avoid it, this patch changes the pm_runtime call timing from
    probe/remove to udc_start/udc_stop.
    
    Fixes: 746bfe63bba3 ("usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cd80a1595aa861e633ee23eb2f0479af9cf077a
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Apr 26 20:50:07 2017 +0900

    usb: gadget: udc: renesas_usb3: fix pm_runtime functions calling
    
    commit cdc876877ebc3f0677b267756d4564e2a429e730 upstream.
    
    This patch fixes an issue that this driver is possible to access
    the registers before pm_runtime_get_sync() if a gadget driver is
    installed first. After that, oops happens on R-Car Gen3 environment.
    To avoid it, this patch changes the pm_runtime call timing from
    probe/remove to udc_start/udc_stop.
    
    Fixes: 746bfe63bba3 ("usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99f5ba009efddddb9d0ac34e735b2caf2c64e4a3
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue May 2 15:04:09 2017 +0300

    drm/i915: Prevent the system suspend complete optimization
    
    commit 6ab92afc95c9bd6877cb42e7b24f65be887a5440 upstream.
    
    Since
    
    commit bac2a909a096c9110525c18cbb8ce73c660d5f71
    Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Date:   Wed Jan 21 02:17:42 2015 +0100
    
        PCI / PM: Avoid resuming PCI devices during system suspend
    
    PCI devices will default to allowing the system suspend complete
    optimization where devices are not woken up during system suspend if
    they were already runtime suspended. This however breaks the i915/HDA
    drivers for two reasons:
    
    - The i915 driver has system suspend specific steps that it needs to
      run, that bring the device to a different state than its runtime
      suspended state.
    
    - The HDA driver's suspend handler requires power that it will request
      from the i915 driver's power domain handler. This in turn requires the
      i915 driver to runtime resume itself, but this won't be possible if the
      suspend complete optimization is in effect: in this case the i915
      runtime PM is disabled and trying to get an RPM reference returns
      -EACCESS.
    
    Solve this by requiring the PCI/PM core to resume the device during
    system suspend which in effect disables the suspend complete optimization.
    
    Regardless of the above commit the optimization stayed disabled for DRM
    devices until
    
    commit d14d2a8453d650bea32a1c5271af1458cd283a0f
    Author: Lukas Wunner <lukas@wunner.de>
    Date:   Wed Jun 8 12:49:29 2016 +0200
    
        drm: Remove dev_pm_ops from drm_class
    
    so this patch is in practice a fix for this commit. Another reason for
    the bug staying hidden for so long is that the optimization for a device
    is disabled if it's disabled for any of its children devices. i915 may
    have a backlight device as its child which doesn't support runtime PM
    and so doesn't allow the optimization either.  So if this backlight
    device got registered the bug stayed hidden.
    
    Credits to Marta, Tomi and David who enabled pstore logging,
    that caught one instance of this issue across a suspend/
    resume-to-ram and Ville who rememberd that the optimization was enabled
    for some devices at one point.
    
    The first WARN triggered by the problem:
    
    [ 6250.746445] WARNING: CPU: 2 PID: 17384 at drivers/gpu/drm/i915/intel_runtime_pm.c:2846 intel_runtime_pm_get+0x6b/0xd0 [i915]
    [ 6250.746448] pm_runtime_get_sync() failed: -13
    [ 6250.746451] Modules linked in: snd_hda_intel i915 vgem snd_hda_codec_hdmi x86_pkg_temp_thermal intel_powerclamp coretemp crct10dif_pclmul crc32_pclmul
    snd_hda_codec_realtek snd_hda_codec_generic ghash_clmulni_intel e1000e snd_hda_codec snd_hwdep snd_hda_core ptp mei_me pps_core snd_pcm lpc_ich mei prime_
    numbers i2c_hid i2c_designware_platform i2c_designware_core [last unloaded: i915]
    [ 6250.746512] CPU: 2 PID: 17384 Comm: kworker/u8:0 Tainted: G     U  W       4.11.0-rc5-CI-CI_DRM_334+ #1
    [ 6250.746515] Hardware name:                  /NUC5i5RYB, BIOS RYBDWi35.86A.0362.2017.0118.0940 01/18/2017
    [ 6250.746521] Workqueue: events_unbound async_run_entry_fn
    [ 6250.746525] Call Trace:
    [ 6250.746530]  dump_stack+0x67/0x92
    [ 6250.746536]  __warn+0xc6/0xe0
    [ 6250.746542]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746546]  warn_slowpath_fmt+0x46/0x50
    [ 6250.746553]  ? __pm_runtime_resume+0x56/0x80
    [ 6250.746584]  intel_runtime_pm_get+0x6b/0xd0 [i915]
    [ 6250.746610]  intel_display_power_get+0x1b/0x40 [i915]
    [ 6250.746646]  i915_audio_component_get_power+0x15/0x20 [i915]
    [ 6250.746654]  snd_hdac_display_power+0xc8/0x110 [snd_hda_core]
    [ 6250.746661]  azx_runtime_resume+0x218/0x280 [snd_hda_intel]
    [ 6250.746667]  pci_pm_runtime_resume+0x76/0xa0
    [ 6250.746672]  __rpm_callback+0xb4/0x1f0
    [ 6250.746677]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746682]  rpm_callback+0x1f/0x80
    [ 6250.746686]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746690]  rpm_resume+0x4ba/0x740
    [ 6250.746698]  __pm_runtime_resume+0x49/0x80
    [ 6250.746703]  pci_pm_suspend+0x57/0x140
    [ 6250.746709]  dpm_run_callback+0x6f/0x330
    [ 6250.746713]  ? pci_pm_freeze+0xe0/0xe0
    [ 6250.746718]  __device_suspend+0xf9/0x370
    [ 6250.746724]  ? dpm_watchdog_set+0x60/0x60
    [ 6250.746730]  async_suspend+0x1a/0x90
    [ 6250.746735]  async_run_entry_fn+0x34/0x160
    [ 6250.746741]  process_one_work+0x1f2/0x6d0
    [ 6250.746749]  worker_thread+0x49/0x4a0
    [ 6250.746755]  kthread+0x107/0x140
    [ 6250.746759]  ? process_one_work+0x6d0/0x6d0
    [ 6250.746763]  ? kthread_create_on_node+0x40/0x40
    [ 6250.746768]  ret_from_fork+0x2e/0x40
    [ 6250.746778] ---[ end trace 102a62fd2160f5e6 ]---
    
    v2:
    - Use the new pci_dev->needs_resume flag, to avoid any overhead during
      the ->pm_prepare hook. (Rafael)
    
    v3:
    - Update commit message to reference the actual regressing commit.
      (Lukas)
    
    v4:
    - Rebase on v4 of patch 1/2.
    
    Fixes: d14d2a8453d6 ("drm: Remove dev_pm_ops from drm_class")
    References: https://bugs.freedesktop.org/show_bug.cgi?id=100378
    References: https://bugs.freedesktop.org/show_bug.cgi?id=100770
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Marta Lofstedt <marta.lofstedt@intel.com>
    Cc: David Weinehall <david.weinehall@linux.intel.com>
    Cc: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: linux-pci@vger.kernel.org
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reported-and-tested-by: Marta Lofstedt <marta.lofstedt@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1493726649-32094-2-git-send-email-imre.deak@intel.com
    (cherry picked from commit adfdf85d795f4d4f487b61ee0b169d64c6e19081)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36d9659cde0dcb48c711d3dd460467d76c0b84eb
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue May 23 21:53:54 2017 -0400

    PM / runtime: Avoid false-positive warnings from might_sleep_if()
    
    
    [ Upstream commit a9306a63631493afc75893a4ac405d4e1cbae6aa ]
    
    The might_sleep_if() assertions in __pm_runtime_idle(),
    __pm_runtime_suspend() and __pm_runtime_resume() may generate
    false-positive warnings in some situations.  For example, that
    happens if a nested pm_runtime_get_sync()/pm_runtime_put() pair
    is executed with disabled interrupts within an outer
    pm_runtime_get_sync()/pm_runtime_put() section for the same device.
    [Generally, pm_runtime_get_sync() may sleep, so it should not be
    called with disabled interrupts, but in this particular case the
    previous pm_runtime_get_sync() guarantees that the device will not
    be suspended, so the inner pm_runtime_get_sync() will return
    immediately after incrementing the device's usage counter.]
    
    That started to happen in the i915 driver in 4.10-rc, leading to
    the following splat:
    
     BUG: sleeping function called from invalid context at drivers/base/power/runtime.c:1032
     in_atomic(): 1, irqs_disabled(): 0, pid: 1500, name: Xorg
     1 lock held by Xorg/1500:
      #0:  (&dev->struct_mutex){+.+.+.}, at:
      [<ffffffffa0680c13>] i915_mutex_lock_interruptible+0x43/0x140 [i915]
     CPU: 0 PID: 1500 Comm: Xorg Not tainted
     Call Trace:
      dump_stack+0x85/0xc2
      ___might_sleep+0x196/0x260
      __might_sleep+0x53/0xb0
      __pm_runtime_resume+0x7a/0x90
      intel_runtime_pm_get+0x25/0x90 [i915]
      aliasing_gtt_bind_vma+0xaa/0xf0 [i915]
      i915_vma_bind+0xaf/0x1e0 [i915]
      i915_gem_execbuffer_relocate_entry+0x513/0x6f0 [i915]
      i915_gem_execbuffer_relocate_vma.isra.34+0x188/0x250 [i915]
      ? trace_hardirqs_on+0xd/0x10
      ? i915_gem_execbuffer_reserve_vma.isra.31+0x152/0x1f0 [i915]
      ? i915_gem_execbuffer_reserve.isra.32+0x372/0x3a0 [i915]
      i915_gem_do_execbuffer.isra.38+0xa70/0x1a40 [i915]
      ? __might_fault+0x4e/0xb0
      i915_gem_execbuffer2+0xc5/0x260 [i915]
      ? __might_fault+0x4e/0xb0
      drm_ioctl+0x206/0x450 [drm]
      ? i915_gem_execbuffer+0x340/0x340 [i915]
      ? __fget+0x5/0x200
      do_vfs_ioctl+0x91/0x6f0
      ? __fget+0x111/0x200
      ? __fget+0x5/0x200
      SyS_ioctl+0x79/0x90
      entry_SYSCALL_64_fastpath+0x23/0xc6
    
    even though the code triggering it is correct.
    
    Unfortunately, the might_sleep_if() assertions in question are
    too coarse-grained to cover such cases correctly, so make them
    a bit less sensitive in order to avoid the false-positives.
    
    Reported-and-tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a7b2d5f65a7a12c4f5d43fb10913ca908102833
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue May 2 15:04:09 2017 +0300

    drm/i915: Prevent the system suspend complete optimization
    
    commit 6ab92afc95c9bd6877cb42e7b24f65be887a5440 upstream.
    
    Since
    
    commit bac2a909a096c9110525c18cbb8ce73c660d5f71
    Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Date:   Wed Jan 21 02:17:42 2015 +0100
    
        PCI / PM: Avoid resuming PCI devices during system suspend
    
    PCI devices will default to allowing the system suspend complete
    optimization where devices are not woken up during system suspend if
    they were already runtime suspended. This however breaks the i915/HDA
    drivers for two reasons:
    
    - The i915 driver has system suspend specific steps that it needs to
      run, that bring the device to a different state than its runtime
      suspended state.
    
    - The HDA driver's suspend handler requires power that it will request
      from the i915 driver's power domain handler. This in turn requires the
      i915 driver to runtime resume itself, but this won't be possible if the
      suspend complete optimization is in effect: in this case the i915
      runtime PM is disabled and trying to get an RPM reference returns
      -EACCESS.
    
    Solve this by requiring the PCI/PM core to resume the device during
    system suspend which in effect disables the suspend complete optimization.
    
    Regardless of the above commit the optimization stayed disabled for DRM
    devices until
    
    commit d14d2a8453d650bea32a1c5271af1458cd283a0f
    Author: Lukas Wunner <lukas@wunner.de>
    Date:   Wed Jun 8 12:49:29 2016 +0200
    
        drm: Remove dev_pm_ops from drm_class
    
    so this patch is in practice a fix for this commit. Another reason for
    the bug staying hidden for so long is that the optimization for a device
    is disabled if it's disabled for any of its children devices. i915 may
    have a backlight device as its child which doesn't support runtime PM
    and so doesn't allow the optimization either.  So if this backlight
    device got registered the bug stayed hidden.
    
    Credits to Marta, Tomi and David who enabled pstore logging,
    that caught one instance of this issue across a suspend/
    resume-to-ram and Ville who rememberd that the optimization was enabled
    for some devices at one point.
    
    The first WARN triggered by the problem:
    
    [ 6250.746445] WARNING: CPU: 2 PID: 17384 at drivers/gpu/drm/i915/intel_runtime_pm.c:2846 intel_runtime_pm_get+0x6b/0xd0 [i915]
    [ 6250.746448] pm_runtime_get_sync() failed: -13
    [ 6250.746451] Modules linked in: snd_hda_intel i915 vgem snd_hda_codec_hdmi x86_pkg_temp_thermal intel_powerclamp coretemp crct10dif_pclmul crc32_pclmul
    snd_hda_codec_realtek snd_hda_codec_generic ghash_clmulni_intel e1000e snd_hda_codec snd_hwdep snd_hda_core ptp mei_me pps_core snd_pcm lpc_ich mei prime_
    numbers i2c_hid i2c_designware_platform i2c_designware_core [last unloaded: i915]
    [ 6250.746512] CPU: 2 PID: 17384 Comm: kworker/u8:0 Tainted: G     U  W       4.11.0-rc5-CI-CI_DRM_334+ #1
    [ 6250.746515] Hardware name:                  /NUC5i5RYB, BIOS RYBDWi35.86A.0362.2017.0118.0940 01/18/2017
    [ 6250.746521] Workqueue: events_unbound async_run_entry_fn
    [ 6250.746525] Call Trace:
    [ 6250.746530]  dump_stack+0x67/0x92
    [ 6250.746536]  __warn+0xc6/0xe0
    [ 6250.746542]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746546]  warn_slowpath_fmt+0x46/0x50
    [ 6250.746553]  ? __pm_runtime_resume+0x56/0x80
    [ 6250.746584]  intel_runtime_pm_get+0x6b/0xd0 [i915]
    [ 6250.746610]  intel_display_power_get+0x1b/0x40 [i915]
    [ 6250.746646]  i915_audio_component_get_power+0x15/0x20 [i915]
    [ 6250.746654]  snd_hdac_display_power+0xc8/0x110 [snd_hda_core]
    [ 6250.746661]  azx_runtime_resume+0x218/0x280 [snd_hda_intel]
    [ 6250.746667]  pci_pm_runtime_resume+0x76/0xa0
    [ 6250.746672]  __rpm_callback+0xb4/0x1f0
    [ 6250.746677]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746682]  rpm_callback+0x1f/0x80
    [ 6250.746686]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746690]  rpm_resume+0x4ba/0x740
    [ 6250.746698]  __pm_runtime_resume+0x49/0x80
    [ 6250.746703]  pci_pm_suspend+0x57/0x140
    [ 6250.746709]  dpm_run_callback+0x6f/0x330
    [ 6250.746713]  ? pci_pm_freeze+0xe0/0xe0
    [ 6250.746718]  __device_suspend+0xf9/0x370
    [ 6250.746724]  ? dpm_watchdog_set+0x60/0x60
    [ 6250.746730]  async_suspend+0x1a/0x90
    [ 6250.746735]  async_run_entry_fn+0x34/0x160
    [ 6250.746741]  process_one_work+0x1f2/0x6d0
    [ 6250.746749]  worker_thread+0x49/0x4a0
    [ 6250.746755]  kthread+0x107/0x140
    [ 6250.746759]  ? process_one_work+0x6d0/0x6d0
    [ 6250.746763]  ? kthread_create_on_node+0x40/0x40
    [ 6250.746768]  ret_from_fork+0x2e/0x40
    [ 6250.746778] ---[ end trace 102a62fd2160f5e6 ]---
    
    v2:
    - Use the new pci_dev->needs_resume flag, to avoid any overhead during
      the ->pm_prepare hook. (Rafael)
    
    v3:
    - Update commit message to reference the actual regressing commit.
      (Lukas)
    
    v4:
    - Rebase on v4 of patch 1/2.
    
    Fixes: d14d2a8453d6 ("drm: Remove dev_pm_ops from drm_class")
    References: https://bugs.freedesktop.org/show_bug.cgi?id=100378
    References: https://bugs.freedesktop.org/show_bug.cgi?id=100770
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Marta Lofstedt <marta.lofstedt@intel.com>
    Cc: David Weinehall <david.weinehall@linux.intel.com>
    Cc: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: linux-pci@vger.kernel.org
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reported-and-tested-by: Marta Lofstedt <marta.lofstedt@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1493726649-32094-2-git-send-email-imre.deak@intel.com
    (cherry picked from commit adfdf85d795f4d4f487b61ee0b169d64c6e19081)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 266e02bc69a2323901238272c880934438fb47ae
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue May 23 21:53:54 2017 -0400

    PM / runtime: Avoid false-positive warnings from might_sleep_if()
    
    
    [ Upstream commit a9306a63631493afc75893a4ac405d4e1cbae6aa ]
    
    The might_sleep_if() assertions in __pm_runtime_idle(),
    __pm_runtime_suspend() and __pm_runtime_resume() may generate
    false-positive warnings in some situations.  For example, that
    happens if a nested pm_runtime_get_sync()/pm_runtime_put() pair
    is executed with disabled interrupts within an outer
    pm_runtime_get_sync()/pm_runtime_put() section for the same device.
    [Generally, pm_runtime_get_sync() may sleep, so it should not be
    called with disabled interrupts, but in this particular case the
    previous pm_runtime_get_sync() guarantees that the device will not
    be suspended, so the inner pm_runtime_get_sync() will return
    immediately after incrementing the device's usage counter.]
    
    That started to happen in the i915 driver in 4.10-rc, leading to
    the following splat:
    
     BUG: sleeping function called from invalid context at drivers/base/power/runtime.c:1032
     in_atomic(): 1, irqs_disabled(): 0, pid: 1500, name: Xorg
     1 lock held by Xorg/1500:
      #0:  (&dev->struct_mutex){+.+.+.}, at:
      [<ffffffffa0680c13>] i915_mutex_lock_interruptible+0x43/0x140 [i915]
     CPU: 0 PID: 1500 Comm: Xorg Not tainted
     Call Trace:
      dump_stack+0x85/0xc2
      ___might_sleep+0x196/0x260
      __might_sleep+0x53/0xb0
      __pm_runtime_resume+0x7a/0x90
      intel_runtime_pm_get+0x25/0x90 [i915]
      aliasing_gtt_bind_vma+0xaa/0xf0 [i915]
      i915_vma_bind+0xaf/0x1e0 [i915]
      i915_gem_execbuffer_relocate_entry+0x513/0x6f0 [i915]
      i915_gem_execbuffer_relocate_vma.isra.34+0x188/0x250 [i915]
      ? trace_hardirqs_on+0xd/0x10
      ? i915_gem_execbuffer_reserve_vma.isra.31+0x152/0x1f0 [i915]
      ? i915_gem_execbuffer_reserve.isra.32+0x372/0x3a0 [i915]
      i915_gem_do_execbuffer.isra.38+0xa70/0x1a40 [i915]
      ? __might_fault+0x4e/0xb0
      i915_gem_execbuffer2+0xc5/0x260 [i915]
      ? __might_fault+0x4e/0xb0
      drm_ioctl+0x206/0x450 [drm]
      ? i915_gem_execbuffer+0x340/0x340 [i915]
      ? __fget+0x5/0x200
      do_vfs_ioctl+0x91/0x6f0
      ? __fget+0x111/0x200
      ? __fget+0x5/0x200
      SyS_ioctl+0x79/0x90
      entry_SYSCALL_64_fastpath+0x23/0xc6
    
    even though the code triggering it is correct.
    
    Unfortunately, the might_sleep_if() assertions in question are
    too coarse-grained to cover such cases correctly, so make them
    a bit less sensitive in order to avoid the false-positives.
    
    Reported-and-tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ab92afc95c9bd6877cb42e7b24f65be887a5440
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue May 2 15:04:09 2017 +0300

    drm/i915: Prevent the system suspend complete optimization
    
    Since
    
    commit bac2a909a096c9110525c18cbb8ce73c660d5f71
    Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Date:   Wed Jan 21 02:17:42 2015 +0100
    
        PCI / PM: Avoid resuming PCI devices during system suspend
    
    PCI devices will default to allowing the system suspend complete
    optimization where devices are not woken up during system suspend if
    they were already runtime suspended. This however breaks the i915/HDA
    drivers for two reasons:
    
    - The i915 driver has system suspend specific steps that it needs to
      run, that bring the device to a different state than its runtime
      suspended state.
    
    - The HDA driver's suspend handler requires power that it will request
      from the i915 driver's power domain handler. This in turn requires the
      i915 driver to runtime resume itself, but this won't be possible if the
      suspend complete optimization is in effect: in this case the i915
      runtime PM is disabled and trying to get an RPM reference returns
      -EACCESS.
    
    Solve this by requiring the PCI/PM core to resume the device during
    system suspend which in effect disables the suspend complete optimization.
    
    Regardless of the above commit the optimization stayed disabled for DRM
    devices until
    
    commit d14d2a8453d650bea32a1c5271af1458cd283a0f
    Author: Lukas Wunner <lukas@wunner.de>
    Date:   Wed Jun 8 12:49:29 2016 +0200
    
        drm: Remove dev_pm_ops from drm_class
    
    so this patch is in practice a fix for this commit. Another reason for
    the bug staying hidden for so long is that the optimization for a device
    is disabled if it's disabled for any of its children devices. i915 may
    have a backlight device as its child which doesn't support runtime PM
    and so doesn't allow the optimization either.  So if this backlight
    device got registered the bug stayed hidden.
    
    Credits to Marta, Tomi and David who enabled pstore logging,
    that caught one instance of this issue across a suspend/
    resume-to-ram and Ville who rememberd that the optimization was enabled
    for some devices at one point.
    
    The first WARN triggered by the problem:
    
    [ 6250.746445] WARNING: CPU: 2 PID: 17384 at drivers/gpu/drm/i915/intel_runtime_pm.c:2846 intel_runtime_pm_get+0x6b/0xd0 [i915]
    [ 6250.746448] pm_runtime_get_sync() failed: -13
    [ 6250.746451] Modules linked in: snd_hda_intel i915 vgem snd_hda_codec_hdmi x86_pkg_temp_thermal intel_powerclamp coretemp crct10dif_pclmul crc32_pclmul
    snd_hda_codec_realtek snd_hda_codec_generic ghash_clmulni_intel e1000e snd_hda_codec snd_hwdep snd_hda_core ptp mei_me pps_core snd_pcm lpc_ich mei prime_
    numbers i2c_hid i2c_designware_platform i2c_designware_core [last unloaded: i915]
    [ 6250.746512] CPU: 2 PID: 17384 Comm: kworker/u8:0 Tainted: G     U  W       4.11.0-rc5-CI-CI_DRM_334+ #1
    [ 6250.746515] Hardware name:                  /NUC5i5RYB, BIOS RYBDWi35.86A.0362.2017.0118.0940 01/18/2017
    [ 6250.746521] Workqueue: events_unbound async_run_entry_fn
    [ 6250.746525] Call Trace:
    [ 6250.746530]  dump_stack+0x67/0x92
    [ 6250.746536]  __warn+0xc6/0xe0
    [ 6250.746542]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746546]  warn_slowpath_fmt+0x46/0x50
    [ 6250.746553]  ? __pm_runtime_resume+0x56/0x80
    [ 6250.746584]  intel_runtime_pm_get+0x6b/0xd0 [i915]
    [ 6250.746610]  intel_display_power_get+0x1b/0x40 [i915]
    [ 6250.746646]  i915_audio_component_get_power+0x15/0x20 [i915]
    [ 6250.746654]  snd_hdac_display_power+0xc8/0x110 [snd_hda_core]
    [ 6250.746661]  azx_runtime_resume+0x218/0x280 [snd_hda_intel]
    [ 6250.746667]  pci_pm_runtime_resume+0x76/0xa0
    [ 6250.746672]  __rpm_callback+0xb4/0x1f0
    [ 6250.746677]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746682]  rpm_callback+0x1f/0x80
    [ 6250.746686]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746690]  rpm_resume+0x4ba/0x740
    [ 6250.746698]  __pm_runtime_resume+0x49/0x80
    [ 6250.746703]  pci_pm_suspend+0x57/0x140
    [ 6250.746709]  dpm_run_callback+0x6f/0x330
    [ 6250.746713]  ? pci_pm_freeze+0xe0/0xe0
    [ 6250.746718]  __device_suspend+0xf9/0x370
    [ 6250.746724]  ? dpm_watchdog_set+0x60/0x60
    [ 6250.746730]  async_suspend+0x1a/0x90
    [ 6250.746735]  async_run_entry_fn+0x34/0x160
    [ 6250.746741]  process_one_work+0x1f2/0x6d0
    [ 6250.746749]  worker_thread+0x49/0x4a0
    [ 6250.746755]  kthread+0x107/0x140
    [ 6250.746759]  ? process_one_work+0x6d0/0x6d0
    [ 6250.746763]  ? kthread_create_on_node+0x40/0x40
    [ 6250.746768]  ret_from_fork+0x2e/0x40
    [ 6250.746778] ---[ end trace 102a62fd2160f5e6 ]---
    
    v2:
    - Use the new pci_dev->needs_resume flag, to avoid any overhead during
      the ->pm_prepare hook. (Rafael)
    
    v3:
    - Update commit message to reference the actual regressing commit.
      (Lukas)
    
    v4:
    - Rebase on v4 of patch 1/2.
    
    Fixes: d14d2a8453d6 ("drm: Remove dev_pm_ops from drm_class")
    References: https://bugs.freedesktop.org/show_bug.cgi?id=100378
    References: https://bugs.freedesktop.org/show_bug.cgi?id=100770
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Marta Lofstedt <marta.lofstedt@intel.com>
    Cc: David Weinehall <david.weinehall@linux.intel.com>
    Cc: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: linux-pci@vger.kernel.org
    Cc: <stable@vger.kernel.org> # v4.10.x: 4d071c3 - PCI/PM: Add needs_resume flag
    Cc: <stable@vger.kernel.org> # v4.10.x
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reported-and-tested-by: Marta Lofstedt <marta.lofstedt@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1493726649-32094-2-git-send-email-imre.deak@intel.com
    (cherry picked from commit adfdf85d795f4d4f487b61ee0b169d64c6e19081)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit cdc876877ebc3f0677b267756d4564e2a429e730
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Apr 26 20:50:07 2017 +0900

    usb: gadget: udc: renesas_usb3: fix pm_runtime functions calling
    
    This patch fixes an issue that this driver is possible to access
    the registers before pm_runtime_get_sync() if a gadget driver is
    installed first. After that, oops happens on R-Car Gen3 environment.
    To avoid it, this patch changes the pm_runtime call timing from
    probe/remove to udc_start/udc_stop.
    
    Fixes: 746bfe63bba3 ("usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit adfdf85d795f4d4f487b61ee0b169d64c6e19081
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue May 2 15:04:09 2017 +0300

    drm/i915: Prevent the system suspend complete optimization
    
    Since
    
    commit bac2a909a096c9110525c18cbb8ce73c660d5f71
    Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Date:   Wed Jan 21 02:17:42 2015 +0100
    
        PCI / PM: Avoid resuming PCI devices during system suspend
    
    PCI devices will default to allowing the system suspend complete
    optimization where devices are not woken up during system suspend if
    they were already runtime suspended. This however breaks the i915/HDA
    drivers for two reasons:
    
    - The i915 driver has system suspend specific steps that it needs to
      run, that bring the device to a different state than its runtime
      suspended state.
    
    - The HDA driver's suspend handler requires power that it will request
      from the i915 driver's power domain handler. This in turn requires the
      i915 driver to runtime resume itself, but this won't be possible if the
      suspend complete optimization is in effect: in this case the i915
      runtime PM is disabled and trying to get an RPM reference returns
      -EACCESS.
    
    Solve this by requiring the PCI/PM core to resume the device during
    system suspend which in effect disables the suspend complete optimization.
    
    Regardless of the above commit the optimization stayed disabled for DRM
    devices until
    
    commit d14d2a8453d650bea32a1c5271af1458cd283a0f
    Author: Lukas Wunner <lukas@wunner.de>
    Date:   Wed Jun 8 12:49:29 2016 +0200
    
        drm: Remove dev_pm_ops from drm_class
    
    so this patch is in practice a fix for this commit. Another reason for
    the bug staying hidden for so long is that the optimization for a device
    is disabled if it's disabled for any of its children devices. i915 may
    have a backlight device as its child which doesn't support runtime PM
    and so doesn't allow the optimization either.  So if this backlight
    device got registered the bug stayed hidden.
    
    Credits to Marta, Tomi and David who enabled pstore logging,
    that caught one instance of this issue across a suspend/
    resume-to-ram and Ville who rememberd that the optimization was enabled
    for some devices at one point.
    
    The first WARN triggered by the problem:
    
    [ 6250.746445] WARNING: CPU: 2 PID: 17384 at drivers/gpu/drm/i915/intel_runtime_pm.c:2846 intel_runtime_pm_get+0x6b/0xd0 [i915]
    [ 6250.746448] pm_runtime_get_sync() failed: -13
    [ 6250.746451] Modules linked in: snd_hda_intel i915 vgem snd_hda_codec_hdmi x86_pkg_temp_thermal intel_powerclamp coretemp crct10dif_pclmul crc32_pclmul
    snd_hda_codec_realtek snd_hda_codec_generic ghash_clmulni_intel e1000e snd_hda_codec snd_hwdep snd_hda_core ptp mei_me pps_core snd_pcm lpc_ich mei prime_
    numbers i2c_hid i2c_designware_platform i2c_designware_core [last unloaded: i915]
    [ 6250.746512] CPU: 2 PID: 17384 Comm: kworker/u8:0 Tainted: G     U  W       4.11.0-rc5-CI-CI_DRM_334+ #1
    [ 6250.746515] Hardware name:                  /NUC5i5RYB, BIOS RYBDWi35.86A.0362.2017.0118.0940 01/18/2017
    [ 6250.746521] Workqueue: events_unbound async_run_entry_fn
    [ 6250.746525] Call Trace:
    [ 6250.746530]  dump_stack+0x67/0x92
    [ 6250.746536]  __warn+0xc6/0xe0
    [ 6250.746542]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746546]  warn_slowpath_fmt+0x46/0x50
    [ 6250.746553]  ? __pm_runtime_resume+0x56/0x80
    [ 6250.746584]  intel_runtime_pm_get+0x6b/0xd0 [i915]
    [ 6250.746610]  intel_display_power_get+0x1b/0x40 [i915]
    [ 6250.746646]  i915_audio_component_get_power+0x15/0x20 [i915]
    [ 6250.746654]  snd_hdac_display_power+0xc8/0x110 [snd_hda_core]
    [ 6250.746661]  azx_runtime_resume+0x218/0x280 [snd_hda_intel]
    [ 6250.746667]  pci_pm_runtime_resume+0x76/0xa0
    [ 6250.746672]  __rpm_callback+0xb4/0x1f0
    [ 6250.746677]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746682]  rpm_callback+0x1f/0x80
    [ 6250.746686]  ? pci_restore_standard_config+0x40/0x40
    [ 6250.746690]  rpm_resume+0x4ba/0x740
    [ 6250.746698]  __pm_runtime_resume+0x49/0x80
    [ 6250.746703]  pci_pm_suspend+0x57/0x140
    [ 6250.746709]  dpm_run_callback+0x6f/0x330
    [ 6250.746713]  ? pci_pm_freeze+0xe0/0xe0
    [ 6250.746718]  __device_suspend+0xf9/0x370
    [ 6250.746724]  ? dpm_watchdog_set+0x60/0x60
    [ 6250.746730]  async_suspend+0x1a/0x90
    [ 6250.746735]  async_run_entry_fn+0x34/0x160
    [ 6250.746741]  process_one_work+0x1f2/0x6d0
    [ 6250.746749]  worker_thread+0x49/0x4a0
    [ 6250.746755]  kthread+0x107/0x140
    [ 6250.746759]  ? process_one_work+0x6d0/0x6d0
    [ 6250.746763]  ? kthread_create_on_node+0x40/0x40
    [ 6250.746768]  ret_from_fork+0x2e/0x40
    [ 6250.746778] ---[ end trace 102a62fd2160f5e6 ]---
    
    v2:
    - Use the new pci_dev->needs_resume flag, to avoid any overhead during
      the ->pm_prepare hook. (Rafael)
    
    v3:
    - Update commit message to reference the actual regressing commit.
      (Lukas)
    
    v4:
    - Rebase on v4 of patch 1/2.
    
    Fixes: d14d2a8453d6 ("drm: Remove dev_pm_ops from drm_class")
    References: https://bugs.freedesktop.org/show_bug.cgi?id=100378
    References: https://bugs.freedesktop.org/show_bug.cgi?id=100770
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Marta Lofstedt <marta.lofstedt@intel.com>
    Cc: David Weinehall <david.weinehall@linux.intel.com>
    Cc: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: linux-pci@vger.kernel.org
    Cc: <stable@vger.kernel.org> # v4.10.x: 4d071c3 - PCI/PM: Add needs_resume flag
    Cc: <stable@vger.kernel.org> # v4.10.x
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reported-and-tested-by: Marta Lofstedt <marta.lofstedt@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1493726649-32094-2-git-send-email-imre.deak@intel.com

commit 5bc3ebc3c6f57c2b30126f113bc35ec95c6f5b5d
Author: Mauro Carvalho Chehab <mchehab@s-opensource.com>
Date:   Wed Apr 19 07:48:56 2017 -0300

    [media] mtk-vcodec: avoid warnings because of empty macros
    
    Remove those gcc warnings:
    
            drivers/media/platform/mtk-vcodec/mtk_vcodec_dec_pm.c: In function 'mtk_vcodec_dec_pw_on':
            drivers/media/platform/mtk-vcodec/mtk_vcodec_dec_pm.c:114:51: warning: suggest braces around empty body in an 'if' statement [-Wempty-body]
               mtk_v4l2_err("pm_runtime_get_sync fail %d", ret);
                                                               ^
    
    By adding braces.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit d4c7d1a089d6fddf38c4fcdc91f15791bfb59a95
Author: Keerthy <j-keerthy@ti.com>
Date:   Mon Mar 13 19:13:28 2017 +0530

    PCI: dwc: dra7xx: Push request_irq() call to the bottom of probe
    
    Currently devm_request_irq() is being called before base, PCI fields of
    dra7xx_pcie structure are populated. It is called even before
    pm_runtime_enable() and pm_runtime_get_sync() are called. This will lead
    to exceptions if in case an interrupt is triggered before the all of the
    above are done. Hence push the devm_request_irq() call to the end of the
    probe.
    
    Signed-off-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

commit f5073824efc856c9a8f56706f03ad4e07b779a36
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue Mar 28 12:38:55 2017 +0300

    drm/i915: WARN if the core runtime PM get helpers fail
    
    We don't expect the core runtime PM get helpers to return any error, so
    add a WARN for this. Also print the return value for all the callsites
    to help debugging.
    
    v2:
    - Don't call pm_runtime_get_sync() as part of initing locals. (Chris)
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: http://patchwork.freedesktop.org/patch/msgid/1490693935-12638-1-git-send-email-imre.deak@intel.com

commit efe0220fc2d2cc1cbd6c663dd3d652ac2b9afd1a
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon Feb 20 08:08:15 2017 +0100

    drm/rockchip: cdn-dp: Fix error handling
    
    It is likely that both 'clk_disable_unprepare()' should be called if
    'pm_runtime_get_sync()' fails.
    
    Add a new label for that, because 'err_set_rate' is not meaningful in this
    case.
    
    Add a missing call to 'pm_runtime_put()'.
    
    Fixes: 1a0f7ed3abe2 ("drm/rockchip: cdn-dp: add cdn DP support for rk3399")
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Mark Yao <mark.yao@rock-chips.com>
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170220070815.23096-1-christophe.jaillet@wanadoo.fr

commit f099ba5897715dc06b7ba2e20aeba893df4354e7
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu Sep 15 14:46:21 2016 +0200

    mmc: rtsx_usb_sdmmc: Handle runtime PM while changing the led
    
    commit 4f48aa7a11bfed9502a7c85a5b68cd40ea827f73 upstream.
    
    Accesses of the rtsx sdmmc's parent device, which is the rtsx usb device,
    must be done when it's runtime resumed. Currently this isn't case when
    changing the led, so let's fix this by adding a pm_runtime_get_sync() and
    a pm_runtime_put() around those operations.
    
    Reported-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Tested-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 8e9a1e986a52f262d224cb3b08f7ea08f5ad3252
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Tue Sep 20 10:25:40 2016 -0500

    hwrng: omap - Only fail if pm_runtime_get_sync returns < 0
    
    commit ad8529fde9e3601180a839867a8ab041109aebb5 upstream.
    
    Currently omap-rng checks the return value of pm_runtime_get_sync and
    reports failure if anything is returned, however it should be checking
    if ret < 0 as pm_runtime_get_sync return 0 on success but also can return
    1 if the device was already active which is not a failure case. Only
    values < 0 are actual failures.
    
    Fixes: 61dc0a446e5d ("hwrng: omap - Fix assumption that runtime_get_sync will always succeed")
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 1ef0fbffc8c39ef08c7353241f81226e7a42c481
Author: Nishanth Menon <nm@ti.com>
Date:   Fri Jun 24 11:50:39 2016 -0500

    hwrng: omap - Fix assumption that runtime_get_sync will always succeed
    
    commit 61dc0a446e5d08f2de8a24b45f69a1e302bb1b1b upstream.
    
    pm_runtime_get_sync does return a error value that must be checked for
    error conditions, else, due to various reasons, the device maynot be
    enabled and the system will crash due to lack of clock to the hardware
    module.
    
    Before:
    12.562784] [00000000] *pgd=fe193835
    12.562792] Internal error: : 1406 [#1] SMP ARM
    [...]
    12.562864] CPU: 1 PID: 241 Comm: modprobe Not tainted 4.7.0-rc4-next-20160624 #2
    12.562867] Hardware name: Generic DRA74X (Flattened Device Tree)
    12.562872] task: ed51f140 ti: ed44c000 task.ti: ed44c000
    12.562886] PC is at omap4_rng_init+0x20/0x84 [omap_rng]
    12.562899] LR is at set_current_rng+0xc0/0x154 [rng_core]
    [...]
    
    After the proper checks:
    [   94.366705] omap_rng 48090000.rng: _od_fail_runtime_resume: FIXME:
    missing hwmod/omap_dev info
    [   94.375767] omap_rng 48090000.rng: Failed to runtime_get device -19
    [   94.382351] omap_rng 48090000.rng: initialization failed.
    
    Fixes: 665d92fa85b5 ("hwrng: OMAP: convert to use runtime PM")
    Cc: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    [wt: adjusted context for pre-3.12-rc1 kernels]
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit a9306a63631493afc75893a4ac405d4e1cbae6aa
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat Feb 4 00:44:36 2017 +0100

    PM / runtime: Avoid false-positive warnings from might_sleep_if()
    
    The might_sleep_if() assertions in __pm_runtime_idle(),
    __pm_runtime_suspend() and __pm_runtime_resume() may generate
    false-positive warnings in some situations.  For example, that
    happens if a nested pm_runtime_get_sync()/pm_runtime_put() pair
    is executed with disabled interrupts within an outer
    pm_runtime_get_sync()/pm_runtime_put() section for the same device.
    [Generally, pm_runtime_get_sync() may sleep, so it should not be
    called with disabled interrupts, but in this particular case the
    previous pm_runtime_get_sync() guarantees that the device will not
    be suspended, so the inner pm_runtime_get_sync() will return
    immediately after incrementing the device's usage counter.]
    
    That started to happen in the i915 driver in 4.10-rc, leading to
    the following splat:
    
     BUG: sleeping function called from invalid context at drivers/base/power/runtime.c:1032
     in_atomic(): 1, irqs_disabled(): 0, pid: 1500, name: Xorg
     1 lock held by Xorg/1500:
      #0:  (&dev->struct_mutex){+.+.+.}, at:
      [<ffffffffa0680c13>] i915_mutex_lock_interruptible+0x43/0x140 [i915]
     CPU: 0 PID: 1500 Comm: Xorg Not tainted
     Call Trace:
      dump_stack+0x85/0xc2
      ___might_sleep+0x196/0x260
      __might_sleep+0x53/0xb0
      __pm_runtime_resume+0x7a/0x90
      intel_runtime_pm_get+0x25/0x90 [i915]
      aliasing_gtt_bind_vma+0xaa/0xf0 [i915]
      i915_vma_bind+0xaf/0x1e0 [i915]
      i915_gem_execbuffer_relocate_entry+0x513/0x6f0 [i915]
      i915_gem_execbuffer_relocate_vma.isra.34+0x188/0x250 [i915]
      ? trace_hardirqs_on+0xd/0x10
      ? i915_gem_execbuffer_reserve_vma.isra.31+0x152/0x1f0 [i915]
      ? i915_gem_execbuffer_reserve.isra.32+0x372/0x3a0 [i915]
      i915_gem_do_execbuffer.isra.38+0xa70/0x1a40 [i915]
      ? __might_fault+0x4e/0xb0
      i915_gem_execbuffer2+0xc5/0x260 [i915]
      ? __might_fault+0x4e/0xb0
      drm_ioctl+0x206/0x450 [drm]
      ? i915_gem_execbuffer+0x340/0x340 [i915]
      ? __fget+0x5/0x200
      do_vfs_ioctl+0x91/0x6f0
      ? __fget+0x111/0x200
      ? __fget+0x5/0x200
      SyS_ioctl+0x79/0x90
      entry_SYSCALL_64_fastpath+0x23/0xc6
    
    even though the code triggering it is correct.
    
    Unfortunately, the might_sleep_if() assertions in question are
    too coarse-grained to cover such cases correctly, so make them
    a bit less sensitive in order to avoid the false-positives.
    
    Reported-and-tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 182cdf23dbf6672954ac646871bf5902050268c7
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 2 14:43:39 2017 +0100

    ALSA: x86: Implement runtime PM
    
    Although the driver has some PM callbacks, it doesn't do it right:
    - the suspend callback doesn't handle to suspend the running PCM,
    - the runtime PM ops are missing,
    - pm_runtime_get_sync() isn't used at the right place.
    
    This patch covers the above and provides the basic runtime PM
    functionality.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit cb610c8fdfbe06dfb7534470a96a01adc19fc7cc
Author: Javier Martinez Canillas <javier@osg.samsung.com>
Date:   Thu Jan 19 20:36:19 2017 -0200

    [media] exynos-gsc: Fix unbalanced pm_runtime_enable() error
    
    Commit a006c04e6218 ("[media] exynos-gsc: Fixup clock management at
    ->remove()") changed the driver's .remove function logic to fist do
    a pm_runtime_get_sync() to make sure the device is powered before
    attempting to gate the gsc clock.
    
    But the commit also removed a pm_runtime_disable() call that leads
    to an unbalanced pm_runtime_enable() error if the driver is removed
    and re-probed:
    
    exynos-gsc 13e00000.video-scaler: Unbalanced pm_runtime_enable!
    exynos-gsc 13e10000.video-scaler: Unbalanced pm_runtime_enable!
    
    Fixes: a006c04e6218 ("[media] exynos-gsc: Fixup clock management at ->remove()")
    
    Signed-off-by: Javier Martinez Canillas <javier@osg.samsung.com>
    Acked-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit df386a0c2804c0a2282dd95d5530e3aa75f7cd3f
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Nov 14 19:38:31 2016 -0800

    bq24190_charger: Fix PM runtime use for bq24190_battery_set_property
    
    commit 075eb5719d53e8bb4a406ad87e1de99319aa50f0 upstream.
    
    There's a typo, it should do pm_runtime_get_sync, not put.
    
    Fixes: d7bf353fd0aa3 ("bq24190_charger: Add support for TI BQ24190 Battery Charger")
    Cc: Mark A. Greer <mgreer@animalcreek.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d65472bcb3f2e1f305529655bb06054dc9e2804
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Dec 8 18:32:28 2016 +0100

    gpio: rcar: Fine-grained Runtime PM support
    
    Currently gpio modules are runtime-resumed at probe time. This means the
    gpio module will be active all the time (except during system suspend,
    if not configured as a wake-up source).
    
    While an R-Car Gen2 gpio module retains pins configured for output at
    the requested level while put in standby mode, gpio register cannot be
    accessed while suspended.  Unfortunately pm_runtime_get_sync() cannot be
    called from all contexts where gpio register access is needed. Hence
    move the Runtime PM handling from probe/remove time to gpio request/free
    time, which is probably the best we can do.
    
    On r8a7791/koelsch, gpio modules 0, 1, 3, and 4 are now suspended during
    normal use (gpio2 is used for LEDs and regulators, gpio5 for keys, gpio6
    for SD-Card CD & WP, gpio7 for keys and regulators).
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    [Niklas: s/gpio_to_priv(chip)/gpiochip_get_data(chip)/]
    Signed-off-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 683b96f4d1d132fcefa4a0bd11916649800d7361
Merge: 0f1d6dfe03ca 50523a29d900
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 14 13:57:44 2016 -0800

    Merge branch 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/jmorris/linux-security
    
    Pull security subsystem updates from James Morris:
     "Generally pretty quiet for this release. Highlights:
    
      Yama:
       - allow ptrace access for original parent after re-parenting
    
      TPM:
       - add documentation
       - many bugfixes & cleanups
       - define a generic open() method for ascii & bios measurements
    
      Integrity:
       - Harden against malformed xattrs
    
      SELinux:
       - bugfixes & cleanups
    
      Smack:
       - Remove unnecessary smack_known_invalid label
       - Do not apply star label in smack_setprocattr hook
       - parse mnt opts after privileges check (fixes unpriv DoS vuln)"
    
    * 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/jmorris/linux-security: (56 commits)
      Yama: allow access for the current ptrace parent
      tpm: adjust return value of tpm_read_log
      tpm: vtpm_proxy: conditionally call tpm_chip_unregister
      tpm: Fix handling of missing event log
      tpm: Check the bios_dir entry for NULL before accessing it
      tpm: return -ENODEV if np is not set
      tpm: cleanup of printk error messages
      tpm: replace of_find_node_by_name() with dev of_node property
      tpm: redefine read_log() to handle ACPI/OF at runtime
      tpm: fix the missing .owner in tpm_bios_measurements_ops
      tpm: have event log use the tpm_chip
      tpm: drop tpm1_chip_register(/unregister)
      tpm: replace dynamically allocated bios_dir with a static array
      tpm: replace symbolic permission with octal for securityfs files
      char: tpm: fix kerneldoc tpm2_unseal_trusted name typo
      tpm_tis: Allow tpm_tis to be bound using DT
      tpm, tpm_vtpm_proxy: add kdoc comments for VTPM_PROXY_IOC_NEW_DEV
      tpm: Only call pm_runtime_get_sync if device has a parent
      tpm: define a generic open() method for ascii & bios measurements
      Documentation: tpm: add the Physical TPM device tree binding documentation
      ...

commit 6804f6bba09997393904a112f2043963a8e08abf
Author: Stefan Berger <stefanb@linux.vnet.ibm.com>
Date:   Mon Nov 7 07:14:33 2016 -0500

    tpm: Only call pm_runtime_get_sync if device has a parent
    
    Only call pm_runtime_get_sync if the device has a parent. This
    change fixes a crash in the tpm_vtpm_proxy driver since that
    driver does not have a parent device.
    
    Signed-off-by: Stefan Berger <stefanb@linux.vnet.ibm.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>

commit b2580c4ba788bd913759b14dc9f5a9ef2ada997d
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu Sep 15 14:46:21 2016 +0200

    mmc: rtsx_usb_sdmmc: Handle runtime PM while changing the led
    
    [ Upstream commit 4f48aa7a11bfed9502a7c85a5b68cd40ea827f73 ]
    
    Accesses of the rtsx sdmmc's parent device, which is the rtsx usb device,
    must be done when it's runtime resumed. Currently this isn't case when
    changing the led, so let's fix this by adding a pm_runtime_get_sync() and
    a pm_runtime_put() around those operations.
    
    Reported-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Tested-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Cc: <stable@vger.kernel.org>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 075eb5719d53e8bb4a406ad87e1de99319aa50f0
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Nov 14 19:38:31 2016 -0800

    bq24190_charger: Fix PM runtime use for bq24190_battery_set_property
    
    There's a typo, it should do pm_runtime_get_sync, not put.
    
    Fixes: d7bf353fd0aa3 ("bq24190_charger: Add support for TI BQ24190 Battery Charger")
    Cc: Mark A. Greer <mgreer@animalcreek.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Mark Greer <mgreer@animalcreek.com>
    Signed-off-by: Sebastian Reichel <sre@kernel.org>

commit 4f909e2f1edde04f6eeea17404b2423da61282ee
Author: Nishanth Menon <nm@ti.com>
Date:   Fri Jun 24 11:50:39 2016 -0500

    hwrng: omap - Fix assumption that runtime_get_sync will always succeed
    
    commit 61dc0a446e5d08f2de8a24b45f69a1e302bb1b1b upstream.
    
    pm_runtime_get_sync does return a error value that must be checked for
    error conditions, else, due to various reasons, the device maynot be
    enabled and the system will crash due to lack of clock to the hardware
    module.
    
    Before:
    12.562784] [00000000] *pgd=fe193835
    12.562792] Internal error: : 1406 [#1] SMP ARM
    [...]
    12.562864] CPU: 1 PID: 241 Comm: modprobe Not tainted 4.7.0-rc4-next-20160624 #2
    12.562867] Hardware name: Generic DRA74X (Flattened Device Tree)
    12.562872] task: ed51f140 ti: ed44c000 task.ti: ed44c000
    12.562886] PC is at omap4_rng_init+0x20/0x84 [omap_rng]
    12.562899] LR is at set_current_rng+0xc0/0x154 [rng_core]
    [...]
    
    After the proper checks:
    [   94.366705] omap_rng 48090000.rng: _od_fail_runtime_resume: FIXME:
    missing hwmod/omap_dev info
    [   94.375767] omap_rng 48090000.rng: Failed to runtime_get device -19
    [   94.382351] omap_rng 48090000.rng: initialization failed.
    
    Fixes: 665d92fa85b5 ("hwrng: OMAP: convert to use runtime PM")
    Cc: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit d7e3f23b042afd9babc9571538aeeadd18e685ce
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Jun 8 18:47:27 2016 +0200

    drm/radeon: Don't leak runtime pm ref on driver unload
    
    commit 19de659cb7216eb1c04889bd1a248593f296e19f upstream.
    
    radeon_driver_load_kms() calls pm_runtime_put_autosuspend() if
    radeon_is_px(dev), but radeon_driver_unload_kms() calls
    pm_runtime_get_sync() unconditionally. We therefore leak a runtime pm
    ref whenever radeon is unloaded on a non-PX machine or if runpm=0. The
    GPU will subsequently never runtime suspend after loading radeon again.
    
    Fix by taking the runtime pm ref under the same condition that it was
    released on driver load.
    
    Fixes: 10ebc0bc0934 ("drm/radeon: add runtime PM support (v2)")
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/aaf71106c042126817aeca8b8e54ed468ab61ef7.1465392124.git.lukas@wunner.de
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 70f78252b7248e1342799e3404a440a6e791230f
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Jun 8 18:47:27 2016 +0200

    drm/nouveau: Don't leak runtime pm ref on driver unload
    
    commit c1b16b45607976c76a3c41b8a319172b8b83f996 upstream.
    
    nouveau_drm_load() calls pm_runtime_put() if nouveau_runtime_pm != 0,
    but nouveau_drm_unload() calls pm_runtime_get_sync() unconditionally.
    We therefore leak a runtime pm ref whenever nouveau is loaded with
    runpm=0 and then unloaded. The GPU will subsequently never runtime
    suspend even if nouveau is loaded again with runpm=1.
    
    Fix by taking the runtime pm ref under the same condition that it was
    released on driver load.
    
    Fixes: 5addcf0a5f0f ("nouveau: add runtime PM support (v0.9)")
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Reported-by: Karol Herbst <karolherbst@gmail.com>
    Tested-by: Karol Herbst <karolherbst@gmail.com>
    Tested-by: Peter Wu <peter@lekensteyn.nl>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1544b82007037601fbc510b1a50edc56c529e75f.1465392124.git.lukas@wunner.de
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ea2f35c01d5ea72b43b9b4fb4c5b9417a9eb2fb8
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Nov 16 13:21:23 2016 -0600

    usb: musb: Fix sleeping function called from invalid context for hdrc glue
    
    Commit 65b3f50ed6fa ("usb: musb: Add PM runtime support for MUSB DSPS
    glue layer") wrongly added a call for pm_runtime_get_sync to otg_timer
    that runs in softirq context. That causes a "BUG: sleeping function called
    from invalid context" every time when polling the cable status:
    
    [<c015ebb4>] (__might_sleep) from [<c0413d60>] (__pm_runtime_resume+0x9c/0xa0)
    [<c0413d60>] (__pm_runtime_resume) from [<c04d0bc4>] (otg_timer+0x3c/0x254)
    [<c04d0bc4>] (otg_timer) from [<c0191180>] (call_timer_fn+0xfc/0x41c)
    [<c0191180>] (call_timer_fn) from [<c01915c0>] (expire_timers+0x120/0x210)
    [<c01915c0>] (expire_timers) from [<c0191acc>] (run_timer_softirq+0xa4/0xdc)
    [<c0191acc>] (run_timer_softirq) from [<c010168c>] (__do_softirq+0x12c/0x594)
    
    I did not notice that as I did not have CONFIG_DEBUG_ATOMIC_SLEEP enabled.
    And looks like also musb_gadget_queue() suffers from the same problem.
    
    Let's fix the issue by using a list of delayed work then call it on
    resume. Note that we want to do this only when musb core and it's
    parent devices are awake, and we need to make sure the DSPS glue
    timer is stopped as noted by Johan Hovold <johan@kernel.org>.
    Note that we already are re-enabling the timer with mod_timer() in
    dsps_musb_enable().
    
    Later on we may be able to remove other delayed work in the musb driver
    and just do it from pending_resume_work. But this should be done only
    for delayed work that does not have other timing requirements beyond
    just being run on resume.
    
    Fixes: 65b3f50ed6fa ("usb: musb: Add PM runtime support for MUSB DSPS
    glue layer")
    Reported-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Tested-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Bin Liu <b-liu@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5afc1b68a6ddc27746d31f775025afe75ec8122
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Nov 16 10:24:15 2016 -0800

    dmaengine: cppi41: More PM runtime fixes
    
    Fix use of u32 instead of int for checking for negative errors values
    as pointed out by Dan Carpenter <dan.carpenter@oracle.com>.
    
    And while testing the PM runtime error path by randomly returning
    failed values in runtime resume, I noticed two more places that need
    fixing:
    
    - If pm_runtime_get_sync() fails in probe, we still need to do
      pm_runtime_put_sync() to keep the use count happy. We could call
      pm_runtime_put_noidle() on the error path, but we're just going
      to call pm_runtime_disable() after that so pm_runtime_put_sync()
      will do what we want
    
    - We should print an error if pm_runtime_get_sync() fails in
      cppi41_dma_alloc_chan_resources() so we know where it happens
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 740b4be3f742 ("dmaengine: cpp41: Fix handling of error path")
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

commit a006c04e6218bb82c11888d9b99ef642bd64cf93
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Wed Nov 9 12:23:54 2016 -0200

    [media] exynos-gsc: Fixup clock management at ->remove()
    
    To make sure the clock is fully gated in ->remove(), we first need to
    to bring the device into full power by invoking pm_runtime_get_sync().
    
    Then, let's both unprepare and disable the clock.
    
    [mszyprow: rebased onto v4.9-rc4]
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Javier Martinez Canillas <javier@osg.samsung.com>
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 8146d19c374d341e14dbed49920a6de9118908d3
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Tue Sep 20 10:25:40 2016 -0500

    hwrng: omap - Only fail if pm_runtime_get_sync returns < 0
    
    commit ad8529fde9e3601180a839867a8ab041109aebb5 upstream.
    
    Currently omap-rng checks the return value of pm_runtime_get_sync and
    reports failure if anything is returned, however it should be checking
    if ret < 0 as pm_runtime_get_sync return 0 on success but also can return
    1 if the device was already active which is not a failure case. Only
    values < 0 are actual failures.
    
    Fixes: 61dc0a446e5d ("hwrng: omap - Fix assumption that runtime_get_sync will always succeed")
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit a89634cf709b12cf1e03f730636ab976b84f8481
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu Sep 15 14:46:21 2016 +0200

    mmc: rtsx_usb_sdmmc: Handle runtime PM while changing the led
    
    [ Upstream commit 4f48aa7a11bfed9502a7c85a5b68cd40ea827f73 ]
    
    Accesses of the rtsx sdmmc's parent device, which is the rtsx usb device,
    must be done when it's runtime resumed. Currently this isn't case when
    changing the led, so let's fix this by adding a pm_runtime_get_sync() and
    a pm_runtime_put() around those operations.
    
    Reported-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Tested-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Cc: <stable@vger.kernel.org>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit e0a339a90fe8488c3e872eb65f50ed4fc76089c3
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Tue Sep 20 10:25:40 2016 -0500

    hwrng: omap - Only fail if pm_runtime_get_sync returns < 0
    
    commit ad8529fde9e3601180a839867a8ab041109aebb5 upstream.
    
    Currently omap-rng checks the return value of pm_runtime_get_sync and
    reports failure if anything is returned, however it should be checking
    if ret < 0 as pm_runtime_get_sync return 0 on success but also can return
    1 if the device was already active which is not a failure case. Only
    values < 0 are actual failures.
    
    Fixes: 61dc0a446e5d ("hwrng: omap - Fix assumption that runtime_get_sync will always succeed")
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ea1d49d1630c1617cd04489faf419b0aeb18bfa
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Tue Sep 20 10:25:40 2016 -0500

    hwrng: omap - Only fail if pm_runtime_get_sync returns < 0
    
    commit ad8529fde9e3601180a839867a8ab041109aebb5 upstream.
    
    Currently omap-rng checks the return value of pm_runtime_get_sync and
    reports failure if anything is returned, however it should be checking
    if ret < 0 as pm_runtime_get_sync return 0 on success but also can return
    1 if the device was already active which is not a failure case. Only
    values < 0 are actual failures.
    
    Fixes: 61dc0a446e5d ("hwrng: omap - Fix assumption that runtime_get_sync will always succeed")
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d74d0b0c6be7fbe8753d3c9524f65f61ce25ed0
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu Sep 15 14:46:21 2016 +0200

    mmc: rtsx_usb_sdmmc: Handle runtime PM while changing the led
    
    commit 4f48aa7a11bfed9502a7c85a5b68cd40ea827f73 upstream.
    
    Accesses of the rtsx sdmmc's parent device, which is the rtsx usb device,
    must be done when it's runtime resumed. Currently this isn't case when
    changing the led, so let's fix this by adding a pm_runtime_get_sync() and
    a pm_runtime_put() around those operations.
    
    Reported-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Tested-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aef07c9db2fb6d4a7d9e0e5ee587c04c411c6369
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu Sep 15 14:46:21 2016 +0200

    mmc: rtsx_usb_sdmmc: Handle runtime PM while changing the led
    
    commit 4f48aa7a11bfed9502a7c85a5b68cd40ea827f73 upstream.
    
    Accesses of the rtsx sdmmc's parent device, which is the rtsx usb device,
    must be done when it's runtime resumed. Currently this isn't case when
    changing the led, so let's fix this by adding a pm_runtime_get_sync() and
    a pm_runtime_put() around those operations.
    
    Reported-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Tested-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f48aa7a11bfed9502a7c85a5b68cd40ea827f73
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu Sep 15 14:46:21 2016 +0200

    mmc: rtsx_usb_sdmmc: Handle runtime PM while changing the led
    
    Accesses of the rtsx sdmmc's parent device, which is the rtsx usb device,
    must be done when it's runtime resumed. Currently this isn't case when
    changing the led, so let's fix this by adding a pm_runtime_get_sync() and
    a pm_runtime_put() around those operations.
    
    Reported-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Tested-by: Ritesh Raj Sarraf <rrs@researchut.com>
    Cc: <stable@vger.kernel.org>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit 30066ce675d3af350bc5a53858991c0b518dda00
Merge: 6763afe4b9f3 c3afafa47898
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 10 14:04:16 2016 -0700

    Merge branch 'linus' of git://git.kernel.org/pub/scm/linux/kernel/git/herbert/crypto-2.6
    
    Pull crypto updates from Herbert Xu:
     "Here is the crypto update for 4.9:
    
      API:
       - The crypto engine code now supports hashes.
    
      Algorithms:
       - Allow keys >= 2048 bits in FIPS mode for RSA.
    
      Drivers:
       - Memory overwrite fix for vmx ghash.
       - Add support for building ARM sha1-neon in Thumb2 mode.
       - Reenable ARM ghash-ce code by adding import/export.
       - Reenable img-hash by adding import/export.
       - Add support for multiple cores in omap-aes.
       - Add little-endian support for sha1-powerpc.
       - Add Cavium HWRNG driver for ThunderX SoC"
    
    * 'linus' of git://git.kernel.org/pub/scm/linux/kernel/git/herbert/crypto-2.6: (137 commits)
      crypto: caam - treat SGT address pointer as u64
      crypto: ccp - Make syslog errors human-readable
      crypto: ccp - clean up data structure
      crypto: vmx - Ensure ghash-generic is enabled
      crypto: testmgr - add guard to dst buffer for ahash_export
      crypto: caam - Unmap region obtained by of_iomap
      crypto: sha1-powerpc - little-endian support
      crypto: gcm - Fix IV buffer size in crypto_gcm_setkey
      crypto: vmx - Fix memory corruption caused by p8_ghash
      crypto: ghash-generic - move common definitions to a new header file
      crypto: caam - fix sg dump
      hwrng: omap - Only fail if pm_runtime_get_sync returns < 0
      crypto: omap-sham - shrink the internal buffer size
      crypto: omap-sham - add support for export/import
      crypto: omap-sham - convert driver logic to use sgs for data xmit
      crypto: omap-sham - change the DMA threshold value to a define
      crypto: omap-sham - add support functions for sg based data handling
      crypto: omap-sham - rename sgl to sgl_tmp for deprecation
      crypto: omap-sham - align algorithms on word offset
      crypto: omap-sham - add context export/import stubs
      ...

commit 0e13a4948cbf910cf87f14331017adade75f7dd6
Author: Nishanth Menon <nm@ti.com>
Date:   Fri Jun 24 11:50:39 2016 -0500

    hwrng: omap - Fix assumption that runtime_get_sync will always succeed
    
    commit 61dc0a446e5d08f2de8a24b45f69a1e302bb1b1b upstream.
    
    pm_runtime_get_sync does return a error value that must be checked for
    error conditions, else, due to various reasons, the device maynot be
    enabled and the system will crash due to lack of clock to the hardware
    module.
    
    Before:
    12.562784] [00000000] *pgd=fe193835
    12.562792] Internal error: : 1406 [#1] SMP ARM
    [...]
    12.562864] CPU: 1 PID: 241 Comm: modprobe Not tainted 4.7.0-rc4-next-20160624 #2
    12.562867] Hardware name: Generic DRA74X (Flattened Device Tree)
    12.562872] task: ed51f140 ti: ed44c000 task.ti: ed44c000
    12.562886] PC is at omap4_rng_init+0x20/0x84 [omap_rng]
    12.562899] LR is at set_current_rng+0xc0/0x154 [rng_core]
    [...]
    
    After the proper checks:
    [   94.366705] omap_rng 48090000.rng: _od_fail_runtime_resume: FIXME:
    missing hwmod/omap_dev info
    [   94.375767] omap_rng 48090000.rng: Failed to runtime_get device -19
    [   94.382351] omap_rng 48090000.rng: initialization failed.
    
    Fixes: 665d92fa85b5 ("hwrng: OMAP: convert to use runtime PM")
    Cc: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aaad4422e7477908549a445c1edae9d45c9c1124
Author: Nishanth Menon <nm@ti.com>
Date:   Fri Jun 24 11:50:39 2016 -0500

    hwrng: omap - Fix assumption that runtime_get_sync will always succeed
    
    commit 61dc0a446e5d08f2de8a24b45f69a1e302bb1b1b upstream.
    
    pm_runtime_get_sync does return a error value that must be checked for
    error conditions, else, due to various reasons, the device maynot be
    enabled and the system will crash due to lack of clock to the hardware
    module.
    
    Before:
    12.562784] [00000000] *pgd=fe193835
    12.562792] Internal error: : 1406 [#1] SMP ARM
    [...]
    12.562864] CPU: 1 PID: 241 Comm: modprobe Not tainted 4.7.0-rc4-next-20160624 #2
    12.562867] Hardware name: Generic DRA74X (Flattened Device Tree)
    12.562872] task: ed51f140 ti: ed44c000 task.ti: ed44c000
    12.562886] PC is at omap4_rng_init+0x20/0x84 [omap_rng]
    12.562899] LR is at set_current_rng+0xc0/0x154 [rng_core]
    [...]
    
    After the proper checks:
    [   94.366705] omap_rng 48090000.rng: _od_fail_runtime_resume: FIXME:
    missing hwmod/omap_dev info
    [   94.375767] omap_rng 48090000.rng: Failed to runtime_get device -19
    [   94.382351] omap_rng 48090000.rng: initialization failed.
    
    Fixes: 665d92fa85b5 ("hwrng: OMAP: convert to use runtime PM")
    Cc: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4c3486e71beef32a2e67451a0e916e894401afe
Author: Nishanth Menon <nm@ti.com>
Date:   Fri Jun 24 11:50:39 2016 -0500

    hwrng: omap - Fix assumption that runtime_get_sync will always succeed
    
    commit 61dc0a446e5d08f2de8a24b45f69a1e302bb1b1b upstream.
    
    pm_runtime_get_sync does return a error value that must be checked for
    error conditions, else, due to various reasons, the device maynot be
    enabled and the system will crash due to lack of clock to the hardware
    module.
    
    Before:
    12.562784] [00000000] *pgd=fe193835
    12.562792] Internal error: : 1406 [#1] SMP ARM
    [...]
    12.562864] CPU: 1 PID: 241 Comm: modprobe Not tainted 4.7.0-rc4-next-20160624 #2
    12.562867] Hardware name: Generic DRA74X (Flattened Device Tree)
    12.562872] task: ed51f140 ti: ed44c000 task.ti: ed44c000
    12.562886] PC is at omap4_rng_init+0x20/0x84 [omap_rng]
    12.562899] LR is at set_current_rng+0xc0/0x154 [rng_core]
    [...]
    
    After the proper checks:
    [   94.366705] omap_rng 48090000.rng: _od_fail_runtime_resume: FIXME:
    missing hwmod/omap_dev info
    [   94.375767] omap_rng 48090000.rng: Failed to runtime_get device -19
    [   94.382351] omap_rng 48090000.rng: initialization failed.
    
    Fixes: 665d92fa85b5 ("hwrng: OMAP: convert to use runtime PM")
    Cc: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit ad8529fde9e3601180a839867a8ab041109aebb5
Author: Dave Gerlach <d-gerlach@ti.com>
Date:   Tue Sep 20 10:25:40 2016 -0500

    hwrng: omap - Only fail if pm_runtime_get_sync returns < 0
    
    Currently omap-rng checks the return value of pm_runtime_get_sync and
    reports failure if anything is returned, however it should be checking
    if ret < 0 as pm_runtime_get_sync return 0 on success but also can return
    1 if the device was already active which is not a failure case. Only
    values < 0 are actual failures.
    
    Fixes: 61dc0a446e5d ("hwrng: omap - Fix assumption that runtime_get_sync will always succeed")
    Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 7892a1f64a447b6f65fe2888688883b7c26d81d3
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Aug 9 12:36:41 2016 -0300

    [media] rcar-fcp: Make sure rcar_fcp_enable() returns 0 on success
    
    When resuming from suspend-to-RAM on r8a7795/salvator-x:
    
        dpm_run_callback(): pm_genpd_resume_noirq+0x0/0x90 returns 1
        PM: Device fe940000.fdp1 failed to resume noirq: error 1
        dpm_run_callback(): pm_genpd_resume_noirq+0x0/0x90 returns 1
        PM: Device fe944000.fdp1 failed to resume noirq: error 1
        dpm_run_callback(): pm_genpd_resume_noirq+0x0/0x90 returns 1
        PM: Device fe948000.fdp1 failed to resume noirq: error 1
    
    According to its documentation, rcar_fcp_enable() returns 0 on success
    or a negative error code if an error occurs.  Hence
    fdp1_pm_runtime_resume() and vsp1_pm_runtime_resume() forward its return
    value to their callers.
    
    However, rcar_fcp_enable() forwards the return value of
    pm_runtime_get_sync(), which can actually be 1 on success, leading to
    the resume failure above.
    
    To fix this, consider only negative values returned by
    pm_runtime_get_sync() to be failures.
    
    Fixes: 7b49235e83b2347c ("[media] v4l: Add Renesas R-Car FCP driver")
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit b78ea84a7d45b9e5ad2eee429a2140065a39d755
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Thu Aug 25 00:27:59 2016 +0200

    phy-twl4030-usb: initialize charging-related stuff via pm_runtime
    
    twl4030_phy_power_on() initializes some bits which are required for
    charging. As they are not set in twl4030_usb_runtime_resume()
    a call to pm_runtime_get_sync() is not sufficient to enable charging.
    
    This patch moves the initialization to twl4030_usb_runtime_resume()
    so everything needed for charging is initialized upon
    pm_runtime_get_sync().
    
    That also gives improved possibilities to debug problems in that area
    because the relevant parts can be checked separately. Charging can be
    enabled without having the musb subsystem active.
    
    As a side effect this hides some bugs in musb which causes
    unbalanced calls to phy_power_off()/phy_power_on() so that
    phy->power_count becomes -1.
    
    The result is that e.g. the GTA04 phone (dm3730 + twl4030) works
    finally as a usb gadget again and charging is working.
    
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>

commit 80fc6660caa64ebc7df7c78d886d2023fd652904
Author: Sekhar Nori <nsekhar@ti.com>
Date:   Tue Aug 23 11:57:39 2016 +0300

    phy: omap-usb2: support suspend/resume
    
    Relying on PM-ops for shutting down PHY clocks was a
    bad idea since the users (e.g. USB DWC3) might not
    have been suspended by then.
    
    Get rid of all PM-ops. It is the sole responsibility
    of the PHY user to properly turn OFF and de-initialize
    the PHY as part of its suspend routine.
    
    Enable/disable PHY clock as part of ->init()/->exit()
    call respectively. With this phy_init() and phy_exit()
    can be called by PHY user during suspend/resume.
    
    This is similar to what is done for ti-pipe3 driver.
    See 31c8954efb1b ("phy: ti-pipe3: fix suspend")
    
    The pm_runtime_enable() call in omap_usb2_probe()
    is still required because without it, phy_create()
    will not enable runtime PM on the phy device it
    creates and phy_init() will not call
    pm_runtime_get_sync().
    
    Without pm_runtime_get_sync(), ocp2scp hwmod will
    _not_ enable the IP and, thus, we will have abort
    exceptions.
    
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>

commit 549c50af251969ecc8de1f773921c2a861fd240b
Author: Jyri Sarha <jsarha@ti.com>
Date:   Mon Aug 8 15:39:15 2016 +0530

    pwm: pwm-tipwmss: Remove all runtime PM gets/puts
    
    Remove all pm_runtime_get_sync() and pm_runtime_put_sync() call as well
    as the dummy pm_ops from the pwm-tipwmss driver. No registers are being
    modified. The runtime PM still needs to be enabled, so that the runtime
    PM framework can take care of enabling/disabling the PWMSS clock when
    submodules of PWMSS (ECAP or EHRPWM) call runtime PM APIs. With this
    change PWMSS clock goes to idle when none of the submodules are in use.
    
    Signed-off-by: Jyri Sarha <jsarha@ti.com>
    Signed-off-by: Vignesh R <vigneshr@ti.com>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>

commit b0be76bf54cbc1a002b266e35544eefb3a5417cf
Merge: cc4163daaaa1 603f2c9f45c6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Sep 2 07:53:00 2016 -0700

    Merge tag 'drm-fixes-for-4.8-rc5' of git://people.freedesktop.org/~airlied/linux
    
    Pull drm fixes from Dave Airlie:
     "Contains fixes for imx, amdgpu, vc4, msm and one nouveau ACPI fix"
    
    * tag 'drm-fixes-for-4.8-rc5' of git://people.freedesktop.org/~airlied/linux:
      drm/amdgpu: record error code when ring test failed
      drm/amd/amdgpu: compute ring test fail during S4 on CI
      drm/amd/amdgpu: sdma resume fail during S4 on CI
      drm/nouveau/acpi: use DSM if bridge does not support D3cold
      drm/imx: fix crtc vblank state regression
      drm/imx: Add active plane reconfiguration support
      drm/msm: protect against faults from copy_from_user() in submit ioctl
      drm/msm: fix use of copy_from_user() while holding spinlock
      drm/vc4: Fix oops when userspace hands in a bad BO.
      drm/vc4: Fix overflow mem unreferencing when the binner runs dry.
      drm/vc4: Free hang state before destroying BO cache.
      drm/vc4: Fix handling of a pm_runtime_get_sync() success case.
      drm/vc4: Use drm_malloc_ab to fix large rendering jobs.
      drm/vc4: Use drm_free_large() on handles to match its allocation.

commit 603f2c9f45c6620afd65b60ec084c1ea7c36b2ec
Merge: 532294252715 552416c146fa
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri Sep 2 15:55:15 2016 +1000

    Merge tag 'drm-vc4-fixes-2016-08-29' of https://github.com/anholt/linux into drm-fixes
    
    This pull request brings in fixes for VC4 3D in 4.8, most of which are
    covered by testcases.
    
    * tag 'drm-vc4-fixes-2016-08-29' of https://github.com/anholt/linux:
      drm/vc4: Fix oops when userspace hands in a bad BO.
      drm/vc4: Fix overflow mem unreferencing when the binner runs dry.
      drm/vc4: Free hang state before destroying BO cache.
      drm/vc4: Fix handling of a pm_runtime_get_sync() success case.
      drm/vc4: Use drm_malloc_ab to fix large rendering jobs.
      drm/vc4: Use drm_free_large() on handles to match its allocation.

commit 63d19e0693668de5ce46b5f0f948645bf43b546b
Author: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
Date:   Thu Aug 25 11:39:32 2016 +0100

    ASoC: arizona: Wait for resume before enabling FLL
    
    When enabling an FLL use pm_runtime_get_sync() instead of
    pm_runtime_get() to ensure that all the register settings
    have been written out and the codec is powered-up before
    we write the enable bit.
    
    Signed-off-by: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 1f50ad2c86cdecc223e4098adfc5aa3a4e8d7e49
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Fri Aug 26 14:09:04 2016 +0100

    i2c: tegra: Add runtime power-management support
    
    Update the Tegra I2C driver to use runtime PM and move the code in the
    tegra_i2c_clock_enable/disable() functions to the PM runtime resume and
    suspend callbacks, respectively.
    
    Note that given that CONFIG_PM is not mandatory for Tegra, if CONFIG_PM
    is not enabled and so runtime PM is not enabled, ensure that the I2C
    clocks are turned on during probe and kept on by calling the resume
    callback directly.
    
    In the function tegra_i2c_init(), the variable 'err' does not need to be
    initialised to zero in tegra_i2c_init() because it is initialised when
    pm_runtime_get_sync() is called. Furthermore, to ensure we only return 0
    from tegra_i2c_init(), it is necessary to re-initialise 'err' to 0 after
    a successful call to pm_runtime_get_sync() because it can return a
    positive value on success. However, alternatively re-initialise 'err' by
    using the return value of the function tegra_i2c_flush_fifos() because
    it can only be 0 or -ETIMEDOUT.
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Acked-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit ba75faf43dc60744608ffa1412fdeceff2126cbc
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Aug 9 12:36:41 2016 -0300

    [media] rcar-fcp: Make sure rcar_fcp_enable() returns 0 on success
    
    When resuming from suspend-to-RAM on r8a7795/salvator-x:
    
        dpm_run_callback(): pm_genpd_resume_noirq+0x0/0x90 returns 1
        PM: Device fe940000.fdp1 failed to resume noirq: error 1
        dpm_run_callback(): pm_genpd_resume_noirq+0x0/0x90 returns 1
        PM: Device fe944000.fdp1 failed to resume noirq: error 1
        dpm_run_callback(): pm_genpd_resume_noirq+0x0/0x90 returns 1
        PM: Device fe948000.fdp1 failed to resume noirq: error 1
    
    According to its documentation, rcar_fcp_enable() returns 0 on success
    or a negative error code if an error occurs.  Hence
    fdp1_pm_runtime_resume() and vsp1_pm_runtime_resume() forward its return
    value to their callers.
    
    However, rcar_fcp_enable() forwards the return value of
    pm_runtime_get_sync(), which can actually be 1 on success, leading to
    the resume failure above.
    
    To fix this, consider only negative values returned by
    pm_runtime_get_sync() to be failures.
    
    Fixes: 7b49235e83b2347c ("[media] v4l: Add Renesas R-Car FCP driver")
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 163195fc12cae0c8b5c0d74d3ba8d2c5f81773bc
Author: Eric Anholt <eric@anholt.net>
Date:   Tue Jul 26 13:47:12 2016 -0700

    drm/vc4: Fix handling of a pm_runtime_get_sync() success case.
    
    If the device was already up, a 1 is returned instead of 0.  We were
    erroring out, leading the 3D driver to sometimes fail at screen
    initialization (generally with ENOENT returned to it).
    
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Fixes: af713795c59f ("drm/vc4: Add a getparam ioctl for getting the V3D identity regs.")

commit d81b7f34034034e17409809a71d013ae314ae81c
Author: Jyri Sarha <jsarha@ti.com>
Date:   Wed Jun 22 17:26:46 2016 +0300

    drm/tilcdc: Remove unnecessary pm_runtime_get() and *_put() calls
    
    Remove unnecessary pm_runtime_get() and *_put() calls from commit
    phase callbacks. Those calls are not needed since we have the whole
    commit phase between pm_runtime_get_sync() and pm_runtime_put_sync().
    
    Signed-off-by: Jyri Sarha <jsarha@ti.com>

commit 213fa10db2f9c6725946cfa682990277eb9cd565
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Thu Jul 28 20:50:37 2016 +0300

    ARM: OMAP2+: omap_device: fix crash on omap_device removal
    
    Below call chain causes system crash when OMAP device is
    removed by calling of_platform_depopulate()/device_del():
    
    device_del()
    - blocking_notifier_call_chain(&dev->bus->p->bus_notifier,
                                 BUS_NOTIFY_DEL_DEVICE, dev);
      - _omap_device_notifier_call()
        - omap_device_delete()
          - od->pdev->archdata.od = NULL;
            kfree(od->hwmods);
            kfree(od);
      - bus_remove_device()
        - device_release_driver()
          - __device_release_driver()
            - pm_runtime_get_sync()
               - _od_runtime_resume()
                 - omap_hwmod_enable() <- OOPS od's delted already
    
    Backtrace:
    Unable to handle kernel NULL pointer dereference at virtual address 0000000d
    pgd = eb100000
    [0000000d] *pgd=ad6e1831, *pte=00000000, *ppte=00000000
    Internal error: Oops: 17 [#1] PREEMPT SMP ARM
    CPU: 1 PID: 1273 Comm: modprobe Not tainted 4.4.15-rt19-00115-ge4d3cd3-dirty #68
    Hardware name: Generic DRA74X (Flattened Device Tree)
    task: eb1ee800 ti: ec962000 task.ti: ec962000
    PC is at omap_device_enable+0x10/0x90
    LR is at _od_runtime_resume+0x10/0x24
    [...]
    [<c00299dc>] (omap_device_enable) from [<c0029a6c>] (_od_runtime_resume+0x10/0x24)
    [<c0029a6c>] (_od_runtime_resume) from [<c04ad404>] (__rpm_callback+0x20/0x34)
    [<c04ad404>] (__rpm_callback) from [<c04ad438>] (rpm_callback+0x20/0x80)
    [<c04ad438>] (rpm_callback) from [<c04aee28>] (rpm_resume+0x48c/0x964)
    [<c04aee28>] (rpm_resume) from [<c04af360>] (__pm_runtime_resume+0x60/0x88)
    [<c04af360>] (__pm_runtime_resume) from [<c04a4974>] (__device_release_driver+0x30/0x100)
    [<c04a4974>] (__device_release_driver) from [<c04a4a60>] (device_release_driver+0x1c/0x28)
    [<c04a4a60>] (device_release_driver) from [<c04a38c0>] (bus_remove_device+0xec/0x144)
    [<c04a38c0>] (bus_remove_device) from [<c04a0764>] (device_del+0x10c/0x210)
    [<c04a0764>] (device_del) from [<c04a67b0>] (platform_device_del+0x18/0x84)
    [<c04a67b0>] (platform_device_del) from [<c04a6828>] (platform_device_unregister+0xc/0x20)
    [<c04a6828>] (platform_device_unregister) from [<c05adcfc>] (of_platform_device_destroy+0x8c/0x90)
    [<c05adcfc>] (of_platform_device_destroy) from [<c04a02f0>] (device_for_each_child+0x4c/0x78)
    [<c04a02f0>] (device_for_each_child) from [<c05adc5c>] (of_platform_depopulate+0x30/0x44)
    [<c05adc5c>] (of_platform_depopulate) from [<bf123920>] (cpsw_remove+0x68/0xf4 [ti_cpsw])
    [<bf123920>] (cpsw_remove [ti_cpsw]) from [<c04a68d8>] (platform_drv_remove+0x24/0x3c)
    [<c04a68d8>] (platform_drv_remove) from [<c04a49c8>] (__device_release_driver+0x84/0x100)
    [<c04a49c8>] (__device_release_driver) from [<c04a4b20>] (driver_detach+0xac/0xb0)
    [<c04a4b20>] (driver_detach) from [<c04a3be8>] (bus_remove_driver+0x60/0xd4)
    [<c04a3be8>] (bus_remove_driver) from [<c00d9870>] (SyS_delete_module+0x184/0x20c)
    [<c00d9870>] (SyS_delete_module) from [<c0010540>] (ret_fast_syscall+0x0/0x1c)
    Code: e3500000 e92d4070 1590630c 01a06000 (e5d6300d)
    
    Hence, fix it by using BUS_NOTIFY_REMOVED_DEVICE event for OMAP device
    deletion which is sent when DD has finished processing of device
    deletion.
    
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8448cefe499a45222430ebbcabcd9e26369895c3
Merge: 818e607b57c9 9c99e5e51988
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 27 15:18:53 2016 -0700

    Merge tag 'hsi-for-4.8' of git://git.kernel.org/pub/scm/linux/kernel/git/sre/linux-hsi
    
    Pull HSI updates from Sebastian Reichel:
    
     - proper runtime pm support for omap-ssi and ssi-protocol
    
     - misc fixes
    
    * tag 'hsi-for-4.8' of git://git.kernel.org/pub/scm/linux/kernel/git/sre/linux-hsi: (24 commits)
      HSI: omap_ssi: drop pm_runtime_irq_safe
      HSI: omap_ssi_port: use rpm autosuspend API
      HSI: omap_ssi: call msg->complete() from process context
      HSI: omap_ssi_port: ensure clocks are kept enabled during transfer
      HSI: omap_ssi_port: replace pm_runtime_put_sync with non-sync variant
      HSI: omap_ssi_port: avoid calling runtime_pm_*_sync inside spinlock
      HSI: omap_ssi_port: avoid pm_runtime_get_sync in ssi_start_dma and ssi_start_pio
      HSI: omap_ssi_port: switch to threaded pio irq
      HSI: omap_ssi_core: remove pm_runtime_get_sync call from tasklet
      HSI: omap_ssi_core: use pm_runtime_put instead of pm_runtime_put_sync
      HSI: omap_ssi_port: prepare start_tx/stop_tx for blocking pm_runtime calls
      HSI: core: switch port event notifier from atomic to blocking
      HSI: omap_ssi_port: replace wkin_cken with atomic bitmap operations
      HSI: omap_ssi: convert cawake irq handler to thread
      HSI: ssi_protocol: fix ssip_xmit invocation
      HSI: ssi_protocol: replace spin_lock with spin_lock_bh
      HSI: ssi_protocol: avoid ssi_waketest call with held spinlock
      HSI: omap_ssi: do not reset module
      HSI: omap_ssi_port: remove useless newline
      hsi: Only descend into hsi directory when CONFIG_HSI is set
      ...

commit 5dbf9612eeb5bcb863d727439754980847e45d5a
Author: Jaroslav Kysela <perex@perex.cz>
Date:   Fri Jun 17 13:35:56 2016 +0200

    ALSA: hdac_regmap - fix the register access for runtime PM
    
    commit 8198868f0a283eb23e264951632ce61ec2f82228 upstream.
    
    Call path:
    
      1) snd_hdac_power_up_pm()
      2) snd_hdac_power_up()
      3) pm_runtime_get_sync()
      4) __pm_runtime_resume()
      5) rpm_resume()
    
    The rpm_resume() returns 1 when the device is already active.
    Because the return value is unmodified, the hdac regmap read/write
    functions should allow this value for the retry I/O operation, too.
    
    Signed-off-by: Jaroslav Kysela <perex@perex.cz>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd79272696ef21fb03d8b140c4530ac6b049e417
Author: Archit Taneja <architt@codeaurora.org>
Date:   Wed Jun 15 18:04:31 2016 +0530

    drm/msm: Call pm_runtime_enable/disable for newly created devices
    
    With the new device hierarchy for MDP5, we need to enable runtime PM
    for both the toplevel MDSS device and the MDP5 device itself. Enable
    runtime PM for the new devices.
    
    Since MDP4 and MDP5 now have different places where runtime PM is
    enabled, remove the previous pm_runtime_enable/disable calls, and
    squash them in the respective kms drivers.
    
    The new device hierarchy (as expressed in the DT bindings) has the GDSC
    tied only to the MDSS wrapper device. This GDSC needs to be enabled for
    accessing any register in the MDSS sub-blocks. Once every driver is
    runtime adapted, the GDSC will be enabled when any sub-block device
    calls runtime_get because of the parent-child relationship with MDSS.
    
    Until then, we call pm_runtime_get_sync() once for the MDSS device to
    ensure the GDSC is never disabled. This will be removed once all the
    drivers are runtime PM adapted.
    
    The error handling paths become a bit tricky when we call these runtime
    PM funcs. There doesn't seem to be any helper that checks if runtime PM
    is enabled already. Add bool variables in mdp4_kms/mdp5_kms structs to
    check if the driver had managed to call pm_runtime_enable before bailing
    out.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 61e13db9cc8945d53f72d4021594ee3be214e667
Author: David Lin <dtwlin@google.com>
Date:   Thu Jul 14 15:13:00 2016 -0500

    greybus: bundle: add runtime pm support
    
    This patch adds runtime pm support for the bundle core. Unbound bundle
    devices are always deactivated. During probe, Runtime PM status is set
    to enabled and active and the usage count is incremented. If the driver
    supports runtime PM, it should call pm_runtime_put() in its probe
    routine and pm_runtime_get_sync() in remove routine as bundle needs to
    be resume before it can be deactivated.
    
    Testing Done:
     - Check runtime_status of the bundle driver when bundle goes to suspend
    
    Signed-off-by: David Lin <dtwlin@google.com>
    Signed-off-by: Axel Haslam <ahaslam@baylibre.com>
    Reviewed-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Alex Elder <elder@linaro.org>

commit 0b1ca750b5fe6e457768c1b835f7f380a288ca58
Author: Jaroslav Kysela <perex@perex.cz>
Date:   Fri Jun 17 13:35:56 2016 +0200

    ALSA: hdac_regmap - fix the register access for runtime PM
    
    [ Upstream commit 8198868f0a283eb23e264951632ce61ec2f82228 ]
    
    Call path:
    
      1) snd_hdac_power_up_pm()
      2) snd_hdac_power_up()
      3) pm_runtime_get_sync()
      4) __pm_runtime_resume()
      5) rpm_resume()
    
    The rpm_resume() returns 1 when the device is already active.
    Because the return value is unmodified, the hdac regmap read/write
    functions should allow this value for the retry I/O operation, too.
    
    Signed-off-by: Jaroslav Kysela <perex@perex.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 62aa292b3eae920a80c2fd0ed0601a70328627f6
Author: Sebastian Reichel <sre@kernel.org>
Date:   Fri Jun 17 21:59:06 2016 +0200

    HSI: omap_ssi_port: avoid pm_runtime_get_sync in ssi_start_dma and ssi_start_pio
    
    These functions may be called from atomic context,
    so avoid synchronous runtime pm calls.
    
    Signed-off-by: Sebastian Reichel <sre@kernel.org>
    Tested-by: Pavel Machek <pavel@ucw.cz>

commit 927d3f8f73217fb19c28496321510335176955de
Author: Sebastian Reichel <sre@kernel.org>
Date:   Fri Jun 17 21:01:36 2016 +0200

    HSI: omap_ssi_core: remove pm_runtime_get_sync call from tasklet
    
    We may not call pm_runtime_get_sync() from tasklet, since
    it can block once pm_runtime_irq_safe is removed for omap-ssi.
    
    Since irq can should only be created for a running device,
    we assume, that the device is already running and use non-
    synchronous API instead.
    
    Signed-off-by: Sebastian Reichel <sre@kernel.org>
    Tested-by: Pavel Machek <pavel@ucw.cz>

commit 61dc0a446e5d08f2de8a24b45f69a1e302bb1b1b
Author: Nishanth Menon <nm@ti.com>
Date:   Fri Jun 24 11:50:39 2016 -0500

    hwrng: omap - Fix assumption that runtime_get_sync will always succeed
    
    pm_runtime_get_sync does return a error value that must be checked for
    error conditions, else, due to various reasons, the device maynot be
    enabled and the system will crash due to lack of clock to the hardware
    module.
    
    Before:
    12.562784] [00000000] *pgd=fe193835
    12.562792] Internal error: : 1406 [#1] SMP ARM
    [...]
    12.562864] CPU: 1 PID: 241 Comm: modprobe Not tainted 4.7.0-rc4-next-20160624 #2
    12.562867] Hardware name: Generic DRA74X (Flattened Device Tree)
    12.562872] task: ed51f140 ti: ed44c000 task.ti: ed44c000
    12.562886] PC is at omap4_rng_init+0x20/0x84 [omap_rng]
    12.562899] LR is at set_current_rng+0xc0/0x154 [rng_core]
    [...]
    
    After the proper checks:
    [   94.366705] omap_rng 48090000.rng: _od_fail_runtime_resume: FIXME:
    missing hwmod/omap_dev info
    [   94.375767] omap_rng 48090000.rng: Failed to runtime_get device -19
    [   94.382351] omap_rng 48090000.rng: initialization failed.
    
    Fixes: 665d92fa85b5 ("hwrng: OMAP: convert to use runtime PM")
    Cc: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 4a7885476aa06725261393552ebeee423246784f
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Jun 8 18:47:27 2016 +0200

    drm/amdgpu: Don't leak runtime pm ref on driver unload
    
    amdgpu_driver_load_kms() calls pm_runtime_put_autosuspend() if
    amdgpu_device_is_px(dev), but amdgpu_driver_unload_kms() calls
    pm_runtime_get_sync() unconditionally. We therefore leak a runtime pm
    ref whenever amdgpu is unloaded on a non-PX machine or if runpm=0. The
    GPU will subsequently never runtime suspend after loading amdgpu again.
    
    Fix by taking the runtime pm ref under the same condition that it was
    released on driver load.
    
    Fixes: d38ceaf99ed0 ("drm/amdgpu: add core driver (v4)")
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/86364eeb5711323608930c4f0f69046792ff6d3c.1465392124.git.lukas@wunner.de

commit 19de659cb7216eb1c04889bd1a248593f296e19f
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Jun 8 18:47:27 2016 +0200

    drm/radeon: Don't leak runtime pm ref on driver unload
    
    radeon_driver_load_kms() calls pm_runtime_put_autosuspend() if
    radeon_is_px(dev), but radeon_driver_unload_kms() calls
    pm_runtime_get_sync() unconditionally. We therefore leak a runtime pm
    ref whenever radeon is unloaded on a non-PX machine or if runpm=0. The
    GPU will subsequently never runtime suspend after loading radeon again.
    
    Fix by taking the runtime pm ref under the same condition that it was
    released on driver load.
    
    Fixes: 10ebc0bc0934 ("drm/radeon: add runtime PM support (v2)")
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/aaf71106c042126817aeca8b8e54ed468ab61ef7.1465392124.git.lukas@wunner.de

commit c1b16b45607976c76a3c41b8a319172b8b83f996
Author: Lukas Wunner <lukas@wunner.de>
Date:   Wed Jun 8 18:47:27 2016 +0200

    drm/nouveau: Don't leak runtime pm ref on driver unload
    
    nouveau_drm_load() calls pm_runtime_put() if nouveau_runtime_pm != 0,
    but nouveau_drm_unload() calls pm_runtime_get_sync() unconditionally.
    We therefore leak a runtime pm ref whenever nouveau is loaded with
    runpm=0 and then unloaded. The GPU will subsequently never runtime
    suspend even if nouveau is loaded again with runpm=1.
    
    Fix by taking the runtime pm ref under the same condition that it was
    released on driver load.
    
    Fixes: 5addcf0a5f0f ("nouveau: add runtime PM support (v0.9)")
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Reported-by: Karol Herbst <karolherbst@gmail.com>
    Tested-by: Karol Herbst <karolherbst@gmail.com>
    Tested-by: Peter Wu <peter@lekensteyn.nl>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1544b82007037601fbc510b1a50edc56c529e75f.1465392124.git.lukas@wunner.de

commit 328082376aea6016b63bca1e5c067a9539f9e8c9
Author: Roger Quadros <rogerq@ti.com>
Date:   Fri Jun 10 14:38:02 2016 +0300

    usb: dwc3: fix runtime PM in error path
    
    If there is a failure after pm_runtime_enable/get_sync()
    we need to call pm_runtime_disable/put_sync().
    
    Otherwise it will lead to an unbalanced pm_runtime_enable() on the
    subsequent probe if the earlier probe bailed out due to -EPROBE_DEFER.
    
    pm_runtime_get_sync() can fail as well so deal with that case too.
    
    Signed-off-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit 8198868f0a283eb23e264951632ce61ec2f82228
Author: Jaroslav Kysela <perex@perex.cz>
Date:   Fri Jun 17 13:35:56 2016 +0200

    ALSA: hdac_regmap - fix the register access for runtime PM
    
    Call path:
    
      1) snd_hdac_power_up_pm()
      2) snd_hdac_power_up()
      3) pm_runtime_get_sync()
      4) __pm_runtime_resume()
      5) rpm_resume()
    
    The rpm_resume() returns 1 when the device is already active.
    Because the return value is unmodified, the hdac regmap read/write
    functions should allow this value for the retry I/O operation, too.
    
    Signed-off-by: Jaroslav Kysela <perex@perex.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit d963f6512e15fb2c0a9e9770078e2206f55c2f7a
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Thu Jun 2 11:17:13 2016 +0300

    PCI: Power on bridges before scanning new devices
    
    When a PCI device is removed through sysfs interface, the upstream bridge
    (PCIe port) can be runtime suspended if it was the last device on that bus.
    Now, if the bridge is in D3 we cannot find devices below the bridge
    anymore.  For example following fails to find the removed device again:
    
      # echo 1 > /sys/bus/pci/devices/0000:00:01.0/0000:01:00.0/remove
      # echo 1 > /sys/bus/pci/devices/0000:00:01.0/rescan
    
    Where 0000:00:01.0 is the bridge device.
    
    In order to be able to rescan devices below the bridge add
    pm_runtime_get_sync()/pm_runtime_put() calls to pci_scan_bridge().  This
    should keep bridges powered on while their children devices are being
    scanned.
    
    Reported-by: Peter Wu <peter@lekensteyn.nl>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 34590a40fef3cf6d35fe6a7b67d8035904af12fb
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Wed Apr 6 13:01:46 2016 +0300

    dmaengine: edma: Remove dynamic TPTC power management feature
    
    commit 23f49fd2ea9bc8e1c8cff0126cd71b071ea9e91f upstream.
    
    The dynamic or on demand pm_runtime does not work correctly on am335x and
    am437x due to interference with hwmod.
    Fall back using the pm_runtime usage as it was in the old driver stack,
    meaning that at probe time call pm_runtime_enable() and
    pm_runtime_get_sync() for the TPTCs as well.
    
    Fixes: 1be5336bc7ba ("dmaengine: edma: New device tree binding")
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Reported-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fa88c51c73a67e7eeda1fcafd809f9185790b31
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Tue Apr 19 21:09:49 2016 +0300

    drivers: net: cpsw: fix wrong regs access in cpsw_ndo_open
    
    The cpsw_ndo_open() could try to access CPSW registers before
    calling pm_runtime_get_sync(). This will trigger L3 error:
    
     WARNING: CPU: 0 PID: 21 at drivers/bus/omap_l3_noc.c:147 l3_interrupt_handler+0x220/0x34c()
     44000000.ocp:L3 Custom Error: MASTER M2 (64-bit) TARGET L4_FAST (Idle): Data Access in Supervisor mode during Functional access
    
    and CPSW will stop functioning.
    
    Hence, fix it by moving pm_runtime_get_sync() before the first access
    to CPSW registers in cpsw_ndo_open().
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 23f49fd2ea9bc8e1c8cff0126cd71b071ea9e91f
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Wed Apr 6 13:01:46 2016 +0300

    dmaengine: edma: Remove dynamic TPTC power management feature
    
    The dynamic or on demand pm_runtime does not work correctly on am335x and
    am437x due to interference with hwmod.
    Fall back using the pm_runtime usage as it was in the old driver stack,
    meaning that at probe time call pm_runtime_enable() and
    pm_runtime_get_sync() for the TPTCs as well.
    
    Fixes: 1be5336bc7ba ("dmaengine: edma: New device tree binding")
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Reported-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

commit 7822d8eb3551dce8f0e594807d030cf8be342540
Author: Shawn Lin <shawn.lin@rock-chips.com>
Date:   Thu Jan 28 16:14:18 2016 +0800

    phy: core: fix wrong err handle for phy_power_on
    
    [ Upstream commit b82fcabe212a11698fd4b3e604d2f81d929d22f6 ]
    
    If phy_pm_runtime_get_sync failed but we already
    enable regulator, current code return directly without
    doing regulator_disable. This patch fix this problem
    and cleanup err handle of phy_power_on to be more readable.
    
    Fixes: 3be88125d85d ("phy: core: Support regulator ...")
    Cc: <stable@vger.kernel.org> # v3.18+
    Cc: Roger Quadros <rogerq@ti.com>
    Cc: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Shawn Lin <shawn.lin@rock-chips.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 2614da7712d1cb25f0f3c00e6ef530ab4d9dbf42
Author: Shawn Lin <shawn.lin@rock-chips.com>
Date:   Thu Jan 28 16:14:18 2016 +0800

    phy: core: fix wrong err handle for phy_power_on
    
    [ Upstream commit b82fcabe212a11698fd4b3e604d2f81d929d22f6 ]
    
    If phy_pm_runtime_get_sync failed but we already
    enable regulator, current code return directly without
    doing regulator_disable. This patch fix this problem
    and cleanup err handle of phy_power_on to be more readable.
    
    Fixes: 3be88125d85d ("phy: core: Support regulator ...")
    Cc: <stable@vger.kernel.org> # v3.18+
    Cc: Roger Quadros <rogerq@ti.com>
    Cc: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Shawn Lin <shawn.lin@rock-chips.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 532c6150f4dc54427cc148d0ea8cfb76661f9989
Author: Axel Lin <axel.lin@ingics.com>
Date:   Fri Mar 6 15:55:10 2015 +0800

    phy: core: Fixup return value of phy_exit when !pm_runtime_enabled
    
    [ Upstream commit 736b67a32062240592aad49033859f9712dd18ca ]
    
    When phy_pm_runtime_get_sync() returns -ENOTSUPP, phy_exit() also returns
    -ENOTSUPP if !phy->ops->exit. Fix it.
    Also move the code to override ret close to the code we got ret.
    I think it is less error prone this way.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Acked-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit be683dfd4c253e11a8e9d9263f5dd0fed8c21de3
Author: Shawn Lin <shawn.lin@rock-chips.com>
Date:   Thu Jan 28 16:14:18 2016 +0800

    phy: core: fix wrong err handle for phy_power_on
    
    commit b82fcabe212a11698fd4b3e604d2f81d929d22f6 upstream.
    
    If phy_pm_runtime_get_sync failed but we already
    enable regulator, current code return directly without
    doing regulator_disable. This patch fix this problem
    and cleanup err handle of phy_power_on to be more readable.
    
    Fixes: 3be88125d85d ("phy: core: Support regulator ...")
    Cc: Roger Quadros <rogerq@ti.com>
    Cc: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Shawn Lin <shawn.lin@rock-chips.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e266f6c3b75c6b1695483685ab16f2cdb54e47ec
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Dec 16 20:05:18 2015 +0100

    i2c: rcar: disable runtime PM correctly in slave mode
    
    commit b4cd08aa1f53c831e67dc5c6bc9f9acff27abcba upstream.
    
    When we also are I2C slave, we need to disable runtime PM because the
    address detection mechanism needs to be active all the time. However, we
    can reenable runtime PM once the slave instance was unregistered. So,
    use pm_runtime_get_sync/put to achieve this, since it has proper
    refcounting. pm_runtime_allow/forbid is like a global knob controllable
    from userspace which is unsuitable here.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd998ded5c1295c690285c04a6ef8bc014d14234
Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date:   Thu Feb 11 16:36:03 2016 +0200

    i2c: designware: Prevent runtime suspend during adapter registration
    
    There can be unnecessary runtime suspend-resume cycle during
    i2c-designware-platdrv probe when it registers the I2C adapter device. This
    happens because i2c-designware-platdrv is set to initially active platform
    device in its probe function and is a parent of I2C adapter.
    
    In that case power.usage_count of i2c-designware device is zero and
    pm_runtime_get()/pm_runtime_put() cycle during probe could put it into
    runtime suspend. This happens when the i2c_register_adapter() calls the
    device_register():
    
    i2c_register_adapter
      device_register
        device_add
          bus_probe_device
            device_initial_probe
              __device_attach
                if (dev->parent) pm_runtime_get_sync(dev->parent)
                ...
                if (dev->parent) pm_runtime_put(dev->parent)
    
    After that the i2c_register_adapter() continues registering I2C slave
    devices. In case slave device probe does I2C transfers the parent will
    resume again and thus get a needless runtime suspend/resume cycle during
    adapter registration.
    
    Prevent this while retaining the runtime PM status of i2c-designware by
    only incrementing/decrementing device power usage count during I2C
    adapter registration. That makes sure there won't be spurious runtime PM
    status changes and lets the driver core to idle the device after probe
    finishes.
    
    Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit b82fcabe212a11698fd4b3e604d2f81d929d22f6
Author: Shawn Lin <shawn.lin@rock-chips.com>
Date:   Thu Jan 28 16:14:18 2016 +0800

    phy: core: fix wrong err handle for phy_power_on
    
    If phy_pm_runtime_get_sync failed but we already
    enable regulator, current code return directly without
    doing regulator_disable. This patch fix this problem
    and cleanup err handle of phy_power_on to be more readable.
    
    Fixes: 3be88125d85d ("phy: core: Support regulator ...")
    Cc: <stable@vger.kernel.org> # v3.18+
    Cc: Roger Quadros <rogerq@ti.com>
    Cc: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Shawn Lin <shawn.lin@rock-chips.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>

commit 3214658855c01a0dd62f02feb2ce79846524c6a0
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Fri Dec 4 23:49:23 2015 +0200

    dmaengine: dw: platform: power on device on shutdown
    
    We have to call dw_dma_disable() to stop any ongoing transfer. On some
    platforms we can't do that since DMA device is powered off. Moreover we have no
    possibility at that point to check if the platform is affected or not. That's
    why we call pm_runtime_get_sync() / pm_runtime_put() unconditionally. On the
    other hand we can't use pm_runtime_suspended() because runtime PM framework is
    not fully used by the driver.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit a6392490fbb18f71d228d9c517516fa78fb23883
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Dec 15 11:37:40 2015 +0100

    watchdog: omap: don't disable runtime pm before starting device
    
    omap_wdt_start calls pm_runtime_get_sync so dropping a reference just
    before calling omap_wdt_start doesn't make much sense. Moreover there is
    no point to use the synchronous variant of pm_runtime_put because the
    driver doesn't care if the clock is disabled before or after
    omap_wdt_probe returns.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@iguana.be>

commit d234d2123fa734c8018f7d01ed5d663cf5e6f665
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu Nov 5 16:08:08 2015 +0100

    mmc: core: Keep host claimed in mmc_rescan() while calling host ops
    
    As mmc_claim_host() invokes pm_runtime_get_sync() for the mmc host device,
    it's important that the host is kept claimed for *all* accesses to it via
    the host_ops callbacks.
    
    In mmc_rescan(), the ->card_event() and the ->get_cd() callback are being
    invoked without claiming the host, let's fix this.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit b4cd08aa1f53c831e67dc5c6bc9f9acff27abcba
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Wed Dec 16 20:05:18 2015 +0100

    i2c: rcar: disable runtime PM correctly in slave mode
    
    When we also are I2C slave, we need to disable runtime PM because the
    address detection mechanism needs to be active all the time. However, we
    can reenable runtime PM once the slave instance was unregistered. So,
    use pm_runtime_get_sync/put to achieve this, since it has proper
    refcounting. pm_runtime_allow/forbid is like a global knob controllable
    from userspace which is unsuitable here.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Cc: stable@kernel.org

commit 3773c195d3874d38d1c5ac68868024b32a1f08c9
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Thu Dec 10 12:10:12 2015 +0100

    gpio: zynq: Do PM initialization earlier to support gpio hogs
    
    GPIO hogs registration is call at the end of gpiochip_add() function.
    Calling sequence is:
    gpiochip_add -> of_gpiochip_add -> of_gpiochip_scan_hogs ->
    gpiod_hog -> gpiochip_request_own_desc -> __gpiod_request ->
    chip->request -> zynq_gpio_request which calls pm_runtime_get_sync()
    which returns -13 because PM is not initialized yet.
    
    Initialize PM before gpiochip_add is called to fix this issue.
    
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Soren Brinkmann <soren.brinkmann@xilinx.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit e8b3a1a94d0aea81385adb9561ec17b38d0ba860
Author: Maciej S. Szmigiero <mail@maciej.szmigiero.name>
Date:   Thu Sep 3 21:38:30 2015 +0200

    net: fec: normalize return value of pm_runtime_get_sync() in MDIO write
    
    [ Upstream commit 42ea4457aea7aaeddf0c0b06724f297608f5e9d2 ]
    
    If fec MDIO write method succeeds its return value comes from
    call to pm_runtime_get_sync().
    But pm_runtime_get_sync() can also return 1.
    
    In case of Micrel KSZ9031 PHY this value will then
    be returned along the call chain of phy_write() ->
    ksz9031_extended_write() -> ksz9031_center_flp_timing() ->
    ksz9031_config_init() -> phy_init_hw() -> phy_attach_direct() ->
    phy_connect_direct().
    
    Then phy_connect() will cast it into a pointer using ERR_PTR(),
    which then fec_enet_mii_probe() will try to dereference
    resulting in an oops.
    
    Fix it by normalizing return value of pm_runtime_get_sync()
    to be zero if positive in MDIO write method.
    
    Fixes: 8fff755e9f8d ("net: fec: Ensure clocks are enabled while using mdio bus")
    Signed-off-by: Maciej Szmigiero <mail@maciej.szmigiero.name>
    Acked-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edd3bdbe9db1415f744bb5da0752675ddbd9eee0
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Fri Nov 13 16:39:38 2015 +0000

    dmaengine: tegra-apb: Correct runtime-pm usage
    
    The tegra-apb DMA driver enables runtime-pm but never calls
    pm_runtime_get/put and hence the runtime-pm callbacks are never invoked.
    The driver manages the clocks by directly calling clk_prepare_enable()
    and clk_unprepare_disable().
    
    Fix this by replacing the clk_prepare_enable() and clk_disable_unprepare()
    with pm_runtime_get_sync() and pm_runtime_put(), respectively. Note that
    the consequence of this is that if runtime-pm is disabled, then the clocks
    will remain on the entire time the driver is loaded. However, if
    runtime-pm is disabled, then power is not most likely not a concern.
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

commit 5de85b9d57aba3ed2e04759e6db3b9e826dd0b06
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Wed Nov 18 11:48:39 2015 +0100

    PM / runtime: Re-init runtime PM states at probe error and driver unbind
    
    There are two common expectations among several subsystems/drivers that
    deploys runtime PM support, but which isn't met by the driver core.
    
    Expectation 1)
    At ->probe() the subsystem/driver expects the runtime PM status of the
    device to be RPM_SUSPENDED, which is the initial status being assigned at
    device registration.
    
    This expectation is especially common among some of those subsystems/
    drivers that manages devices with an attached PM domain, as those requires
    the ->runtime_resume() callback at the PM domain level to be invoked
    during ->probe().
    
    Moreover these subsystems/drivers entirely relies on runtime PM resources
    being managed at the PM domain level, thus don't implement their own set
    of runtime PM callbacks.
    
    These are two scenarios that suffers from this unmet expectation.
    
    i) A failed ->probe() sequence requests probe deferral:
    
    ->probe()
      ...
      pm_runtime_enable()
      pm_runtime_get_sync()
      ...
    
    err:
      pm_runtime_put()
      pm_runtime_disable()
      ...
    
    As there are no guarantees that such sequence turns the runtime PM status
    of the device into RPM_SUSPENDED, the re-trying ->probe() may start with
    the status in RPM_ACTIVE.
    
    In such case the runtime PM core won't invoke the ->runtime_resume()
    callback because of a pm_runtime_get_sync(), as it considers the device to
    be already runtime resumed.
    
    ii) A driver re-bind sequence:
    
    At driver unbind, the subsystem/driver's >remove() callback invokes a
    sequence of runtime PM APIs, to undo actions during ->probe() and to put
    the device into low power state.
    
    ->remove()
      ...
      pm_runtime_put()
      pm_runtime_disable()
      ...
    
    Similar as in the failing ->probe() case, this sequence don't guarantee
    the runtime PM status of the device to turn into RPM_SUSPENDED.
    
    Trying to re-bind the driver thus causes the same issue as when re-trying
    ->probe(), in the probe deferral scenario.
    
    Expectation 2)
    Drivers that invokes the pm_runtime_irq_safe() API during ->probe(),
    triggers the runtime PM core to increase the usage count for the device's
    parent and permanently make it runtime resumed.
    
    The usage count is only dropped at device removal, which also allows it to
    be runtime suspended again.
    
    A re-trying ->probe() repeats the call to pm_runtime_irq_safe() and thus
    once more triggers the usage count of the device's parent to be increased.
    
    This leads to not only an imbalance issue of the usage count of the
    device's parent, but also to keep it runtime resumed permanently even if
    ->probe() fails.
    
    To address these issues, let's change the policy of the driver core to
    meet these expectations. More precisely, at ->probe() failures and driver
    unbind, restore the initial states of runtime PM.
    
    Although to still allow subsystem's to control PM for devices that doesn't
    ->probe() successfully, don't restore the initial states unless runtime PM
    is disabled.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Kevin Hilman <khilman@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit bf55555baaf80cdf2cc4176fee02545a07a8ff4a
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Sun Oct 25 11:09:34 2015 +0100

    dmaengine: sh: usb-dmac: Fix pm_runtime_{enable,disable}() imbalance
    
    If the call to pm_runtime_get_sync() failed, Runtime PM was left
    enabled.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

commit bad4274a69328256eb3eaad4baaefd1b33491f7e
Author: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
Date:   Fri Sep 11 15:00:56 2015 +0530

    drm/nouveau: fix memory leak
    
    If pm_runtime_get_sync() we were going to "out" but we missed freeing
    vma.
    
    Signed-off-by: Sudip Mukherjee <sudip@vectorindia.org>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit e6b5140b706689a38aaeabd9de8fb3e1531cf9cb
Author: Felipe Balbi <balbi@ti.com>
Date:   Thu Oct 29 08:57:30 2015 -0500

    spi: ti-qspi: improve ->remove() callback
    
    there's no need to call pm_runtime_get_sync()
    followed by pm_runtime_put(). We should, instead,
    just call pm_runtime_put_sync() and pm_runtime_disable().
    
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 8d1ffc8c982e4480059ef735e8f15f631e40e80c
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Sep 11 14:41:55 2015 +0200

    mmc: core: Keep host claimed while invoking mmc_power_off|up()
    
    As mmc_claim_host() invokes pm_runtime_get_sync() for the mmc host device,
    it's important that the host is kept claimed for *all* accesses to it via
    the host_ops callbacks.
    
    In some code paths for SDIO, particularly related to the PM support,
    mmc_power_off|up() is invoked without keeping the host claimed. Let's fix
    these.
    
    Moreover, mmc_start|stop_host() also invokes mmc_power_off|up() without
    claiming the host, let's fix these as well.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Kishon Vijay Abraham I <kishon@ti.com>

commit 9270b7b92615324ecda2b3fa0be98b4ab6c3e361
Author: Jeeja KP <jeeja.kp@intel.com>
Date:   Thu Oct 22 23:22:34 2015 +0530

    ASoC: Intel: Skylake: Fix return for pm_runtime_get_sync()
    
    pm_runtime_get_sync() will return a negative value in case of
    error and can return postive value for success.  The return check
    for pm_runtime_get_sync() must be less than 0, so fix it
    
    Signed-off-by: Jeeja KP <jeeja.kp@intel.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit f02b7d0c7b433b9a8175ac9027391272877a43ce
Author: Daniel Thompson <daniel.thompson@linaro.org>
Date:   Fri Oct 16 17:01:51 2015 +0100

    hwrng: exynos - Fix unbalanced PM runtime get/puts
    
    Currently this driver calls pm_runtime_get_sync() rampantly
    but never puts anything back. This makes it impossible for the
    device to autosuspend properly; it will remain fully active
    after the first use.
    
    Fix in the obvious way.
    
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Cc: Kukjin Kim <kgene@kernel.org>
    Cc: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Tested-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit a98f1b78ecf325bf29c9d3d1eb38cbc9340000af
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Tue Oct 13 16:10:28 2015 +0200

    PM / Domains: Fix validation of latency constraints in genpd governor
    
    Commit ba2bbfbf6307 (PM / Domains: Remove intermediate states from the
    power off sequence) changed the power off sequence in genpd. That also
    required some updates regarding the validation of latency constraints in
    the genpd governor. Unfortunate that wasn't covered, so let's fix this.
    
    From a runtime PM and latency point of view, we need to consider the worst
    case scenario while validating latency constraints. That's typically when
    a call to pm_runtime_get_sync() needs to wait for a ongoing runtime
    suspend operation to be carried out, as it then also needs to wait for the
    device to be runtime resumed again.
    
    The above mentioned commit made the genpd governor's ->stop_ok() callback
    responsible of validating genpd's device's runtime suspend/resume latency.
    In other words, the constraint needs to be validated towards the relevant
    latencies present in genpd's ->runtime_suspend|resume() callbacks.
    
    Earlier, that included latencies from the ->stop|start() callbacks, but as
    ->save|restore_state() are now also being invoked from genpd's
    ->runtime_suspend|resume() and to comply with the worst case scenario,
    let's take also those latencies into account.
    
    Fixes: ba2bbfbf6307 (PM / Domains: Remove intermediate states from the power off sequence)
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 8ebe9d163e93e10458f3fd7522f29f9149e58632
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Thu Sep 3 22:40:53 2015 +0200

    spi: s3c64xx: replace clock disabling with runtime PM suspend call in remove function
    
    Simplify s3c64xx_spi_remove by replacing the clock disabling with calling
    runtime PM suspend which does the same.
    Waking up the device if it was suspended wouldn't be strictly needed
    for this driver but using pm_runtime_get_sync is cleaner and makes
    s3c64xx_spi_remove more consistent with the runtime PM handling in
    s3c64xx_spi_setup.
    
    pm_runtime_force_suspend does most of the work for us:
    disabling the clocks, disabling runtime PM and setting it to
    "suspended" state.
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Reviewed-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 42ea4457aea7aaeddf0c0b06724f297608f5e9d2
Author: Maciej S. Szmigiero <mail@maciej.szmigiero.name>
Date:   Thu Sep 3 21:38:30 2015 +0200

    net: fec: normalize return value of pm_runtime_get_sync() in MDIO write
    
    If fec MDIO write method succeeds its return value comes from
    call to pm_runtime_get_sync().
    But pm_runtime_get_sync() can also return 1.
    
    In case of Micrel KSZ9031 PHY this value will then
    be returned along the call chain of phy_write() ->
    ksz9031_extended_write() -> ksz9031_center_flp_timing() ->
    ksz9031_config_init() -> phy_init_hw() -> phy_attach_direct() ->
    phy_connect_direct().
    
    Then phy_connect() will cast it into a pointer using ERR_PTR(),
    which then fec_enet_mii_probe() will try to dereference
    resulting in an oops.
    
    Fix it by normalizing return value of pm_runtime_get_sync()
    to be zero if positive in MDIO write method.
    
    Fixes: 8fff755e9f8d ("net: fec: Ensure clocks are enabled while using mdio bus")
    Signed-off-by: Maciej Szmigiero <mail@maciej.szmigiero.name>
    Acked-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fe8291e82b5d0b79b743683e5c0fb7e273f7a99a
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Tue Sep 1 13:59:24 2015 -0700

    ARM: OMAP2+: omap-device: fix race deferred probe of omap_hsmmc vs omap_device_late_init
    
    Kernel fails to boot 50% of times (form build to build) with
    RT-patchset applied due to the following race - on late boot
    stages deferred_probe_work_func->omap_hsmmc_probe races with omap_device_late_ini.
    
    The same issue has been reported now on linux-next (4.3) by Keerthy [1]
    
    late_initcall
     - deferred_probe_initcal() tries to re-probe all pending driver's probe.
    
    - later on, some driver is probing in this case It's cpsw.c
      (but could be any other drivers)
      cpsw_init
      - platform_driver_register
        - really_probe
           - driver_bound
             - driver_deferred_probe_trigger
      and boot proceed.
      So, at this moment we have deferred_probe_work_func scheduled.
    
    late_initcall_sync
      - omap_device_late_init
        - omap_device_idle
    
    CPU1                                    CPU2
      - deferred_probe_work_func
        - really_probe
          - omap_hsmmc_probe
            - pm_runtime_get_sync
                                            late_initcall_sync
                                            - omap_device_late_init
                                                    if (od->_driver_status != BUS_NOTIFY_BOUND_DRIVER) {
                                                            if (od->_state == OMAP_DEVICE_STATE_ENABLED) {
                                                                    - omap_device_idle [ops - IP is disabled]
            - [fail]
            - pm_runtime_put_sync
              - omap_hsmmc_runtime_suspend [ooops!]
    
    == log ==
     omap_hsmmc 480b4000.mmc: unable to get vmmc regulator -517
     davinci_mdio 48485000.mdio: davinci mdio revision 1.6
     davinci_mdio 48485000.mdio: detected phy mask fffffff3
     libphy: 48485000.mdio: probed
     davinci_mdio 48485000.mdio: phy[2]: device 48485000.mdio:02, driver unknown
     davinci_mdio 48485000.mdio: phy[3]: device 48485000.mdio:03, driver unknown
     omap_hsmmc 480b4000.mmc: unable to get vmmc regulator -517
     cpsw 48484000.ethernet: Detected MACID = b4:99:4c:c7:d2:48
     cpsw 48484000.ethernet: cpsw: Detected MACID = b4:99:4c:c7:d2:49
     hctosys: unable to open rtc device (rtc0)
     omap_hsmmc 480b4000.mmc: omap_device_late_idle: enabled but no driver.  Idling
     ldousb: disabling
     Unhandled fault: imprecise external abort (0x1406) at 0x00000000
     [00000000] *pgd=00000000
     Internal error: : 1406 [#1] PREEMPT SMP ARM
     Modules linked in:
     CPU: 1 PID: 58 Comm: kworker/u4:1 Not tainted 4.1.2-rt1-00467-g6da3c0a-dirty #5
     Hardware name: Generic DRA74X (Flattened Device Tree)
     Workqueue: deferwq deferred_probe_work_func
     task: ee6ddb00 ti: edd3c000 task.ti: edd3c000
     PC is at omap_hsmmc_runtime_suspend+0x1c/0x12c
     LR is at _od_runtime_suspend+0xc/0x24
     pc : [<c0471998>]    lr : [<c0029590>]    psr: a0000013
     sp : edd3dda0  ip : ee6ddb00  fp : c07be540
     r10: 00000000  r9 : c07be540  r8 : 00000008
     r7 : 00000000  r6 : ee646c10  r5 : ee646c10  r4 : edd79380
     r3 : fa0b4100  r2 : 00000000  r1 : 00000000  r0 : ee646c10
     Flags: NzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment kernel
     Control: 10c5387d  Table: 8000406a  DAC: 00000015
     Process kworker/u4:1 (pid: 58, stack limit = 0xedd3c218)
     Stack: (0xedd3dda0 to 0xedd3e000)
     dda0: ee646c70 ee646c10 c0029584 00000000 00000008 c0029590 ee646c70 ee646c10
     ddc0: c0029584 c03adfb8 ee646c10 00000004 0000000c c03adff0 ee646c10 00000004
     dde0: 0000000c c03ae4ec 00000000 edd3c000 ee646c10 00000004 ee646c70 00000004
     de00: fa0b4000 c03aec20 ee6ddb00 ee646c10 00000004 ee646c70 ee646c10 fffffdfb
     de20: edd79380 00000000 fa0b4000 c03aee90 fffffdfb edd79000 ee646c00 c0474290
     de40: 00000000 edda24c0 edd79380 edc81f00 00000000 00000200 00000001 c06dd488
     de60: edda3960 ee646c10 ee646c10 c0824cc4 fffffdfb c0880c94 00000002 edc92600
     de80: c0836378 c03a7f84 ee646c10 c0824cc4 00000000 c0880c80 c0880c94 c03a6568
     dea0: 00000000 ee646c10 c03a66ac ee4f8000 00000000 00000001 edc92600 c03a4b40
     dec0: ee404c94 edc83c4c ee646c10 ee646c10 ee646c44 c03a63c4 ee646c10 ee646c10
     dee0: c0814448 c03a5aa8 ee646c10 c0814220 edd3c000 c03a5ec0 c0814250 ee6be400
     df00: edd3c000 c004e5bc ee6ddb01 00000078 ee6ddb00 ee4f8000 ee6be418 edd3c000
     df20: ee4f8028 00000088 c0836045 ee4f8000 ee6be400 c004e928 ee4f8028 00000000
     df40: c004e8ec 00000000 ee6bf1c0 ee6be400 c004e8ec 00000000 00000000 00000000
     df60: 00000000 c0053450 2e56fa97 00000000 afdffbd7 ee6be400 00000000 00000000
     df80: edd3df80 edd3df80 00000000 00000000 edd3df90 edd3df90 edd3dfac ee6bf1c0
     dfa0: c0053384 00000000 00000000 c000f668 00000000 00000000 00000000 00000000
     dfc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
     dfe0: 00000000 00000000 00000000 00000000 00000013 00000000 f1fc9d7e febfbdff
     [<c0471998>] (omap_hsmmc_runtime_suspend) from [<c0029590>] (_od_runtime_suspend+0xc/0x24)
     [<c0029590>] (_od_runtime_suspend) from [<c03adfb8>] (__rpm_callback+0x24/0x3c)
     [<c03adfb8>] (__rpm_callback) from [<c03adff0>] (rpm_callback+0x20/0x80)
     [<c03adff0>] (rpm_callback) from [<c03ae4ec>] (rpm_suspend+0xe4/0x618)
     [<c03ae4ec>] (rpm_suspend) from [<c03aee90>] (__pm_runtime_idle+0x60/0x80)
     [<c03aee90>] (__pm_runtime_idle) from [<c0474290>] (omap_hsmmc_probe+0x6bc/0xa7c)
     [<c0474290>] (omap_hsmmc_probe) from [<c03a7f84>] (platform_drv_probe+0x44/0xa4)
     [<c03a7f84>] (platform_drv_probe) from [<c03a6568>] (driver_probe_device+0x170/0x2b4)
     [<c03a6568>] (driver_probe_device) from [<c03a4b40>] (bus_for_each_drv+0x64/0x98)
     [<c03a4b40>] (bus_for_each_drv) from [<c03a63c4>] (device_attach+0x70/0x88)
     [<c03a63c4>] (device_attach) from [<c03a5aa8>] (bus_probe_device+0x84/0xac)
     [<c03a5aa8>] (bus_probe_device) from [<c03a5ec0>] (deferred_probe_work_func+0x58/0x88)
     [<c03a5ec0>] (deferred_probe_work_func) from [<c004e5bc>] (process_one_work+0x134/0x464)
     [<c004e5bc>] (process_one_work) from [<c004e928>] (worker_thread+0x3c/0x4fc)
     [<c004e928>] (worker_thread) from [<c0053450>] (kthread+0xcc/0xe4)
     [<c0053450>] (kthread) from [<c000f668>] (ret_from_fork+0x14/0x2c)
     Code: e594302c e593202c e584205c e594302c (e5932128)
     ---[ end trace 0000000000000002 ]---
    
    The issue happens because omap_device_late_init() do not take into
    account that some drivers are present, but their probes were not
    finished successfully and where deferred instead. This is the valid
    case, and omap_device_late_init() should not idle such devices.
    
    To fix this issue, the value of omap_device->_driver_status field
    should be checked not only for BUS_NOTIFY_BOUND_DRIVER (driver is
    present and has been bound to device successfully), but also checked
    for BUS_NOTIFY_BIND_DRIVER (driver about to be bound) - which means
    driver is present and there was try to bind it to device.
    
    [1] http://www.spinics.net/lists/arm-kernel/msg441880.html
    Cc: Tero Kristo <t-kristo@ti.com>
    Cc: Keerthy <j-keerthy@ti.com>
    Tested-by: Keerthy <j-keerthy@ti.com>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 5d9452e7c52a106c9efdeb6c72fc73b184a6543f
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Tue Aug 18 14:10:56 2015 +0300

    gpio: omap: fix clk_prepare/unprepare usage
    
    As per CCF documentation (clk.txt) the clk_prepare/unprepare APIs
    are not allowed in atomic context. But now OMAP GPIO driver
    uses them while applying debounce settings and as part
    of PM runtime irqsafe operations:
    
    - omap_gpio_debounce() is holding the lock with IRQs off.
      + omap2_set_gpio_debounce()
       + clk_prepare_enable()
        + clk_prepare() this one might sleep.
    
    - pm_runtime_get_sync() is holding the lock with IRQs off
      + omap_gpio_runtime_suspend()
        + raw_spin_lock_irqsave()
        + omap_gpio_dbck_disable()
          + clk_disable_unprepare()
    
    Hence, fix it by moeving dbclk prepare/unprepare in OMAP GPIO
    omap_gpio_probe/omap_gpio_remove. Also, while here, ensure that
    debounce functionality is disabled if clk_get() failed,
    because otherwise kernel will carsh in omap2_set_gpio_debounce().
    
    Reported-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 35242ba632639463b9b9c82780e2e91bdd1e3231
Author: NeilBrown <neilb@suse.de>
Date:   Thu Apr 16 18:03:04 2015 +1000

    phy: twl4030-usb: make runtime pm more reliable.
    
    [ Upstream commit 56301df6bcaaed31e77b8c500ca1b437f46a3158 ]
    
    A construct like:
    
            if (pm_runtime_suspended(twl->dev))
                   pm_runtime_get_sync(twl->dev);
    
    is against the spirit of the runtime_pm interface as it
    makes the internal refcounting useless.
    
    In this case it is also racy, particularly as 'put_autosuspend'
    is used to drop a reference.
    When that happens a timer is started and the device is
    runtime-suspended after the timeout.
    If the above code runs in this window, the device will not be
    found to be suspended so no pm_runtime reference is taken.
    When the timer expires the device will be suspended, which is
    against the intention of the code.
    
    So be more direct is taking and dropping references.
    If twl->linkstat is VBUS_VALID or ID_GROUND, then hold a
    pm_runtime reference, otherwise don't.
    Define "cable_present()" to test for this condition.
    
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit d3f4caa355c1c9d2ce7fd3da88e2be37836323db
Author: Fabio Estevam <fabio.estevam@freescale.com>
Date:   Thu Aug 20 01:30:36 2015 -0500

    PCI: dra7xx: Remove unneeded use of IS_ERR_VALUE()
    
    There is no need to use the IS_ERR_VALUE() macro for checking the return
    value from pm_runtime_* functions.
    
    Test for a negative pm_runtime_get_sync() return value instead of using
    IS_ERR_VALUE().
    
    The semantic patch that makes this change is available in
    scripts/coccinelle/api/pm_runtime.cocci.
    
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    CC: Kishon Vijay Abraham I <kishon@ti.com>

commit ba8d2b484d19090e0c19b38c4f3d8d1ab65107bb
Author: Shilpa Sreeramalu <shilpa.sreeramalu@intel.com>
Date:   Wed Jul 15 07:58:09 2015 -0700

    ASoC: Intel: Get correct usage_count value to load firmware
    
    commit 412efa73dcd3bd03c1838c91e094533a95529039 upstream.
    
    The usage_count variable was read before it was set to the correct
    value, due to which the firmware load was failing. Because of this
    IPC messages sent to the firmware were timing out causing a delay
    of about 1 second while playing audio from the internal speakers.
    
    With this patch the usage_count is read after the function call
    pm_runtime_get_sync which will increment the usage_count variable
    and the firmware load is successful and all the IPC messages are
    processed correctly.
    
    Signed-off-by: Shilpa Sreeramalu <shilpa.sreeramalu@intel.com>
    Signed-off-by: Fang, Yang A <yang.a.fang@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73f7d1ff06aaee5a51ef26fbe48252878c98bd0e
Author: NeilBrown <neilb@suse.de>
Date:   Thu Apr 16 18:03:04 2015 +1000

    phy: twl4030-usb: make runtime pm more reliable.
    
    commit 56301df6bcaaed31e77b8c500ca1b437f46a3158 upstream.
    
    A construct like:
    
            if (pm_runtime_suspended(twl->dev))
                   pm_runtime_get_sync(twl->dev);
    
    is against the spirit of the runtime_pm interface as it
    makes the internal refcounting useless.
    
    In this case it is also racy, particularly as 'put_autosuspend'
    is used to drop a reference.
    When that happens a timer is started and the device is
    runtime-suspended after the timeout.
    If the above code runs in this window, the device will not be
    found to be suspended so no pm_runtime reference is taken.
    When the timer expires the device will be suspended, which is
    against the intention of the code.
    
    So be more direct is taking and dropping references.
    If twl->linkstat is VBUS_VALID or ID_GROUND, then hold a
    pm_runtime reference, otherwise don't.
    Define "cable_present()" to test for this condition.
    
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Cc: Alexander Holler <holler@ahsoftware.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1d46d30d133e7909e7dde06a4e867225c7e079b
Author: Junjie Mao <junjie.mao@enight.me>
Date:   Fri Jul 17 10:29:00 2015 +0800

    ASoC: Intel: fix runtime pm imbalance on error
    
    pm_runtime_get_sync() increments the runtime PM usage counter even the
    call returns an error code. Thus a pairing decrement is needed on the
    error handling path to keep the counter balanced.
    
    Signed-off-by: Junjie Mao <junjie.mao@enight.me>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 0e2bdb0e7abf4b5170874e415ec42df547916dd3
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Fri Jul 31 17:55:10 2015 +0530

    PCI: dra7xx: Disable pm_runtime on get_sync failure
    
    Fix the error handling when pm_runtime_get_sync() fails.
    
    If pm_runtime_get_sync() fails, call pm_runtime_disable() so there are no
    unbalanced pm_runtime_enable() calls.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Jingoo Han <jingoohan1@gmail.com>

commit 16f6a0df1d319705abf068bd1ebada344ad9d04f
Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date:   Sun Jun 14 15:41:49 2015 +0100

    mfd: arizona: Fix race between runtime suspend and IRQs
    
    The function arizona_irq_thread (the threaded handler for the arizona
    IRQs) calls pm_runtime_get_sync at the start to ensure that the chip is
    active as we handle the IRQ. If the chip is part way through a runtime
    suspend when an IRQ arrives the PM core will wait for the suspend to
    complete, before resuming. However, since commit 4f0216409f7c
    ("mfd: arizona: Add better support for system suspend") the runtime
    suspend function may call disable_irq, if the chip is going to fully
    power off, which will try to wait for any outstanding IRQs to complete.
    This results in deadlock as the IRQ thread is waiting for the PM
    operation to complete and the PM thread is waiting for the IRQ to
    complete.
    
    To avoid this situation we use disable_irq_nosync, which allows the
    suspending thread to finish the suspend without waiting for the IRQ to
    complete. This is safe because if an IRQ is being processed it can only
    be blocked at the pm_runtime_get_sync at the start of the handler
    otherwise it wouldn't be possible to suspend.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit 77441ac00d324c037c088da090fa505b45dad9d4
Author: Wolfram Sang <wsa@the-dreams.de>
Date:   Tue Jul 14 14:07:08 2015 +0200

    i2c: omap: fix cleanup regression
    
    Patch "i2c: omap: abolish variable name confusion" triggered a
    coccinelle warning which we fix here:
    
    drivers/i2c/busses/i2c-omap.c:1333:5-24: pm_runtime_get_sync returns < 0 as error. Unecessary IS_ERR_VALUE at line 1334
    
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit d1221a608bd19cc6b539cffacfad3e104fcff0ef
Author: NeilBrown <neil@brown.name>
Date:   Thu Apr 16 18:03:04 2015 +1000

    phy: twl4030-usb: remove incorrect pm_runtime_get_sync() in probe function.
    
    commit 4724e27114c4a7eceeee07db227a17fcab6f165c upstream.
    
    The USB phy should initialize with power-off, and will be powered on
    by the USB system when a cable connection is detected.
    
    Having this pm_runtime_get_sync() during probe causes the phy to
    *always* be powered on.
    Removing it returns to sensible power management.
    
    Fixes: 96be39ab34b77c6f6f5cd6ae03aac6c6449ee5c4
    Signed-off-by: NeilBrown <neil@brown.name>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4dbada2be460dc5568fa27784ef626232c28061f
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Jul 21 18:26:51 2015 +0200

    gpio: omap: use raw locks for locking
    
    This patch converts gpio_bank.lock from a spin_lock into a
    raw_spin_lock. The call path is to access this lock is always under a
    raw_spin_lock, for instance
    - __setup_irq() holds &desc->lock with irq off
      + __irq_set_trigger()
       + omap_gpio_irq_type()
    
    - handle_level_irq() (runs with irqs off therefore raw locks)
      + mask_ack_irq()
       + omap_gpio_mask_irq()
    
    This fixes the obvious backtrace on -RT. However the locking vs context
    is not and this is not limited to -RT:
    - omap_gpio_irq_type() is called with IRQ off and has an conditional
      call to pm_runtime_get_sync() which may sleep. Either it may happen or
      it may not happen but pm_runtime_get_sync() should not be called with
      irqs off.
    
    - omap_gpio_debounce() is holding the lock with IRQs off.
      + omap2_set_gpio_debounce()
       + clk_prepare_enable()
        + clk_prepare() this one might sleep.
      The number of users of gpiod_set_debounce() / gpio_set_debounce()
      looks low but still this is not good.
    
    Acked-by: Javier Martinez Canillas <javier@dowhile0.org>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 111509294b9efafe0353423c8180e03db810bdb5
Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
Date:   Sun Jun 14 15:41:49 2015 +0100

    mfd: arizona: Fix race between runtime suspend and IRQs
    
    The function arizona_irq_thread (the threaded handler for the arizona
    IRQs) calls pm_runtime_get_sync at the start to ensure that the chip is
    active as we handle the IRQ. If the chip is part way through a runtime
    suspend when an IRQ arrives the PM core will wait for the suspend to
    complete, before resuming. However, since commit 4f0216409f7c
    ("mfd: arizona: Add better support for system suspend") the runtime
    suspend function may call disable_irq, if the chip is going to fully
    power off, which will try to wait for any outstanding IRQs to complete.
    This results in deadlock as the IRQ thread is waiting for the PM
    operation to complete and the PM thread is waiting for the IRQ to
    complete.
    
    To avoid this situation we use disable_irq_nosync, which allows the
    suspending thread to finish the suspend without waiting for the IRQ to
    complete. This is safe because if an IRQ is being processed it can only
    be blocked at the pm_runtime_get_sync at the start of the handler
    otherwise it wouldn't be possible to suspend.
    
    Signed-off-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit 65194cb174b873448b208eb6e04ecb72237af76e
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Jun 25 16:45:57 2015 +0200

    gpio: rcar: Fine-grained Runtime PM support
    
    Currently gpio modules are runtime-resumed at probe time. This means the
    gpio module will be active all the time (except during system suspend,
    if not configured as a wake-up source).
    
    While an R-Car Gen2 gpio module retains pins configured for output at
    the requested level while put in standby mode, gpio registercannot be
    accessed while suspended.  Unfortunately pm_runtime_get_sync() cannot be
    called from all contexts where gpio register access is needed. Hence
    move the Runtime PM handling from probe/remove time to gpio request/free
    time, which is probably the best we can do.
    
    On r8a7791/koelsch, gpio modules 0, 1, 3, and 4 are now suspended during
    normal use (gpio2 is used for LEDs and regulators, gpio5 for keys, gpio6
    for SD-Card CD & WP, gpio7 for keys and regulators).
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 412efa73dcd3bd03c1838c91e094533a95529039
Author: Shilpa Sreeramalu <shilpa.sreeramalu@intel.com>
Date:   Wed Jul 15 07:58:09 2015 -0700

    ASoC: Intel: Get correct usage_count value to load firmware
    
    The usage_count variable was read before it was set to the correct
    value, due to which the firmware load was failing. Because of this
    IPC messages sent to the firmware were timing out causing a delay
    of about 1 second while playing audio from the internal speakers.
    
    With this patch the usage_count is read after the function call
    pm_runtime_get_sync which will increment the usage_count variable
    and the firmware load is successful and all the IPC messages are
    processed correctly.
    
    Signed-off-by: Shilpa Sreeramalu <shilpa.sreeramalu@intel.com>
    Signed-off-by: Fang, Yang A <yang.a.fang@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org

commit 99ccb95d521afb1717cee41ec00f491a17166392
Author: NeilBrown <neil@brown.name>
Date:   Thu Apr 16 18:03:04 2015 +1000

    phy: twl4030-usb: remove incorrect pm_runtime_get_sync() in probe function.
    
    commit 4724e27114c4a7eceeee07db227a17fcab6f165c upstream.
    
    The USB phy should initialize with power-off, and will be powered on
    by the USB system when a cable connection is detected.
    
    Having this pm_runtime_get_sync() during probe causes the phy to
    *always* be powered on.
    Removing it returns to sensible power management.
    
    Fixes: 96be39ab34b77c6f6f5cd6ae03aac6c6449ee5c4
    Signed-off-by: NeilBrown <neil@brown.name>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 2a298679b41199ae742a77ce69766385dffe816f
Merge: 8c7febe83915 50641056d833
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 26 15:59:26 2015 -0700

    Merge tag 'usb-4.2-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb
    
    Pull USB updates from Greg KH:
     "Here's the big USB patchset for 4.2-rc1.  As is normal these days, the
      majority of changes are in the gadget drivers, with a bunch of other
      small driver changes.
    
      All of these have been in linux-next with no reported issues"
    
    * tag 'usb-4.2-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb: (175 commits)
      usb: dwc3: Use ASCII space in Kconfig
      usb: chipidea: add work-around for Marvell HSIC PHY startup
      usb: chipidea: allow multiple instances to use default ci_default_pdata
      dt-bindings: Consolidate ChipIdea USB ci13xxx bindings
      phy: add Marvell HSIC 28nm PHY
      phy: Add Marvell USB 2.0 OTG 28nm PHY
      dt-bindings: Add Marvell PXA1928 USB and HSIC PHY bindings
      USB: ssb: use devm_kzalloc
      USB: ssb: fix error handling in ssb_hcd_create_pdev()
      usb: isp1760: check for null return from kzalloc
      cdc-acm: Add support of ATOL FPrint fiscal printers
      usb: chipidea: usbmisc_imx: Remove unneeded semicolon
      USB: usbtmc: add device quirk for Rigol DS6104
      USB: serial: mos7840: Use setup_timer
      phy: twl4030-usb: add ABI documentation
      phy: twl4030-usb: remove incorrect pm_runtime_get_sync() in probe function.
      phy: twl4030-usb: remove pointless 'suspended' test in 'suspend' callback.
      phy: twl4030-usb: make runtime pm more reliable.
      drivers:usb:fsl: Fix compilation error for fsl ehci drv
      usb: renesas_usbhs: Don't disable the pipe if Control write status stage
      ...

commit 6da233589f26ebd891d507a5a134ab43267006f2
Author: Pali Rohár <pali.rohar@gmail.com>
Date:   Thu Feb 26 14:49:51 2015 +0100

    ARM: OMAP2+: Return correct error values from device and hwmod
    
    Without this patch function pm_runtime_get_sync() returns 0 even when
    some omap subfunction fails. This patch properly propagate error codes
    from omap functions back to caller.
    
    This patch fix problem, when loading omap-aes driver in qemu cause
    kernel oops.
    
    Signed-off-by: Pali Rohár <pali.rohar@gmail.com>
    [paul@pwsan.com: fix a checkpatch warning]
    Signed-off-by: Paul Walmsley <paul@pwsan.com>

commit 4724e27114c4a7eceeee07db227a17fcab6f165c
Author: NeilBrown <neil@brown.name>
Date:   Thu Apr 16 18:03:04 2015 +1000

    phy: twl4030-usb: remove incorrect pm_runtime_get_sync() in probe function.
    
    The USB phy should initialize with power-off, and will be powered on
    by the USB system when a cable connection is detected.
    
    Having this pm_runtime_get_sync() during probe causes the phy to
    *always* be powered on.
    Removing it returns to sensible power management.
    
    Fixes: 96be39ab34b77c6f6f5cd6ae03aac6c6449ee5c4
    Signed-off-by: NeilBrown <neil@brown.name>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>

commit 56301df6bcaaed31e77b8c500ca1b437f46a3158
Author: NeilBrown <neilb@suse.de>
Date:   Thu Apr 16 18:03:04 2015 +1000

    phy: twl4030-usb: make runtime pm more reliable.
    
    A construct like:
    
            if (pm_runtime_suspended(twl->dev))
                   pm_runtime_get_sync(twl->dev);
    
    is against the spirit of the runtime_pm interface as it
    makes the internal refcounting useless.
    
    In this case it is also racy, particularly as 'put_autosuspend'
    is used to drop a reference.
    When that happens a timer is started and the device is
    runtime-suspended after the timeout.
    If the above code runs in this window, the device will not be
    found to be suspended so no pm_runtime reference is taken.
    When the timer expires the device will be suspended, which is
    against the intention of the code.
    
    So be more direct is taking and dropping references.
    If twl->linkstat is VBUS_VALID or ID_GROUND, then hold a
    pm_runtime reference, otherwise don't.
    Define "cable_present()" to test for this condition.
    
    Tested-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>

commit 604c31039dae4653f33003d08c91ef58b70b5e63
Author: Pali Rohár <pali.rohar@gmail.com>
Date:   Sun Mar 8 11:01:01 2015 +0100

    crypto: omap-sham - Check for return value from pm_runtime_get_sync
    
    Function pm_runtime_get_sync could fail and we need to check return
    value to prevent kernel crash.
    
    Signed-off-by: Pali Rohár <pali.rohar@gmail.com>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit cdaa8cf34863028dab238e1498555bf12d693244
Merge: 30a5c1894a4c 98b80987c940
Author: Olof Johansson <olof@lixom.net>
Date:   Mon Apr 20 07:59:04 2015 -0700

    Merge branch 'fixes' into next/fixes-non-critical
    
    Merge a set of fixes that we missed sending in before v4.0 release. These
    will also be sent to -stable.
    
    * fixes: (659 commits)
      ARM: at91/dt: sama5d3 xplained: add phy address for macb1
      kbuild: Create directory for target DTB
      ARM: mvebu: Disable CPU Idle on Armada 38x
      arm64: juno: Fix misleading name of UART reference clock
      ARM: dts: sunxi: Remove overclocked/overvoltaged OPP
      ARM: dts: sun4i: a10-lime: Override and remove 1008MHz OPP setting
      ARM: socfpga: dts: fix spi1 interrupt
      ARM: dts: Fix gpio interrupts for dm816x
      ARM: dts: dra7: remove ti,hwmod property from pcie phy
      ARM: EXYNOS: Fix build breakage cpuidle on !SMP
      ARM: OMAP: dmtimer: disable pm runtime on remove
      ARM: OMAP: dmtimer: check for pm_runtime_get_sync() failure
      ARM: dts: fix lid and power pin-functions for exynos5250-spring
      ARM: dts: fix mmc node updates for exynos5250-spring
      ARM: OMAP2+: Fix socbus family info for AM33xx devices
      ARM: dts: omap3: Add missing dmas for crypto
      + Linux 4.0-rc4
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit c3aeda62878f09da91329693a60a1f08ec97e0b8
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Apr 13 11:01:14 2015 +0200

    ALSA: hda - Fix another race in runtime PM refcounting
    
    Although some races in runtime PM refcount was fixed by the commit
    [664c715573c2: ALSA: hda - Work around races of power up/down with
    runtime PM], there is still a race in the following case:
    
    CPU0:                   CPU1 :
    runtime suspend:
      codec->in_pm = 1
                            snd_hdac_power_up_pm():
                              pm_runtime_get_sync() skipped
    suspend finished:
      codec->in_pm = 0
                            snd_hdac_power_down_pm():
                              pm_runtime_put_*() is called!
    
    For avoiding this situation, increment in_pm flag atomically when it's
    non-zero, and decrement accordingly, to ensure that in_pm is set
    consistently for the whole concurrent operations.
    
    Also, since atomic_inc_not_zero() and atomic_dec_if_positive() are
    lengthy inline functions, move snd_hdac_power_up_pm() and _down_pm()
    to sound/hda/hdac_device.c as no inline functions.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit b0a3d8986a768c8b6a95ea6dd36e975bb3a44c44
Author: Vutla, Lokesh <lokeshvutla@ti.com>
Date:   Tue Mar 31 09:52:24 2015 +0530

    crypto: omap-sham - Use pm_runtime_irq_safe()
    
    omap_sham_handle_queue() can be called as part of done_task tasklet.
    During this its atomic and any calls to pm functions cannot sleep.
    
    But there is a call to pm_runtime_get_sync() (which can sleep) in
    omap_sham_handle_queue(), because of which the following appears:
    " [  116.169969] BUG: scheduling while atomic: kworker/0:2/2676/0x00000100"
    
    Add pm_runtime_irq_safe() to avoid this.
    
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 9250aea76bfcbf4c2a7868e5566281bf2bb7af27
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Mar 27 12:15:15 2015 +0100

    mmc: core: Enable runtime PM management of host devices
    
    Currently those host drivers which have deployed runtime PM, deals with
    the runtime PM reference counting entirely by themselves.
    
    Since host drivers don't know when the core will send the next request
    through some of the host_ops callbacks, they need to handle runtime PM
    get/put between each an every request.
    
    In quite many cases this has some negative effects, since it leads to a
    high frequency of scheduled runtime PM suspend operations. That due to
    the runtime PM reference count will normally reach zero in-between
    every request.
    
    We can decrease that frequency, by enabling the core to deal with
    runtime PM reference counting of the host device. Since the core often
    knows that it will send a seqeunce of requests, it makes sense for it
    to keep a runtime PM reference count during these periods.
    
    More exactly, let's increase the runtime PM reference count by invoking
    pm_runtime_get_sync() from __mmc_claim_host(). Restore that action by
    invoking pm_runtime_mark_last_busy() and pm_runtime_put_autosuspend()
    in mmc_release_host(). In this way a runtime PM reference count will be
    kept during the complete cycle of a claim -> release host.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Acked-by: Konstantin Dorfman <kdorfman@codeaurora.org>

commit 08f41f7c35eca72aab1908a9ddb3f93a645b7cb8
Merge: 7fc377ecf452 4550bdb0bd8f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Mar 29 15:09:31 2015 -0700

    Merge tag 'armsoc-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc
    
    Pull ARM SoC fixes from Olof Johansson:
     "The latest and greatest fixes for ARM platform code.  Worth pointing
      out are:
    
       - Lines-wise, largest is a PXA fix for dealing with interrupts on DT
         that was quite broken.  It's still newish code so while we could
         have held this off, it seemed appropriate to include now
    
       - Some GPIO fixes for OMAP platforms added a few lines.  This was
         also fixes for code recently added (this release).
    
       - Small OMAP timer fix to behave better with partially upstreamed
         platforms, which is quite welcome.
    
       - Allwinner fixes about operating point control, reducing
         overclocking in some cases for better stability.
    
      plus a handful of other smaller fixes across the map"
    
    * tag 'armsoc-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/arm/arm-soc:
      arm64: juno: Fix misleading name of UART reference clock
      ARM: dts: sunxi: Remove overclocked/overvoltaged OPP
      ARM: dts: sun4i: a10-lime: Override and remove 1008MHz OPP setting
      ARM: socfpga: dts: fix spi1 interrupt
      ARM: dts: Fix gpio interrupts for dm816x
      ARM: dts: dra7: remove ti,hwmod property from pcie phy
      ARM: OMAP: dmtimer: disable pm runtime on remove
      ARM: OMAP: dmtimer: check for pm_runtime_get_sync() failure
      ARM: OMAP2+: Fix socbus family info for AM33xx devices
      ARM: dts: omap3: Add missing dmas for crypto
      ARM: dts: rockchip: disable gmac by default in rk3288.dtsi
      MAINTAINERS: add rockchip regexp to the ARM/Rockchip entry
      ARM: pxa: fix pxa interrupts handling in DT
      ARM: pxa: Fix typo in zeus.c
      ARM: sunxi: Have ARCH_SUNXI select RESET_CONTROLLER for clock driver usage

commit b1dae3d8b0563f49d2eeddb8403b6e0b2fc93a80
Merge: ebc0aa8fd5e7 599c376c4932
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Mar 29 13:58:54 2015 -0700

    Merge tag 'fixes-v4.0-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap into fixes
    
    Fixes for omaps for the -rc cycle:
    
    - Fix a device tree based booting vs legacy booting regression for
      omap3 crypto hardware by adding the missing DMA channels.
    
    - Fix /sys/bus/soc/devices/soc0/family for am33xx devices.
    
    - Fix two timer issues that can cause hangs if the timer related
      hwmod data is missing like it often initially is for new SoCs.
    
    - Remove pcie hwmods entry from dts as that causes runtime PM to
      fail for the PHYs.
    
    - A paper bag type dts configuration fix for dm816x GPIO
      interrupts that I just noticed. This is most of the changes
      diffstat wise, but as it's a basic feature for connecting
      devices and things work otherwise, it should be fixed.
    
    * tag 'fixes-v4.0-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap:
      ARM: dts: Fix gpio interrupts for dm816x
      ARM: dts: dra7: remove ti,hwmod property from pcie phy
      ARM: OMAP: dmtimer: disable pm runtime on remove
      ARM: OMAP: dmtimer: check for pm_runtime_get_sync() failure
      ARM: OMAP2+: Fix socbus family info for AM33xx devices
      ARM: dts: omap3: Add missing dmas for crypto
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 04e27a68c10bb9ce89f24c9202d59ce5b110a2b8
Author: Felipe Balbi <balbi@ti.com>
Date:   Mon Feb 2 17:12:00 2015 -0600

    usb: musb: core: add pm_runtime_irq_safe()
    
    commit 3e43a0725637299a14369e3ef109c25a8ec5c008 upstream.
    
    We need a pm_runtime_get_sync() call from
    within musb_gadget_pullup() to make sure
    registers are accessible at that time.
    
    The problem is that musb_gadget_pullup() is
    called with IRQs disabled and, because of that,
    we need to tell pm_runtime that this pm_runtime_get_sync()
    is IRQ safe.
    
    We can simply add pm_runtime_irq_safe(), however, because
    we need to make our read/write accessor function pointers
    have been initialized before trying to use them. This means
    that all pm_runtime initialization for musb_core needs to
    be moved down so that when we call pm_runtime_irq_safe(),
    the pm_runtime_get_sync() that it calls on the parent, won't
    cause a crash due to NULL musb_read/write accessors.
    
    Reported-by: Pali Rohár <pali.rohar@gmail.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    [ luis: backported to 3.16: adjusted context ]
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit a76fc9dda87b51010e4bc60b5e0065a70180b465
Author: Suman Anna <s-anna@ti.com>
Date:   Mon Mar 16 20:14:02 2015 -0500

    ARM: OMAP: dmtimer: check for pm_runtime_get_sync() failure
    
    The current OMAP dmtimer probe does not check for the return
    status of pm_runtime_get_sync() before initializing the timer
    registers. Any timer with missing hwmod data would return a
    failure here, and the access of registers without enabling the
    clocks for the timer would trigger a l3_noc interrupt and a
    kernel boot hang. Add proper checking so that the probe would
    return a failure graciously without hanging the kernel boot.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 736b67a32062240592aad49033859f9712dd18ca
Author: Axel Lin <axel.lin@ingics.com>
Date:   Fri Mar 6 15:55:10 2015 +0800

    phy: core: Fixup return value of phy_exit when !pm_runtime_enabled
    
    When phy_pm_runtime_get_sync() returns -ENOTSUPP, phy_exit() also returns
    -ENOTSUPP if !phy->ops->exit. Fix it.
    Also move the code to override ret close to the code we got ret.
    I think it is less error prone this way.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Acked-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>

commit 95353e3525c5eb75881dc4ab7690541fb2c1776e
Author: Felipe Balbi <balbi@ti.com>
Date:   Mon Feb 2 17:12:00 2015 -0600

    usb: musb: core: add pm_runtime_irq_safe()
    
    commit 3e43a0725637299a14369e3ef109c25a8ec5c008 upstream.
    
    We need a pm_runtime_get_sync() call from
    within musb_gadget_pullup() to make sure
    registers are accessible at that time.
    
    The problem is that musb_gadget_pullup() is
    called with IRQs disabled and, because of that,
    we need to tell pm_runtime that this pm_runtime_get_sync()
    is IRQ safe.
    
    We can simply add pm_runtime_irq_safe(), however, because
    we need to make our read/write accessor function pointers
    have been initialized before trying to use them. This means
    that all pm_runtime initialization for musb_core needs to
    be moved down so that when we call pm_runtime_irq_safe(),
    the pm_runtime_get_sync() that it calls on the parent, won't
    cause a crash due to NULL musb_read/write accessors.
    
    Reported-by: Pali Rohár <pali.rohar@gmail.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 611ef74966d545d0e56bcb8501ee610ec9383745
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Sun Jan 4 23:15:47 2015 +0800

    mmc: sdhci-pxav3: fix unbalanced clock issues during probe
    
    commit 62cf983ad84275f8580c807e5e596216c46773cf upstream.
    
    Commit 0dcaa2499b7d ("sdhci-pxav3: Fix runtime PM initialization") tries
    to fix one hang issue caused by calling sdhci_add_host() on a suspended
    device. The fix enables the clock twice, once by clk_prepare_enable() and
    another by pm_runtime_get_sync(), meaning that the clock will never be
    gated at runtime PM suspend. I observed the power consumption regression on
    Marvell BG2Q SoCs.
    
    In fact, the fix is not correct. There still be a very small window
    during which a runtime suspend might somehow occur after pm_runtime_enable()
    but before pm_runtime_get_sync().
    
    This patch fixes all of the two problems by just incrementing the usage
    counter before pm_runtime_enable(). It also adjust the order of disabling
    runtime pm and storing the usage count in the error path to handle clock
    gating properly.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d025d8000898c8e14bbf9a793063aadae31045b
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Sun Jan 4 23:15:47 2015 +0800

    mmc: sdhci-pxav3: fix unbalanced clock issues during probe
    
    commit 62cf983ad84275f8580c807e5e596216c46773cf upstream.
    
    Commit 0dcaa2499b7d ("sdhci-pxav3: Fix runtime PM initialization") tries
    to fix one hang issue caused by calling sdhci_add_host() on a suspended
    device. The fix enables the clock twice, once by clk_prepare_enable() and
    another by pm_runtime_get_sync(), meaning that the clock will never be
    gated at runtime PM suspend. I observed the power consumption regression on
    Marvell BG2Q SoCs.
    
    In fact, the fix is not correct. There still be a very small window
    during which a runtime suspend might somehow occur after pm_runtime_enable()
    but before pm_runtime_get_sync().
    
    This patch fixes all of the two problems by just incrementing the usage
    counter before pm_runtime_enable(). It also adjust the order of disabling
    runtime pm and storing the usage count in the error path to handle clock
    gating properly.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5c1132309311271254ddc27562a35d0db615a75
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Sun Jan 4 23:15:47 2015 +0800

    mmc: sdhci-pxav3: fix unbalanced clock issues during probe
    
    commit 62cf983ad84275f8580c807e5e596216c46773cf upstream.
    
    Commit 0dcaa2499b7d ("sdhci-pxav3: Fix runtime PM initialization") tries
    to fix one hang issue caused by calling sdhci_add_host() on a suspended
    device. The fix enables the clock twice, once by clk_prepare_enable() and
    another by pm_runtime_get_sync(), meaning that the clock will never be
    gated at runtime PM suspend. I observed the power consumption regression on
    Marvell BG2Q SoCs.
    
    In fact, the fix is not correct. There still be a very small window
    during which a runtime suspend might somehow occur after pm_runtime_enable()
    but before pm_runtime_get_sync().
    
    This patch fixes all of the two problems by just incrementing the usage
    counter before pm_runtime_enable(). It also adjust the order of disabling
    runtime pm and storing the usage count in the error path to handle clock
    gating properly.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit cc72da7d4d063ab9e690e56e0ef1ca1c24ee1635
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 19 16:00:22 2015 +0100

    ALSA: hda - Use standard runtime PM for codec power-save control
    
    Like the previous transition of suspend/resume, now move the
    power-save code to the standard runtime PM.  As usual for runtime PM,
    it's a bit tricky, but this simplified codes a lot in the end.
    
    For keeping the usage compatibility, power_save module option still
    controls the whole power-saving behavior on all codecs.  The value is
    translated to pm_runtime_*_autosuspend() and pm_runtime_allow() /
    pm_runtime_forbid() calls.
    
    snd_hda_power_up() and snd_hda_power_down() are translated to
    pm_runtime_get_sync() and pm_runtime_put_autosuspend(), respectively.
    Since we can do call pm_runtime_get_sync() more reliably, the sync
    version is used always and snd_hda_power_up_d3wait() is dropped.
    Another slight difference is that snd_hda_power_up()/down() don't call
    runtime_pm code during the suspend/resume transition phase.  Calling
    them there isn't safe unlike our own code, resulted in unexpected
    behavior (endless wakeups).
    
    The hda_power_count tracepoint was removed, as it doesn't match well
    with the new code.
    
    Last but not least, we need to set ignore_children flag in the parent
    dev.power field so that the runtime PM of the controller chip won't
    get confused.  The notification is still done in the bus pm_notify
    callback.  We'll get rid of this hack in the later patch.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 3e43a0725637299a14369e3ef109c25a8ec5c008
Author: Felipe Balbi <balbi@ti.com>
Date:   Mon Feb 2 17:12:00 2015 -0600

    usb: musb: core: add pm_runtime_irq_safe()
    
    We need a pm_runtime_get_sync() call from
    within musb_gadget_pullup() to make sure
    registers are accessible at that time.
    
    The problem is that musb_gadget_pullup() is
    called with IRQs disabled and, because of that,
    we need to tell pm_runtime that this pm_runtime_get_sync()
    is IRQ safe.
    
    We can simply add pm_runtime_irq_safe(), however, because
    we need to make our read/write accessor function pointers
    have been initialized before trying to use them. This means
    that all pm_runtime initialization for musb_core needs to
    be moved down so that when we call pm_runtime_irq_safe(),
    the pm_runtime_get_sync() that it calls on the parent, won't
    cause a crash due to NULL musb_read/write accessors.
    
    Reported-by: Pali Rohár <pali.rohar@gmail.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 7be4681a36ad1031af068082d8271a70ec2f4d68
Author: Roger Tseng <rogerable@realtek.com>
Date:   Thu Jan 15 15:14:44 2015 +0800

    mfd: rtsx_usb: Fix runtime PM deadlock
    
    commit b166010f6afbadb896efa37ff85eb681a8f89392 upstream.
    
    sd_set_power_mode() in derived module drivers/mmc/host/rtsx_usb_sdmmc.c
    acquires dev_mutex and then calls pm_runtime_get_sync() to make sure the
    device is awake while initializing a newly inserted card. Once it is
    called during suspending state and explicitly before rtsx_usb_suspend()
    acquires the same dev_mutex, both routine deadlock and further hang the
    driver because pm_runtime_get_sync() waits the pending PM operations.
    
    Fix this by using an empty suspend method. mmc_core always turns the
    LED off after a request is done and thus it is ok to remove the only
    rtsx_usb_turn_off_led() here.
    
    Fixes: 730876be2566 ("mfd: Add realtek USB card reader driver")
    Signed-off-by: Roger Tseng <rogerable@realtek.com>
    [Lee: Removed newly unused variable]
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 28de6f351a65d7516f80337d5bc80d3ea948480d
Author: Roger Tseng <rogerable@realtek.com>
Date:   Thu Jan 15 15:14:44 2015 +0800

    mfd: rtsx_usb: Fix runtime PM deadlock
    
    commit b166010f6afbadb896efa37ff85eb681a8f89392 upstream.
    
    sd_set_power_mode() in derived module drivers/mmc/host/rtsx_usb_sdmmc.c
    acquires dev_mutex and then calls pm_runtime_get_sync() to make sure the
    device is awake while initializing a newly inserted card. Once it is
    called during suspending state and explicitly before rtsx_usb_suspend()
    acquires the same dev_mutex, both routine deadlock and further hang the
    driver because pm_runtime_get_sync() waits the pending PM operations.
    
    Fix this by using an empty suspend method. mmc_core always turns the
    LED off after a request is done and thus it is ok to remove the only
    rtsx_usb_turn_off_led() here.
    
    Fixes: 730876be2566 ("mfd: Add realtek USB card reader driver")
    Signed-off-by: Roger Tseng <rogerable@realtek.com>
    [Lee: Removed newly unused variable]
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b166010f6afbadb896efa37ff85eb681a8f89392
Author: Roger Tseng <rogerable@realtek.com>
Date:   Thu Jan 15 15:14:44 2015 +0800

    mfd: rtsx_usb: Fix runtime PM deadlock
    
    sd_set_power_mode() in derived module drivers/mmc/host/rtsx_usb_sdmmc.c
    acquires dev_mutex and then calls pm_runtime_get_sync() to make sure the
    device is awake while initializing a newly inserted card. Once it is
    called during suspending state and explicitly before rtsx_usb_suspend()
    acquires the same dev_mutex, both routine deadlock and further hang the
    driver because pm_runtime_get_sync() waits the pending PM operations.
    
    Fix this by using an empty suspend method. mmc_core always turns the
    LED off after a request is done and thus it is ok to remove the only
    rtsx_usb_turn_off_led() here.
    
    Cc: <stable@vger.kernel.org> # v3.16+
    Fixes: 730876be2566 ("mfd: Add realtek USB card reader driver")
    Signed-off-by: Roger Tseng <rogerable@realtek.com>
    [Lee: Removed newly unused variable]
    Signed-off-by: Lee Jones <lee.jones@linaro.org>

commit 62cf983ad84275f8580c807e5e596216c46773cf
Author: Jisheng Zhang <jszhang@marvell.com>
Date:   Sun Jan 4 23:15:47 2015 +0800

    mmc: sdhci-pxav3: fix unbalanced clock issues during probe
    
    Commit 0dcaa2499b7d ("sdhci-pxav3: Fix runtime PM initialization") tries
    to fix one hang issue caused by calling sdhci_add_host() on a suspended
    device. The fix enables the clock twice, once by clk_prepare_enable() and
    another by pm_runtime_get_sync(), meaning that the clock will never be
    gated at runtime PM suspend. I observed the power consumption regression on
    Marvell BG2Q SoCs.
    
    In fact, the fix is not correct. There still be a very small window
    during which a runtime suspend might somehow occur after pm_runtime_enable()
    but before pm_runtime_get_sync().
    
    This patch fixes all of the two problems by just incrementing the usage
    counter before pm_runtime_enable(). It also adjust the order of disabling
    runtime pm and storing the usage count in the error path to handle clock
    gating properly.
    
    Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
    Cc: <stable@vger.kernel.org> # v3.11+
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit 0b41436840730004b1e7aec002b08ba1b56309f9
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Thu Dec 11 14:56:15 2014 +0100

    mmc: sdhci-esdhc-imx: Fixup ->remove()
    
    Since sdhci_remove_host() access the device, we need to make sure it's
    runtime PM resumed.
    
    To handle clock gating properly in remove, we first have to make sure
    the clocks are ungated.
    
    To fix both these issues, by invoking pm_runtime_get_sync() early in
    ->remove() callback. Later once we disabled runtime PM, we can restore
    the usage count.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit b5133e7a988b2cf8e1cd2b23231f36aff35ceffc
Author: Tony Lindgren <tony@atomide.com>
Date:   Thu Jan 15 14:45:10 2015 -0800

    net: davinci_emac: Fix runtime pm calls for davinci_emac
    
    Commit 3ba97381343b ("net: ethernet: davinci_emac: add pm_runtime support")
    added support for runtime PM, but it causes issues on omap3 related devices
    that actually gate the clocks:
    
    Unhandled fault: external abort on non-linefetch (0x1008)
    ...
    [<c04160f0>] (emac_dev_getnetstats) from [<c04d6a3c>] (dev_get_stats+0x78/0xc8)
    [<c04d6a3c>] (dev_get_stats) from [<c04e9ccc>] (rtnl_fill_ifinfo+0x3b8/0x938)
    [<c04e9ccc>] (rtnl_fill_ifinfo) from [<c04eade4>] (rtmsg_ifinfo+0x68/0xd8)
    [<c04eade4>] (rtmsg_ifinfo) from [<c04dd35c>] (register_netdevice+0x3a0/0x4ec)
    [<c04dd35c>] (register_netdevice) from [<c04dd4bc>] (register_netdev+0x14/0x24)
    [<c04dd4bc>] (register_netdev) from [<c041755c>] (davinci_emac_probe+0x408/0x5c8)
    [<c041755c>] (davinci_emac_probe) from [<c0396d78>] (platform_drv_probe+0x48/0xa4)
    
    Let's fix it by moving the pm_runtime_get() call earlier, and also add it to
    the emac_dev_getnetstats(). Also note that we want to use pm_runtime_get_sync()
    as we don't want to have deferred_resume happen. And let's also check the
    return value for pm_runtime_get_sync() as noted by Felipe Balbi <balbi@ti.com>.
    
    Cc: Brian Hutchinson <b.hutchman@gmail.com>
    Acked-by: Mark A. Greer <mgreer@animalcreek.com>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d1785326891c2f9919163be5dae8f2538cfcae58
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Fri Dec 5 12:59:40 2014 +0100

    mmc: sdhci-esdhc-imx: Convert to mmc_send_tuning()
    
    Instead of having a local function taking care of sending the tuning
    command, let's use the common mmc_send_tuning() API provided by the mmc
    core. In this way the request will be handled as any other request by
    sdhci core.
    
    As an effect of this change, the pm_runtime_get_sync() call at
    esdhc_prepare_tuning() isn't needed any more.
    
    This patch will also introduce another change in behavior, since before
    the response pattern to the tuning command wasn't verified by
    sdhci-esdhc-imx. The mmc_send_tuning() does that.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Tested-by: Dong Aisheng <b29396@freescale.com>
    Acked-by: Dong Aisheng <b29396@freescale.com>

commit 2ed127697eb1376645cbcfa08a13dda157233c9d
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Mon Nov 17 16:19:10 2014 +0100

    PM / Domains: Power on the PM domain right after attach completes
    
    Vast amount of platform drivers which enables runtime PM, don't invoke
    a pm_runtime_get_sync() while probing their devices.
    
    Instead, once they have turned on their PM resourses during ->probe()
    and are ready to handle I/O, these invokes pm_runtime_set_active() to
    synchronize its state towards the runtime PM core.
    
    From the runtime PM point of view this behavior is perfectly acceptable,
    but we encounter probe failures if their corresponding devices resides
    in the generic PM domain. The issues are observed for those devices,
    which requires its PM domain to stay powered during ->probe() since
    that's not being controlled.
    
    While using the generic OF-based PM domain look-up, a device's PM
    domain will be attached during the probe sequence. For this path, let's
    fix the probe failures, by simply power on the PM domain right after
    when it's been attached to the device.
    
    The generic PM domain stays powered until all of its devices becomes
    runtime PM enabled and runtime PM suspended.
    
    The old SOCs which makes use of the generic PM domain but don't use the
    generic OF-based PM domain look-up, will not be affected from this
    change.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit a2b1175131ccb5d4a15456f4f31836356abbce09
Author: Daniel Mack <zonque@gmail.com>
Date:   Tue Aug 26 10:52:53 2014 +0200

    ARM: common: edma: add suspend resume hook
    
    This patch makes the edma driver resume correctly after suspend. Tested
    on an AM33xx platform with cyclic audio streams and omap_hsmmc.
    
    All information can be reconstructed by already known runtime
    information.
    
    As we now use some functions that were previously only used from __init
    context, annotations had to be dropped.
    
    [nm@ti.com: added error handling for runtime + suspend_late/early_resume]
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Daniel Mack <zonque@gmail.com>
    Tested-by: Joel Fernandes <joelf@ti.com>
    Acked-by: Joel Fernandes <joelf@ti.com>
    [nsekhar@ti.com: remove unneeded pm_runtime_get_sync() from resume]
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit 5040f534385a300dee4f05af2484cdbf9ecef8a6
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Jun 24 19:43:41 2014 -0500

    mailbox/omap: consolidate OMAP mailbox driver
    
    There is no need for a separate common OMAP mailbox module
    now that the OMAP1 mailbox driver has been removed. So,
    consolidate the two individual OMAP mailbox modules into a
    single driver. This streamlines the driver for converting
    to mailbox framework.
    
    The following are the main changes:
    - collapse mailbox-omap2.c into omap-mailbox.c
    - remove omap_mbox_ops and replace the ops calls with
      the equivalent functionality.
    - simplify the sub-mailbox startup/shutdown functionality,
      the one-time operations are moved into probe, and the
      pm_runtime_get_sync and pm_runtime_put_sync can be invoked
      without using a configuration counter.
    - move all definitions from private omap_mbox.h into the
      source code, and eliminate this internal header.
    - rename some variables that used the omap2_mbox prefix with
      a generic omap_mbox prefix.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit bee874114a1b87b0860b9cea170536df9d8b2042
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 25 11:48:47 2014 -0700

    serial: omap: Fix missing pm_runtime_resume handling by simplifying code
    
    commit d758c9c1b36b4d9a141c2146c70398d756167ed1 upstream.
    
    The lack of pm_runtime_resume handling for the device state leads into
    device wake-up interrupts not working after a while for runtime PM.
    
    Also, serial-omap is confused about the use of device_may_wakeup.
    The checks for device_may_wakeup should only be done for suspend and
    resume, not for pm_runtime_suspend and pm_runtime_resume. The wake-up
    events for PM runtime should always be enabled.
    
    The lack of pm_runtime_resume handling leads into device wake-up
    interrupts not working after a while for runtime PM.
    
    Rather than try to patch over the issue of adding complex tests to
    the pm_runtime_resume, let's fix the issues properly:
    
    1. Make serial_omap_enable_wakeup deal with all internal PM state
       handling so we don't need to test for up->wakeups_enabled elsewhere.
    
       Later on once omap3 boots in device tree only mode we can also
       remove the up->wakeups_enabled flag and rely on the wake-up
       interrupt enable/disable state alone.
    
    2. Do the device_may_wakeup checks in suspend and resume only,
       for runtime PM the wake-up events need to be always enabled.
    
    3. Finally just call serial_omap_enable_wakeup and make sure we
       call it also in pm_runtime_resume.
    
    4. Note that we also have to use disable_irq_nosync as serial_omap_irq
       calls pm_runtime_get_sync.
    
    Fixes: 2a0b965cfb6e (serial: omap: Add support for optional wake-up)
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2e3432af1546a9f44a8278a8a91abfbd439259e
Merge: 081069ff817e fd30c37331ad
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 21 18:53:55 2014 +0900

    Merge tag 'spi-v3.15-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi
    
    Pull spi fixes from Mark Brown:
     "A few core fixes around outlying cases here, nothing that should
      affect most users but useful fixes.  The diffstat is rather larger
      than one might hope due some simple code motion in the fix for
      !CONFIG_DMA, the actual meaningful change is much smaller.
    
       - Fix handling of unsupported dual and quad mode support on slave
         registration so that drivers that can degrade gracefully do so,
         preventing regressions for drivers this is added.
       - Fix build in !CONFIG_DMA cases following addition of generic DMA
         mapping support.
       - Fix error handling for queue creation which due to wider kernel
         changes can be triggered more easily.
       - A couple of driver specific fixes"
    
    * tag 'spi-v3.15-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi:
      spi/pxa2xx: Prevent DMA from transferring too many bytes
      spi: core: Don't destroy master queue if we fail to create it
      spi: qup: Fix return value checking for pm_runtime_get_sync()
      spi: core: Protect DMA code by #ifdef CONFIG_HAS_DMA
      spi: core: Ignore unsupported Dual/Quad Transfer Mode bits

commit b14002761c01dcd2e416ad6d922bd0acf21e4a9d
Merge: 478c7cf7a8ff d7653964c590
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 21 18:02:12 2014 +0900

    Merge branch 'i2c/for-current' of git://git.kernel.org/pub/scm/linux/kernel/git/wsa/linux
    
    Pull i2c fixes from Wolfram Sang:
     "Some I2C bugfixes for 3.15.  Typical stuff, I'd say"
    
    * 'i2c/for-current' of git://git.kernel.org/pub/scm/linux/kernel/git/wsa/linux:
      i2c: rcar: bail out on zero length transfers
      i2c: qup: Fix pm_runtime_get_sync usage
      i2c: s3c2410: resume race fix
      i2c: nomadik: Don't use IS_ERR for devm_ioremap
      i2c: designware: Mask all interrupts during i2c controller enable

commit fa01d096bfcfd89398b1f3a3f91805dab76f7fe5
Author: Andy Gross <agross@codeaurora.org>
Date:   Fri May 2 20:54:29 2014 -0500

    i2c: qup: Fix pm_runtime_get_sync usage
    
    This patch corrects the error check on the call to pm_runtime_get_sync.
    
    Signed-off-by: Andy Gross <agross@codeaurora.org>
    Reviewed-by: Ivan T. Ivanov <iivanov@mm-sol.com>
    Acked-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit 355cd8c7cb2b67811648d6b9dd9bee99a7cf90c9
Author: Felipe Balbi <balbi@ti.com>
Date:   Fri Mar 28 14:31:47 2014 -0500

    usb: musb: fix PHY power on/off
    
    commit 3063a12be2b07c64e9802708a19489342e64c1a3 upstream.
    
    commi 30a70b0 (usb: musb: fix obex in g_nokia.ko
    causing kernel panic) removed phy_power_on()
    and phy_power_off() calls from runtime PM callbacks
    but it failed to note that the driver depended
    on pm_runtime_get_sync() calls to power up the PHY,
    thus leaving some platforms without any means to
    have a working PHY.
    
    Fix that by enabling the phy during omap2430_musb_init()
    and killing it in omap2430_musb_exit().
    
    Fixes: 30a70b0 (usb: musb: fix obex in g_nokia.ko causing kernel panic)
    Cc: Pali Rohár <pali.rohar@gmail.com>
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Reported-by: Michael Scott <hashcode0f@gmail.com>
    Tested-by: Michael Scott <hashcode0f@gmail.com>
    Tested-by: Stefan Roese <sr@denx.de>
    Reported-by: Rabin Vincent <rabin@rab.in>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d89e141bbf8619f3db97c38e33cb6d7a563614d
Author: Axel Lin <axel.lin@ingics.com>
Date:   Sat May 3 10:57:57 2014 +0800

    spi: qup: Fix return value checking for pm_runtime_get_sync()
    
    pm_runtime_get_sync() returns 1 if !CONFIG_PM_RUNTIME.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit d758c9c1b36b4d9a141c2146c70398d756167ed1
Author: Tony Lindgren <tony@atomide.com>
Date:   Tue Mar 25 11:48:47 2014 -0700

    serial: omap: Fix missing pm_runtime_resume handling by simplifying code
    
    The lack of pm_runtime_resume handling for the device state leads into
    device wake-up interrupts not working after a while for runtime PM.
    
    Also, serial-omap is confused about the use of device_may_wakeup.
    The checks for device_may_wakeup should only be done for suspend and
    resume, not for pm_runtime_suspend and pm_runtime_resume. The wake-up
    events for PM runtime should always be enabled.
    
    The lack of pm_runtime_resume handling leads into device wake-up
    interrupts not working after a while for runtime PM.
    
    Rather than try to patch over the issue of adding complex tests to
    the pm_runtime_resume, let's fix the issues properly:
    
    1. Make serial_omap_enable_wakeup deal with all internal PM state
       handling so we don't need to test for up->wakeups_enabled elsewhere.
    
       Later on once omap3 boots in device tree only mode we can also
       remove the up->wakeups_enabled flag and rely on the wake-up
       interrupt enable/disable state alone.
    
    2. Do the device_may_wakeup checks in suspend and resume only,
       for runtime PM the wake-up events need to be always enabled.
    
    3. Finally just call serial_omap_enable_wakeup and make sure we
       call it also in pm_runtime_resume.
    
    4. Note that we also have to use disable_irq_nosync as serial_omap_irq
       calls pm_runtime_get_sync.
    
    Fixes: 2a0b965cfb6e (serial: omap: Add support for optional wake-up)
    Cc: stable@vger.kernel.org # v3.13+
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Acked-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f51f593b3eb194d01d8980316e6bb1f7d72f567a
Author: Nishanth Menon <nm@ti.com>
Date:   Tue Apr 15 11:58:31 2014 -0500

    crypto: omap-des - handle error of pm_runtime_get_sync
    
    pm_runtime_get_sync may not always succeed depending on SoC involved.
    So handle the error appropriately ensuring usage_count is accurate in
    case of failure.
    
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Reported-by: Joachim Eastwood <manabian@gmail.com>
    Tested-by: Joachim Eastwood <manabian@gmail.com>
    Acked-by: Joel Fernandes <joelf@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 3063a12be2b07c64e9802708a19489342e64c1a3
Author: Felipe Balbi <balbi@ti.com>
Date:   Fri Mar 28 14:31:47 2014 -0500

    usb: musb: fix PHY power on/off
    
    commi 30a70b0 (usb: musb: fix obex in g_nokia.ko
    causing kernel panic) removed phy_power_on()
    and phy_power_off() calls from runtime PM callbacks
    but it failed to note that the driver depended
    on pm_runtime_get_sync() calls to power up the PHY,
    thus leaving some platforms without any means to
    have a working PHY.
    
    Fix that by enabling the phy during omap2430_musb_init()
    and killing it in omap2430_musb_exit().
    
    Fixes: 30a70b0 (usb: musb: fix obex in g_nokia.ko causing kernel panic)
    Cc: <stable@vger.kernel.org> # v3.14
    Cc: Pali Rohár <pali.rohar@gmail.com>
    Cc: Ivaylo Dimitrov <ivo.g.dimitrov.75@gmail.com>
    Reported-by: Michael Scott <hashcode0f@gmail.com>
    Tested-by: Michael Scott <hashcode0f@gmail.com>
    Tested-by: Stefan Roese <sr@denx.de>
    Reported-by: Rabin Vincent <rabin@rab.in>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 39de65aa2c3eee901db020a4f1396998e09602a3
Merge: 97e18dc00754 1fbeab0b8fd5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 9 08:45:40 2014 -0700

    Merge branch 'i2c/for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/wsa/linux
    
    Pull i2c updates from Wolfram Sang:
     "Here is the pull request from the i2c subsystem.  It got a little
      delayed because I needed to wait for a dependency to be included
      (commit b424080a9e08: "reset: Add optional resets and stubs").  Plus,
      I had some email problems.  All done now, the highlights are:
    
       - drivers can now deprecate their use of i2c classes.  That shouldn't
         be used on embedded platforms anyhow and was often blindly
         copy&pasted.  This mechanism gives users time to switch away and
         ultimately boot faster once the use of classes for those drivers is
         gone for good.
    
       - new drivers for QUP, Cadence, efm32
    
       - tracepoint support for I2C and SMBus
    
       - bigger cleanups for the mv64xxx, nomadik, and designware drivers
    
      And the usual bugfixes, cleanups, feature additions.  Most stuff has
      been in linux-next for a while.  Just some hot fixes and new drivers
      were added a bit more recently."
    
    * 'i2c/for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/wsa/linux: (63 commits)
      i2c: cadence: fix Kconfig dependency
      i2c: Add driver for Cadence I2C controller
      i2c: cadence: Document device tree bindings
      Documentation: i2c: improve section about flags mangling the protocol
      i2c: qup: use proper type fro clk_freq
      i2c: qup: off by ones in qup_i2c_probe()
      i2c: efm32: fix binding doc
      MAINTAINERS: update I2C web resources
      i2c: qup: New bus driver for the Qualcomm QUP I2C controller
      i2c: qup: Add device tree bindings information
      i2c: i2c-xiic: deprecate class based instantiation
      i2c: i2c-sirf: deprecate class based instantiation
      i2c: i2c-mv64xxx: deprecate class based instantiation
      i2c: i2c-designware-platdrv: deprecate class based instantiation
      i2c: i2c-davinci: deprecate class based instantiation
      i2c: i2c-bcm2835: deprecate class based instantiation
      i2c: mv64xxx: Fix reset controller handling
      i2c: omap: fix usage of IS_ERR_VALUE with pm_runtime_get_sync
      i2c: efm32: new bus driver
      i2c: exynos5: remove unnecessary cast of void pointer
      ...

commit b5893a08812602de164fa5ac6494f84df8d09a4f
Author: Ben Dooks <ben.dooks@codethink.co.uk>
Date:   Fri Mar 21 12:09:14 2014 +0100

    sh_eth: ensure pm_runtime cannot suspend the device during init
    
    The pm_rumtime work queue is causing the device to be suspended during
    initialisation, thus the initialisation may not be able to access registers
    properly. As the code is called from a work queue, it is possible that this
    is not seen from certain configurations/builds due to the asynchronos
    nature of the code.
    
    Another issue has also been found where the network device registration
    calls back into the driver thus causing further pm_runtime calls that
    also caused issues with the MDIO bus code. This has now been checked
    and is the only place the MDIO can be called without the device open.
    
    Use pm_runtime_get_sync() and pm_runtime_put() to ensure that the
    pm system does not suspend it during the probe() call and remove the
    now unnecessary pm_runtime_resume() call. Also add a call in the error
    path to call pm_runtime_disable().
    
    This fixes the external abort that can cause /sbin/init or other such
    init processed to die.
    
    Signed-off-by: Ben Dooks <ben.dooks@codethink.co.uk>
    Tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ff370257ed0bba6e98a9538fefa402a4696f9857
Author: Nishanth Menon <nm@ti.com>
Date:   Thu Mar 27 11:18:33 2014 -0500

    i2c: omap: fix usage of IS_ERR_VALUE with pm_runtime_get_sync
    
    we use IS_ERR_VALUE to check for error values of pm_runtime_get_sync,
    when the value can only be < 0 in the case of err. Replace the
    check with a simpler < 0 check.
    
    This fixes the coccicheck warnings:
    linux-2.6/drivers/i2c/busses/i2c-omap.c:1157:5-24:
    pm_runtime_get_sync returns < 0 as error. Unecessary IS_ERR_VALUE at
    line 1158
    linux-2.6/drivers/i2c/busses/i2c-omap.c:1278:7-26:
    pm_runtime_get_sync returns < 0 as error. Unecessary IS_ERR_VALUE at
    line 1279
    drivers/i2c/busses/i2c-omap.c:638:5-24:
    pm_runtime_get_sync returns < 0 as error. Unecessary IS_ERR_VALUE at
    line 639
    
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit 0a21552a6e8ab9d3bacd490f5b94a178ce4d661d
Author: Stefan Sørensen <stefan.sorensen@spectralink.com>
Date:   Mon Feb 3 15:54:09 2014 +0100

    mtd: elm: Use correct check on return value of pm_runtime_get_sync
    
    The ELM driver incorrectly reagard any non-zero return value from
    pm_runtime_get_sync as an error, but it may return 1 if the device
    was already active. Fix to only error when return value is negative.
    
    Signed-off-by: Stefan Sørensen <stefan.sorensen@spectralink.com>
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>

commit 74f350ee08e2ffa083204029018fce9941ba9bd5
Author: David Ertman <davidx.m.ertman@intel.com>
Date:   Sat Feb 22 03:15:17 2014 +0000

    e1000e: Feature Enable PHY Ultra Low Power Mode (ULP)
    
    ULP is a power saving feature that reduces the power consumption of the
    PHY when a cable is not connected.
    
    ULP is gated on the following conditions:
    1) The hardware must support ULP.  Currently this is only I218
       devices from Intel
    2) ULP is initiated by the driver, so, no driver results in no ULP.
    3) ULP's implementation utilizes Runtime Power Management to toggle its
       execution.  ULP is enabled/disabled based on the state of Runtime PM.
    4) ULP is not active when wake-on-unicast, multicast or broadcast is active
       as these features are mutually-exclusive.
    
    Since the PHY is in an unavailable state while ULP is active, any access
    of the PHY registers will fail.  This is resolved by utilizing kernel
    calls that cause the device to exit Runtime PM (e.g. pm_runtime_get_sync)
    and then, after PHY access is complete,  allow the device to resume
    Runtime PM (e.g. pm_runtime_put_sync).
    
    Under certain conditions, toggling the LANPHYPC is necessary to disable
    ULP mode.  Break out existing code to toggle LANPHYPC to a new function
    to avoid code duplication.
    
    Signed-off-by: Dave Ertman <davidx.m.ertman@intel.com>
    Cc: Bruce Allan <bruce.w.allan@intel.com>
    Tested-by: Jeff Pieper <jeffrey.e.pieper@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>

commit f9b080803ec66f708309ceffab14ce879c302963
Merge: e0f13bd46ac4 5bf5dbeda245
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Feb 23 10:40:22 2014 -0800

    Merge tag 'usb-3.14-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb
    
    Pull USB fixes from Greg KH:
     "Here are a number of USB fixes for reported issues for 3.14-rc4
    
      The majority of these are for USB gadget, phy, and musb driver issues.
      And there's a few new device ids thrown in for good measure"
    
    * tag 'usb-3.14-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb:
      usb: chipidea: need to mask when writting endptflush and endptprime
      usb: musb: correct use of schedule_delayed_work()
      usb: phy: msm: fix compilation errors when !CONFIG_PM_SLEEP
      usb: gadget: fix NULL pointer dereference
      usb: gadget: printer: using gadget_is_otg to check otg support at runtime
      phy: let phy_provider_register be the last step in registering PHY
      phy-core: Don't allow building phy-core as a module
      phy-core: Don't propagate -ENOSUPP from phy_pm_runtime_get_sync to caller
      phy-core: phy_get: Leave error logging to the caller
      phy,phy-bcm-kona-usb2.c: Add dependency on HAS_IOMEM
      usb: musb: correct use of schedule_delayed_work()
      usb: musb: do not sleep in atomic context
      USB: serial: option: blacklist interface 4 for Cinterion PHS8 and PXS8
      USB: EHCI: add delay during suspend to prevent erroneous wakeups
      usb: gadget: bcm63xx_udc: fix build failure on DMA channel code
      usb: musb: do not sleep in atomic context
      usb: gadget: s3c2410_udc: Fix build error
      usb: musb: core: Fix remote-wakeup resume
      usb: musb: host: Fix SuperSpeed hub enumeration
      usb: musb: fix obex in g_nokia.ko causing kernel panic

commit 767a1b5d6ec4ac5335dde17100880347ed154ce2
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Feb 17 14:29:23 2014 +0530

    phy-core: Don't propagate -ENOSUPP from phy_pm_runtime_get_sync to caller
    
    The phy-core allows phy_init and phy_power_on to be called multiple times,
    but before this patch -ENOSUPP from phy_pm_runtime_get_sync would be
    propagated to the caller for the 2nd and later calls.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce090a4eb9626272bfd2529520f2f16351029640
Author: Dong Aisheng <b29396@freescale.com>
Date:   Mon Nov 4 16:38:28 2013 +0800

    mmc: sdhci-esdhc-imx: fix runtime pm unbalance issue
    
    Since we're using common esdhc_send_command for tuning commands and
    the core code will call pm_runtime_put after command is finished.
    So we add a pm_runtime_get_sync here to get the balance.
    
    Signed-off-by: Dong Aisheng <b29396@freescale.com>
    Acked-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Chris Ball <cjb@laptop.org>

commit a472bacfa164f336da006fcd879d785f2b30b7bc
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sun Nov 24 23:31:24 2013 +0100

    can: c_can: don't call pm_runtime_get_sync() from interrupt context
    
    commit e35d46adc49b469fd92bdb64fea8af93640e6651 upstream.
    
    The c_can driver contians a callpath (c_can_poll -> c_can_state_change ->
    c_can_get_berr_counter) which may call pm_runtime_get_sync() from the IRQ
    handler, which is not allowed and results in "BUG: scheduling while atomic".
    
    This problem is fixed by introducing __c_can_get_berr_counter, which will not
    call pm_runtime_get_sync().
    
    Reported-by: Andrew Glen <AGlen@bepmarine.com>
    Tested-by: Andrew Glen <AGlen@bepmarine.com>
    Signed-off-by: Andrew Glen <AGlen@bepmarine.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4563588ce57080fc18ead503e5012a11d1e6eea8
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sun Nov 24 23:31:24 2013 +0100

    can: c_can: don't call pm_runtime_get_sync() from interrupt context
    
    commit e35d46adc49b469fd92bdb64fea8af93640e6651 upstream.
    
    The c_can driver contians a callpath (c_can_poll -> c_can_state_change ->
    c_can_get_berr_counter) which may call pm_runtime_get_sync() from the IRQ
    handler, which is not allowed and results in "BUG: scheduling while atomic".
    
    This problem is fixed by introducing __c_can_get_berr_counter, which will not
    call pm_runtime_get_sync().
    
    Reported-by: Andrew Glen <AGlen@bepmarine.com>
    Tested-by: Andrew Glen <AGlen@bepmarine.com>
    Signed-off-by: Andrew Glen <AGlen@bepmarine.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 768db0b93d6f0ed10f351b5eca34ef44b456369c
Author: Stephen Warren <swarren@nvidia.com>
Date:   Fri Nov 15 11:29:45 2013 -0700

    ASoC: tegra: call pm_runtime APIs around register accesses
    
    Call pm_runtime_get_sync() before all register accesses; the HW requires
    clocks to be running when accessing registers.
    
    This hasn't been needed to date, since all register IO was performed
    while playback was active, and hence the ASoC core had already called
    pm_runtime_get(). However, an imminent future commit will allocate and
    set up the FIFOs and routing during probe(), when that "protection"
    won't be in place.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Acked-by: Mark Brown <broonie@linaro.org>

commit 8a1874559f222efcae0c0c41b180f6e1af6b9d2e
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Fri Dec 6 20:32:13 2013 -0200

    drm/i915: add initial Runtime PM functions
    
    This patch adds the initial infrastructure to allow a Runtime PM
    implementation that sets the device to its D3 state. The patch just
    adds the necessary callbacks and the initial infrastructure.
    
    We still don't have any platform that actually uses this
    infrastructure, we still don't call get/put in all the places we need
    to, and we don't have any function to save/restore the state of the
    registers. This is not a problem since no platform uses the code added
    by this patch. We have a few people simultaneously working on runtime
    PM, so this initial code could help everybody make their plans.
    
    V2: - Move some functions to intel_pm.c
        - Remove useless pm_runtime_allow() call at init
        - Remove useless pm_runtime_mark_last_busy() call at get
        - Use pm_runtime_get_sync() instead of 2 calls
        - Add a WARN to check if we're really awake
    
    V3: - Rebase.
    
    V4: - Don't need to call pci_{save,restore}_state and
          pci_set_power_sate, since they're already called by the PCI
          layer
        - Remove wrong pm_runtime_enable() call at init_runtime_pm
    
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@gmail.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit f5c33b070de3fdb8ad995b767ad0e3487cf0d242
Author: Nishanth Menon <nm@ti.com>
Date:   Tue Dec 3 19:39:13 2013 -0600

    ARM: OMAP2+: omap_device: add fail hook for runtime_pm when bad data is detected
    
    Due to the cross dependencies between hwmod for automanaged device
    information for OMAP and dts node definitions, we can run into scenarios
    where the dts node is defined, however it's hwmod entry is yet to be
    added. In these cases:
    a) omap_device does not register a pm_domain (since it cannot find
       hwmod entry).
    b) driver does not know about (a), does a pm_runtime_get_sync which
       never fails
    c) It then tries to do some operation on the device (such as read the
      revision register (as part of probe) without clock or adequate OMAP
      generic PM operation performed for enabling the module.
    
    This causes a crash such as that reported in:
    https://bugzilla.kernel.org/show_bug.cgi?id=66441
    
    When 'ti,hwmod' is provided in dt node, it is expected that the device
    will not function without the OMAP's power automanagement. Hence, when
    we hit a fail condition (due to hwmod entries not present or other
    similar scenario), fail at pm_domain level due to lack of data, provide
    enough information for it to be fixed, however, it allows for the driver
    to take appropriate measures to prevent crash.
    
    Reported-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Acked-by: Kevin Hilman <khilman@linaro.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kevin Hilman <khilman@linaro.org>

commit fb178d8b2fab3f2a9f203c13ffe80cfd6e01bdf1
Author: Valentine Barshak <valentine.barshak@cogentembedded.com>
Date:   Wed Dec 4 20:33:35 2013 +0400

    PCI: rcar: Add runtime PM support
    
    If runtime PM is enabled in the kernel config, the PCI clocks are not
    forced on at start-up, and thus, are never enabled.  Use
    pm_runtime_get_sync() to enable the clocks.
    
    While at it, use dev_info() instead of pr_info() since now we have the
    device pointer available in the PCI setup callback.
    
    Signed-off-by: Valentine Barshak <valentine.barshak@cogentembedded.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

commit f7b2b5dd6a62a47e871627c71ed01aa3482154d9
Author: Nishanth Menon <nm@ti.com>
Date:   Tue Dec 3 19:43:13 2013 -0600

    crypto: omap-aes - add error check for pm_runtime_get_sync
    
    The AES driver currently assumes that pm_runtime_get_sync will always
    succeed, which may not always be true, so add error handling for the
    same.
    
    This scenario was reported in the following bug:
    place.  https://bugzilla.kernel.org/show_bug.cgi?id=66441
    
    Reported-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 088eb794815f12fc674d57835b7203b14a1fb50a
Author: Nishanth Menon <nm@ti.com>
Date:   Thu Nov 14 11:05:16 2013 -0600

    ARM: OMAP2+: omap_device: maintain sane runtime pm status around suspend/resume
    
    commit 3522bf7bfa248b99eafa2f4872190699a808c7d9 upstream.
    
    OMAP device hooks around suspend|resume_noirq ensures that hwmod
    devices are forced to idle using omap_device_idle/enable as part of
    the last stage of suspend activity.
    
    For a device such as i2c who uses autosuspend, it is possible to enter
    the suspend path with dev->power.runtime_status = RPM_ACTIVE.
    
    As part of the suspend flow, the generic runtime logic would increment
    it's dev->power.disable_depth to 1. This should prevent further
    pm_runtime_get_sync from succeeding once the runtime_status has been
    set to RPM_SUSPENDED.
    
    Now, as part of the suspend_noirq handler in omap_device, we force the
    following: if the device status is !suspended, we force the device
    to idle using omap_device_idle (clocks are cut etc..). This ensures
    that from a hardware perspective, the device is "suspended". However,
    runtime_status is left to be active.
    
    *if* an operation is attempted after this point to
    pm_runtime_get_sync, runtime framework depends on runtime_status to
    indicate accurately the device status, and since it sees it to be
    ACTIVE, it assumes the module is functional and returns a non-error
    value. As a result the user will see pm_runtime_get succeed, however a
    register access will crash due to the lack of clocks.
    
    To prevent this from happening, we should ensure that runtime_status
    exactly indicates the device status. As a result of this change
    any further calls to pm_runtime_get* would return -EACCES (since
    disable_depth is 1). On resume, we restore the clocks and runtime
    status exactly as we suspended with. These operations are not expected
    to fail as we update the states after the core runtime framework has
    suspended itself and restore before the core runtime framework has
    resumed.
    
    Reported-by: J Keerthy <j-keerthy@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Acked-by: Rajendra Nayak <rnayak@ti.com>
    Acked-by: Kevin Hilman <khilman@linaro.org>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e35d46adc49b469fd92bdb64fea8af93640e6651
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sun Nov 24 23:31:24 2013 +0100

    can: c_can: don't call pm_runtime_get_sync() from interrupt context
    
    The c_can driver contians a callpath (c_can_poll -> c_can_state_change ->
    c_can_get_berr_counter) which may call pm_runtime_get_sync() from the IRQ
    handler, which is not allowed and results in "BUG: scheduling while atomic".
    
    This problem is fixed by introducing __c_can_get_berr_counter, which will not
    call pm_runtime_get_sync().
    
    Reported-by: Andrew Glen <AGlen@bepmarine.com>
    Tested-by: Andrew Glen <AGlen@bepmarine.com>
    Signed-off-by: Andrew Glen <AGlen@bepmarine.com>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 3522bf7bfa248b99eafa2f4872190699a808c7d9
Author: Nishanth Menon <nm@ti.com>
Date:   Thu Nov 14 11:05:16 2013 -0600

    ARM: OMAP2+: omap_device: maintain sane runtime pm status around suspend/resume
    
    OMAP device hooks around suspend|resume_noirq ensures that hwmod
    devices are forced to idle using omap_device_idle/enable as part of
    the last stage of suspend activity.
    
    For a device such as i2c who uses autosuspend, it is possible to enter
    the suspend path with dev->power.runtime_status = RPM_ACTIVE.
    
    As part of the suspend flow, the generic runtime logic would increment
    it's dev->power.disable_depth to 1. This should prevent further
    pm_runtime_get_sync from succeeding once the runtime_status has been
    set to RPM_SUSPENDED.
    
    Now, as part of the suspend_noirq handler in omap_device, we force the
    following: if the device status is !suspended, we force the device
    to idle using omap_device_idle (clocks are cut etc..). This ensures
    that from a hardware perspective, the device is "suspended". However,
    runtime_status is left to be active.
    
    *if* an operation is attempted after this point to
    pm_runtime_get_sync, runtime framework depends on runtime_status to
    indicate accurately the device status, and since it sees it to be
    ACTIVE, it assumes the module is functional and returns a non-error
    value. As a result the user will see pm_runtime_get succeed, however a
    register access will crash due to the lack of clocks.
    
    To prevent this from happening, we should ensure that runtime_status
    exactly indicates the device status. As a result of this change
    any further calls to pm_runtime_get* would return -EACCES (since
    disable_depth is 1). On resume, we restore the clocks and runtime
    status exactly as we suspended with. These operations are not expected
    to fail as we update the states after the core runtime framework has
    suspended itself and restore before the core runtime framework has
    resumed.
    
    Cc: stable@vger.kernel.org # v3.4+
    Reported-by: J Keerthy <j-keerthy@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Acked-by: Rajendra Nayak <rnayak@ti.com>
    Acked-by: Kevin Hilman <khilman@linaro.org>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit cbf1e56e6aa2fc116a9995d457e8f3cf2be20442
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Oct 22 12:14:06 2013 +0200

    dma: cppi41: return code > 0 of pm_runtime_get_sync() is not an error
    
    Return code of pm_runtime_get_sync() > 0 is not an error and may happen.
    Noticed during rmmod & modprobe testing.
    
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

commit 9ec775f7efd6d17084b4f361804d2030d50fca0e
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Wed Oct 2 17:37:09 2013 +0200

    mmc: Don't force card to active state when entering suspend/shutdown
    
    By adding a card state that records if it is suspended or resumed, we
    can accept asyncronus suspend/resume requests for the mmc and sd
    bus_ops.
    
    MMC_CAP_AGGRESSIVE_PM, will at request inactivity through the runtime
    bus_ops callbacks, execute a suspend of the the card. In the state were
    this has been done, we can receive a suspend request for the mmc bus,
    which for sd and mmc forced the card to active state by a
    pm_runtime_get_sync. In other words, the card was resumed and then
    immediately suspended again, completely unnecessary.
    
    Since the suspend/resume bus_ops callbacks for sd and mmc are now
    capable of handling asynchronous requests, we no longer need to force
    the card to active state before executing suspend. Evidently preventing
    the above sequence for MMC_CAP_AGGRESSIVE_PM.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Chris Ball <cjb@laptop.org>

commit 3026d14a98d50c78e74d072cb05340a0f86b3938
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Mon Jul 22 15:31:15 2013 +0530

    serial: omap: enable PM runtime only when its fully configured
    
    If earlyprintk is enabled and current UART is console port the platform
    code can mark it as RPM_ACTIVE to sync real IP state with PM Runtime and
    avoid resuming of already active device, but now, driver initialization
    will be performed in the wrong way:
    
            pm_runtime_enable(&pdev->dev);
        <-- PM runtime alowed (device state RPM_ACTIVE)
            if (omap_up_info->autosuspend_timeout == 0)
                    omap_up_info->autosuspend_timeout = -1;
            device_init_wakeup(up->dev, true);
            pm_runtime_use_autosuspend(&pdev->dev);
            <-- update_autosuspend() will be called and it will disable device
            (device state RPM_SUSPENDED)
            pm_runtime_set_autosuspend_delay(&pdev->dev,
                            omap_up_info->autosuspend_timeout);
            <-- update_autosuspend() will be called which will re-enable device
            (device state RPM_ACTIVE), because autosuspend_timeout < 0
    
            pm_runtime_irq_safe(&pdev->dev);
            pm_runtime_get_sync(&pdev->dev);
            <-- will do nothing
    
    Such behavior isn't expected by OMAP serial drivers and causes
    unpredictable calls of serial_omap_runtime_suspend() and
    serial_omap_runtime_resume().
    
    Hence, fix it by allowing PM runtime only after all its parameters are
    configured.
    
    CC: Tony Lindgren <tony@atomide.com>
    CC: Rajendra Nayak <rnayak@ti.com>
    CC: Felipe Balbi <balbi@ti.com>
    CC: Kevin Hilman <khilman@linaro.org>
    Tested-by: Mark Jackson <mpfj-list@newflow.co.uk>
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f97f7d2d27bf092b40babda9ded29cc85cf77eec
Merge: acdb37c361dc 332ec81d413b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 24 20:17:11 2013 -1000

    Merge tag 'spi-v3.10-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi
    
    Pull spi updates from Mark Brown:
     "A few last minute SPI updates: fix a missized allocation and use
      atomic allocations in atomic context in the PXA driver, and fix the
      checking of return codes in the S3C64xx driver which caused spurious
      errors under heavy load."
    
    * tag 'spi-v3.10-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi:
      spi/pxa2xx: fix memory corruption due to wrong size used in devm_kzalloc()
      spi/pxa2xx: use GFP_ATOMIC in sg table allocation
      spi: s3c64xx: Fix pm_runtime_get_sync() return value check

commit f5055f93733730b61a8a69dedbb216e6b4dd84c5
Author: Nicolin Chen <b42378@freescale.com>
Date:   Fri Jun 14 19:49:06 2013 +0800

    ASoC: wm8962: Enable start-up and normal bias after reset in runtime resume
    
    This part of bias settings are essential for WM8962 to power up. Without it
    "wm8962 0-001a: DC servo timed out" might be prompted due to power-up failure
    that happens to FLL if being used.
    
    The driver's also bringing the bias down in the suspend path so it needs to be
    powered up in the resume path for symmetry.
    
    According to dapm_pre_sequence_async(), DAPM would call pm_runtime_get_sync()
    to let driver finish the bias settings in pm_runtime_resume() before the bias
    level being set to STANDBY. So no need to worry about disordered settings for
    VMID of WM8962.
    
    Signed-off-by: Nicolin Chen <b42378@freescale.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit 6c6cf64b16438eac6da9a90412a82316ad196e7c
Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
Date:   Mon Jun 10 18:22:26 2013 +0200

    spi: s3c64xx: Fix pm_runtime_get_sync() return value check
    
    If the device is already in a runtime PM enabled state
    pm_runtime_get_sync() will return 1, so a test for negative
    value should be used to check for errors.
    
    Without this patch there are seen errors like:
    
    [    8.540000] s3c64xx-spi 13930000.spi: Failed to enable device: 1
    [    8.545000] spi_master spi1: failed to prepare transfer hardware
    
    Likely because the driver uses synchronous API to runtime enable
    the device and asynchronous one to disable it.
    
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
    Signed-off-by: Mark Brown <broonielinaro.org>
    Cc: stable@vger.kernel.org

commit 249e66c32679a24706ec182256a79bf7b1dac9a2
Author: Stephen Warren <swarren@nvidia.com>
Date:   Tue Jun 4 12:58:14 2013 -0600

    ASoC: tegra: add runtime PM to resume functions
    
    Tegra HW needs clocks etc. active when touching registers. Make sure they
    are active during resume, by calling pm_runtime_get_sync() before touching
    HW.
    
    Signed-off-by: Stephen Warren <swarren@nvidia.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit 173192958d06b8d1eb44f56d74373052ad6a9a60
Merge: e72a5d1ceb1c e4404fab2e0b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 4 13:45:17 2013 -0700

    Merge tag 'mmc-updates-for-3.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/cjb/mmc
    
    Pull MMC update from Chris Ball:
     "MMC highlights for 3.10:
    
      Core:
       - Introduce MMC_CAP2_NO_PRESCAN_POWERUP to allow skipping
         mmc_power_up() at boot/initialization time if it's already
         happened, for performance (faster boot time) reasons.
       - Fix a bit width test failure that resulted in old eMMC cards being
         put into 1-bit mode when 4-bit mode was available.
       - Expose fwrev/hwrev for MMCv4 parts.
       - Improve card removal logic in the case where the card's removed
         slowly; we were missing card removal events if the card retained
         contact with the slot pads for long enough to reply to a CMD13
         while being removed.
    
      Drivers:
       - davinci_mmc: Support using PIO instead of DMA.
       - dw_mmc: Add support for Exynos4412.
       - mxcmmc: DT support, use slot-gpio API.
       - mxs-mmc: Add broken-cd/cd-inverted/non-removable DT property
         support.
       - sdhci-sirf: New sdhci-pltfm driver for CSR SiRF SoCs:
           SiRFprimaII: unicore ARM Cortex-A9
           SiRFatlas6: unicore ARM Cortex-A9
           SiRFmarco: dual core ARM Cortex-A9 SMP
       - sdhci-tegra: Add support for Tegra114 platforms, use
         mmc_of_parse()"
    
    * tag 'mmc-updates-for-3.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/cjb/mmc: (66 commits)
      mmc: sdhci-tegra: fix MODULE_DEVICE_TABLE
      mmc: core: fix init controller performance regression, updated patch
      mmc: mxcmmc: enable DMA support on mpc512x
      mmc: mxcmmc: constify mxcmci_devtype
      mmc: mxcmmc: use slot-gpio API for write-protect detection
      mmc: mxcmmc: add mpc512x SDHC support
      mmc: mxcmmc: fix race conditions for host->req and host->data access
      mmc: mxcmmc: DT support
      mmc: dw_mmc: let device core setup the default pin configuration
      mmc: mxs-mmc: add broken-cd property
      mmc: mxs-mmc: add non-removable property
      mmc: mxs-mmc: add cd-inverted property
      mmc: core: call pm_runtime_put_noidle in pm_runtime_get_sync failed case
      mmc: mxcmmc: Fix bug when card is present during boot
      mmc: core: fix performance regression initializing MMC host controllers
      Revert "mmc: core: wait while adding MMC host to ensure root mounts successfully"
      mmc: atmel-mci: pio hang on block errors
      mmc: core: Fix bit width test failing on old eMMC cards
      mmc: dw_mmc: Use pr_info instead of printk
      mmc: dw_mmc: Check return value of regulator_enable
      ...

commit f7626edc6a1273ebbeb9cf9ebdf3acfb27246386
Author: Li Fei <fei.li@intel.com>
Date:   Fri Apr 5 21:20:36 2013 +0800

    hwspinlock: fix __hwspin_lock_request error path
    
    commit c10b90d85a5126d25c89cbaa50dc9fdd1c4d001a upstream.
    
    Even in failed case of pm_runtime_get_sync, the usage_count
    is incremented. In order to keep the usage_count with correct
    value and runtime power management to behave correctly, call
    pm_runtime_put_noidle in such case.
    
    In __hwspin_lock_request, module_put is also called before
    return in pm_runtime_get_sync failed case.
    
    Signed-off-by Liu Chuansheng <chuansheng.liu@intel.com>
    Signed-off-by: Li Fei <fei.li@intel.com>
    [edit commit log]
    Signed-off-by: Ohad Ben-Cohen <ohad@wizery.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 3bffb800b91bb128b61d83deb01ce63c455d108f
Author: Li Fei <fei.li@intel.com>
Date:   Mon Apr 8 09:36:39 2013 +0800

    mmc: core: call pm_runtime_put_noidle in pm_runtime_get_sync failed case
    
    Even in failed case of pm_runtime_get_sync, the usage_count
    is incremented. In order to keep the usage_count with correct
    value and runtime power management to behave correctly, call
    pm_runtime_put_noidle in such case.
    
    Signed-off-by: Liu Chuansheng <chuansheng.liu@intel.com>
    Signed-off-by: Li Fei <fei.li@intel.com>
    Acked-by: Ohad Ben-Cohen <ohad@wizery.com>
    Signed-off-by: Chris Ball <cjb@laptop.org>

commit 5fd59356f367d5176d0858ce9c25c2255da2487a
Author: Li Fei <fei.li@intel.com>
Date:   Fri Apr 5 21:20:36 2013 +0800

    hwspinlock: fix __hwspin_lock_request error path
    
    commit c10b90d85a5126d25c89cbaa50dc9fdd1c4d001a upstream.
    
    Even in failed case of pm_runtime_get_sync, the usage_count
    is incremented. In order to keep the usage_count with correct
    value and runtime power management to behave correctly, call
    pm_runtime_put_noidle in such case.
    
    In __hwspin_lock_request, module_put is also called before
    return in pm_runtime_get_sync failed case.
    
    Signed-off-by Liu Chuansheng <chuansheng.liu@intel.com>
    Signed-off-by: Li Fei <fei.li@intel.com>
    [edit commit log]
    Signed-off-by: Ohad Ben-Cohen <ohad@wizery.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 261c874090bde0efb5040608d8123d5f0fadcac8
Author: Li Fei <fei.li@intel.com>
Date:   Fri Apr 5 21:20:36 2013 +0800

    hwspinlock: fix __hwspin_lock_request error path
    
    commit c10b90d85a5126d25c89cbaa50dc9fdd1c4d001a upstream.
    
    Even in failed case of pm_runtime_get_sync, the usage_count
    is incremented. In order to keep the usage_count with correct
    value and runtime power management to behave correctly, call
    pm_runtime_put_noidle in such case.
    
    In __hwspin_lock_request, module_put is also called before
    return in pm_runtime_get_sync failed case.
    
    Signed-off-by Liu Chuansheng <chuansheng.liu@intel.com>
    Signed-off-by: Li Fei <fei.li@intel.com>
    [edit commit log]
    Signed-off-by: Ohad Ben-Cohen <ohad@wizery.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c10b90d85a5126d25c89cbaa50dc9fdd1c4d001a
Author: Li Fei <fei.li@intel.com>
Date:   Fri Apr 5 21:20:36 2013 +0800

    hwspinlock: fix __hwspin_lock_request error path
    
    Even in failed case of pm_runtime_get_sync, the usage_count
    is incremented. In order to keep the usage_count with correct
    value and runtime power management to behave correctly, call
    pm_runtime_put_noidle in such case.
    
    In __hwspin_lock_request, module_put is also called before
    return in pm_runtime_get_sync failed case.
    
    Cc: stable@vger.kernel.org
    Signed-off-by Liu Chuansheng <chuansheng.liu@intel.com>
    Signed-off-by: Li Fei <fei.li@intel.com>
    [edit commit log]
    Signed-off-by: Ohad Ben-Cohen <ohad@wizery.com>

commit 0c8150d2c404a13161eb9e0ff3d9df4838de2a6d
Merge: e2e091fd9940 283189d3be56
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 7 13:06:21 2013 -0800

    Merge tag 'regmap-v3.9-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/regmap
    
    Pull regmap PM fix from Mark Brown:
     "A simple fix to stop us leaking a runtime PM reference in the case
      where we fail to enable a device."
    
    * tag 'regmap-v3.9-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/regmap:
      regmap: irq: call pm_runtime_put in pm_runtime_get_sync failed case

commit 42af657feb3481b1dfc130619b5e0d56abc4e0fc
Author: Li Fei <fei.li@intel.com>
Date:   Thu Feb 28 15:51:32 2013 +0800

    wl1251: call pm_runtime_put_sync in pm_runtime_get_sync failed case
    
    Even in failed case of pm_runtime_get_sync, the usage_count
    is incremented. In order to keep the usage_count with correct
    value and runtime power management to behave correctly, call
    pm_runtime_put(_sync) in such case.
    
    Signed-off-by Liu Chuansheng <chuansheng.liu@intel.com>
    Signed-off-by: Li Fei <fei.li@intel.com>
    Signed-off-by: Luciano Coelho <coelho@ti.com>

commit 283189d3be56aa6db6f192bb255df68493cd79ac
Author: Li Fei <fei.li@intel.com>
Date:   Thu Feb 28 15:37:11 2013 +0800

    regmap: irq: call pm_runtime_put in pm_runtime_get_sync failed case
    
    Even in failed case of pm_runtime_get_sync, the usage_count
    is incremented. In order to keep the usage_count with correct
    value and runtime power management to behave correctly, call
    pm_runtime_put(_sync) in such case.
    
    Signed-off-by Liu Chuansheng <chuansheng.liu@intel.com>
    Signed-off-by: Li Fei <fei.li@intel.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

commit c6699b58f4fe2f968f036a862c09ce44b6968376
Merge: 5a1203914a63 2d9f0d964be9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Feb 20 11:00:43 2013 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/dtor/input
    
    Pull input updates from Dmitry Torokhov:
     "Two new touchpad drivers - Cypress APA I2C Trackpad and Cypress PS/2
      touchpad and a big update to ALPS driver from Kevin Cernekee that adds
      support for "Rushmore" touchpads and paves way for adding support for
      "Dolphin" touchpads.
    
      There is also a new input driver for Goldfish emulator and also
      Android keyreset driver was folded into SysRq code.
    
      A few more drivers were updated with device tree bindings and others
      got some small cleanups and fixes."
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/dtor/input: (55 commits)
      Input: cyttsp-spi - remove duplicate MODULE_ALIAS()
      Input: tsc2005 - add MODULE_ALIAS
      Input: tegra-kbc - require CONFIG_OF, remove platform data
      Input: synaptics - initialize pointer emulation usage
      Input: MT - do not apply filtering on emulated events
      Input: bma150 - make some defines public and fix some comments
      Input: bma150 - fix checking pm_runtime_get_sync() return value
      Input: ALPS - enable trackstick on Rushmore touchpads
      Input: ALPS - add support for "Rushmore" touchpads
      Input: ALPS - make the V3 packet field decoder "pluggable"
      Input: ALPS - move pixel and bitmap info into alps_data struct
      Input: ALPS - fix command mode check
      Input: ALPS - rework detection of Pinnacle AGx touchpads
      Input: ALPS - move {addr,nibble}_command settings into alps_set_defaults()
      Input: ALPS - use function pointers for different protocol handlers
      Input: ALPS - rework detection sequence
      Input: ALPS - introduce helper function for repeated commands
      Input: ALPS - move alps_get_model() down below hw_init code
      Input: ALPS - copy "model" info into alps_data struct
      Input: ALPS - document the alps.h data structures
      ...

commit 79f34d19d7d1ece9918afe079529e61f978eeebe
Author: Michael Trimarchi <michael@amarulasolutions.com>
Date:   Fri Feb 15 14:42:51 2013 -0800

    Input: bma150 - fix checking pm_runtime_get_sync() return value
    
    When PM_RUNTIME is not defined, pm_runtime_get_sync() returns 1, see
    include/linux/pm_runtime.c::__pm_runtime_resume(), and the check of the
    return value was overlooking this, in this case bma150_open() would
    return 1 which is not expected by upper layers.
    
    Maybe the check for != -ENOSYS (Function not implemented) was meant to
    cover this, but pm_runtime_get_sync() does not return this value.
    
    For now fix the issue locally by checking explicitly for negative return
    values.
    
    Signed-off-by: Michael Trimarchi <michael@amarulasolutions.com>
    Signed-off-by: Antonio Ospite <ao2@amarulasolutions.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

commit 50439c4394f0731dca76ef29916ce36abc093ad9
Author: Huang Ying <ying.huang@intel.com>
Date:   Wed Oct 24 14:54:13 2012 +0800

    PCI/PM: Fix deadlock when unbinding device if parent in D3cold
    
    commit 90b5c1d7c45eeb622302680ff96ed30c1a2b6f0e upstream.
    
    If a PCI device and its parents are put into D3cold, unbinding the
    device will trigger deadlock as follow:
    
    - driver_unbind
      - device_release_driver
        - device_lock(dev)                          <--- previous lock here
        - __device_release_driver
          - pm_runtime_get_sync
            ...
              - rpm_resume(dev)
                - rpm_resume(dev->parent)
                  ...
                    - pci_pm_runtime_resume
                      ...
                      - pci_set_power_state
                        - __pci_start_power_transition
                          - pci_wakeup_bus(dev->parent->subordinate)
                            - pci_walk_bus
                              - device_lock(dev)    <--- deadlock here
    
    
    If we do not do device_lock in pci_walk_bus, we can avoid deadlock.
    Device_lock in pci_walk_bus is introduced in commit:
    d71374dafbba7ec3f67371d3b7e9f6310a588808, corresponding email thread
    is: https://lkml.org/lkml/2006/5/26/38.  The patch author Zhang Yanmin
    said device_lock is added to pci_walk_bus because:
    
      Some error handling functions call pci_walk_bus. For example, PCIe
      aer. Here we lock the device, so the driver wouldn't detach from the
      device, as the cb might call driver's callback function.
    
    So I fixed the deadlock as follows:
    
    - remove device_lock from pci_walk_bus
    - add device_lock into callback if callback will call driver's callback
    
    I checked pci_walk_bus users one by one, and found only PCIe aer needs
    device lock.
    
    Signed-off-by: Huang Ying <ying.huang@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    CC: stable@vger.kernel.org              # v3.6+
    CC: Zhang Yanmin <yanmin.zhang@intel.com>

commit d1df50f438c12b0b25ad64bfcbc7bb1efdcf53b7
Author: Vaibhav Hiremath <hvaibhav@ti.com>
Date:   Wed Nov 14 09:07:54 2012 +0000

    net: davinci_mdio: Fix typo mistake in calling runtime-pm api
    
    By mistake (most likely a copy-paste), instead of pm_runtime_get_sync()
    api, driver is calling pm_runtime_put_sync() api in resume callback
    function. The bug was introduced by commit id (ae2c07aaf74:
    davinci_mdio: runtime PM support).
    
    Now, the reason why it didn't impact functionality is, the patch has
    been tested on AM335x-EVM and BeagleBone platform while submitting;
    and in case of AM335x the MDIO driver doesn't control the module
    enable/disable part, which is handled by CPSW driver.
    
    Signed-off-by: Vaibhav Hiremath <hvaibhav@ti.com>
    Signed-off-by: Mugunthan V N <mugunthanvnm@ti.com>
    Acked-by: Peter Korsgaard <jacmet@sunsite.dk>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4b6d1f12f9c4e0e420d5747d3ae285d8f66d627f
Author: LongX Zhang <longx.zhang@intel.com>
Date:   Thu Oct 25 00:21:28 2012 +0200

    driver core / PM: move the calling to device_pm_remove behind the calling to bus_remove_device
    
    We hit an hang issue when removing a mmc device on Medfield Android phone by sysfs interface.
    
    device_pm_remove will call pm_runtime_remove which would disable
    runtime PM of the device. After that pm_runtime_get* or
    pm_runtime_put* will be ignored. So if we disable the runtime PM
    before device really be removed, drivers' _remove callback may
    access HW even pm_runtime_get* fails. That is bad.
    
    Consider below call sequence when removing a device:
    device_del => device_pm_remove
                 => class_intf->remove_dev(dev, class_intf)  => pm_runtime_get_sync/put_sync
                 => bus_remove_device => device_release_driver => pm_runtime_get_sync/put_sync
    
    remove_dev might call pm_runtime_get_sync/put_sync.
    Then, generic device_release_driver also calls pm_runtime_get_sync/put_sync.
    Since device_del => device_pm_remove firstly, later _get_sync wouldn't really wake up the device.
    
    I git log -p to find the patch which moves the calling to device_pm_remove ahead.
    It's below patch:
    
    commit  775b64d2b6ca37697de925f70799c710aab5849a
    Author: Rafael J. Wysocki <rjw@sisk.pl>
    Date:   Sat Jan 12 20:40:46 2008 +0100
    
         PM: Acquire device locks on suspend
    
         This patch reorganizes the way suspend and resume notifications are
         sent to drivers.  The major changes are that now the PM core acquires
         every device semaphore before calling the methods, and calls to
         device_add() during suspends will fail, while calls to device_del()
         during suspends will block.
    
         It also provides a way to safely remove a suspended device with the
         help of the PM core, by using the device_pm_schedule_removal() callback
         introduced specifically for this purpose, and updates two drivers (msr
         and cpuid) that need to use it.
    
    As device_pm_schedule_removal is deleted by another patch, we need also revert other parts of the patch,
    i.e. move the calling of device_pm_remove after the calling to bus_remove_device.
    
    Signed-off-by: LongX Zhang <longx.zhang@intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 7e4d68443a80574392d1027ff34992ab945934a6
Author: Lan Tianyu <tianyu.lan@intel.com>
Date:   Thu Nov 8 11:14:08 2012 +0800

    PM / QoS: Resume device before exposing/hiding PM QoS flags
    
    Since dev_pm_qos_add_request(), dev_pm_qos_update_request() and
    dev_pm_qos_remove_request() for PM QoS flags should not be invoked
    when device in RPM_SUSPENDED, add pm_runtime_get_sync() and pm_runtime_put()
    around these functions in dev_pm_qos_expose_flags() and
    dev_pm_qos_hide_flags().
    
    [rjw: Modified the subject and changelog to better reflect the code
     changes made.]
    
    Signed-off-by: Lan Tianyu <tianyu.lan@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 90b5c1d7c45eeb622302680ff96ed30c1a2b6f0e
Author: Huang Ying <ying.huang@intel.com>
Date:   Wed Oct 24 14:54:13 2012 +0800

    PCI/PM: Fix deadlock when unbinding device if parent in D3cold
    
    If a PCI device and its parents are put into D3cold, unbinding the
    device will trigger deadlock as follow:
    
    - driver_unbind
      - device_release_driver
        - device_lock(dev)                          <--- previous lock here
        - __device_release_driver
          - pm_runtime_get_sync
            ...
              - rpm_resume(dev)
                - rpm_resume(dev->parent)
                  ...
                    - pci_pm_runtime_resume
                      ...
                      - pci_set_power_state
                        - __pci_start_power_transition
                          - pci_wakeup_bus(dev->parent->subordinate)
                            - pci_walk_bus
                              - device_lock(dev)    <--- deadlock here
    
    
    If we do not do device_lock in pci_walk_bus, we can avoid deadlock.
    Device_lock in pci_walk_bus is introduced in commit:
    d71374dafbba7ec3f67371d3b7e9f6310a588808, corresponding email thread
    is: https://lkml.org/lkml/2006/5/26/38.  The patch author Zhang Yanmin
    said device_lock is added to pci_walk_bus because:
    
      Some error handling functions call pci_walk_bus. For example, PCIe
      aer. Here we lock the device, so the driver wouldn't detach from the
      device, as the cb might call driver's callback function.
    
    So I fixed the deadlock as follows:
    
    - remove device_lock from pci_walk_bus
    - add device_lock into callback if callback will call driver's callback
    
    I checked pci_walk_bus users one by one, and found only PCIe aer needs
    device lock.
    
    Signed-off-by: Huang Ying <ying.huang@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    CC: stable@vger.kernel.org              # v3.6+
    CC: Zhang Yanmin <yanmin.zhang@intel.com>

commit 4964a26df72c4a82e56c6b40818648d54bde93cc
Author: Ulf Hansson <ulf.hansson@linaro.org>
Date:   Wed Oct 17 14:27:16 2012 +0200

    spi/pl022: Activate resourses before deactivate them in suspend
    
    To be able to deactivate resourses in suspend, the resourses must
    first be surely active. This is done with a pm_runtime_get_sync.
    Once the resourses are restored to active state again in resume,
    the runtime pm usage count can be decreased with a pm_runtime_put.
    
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

commit 6f3c77b040fc24708228607bba504878de5236d1
Author: Kevin Hilman <khilman@ti.com>
Date:   Fri Sep 21 22:47:34 2012 +0000

    PM / Runtime: let rpm_resume() succeed if RPM_ACTIVE, even when disabled, v2
    
    There are several drivers where the return value of
    pm_runtime_get_sync() is used to decide whether or not it is safe to
    access hardware and that don't provide .suspend() callbacks for system
    suspend (but may use late/noirq callbacks.)  If such a driver happens
    to call pm_runtime_get_sync() during system suspend, after the core
    has disabled runtime PM, it will get the error code and will decide
    that the hardware should not be accessed, although this may be a wrong
    conclusion, depending on the state of the device when runtime PM was
    disabled.
    
    Drivers might work around this problem by using a test like:
    
       ret = pm_runtime_get_sync(dev);
       if (!ret || (ret == -EACCES && driver_private_data(dev)->suspended)) {
          /* access hardware */
       }
    
    where driver_private_data(dev)->suspended is a flag set by the
    driver's .suspend() method (that would have to be added for this
    purpose).  However, that potentially would need to be done by multiple
    drivers which means quite a lot of duplicated code and bloat.
    
    To avoid that we can use the observation that the core sets
    dev->power.is_suspended before disabling runtime PM and use that
    instead of the driver's private flag.  Still, potentially many drivers
    would need to repeat that same check in quite a few places, so it's
    better to let the core do it.
    
    Then we can be a bit smarter and check whether or not runtime PM was
    disabled by the core only (disable_depth == 1) or by someone else in
    addition to the core (disable_depth > 1).  In the former case
    rpm_resume() can return 1 if the runtime PM status is RPM_ACTIVE,
    because it means the device was active when the core disabled runtime
    PM.  In the latter case it should still return -EACCES, because it
    isn't clear why runtime PM has been disabled.
    
    Tested on AM3730/Beagle-xM where a wakeup IRQ firing during the late
    suspend phase triggers runtime PM activity in the I2C driver since the
    wakeup IRQ is on an I2C-connected PMIC.
    
    [rjw: Modified whitespace to follow the file's convention.]
    
    Signed-off-by: Kevin Hilman <khilman@ti.com>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

commit e3a36b207f76364c281aeecaf14c1b22a7247278
Author: Felipe Balbi <balbi@ti.com>
Date:   Wed Sep 12 16:28:14 2012 +0530

    i2c: omap: remove unnecessary pm_runtime_suspended check
    
    before starting any messages we call pm_runtime_get_sync()
    which will make sure that by the time we program a transfer
    and our IRQ handler gets called, we're not suspended
    anymore.
    
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Shubhrajyoti D <shubhrajyoti@ti.com>
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>

commit e2e3e4e51ebdcd757079bd7ec5dcc9dfb2ebce24
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Mon Aug 6 01:47:29 2012 +0200

    PM / Domains: Do not measure start time for "irq safe" devices
    
    The genpd_start_dev() routine used by pm_genpd_runtime_resume()
    to put "irq safe" devices into the full power state measures the
    time necessary to "start" the device and updates its PM QoS timing
    data if necessary.  This may lead to a deadlock if the given device
    is a clock source and genpd_start_dev() is invoked from within the
    clock source's .enable() routine, which will happen if that routine
    uses pm_runtime_get_sync(), for example, to ensure that the device
    is operational.
    
    For this reason, introduce a special routine analogous to
    genpd_start_dev(), called genpd_start_dev_no_timing(), that doesn't
    carry out the time measurement, and make pm_genpd_runtime_resume()
    use it instead of genpd_start_dev() to power up "irq safe" devices.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

commit bed2b42d9f0b411f384c5619870ab0fea5dd116b
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Mon Aug 6 01:45:11 2012 +0200

    PM / Runtime: Allow helpers to be called by early platform drivers
    
    Runtime PM helper functions, like pm_runtime_get_sync(), cannot be
    called by early platform device drivers, because the devices' power
    management locks are not initialized at that time.  This is quite
    inconvenient, so modify early_platform_add_devices() to initialize
    the devices power management locks as appropriate and make sure that
    they won't be initialized more than once if an early platform
    device is going to be used as a regular one later.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

commit 373b43652150c9342168c846a1efbd81438ea241
Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
Date:   Wed Jul 4 18:13:49 2012 +0530

    OMAPDSS: fix warnings if CONFIG_PM_RUNTIME=n
    
    If runtime PM is not enabled in the kernel config, pm_runtime_get_sync()
    will always return 1 and pm_runtime_put_sync() will always return
    -ENOSYS. pm_runtime_get_sync() returning 1 presents no problem to the
    driver, but -ENOSYS from pm_runtime_put_sync() causes the driver to
    print a warning.
    
    One option would be to ignore errors returned by pm_runtime_put_sync()
    totally, as they only say that the call was unable to put the hardware
    into suspend mode.
    
    However, I chose to ignore the returned -ENOSYS explicitly, and print a
    warning for other errors, as I think we should get notified if the HW
    failed to go to suspend properly.
    
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Jassi Brar <jaswinder.singh@linaro.org>
    Cc: Grazvydas Ignotas <notasas@gmail.com>
    Signed-off-by: Archit Taneja <archit@ti.com>
    Signed-off-by: Florian Tobias Schandinat <FlorianSchandinat@gmx.de>

commit 0861f430893e0b6fe980a71cdc5fb444b952b8e1
Author: Shubhrajyoti D <shubhrajyoti@ti.com>
Date:   Tue May 29 16:26:18 2012 +0530

    I2C: OMAP: Fix the crash in i2c remove
    
        In omap_i2c_remove we are accessing the I2C_CON register without
        enabling the clocks. Fix the same by ensure device is accessible by calling
        pm_runtime_get_sync before accessing the registers and calling pm_runtime_put
        after accessing.
    
        This fixes the following crash.
        [  154.723022] ------------[ cut here ]------------
        [  154.725677] WARNING: at arch/arm/mach-omap2/omap_l3_noc.c:112 l3_interrupt_handler+0x1b4/0x1c4()
        [  154.725677] L3 custom error: MASTER:MPU TARGET:L4 PER2
        [  154.742614] Modules linked in: i2c_omap(-)
        [  154.746948] Backtrace:
        [  154.746948] [<c0013078>] (dump_backtrace+0x0/0x110) from [<c026c158>] (dump_stack+0x18/0x1c)
        [  154.752716]  r6:00000070 r5:c002c43c r4:df9b9e98 r3:df9b8000
        [  154.764465] [<c026c140>] (dump_stack+0x0/0x1c) from [<c0041a2c>] (warn_slowpath_common+0x5c/0x6c)
        [  154.768341] [<c00419d0>] (warn_slowpath_common+0x0/0x6c) from [<c0041ae0>] (warn_slowpath_fmt+0x38/0x40)
        [  154.776153]  r8:00000180 r7:c0361594 r6:c0379b48 r5:00080003 r4:e0838b00
        [  154.790771] r3:00000009
        [  154.791778] [<c0041aa8>] (warn_slowpath_fmt+0x0/0x40) from [<c002c43c>] (l3_interrupt_handler+0x1b4/0x1c4)
        [  154.803710]  r3:c0361598 r2:c02ef74c
        [  154.807403] [<c002c288>] (l3_interrupt_handler+0x0/0x1c4) from [<c0085f44>] (handle_irq_event_percpu+0x58/0
        [  154.818237]  r8:0000002a r7:00000000 r6:00000000 r5:df808054 r4:df8893c0
        [  154.825378] [<c0085eec>] (handle_irq_event_percpu+0x0/0x188) from [<c00860b8>] (handle_irq_event+0x44/0x64)
        [  154.835662] [<c0086074>] (handle_irq_event+0x0/0x64) from [<c0088ec0>] (handle_fasteoi_irq+0xa4/0x10c)
        [  154.845458]  r6:0000002a r5:df808054 r4:df808000 r3:c034a150
        [  154.846466] [<c0088e1c>] (handle_fasteoi_irq+0x0/0x10c) from [<c0085ed0>] (generic_handle_irq+0x30/0x38)
        [  154.854278]  r5:c034aa48 r4:0000002a
        [  154.862091] [<c0085ea0>] (generic_handle_irq+0x0/0x38) from [<c000fd38>] (handle_IRQ+0x60/0xc0)
        [  154.874450]  r4:c034ea70 r3:000001f8
        [  154.878234] [<c000fcd8>] (handle_IRQ+0x0/0xc0) from [<c0008478>] (gic_handle_irq+0x20/0x5c)
        [  154.887023]  r7:ffffff40 r6:df9b9fb0 r5:c034e2b4 r4:0000001a
        [  154.887054] [<c0008458>] (gic_handle_irq+0x0/0x5c) from [<c000ea80>] (__irq_usr+0x40/0x60)
        [  154.901153] Exception stack(0xdf9b9fb0 to 0xdf9b9ff8)
        [  154.907104] 9fa0:                                     beaf1f04 4006be00 0000000f 0000000c
        [  154.915710] 9fc0: 4006c000 00000000 00008034 ffffff40 00000007 00000000 00000000 0007b8d7
        [  154.916778] 9fe0: 00000000 beaf1b68 0000d23c 4005baf0 80000010 ffffffff
        [  154.931335]  r6:ffffffff r5:80000010 r4:4005baf0 r3:beaf1f04
        [  154.937316] ---[ end trace 1b75b31a2719ed21 ]--
    
    Cc: Rajendra Nayak <rnayak@ti.com>
    Cc: Linux PM list <linux-pm@vger.kernel.org>
    Reviewed-by: Kevin Hilman <khilman@ti.com>
    Signed-off-by: Shubhrajyoti D <shubhrajyoti@ti.com>
    Signed-off-by: Wolfram Sang <w.sang@pengutronix.de>

commit 5be3aebd09f384fa2db8dda4fd99b73fc4be64f1
Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
Date:   Wed Jun 27 16:37:18 2012 +0300

    OMAPDSS: fix warnings if CONFIG_PM_RUNTIME=n
    
    If runtime PM is not enabled in the kernel config, pm_runtime_get_sync()
    will always return 1 and pm_runtime_put_sync() will always return
    -ENOSYS. pm_runtime_get_sync() returning 1 presents no problem to the
    driver, but -ENOSYS from pm_runtime_put_sync() causes the driver to
    print a warning.
    
    One option would be to ignore errors returned by pm_runtime_put_sync()
    totally, as they only say that the call was unable to put the hardware
    into suspend mode.
    
    However, I chose to ignore the returned -ENOSYS explicitly, and print a
    warning for other errors, as I think we should get notified if the HW
    failed to go to suspend properly.
    
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Jassi Brar <jaswinder.singh@linaro.org>
    Cc: Grazvydas Ignotas <notasas@gmail.com>

commit 1e5acb8d6113a0f159257845e153d5b870ca618a
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Fri Jun 22 17:40:51 2012 +0530

    usb: musb: move work_struct(otg_notifier_work) from core to omap glue
    
    Commit 712d8e(fixes pm_runtime calls while atomic by using a work
    queue. musb pm_runtime_get_sync call happens in interrupt context
    on cable attach case. That can result in re-enabling the interrupts and
    cause side affect. To avoid this deferred processing is used)
    
    While the issue and the work queue implementation is specific to omap
    (omap2430.c), the work_struct is defined as a member of struct musb
    (musb_core.h). Hence moved the work_struct from musb_core to omap
    glue.
    
    Cc: Vikram Pandita <vikram.pandita@ti.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 2e67ffa6107563e7c147d3648d7b457c0ac571d8
Author: Shubhrajyoti D <shubhrajyoti@ti.com>
Date:   Thu Mar 22 12:48:06 2012 +0530

    usb: musb: omap: fix the error check for pm_runtime_get_sync
    
    commit ad579699c4f0274bf522a9252ff9b20c72197e48 upstream.
    
    pm_runtime_get_sync returns a signed integer. In case of errors
    it returns a negative value. This patch fixes the error check
    by making it signed instead of unsigned thus preventing register
    access if get_sync_fails. Also passes the error cause to the
    debug message.
    
    Cc:  Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Shubhrajyoti D <shubhrajyoti@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f48a6c0a5a021f575ca37d923b4149317bcb4c63
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Wed Mar 21 21:30:20 2012 +0530

    usb: musb: omap: fix crash when musb glue (omap) gets initialized
    
    commit 3006dc8c627d738693e910c159630e4368c9e86c upstream.
    
    pm_runtime_enable is being called after omap2430_musb_init. Hence
    pm_runtime_get_sync in omap2430_musb_init does not have any effect (does
    not enable clocks) resulting in a crash during register access. It is
    fixed here.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f77621cc640a7c50b3d8c5254ecc5d91eaa99d0d
Author: Poddar, Sourav <sourav.poddar@ti.com>
Date:   Thu May 10 22:32:00 2012 -0700

    Input: omap-keypad - dynamically handle register offsets
    
    Hi Dmitry,
    
    On Wed, May 9, 2012 at 3:14 PM, Poddar, Sourav <sourav.poddar@ti.com> wrote:
    > Hi Dmitry,
    >
    > I did some minor fixes to the patch which you suggested above and
    > the keypad is functional now.
    >
    > Changes:
    > - Move "pm_runtime_enable" before using "pm_runtime_get_sync".
    >
    > Sending the patch inlined..(also attached).
    >
    > From: G, Manjunath Kondaiah <manjugk@ti.com>
    > Date: Mon, 10 Oct 2011 20:52:05 +0530
    > Subject: [PATCH] Input: omap-keypad: dynamically handle register offsets
    >
    > Keypad controller register offsets are different for omap4
    > and omap5. Handle these offsets through static mapping and
    > assign these mappings during run time.
    >
    > Tested on omap4430 sdp with 3.4-rc3.
    > Tested on omap5430evm with 3.1-custom kernel.
    >
    > Cc: Andrew Morton <akpm@linux-foundation.org>
    > Signed-off-by: Felipe Balbi <balbi@ti.com>
    > Signed-off-by: G, Manjunath Kondaiah <manjugk@ti.com>
    > Signed-off-by: Sourav Poddar <sourav.poddar@ti.com>
    > Signed-off-by: Dmitry Torokhov <dtor@mail.ru>
    > ---
    >  drivers/input/keyboard/Kconfig        |    4 +-
    >  drivers/input/keyboard/omap4-keypad.c |  120 +++++++++++++++++++++++++-------
    >  2 files changed, 95 insertions(+), 29 deletions(-)
    >
    > diff --git a/drivers/input/keyboard/Kconfig b/drivers/input/keyboard/Kconfig
    > index f354813..33bbdee 100644
    > --- a/drivers/input/keyboard/Kconfig
    > +++ b/drivers/input/keyboard/Kconfig
    > @@ -512,9 +512,9 @@ config KEYBOARD_OMAP
    >          module will be called omap-keypad.
    >
    >  config KEYBOARD_OMAP4
    > -       tristate "TI OMAP4 keypad support"
    > +       tristate "TI OMAP4+ keypad support"
    >        help
    > -         Say Y here if you want to use the OMAP4 keypad.
    > +         Say Y here if you want to use the OMAP4+ keypad.
    >
    >          To compile this driver as a module, choose M here: the
    >          module will be called omap4-keypad.
    > diff --git a/drivers/input/keyboard/omap4-keypad.c
    > b/drivers/input/keyboard/omap4-keypad.c
    > index e809ac0..d7102e8 100644
    > --- a/drivers/input/keyboard/omap4-keypad.c
    > +++ b/drivers/input/keyboard/omap4-keypad.c
    > @@ -68,19 +68,52 @@
    >
    >  #define OMAP4_MASK_IRQSTATUSDISABLE    0xFFFF
    >
    > +enum {
    > +       KBD_REVISION_OMAP4 = 0,
    > +       KBD_REVISION_OMAP5,
    > +};
    > +
    >  struct omap4_keypad {
    >        struct input_dev *input;
    >
    >        void __iomem *base;
    > -       int irq;
    > +       unsigned int irq;
    >
    >        unsigned int rows;
    >        unsigned int cols;
    > +       u32 reg_offset;
    > +       u32 irqreg_offset;
    >        unsigned int row_shift;
    >        unsigned char key_state[8];
    >        unsigned short keymap[];
    >  };
    >
    > +static int kbd_readl(struct omap4_keypad *keypad_data, u32 offset)
    > +{
    > +       return __raw_readl(keypad_data->base +
    > +                               keypad_data->reg_offset + offset);
    > +}
    > +
    > +static void kbd_writel(struct omap4_keypad *keypad_data, u32 offset, u32 value)
    > +{
    > +       __raw_writel(value,
    > +                    keypad_data->base + keypad_data->reg_offset + offset);
    > +}
    > +
    > +static int kbd_read_irqreg(struct omap4_keypad *keypad_data, u32 offset)
    > +{
    > +       return __raw_readl(keypad_data->base +
    > +                               keypad_data->irqreg_offset + offset);
    > +}
    > +
    > +static void kbd_write_irqreg(struct omap4_keypad *keypad_data,
    > +                            u32 offset, u32 value)
    > +{
    > +       __raw_writel(value,
    > +                    keypad_data->base + keypad_data->irqreg_offset + offset);
    > +}
    > +
    > +
    >  /* Interrupt handler */
    >  static irqreturn_t omap4_keypad_interrupt(int irq, void *dev_id)
    >  {
    > @@ -91,12 +124,11 @@ static irqreturn_t omap4_keypad_interrupt(int
    > irq, void *dev_id)
    >        u32 *new_state = (u32 *) key_state;
    >
    >        /* Disable interrupts */
    > -       __raw_writel(OMAP4_VAL_IRQDISABLE,
    > -                    keypad_data->base + OMAP4_KBD_IRQENABLE);
    > +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQENABLE,
    > +                        OMAP4_VAL_IRQDISABLE);
    >
    > -       *new_state = __raw_readl(keypad_data->base + OMAP4_KBD_FULLCODE31_0);
    > -       *(new_state + 1) = __raw_readl(keypad_data->base
    > -                                               + OMAP4_KBD_FULLCODE63_32);
    > +       *new_state = kbd_readl(keypad_data, OMAP4_KBD_FULLCODE31_0);
    > +       *(new_state + 1) = kbd_readl(keypad_data, OMAP4_KBD_FULLCODE63_32);
    >
    >        for (row = 0; row < keypad_data->rows; row++) {
    >                changed = key_state[row] ^ keypad_data->key_state[row];
    > @@ -121,12 +153,13 @@ static irqreturn_t omap4_keypad_interrupt(int
    > irq, void *dev_id)
    >                sizeof(keypad_data->key_state));
    >
    >        /* clear pending interrupts */
    > -       __raw_writel(__raw_readl(keypad_data->base + OMAP4_KBD_IRQSTATUS),
    > -                       keypad_data->base + OMAP4_KBD_IRQSTATUS);
    > +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQSTATUS,
    > +                        kbd_read_irqreg(keypad_data, OMAP4_KBD_IRQSTATUS));
    >
    >        /* enable interrupts */
    > -       __raw_writel(OMAP4_DEF_IRQENABLE_EVENTEN | OMAP4_DEF_IRQENABLE_LONGKEY,
    > -                       keypad_data->base + OMAP4_KBD_IRQENABLE);
    > +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQENABLE,
    > +               OMAP4_DEF_IRQENABLE_EVENTEN |
    > +                               OMAP4_DEF_IRQENABLE_LONGKEY);
    >
    >        return IRQ_HANDLED;
    >  }
    > @@ -139,16 +172,17 @@ static int omap4_keypad_open(struct input_dev *input)
    >
    >        disable_irq(keypad_data->irq);
    >
    > -       __raw_writel(OMAP4_VAL_FUNCTIONALCFG,
    > -                       keypad_data->base + OMAP4_KBD_CTRL);
    > -       __raw_writel(OMAP4_VAL_DEBOUNCINGTIME,
    > -                       keypad_data->base + OMAP4_KBD_DEBOUNCINGTIME);
    > -       __raw_writel(OMAP4_VAL_IRQDISABLE,
    > -                       keypad_data->base + OMAP4_KBD_IRQSTATUS);
    > -       __raw_writel(OMAP4_DEF_IRQENABLE_EVENTEN | OMAP4_DEF_IRQENABLE_LONGKEY,
    > -                       keypad_data->base + OMAP4_KBD_IRQENABLE);
    > -       __raw_writel(OMAP4_DEF_WUP_EVENT_ENA | OMAP4_DEF_WUP_LONG_KEY_ENA,
    > -                       keypad_data->base + OMAP4_KBD_WAKEUPENABLE);
    > +       kbd_writel(keypad_data, OMAP4_KBD_CTRL,
    > +                       OMAP4_VAL_FUNCTIONALCFG);
    > +       kbd_writel(keypad_data, OMAP4_KBD_DEBOUNCINGTIME,
    > +                       OMAP4_VAL_DEBOUNCINGTIME);
    > +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQSTATUS,
    > +                       OMAP4_VAL_IRQDISABLE);
    > +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQENABLE,
    > +                       OMAP4_DEF_IRQENABLE_EVENTEN |
    > +                               OMAP4_DEF_IRQENABLE_LONGKEY);
    > +       kbd_writel(keypad_data, OMAP4_KBD_WAKEUPENABLE,
    > +                       OMAP4_DEF_WUP_EVENT_ENA | OMAP4_DEF_WUP_LONG_KEY_ENA);
    >
    >        enable_irq(keypad_data->irq);
    >
    > @@ -162,12 +196,12 @@ static void omap4_keypad_close(struct input_dev *input)
    >        disable_irq(keypad_data->irq);
    >
    >        /* Disable interrupts */
    > -       __raw_writel(OMAP4_VAL_IRQDISABLE,
    > -                    keypad_data->base + OMAP4_KBD_IRQENABLE);
    > +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQENABLE,
    > +                        OMAP4_VAL_IRQDISABLE);
    >
    >        /* clear pending interrupts */
    > -       __raw_writel(__raw_readl(keypad_data->base + OMAP4_KBD_IRQSTATUS),
    > -                       keypad_data->base + OMAP4_KBD_IRQSTATUS);
    > +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQSTATUS,
    > +                        kbd_read_irqreg(keypad_data, OMAP4_KBD_IRQSTATUS));
    >
    >        enable_irq(keypad_data->irq);
    >
    > @@ -182,6 +216,7 @@ static int __devinit omap4_keypad_probe(struct
    > platform_device *pdev)
    >        struct resource *res;
    >        resource_size_t size;
    >        unsigned int row_shift, max_keys;
    > +       int rev;
    >        int irq;
    >        int error;
    >
    > @@ -241,11 +276,40 @@ static int __devinit omap4_keypad_probe(struct
    > platform_device *pdev)
    >        keypad_data->rows = pdata->rows;
    >        keypad_data->cols = pdata->cols;
    >
    > +       /*
    > +       * Enable clocks for the keypad module so that we can read
    > +       * revision register.
    > +       */
    > +       pm_runtime_enable(&pdev->dev);
    > +       error = pm_runtime_get_sync(&pdev->dev);
    > +       if (error) {
    > +               dev_err(&pdev->dev, "pm_runtime_get_sync() failed\n");
    > +               goto err_unmap;
    > +       }
    > +       rev = __raw_readl(keypad_data->base + OMAP4_KBD_REVISION);
    > +       rev &= 0x03 << 30;
    > +       rev >>= 30;
    > +       switch (rev) {
    > +       case KBD_REVISION_OMAP4:
    > +               keypad_data->reg_offset = 0x00;
    > +               keypad_data->irqreg_offset = 0x00;
    > +               break;
    > +       case KBD_REVISION_OMAP5:
    > +               keypad_data->reg_offset = 0x10;
    > +               keypad_data->irqreg_offset = 0x0c;
    > +               break;
    > +       default:
    > +               dev_err(&pdev->dev,
    > +                       "Keypad reports unsupported revision %d", rev);
    > +               error = -EINVAL;
    > +               goto err_pm_put_sync;
    > +       }
    > +
    >        /* input device allocation */
    >        keypad_data->input = input_dev = input_allocate_device();
    >        if (!input_dev) {
    >                error = -ENOMEM;
    > -               goto err_unmap;
    > +               goto err_pm_put_sync;
    >        }
    >
    >        input_dev->name = pdev->name;
    > @@ -273,14 +337,14 @@ static int __devinit omap4_keypad_probe(struct
    > platform_device *pdev)
    >                        input_dev->keycode, input_dev->keybit);
    >
    >        error = request_irq(keypad_data->irq, omap4_keypad_interrupt,
    > -                            IRQF_TRIGGER_RISING,
    > +                           IRQF_DISABLED | IRQF_TRIGGER_RISING,
    Sorry, " IRQF_DISABLED" got included by mistake.
    Removing this stray change and sending it again.
    
    >                             "omap4-keypad", keypad_data);
    >        if (error) {
    >                dev_err(&pdev->dev, "failed to register interrupt\n");
    >                goto err_free_input;
    >        }
    >
    > -       pm_runtime_enable(&pdev->dev);
    > +       pm_runtime_put_sync(&pdev->dev);
    >
    >        error = input_register_device(keypad_data->input);
    >        if (error < 0) {
    > @@ -296,6 +360,8 @@ err_pm_disable:
    >        free_irq(keypad_data->irq, keypad_data);
    >  err_free_input:
    >        input_free_device(input_dev);
    > +err_pm_put_sync:
    > +       pm_runtime_put_sync(&pdev->dev);
    >  err_unmap:
    >        iounmap(keypad_data->base);
    >  err_release_mem:
    >
    >
    > ~Sourav
    >
    > On Wed, May 9, 2012 at 1:15 PM, Dmitry Torokhov
    > <dmitry.torokhov@gmail.com> wrote:
    >>> Hi Dmitry ,
    >>>
    >>>
    >>> On Wed, May 9, 2012 at 10:48 AM, Dmitry Torokhov
    >>> <dmitry.torokhov@gmail.com> wrote:
    >>> > Ho Sourav,
    >>> >
    >>> > On Thu, Apr 26, 2012 at 11:24:37AM +0530, Sourav Poddar wrote:
    >>> >>
    >>> >> -config KEYBOARD_OMAP4
    >>> >> -     tristate "TI OMAP4 keypad support"
    >>> >> +config KEYBOARD_OMAP4+
    >>> >
    >>> > I think this works purely by accident - '+' sign getting dropped by
    >>> > parser...
    >>> >
    >>> >> @@ -139,16 +192,33 @@ static int omap4_keypad_open(struct input_dev *input)
    >>> >>
    >>> >>       disable_irq(keypad_data->irq);
    >>> >>
    >>> >> -     __raw_writel(OMAP4_VAL_FUNCTIONALCFG,
    >>> >> -                     keypad_data->base + OMAP4_KBD_CTRL);
    >>> >> -     __raw_writel(OMAP4_VAL_DEBOUNCINGTIME,
    >>> >> -                     keypad_data->base + OMAP4_KBD_DEBOUNCINGTIME);
    >>> >> -     __raw_writel(OMAP4_VAL_IRQDISABLE,
    >>> >> -                     keypad_data->base + OMAP4_KBD_IRQSTATUS);
    >>> >> -     __raw_writel(OMAP4_DEF_IRQENABLE_EVENTEN | OMAP4_DEF_IRQENABLE_LONGKEY,
    >>> >> -                     keypad_data->base + OMAP4_KBD_IRQENABLE);
    >>> >> -     __raw_writel(OMAP4_DEF_WUP_EVENT_ENA | OMAP4_DEF_WUP_LONG_KEY_ENA,
    >>> >> -                     keypad_data->base + OMAP4_KBD_WAKEUPENABLE);
    >>> >> +     keypad_data->revision = kbd_read_revision(keypad_data,
    >>> >> +                     OMAP4_KBD_REVISION);
    >>> >> +     switch (keypad_data->revision) {
    >>> >> +     case 1:
    >>> >> +             keypad_data->irqstatus = OMAP4_KBD_IRQSTATUS + 0x0c;
    >>> >> +             keypad_data->irqenable = OMAP4_KBD_IRQENABLE + 0x0c;
    >>> >> +             keypad_data->reg_offset = 0x10;
    >>> >> +             break;
    >>> >
    >>> > This should be done in probe().
    >>> >
    >>> Dont we then require "pm_runtime_put_sync" in probe, since we are trying
    >>> to read the keypad revision register.?
    >>
    >> Ah, indeed, but I think not pm_runtime_get_sync() but
    >> pm_runtime_set_active().
    >>
    >> Not sure if this will fix the crash...
    >>
    >> --
    >> Dmitry
    >>
    >>
    >> Input: omap-keypad - dynamically handle register offsets
    >>
    >> From: G, Manjunath Kondaiah <manjugk@ti.com>
    >>
    >> Keypad controller register offsets are different for omap4
    >> and omap5. Handle these offsets through static mapping and
    >> assign these mappings during run time.
    >>
    >> Tested on omap4430 sdp with 3.4-rc3.
    >> Tested on omap5430evm with 3.1-custom kernel.
    >>
    >> Signed-off-by: Felipe Balbi <balbi@ti.com>
    >> Signed-off-by: G, Manjunath Kondaiah <manjugk@ti.com>
    >> Signed-off-by: Sourav Poddar <sourav.poddar@ti.com>
    >> Signed-off-by: Dmitry Torokhov <dtor@mail.ru>
    >> ---
    >>
    >>  drivers/input/keyboard/Kconfig        |    4 +
    >>  drivers/input/keyboard/omap4-keypad.c |  117 ++++++++++++++++++++++++++-------
    >>  2 files changed, 94 insertions(+), 27 deletions(-)
    >>
    >>
    >> diff --git a/drivers/input/keyboard/Kconfig b/drivers/input/keyboard/Kconfig
    >> index 20a3753..84ee155 100644
    >> --- a/drivers/input/keyboard/Kconfig
    >> +++ b/drivers/input/keyboard/Kconfig
    >> @@ -531,9 +531,9 @@ config KEYBOARD_OMAP
    >>          module will be called omap-keypad.
    >>
    >>  config KEYBOARD_OMAP4
    >> -       tristate "TI OMAP4 keypad support"
    >> +       tristate "TI OMAP4+ keypad support"
    >>        help
    >> -         Say Y here if you want to use the OMAP4 keypad.
    >> +         Say Y here if you want to use the OMAP4+ keypad.
    >>
    >>          To compile this driver as a module, choose M here: the
    >>          module will be called omap4-keypad.
    >> diff --git a/drivers/input/keyboard/omap4-keypad.c b/drivers/input/keyboard/omap4-keypad.c
    >> index e809ac0..c9fd0df 100644
    >> --- a/drivers/input/keyboard/omap4-keypad.c
    >> +++ b/drivers/input/keyboard/omap4-keypad.c
    >> @@ -68,19 +68,52 @@
    >>
    >>  #define OMAP4_MASK_IRQSTATUSDISABLE    0xFFFF
    >>
    >> +enum {
    >> +       KBD_REVISION_OMAP4 = 0,
    >> +       KBD_REVISION_OMAP5,
    >> +};
    >> +
    >>  struct omap4_keypad {
    >>        struct input_dev *input;
    >>
    >>        void __iomem *base;
    >> -       int irq;
    >> +       unsigned int irq;
    >>
    >>        unsigned int rows;
    >>        unsigned int cols;
    >> +       u32 reg_offset;
    >> +       u32 irqreg_offset;
    >>        unsigned int row_shift;
    >>        unsigned char key_state[8];
    >>        unsigned short keymap[];
    >>  };
    >>
    >> +static int kbd_readl(struct omap4_keypad *keypad_data, u32 offset)
    >> +{
    >> +       return __raw_readl(keypad_data->base +
    >> +                               keypad_data->reg_offset + offset);
    >> +}
    >> +
    >> +static void kbd_writel(struct omap4_keypad *keypad_data, u32 offset, u32 value)
    >> +{
    >> +       __raw_writel(value,
    >> +                    keypad_data->base + keypad_data->reg_offset + offset);
    >> +}
    >> +
    >> +static int kbd_read_irqreg(struct omap4_keypad *keypad_data, u32 offset)
    >> +{
    >> +       return __raw_readl(keypad_data->base +
    >> +                               keypad_data->irqreg_offset + offset);
    >> +}
    >> +
    >> +static void kbd_write_irqreg(struct omap4_keypad *keypad_data,
    >> +                            u32 offset, u32 value)
    >> +{
    >> +       __raw_writel(value,
    >> +                    keypad_data->base + keypad_data->irqreg_offset + offset);
    >> +}
    >> +
    >> +
    >>  /* Interrupt handler */
    >>  static irqreturn_t omap4_keypad_interrupt(int irq, void *dev_id)
    >>  {
    >> @@ -91,12 +124,11 @@ static irqreturn_t omap4_keypad_interrupt(int irq, void *dev_id)
    >>        u32 *new_state = (u32 *) key_state;
    >>
    >>        /* Disable interrupts */
    >> -       __raw_writel(OMAP4_VAL_IRQDISABLE,
    >> -                    keypad_data->base + OMAP4_KBD_IRQENABLE);
    >> +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQENABLE,
    >> +                        OMAP4_VAL_IRQDISABLE);
    >>
    >> -       *new_state = __raw_readl(keypad_data->base + OMAP4_KBD_FULLCODE31_0);
    >> -       *(new_state + 1) = __raw_readl(keypad_data->base
    >> -                                               + OMAP4_KBD_FULLCODE63_32);
    >> +       *new_state = kbd_readl(keypad_data, OMAP4_KBD_FULLCODE31_0);
    >> +       *(new_state + 1) = kbd_readl(keypad_data, OMAP4_KBD_FULLCODE63_32);
    >>
    >>        for (row = 0; row < keypad_data->rows; row++) {
    >>                changed = key_state[row] ^ keypad_data->key_state[row];
    >> @@ -121,12 +153,13 @@ static irqreturn_t omap4_keypad_interrupt(int irq, void *dev_id)
    >>                sizeof(keypad_data->key_state));
    >>
    >>        /* clear pending interrupts */
    >> -       __raw_writel(__raw_readl(keypad_data->base + OMAP4_KBD_IRQSTATUS),
    >> -                       keypad_data->base + OMAP4_KBD_IRQSTATUS);
    >> +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQSTATUS,
    >> +                        kbd_read_irqreg(keypad_data, OMAP4_KBD_IRQSTATUS));
    >>
    >>        /* enable interrupts */
    >> -       __raw_writel(OMAP4_DEF_IRQENABLE_EVENTEN | OMAP4_DEF_IRQENABLE_LONGKEY,
    >> -                       keypad_data->base + OMAP4_KBD_IRQENABLE);
    >> +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQENABLE,
    >> +               OMAP4_DEF_IRQENABLE_EVENTEN |
    >> +                               OMAP4_DEF_IRQENABLE_LONGKEY);
    >>
    >>        return IRQ_HANDLED;
    >>  }
    >> @@ -139,16 +172,17 @@ static int omap4_keypad_open(struct input_dev *input)
    >>
    >>        disable_irq(keypad_data->irq);
    >>
    >> -       __raw_writel(OMAP4_VAL_FUNCTIONALCFG,
    >> -                       keypad_data->base + OMAP4_KBD_CTRL);
    >> -       __raw_writel(OMAP4_VAL_DEBOUNCINGTIME,
    >> -                       keypad_data->base + OMAP4_KBD_DEBOUNCINGTIME);
    >> -       __raw_writel(OMAP4_VAL_IRQDISABLE,
    >> -                       keypad_data->base + OMAP4_KBD_IRQSTATUS);
    >> -       __raw_writel(OMAP4_DEF_IRQENABLE_EVENTEN | OMAP4_DEF_IRQENABLE_LONGKEY,
    >> -                       keypad_data->base + OMAP4_KBD_IRQENABLE);
    >> -       __raw_writel(OMAP4_DEF_WUP_EVENT_ENA | OMAP4_DEF_WUP_LONG_KEY_ENA,
    >> -                       keypad_data->base + OMAP4_KBD_WAKEUPENABLE);
    >> +       kbd_writel(keypad_data, OMAP4_KBD_CTRL,
    >> +                       OMAP4_VAL_FUNCTIONALCFG);
    >> +       kbd_writel(keypad_data, OMAP4_KBD_DEBOUNCINGTIME,
    >> +                       OMAP4_VAL_DEBOUNCINGTIME);
    >> +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQSTATUS,
    >> +                       OMAP4_VAL_IRQDISABLE);
    >> +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQENABLE,
    >> +                       OMAP4_DEF_IRQENABLE_EVENTEN |
    >> +                               OMAP4_DEF_IRQENABLE_LONGKEY);
    >> +       kbd_writel(keypad_data, OMAP4_KBD_WAKEUPENABLE,
    >> +                       OMAP4_DEF_WUP_EVENT_ENA | OMAP4_DEF_WUP_LONG_KEY_ENA);
    >>
    >>        enable_irq(keypad_data->irq);
    >>
    >> @@ -162,12 +196,12 @@ static void omap4_keypad_close(struct input_dev *input)
    >>        disable_irq(keypad_data->irq);
    >>
    >>        /* Disable interrupts */
    >> -       __raw_writel(OMAP4_VAL_IRQDISABLE,
    >> -                    keypad_data->base + OMAP4_KBD_IRQENABLE);
    >> +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQENABLE,
    >> +                        OMAP4_VAL_IRQDISABLE);
    >>
    >>        /* clear pending interrupts */
    >> -       __raw_writel(__raw_readl(keypad_data->base + OMAP4_KBD_IRQSTATUS),
    >> -                       keypad_data->base + OMAP4_KBD_IRQSTATUS);
    >> +       kbd_write_irqreg(keypad_data, OMAP4_KBD_IRQSTATUS,
    >> +                        kbd_read_irqreg(keypad_data, OMAP4_KBD_IRQSTATUS));
    >>
    >>        enable_irq(keypad_data->irq);
    >>
    >> @@ -182,6 +216,7 @@ static int __devinit omap4_keypad_probe(struct platform_device *pdev)
    >>        struct resource *res;
    >>        resource_size_t size;
    >>        unsigned int row_shift, max_keys;
    >> +       int rev;
    >>        int irq;
    >>        int error;
    >>
    >> @@ -241,11 +276,40 @@ static int __devinit omap4_keypad_probe(struct platform_device *pdev)
    >>        keypad_data->rows = pdata->rows;
    >>        keypad_data->cols = pdata->cols;
    >>
    >> +       /*
    >> +        * Mark device as active (and wake up its parent) so we can read
    >> +        * revision register.
    >> +        */
    >> +       error = pm_runtime_set_active(&pdev->dev);
    >> +       if (error) {
    >> +               dev_err(&pdev->dev, "pm_runtime_set_active() failed\n");
    >> +               goto err_unmap;
    >> +       }
    >> +
    >> +       rev = __raw_readl(keypad_data->base + OMAP4_KBD_REVISION);
    >> +       rev &= 0x03 << 30;
    >> +       rev >>= 30;
    >> +       switch (rev) {
    >> +       case KBD_REVISION_OMAP4:
    >> +               keypad_data->reg_offset = 0x00;
    >> +               keypad_data->irqreg_offset = 0x00;
    >> +               break;
    >> +       case KBD_REVISION_OMAP5:
    >> +               keypad_data->reg_offset = 0x10;
    >> +               keypad_data->irqreg_offset = 0x0c;
    >> +               break;
    >> +       default:
    >> +               dev_err(&pdev->dev,
    >> +                       "Keypad reports unsupported revision %d", rev);
    >> +               error = -EINVAL;
    >> +               goto err_pm_suspended;
    >> +       }
    >> +
    >>        /* input device allocation */
    >>        keypad_data->input = input_dev = input_allocate_device();
    >>        if (!input_dev) {
    >>                error = -ENOMEM;
    >> -               goto err_unmap;
    >> +               goto err_pm_suspended;
    >>        }
    >>
    >>        input_dev->name = pdev->name;
    >> @@ -281,6 +345,7 @@ static int __devinit omap4_keypad_probe(struct platform_device *pdev)
    >>        }
    >>
    >>        pm_runtime_enable(&pdev->dev);
    >> +       pm_runtime_put_sync(&pdev->dev);
    >>
    >>        error = input_register_device(keypad_data->input);
    >>        if (error < 0) {
    >> @@ -296,6 +361,8 @@ err_pm_disable:
    >>        free_irq(keypad_data->irq, keypad_data);
    >>  err_free_input:
    >>        input_free_device(input_dev);
    >> +err_pm_suspended:
    >> +       pm_runtime_set_suspended(&pdev->dev);
    >>  err_unmap:
    >>        iounmap(keypad_data->base);
    >>  err_release_mem:
    
    From: G, Manjunath Kondaiah <manjugk@ti.com>
    Date: Mon, 10 Oct 2011 20:52:05 +0530
    Subject: [PATCH] Input: omap-keypad: dynamically handle register offsets
    
    Keypad controller register offsets are different for omap4
    and omap5. Handle these offsets through static mapping and
    assign these mappings during run time.
    
    Tested on omap4430 sdp with 3.4-rc3.
    Tested on omap5430evm with 3.1-custom kernel.
    
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: G, Manjunath Kondaiah <manjugk@ti.com>
    Signed-off-by: Sourav Poddar <sourav.poddar@ti.com>
    Signed-off-by: Dmitry Torokhov <dtor@mail.ru>

commit 5d782e6bba7fa9da7347b8ac749fc18176be9ae3
Author: Shubhrajyoti D <shubhrajyoti@ti.com>
Date:   Thu Mar 22 12:48:06 2012 +0530

    usb: musb: omap: fix the error check for pm_runtime_get_sync
    
    commit ad579699c4f0274bf522a9252ff9b20c72197e48 upstream.
    
    pm_runtime_get_sync returns a signed integer. In case of errors
    it returns a negative value. This patch fixes the error check
    by making it signed instead of unsigned thus preventing register
    access if get_sync_fails. Also passes the error cause to the
    debug message.
    
    Cc:  Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Shubhrajyoti D <shubhrajyoti@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6407c7c9a16e5778e93da2b067c80f7a609a9e37
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Wed Mar 21 21:30:20 2012 +0530

    usb: musb: omap: fix crash when musb glue (omap) gets initialized
    
    commit 3006dc8c627d738693e910c159630e4368c9e86c upstream.
    
    pm_runtime_enable is being called after omap2430_musb_init. Hence
    pm_runtime_get_sync in omap2430_musb_init does not have any effect (does
    not enable clocks) resulting in a crash during register access. It is
    fixed here.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04b09f662db41a24c9e3e5d40340ad1c17dce347
Author: Shubhrajyoti D <shubhrajyoti@ti.com>
Date:   Thu Mar 22 12:48:06 2012 +0530

    usb: musb: omap: fix the error check for pm_runtime_get_sync
    
    commit ad579699c4f0274bf522a9252ff9b20c72197e48 upstream.
    
    pm_runtime_get_sync returns a signed integer. In case of errors
    it returns a negative value. This patch fixes the error check
    by making it signed instead of unsigned thus preventing register
    access if get_sync_fails. Also passes the error cause to the
    debug message.
    
    Cc:  Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Shubhrajyoti D <shubhrajyoti@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a1f6b4eca816f6b186b125f72ef284ef7960b85
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Wed Mar 21 21:30:20 2012 +0530

    usb: musb: omap: fix crash when musb glue (omap) gets initialized
    
    commit 3006dc8c627d738693e910c159630e4368c9e86c upstream.
    
    pm_runtime_enable is being called after omap2430_musb_init. Hence
    pm_runtime_get_sync in omap2430_musb_init does not have any effect (does
    not enable clocks) resulting in a crash during register access. It is
    fixed here.
    
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cd653a665b08a3920e320a71b4ac5b80d36953c
Merge: c1acb0ba330b 2d5733fcd33d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 20 11:38:02 2012 -0700

    Merge tag 'usb-3.4-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb
    
    Pull USB fixes from Greg Kroah-Hartman:
     "Here are a number of tiny USB fixes for 3.4-rc4.
    
      Most of them are in the USB gadget area, but a few other minor USB
      driver and core fixes are here as well.
    
      Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>"
    
    * tag 'usb-3.4-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb: (36 commits)
      USB: serial: cp210x: Fixed usb_control_msg timeout values
      USB: ehci-tegra: don't call set_irq_flags(IRQF_VALID)
      USB: yurex: Fix missing URB_NO_TRANSFER_DMA_MAP flag in urb
      USB: yurex: Remove allocation of coherent buffer for setup-packet buffer
      drivers/usb/misc/usbtest.c: add kfrees
      USB: ehci-fsl: Fix kernel crash on mpc5121e
      uwb: fix error handling
      uwb: fix use of del_timer_sync() in interrupt
      EHCI: always clear the STS_FLR status bit
      EHCI: fix criterion for resuming the root hub
      USB: sierra: avoid QMI/wwan interface on MC77xx
      usb: usbtest: avoid integer overflow in alloc_sglist()
      usb: usbtest: avoid integer overflow in test_ctrl_queue()
      USB: fix deadlock in bConfigurationValue attribute method
      usb: gadget: eliminate NULL pointer dereference (bugfix)
      usb: gadget: uvc: Remove non-required locking from 'uvc_queue_next_buffer' routine
      usb: gadget: rndis: fix Missing req->context assignment
      usb: musb: omap: fix the error check for pm_runtime_get_sync
      usb: gadget: udc-core: fix asymmetric calls in remove_driver
      usb: musb: omap: fix crash when musb glue (omap) gets initialized
      ...

commit ad579699c4f0274bf522a9252ff9b20c72197e48
Author: Shubhrajyoti D <shubhrajyoti@ti.com>
Date:   Thu Mar 22 12:48:06 2012 +0530

    usb: musb: omap: fix the error check for pm_runtime_get_sync
    
    pm_runtime_get_sync returns a signed integer. In case of errors
    it returns a negative value. This patch fixes the error check
    by making it signed instead of unsigned thus preventing register
    access if get_sync_fails. Also passes the error cause to the
    debug message.
    
    Cc: stable@vger.kernel.org
    Cc:  Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Shubhrajyoti D <shubhrajyoti@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 3006dc8c627d738693e910c159630e4368c9e86c
Author: Kishon Vijay Abraham I <kishon@ti.com>
Date:   Wed Mar 21 21:30:20 2012 +0530

    usb: musb: omap: fix crash when musb glue (omap) gets initialized
    
    pm_runtime_enable is being called after omap2430_musb_init. Hence
    pm_runtime_get_sync in omap2430_musb_init does not have any effect (does
    not enable clocks) resulting in a crash during register access. It is
    fixed here.
    
    Cc: stable@vger.kernel.org # v3.0, v3.1, v3.2, v3.3
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 0d8ce3ae37e9bcfacbbc750cabf892fa00bb720e
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Mar 8 10:28:56 2012 +0900

    drm/exynos: fix runtime_pm fimd device state on probe
    
    A call to pm_runtime_set_active() forces device to be at the active
    state and skips calling its runtime suspend/resume callbacks. This
    results in a freeze with a new power domain code based on gen_pd. Fimd
    driver does all required runtime power management calls, so this
    pm_runtime_set_active call is buggy. This patch removes it and corrects
    clock management in probe function (clocks are now enabled by
    pm_runtime_get_sync() call).
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>

commit a247ce78ca3fa041f3e6b1187c4ae96c7016e83a
Author: Archit Taneja <archit@ti.com>
Date:   Fri Feb 10 11:45:52 2012 +0530

    OMAPDSS: HACK: Ensure DSS clock domain gets out of idle when HDMI is enabled
    
    For DSS clock domain to transition from idle to active state. It's necessary
    to enable the optional clock DSS_FCLK before we enable the module using the
    MODULEMODE bits in the clock domain's CM_DSS_DSS_CLKCTRL register.
    
    This sequence was not followed correctly for the 'dss_hdmi' hwmod and it led
    to DSS clock domain not getting out of idle when pm_runtime_get_sync() was
    called for hdmi's platform device.
    
    Since the clock domain failed to change it's state to active, the hwmod code
    disables any clocks it had enabled before for this hwmod. This led to the clock
    'dss_48mhz_clk' gettind disabled.
    
    When hdmi's runtime_resume() op is called, the call to dss_runtime_get()
    correctly enables the DSS clock domain this time. However, the clock
    'dss_48mhz_clk' is needed for HDMI's PHY to function correctly. Since it was
    disabled previously, the driver fails when it tries to enable HDMI's PHY.
    
    Fix this for now by ensuring that dss_runtime_get() is called before we call
    pm_runtime_get_sync() for hdmi's platform device. A correct fix for later would
    be to modify the DSS related hwmod's mainclks, and also some changes in how
    opt clocks are handled in the DSS driver.
    
    This fixes the issue of HDMI not working when it's the default display. The
    issue is not seen if any other display is already enabled as the first display
    would have correctly enabled the DSS clockdomain.
    
    Signed-off-by: Archit Taneja <archit@ti.com>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>

commit 55b93c32520dc7ff0097db81db9b1e6b735951a9
Author: Tarun Kanti DebBarma <tarun.kanti@ti.com>
Date:   Thu Sep 29 07:23:22 2011 +0530

    gpio/omap: use pm-runtime framework
    
    Call runtime pm APIs pm_runtime_get_sync() and pm_runtime_put()
    for enabling/disabling clocks appropriately. Remove syscore_ops and
    instead use SET_RUNTIME_PM_OPS macro.
    
    There is no more need to call omap_device_disable_idle_on_suspend
    since driver is PM runtime adapted now.
    
    Signed-off-by: Charulatha V <charu@ti.com>
    Signed-off-by: Tarun Kanti DebBarma <tarun.kanti@ti.com>
    Reviewed-by: Santosh Shilimkar <santosh.shilimkar@ti.com>
    Reviewed-by: Kevin Hilman <khilman@ti.com>
    Signed-off-by: Kevin Hilman <khilman@ti.com>

commit f557978745bbea2e7305588d33aac60f4dd42447
Author: Grazvydas Ignotas <notasas@gmail.com>
Date:   Thu Jan 12 15:21:38 2012 +0200

    usb: musb: drop superfluous pm_runtime calls around musb_shutdown
    
    Since commit 4f9edd2d7e8d "usb: musb: Fix the crash issue during reboot"
    musb_shutdown() does pm_runtime_get_sync/pm_runtime_put by itself, so
    this no longer needs to be done by the caller. Also, musb_exit_debugfs()
    doesn't access the device, so just drop those runtime_pm calls.
    
    Signed-off-by: Grazvydas Ignotas <notasas@gmail.com>
    Reviewed-by: Shubhrajyoti D <shubhrajyoti@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 28fd00d42cca178638f51c08efa986a777c24a4b
Author: Lin Ming <ming.m.lin@intel.com>
Date:   Thu Dec 22 14:50:47 2011 +0800

    [SCSI] runtime resume parent for child's system-resume
    
    [Patch description from Alan Stern]
    
    If a child device was runtime-suspended when a system suspend began,
    then there will be nothing to prevent its parent from
    runtime-suspending as soon as it is woken up during the system resume.
    Then when the time comes to resume the child, the resume will fail
    because the parent is already back at low power.
    
    On the other hand, there are some devices which should remain at low
    power across an entire suspend-resume cycle.  The details depend on the
    device and the platform.
    
    This suggests that the PM core is not the right place to solve the
    problem. One possible solution is for the subsystem or device driver
    to call pm_runtime_get_sync(dev->parent) at the start of the
    system-resume procedure and pm_runtime_put_sync(dev->parent) at the
    end.
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Lin Ming <ming.m.lin@intel.com>
    Signed-off-by: Jeff Garzik <jgarzik@redhat.com>

commit 712d8efafbbcbe617f9ad706f6ca1ffea4bbf2e8
Author: Vikram Pandita <vikram.pandita@ti.com>
Date:   Fri Aug 12 07:38:51 2011 -0700

    usb: musb: fix pm_runtime calls while atomic
    
    musb pm_runtime_get_sync call happens in intrrupt context on cable attach case
    That can result in re-enabling the interrupts and cause side affects.
    
    So move the code to a work queue.
    
    Following is the error path hit on cable attach:
    
    BUG: sleeping function called from invalid context at drivers/base/power/runtime.c:802
    in_atomic(): 0, irqs_disabled(): 0, pid: 18, name: irq/378-twl6030
    
    Backtrace:
    [<c00520f0>] (dump_backtrace+0x0/0x110) from [<c054f454>] (dump_stack+0x18/0x1c)
    [<c054f43c>] (dump_stack+0x0/0x1c) from [<c007f59c>] (__might_sleep+0x130/0x134)
    [<c007f46c>] (__might_sleep+0x0/0x134) from [<c02c2794>] (__pm_runtime_resume+0x94/0x98)
    [<c02c2700>] (__pm_runtime_resume+0x0/0x98) from [<c033e7e4>] (musb_otg_notifications+0x9c/0x164)
    [<c033e748>] (musb_otg_notifications+0x0/0x164) from [<c00b3df0>] (notifier_call_chain+0x4c/0x8c)
    [<c00b3da4>] (notifier_call_chain+0x0/0x8c) from [<c00b44a8>] (__atomic_notifier_call_chain+0x40/0x54)
    [<c00b4468>] (__atomic_notifier_call_chain+0x0/0x54) from [<c00b44dc>] (atomic_notifier_call_chain+0x20/0x28)
    [<c00b44bc>] (atomic_notifier_call_chain+0x0/0x28) from [<c033f124>] (twl6030_usb_irq+0xc8/0xdc)
    [<c033f05c>] (twl6030_usb_irq+0x0/0xdc) from [<c00d79f8>] (irq_thread_fn+0x24/0x40)
    [<c00d79d4>] (irq_thread_fn+0x0/0x40) from [<c00d7b64>] (irq_thread+0x150/0x1d8)
    [<c00d7a14>] (irq_thread+0x0/0x1d8) from [<c00adf70>] (kthread+0x94/0x98)
    [<c00adedc>] (kthread+0x0/0x98) from [<c0094388>] (do_exit+0x0/0x720)
    
    Tested with:
    MUSB Device mode: Cold boot / Hot plug
    MUSB Host mode: Cold boot / Hot plug
    
    Signed-off-by: Vikram Pandita <vikram.pandita@ti.com>
    Signed-off-by: Moiz Sonasath <m-sonasath@ti.com>
    Signed-off-by: Vikram Pandita <vikram.pandita@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 0f43dd546d991ca260d8a72d07f617907c508de8
Merge: 2cd6c7f7f1e3 e9278a475f84
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 29 13:38:29 2011 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (42 commits)
      netpoll: fix incorrect access to skb data in __netpoll_rx
      cassini: init before use in cas_interruptN.
      can: ti_hecc: Fix uninitialized spinlock in probe
      can: ti_hecc: Fix unintialized variable
      net: sh_eth: fix the compile error
      net/phy: fix DP83865 phy interrupt handler
      sendmmsg/sendmsg: fix unsafe user pointer access
      ibmveth: Fix leak when recycling skb and hypervisor returns error
      arp: fix rcu lockdep splat in arp_process()
      bridge: fix a possible use after free
      bridge: Pseudo-header required for the checksum of ICMPv6
      mcast: Fix source address selection for multicast listener report
      MAINTAINERS: Update GIT trees for network development
      ath9k: Fix PS wrappers in ath9k_set_coverage_class
      carl9170: Fix mismatch in carl9170_op_set_key mutex lock-unlock
      wl12xx: add max_sched_scan_ssids value to the hw description
      wl12xx: Fix validation of pm_runtime_get_sync return value
      wl12xx: Remove obsolete testmode NVS push command
      bcma: add uevent to the bus, to autoload drivers
      ath9k_hw: Fix STA (AR9485) bringup issue due to incorrect MAC address
      ...

commit 5a50a01bf00c8191073fdf518e1af1e950ac3af5
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Wed Aug 24 21:41:08 2011 +0200

    sh-sci / PM: Use power.irq_safe
    
    Since sci_port_enable() and sci_port_disable() may be run with
    interrupts off and they execute pm_runtime_get_sync() and
    pm_runtime_put_sync(), respectively, the SCI device's
    power.irq_safe flag has to be set to indicate that it is safe
    to execute runtime PM callbacks for this device with interrupts off.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Magnus Damm <damm@opensource.se>

commit a15f1c45f393982196c981a8df8b534cc9f3bb80
Author: Ido Yariv <ido@wizery.com>
Date:   Mon Aug 22 23:19:49 2011 +0300

    wl12xx: Fix validation of pm_runtime_get_sync return value
    
    wl1271_sdio_power_on checks if the return value of pm_runtime_get_sync
    is non-zero, and if so bails out.
    However, pm_runtime_get_sync can return a positive number which does not
    suggest an error has occurred. This is problematic for two reasons:
    
    1. The function will needlessly bail out without decrementing back the
       runtime PM reference counter.
    2. wl1271_power_on only checks if wl1271_power_on return value is
       negative. This means that wl1271_power_on will continue even if
       wl1271_sdio_power_on bailed out. As a result, sdio transactions will
       be initiated without properly enabling the sdio function and claiming
       the host. This could even lead to a kernel panic.
    
    Fix this by only checking that the return value of pm_runtime_get_sync
    is non-negative.
    
    Signed-off-by: Ido Yariv <ido@wizery.com>
    Acked-by: Luciano Coelho <coelho@ti.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit e839bad463ad3348f3d239512839c93baf57a1a9
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Jul 20 17:09:34 2011 -0700

    usb: musb: fix oops on musb_gadget_pullup
    
    commit 72c487dfb94d02025fb7437dfe2314d836d5a9ab upstream.
    
    an 'unhandled fault' is causes when a gadget driver calls
    usb_gadget_connect() while the USB cable isn't plugged into
    the OTG port.
    
    the fault is caused by an access to MUSB's memory space
    while its clock is turned off due to pm_runtime kicking
    in.
    
    in order to fix the fault, we enclose musb_gadget_pullup()
    with pm_runtime_get_sync() ... pm_runtime_put() calls to
    be sure we will always reach that path with clock turned on.
    
    [ balbi@ti.com : simplified commit log; removed few things
            which didn't belong there ]
    
    Reported-by: Zach Pfeffer <zach.pfeffer@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 93e098a8fc02c579875e64001f7a511b7e75a16c
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Jul 20 17:09:34 2011 -0700

    usb: musb: fix oops on musb_gadget_pullup
    
    an 'unhandled fault' is causes when a gadget driver calls
    usb_gadget_connect() while the USB cable isn't plugged into
    the OTG port.
    
    the fault is caused by an access to MUSB's memory space
    while its clock is turned off due to pm_runtime kicking
    in.
    
    in order to fix the fault, we enclose musb_gadget_pullup()
    with pm_runtime_get_sync() ... pm_runtime_put() calls to
    be sure we will always reach that path with clock turned on.
    
    [ balbi@ti.com : simplified commit log; removed few things
            which didn't belong there ]
    
    Cc: stable@kernel.org
    Reported-by: Zach Pfeffer <zach.pfeffer@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 72c487dfb94d02025fb7437dfe2314d836d5a9ab
Author: John Stultz <john.stultz@linaro.org>
Date:   Wed Jul 20 17:09:34 2011 -0700

    usb: musb: fix oops on musb_gadget_pullup
    
    an 'unhandled fault' is causes when a gadget driver calls
    usb_gadget_connect() while the USB cable isn't plugged into
    the OTG port.
    
    the fault is caused by an access to MUSB's memory space
    while its clock is turned off due to pm_runtime kicking
    in.
    
    in order to fix the fault, we enclose musb_gadget_pullup()
    with pm_runtime_get_sync() ... pm_runtime_put() calls to
    be sure we will always reach that path with clock turned on.
    
    [ balbi@ti.com : simplified commit log; removed few things
            which didn't belong there ]
    
    Cc: stable@kernel.org
    Reported-by: Zach Pfeffer <zach.pfeffer@linaro.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit ecc024419a13da1e589aebc422d9d1e3c0124ba4
Author: Ohad Ben-Cohen <ohad@wizery.com>
Date:   Sun Jul 17 16:38:21 2011 +0100

    mmc: fix runtime PM with -ENOSYS suspend case
    
    In the case where a driver returns -ENOSYS from its suspend handler
    to indicate that the device should be powered down over suspend, the
    remove routine of the driver was not being called, leading to lots of
    confusion during resume.
    
    The problem is that runtime PM is disabled during this process,
    and when we reach mmc_sdio_remove, calling the runtime PM functions here
    (validly) return errors, and this was causing us to skip the remove
    function.
    
    Fix this by ignoring the error value of pm_runtime_get_sync(), which
    can return valid errors. This also matches the behaviour of
    pci_device_remove().
    
    Signed-off-by: Daniel Drake <dsd@laptop.org>
    Signed-off-by: Chris Ball <cjb@laptop.org>

commit d1657494cad496bf8e45cad7c236236c4a1a5a0d
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Tue Jun 21 23:47:15 2011 +0200

    PCI / PM: Block races between runtime PM and system sleep
    
    commit a5f76d5eba157bf637beb2dd18026db2917c512e upstream.
    
    After commit e8665002477f0278f84f898145b1f141ba26ee26
    (PM: Allow pm_runtime_suspend() to succeed during system suspend) it
    is possible that a device resumed by the pm_runtime_resume(dev) in
    pci_pm_prepare() will be suspended immediately from a work item,
    timer function or otherwise, defeating the very purpose of calling
    pm_runtime_resume(dev) from there.  To prevent that from happening
    it is necessary to increment the runtime PM usage counter of the
    device by replacing pm_runtime_resume() with pm_runtime_get_sync().
    Moreover, the incremented runtime PM usage counter has to be
    decremented by the corresponding pci_pm_complete(), via
    pm_runtime_put_sync().
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 1e2ef05bb8cf851a694d38e9170c89e7ff052741
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Wed Jul 6 10:51:58 2011 +0200

    PM: Limit race conditions between runtime PM and system sleep (v2)
    
    One of the roles of the PM core is to prevent different PM callbacks
    executed for the same device object from racing with each other.
    Unfortunately, after commit e8665002477f0278f84f898145b1f141ba26ee26
    (PM: Allow pm_runtime_suspend() to succeed during system suspend)
    runtime PM callbacks may be executed concurrently with system
    suspend/resume callbacks for the same device.
    
    The main reason for commit e8665002477f0278f84f898145b1f141ba26ee26
    was that some subsystems and device drivers wanted to use runtime PM
    helpers, pm_runtime_suspend() and pm_runtime_put_sync() in
    particular, for carrying out the suspend of devices in their
    .suspend() callbacks.  However, as it's been determined recently,
    there are multiple reasons not to do so, inlcuding:
    
     * The caller really doesn't control the runtime PM usage counters,
       because user space can access them through sysfs and effectively
       block runtime PM.  That means using pm_runtime_suspend() or
       pm_runtime_get_sync() to suspend devices during system suspend
       may or may not work.
    
     * If a driver calls pm_runtime_suspend() from its .suspend()
       callback, it causes the subsystem's .runtime_suspend() callback to
       be executed, which leads to the call sequence:
    
       subsys->suspend(dev)
          driver->suspend(dev)
             pm_runtime_suspend(dev)
                subsys->runtime_suspend(dev)
    
       recursive from the subsystem's point of view.  For some subsystems
       that may actually work (e.g. the platform bus type), but for some
       it will fail in a rather spectacular fashion (e.g. PCI).  In each
       case it means a layering violation.
    
     * Both the subsystem and the driver can provide .suspend_noirq()
       callbacks for system suspend that can do whatever the
       .runtime_suspend() callbacks do just fine, so it really isn't
       necessary to call pm_runtime_suspend() during system suspend.
    
     * The runtime PM's handling of wakeup devices is usually different
       from the system suspend's one, so .runtime_suspend() may simply be
       inappropriate for system suspend.
    
     * System suspend is supposed to work even if CONFIG_PM_RUNTIME is
       unset.
    
     * The runtime PM workqueue is frozen before system suspend, so if
       whatever the driver is going to do during system suspend depends
       on it, that simply won't work.
    
    Still, there is a good reason to allow pm_runtime_resume() to
    succeed during system suspend and resume (for instance, some
    subsystems and device drivers may legitimately use it to ensure that
    their devices are in full-power states before suspending them).
    Moreover, there is no reason to prevent runtime PM callbacks from
    being executed in parallel with the system suspend/resume .prepare()
    and .complete() callbacks and the code removed by commit
    e8665002477f0278f84f898145b1f141ba26ee26 went too far in this
    respect.  On the other hand, runtime PM callbacks, including
    .runtime_resume(), must not be executed during system suspend's
    "late" stage of suspending devices and during system resume's "early"
    device resume stage.
    
    Taking all of the above into consideration, make the PM core
    acquire a runtime PM reference to every device and resume it if
    there's a runtime PM resume request pending right before executing
    the subsystem-level .suspend() callback for it.  Make the PM core
    drop references to all devices right after executing the
    subsystem-level .resume() callbacks for them.  Additionally,
    make the PM core disable the runtime PM framework for all devices
    during system suspend, after executing the subsystem-level .suspend()
    callbacks for them, and enable the runtime PM framework for all
    devices during system resume, right before executing the
    subsystem-level .resume() callbacks for them.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Kevin Hilman <khilman@ti.com>

commit eea3fc0357eb89d0b2d1af37bdfb83eb4076a542
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Wed Jul 6 10:51:40 2011 +0200

    PCI / PM: Detect early wakeup in pci_pm_prepare()
    
    A subsequent patch is going to move the invocation of
    pm_runtime_barrier() from dpm_prepare() to __device_suspend().
    Consequently, early wakeup events resulting from runtime resume
    requests for wakeup devices queued up right before system suspend
    will only be detected after all of the subsystem-level .prepare()
    callbacks have run.  However, the PCI bus type calls
    pm_runtime_get_sync() from its pci_pm_prepare() callback routine,
    so it would destroy the early wakeup events information regarding PCI
    devices.  To prevent this from happening add an early wakeup
    detection mechanism, analogous to the one currently in dpm_prepare(),
    to pci_pm_prepare().
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Jesse Barnes <jbarnes@virtuousgeek.org>

commit 632e270e01d8a1ee9e8ea56c83028727f17b1d17
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Fri Jul 1 22:29:15 2011 +0200

    PM / Runtime: Return special error code if runtime PM is disabled
    
    Some callers of pm_runtime_get_sync() and other runtime PM helper
    functions, scsi_autopm_get_host() and scsi_autopm_get_device() in
    particular, need to distinguish error codes returned when runtime PM
    is disabled (i.e. power.disable_depth is nonzero for the given
    device) from error codes returned in other situations.  For this
    reason, make the runtime PM helper functions return -EACCES when
    power.disable_depth is nonzero and ensure that this error code
    won't be returned by them in any other circumstances.  Modify
    scsi_autopm_get_host() and scsi_autopm_get_device() to check the
    error code returned by pm_runtime_get_sync() and ignore -EACCES.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

commit a5f76d5eba157bf637beb2dd18026db2917c512e
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Tue Jun 21 23:47:15 2011 +0200

    PCI / PM: Block races between runtime PM and system sleep
    
    After commit e8665002477f0278f84f898145b1f141ba26ee26
    (PM: Allow pm_runtime_suspend() to succeed during system suspend) it
    is possible that a device resumed by the pm_runtime_resume(dev) in
    pci_pm_prepare() will be suspended immediately from a work item,
    timer function or otherwise, defeating the very purpose of calling
    pm_runtime_resume(dev) from there.  To prevent that from happening
    it is necessary to increment the runtime PM usage counter of the
    device by replacing pm_runtime_resume() with pm_runtime_get_sync().
    Moreover, the incremented runtime PM usage counter has to be
    decremented by the corresponding pci_pm_complete(), via
    pm_runtime_put_sync().
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Cc: stable@kernel.org
    Acked-by: Jesse Barnes <jbarnes@virtuousgeek.org>

commit e1866b33b1e89f077b7132daae3dfd9a594e9a1a
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Fri Apr 29 00:33:45 2011 +0200

    PM / Runtime: Rework runtime PM handling during driver removal
    
    The driver core tries to prevent race conditions between runtime PM
    and driver removal from happening by incrementing the runtime PM
    usage counter of the device and executing pm_runtime_barrier() before
    running the bus notifier and the ->remove() callbacks provided by the
    device's subsystem or driver.  This guarantees that, if a future
    runtime suspend of the device has been scheduled or a runtime resume
    or idle request has been queued up right before the driver removal,
    it will be canceled or waited for to complete and no other
    asynchronous runtime suspend or idle requests for the device will be
    put into the PM workqueue until the ->remove() callback returns.
    However, it doesn't prevent resume requests from being queued up
    after pm_runtime_barrier() has been called and it doesn't prevent
    pm_runtime_resume() from executing the device subsystem's runtime
    resume callback.  Morever, it prevents the device's subsystem or
    driver from putting the device into the suspended state by calling
    pm_runtime_suspend() from its ->remove() routine.  This turns out to
    be a major inconvenience for some subsystems and drivers that want to
    leave the devices they handle in the suspended state.
    
    To really prevent runtime PM callbacks from racing with the bus
    notifier callback in __device_release_driver(), which is necessary,
    because the notifier is used by some subsystems to carry out
    operations affecting the runtime PM functionality, use
    pm_runtime_get_sync() instead of the combination of
    pm_runtime_get_noresume() and pm_runtime_barrier().  This will resume
    the device if it's in the suspended state and will prevent it from
    being suspended again until pm_runtime_put_*() is called.
    
    To allow subsystems and drivers to put devices into the suspended
    state by calling pm_runtime_suspend() from their ->remove() routines,
    execute pm_runtime_put_sync() after running the bus notifier in
    __device_release_driver().  This will require subsystems and drivers
    to make their ->remove() callbacks avoid races with runtime PM
    directly, but it will allow of more flexibility in the handling of
    devices during the removal of their drivers.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

commit 4f9edd2d7e8dd170d10780532cb76eb5890468b4
Author: Hema HK <hemahk@ti.com>
Date:   Tue Mar 22 16:02:12 2011 +0530

    usb: musb: Fix the crash issue during reboot
    
    Below crash observed with commit 7acc6197b76edd0b932a7cbcc6cfad0a8a87f026
    (usb: musb: Idle path retention and offmode support for OMAP3)
    during board reboot.
    
    The musb clock was disabled when musb_shutdown() was called by
    platform_drv_shutdown in which there are register accesses.
    call pm_runtime_get_sync() and pm_runtime_put_sync() in the
    musb_shutdown function.
    
    / # [  172.368774] Unhandled fault: imprecise external abort (0x1406) at 0x400f0000
    [  172.376190] Internal error: : 1406 [#1] SMP
    [  172.380554] last sysfs file: /sys/devices/platform/omap/omap_i2c.4/i2c-4/i2c-dev/i2c-4/dev
    [  172.389221] Modules linked in:
    [  172.392456] CPU: 0    Tainted: G        W    (2.6.38-06671-geddecbb #33)
    [  172.399475] PC is at do_raw_spin_unlock+0x50/0xc0
    [  172.404418] LR is at _raw_spin_unlock_irqrestore+0x24/0x44
    [  172.410186] pc : [<c069bfdc>]    lr : [<c085a7f8>]    psr: 60000093
    [  172.410186] sp : ee993e40  ip : c0d00240  fp : bea9cf14
    [  172.422241] r10: 00000000  r9 : ee992000  r8 : c04b2fa8
    [  172.427703] r7 : 00000000  r6 : c0fa46c0  r5 : ef966124  r4 : ef966124
    [  172.434539] r3 : ef92cbc0  r2 : ef92cbc0  r1 : 00000000  r0 : ef966124
    [  172.441406] Flags: nZCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment user
    [  172.448974] Control: 10c5387d  Table: ae8d804a  DAC: 00000015
    [  172.454986] Process init (pid: 1094, stack limit = 0xee9922f8)
    [  172.461120] Stack: (0xee993e40 to 0xee994000)
    [  172.465667] 3e40: a0000013 c085a7f8 ef966124 a0000013 c0fa46c0 c0761ab4 c0761a70 ef95c008
    [  172.474273] 3e60: ef95c014 c06e2fd0 c06e2fbc c06dea90 00000000 01234567 28121969 c04fccb4
    [  172.482849] 3e80: 00000000 c04fcd04 c0a302bc c04fce44 c0a02600 00000001 00000000 c085cd04
    [  172.491424] 3ea0: 00000000 00000002 c09ea000 c085afc0 ee993f24 00000000 00040001 00000445
    [  172.499999] 3ec0: a8eb9d34 00000027 00000000 00000000 00000000 c0a56a4c 00000000 00000000
    [  172.508575] 3ee0: 00000002 60000093 00000000 c0519aac 00000002 00000080 00000000 c0550420
    [  172.517150] 3f00: 00000000 00000002 ee970000 c0a56a3c c0a56a20 00000002 c0a56a3c 00000000
    [  172.525726] 3f20: c0a56a3c 0000000a c1580e00 c0a56a20 00000002 c0a56a3c c1580e00 c0a56a20
    [  172.534301] 3f40: ef92cbc0 c05173a0 00000001 ef92cbc0 c0576190 c04e3174 20000013 c0517324
    [  172.542877] 3f60: ef815c00 ee90b720 c04e3174 c0576190 00000001 ef92cbc0 c04b2f00 ffffffff
    [  172.551483] 3f80: 00000058 c0517324 00000000 00000000 ffffffff 00000000 00000000 ffffffff
    [  172.560058] 3fa0: 00000058 c04b2de0 00000000 00000000 fee1dead 28121969 01234567 00000000
    [  172.568634] 3fc0: 00000000 00000000 ffffffff 00000058 00000000 00000001 400aa000 bea9cf14
    [  172.577209] 3fe0: 000ea148 bea9c958 000aa750 40225728 60000010 fee1dead 00000000 00000000
    [  172.585784] [<c069bfdc>] (do_raw_spin_unlock+0x50/0xc0) from [<c085a7f8>] (_raw_spin_unlock_irqrestore+0x24/0x44)
    [  172.596588] [<c085a7f8>] (_raw_spin_unlock_irqrestore+0x24/0x44) from [<c0761ab4>] (musb_shutdown+0x44/0x88)
    [  172.606933] [<c0761ab4>] (musb_shutdown+0x44/0x88) from [<c06e2fd0>] (platform_drv_shutdown+0x14/0x18)
    [  172.616699] [<c06e2fd0>] (platform_drv_shutdown+0x14/0x18) from [<c06dea90>] (device_shutdown+0x74/0xb4)
    [  172.626647] [<c06dea90>] (device_shutdown+0x74/0xb4) from [<c04fccb4>] (kernel_restart_prepare+0x24/0x38)
    [  172.636688] [<c04fccb4>] (kernel_restart_prepare+0x24/0x38) from [<c04fcd04>] (kernel_restart+0xc/0x48)
    [  172.646545] [<c04fcd04>] (kernel_restart+0xc/0x48) from [<c04fce44>] (sys_reboot+0xfc/0x1d8)
    [  172.655426] [<c04fce44>] (sys_reboot+0xfc/0x1d8) from [<c04b2de0>] (ret_fast_syscall+0x0/0x3c)
    [  172.664459] Code: e3c3303f e594200c e593300c e1520003 (0a000002)
    [  172.670867] ------------[ cut here ]------------
    
    Signed-off-by: Hema HK <hemahk@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 7acc6197b76edd0b932a7cbcc6cfad0a8a87f026
Author: Hema HK <hemahk@ti.com>
Date:   Mon Feb 28 14:19:34 2011 +0530

    usb: musb: Idle path retention and offmode support for OMAP3
    
    This patch supports the retention and offmode support in the idle path for
    musb driver using runtime pm APIs.
    
    This is restricted to support offmode and retention only when device not
    connected.When device/cable connected with gadget driver loaded,configured
    to no idle/standby which will not allow the core transition to retention
    or off.
    
    There is no context save/restore done by hardware for musb in OMAP3
    and OMAP4,driver has to take care of saving and restoring the context
    during offmode.
    
    Musb has a requirement of configuring sysconfig register to force
    idle/standby mode and set the ENFORCE bit in module STANDBY register
    for retention and offmode support.
    
    Runtime pm and hwmod frameworks will take care of configuring to force
    idle/standby when pm_runtime_put_sync is called and back to no
    idle/standby when pm_runeime_get_sync is called.
    
    Compile, boot tested and also tested the retention in the idle path on
    OMAP3630Zoom3. And tested the global suspend/resume with offmode enabled.
    Usb basic functionality tested on OMAP4430SDP.
    
    There is some problem with idle path offmode in mainline, I could not test
    with offmode. But I have tested this patch with resetting the controller
    in the idle path when wakeup from retention just to make sure that the
    context is lost, and restore path is working fine.
    
    Removed .suspend/.resume fnction pointers and functions because there
    is no need of having these functions as all required work is done
    at runtime in the driver.
    
    There is no need to call the runtime pm api with glue driver device
    as glue layer device is the parent of musb core device, when runtime apis
    are called for the child, parent device runtime functionality
    will be invoked.
    
    Design overview:
    
    pm_runtime_get_sync: When called with musb core device takes care of
    enabling the clock, calling runtime callback function of omap2430 glue
    layer, runtime call back of musb driver and configure the musb sysconfig
    to no idle/standby
    
    pm_runtime_put: Takes care of calling runtime callback function of omap2430
    glue layer, runtime call back of musb driver, Configure the musb sysconfig
    to force idle/standby and disable the clock.
    
    During musb driver load: Call pm_runtime_get_sync.
    
    End of musb driver load: Call pm_runtime_put
    
    During gadget driver load: Call pm_runtime_get_sync,
    End of gadget driver load: Call pm_runtime_put if there is no device
    or cable is connected.
    
    During unload of the gadget driver:Call pm_runtime_get_sync if cable/device
    is not connected.
    End of the gadget driver unload : pm_runtime_put
    
    During unload of musb driver : Call pm_runtime_get_sync
    End of unload: Call pm_runtime_put
    
    On connect of usb cable/device -> transceiver notification(VBUS and ID-GND):
    pm_runtime_get_sync only if the gadget driver loaded.
    
    On disconnect of the cable/device -> Disconnect Notification:
    pm_runtime_put if the gadget driver is loaded.
    
    Signed-off-by: Hema HK <hemahk@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 207b0e1f1655bd7008b7322cdc3f84fb171c546d
Author: Hema HK <hemahk@ti.com>
Date:   Thu Feb 17 12:07:22 2011 +0530

    usb: musb: Using runtime pm APIs for musb.
    
    Calling runtime pm APIs pm_runtime_put_sync() and pm_runtime_get_sync()
    for enabling/disabling the clocks, sysconfig settings.
    
    Enable clock, configure no-idle/standby when active and configure force idle/standby
    and disable clock when idled. This is taken care by the runtime framework when
    driver calls the pm_runtime_get_sync and pm_runtime_put_sync APIs.
    Need to configure MUSB into force standby and force idle mode when usb not used
    
    Signed-off-by: Hema HK <hemahk@ti.com>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Kevin Hilman <khilman@deeprootsystems.com>
    Cc: Cousson, Benoit <b-cousson@ti.com>
    Cc: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit c7b61de5b7b17f0df34dc7d2f8b9576f8bd36fce
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Dec 1 00:14:42 2010 +0100

    PM / Runtime: Add synchronous runtime interface for interrupt handlers (v3)
    
    This patch (as1431c) makes the synchronous runtime-PM interface
    suitable for use in interrupt handlers.  Subsystems can call the new
    pm_runtime_irq_safe() function to tell the PM core that a device's
    runtime_suspend and runtime_resume callbacks should be invoked with
    interrupts disabled and the spinlock held.  This permits the
    pm_runtime_get_sync() and the new pm_runtime_put_sync_suspend()
    routines to be called from within interrupt handlers.
    
    When a device is declared irq-safe in this way, the PM core increments
    the parent's usage count, so the parent will never be runtime
    suspended.  This prevents difficult situations in which an irq-safe
    device can't resume because it is forced to wait for its non-irq-safe
    parent.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

commit 4959212c18669f254daa0ae796ad676b67939ba2
Author: Jingoo Han <jg1.han@samsung.com>
Date:   Fri Dec 17 16:45:46 2010 +0900

    s3c-fb: add support for runtime pm
    
    This patch adds support for runtime pm using the functions.
     - pm_runtime_get_sync()
     - pm_runtime_put_sync()
    
    pm_runtime_get_sync() and pm_runtime_put_sync() are called when
    open or release function of framebufer driver is called to inform
    the system if hardware is idle or not.
    
    Signed-off-by: Jingoo Han <jg1.han@samsung.com>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 77640aabd7558e43b65bc1a0311be2dbb42c3ff8
Author: Varadarajan, Charulatha <charu@ti.com>
Date:   Tue Dec 7 16:26:57 2010 -0800

    OMAP: GPIO: Implement GPIO as a platform device
    
    Implement GPIO as a platform device.
    
    GPIO APIs are used in machine_init functions. Hence it is
    required to complete GPIO probe before board_init. Therefore
    GPIO device register and driver register are implemented as
    postcore_initcalls.
    
    omap_gpio_init() does nothing now and this function would be
    removed in the next patch as it's usage is spread across most
    of the board files.
    
    Inorder to convert GPIO as platform device, modifications are
    required in clockxxxx_data.c file for OMAP1 so that device names
    can be used to obtain clock instead of getting clocks by
    name/NULL ptr.
    
    Use runtime pm APIs (pm_runtime_put*/pm_runtime_get*) for enabling
    or disabling the clocks, modify sysconfig settings and remove usage
    of clock FW APIs.
    Note 1: Converting GPIO driver to use runtime PM APIs is not done as a
    separate patch because GPIO clock names are different for various OMAPs
    and are different for some of the banks in the same CPU. This would need
    usage of cpu_is checks and bank id checks while using clock FW APIs in
    the gpio driver. Hence while making GPIO a platform driver framework,
    PM runtime APIs are used directly.
    
    Note 2: While implementing GPIO as a platform device, pm runtime APIs
    are used as mentioned above and modification is not done in gpio's
    prepare for idle/ resume after idle functions. This would be done
    in the next patch series and GPIO driver would be made to use dev_pm_ops
    instead of sysdev_class in that series only.
    
    Due to the above, the GPIO driver implicitly relies on
    CM_AUTOIDLE = 1 on its iclk for power management to work, since the
    driver never disables its iclk.
    This would be taken care in the next patch series (see Note 3 below).
    
    Refer to
    http://www.mail-archive.com/linux-omap@vger.kernel.org/msg39112.html
    for more details.
    
    Note 3: only pm_runtime_get_sync is called in gpio's probe() and
    pm_runtime_put* is never called. This is to make the implementation
    similar to the existing GPIO code. Another patch series would be sent
    to correct this.
    
    In OMAP3 and OMAP4 gpio's debounce clocks are optional clocks. They
    are enabled/ disabled whenever required using clock framework APIs
    
    TODO:
    1. Cleanup the GPIO driver. Use function pointers and register
    offest pointers instead of using hardcoded values
    2. Remove all cpu_is_ checks and OMAP specific macros
    3. Remove usage of gpio_bank array so that only
       instance specific information is used in driver code
    4. Rename 'method'/ avoid it's usage
    5. Fix the non-wakeup gpios handling for OMAP2430, OMAP3 & OMAP4
    6. Modify gpio's prepare for idle/ resume after idle functions
       to use runtime pm implentation.
    
    Signed-off-by: Charulatha V <charu@ti.com>
    Signed-off-by: Rajendra Nayak <rnayak@ti.com>
    Reviewed-by: Basak, Partha <p-basak2@ti.com>
    Acked-by: Kevin Hilman <khilman@deeprootsystems.com>
    [tony@atomide.com: updated for bank specific revision and updated boards]
    Signed-off-by: Tony Lindgren <tony@atomide.com>

commit 7ec5ad0f3c1e28b693185c35f768953c5db32291
Author: Varadarajan, Charulatha <charu@ti.com>
Date:   Thu Sep 23 20:02:43 2010 +0530

    OMAP: WDT: Use PM runtime APIs instead of clk FW APIs
    
    Call runtime pm APIs pm_runtime_put_sync() and pm_runtime_get_sync()
    for enabling/disabling the clocks, sysconfig settings instead of using
    clock FW APIs.
    
    Signed-off-by: Charulatha V <charu@ti.com>
    Acked-by: Cousson, Benoit <b-cousson@ti.com>
    Acked-by: Wim Van Sebroeck <wim@iguana.be>
    Signed-off-by: Kevin Hilman <khilman@deeprootsystems.com>

commit 785d1c45ce11820d5838eb6399caa0ac98c836cf
Author: Kuninori Morimoto <morimoto.kuninori@renesas.com>
Date:   Mon Nov 30 20:24:48 2009 +0900

    ASoC: sh: fsi: Add runtime PM support
    
    This patch add support runtime PM.
    Driver callbacks for Runtime PM are empty because
    the device registers are always re-initialized after
    pm_runtime_get_sync(). The Runtime PM functions replaces the
    clock framework module stop bit handling in this driver.
    
    Signed-off-by: Kuninori Morimoto <morimoto.kuninori@renesas.com>
    Acked-by: Paul Mundt <lethal@linux-sh.org>
    Acked-by: Liam Girdwood <lrg@slimlogic.co.uk>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

commit 6d1386c6b8db54ac8d94c01194e0c27cd538532b
Author: Magnus Damm <damm@igel.co.jp>
Date:   Fri Aug 14 10:49:17 2009 +0000

    v4l2: Runtime PM for SuperH Mobile CEU
    
    This patch modifies the SuperH Mobile CEU driver to support
    Runtime PM. Driver callbacks for Runtime PM are empty because
    the device registers are always re-initialized after
    pm_runtime_get_sync(). The Runtime PM functions replaces the
    clock framework module stop bit handling in this driver.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 0246c4712c40294bd5e8335f0c15a38c8e52709f
Author: Magnus Damm <damm@igel.co.jp>
Date:   Fri Aug 14 10:49:08 2009 +0000

    video: Runtime PM for SuperH Mobile LCDC
    
    This patch modifies the SuperH Mobile LCDC framebuffer driver
    to support Runtime PM. The driver is using the functions
    
     - pm_runtime_get_sync()
     - pm_runtime_put_sync()
    
    to inform the bus code if the hardware is idle or not. If the
    hardware is idle then the bus code may call the runtime dev_pm_ops
    callbacks to save and restore state. pm_runtime_resume() is used
    to allow the driver to access the hardware from probe().
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit f1a3b994f9dfd12111dc034402aed256fac66dfe
Author: Magnus Damm <damm@igel.co.jp>
Date:   Fri Aug 14 10:48:59 2009 +0000

    i2c: Runtime PM for SuperH Mobile I2C
    
    This patch modifies the SuperH Mobile I2C driver to support
    Runtime PM. These changes is all that is needed for proper
    Runtime PM support in this driver. Driver callbacks for
    Runtime PM are empty because the device registers are always
    re-initialized after pm_runtime_get_sync().
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>
