commit 5342ab0af45064cbdc773645b93ab70c24ee161f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Dec 15 17:54:24 2022 +0100

    tty: serial: qcom_geni: avoid duplicate struct member init
    
    When -Woverride-init is enabled in a build, gcc points out that
    qcom_geni_serial_pm_ops contains conflicting initializers:
    
    drivers/tty/serial/qcom_geni_serial.c:1586:20: error: initialized field overwritten [-Werror=override-init]
     1586 |         .restore = qcom_geni_serial_sys_hib_resume,
          |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    drivers/tty/serial/qcom_geni_serial.c:1586:20: note: (near initialization for 'qcom_geni_serial_pm_ops.restore')
    drivers/tty/serial/qcom_geni_serial.c:1587:17: error: initialized field overwritten [-Werror=override-init]
     1587 |         .thaw = qcom_geni_serial_sys_hib_resume,
          |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Open-code the initializers with the version that was already used,
    and use the pm_sleep_ptr() method to deal with unused ones,
    in place of the __maybe_unused annotation.
    
    Fixes: 35781d8356a2 ("tty: serial: qcom-geni-serial: Add support for Hibernation feature")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20221215165453.1864836-1-arnd@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb9b3951d6366c30f0085c9830381b1334cdcf62
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Jan 5 10:35:31 2023 +0100

    ALSA: hda: cs35l41: Check runtime suspend capability at runtime_idle
    
    commit ae50e2ab122cef68f46b7799fb9deffe3334f5e2 upstream.
    
    The runtime PM core checks with runtime_idle callback whether it can
    goes to the runtime suspend or not, and we can put the boost type
    check there instead of runtime_suspend and _resume calls.  This will
    reduce the unnecessary runtime_suspend() calls.
    
    Fixes: 1873ebd30cc8 ("ALSA: hda: cs35l41: Support Hibernation during Suspend")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230105093531.16960-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae50e2ab122cef68f46b7799fb9deffe3334f5e2
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Jan 5 10:35:31 2023 +0100

    ALSA: hda: cs35l41: Check runtime suspend capability at runtime_idle
    
    The runtime PM core checks with runtime_idle callback whether it can
    goes to the runtime suspend or not, and we can put the boost type
    check there instead of runtime_suspend and _resume calls.  This will
    reduce the unnecessary runtime_suspend() calls.
    
    Fixes: 1873ebd30cc8 ("ALSA: hda: cs35l41: Support Hibernation during Suspend")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230105093531.16960-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 3363e0adb3931e987caa6404327b35ea2db231d8
Author: Xueqin Luo <luoxueqin@kylinos.cn>
Date:   Fri Nov 11 13:19:49 2022 +0800

    PM: hibernate: Complain about memory map mismatches during resume
    
    The system memory map can change over a hibernation-restore cycle due
    to a defect in the platform firmware, and some of the page frames used
    by the kernel before hibernation may not be available any more during
    the subsequent restore which leads to the error below.
    
    [  T357] PM: Image loading progress:   0%
    [  T357] PM: Read 2681596 kbytes in 0.03 seconds (89386.53 MB/s)
    [  T357] PM: Error -14 resuming
    [  T357] PM: Failed to load hibernation image, recovering.
    [  T357] PM: Basic memory bitmaps freed
    [  T357] OOM killer enabled.
    [  T357] Restarting tasks ... done.
    [  T357] PM: resume from hibernation failed (-14)
    [  T357] PM: Hibernation image not present or could not be loaded.
    
    Add an error message to the unpack() function to allow problematic
    page frames to be identified and the source of the problem to be
    diagnosed more easily. This can save developers quite a bit of
    debugging time.
    
    Signed-off-by: Xueqin Luo <luoxueqin@kylinos.cn>
    [ rjw: New subject, edited changelog ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 35781d8356a2eecaa6074ceeb80ee22e252fcdae
Author: Aniket Randive <quic_arandive@quicinc.com>
Date:   Fri Oct 7 11:53:00 2022 +0530

    tty: serial: qcom-geni-serial: Add support for Hibernation feature
    
    Added changes to support the hibernation feature for serial UART.
    Added support for freeze, restore and thaw callbacks to put the
    device into hibernation.
    
    Signed-off-by: Aniket Randive <quic_arandive@quicinc.com>
    Link: https://lore.kernel.org/r/1665123780-20557-1-git-send-email-quic_arandive@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa447a8734f12f78a1ee6cd611e277cd4c33d773
Merge: fb8d784b531e 9ecf04016c87
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Thu Aug 18 14:16:36 2022 -0700

    Merge branch 'add-dt-property-to-disable-hibernation-mode'
    
    Wei Fang says:
    
    ====================
    Add DT property to disable hibernation mode
    
    The patches add the ability to disable the hibernation mode of AR803x
    PHYs. Hibernation mode defaults to enabled after hardware reset on
    these PHYs. If the AR803x PHYs enter hibernation mode, they will not
    provide any clock. For some MACs, they might need the clocks which
    provided by the PHYs to support their own hardware logic.
    So, the patches add the support to disable hibernation mode by adding
    a boolean:
    
            qca,disable-hibernation-mode
    
    If one wished to disable hibernation mode to better match with the
    specifical MAC, just add this property in the phy node of DT.
    ====================
    
    Link: https://lore.kernel.org/r/20220818030054.1010660-1-wei.fang@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 26ae150bbb6d19767f10800e17ad0fd81f3da67e
Author: Ren Zhijie <renzhijie2@huawei.com>
Date:   Mon Jul 25 10:36:11 2022 +0800

    ALSA: hda: cs35l41: Fix build error unused-function
    
    If CONFIG_PM_SLEEP is not set,
    make ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu-, will be failed, like this:
    
    sound/pci/hda/cs35l41_hda.c:583:12: error: ‘cs35l41_runtime_resume’ defined but not used [-Werror=unused-function]
     static int cs35l41_runtime_resume(struct device *dev)
                ^~~~~~~~~~~~~~~~~~~~~~
    sound/pci/hda/cs35l41_hda.c:565:12: error: ‘cs35l41_runtime_suspend’ defined but not used [-Werror=unused-function]
     static int cs35l41_runtime_suspend(struct device *dev)
                ^~~~~~~~~~~~~~~~~~~~~~~
    cc1: all warnings being treated as errors
    make[3]: *** [sound/pci/hda/cs35l41_hda.o] Error 1
    
    commit 1a3c7bb08826 ("PM: core: Add new *_PM_OPS macros,
    deprecate old ones"), add new marco RUNTIME_PM_OPS to fix this unused-function problem.
    
    Fixes: 1873ebd30cc8 ("ALSA: hda: cs35l41: Support Hibernation during Suspend")
    Signed-off-by: Ren Zhijie <renzhijie2@huawei.com>
    Link: https://lore.kernel.org/r/20220725023611.57055-1-renzhijie2@huawei.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 1873ebd30cc818eefd151e40a4bd05fd8f83b85a
Author: Stefan Binding <sbinding@opensource.cirrus.com>
Date:   Thu Jun 30 01:23:30 2022 +0100

    ALSA: hda: cs35l41: Support Hibernation during Suspend
    
    CS35L41 supports hibernation during suspend when using
    DSP firmware.
    When the driver suspends it will hibernate the part, if
    firmware is running, and resume will wake from hibernation.
    CS35L41 driver will suspend/resume when requested by
    hda driver.
    Note that suspend/resume and hibernation is only supported
    when firmware is running.
    
    Signed-off-by: Stefan Binding <sbinding@opensource.cirrus.com>
    Signed-off-by: Vitaly Rodionov <vitalyr@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20220630002335.366545-10-vitalyr@opensource.cirrus.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 29851567d1aa8f0045170545d2e1a5d7a4057667
Merge: 0d8ba24e72b6 3590b44b9434
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 12 08:52:15 2022 -0700

    Merge tag 'drm-fixes-2022-07-12' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "I see you picked up one of the fbdev fixes, this is the other stuff
      that was queued up last week.
    
      A bit of a scattering of fixes, three for i915, one amdgpu, and a
      couple of panfrost, rockchip, panel and bridge ones.
    
      amdgpu:
       - Hibernation fix
    
      dma-buf:
       - fix use after free of fence
    
      i915:
       - Fix a possible refcount leak in DP MST connector (Hangyu)
       - Fix on loading guc on ADL-N (Daniele)
       - Fix vm use-after-free in vma destruction (Thomas)
    
      bridge:
       - fsl-ldb : 3 LVDS modesetting fixes
    
      rockchip:
       - iommu domain fix
    
      panfrost:
       - fix memory corruption
       - error path fix
    
      panel:
       - orientation quirk fix for Yoga tablet 2
    
      ssd130x:
       - fix pre-charge period setting"
    
    * tag 'drm-fixes-2022-07-12' of git://anongit.freedesktop.org/drm/drm:
      drm/ssd130x: Fix pre-charge period setting
      dma-buf: Fix one use-after-free of fence
      drm/i915: Fix vm use-after-free in vma destruction
      drm/i915/guc: ADL-N should use the same GuC FW as ADL-S
      drm/i915: fix a possible refcount leak in intel_dp_add_mst_connector()
      drm/amdgpu/display: disable prefer_shadow for generic fb helpers
      drm/amdgpu: keep fbdev buffers pinned during suspend
      drm/panfrost: Fix shrinker list corruption by madvise IOCTL
      drm/panfrost: Put mapping instead of shmem obj on panfrost_mmu_map_fault_addr() error
      drm/rockchip: Detach from ARM DMA domain in attach_device
      drm/bridge: fsl-ldb: Drop DE signal polarity inversion
      drm/bridge: fsl-ldb: Enable split mode for LVDS dual link
      drm/bridge: fsl-ldb: Fix mode clock rate validation
      drm/aperture: Run fbdev removal before internal helpers
      drm: panel-orientation-quirks: Add quirk for the Lenovo Yoga Tablet 2 830

commit 7de96365878f769f21eae8205fc58f7f61250745
Merge: 32346491ddf2 3a4b1cc28fbd
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue Jul 12 10:34:42 2022 +1000

    Merge tag 'amd-drm-fixes-5.19-2022-07-06' of https://gitlab.freedesktop.org/agd5f/linux into drm-fixes
    
    amd-drm-fixes-5.19-2022-07-06:
    
    amdgpu:
    - Hibernation fix
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    From: Alex Deucher <alexander.deucher@amd.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220707024421.5773-1-alexander.deucher@amd.com

commit 191a3ef586344acc35ba5619d6225858250aaee5
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Thu Feb 10 15:28:12 2022 +0530

    scsi: mpi3mr: Fix hibernation issue
    
    Hibernation operation fails when it is issued for second time. This is
    because the driver is trying to release the IOC's PCI resources after
    setting power state to D3.
    
    Set the IOC's power state to D3 only after releasing the IOC's PCI
    resources.
    
    Link: https://lore.kernel.org/r/20220210095817.22828-5-sreekanth.reddy@broadcom.com
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 3c89857a66ef15bcf54c8fd255a1fd70dbc823a6
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Thu Dec 9 16:08:02 2021 +0300

    ACPI: PM: Remove redundant cache flushing
    
    ACPICA code takes care about cache flushing on S1/S2/S3 in
    acpi_hw_extended_sleep() and acpi_hw_legacy_sleep().
    
    acpi_suspend_enter() calls into ACPICA code via acpi_enter_sleep_state()
    for S1 or x86_acpi_suspend_lowlevel() for S3.
    
    acpi_sleep_prepare() call tree:
      __acpi_pm_prepare()
        acpi_pm_prepare()
          acpi_suspend_ops::prepare_late()
          acpi_hibernation_ops::pre_snapshot()
          acpi_hibernation_ops::prepare()
        acpi_suspend_begin_old()
          acpi_suspend_begin_old::begin()
      acpi_hibernation_begin_old()
        acpi_hibernation_ops_old::acpi_hibernation_begin_old()
      acpi_power_off_prepare()
        pm_power_off_prepare()
    
    Hibernation (S4) and Power Off (S5) don't require cache flushing, so
    the only interesting callsites are acpi_suspend_ops::prepare_late()
    and acpi_suspend_begin_old::begin(). Both of them have cache flush
    on ->enter() operation in acpi_suspend_enter().
    
    Remove redundant ACPI_FLUSH_CPU_CACHE() in acpi_sleep_prepare() and
    acpi_suspend_enter().
    
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit b3fc9b21e5c6ba3cd593ea3f6a89f73f08fb2446
Author: Chris von Recklinghausen <crecklin@redhat.com>
Date:   Tue Apr 20 08:57:39 2021 -0400

    PM: hibernate: x86: Use crc32 instead of md5 for hibernation e820 integrity check
    
    [ Upstream commit f5d1499ae2096d7ea301023c4cc54e427300eb0a ]
    
    Hibernation fails on a system in fips mode because md5 is used for the e820
    integrity check and is not available. Use crc32 instead.
    
    The check is intended to detect whether the E820 memory map provided
    by the firmware after cold boot unexpectedly differs from the one that
    was in use when the hibernation image was created. In this case, the
    hibernation image cannot be restored, as it may cover memory regions
    that are no longer available to the OS.
    
    A non-cryptographic checksum such as CRC-32 is sufficient to detect such
    inadvertent deviations.
    
    Fixes: 62a03defeabd ("PM / hibernate: Verify the consistent of e820 memory map by md5 digest")
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Tested-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Chris von Recklinghausen <crecklin@redhat.com>
    [ rjw: Subject edit ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d62f935a47a23fd2fd2747e394d318708b0e4006
Author: Chris von Recklinghausen <crecklin@redhat.com>
Date:   Tue Apr 20 08:57:39 2021 -0400

    PM: hibernate: x86: Use crc32 instead of md5 for hibernation e820 integrity check
    
    [ Upstream commit f5d1499ae2096d7ea301023c4cc54e427300eb0a ]
    
    Hibernation fails on a system in fips mode because md5 is used for the e820
    integrity check and is not available. Use crc32 instead.
    
    The check is intended to detect whether the E820 memory map provided
    by the firmware after cold boot unexpectedly differs from the one that
    was in use when the hibernation image was created. In this case, the
    hibernation image cannot be restored, as it may cover memory regions
    that are no longer available to the OS.
    
    A non-cryptographic checksum such as CRC-32 is sufficient to detect such
    inadvertent deviations.
    
    Fixes: 62a03defeabd ("PM / hibernate: Verify the consistent of e820 memory map by md5 digest")
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Tested-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Chris von Recklinghausen <crecklin@redhat.com>
    [ rjw: Subject edit ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1789737ca9f1855251d8d2953b03df6f68da45a7
Author: Chris von Recklinghausen <crecklin@redhat.com>
Date:   Tue Apr 20 08:57:39 2021 -0400

    PM: hibernate: x86: Use crc32 instead of md5 for hibernation e820 integrity check
    
    [ Upstream commit f5d1499ae2096d7ea301023c4cc54e427300eb0a ]
    
    Hibernation fails on a system in fips mode because md5 is used for the e820
    integrity check and is not available. Use crc32 instead.
    
    The check is intended to detect whether the E820 memory map provided
    by the firmware after cold boot unexpectedly differs from the one that
    was in use when the hibernation image was created. In this case, the
    hibernation image cannot be restored, as it may cover memory regions
    that are no longer available to the OS.
    
    A non-cryptographic checksum such as CRC-32 is sufficient to detect such
    inadvertent deviations.
    
    Fixes: 62a03defeabd ("PM / hibernate: Verify the consistent of e820 memory map by md5 digest")
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Tested-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Chris von Recklinghausen <crecklin@redhat.com>
    [ rjw: Subject edit ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0112b7ce68ea85d4e88a5baf32d007c1e3856661
Author: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
Date:   Fri Apr 16 16:48:34 2021 +0400

    usb: dwc2: Update dwc2_handle_usb_suspend_intr function.
    
    To avoid working in two modes (partial power down
    and hibernation) changed conditions for entering
    partial power down or hibernation.
    
    Instead of checking hw_params.power_optimized and
    hw_params.hibernation now checking power_down
    param which already set to one of the options
    (Hibernation or Partial Power Down) based on
    OTG_EN_PWROPT.
    
    Acked-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Signed-off-by: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
    Signed-off-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Link: https://lore.kernel.org/r/20210416124835.9F257A005D@mailhost.synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c363af9ce3db7e374b37e0509ccf31f8da4da404
Author: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
Date:   Fri Apr 16 16:46:50 2021 +0400

    usb: dwc2: Update exit hibernation when port reset is asserted
    
    No need to check for "DWC2_POWER_DOWN_PARAM_HIBERNATION" param
    as "hsotg->hibernated" flag is already enough for exiting from
    hibernation mode.
    
    - Removes checking of "DWC2_POWER_DOWN_PARAM_HIBERNATION" param.
    
    - For code readability Hibernation exit code moved after
    debug message print.
    
    - Added "dwc2_exit_hibernation()" function error checking.
    
    Acked-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Signed-off-by: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
    Link: https://lore.kernel.org/r/20210416124651.51C8DA005C@mailhost.synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5d1499ae2096d7ea301023c4cc54e427300eb0a
Author: Chris von Recklinghausen <crecklin@redhat.com>
Date:   Tue Apr 20 08:57:39 2021 -0400

    PM: hibernate: x86: Use crc32 instead of md5 for hibernation e820 integrity check
    
    Hibernation fails on a system in fips mode because md5 is used for the e820
    integrity check and is not available. Use crc32 instead.
    
    The check is intended to detect whether the E820 memory map provided
    by the firmware after cold boot unexpectedly differs from the one that
    was in use when the hibernation image was created. In this case, the
    hibernation image cannot be restored, as it may cover memory regions
    that are no longer available to the OS.
    
    A non-cryptographic checksum such as CRC-32 is sufficient to detect such
    inadvertent deviations.
    
    Fixes: 62a03defeabd ("PM / hibernate: Verify the consistent of e820 memory map by md5 digest")
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Tested-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Chris von Recklinghausen <crecklin@redhat.com>
    [ rjw: Subject edit ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit c74c26f6e398387cc953b3fdb54858f09bfb696b
Author: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
Date:   Thu Apr 8 13:46:06 2021 +0400

    usb: dwc2: Fix partial power down exiting by system resume
    
    Fixes the implementation of exiting from partial power down
    power saving mode when PC is resumed.
    
    Added port connection status checking which prevents exiting from
    Partial Power Down mode from _dwc2_hcd_resume() if not in Partial
    Power Down mode.
    
    Rearranged the implementation to get rid of many "if"
    statements.
    
    NOTE: Switch case statement is used for hibernation partial
    power down and clock gating mode determination. In this patch
    only Partial Power Down is implemented the Hibernation and
    clock gating implementations are planned to be added.
    
    Fixes: 6f6d70597c15 ("usb: dwc2: bus suspend/resume for hosts with DWC2_POWER_DOWN_PARAM_NONE")
    Cc: <stable@vger.kernel.org>
    Acked-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Signed-off-by: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
    Link: https://lore.kernel.org/r/20210408094607.1A9BAA0094@mailhost.synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 113f86d0c302997cbf176489e7775b1c3b3b15b1
Author: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
Date:   Thu Apr 8 13:45:58 2021 +0400

    usb: dwc2: Update partial power down entering by system suspend
    
    With current implementation the port power is being disabled,
    which is not required by the programming guide. Also, if there
    is a system which works only in "DWC2_POWER_DOWN_PARAM_NONE"
    (clock gating) mode the current implementation does not set
    Gate hclk bit in pcgctl register.
    
    Rearranges and updates the implementation of entering to partial
    power down power saving mode when PC is suspended to get
    rid of many "if" statements and removes disabling of port power.
    
    NOTE: Switch case statement is used for hibernation partial
    power down and clock gating mode determination. In this patch
    only Partial Power Down is implemented the Hibernation and
    clock gating implementations are planned to be added.
    
    Acked-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Signed-off-by: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
    Link: https://lore.kernel.org/r/20210408094559.33541A022E@mailhost.synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e0890ebaa3fe868c3ea4651f05fa86d72740993
Author: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
Date:   Thu Apr 8 13:45:17 2021 +0400

    usb: dwc2: Add exit partial power down when port is resumed
    
    Added flow of exiting Partial Power Down in
    "dwc2_port_resume()" function when core receives resume.
    
    NOTE: Switch case statement is used for hibernation partial
    power down and clock gating mode determination. In this patch
    only Partial Power Down is implemented the Hibernation and
    clock gating implementations are planned to be added.
    
    Acked-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Signed-off-by: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
    Link: https://lore.kernel.org/r/20210408094518.6DA1DA022E@mailhost.synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22ff0c8e529ed3c3385f9807ec8efacf440c4c8e
Author: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
Date:   Thu Apr 8 13:45:09 2021 +0400

    usb: dwc2: Add enter partial power down when port is suspended
    
    Adds flow of entering Partial Power Down in
    "dwc2_port_suspend()" function when core receives suspend.
    
    NOTE: Switch case statement is used for hibernation partial
    power down and clock gating mode determination. In this patch
    only Partial Power Down is implemented the Hibernation and
    clock gating implementations are planned to be added.
    
    Acked-by: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
    Signed-off-by: Artur Petrosyan <Arthur.Petrosyan@synopsys.com>
    Link: https://lore.kernel.org/r/20210408094510.6C4E9A022E@mailhost.synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad1e4f74c072eaa2c6d77dd710db31aafecd614f
Author: Domenico Andreoli <domenico.andreoli@linux.com>
Date:   Tue May 19 20:14:10 2020 +0200

    PM: hibernate: Restrict writes to the resume device
    
    Hibernation via snapshot device requires write permission to the swap
    block device, the one that more often (but not necessarily) is used to
    store the hibernation image.
    
    With this patch, such permissions are granted iff:
    
     1) snapshot device config option is enabled
     2) swap partition is used as resume device
    
    In other circumstances the swap device is not writable from userspace.
    
    In order to achieve this, every write attempt to a swap device is
    checked against the device configured as part of the uswsusp API [0]
    using a pointer to the inode struct in memory. If the swap device being
    written was not configured for resuming, the write request is denied.
    
    NOTE: this implementation works only for swap block devices, where the
    inode configured by swapon (which sets S_SWAPFILE) is the same used
    by SNAPSHOT_SET_SWAP_AREA.
    
    In case of swap file, SNAPSHOT_SET_SWAP_AREA indeed receives the inode
    of the block device containing the filesystem where the swap file is
    located (+ offset in it) which is never passed to swapon and then has
    not set S_SWAPFILE.
    
    As result, the swap file itself (as a file) has never an option to be
    written from userspace. Instead it remains writable if accessed directly
    from the containing block device, which is always writeable from root.
    
    [0] Documentation/power/userland-swsusp.rst
    
    v2:
     - rename is_hibernate_snapshot_dev() to is_hibernate_resume_dev()
     - fix description so to correctly refer to the resume device
    
    Signed-off-by: Domenico Andreoli <domenico.andreoli@linux.com>
    Acked-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit ab7e9b067f3d9cbec28cfca51d341efb421b7a51
Author: Domenico Andreoli <domenico.andreoli@linux.com>
Date:   Thu May 7 09:19:52 2020 +0200

    PM: hibernate: Incorporate concurrency handling
    
    Hibernation concurrency handling is currently delegated to user.c,
    where it's also used for regulating the access to the snapshot device.
    
    In the prospective of making user.c a separate configuration option,
    such mutual exclusion is brought into hibernate.c and made available
    through accessor helpers hereby introduced.
    
    Signed-off-by: Domenico Andreoli <domenico.andreoli@linux.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 394216275c7d503d966317da9a01ad6626a6091d
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Wed Mar 18 20:55:24 2020 +0100

    s390: remove broken hibernate / power management support
    
    Hibernation is known to be broken for many years on s390. Given that
    there aren't any real use cases, remove the code instead of spending
    time to fix and maintain it.
    
    Without hibernate support it doesn't make too much sense to keep power
    management support; therefore remove it completely.
    
    Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Acked-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>

commit a1dc35b840e9e7a91663a288ecb4912b9e4a1406
Author: Anchal Agarwal <anchalag@amazon.com>
Date:   Fri Feb 14 10:47:58 2020 -0800

    ACPICA: Enable sleep button on ACPI legacy wake
    
    ACPICA commit 9383f5b01091e432c05f802a57edc20d329eec1f
    
    Hibernation (S4) is triggered in a guest when it recieves a sleep
    trigger from the hypervisor. When the guest resumes from this power
    state, it does not see the sleep_enabled bit. In otherwords, the sleep
    button is not enabled on waking from an S4 state. This causes
    subsequent invocation of sleep state to fail in the guest.
    
    Fix this problem by enabling the sleep button in ACPI legacy wake.
    
    Signed-off-by: Anchal Agarwal <anchalag@amazon.com>
    Reviewed-by: Balbir Singh <sblbir@amazon.com>
    Reviewed-by: Frank van der Linden <fllinden@amazon.com>
    [ ek: changelog]
    
    Link: https://github.com/acpica/acpica/commit/9383f5b0
    Signed-off-by: Erik Kaneda <erik.kaneda@intel.com>
    Signed-off-by: Anchal Agarwal <anchalag@amazon.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 7a7b99bf801efd09b3202bf5b6216d70cb1363f1
Author: Luigi Semenzato <semenzato@google.com>
Date:   Thu Jan 2 15:19:40 2020 -0800

    PM: hibernate: Add more logging on hibernation failure
    
    Hibernation fails when the kernel cannot allocate enough memory
    to copy all pages of RAM in use.
    
    Ensure that the failure reason is clearly logged, and clearly
    attributable to the hibernation module.
    
    Signed-off-by: Luigi Semenzato <semenzato@google.com>
    [ rjw: Subject & changelog ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 01acd9e82f8291f1a7755537e695368ce6567207
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Aug 14 01:06:55 2019 +0000

    PCI/PM: Always return devices to D0 when thawing
    
    commit f2c33ccacb2d4bbeae2a255a7ca0cbfd03017b7c upstream.
    
    pci_pm_thaw_noirq() is supposed to return the device to D0 and restore its
    configuration registers, but previously it only did that for devices whose
    drivers implemented the new power management ops.
    
    Hibernation, e.g., via "echo disk > /sys/power/state", involves freezing
    devices, creating a hibernation image, thawing devices, writing the image,
    and powering off.  The fact that thawing did not return devices with legacy
    power management to D0 caused errors, e.g., in this path:
    
      pci_pm_thaw_noirq
        if (pci_has_legacy_pm_support(pci_dev)) # true for Mellanox VF driver
          return pci_legacy_resume_early(dev)   # ... legacy PM skips the rest
        pci_set_power_state(pci_dev, PCI_D0)
        pci_restore_state(pci_dev)
      pci_pm_thaw
        if (pci_has_legacy_pm_support(pci_dev))
          pci_legacy_resume
            drv->resume
              mlx4_resume
                ...
                  pci_enable_msix_range
                    ...
                      if (dev->current_state != PCI_D0)  # <---
                        return -EINVAL;
    
    which caused these warnings:
    
      mlx4_core a6d1:00:02.0: INTx is not supported in multi-function mode, aborting
      PM: dpm_run_callback(): pci_pm_thaw+0x0/0xd7 returns -95
      PM: Device a6d1:00:02.0 failed to thaw: error -95
    
    Return devices to D0 and restore config registers for all devices, not just
    those whose drivers support new power management.
    
    [bhelgaas: also call pci_restore_state() before pci_legacy_resume_early(),
    update comment, add stable tag, commit log]
    Link: https://lore.kernel.org/r/KU1P153MB016637CAEAD346F0AA8E3801BFAD0@KU1P153MB0166.APCP153.PROD.OUTLOOK.COM
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable@vger.kernel.org      # v4.13+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 253c77b5a299e7a5cff2c291ae5a50222cb50b7f
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Aug 14 01:06:55 2019 +0000

    PCI/PM: Always return devices to D0 when thawing
    
    commit f2c33ccacb2d4bbeae2a255a7ca0cbfd03017b7c upstream.
    
    pci_pm_thaw_noirq() is supposed to return the device to D0 and restore its
    configuration registers, but previously it only did that for devices whose
    drivers implemented the new power management ops.
    
    Hibernation, e.g., via "echo disk > /sys/power/state", involves freezing
    devices, creating a hibernation image, thawing devices, writing the image,
    and powering off.  The fact that thawing did not return devices with legacy
    power management to D0 caused errors, e.g., in this path:
    
      pci_pm_thaw_noirq
        if (pci_has_legacy_pm_support(pci_dev)) # true for Mellanox VF driver
          return pci_legacy_resume_early(dev)   # ... legacy PM skips the rest
        pci_set_power_state(pci_dev, PCI_D0)
        pci_restore_state(pci_dev)
      pci_pm_thaw
        if (pci_has_legacy_pm_support(pci_dev))
          pci_legacy_resume
            drv->resume
              mlx4_resume
                ...
                  pci_enable_msix_range
                    ...
                      if (dev->current_state != PCI_D0)  # <---
                        return -EINVAL;
    
    which caused these warnings:
    
      mlx4_core a6d1:00:02.0: INTx is not supported in multi-function mode, aborting
      PM: dpm_run_callback(): pci_pm_thaw+0x0/0xd7 returns -95
      PM: Device a6d1:00:02.0 failed to thaw: error -95
    
    Return devices to D0 and restore config registers for all devices, not just
    those whose drivers support new power management.
    
    [bhelgaas: also call pci_restore_state() before pci_legacy_resume_early(),
    update comment, add stable tag, commit log]
    Link: https://lore.kernel.org/r/KU1P153MB016637CAEAD346F0AA8E3801BFAD0@KU1P153MB0166.APCP153.PROD.OUTLOOK.COM
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable@vger.kernel.org      # v4.13+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ab2e14ba709957cf43ec9fa4b36dd4dfbbc65b2
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Aug 14 01:06:55 2019 +0000

    PCI/PM: Always return devices to D0 when thawing
    
    commit f2c33ccacb2d4bbeae2a255a7ca0cbfd03017b7c upstream.
    
    pci_pm_thaw_noirq() is supposed to return the device to D0 and restore its
    configuration registers, but previously it only did that for devices whose
    drivers implemented the new power management ops.
    
    Hibernation, e.g., via "echo disk > /sys/power/state", involves freezing
    devices, creating a hibernation image, thawing devices, writing the image,
    and powering off.  The fact that thawing did not return devices with legacy
    power management to D0 caused errors, e.g., in this path:
    
      pci_pm_thaw_noirq
        if (pci_has_legacy_pm_support(pci_dev)) # true for Mellanox VF driver
          return pci_legacy_resume_early(dev)   # ... legacy PM skips the rest
        pci_set_power_state(pci_dev, PCI_D0)
        pci_restore_state(pci_dev)
      pci_pm_thaw
        if (pci_has_legacy_pm_support(pci_dev))
          pci_legacy_resume
            drv->resume
              mlx4_resume
                ...
                  pci_enable_msix_range
                    ...
                      if (dev->current_state != PCI_D0)  # <---
                        return -EINVAL;
    
    which caused these warnings:
    
      mlx4_core a6d1:00:02.0: INTx is not supported in multi-function mode, aborting
      PM: dpm_run_callback(): pci_pm_thaw+0x0/0xd7 returns -95
      PM: Device a6d1:00:02.0 failed to thaw: error -95
    
    Return devices to D0 and restore config registers for all devices, not just
    those whose drivers support new power management.
    
    [bhelgaas: also call pci_restore_state() before pci_legacy_resume_early(),
    update comment, add stable tag, commit log]
    Link: https://lore.kernel.org/r/KU1P153MB016637CAEAD346F0AA8E3801BFAD0@KU1P153MB0166.APCP153.PROD.OUTLOOK.COM
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable@vger.kernel.org      # v4.13+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2c33ccacb2d4bbeae2a255a7ca0cbfd03017b7c
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Aug 14 01:06:55 2019 +0000

    PCI/PM: Always return devices to D0 when thawing
    
    pci_pm_thaw_noirq() is supposed to return the device to D0 and restore its
    configuration registers, but previously it only did that for devices whose
    drivers implemented the new power management ops.
    
    Hibernation, e.g., via "echo disk > /sys/power/state", involves freezing
    devices, creating a hibernation image, thawing devices, writing the image,
    and powering off.  The fact that thawing did not return devices with legacy
    power management to D0 caused errors, e.g., in this path:
    
      pci_pm_thaw_noirq
        if (pci_has_legacy_pm_support(pci_dev)) # true for Mellanox VF driver
          return pci_legacy_resume_early(dev)   # ... legacy PM skips the rest
        pci_set_power_state(pci_dev, PCI_D0)
        pci_restore_state(pci_dev)
      pci_pm_thaw
        if (pci_has_legacy_pm_support(pci_dev))
          pci_legacy_resume
            drv->resume
              mlx4_resume
                ...
                  pci_enable_msix_range
                    ...
                      if (dev->current_state != PCI_D0)  # <---
                        return -EINVAL;
    
    which caused these warnings:
    
      mlx4_core a6d1:00:02.0: INTx is not supported in multi-function mode, aborting
      PM: dpm_run_callback(): pci_pm_thaw+0x0/0xd7 returns -95
      PM: Device a6d1:00:02.0 failed to thaw: error -95
    
    Return devices to D0 and restore config registers for all devices, not just
    those whose drivers support new power management.
    
    [bhelgaas: also call pci_restore_state() before pci_legacy_resume_early(),
    update comment, add stable tag, commit log]
    Link: https://lore.kernel.org/r/KU1P153MB016637CAEAD346F0AA8E3801BFAD0@KU1P153MB0166.APCP153.PROD.OUTLOOK.COM
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable@vger.kernel.org      # v4.13+

commit ee5f1042b20e1ffbc5c7eb0e0883fdbc05cec85f
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Tue May 21 14:44:52 2019 +0800

    scsi: ufs: Introduce ufshcd_is_auto_hibern8_supported()
    
    The checking of Auto-Hibernation support is used in many places in the
    driver, thus re-factor it as ufshcd_is_auto_hibern8_supported() to make
    code more clean.
    
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Reviewed-by: Avri Altman <Avri.Altman@wdc.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 395b9bca6b81489c59d1182183aeac65b1a47c3d
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Apr 29 11:21:53 2019 -0700

    scsi: sd: Revert "Rely on the driver core for asynchronous probing"
    
    Hibernation hangs as follows due to commit 21e6ba3f0e02 when using SATA:
    
    Call Trace:
     __schedule+0x464/0xe70
     schedule+0x4e/0xd0
     blk_queue_enter+0x5fe/0x7e0
     generic_make_request+0x313/0x950
     submit_bio+0x9b/0x250
     submit_bio_wait+0xc9/0x110
     hib_submit_io+0x17d/0x1c0
     write_page+0x61/0xa0
     swap_write_page+0x4b/0x1f0
     swsusp_write+0x2f9/0x3d0
     hibernate.cold.10+0x108/0x231
     state_store+0xf7/0x100
     kobj_attr_store+0x37/0x50
     sysfs_kf_write+0x87/0xa0
     kernfs_fop_write+0x186/0x240
     __vfs_write+0x4d/0x90
     vfs_write+0xfa/0x260
     ksys_write+0xb9/0x1a0
     __x64_sys_write+0x43/0x50
     do_syscall_64+0x71/0x210
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Hence revert commit 21e6ba3f0e02.
    
    Cc: Pavel Machek <pavel@ucw.cz>
    Reported-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 6d23ee9caa6790aea047f9aca7f3c03cb8d96eb6
Merge: 6555ad13a019 aaeab02ddcc8
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Mar 23 13:33:09 2018 +0100

    Merge tag 'usb-for-v4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/balbi/usb into usb-testing
    
    Felipe writes:
    
    usb: changes for v4.17 merge window
    
    Quite a lot happened in this cycle, with a total of 95 non-merge
    commits. The most interesting parts are listed below:
    
    Synopsys has been adding better support for USB 3.1 to dwc3. The same
    series also sets g_mass_storage's max speed to SSP.
    
    Roger Quadros (TI) added support for dual-role using the OTG block
    available in some dwc3 implementations, this makes sure that AM437x
    can swap roles in runtime.
    
    We have a new SoC supported in dwc3 now - Amlogic Meson GX - thanks to
    the work of Martin Blumenstingl.
    
    We also have a ton of changes in dwc2 (51% of all changes, in
    fact). The most interesting part there is the support for
    Hibernation (a Synopsys PM feature).
    
    Apart from these, we have our regular set of non-critical fixes all
    over the place.

commit 631a23108c1a90b726ca99f1f90d48a91737f43d
Author: Vardan Mikayelyan <mvardan@synopsys.com>
Date:   Fri Feb 16 14:07:05 2018 +0400

    usb: dwc2: Add hibernation field into dwc2_hw_params
    
    Add parameter and it's initialization, needed for hibernation.
    
    Reimplement dwc2_set_param_power_down() to support hibernation too.
    Now 'power_down' parameter can be initialized with 0, 1 or 2.
    0 - No
    1 - Partial power down
    2 - Hibernation
    
    Signed-off-by: Vardan Mikayelyan <mvardan@synopsys.com>
    Signed-off-by: John Youn <johnyoun@synopsys.com>
    Signed-off-by: Grigor Tovmasyan <tovmasya@synopsys.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit b657f2742871a071a015328ec45c26679998096c
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Thu May 25 16:49:07 2017 +0800

    PCI/PM: Restore the status of PCI devices across hibernation
    
    commit e60514bd4485c0c7c5a7cf779b200ce0b95c70d6 upstream.
    
    Currently we saw a lot of "No irq handler" errors during hibernation, which
    caused the system hang finally:
    
      ata4.00: qc timeout (cmd 0xec)
      ata4.00: failed to IDENTIFY (I/O error, err_mask=0x4)
      ata4.00: revalidation failed (errno=-5)
      ata4: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
      do_IRQ: 31.151 No irq handler for vector
    
    According to above logs, there is an interrupt triggered and it is
    dispatched to CPU31 with a vector number 151, but there is no handler for
    it, thus this IRQ will not get acked and will cause an IRQ flood which
    kills the system.  To be more specific, the 31.151 is an interrupt from the
    AHCI host controller.
    
    After some investigation, the reason why this issue is triggered is because
    the thaw_noirq() function does not restore the MSI/MSI-X settings across
    hibernation.
    
    The scenario is illustrated below:
    
      1. Before hibernation, IRQ 34 is the handler for the AHCI device, which
         is bound to CPU31.
    
      2. Hibernation starts, the AHCI device is put into low power state.
    
      3. All the nonboot CPUs are put offline, so IRQ 34 has to be migrated to
         the last alive one - CPU0.
    
      4. After the snapshot has been created, all the nonboot CPUs are brought
         up again; IRQ 34 remains bound to CPU0.
    
      5. AHCI devices are put into D0.
    
      6. The snapshot is written to the disk.
    
    The issue is triggered in step 6.  The AHCI interrupt should be delivered
    to CPU0, however it is delivered to the original CPU31 instead, which
    causes the "No irq handler" issue.
    
    Ying Huang has provided a clue that, in step 3 it is possible that writing
    to the register might not take effect as the PCI devices have been
    suspended.
    
    In step 3, the IRQ 34 affinity should be modified from CPU31 to CPU0, but
    in fact it is not.  In __pci_write_msi_msg(), if the device is already in
    low power state, the low level MSI message entry will not be updated but
    cached.  During the device restore process after a normal suspend/resume,
    pci_restore_msi_state() writes the cached MSI back to the hardware.
    
    But this is not the case for hibernation.  pci_restore_msi_state() is not
    currently called in pci_pm_thaw_noirq(), although pci_save_state() has
    saved the necessary PCI cached information in pci_pm_freeze_noirq().
    
    Restore the PCI status for the device during hibernation.  Otherwise the
    status might be lost across hibernation (for example, settings for MSI,
    MSI-X, ATS, ACS, IOV, etc.), which might cause problems during hibernation.
    
    Suggested-by: Ying Huang <ying.huang@intel.com>
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Rui Zhang <rui.zhang@intel.com>
    Cc: Ying Huang <ying.huang@intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a9f678e6b35a7bb32640b121a800e48e2cfff755
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Thu May 25 16:49:07 2017 +0800

    PCI/PM: Restore the status of PCI devices across hibernation
    
    commit e60514bd4485c0c7c5a7cf779b200ce0b95c70d6 upstream.
    
    Currently we saw a lot of "No irq handler" errors during hibernation, which
    caused the system hang finally:
    
      ata4.00: qc timeout (cmd 0xec)
      ata4.00: failed to IDENTIFY (I/O error, err_mask=0x4)
      ata4.00: revalidation failed (errno=-5)
      ata4: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
      do_IRQ: 31.151 No irq handler for vector
    
    According to above logs, there is an interrupt triggered and it is
    dispatched to CPU31 with a vector number 151, but there is no handler for
    it, thus this IRQ will not get acked and will cause an IRQ flood which
    kills the system.  To be more specific, the 31.151 is an interrupt from the
    AHCI host controller.
    
    After some investigation, the reason why this issue is triggered is because
    the thaw_noirq() function does not restore the MSI/MSI-X settings across
    hibernation.
    
    The scenario is illustrated below:
    
      1. Before hibernation, IRQ 34 is the handler for the AHCI device, which
         is bound to CPU31.
    
      2. Hibernation starts, the AHCI device is put into low power state.
    
      3. All the nonboot CPUs are put offline, so IRQ 34 has to be migrated to
         the last alive one - CPU0.
    
      4. After the snapshot has been created, all the nonboot CPUs are brought
         up again; IRQ 34 remains bound to CPU0.
    
      5. AHCI devices are put into D0.
    
      6. The snapshot is written to the disk.
    
    The issue is triggered in step 6.  The AHCI interrupt should be delivered
    to CPU0, however it is delivered to the original CPU31 instead, which
    causes the "No irq handler" issue.
    
    Ying Huang has provided a clue that, in step 3 it is possible that writing
    to the register might not take effect as the PCI devices have been
    suspended.
    
    In step 3, the IRQ 34 affinity should be modified from CPU31 to CPU0, but
    in fact it is not.  In __pci_write_msi_msg(), if the device is already in
    low power state, the low level MSI message entry will not be updated but
    cached.  During the device restore process after a normal suspend/resume,
    pci_restore_msi_state() writes the cached MSI back to the hardware.
    
    But this is not the case for hibernation.  pci_restore_msi_state() is not
    currently called in pci_pm_thaw_noirq(), although pci_save_state() has
    saved the necessary PCI cached information in pci_pm_freeze_noirq().
    
    Restore the PCI status for the device during hibernation.  Otherwise the
    status might be lost across hibernation (for example, settings for MSI,
    MSI-X, ATS, ACS, IOV, etc.), which might cause problems during hibernation.
    
    Suggested-by: Ying Huang <ying.huang@intel.com>
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Rui Zhang <rui.zhang@intel.com>
    Cc: Ying Huang <ying.huang@intel.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 5cbdfa657901a13a99480f393eb9ac5a56bd538c
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Thu May 25 16:49:07 2017 +0800

    PCI/PM: Restore the status of PCI devices across hibernation
    
    [ Upstream commit e60514bd4485c0c7c5a7cf779b200ce0b95c70d6 ]
    
    Currently we saw a lot of "No irq handler" errors during hibernation, which
    caused the system hang finally:
    
      ata4.00: qc timeout (cmd 0xec)
      ata4.00: failed to IDENTIFY (I/O error, err_mask=0x4)
      ata4.00: revalidation failed (errno=-5)
      ata4: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
      do_IRQ: 31.151 No irq handler for vector
    
    According to above logs, there is an interrupt triggered and it is
    dispatched to CPU31 with a vector number 151, but there is no handler for
    it, thus this IRQ will not get acked and will cause an IRQ flood which
    kills the system.  To be more specific, the 31.151 is an interrupt from the
    AHCI host controller.
    
    After some investigation, the reason why this issue is triggered is because
    the thaw_noirq() function does not restore the MSI/MSI-X settings across
    hibernation.
    
    The scenario is illustrated below:
    
      1. Before hibernation, IRQ 34 is the handler for the AHCI device, which
         is bound to CPU31.
    
      2. Hibernation starts, the AHCI device is put into low power state.
    
      3. All the nonboot CPUs are put offline, so IRQ 34 has to be migrated to
         the last alive one - CPU0.
    
      4. After the snapshot has been created, all the nonboot CPUs are brought
         up again; IRQ 34 remains bound to CPU0.
    
      5. AHCI devices are put into D0.
    
      6. The snapshot is written to the disk.
    
    The issue is triggered in step 6.  The AHCI interrupt should be delivered
    to CPU0, however it is delivered to the original CPU31 instead, which
    causes the "No irq handler" issue.
    
    Ying Huang has provided a clue that, in step 3 it is possible that writing
    to the register might not take effect as the PCI devices have been
    suspended.
    
    In step 3, the IRQ 34 affinity should be modified from CPU31 to CPU0, but
    in fact it is not.  In __pci_write_msi_msg(), if the device is already in
    low power state, the low level MSI message entry will not be updated but
    cached.  During the device restore process after a normal suspend/resume,
    pci_restore_msi_state() writes the cached MSI back to the hardware.
    
    But this is not the case for hibernation.  pci_restore_msi_state() is not
    currently called in pci_pm_thaw_noirq(), although pci_save_state() has
    saved the necessary PCI cached information in pci_pm_freeze_noirq().
    
    Restore the PCI status for the device during hibernation.  Otherwise the
    status might be lost across hibernation (for example, settings for MSI,
    MSI-X, ATS, ACS, IOV, etc.), which might cause problems during hibernation.
    
    Suggested-by: Ying Huang <ying.huang@intel.com>
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable@vger.kernel.org
    Cc: Len Brown <len.brown@intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Rui Zhang <rui.zhang@intel.com>
    Cc: Ying Huang <ying.huang@intel.com>
    
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit c1ead164ebc2795c4a6b9778e4c697be5f2297ec
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Thu May 25 16:49:07 2017 +0800

    PCI/PM: Restore the status of PCI devices across hibernation
    
    commit e60514bd4485c0c7c5a7cf779b200ce0b95c70d6 upstream.
    
    Currently we saw a lot of "No irq handler" errors during hibernation, which
    caused the system hang finally:
    
      ata4.00: qc timeout (cmd 0xec)
      ata4.00: failed to IDENTIFY (I/O error, err_mask=0x4)
      ata4.00: revalidation failed (errno=-5)
      ata4: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
      do_IRQ: 31.151 No irq handler for vector
    
    According to above logs, there is an interrupt triggered and it is
    dispatched to CPU31 with a vector number 151, but there is no handler for
    it, thus this IRQ will not get acked and will cause an IRQ flood which
    kills the system.  To be more specific, the 31.151 is an interrupt from the
    AHCI host controller.
    
    After some investigation, the reason why this issue is triggered is because
    the thaw_noirq() function does not restore the MSI/MSI-X settings across
    hibernation.
    
    The scenario is illustrated below:
    
      1. Before hibernation, IRQ 34 is the handler for the AHCI device, which
         is bound to CPU31.
    
      2. Hibernation starts, the AHCI device is put into low power state.
    
      3. All the nonboot CPUs are put offline, so IRQ 34 has to be migrated to
         the last alive one - CPU0.
    
      4. After the snapshot has been created, all the nonboot CPUs are brought
         up again; IRQ 34 remains bound to CPU0.
    
      5. AHCI devices are put into D0.
    
      6. The snapshot is written to the disk.
    
    The issue is triggered in step 6.  The AHCI interrupt should be delivered
    to CPU0, however it is delivered to the original CPU31 instead, which
    causes the "No irq handler" issue.
    
    Ying Huang has provided a clue that, in step 3 it is possible that writing
    to the register might not take effect as the PCI devices have been
    suspended.
    
    In step 3, the IRQ 34 affinity should be modified from CPU31 to CPU0, but
    in fact it is not.  In __pci_write_msi_msg(), if the device is already in
    low power state, the low level MSI message entry will not be updated but
    cached.  During the device restore process after a normal suspend/resume,
    pci_restore_msi_state() writes the cached MSI back to the hardware.
    
    But this is not the case for hibernation.  pci_restore_msi_state() is not
    currently called in pci_pm_thaw_noirq(), although pci_save_state() has
    saved the necessary PCI cached information in pci_pm_freeze_noirq().
    
    Restore the PCI status for the device during hibernation.  Otherwise the
    status might be lost across hibernation (for example, settings for MSI,
    MSI-X, ATS, ACS, IOV, etc.), which might cause problems during hibernation.
    
    Suggested-by: Ying Huang <ying.huang@intel.com>
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Rui Zhang <rui.zhang@intel.com>
    Cc: Ying Huang <ying.huang@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33780512d9fe64872b3c46596d2c6d812be98fc9
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Thu May 25 16:49:07 2017 +0800

    PCI/PM: Restore the status of PCI devices across hibernation
    
    commit e60514bd4485c0c7c5a7cf779b200ce0b95c70d6 upstream.
    
    Currently we saw a lot of "No irq handler" errors during hibernation, which
    caused the system hang finally:
    
      ata4.00: qc timeout (cmd 0xec)
      ata4.00: failed to IDENTIFY (I/O error, err_mask=0x4)
      ata4.00: revalidation failed (errno=-5)
      ata4: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
      do_IRQ: 31.151 No irq handler for vector
    
    According to above logs, there is an interrupt triggered and it is
    dispatched to CPU31 with a vector number 151, but there is no handler for
    it, thus this IRQ will not get acked and will cause an IRQ flood which
    kills the system.  To be more specific, the 31.151 is an interrupt from the
    AHCI host controller.
    
    After some investigation, the reason why this issue is triggered is because
    the thaw_noirq() function does not restore the MSI/MSI-X settings across
    hibernation.
    
    The scenario is illustrated below:
    
      1. Before hibernation, IRQ 34 is the handler for the AHCI device, which
         is bound to CPU31.
    
      2. Hibernation starts, the AHCI device is put into low power state.
    
      3. All the nonboot CPUs are put offline, so IRQ 34 has to be migrated to
         the last alive one - CPU0.
    
      4. After the snapshot has been created, all the nonboot CPUs are brought
         up again; IRQ 34 remains bound to CPU0.
    
      5. AHCI devices are put into D0.
    
      6. The snapshot is written to the disk.
    
    The issue is triggered in step 6.  The AHCI interrupt should be delivered
    to CPU0, however it is delivered to the original CPU31 instead, which
    causes the "No irq handler" issue.
    
    Ying Huang has provided a clue that, in step 3 it is possible that writing
    to the register might not take effect as the PCI devices have been
    suspended.
    
    In step 3, the IRQ 34 affinity should be modified from CPU31 to CPU0, but
    in fact it is not.  In __pci_write_msi_msg(), if the device is already in
    low power state, the low level MSI message entry will not be updated but
    cached.  During the device restore process after a normal suspend/resume,
    pci_restore_msi_state() writes the cached MSI back to the hardware.
    
    But this is not the case for hibernation.  pci_restore_msi_state() is not
    currently called in pci_pm_thaw_noirq(), although pci_save_state() has
    saved the necessary PCI cached information in pci_pm_freeze_noirq().
    
    Restore the PCI status for the device during hibernation.  Otherwise the
    status might be lost across hibernation (for example, settings for MSI,
    MSI-X, ATS, ACS, IOV, etc.), which might cause problems during hibernation.
    
    Suggested-by: Ying Huang <ying.huang@intel.com>
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Rui Zhang <rui.zhang@intel.com>
    Cc: Ying Huang <ying.huang@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48a72b55502c668209a592aa71dd815da24aace0
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Thu May 25 16:49:07 2017 +0800

    PCI/PM: Restore the status of PCI devices across hibernation
    
    commit e60514bd4485c0c7c5a7cf779b200ce0b95c70d6 upstream.
    
    Currently we saw a lot of "No irq handler" errors during hibernation, which
    caused the system hang finally:
    
      ata4.00: qc timeout (cmd 0xec)
      ata4.00: failed to IDENTIFY (I/O error, err_mask=0x4)
      ata4.00: revalidation failed (errno=-5)
      ata4: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
      do_IRQ: 31.151 No irq handler for vector
    
    According to above logs, there is an interrupt triggered and it is
    dispatched to CPU31 with a vector number 151, but there is no handler for
    it, thus this IRQ will not get acked and will cause an IRQ flood which
    kills the system.  To be more specific, the 31.151 is an interrupt from the
    AHCI host controller.
    
    After some investigation, the reason why this issue is triggered is because
    the thaw_noirq() function does not restore the MSI/MSI-X settings across
    hibernation.
    
    The scenario is illustrated below:
    
      1. Before hibernation, IRQ 34 is the handler for the AHCI device, which
         is bound to CPU31.
    
      2. Hibernation starts, the AHCI device is put into low power state.
    
      3. All the nonboot CPUs are put offline, so IRQ 34 has to be migrated to
         the last alive one - CPU0.
    
      4. After the snapshot has been created, all the nonboot CPUs are brought
         up again; IRQ 34 remains bound to CPU0.
    
      5. AHCI devices are put into D0.
    
      6. The snapshot is written to the disk.
    
    The issue is triggered in step 6.  The AHCI interrupt should be delivered
    to CPU0, however it is delivered to the original CPU31 instead, which
    causes the "No irq handler" issue.
    
    Ying Huang has provided a clue that, in step 3 it is possible that writing
    to the register might not take effect as the PCI devices have been
    suspended.
    
    In step 3, the IRQ 34 affinity should be modified from CPU31 to CPU0, but
    in fact it is not.  In __pci_write_msi_msg(), if the device is already in
    low power state, the low level MSI message entry will not be updated but
    cached.  During the device restore process after a normal suspend/resume,
    pci_restore_msi_state() writes the cached MSI back to the hardware.
    
    But this is not the case for hibernation.  pci_restore_msi_state() is not
    currently called in pci_pm_thaw_noirq(), although pci_save_state() has
    saved the necessary PCI cached information in pci_pm_freeze_noirq().
    
    Restore the PCI status for the device during hibernation.  Otherwise the
    status might be lost across hibernation (for example, settings for MSI,
    MSI-X, ATS, ACS, IOV, etc.), which might cause problems during hibernation.
    
    Suggested-by: Ying Huang <ying.huang@intel.com>
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Rui Zhang <rui.zhang@intel.com>
    Cc: Ying Huang <ying.huang@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2d019a28eee6059d9a36e03bad7d6b75659cbe8
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Thu May 25 16:49:07 2017 +0800

    PCI/PM: Restore the status of PCI devices across hibernation
    
    commit e60514bd4485c0c7c5a7cf779b200ce0b95c70d6 upstream.
    
    Currently we saw a lot of "No irq handler" errors during hibernation, which
    caused the system hang finally:
    
      ata4.00: qc timeout (cmd 0xec)
      ata4.00: failed to IDENTIFY (I/O error, err_mask=0x4)
      ata4.00: revalidation failed (errno=-5)
      ata4: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
      do_IRQ: 31.151 No irq handler for vector
    
    According to above logs, there is an interrupt triggered and it is
    dispatched to CPU31 with a vector number 151, but there is no handler for
    it, thus this IRQ will not get acked and will cause an IRQ flood which
    kills the system.  To be more specific, the 31.151 is an interrupt from the
    AHCI host controller.
    
    After some investigation, the reason why this issue is triggered is because
    the thaw_noirq() function does not restore the MSI/MSI-X settings across
    hibernation.
    
    The scenario is illustrated below:
    
      1. Before hibernation, IRQ 34 is the handler for the AHCI device, which
         is bound to CPU31.
    
      2. Hibernation starts, the AHCI device is put into low power state.
    
      3. All the nonboot CPUs are put offline, so IRQ 34 has to be migrated to
         the last alive one - CPU0.
    
      4. After the snapshot has been created, all the nonboot CPUs are brought
         up again; IRQ 34 remains bound to CPU0.
    
      5. AHCI devices are put into D0.
    
      6. The snapshot is written to the disk.
    
    The issue is triggered in step 6.  The AHCI interrupt should be delivered
    to CPU0, however it is delivered to the original CPU31 instead, which
    causes the "No irq handler" issue.
    
    Ying Huang has provided a clue that, in step 3 it is possible that writing
    to the register might not take effect as the PCI devices have been
    suspended.
    
    In step 3, the IRQ 34 affinity should be modified from CPU31 to CPU0, but
    in fact it is not.  In __pci_write_msi_msg(), if the device is already in
    low power state, the low level MSI message entry will not be updated but
    cached.  During the device restore process after a normal suspend/resume,
    pci_restore_msi_state() writes the cached MSI back to the hardware.
    
    But this is not the case for hibernation.  pci_restore_msi_state() is not
    currently called in pci_pm_thaw_noirq(), although pci_save_state() has
    saved the necessary PCI cached information in pci_pm_freeze_noirq().
    
    Restore the PCI status for the device during hibernation.  Otherwise the
    status might be lost across hibernation (for example, settings for MSI,
    MSI-X, ATS, ACS, IOV, etc.), which might cause problems during hibernation.
    
    Suggested-by: Ying Huang <ying.huang@intel.com>
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Rui Zhang <rui.zhang@intel.com>
    Cc: Ying Huang <ying.huang@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a814231ae3d4f248a8ecb668a072a1da471c656
Author: Petr Mladek <pmladek@suse.com>
Date:   Fri Jul 14 14:51:13 2017 +0200

    printk/console: Enhance the check for consoles using init memory
    
    printk_late_init() is responsible for disabling boot consoles that
    use init memory. It checks the address of struct console for this.
    
    But this is not enough. For example, there are several early
    consoles that have write() method in the init section and
    struct console in the normal section. They are not disabled
    and could cause fancy and hard to debug system states.
    
    It is even more complicated by the macros EARLYCON_DECLARE() and
    OF_EARLYCON_DECLARE() where various struct members are set at
    runtime by the provided setup() function.
    
    I have tried to reproduce this problem and forced the classic uart
    early console to stay using keep_bootcon parameter. In particular
    I used earlycon=uart,io,0x3f8 keep_bootcon console=ttyS0,115200.
    The system did not boot:
    
    [    1.570496] PM: Image not found (code -22)
    [    1.570496] PM: Image not found (code -22)
    [    1.571886] PM: Hibernation image not present or could not be loaded.
    [    1.571886] PM: Hibernation image not present or could not be loaded.
    [    1.576407] Freeing unused kernel memory: 2528K
    [    1.577244] kernel tried to execute NX-protected page - exploit attempt? (uid: 0)
    
    The double lines are caused by having both early uart console and
    ttyS0 console enabled at the same time. The early console stopped
    working when the init memory was freed. Fortunately, the invalid
    call was caught by the NX-protexted page check and did not cause
    any silent fancy problems.
    
    This patch adds a check for many other addresses stored in
    struct console. It omits setup() and match() that are used
    only when the console is registered. Therefore they have
    already been used at this point and there is no reason
    to use them again.
    
    Link: http://lkml.kernel.org/r/1500036673-7122-3-git-send-email-pmladek@suse.com
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Matt Redfearn <matt.redfearn@imgtec.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jiri Slaby <jslaby@suse.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Alan Cox <gnomes@lxorguk.ukuu.org.uk>
    Cc: "Fabio M. Di Nitto" <fdinitto@redhat.com>
    Cc: linux-serial@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Signed-off-by: Petr Mladek <pmladek@suse.com>

commit e60514bd4485c0c7c5a7cf779b200ce0b95c70d6
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Thu May 25 16:49:07 2017 +0800

    PCI/PM: Restore the status of PCI devices across hibernation
    
    Currently we saw a lot of "No irq handler" errors during hibernation, which
    caused the system hang finally:
    
      ata4.00: qc timeout (cmd 0xec)
      ata4.00: failed to IDENTIFY (I/O error, err_mask=0x4)
      ata4.00: revalidation failed (errno=-5)
      ata4: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
      do_IRQ: 31.151 No irq handler for vector
    
    According to above logs, there is an interrupt triggered and it is
    dispatched to CPU31 with a vector number 151, but there is no handler for
    it, thus this IRQ will not get acked and will cause an IRQ flood which
    kills the system.  To be more specific, the 31.151 is an interrupt from the
    AHCI host controller.
    
    After some investigation, the reason why this issue is triggered is because
    the thaw_noirq() function does not restore the MSI/MSI-X settings across
    hibernation.
    
    The scenario is illustrated below:
    
      1. Before hibernation, IRQ 34 is the handler for the AHCI device, which
         is bound to CPU31.
    
      2. Hibernation starts, the AHCI device is put into low power state.
    
      3. All the nonboot CPUs are put offline, so IRQ 34 has to be migrated to
         the last alive one - CPU0.
    
      4. After the snapshot has been created, all the nonboot CPUs are brought
         up again; IRQ 34 remains bound to CPU0.
    
      5. AHCI devices are put into D0.
    
      6. The snapshot is written to the disk.
    
    The issue is triggered in step 6.  The AHCI interrupt should be delivered
    to CPU0, however it is delivered to the original CPU31 instead, which
    causes the "No irq handler" issue.
    
    Ying Huang has provided a clue that, in step 3 it is possible that writing
    to the register might not take effect as the PCI devices have been
    suspended.
    
    In step 3, the IRQ 34 affinity should be modified from CPU31 to CPU0, but
    in fact it is not.  In __pci_write_msi_msg(), if the device is already in
    low power state, the low level MSI message entry will not be updated but
    cached.  During the device restore process after a normal suspend/resume,
    pci_restore_msi_state() writes the cached MSI back to the hardware.
    
    But this is not the case for hibernation.  pci_restore_msi_state() is not
    currently called in pci_pm_thaw_noirq(), although pci_save_state() has
    saved the necessary PCI cached information in pci_pm_freeze_noirq().
    
    Restore the PCI status for the device during hibernation.  Otherwise the
    status might be lost across hibernation (for example, settings for MSI,
    MSI-X, ATS, ACS, IOV, etc.), which might cause problems during hibernation.
    
    Suggested-by: Ying Huang <ying.huang@intel.com>
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    [bhelgaas: changelog]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: stable@vger.kernel.org
    Cc: Len Brown <len.brown@intel.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Rui Zhang <rui.zhang@intel.com>
    Cc: Ying Huang <ying.huang@intel.com>

commit 254a41c0ba0573fa23272945d3fbe39efcc5d07d
Author: AKASHI Takahiro <takahiro.akashi@linaro.org>
Date:   Mon Apr 3 11:24:35 2017 +0900

    arm64: hibernate: preserve kdump image around hibernation
    
    Since arch_kexec_protect_crashkres() removes a mapping for crash dump
    kernel image, the loaded data won't be preserved around hibernation.
    
    In this patch, helper functions, crash_prepare_suspend()/
    crash_post_resume(), are additionally called before/after hibernation so
    that the relevant memory segments will be mapped again and preserved just
    as the others are.
    
    In addition, to minimize the size of hibernation image, crash_is_nosave()
    is added to pfn_is_nosave() in order to recognize only the pages that hold
    loaded crash dump kernel image as saveable. Hibernation excludes any pages
    that are marked as Reserved and yet "nosave."
    
    Signed-off-by: AKASHI Takahiro <takahiro.akashi@linaro.org>
    Reviewed-by: James Morse <james.morse@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

commit 69218e47994da614e7af600bf06887750ab6657a
Author: Thomas Garnier <thgarnie@google.com>
Date:   Tue Mar 14 10:05:07 2017 -0700

    x86: Remap GDT tables in the fixmap section
    
    Each processor holds a GDT in its per-cpu structure. The sgdt
    instruction gives the base address of the current GDT. This address can
    be used to bypass KASLR memory randomization. With another bug, an
    attacker could target other per-cpu structures or deduce the base of
    the main memory section (PAGE_OFFSET).
    
    This patch relocates the GDT table for each processor inside the
    fixmap section. The space is reserved based on number of supported
    processors.
    
    For consistency, the remapping is done by default on 32 and 64-bit.
    
    Each processor switches to its remapped GDT at the end of
    initialization. For hibernation, the main processor returns with the
    original GDT and switches back to the remapping at completion.
    
    This patch was tested on both architectures. Hibernation and KVM were
    both tested specially for their usage of the GDT.
    
    Thanks to Boris Ostrovsky <boris.ostrovsky@oracle.com> for testing and
    recommending changes for Xen support.
    
    Signed-off-by: Thomas Garnier <thgarnie@google.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Jiri Kosina <jikos@kernel.org>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Len Brown <len.brown@intel.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Lorenzo Stoakes <lstoakes@gmail.com>
    Cc: Luis R . Rodriguez <mcgrof@kernel.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Rafael J . Wysocki <rjw@rjwysocki.net>
    Cc: Rusty Russell <rusty@rustcorp.com.au>
    Cc: Stanislaw Gruszka <sgruszka@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: kasan-dev@googlegroups.com
    Cc: kernel-hardening@lists.openwall.com
    Cc: kvm@vger.kernel.org
    Cc: lguest@lists.ozlabs.org
    Cc: linux-doc@vger.kernel.org
    Cc: linux-efi@vger.kernel.org
    Cc: linux-mm@kvack.org
    Cc: linux-pm@vger.kernel.org
    Cc: xen-devel@lists.xenproject.org
    Cc: zijun_hu <zijun_hu@htc.com>
    Link: http://lkml.kernel.org/r/20170314170508.100882-2-thgarnie@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 1fe492ce6482b77807b25d29690a48c46456beee
Author: James Morse <james.morse@arm.com>
Date:   Wed Apr 27 17:47:13 2016 +0100

    arm64: hibernate: Refuse to hibernate if the boot cpu is offline
    
    Hibernation represents a system state save/restore through
    a system reboot; this implies that the logical cpus carrying
    out hibernation/thawing must be the same, so that the context
    saved in the snapshot image on hibernation is consistent with
    the state of the system on resume. If resume from hibernation
    is driven through kernel command line parameter, the cpu responsible
    for thawing the system will be whatever CPU firmware boots the system
    on upon cold-boot (ie logical cpu 0); this means that in order to
    keep system context consistent between the hibernate snapshot image
    and system state on kernel resume from hibernate, logical cpu 0 must
    be online on hibernation and must be the logical cpu that creates
    the snapshot image.
    
    This patch adds a PM notifier that enforces logical cpu 0 is online
    when the hibernation is started (and prevents hibernation if it is
    not), which is sufficient to guarantee it will be the one creating
    the snapshot image therefore providing the resume cpu a consistent
    snapshot of the system to resume to.
    
    Signed-off-by: James Morse <james.morse@arm.com>
    Acked-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit e3824e4281b8e31d55c08a06b20abb4f677a0baf
Author: Russell Currey <ruscur@russell.cc>
Date:   Wed Mar 2 17:12:45 2016 +1100

    powerpc/swsusp: Only use tlbie in POWER4 mode
    
    If CONFIG_HIBERNATION and CONFIG_PPC_BOOK3S_64 are set, code in
    arch/powerpc/kernel/swsusp_amd64.S which uses the tlbia macro is enabled.
    tlbia in turn uses tlbie, an instruction which takes more than one
    operand in newer versions of POWER.  As such, the kernel fails to build
    due to the assembler complaining about missing operands.
    
    This can be worked around by assembling the instruction as in POWER4.
    This fixes the build breakage caused by enabling CONFIG_HIBERNATION.
    Hibernation is currently only tested on G5 PowerMacs, which should be
    unaffected by this change.  For other platforms it may now build,
    whether or not it works is a different story.
    
    Signed-off-by: Russell Currey <ruscur@russell.cc>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

commit 607272f1e72f8e3ea0ece948d12b97ecc8b8f86c
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:16 2015 -0400

    drm/radeon: SDMA fix hibernation (CI GPU family).
    
    commit 2ba8d1bb8f6b589037f7db1f01144fc80750e8f7 upstream.
    
    In order for hibernation to reliably work we need to properly turn
    off the SDMA block, sadly after numerous attemps i haven't not found
    proper sequence for clean and full shutdown. So simply reset both
    SDMA block, this makes hibernation works reliably on sea island GPU
    family (CI)
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 65d1e93200ae8e4d35abd2848a448884bfd52ecd
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:15 2015 -0400

    drm/radeon: compute ring fix hibernation (CI GPU family) v2.
    
    commit 161569deaa03cf3c00ed63352006193f250b0648 upstream.
    
    In order for hibernation to reliably work we need to cleanup more
    thoroughly the compute ring. Hibernation is different from suspend
    resume as when we resume from hibernation the hardware is first
    fully initialize by regular kernel then freeze callback happens
    (which correspond to a suspend inside the radeon kernel driver)
    and turn off each of the block. It turns out we were not cleanly
    shutting down the compute ring. This patch fix that.
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Changed since v1:
      - Factor the ring stop logic into a function taking ring as arg.
    
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 9bd2d54d351bd645bb033d82ff2efc07a1a202dc
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:16 2015 -0400

    drm/radeon: SDMA fix hibernation (CI GPU family).
    
    commit 2ba8d1bb8f6b589037f7db1f01144fc80750e8f7 upstream.
    
    In order for hibernation to reliably work we need to properly turn
    off the SDMA block, sadly after numerous attemps i haven't not found
    proper sequence for clean and full shutdown. So simply reset both
    SDMA block, this makes hibernation works reliably on sea island GPU
    family (CI)
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6fabd533d1ff1df7796a2e5211cada6aa832c45c
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:15 2015 -0400

    drm/radeon: compute ring fix hibernation (CI GPU family) v2.
    
    commit 161569deaa03cf3c00ed63352006193f250b0648 upstream.
    
    In order for hibernation to reliably work we need to cleanup more
    thoroughly the compute ring. Hibernation is different from suspend
    resume as when we resume from hibernation the hardware is first
    fully initialize by regular kernel then freeze callback happens
    (which correspond to a suspend inside the radeon kernel driver)
    and turn off each of the block. It turns out we were not cleanly
    shutting down the compute ring. This patch fix that.
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Changed since v1:
      - Factor the ring stop logic into a function taking ring as arg.
    
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b49262b642511a16699cc63cf2a716739f0c43f
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:16 2015 -0400

    drm/radeon: SDMA fix hibernation (CI GPU family).
    
    commit 2ba8d1bb8f6b589037f7db1f01144fc80750e8f7 upstream.
    
    In order for hibernation to reliably work we need to properly turn
    off the SDMA block, sadly after numerous attemps i haven't not found
    proper sequence for clean and full shutdown. So simply reset both
    SDMA block, this makes hibernation works reliably on sea island GPU
    family (CI)
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e25083389dcf06d65d56a64c1eca4c2a79e53556
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:15 2015 -0400

    drm/radeon: compute ring fix hibernation (CI GPU family) v2.
    
    commit 161569deaa03cf3c00ed63352006193f250b0648 upstream.
    
    In order for hibernation to reliably work we need to cleanup more
    thoroughly the compute ring. Hibernation is different from suspend
    resume as when we resume from hibernation the hardware is first
    fully initialize by regular kernel then freeze callback happens
    (which correspond to a suspend inside the radeon kernel driver)
    and turn off each of the block. It turns out we were not cleanly
    shutting down the compute ring. This patch fix that.
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Changed since v1:
      - Factor the ring stop logic into a function taking ring as arg.
    
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 196a868e33d0c4d6ed377e126122e952942dd8c7
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:16 2015 -0400

    drm/radeon: SDMA fix hibernation (CI GPU family).
    
    commit 2ba8d1bb8f6b589037f7db1f01144fc80750e8f7 upstream.
    
    In order for hibernation to reliably work we need to properly turn
    off the SDMA block, sadly after numerous attemps i haven't not found
    proper sequence for clean and full shutdown. So simply reset both
    SDMA block, this makes hibernation works reliably on sea island GPU
    family (CI)
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 15a518e1d32a1ddc2647ec5f9aa793282f3fa1d5
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:15 2015 -0400

    drm/radeon: compute ring fix hibernation (CI GPU family) v2.
    
    commit 161569deaa03cf3c00ed63352006193f250b0648 upstream.
    
    In order for hibernation to reliably work we need to cleanup more
    thoroughly the compute ring. Hibernation is different from suspend
    resume as when we resume from hibernation the hardware is first
    fully initialize by regular kernel then freeze callback happens
    (which correspond to a suspend inside the radeon kernel driver)
    and turn off each of the block. It turns out we were not cleanly
    shutting down the compute ring. This patch fix that.
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Changed since v1:
      - Factor the ring stop logic into a function taking ring as arg.
    
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 883a2dfd6f13eca5aab30f0bcc9a6f1e2f983b1e
Merge: 331c5841ddbb 8076ca480f40
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 8 17:34:51 2015 -0700

    Merge tag 'pm+acpi-4.2-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull power management and ACPI updates from Rafael Wysocki:
     "These are fixes on top of the previous PM+ACPI pull requests
      (including one fix for a 4.1 regression) and two commits adding
      _CLS-based device enumeration support to the ACPI core and the ATA
      subsystem that waited for the latest ACPICA changes to be merged.
    
      Specifics:
    
       - Fix for an ACPI resources management regression introduced during
         the 4.1 cycle (that unfortunately went into -stable) effectively
         reverting the bad commit along with the recent fixups on top of it
         and using an alternative approach to address the underlying issue
         (Rafael J Wysocki).
    
       - Fix for a memory leak and an incorrect return value in an error
         code path in the ACPI LPSS (Low-Power Subsystem) driver (Rafael J
         Wysocki).
    
       - Fix for a leftover dangling pointer in an error code path in the
         new wakeup IRQ support code (Rafael J Wysocki).
    
       - Fix to prevent infinite loops (due to errors in other places) from
         happening in the core generic PM domains support code (Geert
         Uytterhoeven).
    
       - Hibernation documentation update/clarification (Uwe Geuder).
    
       - Support for _CLS-based device enumeration in the ACPI core and in
         the ATA subsystem (Suravee Suthikulpanit)"
    
    * tag 'pm+acpi-4.2-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:
      PM / wakeirq: Avoid setting power.wakeirq too hastily
      ata: ahci_platform: Add ACPI _CLS matching
      ACPI / scan: Add support for ACPI _CLS device matching
      PM / hibernate: clarify resume documentation
      PM / Domains: Avoid infinite loops in attach/detach code
      ACPI / LPSS: Fix up acpi_lpss_create_device()
      ACPI / PNP: Reserve ACPI resources at the fs_initcall_sync stage

commit 4a6adec5806200e6930ab433f588ab776839cdc6
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:16 2015 -0400

    drm/radeon: SDMA fix hibernation (CI GPU family).
    
    [ Upstream commit 2ba8d1bb8f6b589037f7db1f01144fc80750e8f7 ]
    
    In order for hibernation to reliably work we need to properly turn
    off the SDMA block, sadly after numerous attemps i haven't not found
    proper sequence for clean and full shutdown. So simply reset both
    SDMA block, this makes hibernation works reliably on sea island GPU
    family (CI)
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit bce1845b11c968e5755dc0877fb765751f5870e3
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:15 2015 -0400

    drm/radeon: compute ring fix hibernation (CI GPU family) v2.
    
    [ Upstream commit 161569deaa03cf3c00ed63352006193f250b0648 ]
    
    In order for hibernation to reliably work we need to cleanup more
    thoroughly the compute ring. Hibernation is different from suspend
    resume as when we resume from hibernation the hardware is first
    fully initialize by regular kernel then freeze callback happens
    (which correspond to a suspend inside the radeon kernel driver)
    and turn off each of the block. It turns out we were not cleanly
    shutting down the compute ring. This patch fix that.
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Changed since v1:
      - Factor the ring stop logic into a function taking ring as arg.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 2ba8d1bb8f6b589037f7db1f01144fc80750e8f7
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:16 2015 -0400

    drm/radeon: SDMA fix hibernation (CI GPU family).
    
    In order for hibernation to reliably work we need to properly turn
    off the SDMA block, sadly after numerous attemps i haven't not found
    proper sequence for clean and full shutdown. So simply reset both
    SDMA block, this makes hibernation works reliably on sea island GPU
    family (CI)
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 161569deaa03cf3c00ed63352006193f250b0648
Author: Jérôme Glisse <jglisse@redhat.com>
Date:   Fri Jun 19 10:32:15 2015 -0400

    drm/radeon: compute ring fix hibernation (CI GPU family) v2.
    
    In order for hibernation to reliably work we need to cleanup more
    thoroughly the compute ring. Hibernation is different from suspend
    resume as when we resume from hibernation the hardware is first
    fully initialize by regular kernel then freeze callback happens
    (which correspond to a suspend inside the radeon kernel driver)
    and turn off each of the block. It turns out we were not cleanly
    shutting down the compute ring. This patch fix that.
    
    Hibernation and suspend to ram were tested (several times) on :
    Bonaire
    Hawaii
    Mullins
    Kaveri
    Kabini
    
    Changed since v1:
      - Factor the ring stop logic into a function taking ring as arg.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 8d9095c667a185c8e2449632343a2b6c65ae58f1
Merge: 1a370f4cd95e 69f0fb2a592f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 13 14:53:03 2015 -0700

    Merge tag 'mmc-v4.1' of git://git.linaro.org/people/ulf.hansson/mmc
    
    Pull MMC updates from Ulf Hansson:
     "MMC core:
       - Add support for marking HPI as broken through devicetree
       - Enable runtime PM management of host devices
       - Remove the ->enable|disable() callbacks
       - Restructure code and cleanups
       - Refreshed some of the MMC sections in MAINTAINERS
    
      MMC host:
       - dw_mmc: HS400 mode support
       - dw_mmc: Add the cmd11 timer to detect a timeout
       - dw_mmc: Endian agnostic IO accessors
       - dw_mmc: Bugfixes
       - sh_mmcif: Add exclusion between cmd and interrupt
       - omap_hsmmc: Hibernation support
       - omap_hsmmc: Rework and simplify cover/card detect
       - omap_hsmmc: Stop using ->enable|disable() callbacks
       - atmel-mci: Endian agnostic IO
       - sunxi: Enable MMC_CAP_SDIO_IRQ
       - sdhci-st: Add support for the stih407 family silicon
       - sdhci-st: UHS card support in SDR104 mode
       - sdhci-st: HS200 mode support
       - sdhci-esdhc-imx: Use common mmc DT parser
       - sdhci-of-arasan: Use common mmc DT parser
       - sdhci-iproc: Add new driver for Broadcom IPROC SDHCI controller
       - sdhci-tegra: Convert to GPIO descriptors
       - sdhci-tegra: Optmize write_w path for tegra114 and later
       - sdhci-sirf: Update tuning procedure
       - sdhci: Fix card presence logic
       - sdhci: Cleanups and consolidation"
    
    * tag 'mmc-v4.1' of git://git.linaro.org/people/ulf.hansson/mmc: (79 commits)
      mmc: sdhci-st: Update ST SDHCI binding documentation.
      mmc: sdhci-st: Update the quirks for this controller.
      mmc: sdhci-st: Add sdhci_st_set_uhs_signaling function.
      mmc: sdhci-st: Add st_mmcss_cconfig function to configure mmcss glue registers.
      mmc: sdhci-st: Add delay management functions for top registers (eMMC).
      mmc: sdhci-st: Add support for de-asserting reset signal and top regs resource
      mmc: sdhci-st: Add macros for register offsets and bitfields for mmcss glue regs
      mmc: sdhci-esdhc-imx: Call mmc_of_parse()
      mmc: dw_mmc: Add locking around cmd11 timer
      mmc: dw_mmc: Add a return in an unexpected cmd11 timeout
      mmc: dw_mmc: Increase cmd11 timeout to 500ms
      mmc: dw_mmc: fix fifo ordering in big endian
      mmc: dw_mmc: change idmac descriptor files to __le32
      mmc: dw_mmc: make IO accessors endian agnostic
      mmc: core: Convert the error field in struct mmc_command|data into an int
      mmc: sdhci-of-arasan: Call OF parsing for MMC
      mmc: sdhci-pci: fix 64 BIT DMA quirks for rtsx
      mmc: Add support for marking hpi as broken through devicetree
      mmc: sdhci-tegra: convert to use GPIO descriptors
      mmc: omap_hsmmc: use generic slot-gpio isr to manage card detect pin
      ...

commit 92a578b064d0227a3a7fbbdb9e29dbab7f8d400e
Merge: c75059c46293 e3d857e1ae78
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Dec 10 21:17:00 2014 -0800

    Merge tag 'pm+acpi-3.19-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI and power management updates from Rafael Wysocki:
     "This time we have some more new material than we used to have during
      the last couple of development cycles.
    
      The most important part of it to me is the introduction of a unified
      interface for accessing device properties provided by platform
      firmware.  It works with Device Trees and ACPI in a uniform way and
      drivers using it need not worry about where the properties come from
      as long as the platform firmware (either DT or ACPI) makes them
      available.  It covers both devices and "bare" device node objects
      without struct device representation as that turns out to be necessary
      in some cases.  This has been in the works for quite a few months (and
      development cycles) and has been approved by all of the relevant
      maintainers.
    
      On top of that, some drivers are switched over to the new interface
      (at25, leds-gpio, gpio_keys_polled) and some additional changes are
      made to the core GPIO subsystem to allow device drivers to manipulate
      GPIOs in the "canonical" way on platforms that provide GPIO
      information in their ACPI tables, but don't assign names to GPIO lines
      (in which case the driver needs to do that on the basis of what it
      knows about the device in question).  That also has been approved by
      the GPIO core maintainers and the rfkill driver is now going to use
      it.
    
      Second is support for hardware P-states in the intel_pstate driver.
      It uses CPUID to detect whether or not the feature is supported by the
      processor in which case it will be enabled by default.  However, it
      can be disabled entirely from the kernel command line if necessary.
    
      Next is support for a platform firmware interface based on ACPI
      operation regions used by the PMIC (Power Management Integrated
      Circuit) chips on the Intel Baytrail-T and Baytrail-T-CR platforms.
      That interface is used for manipulating power resources and for
      thermal management: sensor temperature reporting, trip point setting
      and so on.
    
      Also the ACPI core is now going to support the _DEP configuration
      information in a limited way.  Basically, _DEP it supposed to reflect
      off-the-hierarchy dependencies between devices which may be very
      indirect, like when AML for one device accesses locations in an
      operation region handled by another device's driver (usually, the
      device depended on this way is a serial bus or GPIO controller).  The
      support added this time is sufficient to make the ACPI battery driver
      work on Asus T100A, but it is general enough to be able to cover some
      other use cases in the future.
    
      Finally, we have a new cpufreq driver for the Loongson1B processor.
    
      In addition to the above, there are fixes and cleanups all over the
      place as usual and a traditional ACPICA update to a recent upstream
      release.
    
      As far as the fixes go, the ACPI LPSS (Low-power Subsystem) driver for
      Intel platforms should be able to handle power management of the DMA
      engine correctly, the cpufreq-dt driver should interact with the
      thermal subsystem in a better way and the ACPI backlight driver should
      handle some more corner cases, among other things.
    
      On top of the ACPICA update there are fixes for race conditions in the
      ACPICA's interrupt handling code which might lead to some random and
      strange looking failures on some systems.
    
      In the cleanups department the most visible part is the series of
      commits targeted at getting rid of the CONFIG_PM_RUNTIME configuration
      option.  That was triggered by a discussion regarding the generic
      power domains code during which we realized that trying to support
      certain combinations of PM config options was painful and not really
      worth it, because nobody would use them in production anyway.  For
      this reason, we decided to make CONFIG_PM_SLEEP select
      CONFIG_PM_RUNTIME and that lead to the conclusion that the latter
      became redundant and CONFIG_PM could be used instead of it.  The
      material here makes that replacement in a major part of the tree, but
      there will be at least one more batch of that in the second part of
      the merge window.
    
      Specifics:
    
       - Support for retrieving device properties information from ACPI _DSD
         device configuration objects and a unified device properties
         interface for device drivers (and subsystems) on top of that.  As
         stated above, this works with Device Trees and ACPI and allows
         device drivers to be written in a platform firmware (DT or ACPI)
         agnostic way.  The at25, leds-gpio and gpio_keys_polled drivers are
         now going to use this new interface and the GPIO subsystem is
         additionally modified to allow device drivers to assign names to
         GPIO resources returned by ACPI _CRS objects (in case _DSD is not
         present or does not provide the expected data).  The changes in
         this set are mostly from Mika Westerberg, Rafael J Wysocki, Aaron
         Lu, and Darren Hart with some fixes from others (Fabio Estevam,
         Geert Uytterhoeven).
    
       - Support for Hardware Managed Performance States (HWP) as described
         in Volume 3, section 14.4, of the Intel SDM in the intel_pstate
         driver.  CPUID is used to detect whether or not the feature is
         supported by the processor.  If supported, it will be enabled
         automatically unless the intel_pstate=no_hwp switch is present in
         the kernel command line.  From Dirk Brandewie.
    
       - New Intel Broadwell-H ID for intel_pstate (Dirk Brandewie).
    
       - Support for firmware interface based on ACPI operation regions used
         by the PMIC chips on the Intel Baytrail-T and Baytrail-T-CR
         platforms for power resource control and thermal management (Aaron
         Lu).
    
       - Limited support for retrieving off-the-hierarchy dependencies
         between devices from ACPI _DEP device configuration objects and
         deferred probing support for the ACPI battery driver based on the
         _DEP information to make that driver work on Asus T100A (Lan
         Tianyu).
    
       - New cpufreq driver for the Loongson1B processor (Kelvin Cheung).
    
       - ACPICA update to upstream revision 20141107 which only affects
         tools (Bob Moore).
    
       - Fixes for race conditions in the ACPICA's interrupt handling code
         and in the ACPI code related to system suspend and resume (Lv Zheng
         and Rafael J Wysocki).
    
       - ACPI core fix for an RCU-related issue in the ioremap() regions
         management code that slowed down significantly after CPUs had been
         allowed to enter idle states even if they'd had RCU callbakcs
         queued and triggered some problems in certain proprietary graphics
         driver (and elsewhere).  The fix replaces synchronize_rcu() in that
         code with synchronize_rcu_expedited() which makes the issue go
         away.  From Konstantin Khlebnikov.
    
       - ACPI LPSS (Low-Power Subsystem) driver fix to handle power
         management of the DMA engine included into the LPSS correctly.  The
         problem is that the DMA engine doesn't have ACPI PM support of its
         own and it simply is turned off when the last LPSS device having
         ACPI PM support goes into D3cold.  To work around that, the PM
         domain used by the ACPI LPSS driver is redesigned so at least one
         device with ACPI PM support will be on as long as the DMA engine is
         in use.  From Andy Shevchenko.
    
       - ACPI backlight driver fix to avoid using it on "Win8-compatible"
         systems where it doesn't work and where it was used by default by
         mistake (Aaron Lu).
    
       - Assorted minor ACPI core fixes and cleanups from Tomasz Nowicki,
         Sudeep Holla, Huang Rui, Hanjun Guo, Fabian Frederick, and Ashwin
         Chaugule (mostly related to the upcoming ARM64 support).
    
       - Intel RAPL (Running Average Power Limit) power capping driver fixes
         and improvements including new processor IDs (Jacob Pan).
    
       - Generic power domains modification to power up domains after
         attaching devices to them to meet the expectations of device
         drivers and bus types assuming devices to be accessible at probe
         time (Ulf Hansson).
    
       - Preliminary support for controlling device clocks from the generic
         power domains core code and modifications of the ARM/shmobile
         platform to use that feature (Ulf Hansson).
    
       - Assorted minor fixes and cleanups of the generic power domains core
         code (Ulf Hansson, Geert Uytterhoeven).
    
       - Assorted minor fixes and cleanups of the device clocks control code
         in the PM core (Geert Uytterhoeven, Grygorii Strashko).
    
       - Consolidation of device power management Kconfig options by making
         CONFIG_PM_SLEEP select CONFIG_PM_RUNTIME and removing the latter
         which is now redundant (Rafael J Wysocki and Kevin Hilman).  That
         is the first batch of the changes needed for this purpose.
    
       - Core device runtime power management support code cleanup related
         to the execution of callbacks (Andrzej Hajda).
    
       - cpuidle ARM support improvements (Lorenzo Pieralisi).
    
       - cpuidle cleanup related to the CPUIDLE_FLAG_TIME_VALID flag and a
         new MAINTAINERS entry for ARM Exynos cpuidle (Daniel Lezcano and
         Bartlomiej Zolnierkiewicz).
    
       - New cpufreq driver callback (->ready) to be executed when the
         cpufreq core is ready to use a given policy object and cpufreq-dt
         driver modification to use that callback for cooling device
         registration (Viresh Kumar).
    
       - cpufreq core fixes and cleanups (Viresh Kumar, Vince Hsu, James
         Geboski, Tomeu Vizoso).
    
       - Assorted fixes and cleanups in the cpufreq-pcc, intel_pstate,
         cpufreq-dt, pxa2xx cpufreq drivers (Lenny Szubowicz, Ethan Zhao,
         Stefan Wahren, Petr Cvek).
    
       - OPP (Operating Performance Points) framework modification to allow
         OPPs to be removed too and update of a few cpufreq drivers
         (cpufreq-dt, exynos5440, imx6q, cpufreq) to remove OPPs (added
         during initialization) on driver removal (Viresh Kumar).
    
       - Hibernation core fixes and cleanups (Tina Ruchandani and Markus
         Elfring).
    
       - PM Kconfig fix related to CPU power management (Pankaj Dubey).
    
       - cpupower tool fix (Prarit Bhargava)"
    
    * tag 'pm+acpi-3.19-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (120 commits)
      i2c-omap / PM: Drop CONFIG_PM_RUNTIME from i2c-omap.c
      dmaengine / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      tools: cpupower: fix return checks for sysfs_get_idlestate_count()
      drivers: sh / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      e1000e / igb / PM: Eliminate CONFIG_PM_RUNTIME
      MMC / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      MFD / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      misc / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      media / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      input / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      leds: leds-gpio: Fix multiple instances registration without 'label' property
      iio / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      hsi / OMAP / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      i2c-hid / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      drm / exynos / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      gpio / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      hwrandom / exynos / PM: Use CONFIG_PM in #ifdef
      block / PM: Replace CONFIG_PM_RUNTIME with CONFIG_PM
      USB / PM: Drop CONFIG_PM_RUNTIME from the USB core
      PM: Merge the SET*_RUNTIME_PM_OPS() macros
      ...

commit c9d26423e56ce1ab4d786f92aebecf859d419293
Merge: a11c5c9ef6dc af5b7e84d022
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 14 18:13:46 2014 -0600

    Merge tag 'pm+acpi-3.17-rc1-2' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull more ACPI and power management updates from Rafael Wysocki:
     "These are a couple of regression fixes, cpuidle menu governor
      optimizations, fixes for ACPI proccessor and battery drivers,
      hibernation fix to avoid problems related to the e820 memory map,
      fixes for a few cpufreq drivers and a new version of the suspend
      profiling tool analyze_suspend.py.
    
      Specifics:
    
       - Fix for an ACPI-based device hotplug regression introduced in 3.14
         that causes a kernel panic to trigger when memory hot-remove is
         attempted with CONFIG_ACPI_HOTPLUG_MEMORY unset from Tang Chen
    
       - Fix for a cpufreq regression introduced in 3.16 that triggers a
         "sleeping function called from invalid context" bug in
         dev_pm_opp_init_cpufreq_table() from Stephen Boyd
    
       - ACPI battery driver fix for a warning message added in 3.16 that
         prints silly stuff sometimes from Mariusz Ceier
    
       - Hibernation fix for safer handling of mismatches in the 820 memory
         map between the configurations during image creation and during the
         subsequent restore from Chun-Yi Lee
    
       - ACPI processor driver fix to handle CPU hotplug notifications
         correctly during system suspend/resume from Lan Tianyu
    
       - Series of four cpuidle menu governor cleanups that also should
         speed it up a bit from Mel Gorman
    
       - Fixes for the speedstep-smi, integrator, cpu0 and arm_big_little
         cpufreq drivers from Hans Wennborg, Himangi Saraogi, Markus
         Pargmann and Uwe Kleine-König
    
       - Version 3.0 of the analyze_suspend.py suspend profiling tool from
         Todd E Brandt"
    
    * tag 'pm+acpi-3.17-rc1-2' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:
      ACPI / battery: Fix warning message in acpi_battery_get_state()
      PM / tools: analyze_suspend.py: update to v3.0
      cpufreq: arm_big_little: fix module license spec
      cpufreq: speedstep-smi: fix decimal printf specifiers
      ACPI / hotplug: Check scan handlers in acpi_scan_hot_remove()
      cpufreq: OPP: Avoid sleeping while atomic
      cpufreq: cpu0: Do not print error message when deferring
      cpufreq: integrator: Use set_cpus_allowed_ptr
      PM / hibernate: avoid unsafe pages in e820 reserved regions
      ACPI / processor: Make acpi_cpu_soft_notify() process CPU FROZEN events
      cpuidle: menu: Lookup CPU runqueues less
      cpuidle: menu: Call nr_iowait_cpu less times
      cpuidle: menu: Use ktime_to_us instead of reinventing the wheel
      cpuidle: menu: Use shifts when calculating averages where possible

commit eb3d3ec567e868c8a3bfbfdfc9465ffd52983d11
Merge: c3c55a072039 bd63ce27d9d6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jun 5 15:57:04 2014 -0700

    Merge branch 'for-linus' of git://ftp.arm.linux.org.uk/~rmk/linux-arm into next
    
    Pull ARM updates from Russell King:
    
     - Major clean-up of the L2 cache support code.  The existing mess was
       becoming rather unmaintainable through all the additions that others
       have done over time.  This turns it into a much nicer structure, and
       implements a few performance improvements as well.
    
     - Clean up some of the CP15 control register tweaks for alignment
       support, moving some code and data into alignment.c
    
     - DMA properties for ARM, from Santosh and reviewed by DT people.  This
       adds DT properties to specify bus translations we can't discover
       automatically, and to indicate whether devices are coherent.
    
     - Hibernation support for ARM
    
     - Make ftrace work with read-only text in modules
    
     - add suspend support for PJ4B CPUs
    
     - rework interrupt masking for undefined instruction handling, which
       allows us to enable interrupts earlier in the handling of these
       exceptions.
    
     - support for big endian page tables
    
     - fix stacktrace support to exclude stacktrace functions from the
       trace, and add save_stack_trace_regs() implementation so that kprobes
       can record stack traces.
    
     - Add support for the Cortex-A17 CPU.
    
     - Remove last vestiges of ARM710 support.
    
     - Removal of ARM "meminfo" structure, finally converting us solely to
       memblock to handle the early memory initialisation.
    
    * 'for-linus' of git://ftp.arm.linux.org.uk/~rmk/linux-arm: (142 commits)
      ARM: ensure C page table setup code follows assembly code (part II)
      ARM: ensure C page table setup code follows assembly code
      ARM: consolidate last remaining open-coded alignment trap enable
      ARM: remove global cr_no_alignment
      ARM: remove CPU_CP15 conditional from alignment.c
      ARM: remove unused adjust_cr() function
      ARM: move "noalign" command line option to alignment.c
      ARM: provide common method to clear bits in CPU control register
      ARM: 8025/1: Get rid of meminfo
      ARM: 8060/1: mm: allow sub-architectures to override PCI I/O memory type
      ARM: 8066/1: correction for ARM patch 8031/2
      ARM: 8049/1: ftrace/add save_stack_trace_regs() implementation
      ARM: 8065/1: remove last use of CONFIG_CPU_ARM710
      ARM: 8062/1: Modify ldrt fixup handler to re-execute the userspace instruction
      ARM: 8047/1: rwsem: use asm-generic rwsem implementation
      ARM: l2c: trial at enabling some Cortex-A9 optimisations
      ARM: l2c: add warnings for stuff modifying aux_ctrl register values
      ARM: l2c: print a warning with L2C-310 caches if the cache size is modified
      ARM: l2c: remove old .set_debug method
      ARM: l2c: kill L2X0_AUX_CTRL_MASK before anyone else makes use of this
      ...

commit 3a9d307d66512bbe69edc5ee626b1959ed00245c
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Sat Mar 22 17:21:44 2014 +0800

    MIPS: Hibernate: Flush TLB entries in swsusp_arch_resume()
    
    commit c14af233fbe279d0e561ecf84f1208b1bae087ef upstream.
    
    The original MIPS hibernate code flushes cache and TLB entries in
    swsusp_arch_resume(). But they are removed in Commit 44eeab67416711
    (MIPS: Hibernation: Remove SMP TLB and cacheflushing code.). A cross-
    CPU flush is surely unnecessary because all but the local CPU have
    already been disabled. But a local flush (at least the TLB flush) is
    needed. When we do hibernation on Loongson-3 with an E1000E NIC, it is
    very easy to produce a kernel panic (kernel page fault, or unaligned
    access). The root cause is E1000E driver use vzalloc_node() to allocate
    pages, the stale TLB entries of the booting kernel will be misused by
    the resumed target kernel.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Steven J. Hill <Steven.Hill@imgtec.com>
    Cc: Aurelien Jarno <aurelien@aurel32.net>
    Cc: linux-mips@linux-mips.org
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Patchwork: https://patchwork.linux-mips.org/patch/6643/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit ef9146785e023ef84cb777aac6deae53c53a2b84
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Sat Mar 22 17:21:44 2014 +0800

    MIPS: Hibernate: Flush TLB entries in swsusp_arch_resume()
    
    commit c14af233fbe279d0e561ecf84f1208b1bae087ef upstream.
    
    The original MIPS hibernate code flushes cache and TLB entries in
    swsusp_arch_resume(). But they are removed in Commit 44eeab67416711
    (MIPS: Hibernation: Remove SMP TLB and cacheflushing code.). A cross-
    CPU flush is surely unnecessary because all but the local CPU have
    already been disabled. But a local flush (at least the TLB flush) is
    needed. When we do hibernation on Loongson-3 with an E1000E NIC, it is
    very easy to produce a kernel panic (kernel page fault, or unaligned
    access). The root cause is E1000E driver use vzalloc_node() to allocate
    pages, the stale TLB entries of the booting kernel will be misused by
    the resumed target kernel.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Steven J. Hill <Steven.Hill@imgtec.com>
    Cc: Aurelien Jarno <aurelien@aurel32.net>
    Cc: linux-mips@linux-mips.org
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Patchwork: https://patchwork.linux-mips.org/patch/6643/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a93daee35a6d511e71f19c7227c64a9dc2c3e273
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Sat Mar 22 17:21:44 2014 +0800

    MIPS: Hibernate: Flush TLB entries in swsusp_arch_resume()
    
    commit c14af233fbe279d0e561ecf84f1208b1bae087ef upstream.
    
    The original MIPS hibernate code flushes cache and TLB entries in
    swsusp_arch_resume(). But they are removed in Commit 44eeab67416711
    (MIPS: Hibernation: Remove SMP TLB and cacheflushing code.). A cross-
    CPU flush is surely unnecessary because all but the local CPU have
    already been disabled. But a local flush (at least the TLB flush) is
    needed. When we do hibernation on Loongson-3 with an E1000E NIC, it is
    very easy to produce a kernel panic (kernel page fault, or unaligned
    access). The root cause is E1000E driver use vzalloc_node() to allocate
    pages, the stale TLB entries of the booting kernel will be misused by
    the resumed target kernel.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Steven J. Hill <Steven.Hill@imgtec.com>
    Cc: Aurelien Jarno <aurelien@aurel32.net>
    Cc: linux-mips@linux-mips.org
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Patchwork: https://patchwork.linux-mips.org/patch/6643/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 771004298d9a73ff1bca0b4ff5168c74d3ff7af0
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Sat Mar 22 17:21:44 2014 +0800

    MIPS: Hibernate: Flush TLB entries in swsusp_arch_resume()
    
    commit c14af233fbe279d0e561ecf84f1208b1bae087ef upstream.
    
    The original MIPS hibernate code flushes cache and TLB entries in
    swsusp_arch_resume(). But they are removed in Commit 44eeab67416711
    (MIPS: Hibernation: Remove SMP TLB and cacheflushing code.). A cross-
    CPU flush is surely unnecessary because all but the local CPU have
    already been disabled. But a local flush (at least the TLB flush) is
    needed. When we do hibernation on Loongson-3 with an E1000E NIC, it is
    very easy to produce a kernel panic (kernel page fault, or unaligned
    access). The root cause is E1000E driver use vzalloc_node() to allocate
    pages, the stale TLB entries of the booting kernel will be misused by
    the resumed target kernel.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Steven J. Hill <Steven.Hill@imgtec.com>
    Cc: Aurelien Jarno <aurelien@aurel32.net>
    Cc: linux-mips@linux-mips.org
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Patchwork: https://patchwork.linux-mips.org/patch/6643/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 258f96215696a32844bb6ed9da446cb550bd8396
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Sat Mar 22 17:21:44 2014 +0800

    MIPS: Hibernate: Flush TLB entries in swsusp_arch_resume()
    
    commit c14af233fbe279d0e561ecf84f1208b1bae087ef upstream.
    
    The original MIPS hibernate code flushes cache and TLB entries in
    swsusp_arch_resume(). But they are removed in Commit 44eeab67416711
    (MIPS: Hibernation: Remove SMP TLB and cacheflushing code.). A cross-
    CPU flush is surely unnecessary because all but the local CPU have
    already been disabled. But a local flush (at least the TLB flush) is
    needed. When we do hibernation on Loongson-3 with an E1000E NIC, it is
    very easy to produce a kernel panic (kernel page fault, or unaligned
    access). The root cause is E1000E driver use vzalloc_node() to allocate
    pages, the stale TLB entries of the booting kernel will be misused by
    the resumed target kernel.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Steven J. Hill <Steven.Hill@imgtec.com>
    Cc: Aurelien Jarno <aurelien@aurel32.net>
    Cc: linux-mips@linux-mips.org
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Patchwork: https://patchwork.linux-mips.org/patch/6643/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c14af233fbe279d0e561ecf84f1208b1bae087ef
Author: Huacai Chen <chenhuacai@kernel.org>
Date:   Sat Mar 22 17:21:44 2014 +0800

    MIPS: Hibernate: Flush TLB entries in swsusp_arch_resume()
    
    The original MIPS hibernate code flushes cache and TLB entries in
    swsusp_arch_resume(). But they are removed in Commit 44eeab67416711
    (MIPS: Hibernation: Remove SMP TLB and cacheflushing code.). A cross-
    CPU flush is surely unnecessary because all but the local CPU have
    already been disabled. But a local flush (at least the TLB flush) is
    needed. When we do hibernation on Loongson-3 with an E1000E NIC, it is
    very easy to produce a kernel panic (kernel page fault, or unaligned
    access). The root cause is E1000E driver use vzalloc_node() to allocate
    pages, the stale TLB entries of the booting kernel will be misused by
    the resumed target kernel.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Cc: John Crispin <john@phrozen.org>
    Cc: Steven J. Hill <Steven.Hill@imgtec.com>
    Cc: Aurelien Jarno <aurelien@aurel32.net>
    Cc: linux-mips@linux-mips.org
    Cc: Fuxin Zhang <zhangfx@lemote.com>
    Cc: Zhangjin Wu <wuzhangjin@gmail.com>
    Cc: stable@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/6643/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 7b2a0368bbc9bc4a7936d8587eaff4b8c35b2247
Author: Felipe Balbi <balbi@ti.com>
Date:   Thu Dec 19 13:43:19 2013 -0600

    usb: dwc3: gadget: set KEEP_CONNECT in case of hibernation
    
    if we have hibernation configured, Databook
    instructs us to set KEEP_CONNECT bit together
    with RUN_STOP bit, in step 9 of section 12.3.6.1
    Initialization for Hibernation Support.
    
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 911f1f88cadf4b64bad5aa4c257d72494a62f928
Author: Paul Zimmerman <Paul.Zimmerman@synopsys.com>
Date:   Fri Apr 27 13:35:15 2012 +0300

    usb: dwc3: gadget: implement dwc3_gadget_get_link_state
    
    This function will be used during hibernation to get
    the current link state. It will be needed at least
    for Hibernation support.
    
    Signed-off-by: Paul Zimmerman <paulz@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 09da8dfa98682d871987145ed11e3232accac860
Merge: 3aacd625f201 7744064731a9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jan 24 15:51:02 2014 -0800

    Merge tag 'pm+acpi-3.14-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI and power management updates from Rafael Wysocki:
     "As far as the number of commits goes, the top spot belongs to ACPI
      this time with cpufreq in the second position and a handful of PM
      core, PNP and cpuidle updates.  They are fixes and cleanups mostly, as
      usual, with a couple of new features in the mix.
    
      The most visible change is probably that we will create struct
      acpi_device objects (visible in sysfs) for all devices represented in
      the ACPI tables regardless of their status and there will be a new
      sysfs attribute under those objects allowing user space to check that
      status via _STA.
    
      Consequently, ACPI device eject or generally hot-removal will not
      delete those objects, unless the table containing the corresponding
      namespace nodes is unloaded, which is extremely rare.  Also ACPI
      container hotplug will be handled quite a bit differently and cpufreq
      will support CPU boost ("turbo") generically and not only in the
      acpi-cpufreq driver.
    
      Specifics:
    
       - ACPI core changes to make it create a struct acpi_device object for
         every device represented in the ACPI tables during all namespace
         scans regardless of the current status of that device.  In
         accordance with this, ACPI hotplug operations will not delete those
         objects, unless the underlying ACPI tables go away.
    
       - On top of the above, new sysfs attribute for ACPI device objects
         allowing user space to check device status by triggering the
         execution of _STA for its ACPI object.  From Srinivas Pandruvada.
    
       - ACPI core hotplug changes reducing code duplication, integrating
         the PCI root hotplug with the core and reworking container hotplug.
    
       - ACPI core simplifications making it use ACPI_COMPANION() in the
         code "glueing" ACPI device objects to "physical" devices.
    
       - ACPICA update to upstream version 20131218.  This adds support for
         the DBG2 and PCCT tables to ACPICA, fixes some bugs and improves
         debug facilities.  From Bob Moore, Lv Zheng and Betty Dall.
    
       - Init code change to carry out the early ACPI initialization
         earlier.  That should allow us to use ACPI during the timekeeping
         initialization and possibly to simplify the EFI initialization too.
         From Chun-Yi Lee.
    
       - Clenups of the inclusions of ACPI headers in many places all over
         from Lv Zheng and Rashika Kheria (work in progress).
    
       - New helper for ACPI _DSM execution and rework of the code in
         drivers that uses _DSM to execute it via the new helper.  From
         Jiang Liu.
    
       - New Win8 OSI blacklist entries from Takashi Iwai.
    
       - Assorted ACPI fixes and cleanups from Al Stone, Emil Goode, Hanjun
         Guo, Lan Tianyu, Masanari Iida, Oliver Neukum, Prarit Bhargava,
         Rashika Kheria, Tang Chen, Zhang Rui.
    
       - intel_pstate driver updates, including proper Baytrail support,
         from Dirk Brandewie and intel_pstate documentation from Ramkumar
         Ramachandra.
    
       - Generic CPU boost ("turbo") support for cpufreq from Lukasz
         Majewski.
    
       - powernow-k6 cpufreq driver fixes from Mikulas Patocka.
    
       - cpufreq core fixes and cleanups from Viresh Kumar, Jane Li, Mark
         Brown.
    
       - Assorted cpufreq drivers fixes and cleanups from Anson Huang, John
         Tobias, Paul Bolle, Paul Walmsley, Sachin Kamat, Shawn Guo, Viresh
         Kumar.
    
       - cpuidle cleanups from Bartlomiej Zolnierkiewicz.
    
       - Support for hibernation APM events from Bin Shi.
    
       - Hibernation fix to avoid bringing up nonboot CPUs with ACPI EC
         disabled during thaw transitions from Bjørn Mork.
    
       - PM core fixes and cleanups from Ben Dooks, Leonardo Potenza, Ulf
         Hansson.
    
       - PNP subsystem fixes and cleanups from Dmitry Torokhov, Levente
         Kurusa, Rashika Kheria.
    
       - New tool for profiling system suspend from Todd E Brandt and a
         cpupower tool cleanup from One Thousand Gnomes"
    
    * tag 'pm+acpi-3.14-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (153 commits)
      thermal: exynos: boost: Automatic enable/disable of BOOST feature (at Exynos4412)
      cpufreq: exynos4x12: Change L0 driver data to CPUFREQ_BOOST_FREQ
      Documentation: cpufreq / boost: Update BOOST documentation
      cpufreq: exynos: Extend Exynos cpufreq driver to support boost
      cpufreq / boost: Kconfig: Support for software-managed BOOST
      acpi-cpufreq: Adjust the code to use the common boost attribute
      cpufreq: Add boost frequency support in core
      intel_pstate: Add trace point to report internal state.
      cpufreq: introduce cpufreq_generic_get() routine
      ARM: SA1100: Create dummy clk_get_rate() to avoid build failures
      cpufreq: stats: create sysfs entries when cpufreq_stats is a module
      cpufreq: stats: free table and remove sysfs entry in a single routine
      cpufreq: stats: remove hotplug notifiers
      cpufreq: stats: handle cpufreq_unregister_driver() and suspend/resume properly
      cpufreq: speedstep: remove unused speedstep_get_state
      platform: introduce OF style 'modalias' support for platform bus
      PM / tools: new tool for suspend/resume performance optimization
      ACPI: fix module autoloading for ACPI enumerated devices
      ACPI: add module autoloading support for ACPI enumerated devices
      ACPI: fix create_modalias() return value handling
      ...

commit f9300eaaac1ca300083ad41937923a90cc3a2394
Merge: 7f2dc5c4bcbf faddf2f5d278
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Nov 14 13:41:48 2013 +0900

    Merge tag 'pm+acpi-3.13-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI and power management updates from Rafael J Wysocki:
    
     - New power capping framework and the the Intel Running Average Power
       Limit (RAPL) driver using it from Srinivas Pandruvada and Jacob Pan.
    
     - Addition of the in-kernel switching feature to the arm_big_little
       cpufreq driver from Viresh Kumar and Nicolas Pitre.
    
     - cpufreq support for iMac G5 from Aaro Koskinen.
    
     - Baytrail processors support for intel_pstate from Dirk Brandewie.
    
     - cpufreq support for Midway/ECX-2000 from Mark Langsdorf.
    
     - ARM vexpress/TC2 cpufreq support from Sudeep KarkadaNagesha.
    
     - ACPI power management support for the I2C and SPI bus types from Mika
       Westerberg and Lv Zheng.
    
     - cpufreq core fixes and cleanups from Viresh Kumar, Srivatsa S Bhat,
       Stratos Karafotis, Xiaoguang Chen, Lan Tianyu.
    
     - cpufreq drivers updates (mostly fixes and cleanups) from Viresh
       Kumar, Aaro Koskinen, Jungseok Lee, Sudeep KarkadaNagesha, Lukasz
       Majewski, Manish Badarkhe, Hans-Christian Egtvedt, Evgeny Kapaev.
    
     - intel_pstate updates from Dirk Brandewie and Adrian Huang.
    
     - ACPICA update to version 20130927 includig fixes and cleanups and
       some reduction of divergences between the ACPICA code in the kernel
       and ACPICA upstream in order to improve the automatic ACPICA patch
       generation process.  From Bob Moore, Lv Zheng, Tomasz Nowicki, Naresh
       Bhat, Bjorn Helgaas, David E Box.
    
     - ACPI IPMI driver fixes and cleanups from Lv Zheng.
    
     - ACPI hotplug fixes and cleanups from Bjorn Helgaas, Toshi Kani, Zhang
       Yanfei, Rafael J Wysocki.
    
     - Conversion of the ACPI AC driver to the platform bus type and
       multiple driver fixes and cleanups related to ACPI from Zhang Rui.
    
     - ACPI processor driver fixes and cleanups from Hanjun Guo, Jiang Liu,
       Bartlomiej Zolnierkiewicz, Mathieu Rhéaume, Rafael J Wysocki.
    
     - Fixes and cleanups and new blacklist entries related to the ACPI
       video support from Aaron Lu, Felipe Contreras, Lennart Poettering,
       Kirill Tkhai.
    
     - cpuidle core cleanups from Viresh Kumar and Lorenzo Pieralisi.
    
     - cpuidle drivers fixes and cleanups from Daniel Lezcano, Jingoo Han,
       Bartlomiej Zolnierkiewicz, Prarit Bhargava.
    
     - devfreq updates from Sachin Kamat, Dan Carpenter, Manish Badarkhe.
    
     - Operation Performance Points (OPP) core updates from Nishanth Menon.
    
     - Runtime power management core fix from Rafael J Wysocki and update
       from Ulf Hansson.
    
     - Hibernation fixes from Aaron Lu and Rafael J Wysocki.
    
     - Device suspend/resume lockup detection mechanism from Benoit Goby.
    
     - Removal of unused proc directories created for various ACPI drivers
       from Lan Tianyu.
    
     - ACPI LPSS driver fix and new device IDs for the ACPI platform scan
       handler from Heikki Krogerus and Jarkko Nikula.
    
     - New ACPI _OSI blacklist entry for Toshiba NB100 from Levente Kurusa.
    
     - Assorted fixes and cleanups related to ACPI from Andy Shevchenko, Al
       Stone, Bartlomiej Zolnierkiewicz, Colin Ian King, Dan Carpenter,
       Felipe Contreras, Jianguo Wu, Lan Tianyu, Yinghai Lu, Mathias Krause,
       Liu Chuansheng.
    
     - Assorted PM fixes and cleanups from Andy Shevchenko, Thierry Reding,
       Jean-Christophe Plagniol-Villard.
    
    * tag 'pm+acpi-3.13-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (386 commits)
      cpufreq: conservative: fix requested_freq reduction issue
      ACPI / hotplug: Consolidate deferred execution of ACPI hotplug routines
      PM / runtime: Use pm_runtime_put_sync() in __device_release_driver()
      ACPI / event: remove unneeded NULL pointer check
      Revert "ACPI / video: Ignore BIOS initial backlight value for HP 250 G1"
      ACPI / video: Quirk initial backlight level 0
      ACPI / video: Fix initial level validity test
      intel_pstate: skip the driver if ACPI has power mgmt option
      PM / hibernate: Avoid overflow in hibernate_preallocate_memory()
      ACPI / hotplug: Do not execute "insert in progress" _OST
      ACPI / hotplug: Carry out PCI root eject directly
      ACPI / hotplug: Merge device hot-removal routines
      ACPI / hotplug: Make acpi_bus_hot_remove_device() internal
      ACPI / hotplug: Simplify device ejection routines
      ACPI / hotplug: Fix handle_root_bridge_removal()
      ACPI / hotplug: Refuse to hot-remove all objects with disabled hotplug
      ACPI / scan: Start matching drivers after trying scan handlers
      ACPI: Remove acpi_pci_slot_init() headers from internal.h
      ACPI / blacklist: fix name of ThinkPad Edge E530
      PowerCap: Fix build error with option -Werror=format-security
      ...
    
    Conflicts:
            arch/arm/mach-omap2/opp.c
            drivers/Kconfig
            drivers/spi/spi.c

commit 20582e34c8c1364bce15d776bce3c9c0f108132f
Merge: d255c59aab2a 75c0758137c7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Oct 26 04:38:47 2013 +0100

    Merge tag 'pm+acpi-3.12-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI and power management fixes from
     "These fix two bugs in the intel_pstate driver, a hibernate bug leading
      to nasty resume failures sometimes and acpi-cpufreq initialization bug
      that causes problems to happen during module unload when intel_pstate
      is in use.
    
      Specifics:
    
       - Fix for rounding errors in intel_pstate causing CPU utilization to
         be underestimated from Brennan Shacklett.
    
       - intel_pstate fix to always use the correct max pstate value when
         computing the min pstate from Dirk Brandewie.
    
       - Hibernation fix for deadlocking resume in cases when the probing of
         the device containing the image is deferred from Russ Dill.
    
       - acpi-cpufreq fix to prevent the module from staying in memory when
         the driver cannot be registered and then attempting to unregister
         things that have never been registered on exit"
    
    * tag 'pm+acpi-3.12-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:
      acpi-cpufreq: Fail initialization if driver cannot be registered
      PM / hibernate: Move software_resume to late_initcall_sync
      intel_pstate: Correct calculation of min pstate value
      intel_pstate: Improve accuracy by not truncating until final result

commit e3b20b3f586604cde718a609b39577086351ed49
Author: Harald Judt <h.judt@gmx.at>
Date:   Thu Aug 1 16:18:45 2013 +0200

    hwmon: (w83627ehf) Add support for hibernate
    
    Hibernation uses its own set of callback functions, even if the code
    is the same as the code used for suspend/restore.
    
    Signed-off-by: Harald Judt <h.judt@gmx.at>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

commit 374d1f98353983f90aca3cecc6882e45755a0838
Author: Harald Judt <h.judt@gmx.at>
Date:   Tue Jul 30 19:50:16 2013 +0200

    hwmon: (nct6775) Add support for hibernate
    
    Hibernation uses its own set of callback functions, even if the code
    is the same as the code used for suspend/restore.
    
    Signed-off-by: Harald Judt <h.judt@gmx.at>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

commit f589e9bfcfc4ec2b59bf36b994b75012c155799e
Merge: 173192958d06 048c9acca90c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 4 20:08:49 2013 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/sparc-next
    
    Pull sparc updates from David Miller:
    
     1) Hibernation support, as well as removal of excess interrupt
        twiddling in MMU context allocation on sparc64 from Kirill Tkhai.
    
     2) Kill references to __ARCH_WANT_UNLOCKED_CTXSW.
    
     3) Sparc32 LEON bug fixes from Daniel Hellstrom and Andreas Larsson.
    
     4) Provide cmpxchg64(), from Geert Uytterhoeven.
    
     5) Device refcount and registry bug fixes from Federico Vaga and Wei
        Yongjun.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/sparc-next:
      serial: sunsu: add missing platform_driver_unregister() when module exit
      sparc32, leon: Do not overwrite previously set irq flow handlers
      sparc/kernel/vio.c: add put_device() after device_find_child()
      sparc64: Do not save/restore interrupts in get_new_mmu_context()
      sparc: Consistently use 'wr' and 'rd' instructions for ASRs.
      sparc64: Kill __ARCH_WANT_UNLOCKED_CTXSW
      sparc64: Provide cmpxchg64()
      sparc64: Do not change num_physpages during initmem freeing
      sparc64: Hibernation support
      sparc,leon: updated GRPCI2 config name
      sparc,leon: support for GRPCI1 PCI host bridge controller
      sparc32,leon: add support for PCI busn resource for GRPCI2

commit bdde6b3c8ba48fa5847b6d75f0541c8b8db9205c
Author: Tkhai Kirill <tkhai@yandex.ru>
Date:   Tue Mar 19 15:11:07 2013 +0000

    sparc64: Hibernation support
    
    This patch adds CONFIG_HIBERNATION support for sparc64
    architecture. The suspend function is the same as on another
    platforms. The restore function uses Bypass feature of MMU
    which allows to make the process more comfortable and plesant.
    
    Signed-off-by: Kirill Tkhai <tkhai@yandex.ru>
    CC: David Miller <davem@davemloft.net>
    CC: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0b0cc1cd31bed3e3147398e54530f1f819b27692
Author: Felipe Balbi <balbi@ti.com>
Date:   Tue Sep 18 21:39:24 2012 +0300

    usb: dwc3: workaround: unexpected transtion U3 -> RESUME
    
    In DWC3 versions < 2.50a configured without
    Hibernation mode enabled, there will be an
    extra link status change interrupt if device
    detects host-initiated U3 exit.
    
    In that case, core will generate an unnecessary
    U3 -> RESUME transition which should be ignored
    by the driver.
    
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit e0791b5ffb456aa7de29391297e5dc93c1d123ff
Author: Bojan Smojver <bojan@rexursive.com>
Date:   Tue Apr 24 23:53:28 2012 +0200

    PM / Hibernate: fix the number of pages used for hibernate/thaw buffering
    
    commit f8262d476823a7ea1eb497ff9676d1eab2393c75 upstream.
    
    Hibernation regression fix, since 3.2.
    
    Calculate the number of required free pages based on non-high memory
    pages only, because that is where the buffers will come from.
    
    Commit 081a9d043c983f161b78fdc4671324d1342b86bc introduced a new buffer
    page allocation logic during hibernation, in order to improve the
    performance. The amount of pages allocated was calculated based on total
    amount of pages available, although only non-high memory pages are
    usable for this purpose. This caused hibernation code to attempt to over
    allocate pages on platforms that have high memory, which led to hangs.
    
    Signed-off-by: Bojan Smojver <bojan@rexursive.com>
    Signed-off-by: Rafael J. Wysocki <rjw@suse.de>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4da7d6143870a2f81ceaeabdc64e0f74121e35b3
Author: Bojan Smojver <bojan@rexursive.com>
Date:   Tue Apr 24 23:53:28 2012 +0200

    PM / Hibernate: fix the number of pages used for hibernate/thaw buffering
    
    commit f8262d476823a7ea1eb497ff9676d1eab2393c75 upstream.
    
    Hibernation regression fix, since 3.2.
    
    Calculate the number of required free pages based on non-high memory
    pages only, because that is where the buffers will come from.
    
    Commit 081a9d043c983f161b78fdc4671324d1342b86bc introduced a new buffer
    page allocation logic during hibernation, in order to improve the
    performance. The amount of pages allocated was calculated based on total
    amount of pages available, although only non-high memory pages are
    usable for this purpose. This caused hibernation code to attempt to over
    allocate pages on platforms that have high memory, which led to hangs.
    
    Signed-off-by: Bojan Smojver <bojan@rexursive.com>
    Signed-off-by: Rafael J. Wysocki <rjw@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8262d476823a7ea1eb497ff9676d1eab2393c75
Author: Bojan Smojver <bojan@rexursive.com>
Date:   Tue Apr 24 23:53:28 2012 +0200

    PM / Hibernate: fix the number of pages used for hibernate/thaw buffering
    
    Hibernation regression fix, since 3.2.
    
    Calculate the number of required free pages based on non-high memory
    pages only, because that is where the buffers will come from.
    
    Commit 081a9d043c983f161b78fdc4671324d1342b86bc introduced a new buffer
    page allocation logic during hibernation, in order to improve the
    performance. The amount of pages allocated was calculated based on total
    amount of pages available, although only non-high memory pages are
    usable for this purpose. This caused hibernation code to attempt to over
    allocate pages on platforms that have high memory, which led to hangs.
    
    Signed-off-by: Bojan Smojver <bojan@rexursive.com>
    Signed-off-by: Rafael J. Wysocki <rjw@suse.de>

commit 90597b6cfc1fc9926a4d54f09bbf5b3254b1b028
Merge: 7bfe0e66d5da b8cec3c253a2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 22 20:22:30 2012 -0700

    Merge tag 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jgarzik/libata-dev
    
    Pull libata updates from Jeff Garzik:
    
     1) AHCI regression fix.  A recent "make driver conform to spec" change
        broke on deployed hardware.  Make new behavior optional, rather than
        default, turning it on only for specific embedded platforms that
        need this.
    
        Everybody else runs in the famous "non conformant but working" mode.
    
     2) pata_cmd64x, pata_legacy cleanups
    
     3) new Intel SATA PCI IDs
    
     4) misc minor vendor feature additions
    
    * tag 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jgarzik/libata-dev:
      pata_cmd64x: implement sff_irq_check() method
      pata_cmd64x: implement sff_irq_clear() method
      pata_cmd64x: use interrupt status from MRDMODE register
      pata_cmd64x: turn string of *if* statements into *switch*
      drivers/ata/pata_mpc52xx.c: clean up error handling code
      ahci_platform: add STRICT_AHCI platform type
      ahci: move AHCI_HFLAGS() macro to ahci.h
      ahci: add AHCI_HFLAG_DELAY_ENGINE host flag
      sata_fsl: add support for interrupt coalsecing feature
      ata/pata_arasan_cf: Add Hibernation support
      pata_legacy: correctly mask recovery field for HT6560B
      ata_piix: IDE-mode SATA patch for Intel Lynx Point DeviceIDs
      ahci: AHCI-mode SATA patch for Intel Lynx Point DeviceIDs

commit 40679b3ce9d993e33e026f402cbfffb35d2c4e3c
Author: Viresh Kumar <vireshk@kernel.org>
Date:   Thu Feb 23 15:03:53 2012 +0530

    ata/pata_arasan_cf: Add Hibernation support
    
    This patch adds in Hibernation related callbacks. Also we don't really need to
    free DMA channel on suspend.
    
    Signed-off-by: Viresh Kumar <viresh.kumar@st.com>
    Signed-off-by: Jeff Garzik <jgarzik@redhat.com>

commit 7414a1b8b2b99093d6a271a1220557e87dc1ae94
Author: Rajeev KUMAR <rajeev-dlh.kumar@st.com>
Date:   Wed Feb 1 16:12:17 2012 +0530

    dmaengine/dw_dmac: Hibernation support in dw_dmac
    
    The suspend and resume implementation is through dev_pm_ops in dmac. So
    in order to support hibernation, freeze, thaw, restore and poweroff
    features are required.
    
    Signed-off-by: Rajeev Kumar <rajeev-dlh.kumar@st.com>
    Acked-by: Viresh Kumar <viresh.kumar@st.com>
    Signed-off-by: Vinod Koul <vinod.koul@linux.intel.com>

commit 54b333529df25b21da462c7dcc16c7dc779d9f26
Merge: 675badfc4807 780914c3cf69
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 10 12:00:53 2011 -0700

    Merge branch 'upstream' of git://git.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://git.linux-mips.org/pub/scm/upstream-linus: (28 commits)
      MIPS: Alchemy: fix xxs1500 build error
      MIPS: Invalidate old TLB mappings when updating huge page PTEs.
      MIPS: Hibernation: Fixes for PAGE_SIZE >= 64kb
      MIPS: JZ4740: Set one-shot feature flag for the clockevent
      MIPS: JZ4740: Export symbols to the watchdog driver module
      MIPS: JZ4740: Fix GCC 4.6.0 build error.
      MIPS: Audit: Fix success success argument pass to audit_syscall_exit
      MIPS: Fix calc_vmlinuz_load_addr build warnings.
      MIPS: Alchemy: Fix GCC 4.6.0 build error.
      MIPS: Document former use of timerfd(2) syscall number.
      MIPS: IP27: Fix GCC 4.6.0 build error.
      MIPS: IP27: Fix GCC 4.6.0 build error.
      MIPS: bcm63xx: Fix header_crc comment in bcm963xx_tag.h
      MIPS: Octeon: Guard the Kconfig body with CPU_CAVIUM_OCTEON
      MIPS: Octeon: Cleanup Kconfig IRQ_CPU* symbols.
      MIPS: Rename .data..mostly and properly handle it in linker script
      MIPS: MSP: Fix build error
      MIPS: MSP71xx: Fix typo in msp_per_irq_controller
      MIPS: Loongson: Fix GCC 2.6.0 build error.
      MIPS: Jazz: Fix GCC 4.6.0 build error
      ...

commit f850548ef88e5ff9e40bae9e1a7140bef0653e6b
Author: Wu Zhangjin <wuzhangjin@gmail.com>
Date:   Sun Apr 24 05:56:59 2011 +0800

    MIPS: Hibernation: Fixes for PAGE_SIZE >= 64kb
    
    PAGE_SIZE >= 64kb (1 << 16) is too big to be the immediate of the
    addiu/daddiu instruction, so, use addu/daddu instruction instead.
    
    The following compiling error is fixed:
    
    AS      arch/mips/power/hibernate.o
    arch/mips/power/hibernate.S: Assembler messages:
    arch/mips/power/hibernate.S:38: Error: expression out of range
    make[2]: *** [arch/mips/power/hibernate.o] Error 1
    make[1]: *** [arch/mips/power] Error 2
    
    Reported-by: Roman Mamedov <rm@romanrm.ru>
    Signed-off-by: Wu Zhangjin <wuzhangjin@gmail.com>
    To: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/2313/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit b77c254d8d66e5e9aa81239fedba9f3d568097d9
Author: Hugh Dickins <hughd@google.com>
Date:   Thu Sep 9 16:38:09 2010 -0700

    swap: prevent reuse during hibernation
    
    commit b73d7fcecd93dc15eaa3c45c8c587b613f6673c4 upstream.
    
    Move the hibernation check from scan_swap_map() into try_to_free_swap():
    to catch not only the common case when hibernation's allocation itself
    triggers swap reuse, but also the less likely case when concurrent page
    reclaim (shrink_page_list) might happen to try_to_free_swap from a page.
    
    Hibernation already clears __GFP_IO from the gfp_allowed_mask, to stop
    reclaim from going to swap: check that to prevent swap reuse too.
    
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Cc: Ondrej Zary <linux@rainbow-software.org>
    Cc: Andrea Gelmini <andrea.gelmini@gmail.com>
    Cc: Balbir Singh <balbir@in.ibm.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Nigel Cunningham <nigel@tuxonice.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit b73d7fcecd93dc15eaa3c45c8c587b613f6673c4
Author: Hugh Dickins <hughd@google.com>
Date:   Thu Sep 9 16:38:09 2010 -0700

    swap: prevent reuse during hibernation
    
    Move the hibernation check from scan_swap_map() into try_to_free_swap():
    to catch not only the common case when hibernation's allocation itself
    triggers swap reuse, but also the less likely case when concurrent page
    reclaim (shrink_page_list) might happen to try_to_free_swap from a page.
    
    Hibernation already clears __GFP_IO from the gfp_allowed_mask, to stop
    reclaim from going to swap: check that to prevent swap reuse too.
    
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: "Rafael J. Wysocki" <rjw@sisk.pl>
    Cc: Ondrej Zary <linux@rainbow-software.org>
    Cc: Andrea Gelmini <andrea.gelmini@gmail.com>
    Cc: Balbir Singh <balbir@in.ibm.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Nigel Cunningham <nigel@tuxonice.net>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit bf4f42b441919417386beb2f9c58e802e7de89df
Merge: 1e31b0ffbb3b 2f9c6b0a91a0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jul 1 09:36:49 2010 -0700

    Merge branch 'drm-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6
    
    * 'drm-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6: (27 commits)
      drm/radeon/kms: remove rv100 bios connector quirk
      drm/radeon/kms/pm: fix power state indexing on igp chips in dynpm mode
      DRM / radeon / KMS: Fix hibernation regression related to radeon PM (was: Re: [Regression, post-2.6.34] Hibernation broken on machines with radeon/KMS and r300)
      drm/radeon/kms/igp: fix possible divide by 0 in bandwidth code (v2)
      drm/radeon: add quirk to make HP nx6125 laptop resume.
      drm/radeon/kms: add some missing regs to evergreen gpu init
      drm/radeon/kms: fix typos in evergreen command checker
      drm/radeon/kms: avoid oops on mac r4xx cards
      fb: fix colliding defines for fb flags.
      drm/radeon/kms: Force HDP_NONSURF to maximum size
      drm/radeon/kms: disable frac fb dividers for rs6xx
      drm/radeon/kms: don't read attempt to read bios from VRAM on unposted GPU.
      drm/radeon/kms: fix typo in evergreen_gpu_init
      drm/radeon/kms: return ret in cursor_set failure path
      drm/ttm: non pooled page allocation should have GFP_USER set
      drm/radeon/r100/r200: fix calculation of compressed cube maps
      drm/radeon/r200: handle more hw tex coord types
      drm/radeon/kms: CS checker texture fixes for r1xx/r2xx/r3xx
      drm/radeon: add fake RN50 table for powerpc
      drm/fb: Fix video= mode computation
      ...

commit 3f53eb6f84545a7fc55a36657755371f42c63fca
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Thu Jun 17 23:02:27 2010 +0000

    DRM / radeon / KMS: Fix hibernation regression related to radeon PM (was: Re: [Regression, post-2.6.34] Hibernation broken on machines with radeon/KMS and r300)
    
    There is a regression from 2.6.34 related to the recent radeon power
    management changes, caused by attempting to cancel a delayed work
    item that's never been scheduled.  However, the code as is has some
    other issues potentially leading to visible problems.
    
    First, the mutex around cancel_delayed_work() in radeon_pm_suspend()
    doesn't really serve any purpose, because cancel_delayed_work() only
    tries to delete the work's timer.  Moreover, it doesn't prevent the
    work handler from running, so the handler can do some wrong things if
    it wins the race and in that case it will rearm itself to do some
    more wrong things going forward.  So, I think it's better to wait for
    the handler to return in case it's already been queued up for
    execution.  Also, it should be prevented from rearming itself in that
    case.
    
    Second, in radeon_set_pm_method() the cancel_delayed_work() is not
    sufficient to prevent the work handler from running and queing up
    itself for the next run (the failure scenario is that
    cancel_delayed_work() returns 0, so the handler is run, it waits on
    the mutex and then rearms itself after the mutex has been released),
    so again the work handler should be prevented from rearming itself in
    that case..
    
    Finally, there's a potential deadlock in radeon_pm_fini(), because
    cancel_delayed_work_sync() is called under rdev->pm.mutex, but the
    work handler tries to acquire the same mutex (if it wins the race).
    
    Fix the issues described above.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reviewed-by: Alex Deucher <alexdeucher@gmail.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 64eb38a6e9732f45d518b9e522d613195c930e8f
Author: Anton Vorontsov <avorontsov@ru.mvista.com>
Date:   Mon Oct 5 07:44:27 2009 +0000

    powerpc: Make it possible to select hibernation on all PowerPCs
    
    Just as with kexec, hibernation may fail even on well-tested platforms:
    some PCI device, a driver of which doesn't play well with hibernation,
    is enough to break resuming.
    
    Hibernation code is not much platform dependent, and hiding features only
    because these were not verified on a particular hardware is
    counterproductive: we just prevent the features from being widely tested.
    
    For example, with this patch I just tested hibernation on a MPC83xx
    board, and it works quite well, modulo a few drivers that need some
    fixing.
    
    So, let's make it possible to select hibernation support for all
    PowerPCs, then let's wait for any possible bug reports, and actually fix
    (or just collect ;-) the bugs instead of hiding them. If some platforms
    really can't stand hibernation, we can make a blacklist, with proper
    comments why exactly hibernation doesn't work, whether it is possible to
    fix, and what needs to be done to fix it.
    
    CONFIG_HIBERNATION is still =n by default, so the commit doesn't change
    anything apart from ability to set it to =y.
    
    I'm not sure if EXPERIMENTAL dependency is needed, I'd rather not add it
    for a few reasons:
    
    1) It doesn't matter much, for distro kernels user has no clue that some
       feature is experimental. Majority of defconfigs enable EXPERIMENTAL
       anyway (90 vs. 4, which, btw, means that EXPERIMENTAL is overused
       in Kconfigs);
    
    2) EXPERIMENTAL is a good thing for features that change default
       behaviour of a kernel, while for hibernation user has to explicitly
       issue 'echo disk > /sys/power/state' to trigger any hibernation bugs;
    
    3) Per init/Kconfig, EXPERIMENTAL is a good thing to scare and discourage
       users from 'widespread use of a feature', while we want to encourage
       that use.
    
    Signed-off-by: Anton Vorontsov <avorontsov@ru.mvista.com>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

commit 6cb87823627699b0267234a210d8199b681c70e3
Author: Daniel Mack <daniel@caiaq.de>
Date:   Wed Aug 5 08:29:31 2009 +0000

    net: smsc911x: switch to new dev_pm_ops
    
    Hibernation is unsupported for now, which meets the actual
    implementation in the driver. For free/thaw, the chip's D2 state should
    be entered.
    
    Signed-off-by: Daniel Mack <daniel@caiaq.de>
    Acked-by: <steve.glendinning@smsc.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dddac6a7b445de95515f64fdf82fe5dc36c02f26
Author: Alan Jenkins <alan-jenkins@tuffmail.co.uk>
Date:   Wed Jul 29 21:07:55 2009 +0200

    PM / Hibernate: Replace bdget call with simple atomic_inc of i_count
    
    Create bdgrab().  This function copies an existing reference to a
    block_device.  It is safe to call from any context.
    
    Hibernation code wishes to copy a reference to the active swap device.
    Right now it calls bdget() under a spinlock, but this is wrong because
    bdget() can sleep.  It doesn't need a full bdget() because we already
    hold a reference to active swap devices (and the spinlock protects
    against swapoff).
    
    Fixes http://bugzilla.kernel.org/show_bug.cgi?id=13827
    
    Signed-off-by: Alan Jenkins <alan-jenkins@tuffmail.co.uk>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

commit c82e6d450fda56cb2d4f68534173d3cd11b32f9f
Merge: c3cb5e193937 a620c1632629
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jun 24 10:47:38 2009 -0700

    Merge branch 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus
    
    * 'upstream' of git://ftp.linux-mips.org/pub/scm/upstream-linus:
      Staging: octeon-ethernet: Fix race freeing transmit buffers.
      Staging: octeon-ethernet: Convert to use net_device_ops.
      MIPS: Cavium: Add CPU hotplugging code.
      MIPS: SMP: Allow suspend and hibernation if CPU hotplug is available
      MIPS: Add arch generic CPU hotplug
      DMA: txx9dmac: use dma_unmap_single if DMA_COMPL_{SRC,DEST}_UNMAP_SINGLE set
      MIPS: Sibyte: Fix build error if CONFIG_SERIAL_SB1250_DUART is undefined.
      MIPS: MIPSsim: Fix build error if MSC01E_INT_BASE is undefined.
      MIPS: Hibernation: Remove SMP TLB and cacheflushing code.
      MIPS: Build fix - include <linux/smp.h> into all smp_processor_id() users.
      MIPS: bug.h Build fix - include <linux/compiler.h>.

commit 44eeab67416711db9b84610ef18c99a60415dff8
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Fri Jun 19 15:01:44 2009 +0100

    MIPS: Hibernation: Remove SMP TLB and cacheflushing code.
    
    We can't perform any flushes on SMP from swsusp_arch_resume because
    interrupts are disabled.  A cross-CPU flush is unnecessary anyway
    because all but the local CPU have already been disabled.  A local
    flush is not needed either because we didn't change any mappings.  So
    just delete the code.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 2ef7f0dab6b3d171b6aff00a47077385ae3155b5
Author: Magnus Damm <damm@igel.co.jp>
Date:   Fri Mar 6 09:47:02 2009 +0000

    sh: hibernation support
    
    Add Suspend-to-disk / swsusp / CONFIG_HIBERNATION support
    to the SuperH architecture.
    
    To suspend, use "swapon /dev/sda2; echo disk > /sys/power/state"
    To resume, pass "resume=/dev/sda2" on the kernel command line.
    
    The patch "pm: rework includes, remove arch ifdefs V2" is
    needed to allow the generic swsusp code to build properly.
    
    Hibernation is not enabled with this patch though, a patch
    setting ARCH_HIBERNATION_POSSIBLE will be submitted later.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 7ba07d16bd62f931efec1fc8e63bf1aeebfe42a9
Author: Ondrej Zary <linux@rainbow-software.org>
Date:   Wed Feb 11 13:08:43 2009 -0800

    pata_it821x: resume from hibernation fails with RAID volume
    
    Hibernation didn't work for me since I started to use IT8212 controller.
    I did some debugging (booting with no_console_suspend init=/bin/sh).
    
    Found that resume fails (2.6.28) with "serial number mismatch 'some
    garbage' != 'some other garbage'" and "revalidation failed" messages.
    That's because the controller firmware fills different serial number in
    the IDENTIFY every boot.
    
    The patch below fixes the resume simply clearing the serial number.  The
    proper fix would be probably to fill in the serial number of the RAID
    volume instead.  I assume that there must be something like that stored on
    the drives but I don't know where.
    
    Fix resume on pata_it821x RAID volume by clearing the serial number in
    IDENTIFY data, which is otherwise different on each boot.
    
    Signed-off-by: Ondrej Zary <linux@rainbow-software.org>
    Acked-by: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Jeff Garzik <jgarzik@redhat.com>

commit aced3cee555f0b2fd58501e9b8a8a1295011e134
Author: Ingo Molnar <mingo@elte.hu>
Date:   Tue Jan 27 17:03:24 2009 +0100

    x86/Voyager: remove HIBERNATION Kconfig quirk
    
    Voyager has this hibernation quirk:
    
     config ARCH_HIBERNATION_POSSIBLE
            def_bool y
            depends on !SMP || !X86_VOYAGER
    
    Hibernation is a generic facility provided on all x86 platforms. If it
    is buggy on Voyager then that bug should be fixed - not worked around.
    
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 545ffd58adc86b8d33449dab44fe81b503a6f81b
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Thu Jan 22 23:36:56 2009 +0100

    PCI PM: Fix hibernation breakage on EeePC 701
    
    Hibernation breaks on EeePC 701 as a result of attempting to put one
    of its (driverless) devices into a low power state.  Avoid that by
    not attepmting to power manage driverless devices during hibernation.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Reported-and-tested-by: Alan Jenkins <alan-jenkins@tuffmail.co.uk>
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>

commit 490a8d70cdd77d6262c3d5815bc0b1c54a3a63f8
Merge: 8c022fdd5fc1 5f451fe1ab5d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jan 27 07:50:41 2009 -0800

    Merge branch 'hibern_fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/jgarzik/libata-dev
    
    * 'hibern_fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/jgarzik/libata-dev:
      SATA PIIX: Blacklist system that spins off disks during ACPI power off
      SATA Sil: Blacklist system that spins off disks during ACPI power off
      SATA AHCI: Blacklist system that spins off disks during ACPI power off
      SATA: Blacklisting of systems that spin off disks during ACPI power off
      DMI: Introduce dmi_first_match to make the interface more flexible
      Hibernation: Introduce system_entering_hibernation

commit abfe2d7b915c872f3a1fd203267cedebf90daa45
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Mon Jan 19 20:54:54 2009 +0100

    Hibernation: Introduce system_entering_hibernation
    
    Introduce boolean function system_entering_hibernation() returning
    'true' during the last phase of hibernation, in which devices are
    being put into low power states and the sleep state (for example,
    ACPI S4) is finally entered.
    
    Some device drivers need such a function to check if the system is
    in the final phase of hibernation.  In particular, some SATA drivers
    are going to use it for blacklisting systems in which the disks
    should not be spun down during the last phase of hibernation (the
    BIOS will do that anyway).
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Jeff Garzik <jgarzik@redhat.com>

commit 96e31022a1b6e7cb173cbb3dce1fde7ba548860a
Merge: f2005e177761 29ea5171cbd0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 13 13:13:47 2008 -0700

    Merge branch 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux-acpi-2.6
    
    * 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux-acpi-2.6: (32 commits)
      ACPI: thermal: show temperature in millidegree Celsius
      thermal: fix generic thermal I/F for hwmon
      acer-wmi: build depends on i8042
      documentation:  Move power-related files to Documentation/power/
      ACPI: buffer array too short in drivers/acpi/system.c
      acer-wmi: Add DMI quirk for mail LED support on Acer Aspire 3610/ 5610
      acer-wmi: Fix DSDT path in documentation
      acer-wmi: Make device detection error messages more descriptive
      laptops: move laptop-mode.txt to Documentation/laptops/
      ACPICA: Warn if packages with invalid references are evaluated
      ACPI: add _PRT quirks to work around broken firmware
      Hibernation: Fix mark_nosave_pages()
      ACPI: Ignore _BQC object when registering backlight device
      ACPI: WMI: Clean up handling of spec violating data blocks
      acer-wmi: Don't warn if mail LED cannot be detected
      acer-wmi: Rename mail LED correctly & remove hardcoded colour
      ACPI: use ACPI_DEBUG_PRINT instead of printk in acpi_processor_hotplug_notify()
      ACPI: button: make real parent for input devices in device tree
      toshiba_acpi: Enable autoloading
      ACPI: EC: Handle IRQ storm on Acer laptops
      ...

commit a82f7119fd940c1505fc9fdf93d835fa52bc075d
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Wed Mar 12 00:34:57 2008 +0100

    Hibernation: Fix mark_nosave_pages()
    
    There is a problem in the hibernation code that triggers on some NUMA
    systems on which pfn_valid() returns 'true' for some PFNs that don't
    belong to any zone.  Namely, there is a BUG_ON() in
    memory_bm_find_bit() that triggers for PFNs not belonging to any
    zone and passing the pfn_valid() test.  On the affected systems it
    triggers when we mark PFNs reported by the platform as not saveable,
    because the PFNs in question belong to a region mapped directly using
    iorepam() (i.e. the ACPI data area) and they pass the pfn_valid()
    test.
    
    Modify memory_bm_find_bit() so that it returns an error if given PFN
    doesn't belong to any zone instead of crashing the kernel and ignore
    the result returned by it in mark_nosave_pages(), while marking the
    "nosave" memory regions.
    
    This doesn't affect the hibernation functionality, as we won't touch
    the PFNs in question anyway.
    
    http://bugzilla.kernel.org/show_bug.cgi?id=9966 .
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 20f8d2a49360980f1dc0afe2ea227e3ba887e575
Merge: e6364cd3a1a3 1f1519ef597a
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Thu Feb 21 16:33:19 2008 -0800

    Merge branch 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux-acpi-2.6
    
    * 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux-acpi-2.6: (26 commits)
      PM: Make suspend_device() static
      PCI ACPI: Fix comment describing acpi_pci_choose_state
      Hibernation: Handle DEBUG_PAGEALLOC on x86
      ACPI: fix build warning
      ACPI: TSC breaks atkbd suspend
      ACPI: remove is_processor_present prototype
      acer-wmi: Add DMI match for mail LED on Acer TravelMate 4200 series
      ACPI: sparse fix, replace macro with static function
      ACPI: thinkpad-acpi: add tablet-mode reporting
      ACPI: thinkpad-acpi: minor hotkey_radio_sw fixes
      ACPI: thinkpad-acpi: improve thinkpad-acpi input device documentation
      ACPI: thinkpad-acpi: issue input events for tablet swivel events
      ACPI: thinkpad-acpi: make the video output feature optional
      ACPI: thinkpad-acpi: synchronize input device switches
      ACPI: thinkpad-acpi: always track input device open/close
      ACPI: thinkpad-acpi: trivial fix to documentation
      ACPI: thinkpad-acpi: trivial fix to module_desc typo
      intel_menlo: extract return values using PTR_ERR
      ACPI video: check for error from thermal_cooling_device_register
      ACPI thermal: extract return values using PTR_ERR
      ...

commit 8a235efad548abd2ab5ebea45a9ffa750c814375
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Wed Feb 20 01:47:44 2008 +0100

    Hibernation: Handle DEBUG_PAGEALLOC on x86
    
    Make hibernation work with CONFIG_DEBUG_PAGEALLOC set on x86, by
    checking if the pages to be copied are marked as present in the
    kernel mapping and temporarily marking them as present if that's not
    the case.  No functional modifications are introduced if
    CONFIG_DEBUG_PAGEALLOC is unset.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 687fcdf741e4a268c2c7bac8b3734de761bb9719
Merge: 215e871aaa3d a6eb84bc1e06
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Feb 2 14:29:57 2008 +1100

    Merge branch 'suspend' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux-acpi-2.6
    
    * 'suspend' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux-acpi-2.6: (38 commits)
      suspend: cleanup reference to swsusp_pg_dir[]
      PM: Remove obsolete /sys/devices/.../power/state docs
      Hibernation: Invoke suspend notifications after console switch
      Suspend: Invoke suspend notifications after console switch
      Suspend: Clean up suspend_64.c
      Suspend: Add config option to disable the freezer if architecture wants that
      ACPI: Print message before calling _PTS
      ACPI hibernation: Call _PTS before suspending devices
      Hibernation: Introduce begin() and end() callbacks
      ACPI suspend: Call _PTS before suspending devices
      ACPI: Separate disabling of GPEs from _PTS
      ACPI: Separate invocations of _GTS and _BFS from _PTS and _WAK
      Suspend: Introduce begin() and end() callbacks
      suspend: fix ia64 allmodconfig build
      ACPI: clear GPE earily in resume to avoid warning
      Suspend: Clean up Kconfig (V2)
      Hibernation: Clean up Kconfig (V2)
      Hibernation: Update messages
      Suspend: Use common prefix in messages
      Hibernation: Remove unnecessary variable declaration
      ...

commit 5a0a2f304612bd63948177fef05987f4bcaddcaf
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Fri Jan 11 01:25:21 2008 +0100

    Hibernation: Invoke suspend notifications after console switch
    
    Following the recent change in the suspend code path, switch consoles before
    calling PM notifiers during hibernation.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit caea99ef339af8e07cda8d03fa415e4b8820f400
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Tue Jan 8 00:08:44 2008 +0100

    Hibernation: Introduce begin() and end() callbacks
    
    Introduce global hibernation callback .end() and rename global
    hibernation callback .start() to .begin(), in analogy with the
    recent modifications of the global suspend callbacks.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 801e4062fda6496fe9bee3e6915a2aa108f974e5
Author: Johannes Berg <johannes@sipsolutions.net>
Date:   Sat Dec 8 02:12:39 2007 +0100

    Hibernation: Clean up Kconfig (V2)
    
    This cleans up the hibernation Kconfig and removes the need to
    declare centrally which architectures support hibernation. All
    architectures that currently support hibernation are modified
    accordingly.
    
    Signed-off-by: Johannes Berg <johannes@sipsolutions.net>
    Acked-by: Paul Mackerras <paulus@samba.org>
    Cc: Pavel Machek <pavel@suse.cz>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 23976728a48c3b76d34e17ead19addd52b3a280e
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Sat Dec 8 02:09:43 2007 +0100

    Hibernation: Update messages
    
    Make hibernation messages start with one common prefix "PM: " and use
    the word "hibernation" in the messages as a synonym of "suspend to
    disk".
    
    Turn some KERN_INFO messages into debug ones.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit b6887a29441ed5f0728b31ce90c0f0a0427317a3
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Sat Dec 8 02:07:40 2007 +0100

    Hibernation: Remove unnecessary variable declaration
    
    Remove the unnecessary extern declaration of resume_file[]
    from kernel/power/swap.c .
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 9575809c6fc15e7b6bb1932b6104c80a6d4ffdc9
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Sat Dec 8 02:06:57 2007 +0100

    Hibernation: Fix comment in disk.c
    
    Fix a comment in kernel/power/disk.c so that it doesn't contain lines
    longer that 80 characters.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 72df68ca8e006a0107933c4fb13c741a0a48163f
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Sat Dec 8 02:04:21 2007 +0100

    Hibernation: Move low level resume to disk.c
    
    Move the low level restore code to kernel/power/disk.c , since the
    corresponding low level hibernation code is already there.
    
    Make restore fail if device_power_down(PMSG_PRETHAW) returns an
    error.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 4cc79776c9ea431790e04fcacbebb30d28eb1570
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Mon Nov 19 23:42:31 2007 +0100

    Hibernation: New testing facility (rev. 2)
    
    Make it possible to test the hibernation core code with the help of the
    /sys/power/pm_test attribute introduced for suspend testing in the previous
    patch.
    
    Writing an appropriate string to this file causes the hibernation code to work
    in one of the test modes defined as follows:
    
    freezer
    - test the freezing of processes
    
    devices
    - test the freezing of processes and suspending of devices
    
    platform
    - test the freezing of processes, suspending of devices and platform global
      control methods(*)
    
    processors
    - test the freezing of processes, suspending of devices, platform global
      control methods(*) and the disabling of nonboot CPUs
    
    core
    - test the freezing of processes, suspending of devices, platform global
      control methods(*), the disabling of nonboot CPUs and suspending of
      platform/system devices
    
    (*) - the platform global control methods are only available on ACPI systems
          and are only tested if the hibernation mode is set to "platform"
    
    Then, if a hibernation is started by normal means, the hibernation core will
    perform its normal operations up to the point indicated by given test level.
    Next, it will wait for 5 seconds and carry out the resume operations needed to
    transition the system back to the fully functional state.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit c3e94d899c864e558f938f9845ddb8c2e5d5ccd0
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Nov 19 23:38:25 2007 +0100

    Hibernation: Add PM_RESTORE_PREPARE and PM_POST_RESTORE notifiers (rev. 2)
    
    Add PM_RESTORE_PREPARE and PM_POST_RESTORE notifiers to the PM core, to be used
    in analogy with the existing PM_HIBERNATION_PREPARE and PM_POST_HIBERNATION
    notifiers.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: "Rafael J. Wysocki" <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 2f8ed1c60b06b797bf79a1dc540f0bed8c9d75a0
Author: Adrian Bunk <bunk@kernel.org>
Date:   Mon Nov 19 23:36:20 2007 +0100

    Hibernation: Move function prototypes to header
    
    This patch moves the prototypes of count_highmem_pages() and
    restore_highmem() to kernel/power/power.h
    
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 3010f8caa48ed38679cc32b0d8e84b82cb8d9980
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Fri Oct 26 01:05:05 2007 +0200

    Hibernation: Introduce exportable suspend ioctls header (rev. 2)
    
    Move the definitions of hibernation ioctls to a separate header file in
    include/linux, which can be exported to the user space.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit cc5d207c85b9a6fafebe2856ead0a9360978c8cd
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Fri Oct 26 01:03:33 2007 +0200

    Hibernation: Correct definitions of some ioctls (rev. 2)
    
    Three ioctl numbers belonging to the hibernation userland interface,
    SNAPSHOT_ATOMIC_SNAPSHOT, SNAPSHOT_AVAIL_SWAP, SNAPSHOT_GET_SWAP_PAGE,
    are defined in a wrong way (eg. not portable).  Provide new ioctl numbers for
    these ioctls and mark the existing ones as deprecated.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 96f737490cfc368fdafe49769f52fc8460f9349f
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Fri Oct 26 01:02:15 2007 +0200

    Hibernation: Mark SNAPSHOT_SET_SWAP_FILE ioctl as deprecated (rev. 2)
    
    Mark the SNAPSHOT_SET_SWAP_FILE ioctl belonging to the hibernation userland
    interface as deprecated.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit eb57c1cf059630454b40fb8bb124e3f318d241f8
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Fri Oct 26 01:01:10 2007 +0200

    Hibernation: Rework platform support ioctls (rev. 2)
    
    Modify the hibernation userland interface by adding two new ioctls to it,
    SNAPSHOT_PLATFORM_SUPPORT and SNAPSHOT_POWER_OFF, that can be used,
    respectively, to switch the hibernation platform support on/off and to make the
    kernel transition the system to the hibernation state (eg. ACPI S4) using the
    platform (eg. ACPI) driver.
    
    These ioctls are intended to replace the misdesigned SNAPSHOT_PMOPS ioctl,
    which from now is regarded as obsolete and will be removed in the future.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit af508b34d27e3341287d89e0eae6752fdb1b873f
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Fri Oct 26 00:59:31 2007 +0200

    Hibernation: Introduce SNAPSHOT_GET_IMAGE_SIZE ioctl
    
    Add a new ioctl, SNAPSHOT_GET_IMAGE_SIZE, returning the size of the (just
    created) hibernation image, to the hibernation userland interface.
    
    This ioctl is necessary so that the userland utilities using the interface need
    not access the hibernation image header, owned by the kernel, in order to obtain
    the size of the image.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 5867a78f41f84e5388448da62c183255dc22601f
Author: Andrew Morton <akpm@linux-foundation.org>
Date:   Mon Dec 17 16:19:45 2007 -0800

    revert "Hibernation: Use temporary page tables for kernel text mapping on x86_64"
    
    Revert commit efa4d2fb047b25a6be67fe92178a2a78da6b3f6a ("Hibernation:
    Use temporary page tables for kernel text mapping on x86_64") because it
    causes my t61p to reboot right at the end of resume-from-disk.  For
    reasons unknown at this time.
    
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Andi Kleen <ak@suse.de>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Acked-by: "Rafael J. Wysocki" <rjw@sisk.pl>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c4ec20717313daafba59225f812db89595952b83
Merge: ec2626815bf9 00a2b433557f
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Fri Oct 19 13:12:46 2007 -0700

    Merge branch 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux-acpi-2.6
    
    * 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux-acpi-2.6: (41 commits)
      ACPICA: hw: Don't carry spinlock over suspend
      ACPICA: hw: remove use_lock flag from acpi_hw_register_{read, write}
      ACPI: cpuidle: port idle timer suspend/resume workaround to cpuidle
      ACPI: clean up acpi_enter_sleep_state_prep
      Hibernation: Make sure that ACPI is enabled in acpi_hibernation_finish
      ACPI: suppress uninitialized var warning
      cpuidle: consolidate 2.6.22 cpuidle branch into one patch
      ACPI: thinkpad-acpi: skip blanks before the data when parsing sysfs
      ACPI: AC: Add sysfs interface
      ACPI: SBS: Add sysfs alarm
      ACPI: SBS: Add ACPI_PROCFS around procfs handling code.
      ACPI: SBS: Add support for power_supply class (and sysfs)
      ACPI: SBS: Make SBS reads table-driven.
      ACPI: SBS: Simplify data structures in SBS
      ACPI: SBS: Split host controller (ACPI0001) from SBS driver (ACPI0002)
      ACPI: EC: Add new query handler to list head.
      ACPI: Add acpi_bus_generate_event4() function
      ACPI: Battery: add sysfs alarm
      ACPI: Battery: Add sysfs support
      ACPI: Battery: Misc clean-ups, no functional changes
      ...
    
    Fix up conflicts in drivers/misc/thinkpad_acpi.[ch] manually

commit 9cd9a0058dd35268b24fa16795a92c800f4086d4
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Thu Oct 18 03:04:56 2007 -0700

    Hibernation: Enter platform hibernation state in a consistent way
    
    Make hibernation_platform_enter() execute the enter-a-sleep-state sequence
    instead of the mixed shutdown-with-entering-S4 thing.
    
    Replace the shutting down of devices done by kernel_shutdown_prepare(), before
    entering the ACPI S4 sleep state, with suspending them and the shutting down
    of sysdevs with calling device_power_down(PMSG_SUSPEND) (just like before
    entering S1 or S3, but the target state is now S4).   Also, disable the
    nonboot CPUs before entering the sleep state (S4), which generally always is a
    good idea.
    
    This is known to fix the "double disk spin down during hibernation" on some
    machines, eg.  HPC nx6325 (ref.  http://lkml.org/lkml/2007/8/7/316 and the
    following thread).   Moreover, it has been reported to make
    /sys/class/rtc/rtc0/wakealarm work correctly with hibernation for some users.
    It also generally causes the hibernation state (ACPI S4) to be entered faster.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c7e0831d385d620a58d95b25e4afa9b643f9a411
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Thu Oct 18 03:04:55 2007 -0700

    Hibernation: Check if ACPI is enabled during restore in the right place
    
    The following scenario leads to total confusion of the platform firmware on
    some boxes (eg. HPC nx6325):
    * Hibernate with ACPI enabled
    * Resume passing "acpi=off" to the boot kernel
    
    To prevent this from happening it's necessary to check if ACPI is enabled (and
    enable it if that's not the case) _right_ _after_ control has been transfered
    from the boot kernel to the image kernel, before device_power_up() is called
    (ie.  with interrupts disabled).   Enabling ACPI after calling
    device_power_up() turns out to be insufficient.
    
    For this reason, introduce new hibernation callback ->leave() that will be
    executed before device_power_up() by the restored image kernel.   To make it
    work, it also is necessary to move swsusp_suspend() from swsusp.c to disk.c
    (it's name is changed to "create_image", which is more up to the point).
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit efa4d2fb047b25a6be67fe92178a2a78da6b3f6a
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Thu Oct 18 03:04:54 2007 -0700

    Hibernation: Use temporary page tables for kernel text mapping on x86_64
    
    Use temporary page tables for the kernel text mapping during hibernation
    restore on x86_64.
    
    Without the patch, the original boot kernel's page tables that represent the
    kernel text mapping are used while the core of the image kernel is being
    restored.  However, in principle, if the boot kernel is not identical to the
    image kernel, the location of these page tables in the image kernel need not
    be the same, so we should create a safe copy of the kernel text mapping prior
    to restoring the core of the image kernel.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Cc: Andi Kleen <ak@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c30bb68c26ad7e9277f2d1dfed8347f329e1cf27
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Thu Oct 18 03:04:54 2007 -0700

    Hibernation: Pass CR3 in the image header on x86_64
    
    Since we already pass the address of restore_registers() in the image header,
    we can also pass the value of the CR3 register from before the hibernation in
    the same way.  This will allow us to avoid using init_level4_pgt page tables
    during the restore.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Cc: Andi Kleen <ak@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d158cbdf39ffaec9dd5299fdfdfdd2c7897a71dc
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Thu Oct 18 03:04:53 2007 -0700

    Hibernation: Arbitrary boot kernel support on x86_64
    
    Make it possible to restore a hibernation image on x86_64 with the help of a
    kernel different from the one in the image.
    
    The idea is to split the core restoration code into two separate parts and to
    place each of them in a different page.   The first part belongs to the boot
    kernel and is executed as the last step of the image kernel's memory
    restoration procedure.   Before being executed, it is relocated to a safe page
    that won't be overwritten while copying the image kernel pages.
    
    The final operation performed by it is a jump to the second part of the core
    restoration code that belongs to the image kernel and has just been restored.
    This code makes the CPU switch to the image kernel's page tables and restores
    the state of general purpose registers (including the stack pointer) from
    before the hibernation.
    
    The main issue with this idea is that in order to jump to the second part of
    the core restoration code the boot kernel needs to know its address.
     However, this address may be passed to it in the image header.   Namely, the
    part of the image header previously used for checking if the version of the
    image kernel is correct can be replaced with some architecture specific data
    that will allow the boot kernel to jump to the right address within the image
    kernel.   These data should also be used for checking if the image kernel is
    compatible with the boot kernel (as far as the memory restroration procedure
    is concerned).  It can be done, for example, with the help of a "magic" value
    that has to be equal in both kernels, so that they can be regarded as
    compatible.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Cc: Andi Kleen <ak@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d307c4a8e826c44f9633bd3f7e60d0491e7d885a
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Thu Oct 18 03:04:52 2007 -0700

    Hibernation: Arbitrary boot kernel support - generic code
    
    Add the bits needed for supporting arbitrary boot kernels to the common
    hibernation code.
    
    To support arbitrary boot kernels, make it possible to replace the 'struct
    new_utsname' and the kernel version in the hibernation image header by some
    architecture specific data that will be used to verify if the image is valid
    and to restore the image.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Cc: Andi Kleen <ak@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8a0bb7362587807fec985f72fb0317aa8ed24835
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Tue Oct 2 13:24:08 2007 -0700

    Hibernation: Make sure that ACPI is enabled in acpi_hibernation_finish
    
    If the BIOS does not enable ACPI and the "acpi=off" command line parameter
    is passed to the boot kernel, ACPI may be disabled when the (restored)
    image kernel attempts to execute acpi_hibernation_finish().  To prevent
    this from happening we can call acpi_enable() from
    acpi_hibernation_finish() (if ACPI is already enabled, this will have no
    effect).
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 91f9aa522baa31a5af4909667487ba163e849c3d
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Wed Aug 15 15:37:37 2007 +0200

    Hibernation: do not try to mark invalid PFNs as nosave
    
    On some systems some PFNs reported by the early initialization code as 'nosave'
    may be invalid. =A0If we try to set the corresponding bits in the hibernation
    bitmap, BUG_ON() in memory_bm_find_bit() will be triggered and the system
    won't be able to boot (cf. https://bugzilla.novell.com/show_bug.cgi?id=296242).
    
    Prevent this from happening by verifying if the 'nosave' PFNs are valid in
    mark_nosave_pages().
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit c5a69adff920ddf138c3ea9886574b195d9e3d52
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Fri Aug 10 13:00:57 2007 -0700

    Hibernation: do not try to mark invalid PFNs as nosave
    
    On some systems some PFNs reported by the early initialization code as
    'nosave' may be invalid.  If we try to set the corresponding bits in the
    hibernation bitmap, BUG_ON() in memory_bm_find_bit() will be triggered and
    the system won't be able to boot (cf.
    https://bugzilla.novell.com/show_bug.cgi?id=296242).
    
    Prevent this from happening by verifying if the 'nosave' PFNs are valid in
    mark_nosave_pages().
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Acked-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit b1457bcc3a00a0446c7f6e2f22fd24b6d8d0a309
Author: Rafael J. Wysocki <rjw@rjwysocki.net>
Date:   Thu Jul 19 01:47:31 2007 -0700

    Hibernation: prepare to enter the low power state
    
    During hibernation we call hibernation_ops->prepare() before creating the image,
    but then, before saving it, we cancel the power transition by calling
    hibernation_ops->finish().  Thus prior to calling hibernation_ops->enter() we
    should let the platform firmware know that we're going to enter the low power
    state after all.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Cc: Gautham R Shenoy <ego@in.ibm.com>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Nigel Cunningham <nigel@nigel.suspend2.net>
    Cc: Oleg Nesterov <oleg@tv-sign.ru>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 49c3df6aaa6a51071fc135273d1a2515d019099f
Author: Vivek Goyal <vgoyal@in.ibm.com>
Date:   Wed May 2 19:27:07 2007 +0200

    [PATCH] x86: Move swsusp __pa() dependent code to arch portion
    
    o __pa() should be used only on kernel linearly mapped virtual addresses
      and not on kernel text and data addresses.
    
    o Hibernation code needs to determine the physical address associated
      with kernel symbol to mark a section boundary which contains pages which
      don't have to be saved and restored during hibernate/resume operation.
    
    o Move this piece of code in arch dependent section. So that architectures
      which don't have kernel text/data mapped into kernel linearly mapped
      region can come up with their own ways of determining physical addresses
      associated with a kernel text.
    
    Signed-off-by: Vivek Goyal <vgoyal@in.ibm.com>
    Signed-off-by: Andi Kleen <ak@suse.de>
